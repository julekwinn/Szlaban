
Projekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000136cc  08000238  08000238  00001238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001351  08013908  08013908  00014908  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 CMOX_CTA_PROTECTED_DATA 00000500  08014c5c  08014c5c  00015c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000008  0801515c  0801515c  0001615c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000004  08015164  08015164  00016164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .fini_array   00000004  08015168  08015168  00016168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .data         000001f8  20000000  0801516c  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          000006f4  200001f8  08015364  000171f8  2**2
                  ALLOC
  9 ._user_heap_stack 00000604  200008ec  08015364  000178ec  2**0
                  ALLOC
 10 .ARM.attributes 0000003a  00000000  00000000  000171f8  2**0
                  CONTENTS, READONLY
 11 .debug_info   000204d0  00000000  00000000  00017232  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000474e  00000000  00000000  00037702  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000017e0  00000000  00000000  0003be50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000121c  00000000  00000000  0003d630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00036161  00000000  00000000  0003e84c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000233c4  00000000  00000000  000749ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00135c3b  00000000  00000000  00097d71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  001cd9ac  2**0
                  CONTENTS, READONLY
 19 .iar_vfe_header 00000040  00000000  00000000  001cd9f0  2**2
                  CONTENTS, READONLY
 20 .debug_frame  00007808  00000000  00000000  001cda30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  001d5238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	200001f8 	.word	0x200001f8
 8000254:	00000000 	.word	0x00000000
 8000258:	080138ec 	.word	0x080138ec

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	200001fc 	.word	0x200001fc
 8000274:	080138ec 	.word	0x080138ec

08000278 <cmox_cipher_encrypt>:
 8000278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800027a:	460c      	mov	r4, r1
 800027c:	4611      	mov	r1, r2
 800027e:	461a      	mov	r2, r3
 8000280:	b084      	sub	sp, #16
 8000282:	0005      	movs	r5, r0
 8000284:	4b10      	ldr	r3, [pc, #64]	@ (80002c8 <cmox_cipher_encrypt+0x50>)
 8000286:	d01b      	beq.n	80002c0 <cmox_cipher_encrypt+0x48>
 8000288:	6868      	ldr	r0, [r5, #4]
 800028a:	283a      	cmp	r0, #58	@ 0x3a
 800028c:	bf18      	it	ne
 800028e:	4b0f      	ldrne	r3, [pc, #60]	@ (80002cc <cmox_cipher_encrypt+0x54>)
 8000290:	d116      	bne.n	80002c0 <cmox_cipher_encrypt+0x48>
 8000292:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8000294:	b90c      	cbnz	r4, 800029a <cmox_cipher_encrypt+0x22>
 8000296:	b109      	cbz	r1, 800029c <cmox_cipher_encrypt+0x24>
 8000298:	e012      	b.n	80002c0 <cmox_cipher_encrypt+0x48>
 800029a:	b188      	cbz	r0, 80002c0 <cmox_cipher_encrypt+0x48>
 800029c:	b182      	cbz	r2, 80002c0 <cmox_cipher_encrypt+0x48>
 800029e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80002a0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80002a2:	b907      	cbnz	r7, 80002a6 <cmox_cipher_encrypt+0x2e>
 80002a4:	b966      	cbnz	r6, 80002c0 <cmox_cipher_encrypt+0x48>
 80002a6:	b158      	cbz	r0, 80002c0 <cmox_cipher_encrypt+0x48>
 80002a8:	f8dd c038 	ldr.w	ip, [sp, #56]	@ 0x38
 80002ac:	9002      	str	r0, [sp, #8]
 80002ae:	9601      	str	r6, [sp, #4]
 80002b0:	f8cd c00c 	str.w	ip, [sp, #12]
 80002b4:	9700      	str	r7, [sp, #0]
 80002b6:	4620      	mov	r0, r4
 80002b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80002ba:	682c      	ldr	r4, [r5, #0]
 80002bc:	47a0      	blx	r4
 80002be:	4603      	mov	r3, r0
 80002c0:	4618      	mov	r0, r3
 80002c2:	b005      	add	sp, #20
 80002c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002c6:	bf00      	nop
 80002c8:	00010003 	.word	0x00010003
 80002cc:	00010002 	.word	0x00010002

080002d0 <cmox_cipher_decrypt>:
 80002d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002d2:	460c      	mov	r4, r1
 80002d4:	4611      	mov	r1, r2
 80002d6:	461a      	mov	r2, r3
 80002d8:	b084      	sub	sp, #16
 80002da:	0005      	movs	r5, r0
 80002dc:	4b10      	ldr	r3, [pc, #64]	@ (8000320 <cmox_cipher_decrypt+0x50>)
 80002de:	d01c      	beq.n	800031a <cmox_cipher_decrypt+0x4a>
 80002e0:	6868      	ldr	r0, [r5, #4]
 80002e2:	f110 0f3b 	cmn.w	r0, #59	@ 0x3b
 80002e6:	bf18      	it	ne
 80002e8:	4b0e      	ldrne	r3, [pc, #56]	@ (8000324 <cmox_cipher_decrypt+0x54>)
 80002ea:	d116      	bne.n	800031a <cmox_cipher_decrypt+0x4a>
 80002ec:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80002ee:	b90c      	cbnz	r4, 80002f4 <cmox_cipher_decrypt+0x24>
 80002f0:	b109      	cbz	r1, 80002f6 <cmox_cipher_decrypt+0x26>
 80002f2:	e012      	b.n	800031a <cmox_cipher_decrypt+0x4a>
 80002f4:	b188      	cbz	r0, 800031a <cmox_cipher_decrypt+0x4a>
 80002f6:	b182      	cbz	r2, 800031a <cmox_cipher_decrypt+0x4a>
 80002f8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80002fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80002fc:	b907      	cbnz	r7, 8000300 <cmox_cipher_decrypt+0x30>
 80002fe:	b966      	cbnz	r6, 800031a <cmox_cipher_decrypt+0x4a>
 8000300:	b158      	cbz	r0, 800031a <cmox_cipher_decrypt+0x4a>
 8000302:	f8dd c038 	ldr.w	ip, [sp, #56]	@ 0x38
 8000306:	9002      	str	r0, [sp, #8]
 8000308:	9601      	str	r6, [sp, #4]
 800030a:	f8cd c00c 	str.w	ip, [sp, #12]
 800030e:	9700      	str	r7, [sp, #0]
 8000310:	4620      	mov	r0, r4
 8000312:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8000314:	682c      	ldr	r4, [r5, #0]
 8000316:	47a0      	blx	r4
 8000318:	4603      	mov	r3, r0
 800031a:	4618      	mov	r0, r3
 800031c:	b005      	add	sp, #20
 800031e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000320:	00010003 	.word	0x00010003
 8000324:	00010002 	.word	0x00010002

08000328 <cmox_cipher_innerCompute>:
 8000328:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 800032c:	4604      	mov	r4, r0
 800032e:	460d      	mov	r5, r1
 8000330:	6821      	ldr	r1, [r4, #0]
 8000332:	4616      	mov	r6, r2
 8000334:	461f      	mov	r7, r3
 8000336:	684a      	ldr	r2, [r1, #4]
 8000338:	4790      	blx	r2
 800033a:	4680      	mov	r8, r0
 800033c:	f5b8 3f80 	cmp.w	r8, #65536	@ 0x10000
 8000340:	d11d      	bne.n	800037e <cmox_cipher_innerCompute+0x56>
 8000342:	6823      	ldr	r3, [r4, #0]
 8000344:	4639      	mov	r1, r7
 8000346:	9a08      	ldr	r2, [sp, #32]
 8000348:	689f      	ldr	r7, [r3, #8]
 800034a:	4620      	mov	r0, r4
 800034c:	47b8      	blx	r7
 800034e:	4680      	mov	r8, r0
 8000350:	f5b8 3f80 	cmp.w	r8, #65536	@ 0x10000
 8000354:	d113      	bne.n	800037e <cmox_cipher_innerCompute+0x56>
 8000356:	6823      	ldr	r3, [r4, #0]
 8000358:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800035a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800035c:	68df      	ldr	r7, [r3, #12]
 800035e:	4620      	mov	r0, r4
 8000360:	47b8      	blx	r7
 8000362:	4680      	mov	r8, r0
 8000364:	f5b8 3f80 	cmp.w	r8, #65536	@ 0x10000
 8000368:	d109      	bne.n	800037e <cmox_cipher_innerCompute+0x56>
 800036a:	4629      	mov	r1, r5
 800036c:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800036e:	4632      	mov	r2, r6
 8000370:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8000372:	9000      	str	r0, [sp, #0]
 8000374:	6825      	ldr	r5, [r4, #0]
 8000376:	4620      	mov	r0, r4
 8000378:	6a2e      	ldr	r6, [r5, #32]
 800037a:	47b0      	blx	r6
 800037c:	4680      	mov	r8, r0
 800037e:	6821      	ldr	r1, [r4, #0]
 8000380:	4620      	mov	r0, r4
 8000382:	680a      	ldr	r2, [r1, #0]
 8000384:	4790      	blx	r2
 8000386:	4640      	mov	r0, r8
 8000388:	e8bd 81f6 	ldmia.w	sp!, {r1, r2, r4, r5, r6, r7, r8, pc}

0800038c <CMOX_CTR_ENC_AESFAST_IMPL>:
 800038c:	0e39 0800 453c 0801                         9...<E..

08000394 <cmox_ctr_compute>:
 8000394:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000396:	b0cb      	sub	sp, #300	@ 0x12c
 8000398:	4604      	mov	r4, r0
 800039a:	460d      	mov	r5, r1
 800039c:	4616      	mov	r6, r2
 800039e:	461f      	mov	r7, r3
 80003a0:	4909      	ldr	r1, [pc, #36]	@ (80003c8 <cmox_ctr_compute+0x34>)
 80003a2:	a805      	add	r0, sp, #20
 80003a4:	f000 fd58 	bl	8000e58 <cmox_ctr_construct>
 80003a8:	9953      	ldr	r1, [sp, #332]	@ 0x14c
 80003aa:	9a52      	ldr	r2, [sp, #328]	@ 0x148
 80003ac:	9104      	str	r1, [sp, #16]
 80003ae:	9951      	ldr	r1, [sp, #324]	@ 0x144
 80003b0:	9203      	str	r2, [sp, #12]
 80003b2:	9a50      	ldr	r2, [sp, #320]	@ 0x140
 80003b4:	9102      	str	r1, [sp, #8]
 80003b6:	9700      	str	r7, [sp, #0]
 80003b8:	9201      	str	r2, [sp, #4]
 80003ba:	4633      	mov	r3, r6
 80003bc:	462a      	mov	r2, r5
 80003be:	4621      	mov	r1, r4
 80003c0:	f7ff ffb2 	bl	8000328 <cmox_cipher_innerCompute>
 80003c4:	b04b      	add	sp, #300	@ 0x12c
 80003c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003c8:	0800038c 	.word	0x0800038c

080003cc <cmox_hash_common_compute>:
 80003cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80003d0:	4604      	mov	r4, r0
 80003d2:	460e      	mov	r6, r1
 80003d4:	6821      	ldr	r1, [r4, #0]
 80003d6:	4617      	mov	r7, r2
 80003d8:	461d      	mov	r5, r3
 80003da:	684a      	ldr	r2, [r1, #4]
 80003dc:	4790      	blx	r2
 80003de:	4680      	mov	r8, r0
 80003e0:	f5b8 3f00 	cmp.w	r8, #131072	@ 0x20000
 80003e4:	d119      	bne.n	800041a <cmox_hash_common_compute+0x4e>
 80003e6:	6822      	ldr	r2, [r4, #0]
 80003e8:	9906      	ldr	r1, [sp, #24]
 80003ea:	4620      	mov	r0, r4
 80003ec:	6893      	ldr	r3, [r2, #8]
 80003ee:	4798      	blx	r3
 80003f0:	4680      	mov	r8, r0
 80003f2:	f5b8 3f00 	cmp.w	r8, #131072	@ 0x20000
 80003f6:	d110      	bne.n	800041a <cmox_hash_common_compute+0x4e>
 80003f8:	6823      	ldr	r3, [r4, #0]
 80003fa:	4631      	mov	r1, r6
 80003fc:	463a      	mov	r2, r7
 80003fe:	68de      	ldr	r6, [r3, #12]
 8000400:	4620      	mov	r0, r4
 8000402:	47b0      	blx	r6
 8000404:	4680      	mov	r8, r0
 8000406:	f5b8 3f00 	cmp.w	r8, #131072	@ 0x20000
 800040a:	d106      	bne.n	800041a <cmox_hash_common_compute+0x4e>
 800040c:	6823      	ldr	r3, [r4, #0]
 800040e:	4629      	mov	r1, r5
 8000410:	9a07      	ldr	r2, [sp, #28]
 8000412:	691d      	ldr	r5, [r3, #16]
 8000414:	4620      	mov	r0, r4
 8000416:	47a8      	blx	r5
 8000418:	4680      	mov	r8, r0
 800041a:	6821      	ldr	r1, [r4, #0]
 800041c:	4620      	mov	r0, r4
 800041e:	680a      	ldr	r2, [r1, #0]
 8000420:	4790      	blx	r2
 8000422:	4640      	mov	r0, r8
 8000424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000428 <cmox_sha256_setDefaultMacLen>:
 8000428:	2120      	movs	r1, #32
 800042a:	6041      	str	r1, [r0, #4]
 800042c:	4770      	bx	lr

0800042e <cmox_sha256_getDefaultMacLen>:
 800042e:	2020      	movs	r0, #32
 8000430:	4770      	bx	lr

08000432 <cmox_sha256_getBlockLen>:
 8000432:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8000434:	4770      	bx	lr
	...

08000438 <CMOX_HMAC_SUPPORT_SHA256>:
 8000438:	0429 0800 042f 0800 0433 0800               ).../...3...

08000444 <CMOX_HMAC_SHA256_TABLE>:
 8000444:	0449 0800                                   I...

08000448 <cmox_hmac_sha256_constructor>:
 8000448:	b510      	push	{r4, lr}
 800044a:	4604      	mov	r4, r0
 800044c:	f104 0010 	add.w	r0, r4, #16
 8000450:	f000 f9b0 	bl	80007b4 <cmox_sha256_construct>
 8000454:	f8c4 00f8 	str.w	r0, [r4, #248]	@ 0xf8
 8000458:	4801      	ldr	r0, [pc, #4]	@ (8000460 <cmox_hmac_sha256_constructor+0x18>)
 800045a:	f8c4 017c 	str.w	r0, [r4, #380]	@ 0x17c
 800045e:	bd10      	pop	{r4, pc}
 8000460:	08000438 	.word	0x08000438

08000464 <cmox_hmac_sha256_compute>:
 8000464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000466:	b0e6      	sub	sp, #408	@ 0x198
 8000468:	4604      	mov	r4, r0
 800046a:	460d      	mov	r5, r1
 800046c:	4616      	mov	r6, r2
 800046e:	461f      	mov	r7, r3
 8000470:	490a      	ldr	r1, [pc, #40]	@ (800049c <cmox_hmac_sha256_compute+0x38>)
 8000472:	a806      	add	r0, sp, #24
 8000474:	f000 ff34 	bl	80012e0 <cmox_hmac_construct>
 8000478:	9970      	ldr	r1, [sp, #448]	@ 0x1c0
 800047a:	9a6f      	ldr	r2, [sp, #444]	@ 0x1bc
 800047c:	9700      	str	r7, [sp, #0]
 800047e:	9105      	str	r1, [sp, #20]
 8000480:	996e      	ldr	r1, [sp, #440]	@ 0x1b8
 8000482:	9204      	str	r2, [sp, #16]
 8000484:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 8000486:	9103      	str	r1, [sp, #12]
 8000488:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 800048a:	9202      	str	r2, [sp, #8]
 800048c:	4633      	mov	r3, r6
 800048e:	9101      	str	r1, [sp, #4]
 8000490:	462a      	mov	r2, r5
 8000492:	4621      	mov	r1, r4
 8000494:	f000 f832 	bl	80004fc <cmox_mac_innerCompute>
 8000498:	b067      	add	sp, #412	@ 0x19c
 800049a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800049c:	08000444 	.word	0x08000444

080004a0 <cmox_hmac_sha256_verify>:
 80004a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004a2:	b0e6      	sub	sp, #408	@ 0x198
 80004a4:	4604      	mov	r4, r0
 80004a6:	460d      	mov	r5, r1
 80004a8:	4616      	mov	r6, r2
 80004aa:	461f      	mov	r7, r3
 80004ac:	4909      	ldr	r1, [pc, #36]	@ (80004d4 <cmox_hmac_sha256_verify+0x34>)
 80004ae:	a806      	add	r0, sp, #24
 80004b0:	f000 ff16 	bl	80012e0 <cmox_hmac_construct>
 80004b4:	996f      	ldr	r1, [sp, #444]	@ 0x1bc
 80004b6:	9a6e      	ldr	r2, [sp, #440]	@ 0x1b8
 80004b8:	9104      	str	r1, [sp, #16]
 80004ba:	996d      	ldr	r1, [sp, #436]	@ 0x1b4
 80004bc:	9203      	str	r2, [sp, #12]
 80004be:	9a6c      	ldr	r2, [sp, #432]	@ 0x1b0
 80004c0:	9102      	str	r1, [sp, #8]
 80004c2:	9700      	str	r7, [sp, #0]
 80004c4:	9201      	str	r2, [sp, #4]
 80004c6:	4633      	mov	r3, r6
 80004c8:	462a      	mov	r2, r5
 80004ca:	4621      	mov	r1, r4
 80004cc:	f000 f859 	bl	8000582 <cmox_mac_innerVerify>
 80004d0:	b067      	add	sp, #412	@ 0x19c
 80004d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d4:	08000444 	.word	0x08000444

080004d8 <cmox_initialize>:
 80004d8:	b140      	cbz	r0, 80004ec <cmox_initialize+0x14>
 80004da:	6801      	ldr	r1, [r0, #0]
 80004dc:	b129      	cbz	r1, 80004ea <cmox_initialize+0x12>
 80004de:	4a04      	ldr	r2, [pc, #16]	@ (80004f0 <cmox_initialize+0x18>)
 80004e0:	4291      	cmp	r1, r2
 80004e2:	d102      	bne.n	80004ea <cmox_initialize+0x12>
 80004e4:	2101      	movs	r1, #1
 80004e6:	4b03      	ldr	r3, [pc, #12]	@ (80004f4 <cmox_initialize+0x1c>)
 80004e8:	7019      	strb	r1, [r3, #0]
 80004ea:	6840      	ldr	r0, [r0, #4]
 80004ec:	f002 bd80 	b.w	8002ff0 <cmox_ll_init>
 80004f0:	48370000 	.word	0x48370000
 80004f4:	20000214 	.word	0x20000214

080004f8 <cmox_finalize>:
 80004f8:	f002 bd9c 	b.w	8003034 <cmox_ll_deInit>

080004fc <cmox_mac_innerCompute>:
 80004fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000500:	4604      	mov	r4, r0
 8000502:	460d      	mov	r5, r1
 8000504:	6821      	ldr	r1, [r4, #0]
 8000506:	4616      	mov	r6, r2
 8000508:	461f      	mov	r7, r3
 800050a:	684a      	ldr	r2, [r1, #4]
 800050c:	4790      	blx	r2
 800050e:	4680      	mov	r8, r0
 8000510:	f5b8 3f40 	cmp.w	r8, #196608	@ 0x30000
 8000514:	d12e      	bne.n	8000574 <cmox_mac_innerCompute+0x78>
 8000516:	6822      	ldr	r2, [r4, #0]
 8000518:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800051a:	4620      	mov	r0, r4
 800051c:	6893      	ldr	r3, [r2, #8]
 800051e:	4798      	blx	r3
 8000520:	4680      	mov	r8, r0
 8000522:	f5b8 3f40 	cmp.w	r8, #196608	@ 0x30000
 8000526:	d125      	bne.n	8000574 <cmox_mac_innerCompute+0x78>
 8000528:	6823      	ldr	r3, [r4, #0]
 800052a:	9a08      	ldr	r2, [sp, #32]
 800052c:	9907      	ldr	r1, [sp, #28]
 800052e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8000532:	4620      	mov	r0, r4
 8000534:	47e0      	blx	ip
 8000536:	4680      	mov	r8, r0
 8000538:	f5b8 3f40 	cmp.w	r8, #196608	@ 0x30000
 800053c:	d11a      	bne.n	8000574 <cmox_mac_innerCompute+0x78>
 800053e:	6823      	ldr	r3, [r4, #0]
 8000540:	4639      	mov	r1, r7
 8000542:	9a06      	ldr	r2, [sp, #24]
 8000544:	691f      	ldr	r7, [r3, #16]
 8000546:	4620      	mov	r0, r4
 8000548:	47b8      	blx	r7
 800054a:	4680      	mov	r8, r0
 800054c:	f5b8 3f40 	cmp.w	r8, #196608	@ 0x30000
 8000550:	d110      	bne.n	8000574 <cmox_mac_innerCompute+0x78>
 8000552:	6823      	ldr	r3, [r4, #0]
 8000554:	4629      	mov	r1, r5
 8000556:	4632      	mov	r2, r6
 8000558:	695d      	ldr	r5, [r3, #20]
 800055a:	4620      	mov	r0, r4
 800055c:	47a8      	blx	r5
 800055e:	4680      	mov	r8, r0
 8000560:	f5b8 3f40 	cmp.w	r8, #196608	@ 0x30000
 8000564:	d106      	bne.n	8000574 <cmox_mac_innerCompute+0x78>
 8000566:	6823      	ldr	r3, [r4, #0]
 8000568:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800056a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800056c:	699d      	ldr	r5, [r3, #24]
 800056e:	4620      	mov	r0, r4
 8000570:	47a8      	blx	r5
 8000572:	4680      	mov	r8, r0
 8000574:	6821      	ldr	r1, [r4, #0]
 8000576:	4620      	mov	r0, r4
 8000578:	680a      	ldr	r2, [r1, #0]
 800057a:	4790      	blx	r2
 800057c:	4640      	mov	r0, r8
 800057e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000582 <cmox_mac_innerVerify>:
 8000582:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000586:	4604      	mov	r4, r0
 8000588:	460d      	mov	r5, r1
 800058a:	6821      	ldr	r1, [r4, #0]
 800058c:	4616      	mov	r6, r2
 800058e:	461f      	mov	r7, r3
 8000590:	684a      	ldr	r2, [r1, #4]
 8000592:	4790      	blx	r2
 8000594:	4680      	mov	r8, r0
 8000596:	f5b8 3f40 	cmp.w	r8, #196608	@ 0x30000
 800059a:	d12e      	bne.n	80005fa <cmox_mac_innerVerify+0x78>
 800059c:	6822      	ldr	r2, [r4, #0]
 800059e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80005a0:	4620      	mov	r0, r4
 80005a2:	6893      	ldr	r3, [r2, #8]
 80005a4:	4798      	blx	r3
 80005a6:	4680      	mov	r8, r0
 80005a8:	f5b8 3f40 	cmp.w	r8, #196608	@ 0x30000
 80005ac:	d125      	bne.n	80005fa <cmox_mac_innerVerify+0x78>
 80005ae:	6823      	ldr	r3, [r4, #0]
 80005b0:	9a08      	ldr	r2, [sp, #32]
 80005b2:	9907      	ldr	r1, [sp, #28]
 80005b4:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 80005b8:	4620      	mov	r0, r4
 80005ba:	47e0      	blx	ip
 80005bc:	4680      	mov	r8, r0
 80005be:	f5b8 3f40 	cmp.w	r8, #196608	@ 0x30000
 80005c2:	d11a      	bne.n	80005fa <cmox_mac_innerVerify+0x78>
 80005c4:	6823      	ldr	r3, [r4, #0]
 80005c6:	4639      	mov	r1, r7
 80005c8:	9a06      	ldr	r2, [sp, #24]
 80005ca:	691f      	ldr	r7, [r3, #16]
 80005cc:	4620      	mov	r0, r4
 80005ce:	47b8      	blx	r7
 80005d0:	4680      	mov	r8, r0
 80005d2:	f5b8 3f40 	cmp.w	r8, #196608	@ 0x30000
 80005d6:	d110      	bne.n	80005fa <cmox_mac_innerVerify+0x78>
 80005d8:	6823      	ldr	r3, [r4, #0]
 80005da:	4629      	mov	r1, r5
 80005dc:	4632      	mov	r2, r6
 80005de:	695d      	ldr	r5, [r3, #20]
 80005e0:	4620      	mov	r0, r4
 80005e2:	47a8      	blx	r5
 80005e4:	4680      	mov	r8, r0
 80005e6:	f5b8 3f40 	cmp.w	r8, #196608	@ 0x30000
 80005ea:	d106      	bne.n	80005fa <cmox_mac_innerVerify+0x78>
 80005ec:	6823      	ldr	r3, [r4, #0]
 80005ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80005f0:	2200      	movs	r2, #0
 80005f2:	69dd      	ldr	r5, [r3, #28]
 80005f4:	4620      	mov	r0, r4
 80005f6:	47a8      	blx	r5
 80005f8:	4680      	mov	r8, r0
 80005fa:	6821      	ldr	r1, [r4, #0]
 80005fc:	4620      	mov	r0, r4
 80005fe:	680a      	ldr	r2, [r1, #0]
 8000600:	4790      	blx	r2
 8000602:	4640      	mov	r0, r8
 8000604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000608 <cmox_mac_setCustomData_empty>:
 8000608:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 800060c:	4770      	bx	lr
	...

08000610 <cmox_mac_compute>:
 8000610:	2800      	cmp	r0, #0
 8000612:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000614:	460c      	mov	r4, r1
 8000616:	4611      	mov	r1, r2
 8000618:	b085      	sub	sp, #20
 800061a:	bf1c      	itt	ne
 800061c:	6805      	ldrne	r5, [r0, #0]
 800061e:	2d00      	cmpne	r5, #0
 8000620:	461a      	mov	r2, r3
 8000622:	4b0b      	ldr	r3, [pc, #44]	@ (8000650 <cmox_mac_compute+0x40>)
 8000624:	d011      	beq.n	800064a <cmox_mac_compute+0x3a>
 8000626:	b182      	cbz	r2, 800064a <cmox_mac_compute+0x3a>
 8000628:	b904      	cbnz	r4, 800062c <cmox_mac_compute+0x1c>
 800062a:	b971      	cbnz	r1, 800064a <cmox_mac_compute+0x3a>
 800062c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800062e:	b160      	cbz	r0, 800064a <cmox_mac_compute+0x3a>
 8000630:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8000632:	9002      	str	r0, [sp, #8]
 8000634:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8000636:	9604      	str	r6, [sp, #16]
 8000638:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 800063a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800063c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800063e:	9000      	str	r0, [sp, #0]
 8000640:	9703      	str	r7, [sp, #12]
 8000642:	9601      	str	r6, [sp, #4]
 8000644:	4620      	mov	r0, r4
 8000646:	47a8      	blx	r5
 8000648:	4603      	mov	r3, r0
 800064a:	4618      	mov	r0, r3
 800064c:	b005      	add	sp, #20
 800064e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000650:	00030002 	.word	0x00030002

08000654 <cmox_sha256_cleanup>:
 8000654:	b500      	push	{lr}
 8000656:	b081      	sub	sp, #4
 8000658:	6801      	ldr	r1, [r0, #0]
 800065a:	4a07      	ldr	r2, [pc, #28]	@ (8000678 <cmox_sha256_cleanup+0x24>)
 800065c:	4291      	cmp	r1, r2
 800065e:	d100      	bne.n	8000662 <cmox_sha256_cleanup+0xe>
 8000660:	b910      	cbnz	r0, 8000668 <cmox_sha256_cleanup+0x14>
 8000662:	4806      	ldr	r0, [pc, #24]	@ (800067c <cmox_sha256_cleanup+0x28>)
 8000664:	b001      	add	sp, #4
 8000666:	bd00      	pop	{pc}
 8000668:	217c      	movs	r1, #124	@ 0x7c
 800066a:	f00f fd12 	bl	8010092 <__aeabi_memclr>
 800066e:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8000672:	b001      	add	sp, #4
 8000674:	bd00      	pop	{pc}
 8000676:	bf00      	nop
 8000678:	08000764 	.word	0x08000764
 800067c:	00020003 	.word	0x00020003

08000680 <cmox_sha256_init>:
 8000680:	4a0d      	ldr	r2, [pc, #52]	@ (80006b8 <cmox_sha256_init+0x38>)
 8000682:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000686:	e892 51f8 	ldmia.w	r2, {r3, r4, r5, r6, r7, r8, ip, lr}
 800068a:	b088      	sub	sp, #32
 800068c:	4669      	mov	r1, sp
 800068e:	e881 51f8 	stmia.w	r1, {r3, r4, r5, r6, r7, r8, ip, lr}
 8000692:	f8d0 9000 	ldr.w	r9, [r0]
 8000696:	f8df a024 	ldr.w	sl, [pc, #36]	@ 80006bc <cmox_sha256_init+0x3c>
 800069a:	45d1      	cmp	r9, sl
 800069c:	d100      	bne.n	80006a0 <cmox_sha256_init+0x20>
 800069e:	b918      	cbnz	r0, 80006a8 <cmox_sha256_init+0x28>
 80006a0:	4807      	ldr	r0, [pc, #28]	@ (80006c0 <cmox_sha256_init+0x40>)
 80006a2:	b008      	add	sp, #32
 80006a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006a8:	2220      	movs	r2, #32
 80006aa:	3008      	adds	r0, #8
 80006ac:	f000 fe65 	bl	800137a <cmox_md_init>
 80006b0:	b008      	add	sp, #32
 80006b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006b6:	bf00      	nop
 80006b8:	08000744 	.word	0x08000744
 80006bc:	08000764 	.word	0x08000764
 80006c0:	00020003 	.word	0x00020003

080006c4 <cmox_sha256_setTagLen>:
 80006c4:	2921      	cmp	r1, #33	@ 0x21
 80006c6:	d204      	bcs.n	80006d2 <cmox_sha256_setTagLen+0xe>
 80006c8:	6802      	ldr	r2, [r0, #0]
 80006ca:	4b04      	ldr	r3, [pc, #16]	@ (80006dc <cmox_sha256_setTagLen+0x18>)
 80006cc:	429a      	cmp	r2, r3
 80006ce:	d100      	bne.n	80006d2 <cmox_sha256_setTagLen+0xe>
 80006d0:	b908      	cbnz	r0, 80006d6 <cmox_sha256_setTagLen+0x12>
 80006d2:	4803      	ldr	r0, [pc, #12]	@ (80006e0 <cmox_sha256_setTagLen+0x1c>)
 80006d4:	4770      	bx	lr
 80006d6:	3008      	adds	r0, #8
 80006d8:	f000 be5e 	b.w	8001398 <cmox_md_setTagSize>
 80006dc:	08000764 	.word	0x08000764
 80006e0:	00020003 	.word	0x00020003

080006e4 <cmox_sha256_append>:
 80006e4:	b410      	push	{r4}
 80006e6:	b081      	sub	sp, #4
 80006e8:	4613      	mov	r3, r2
 80006ea:	6802      	ldr	r2, [r0, #0]
 80006ec:	4c07      	ldr	r4, [pc, #28]	@ (800070c <cmox_sha256_append+0x28>)
 80006ee:	42a2      	cmp	r2, r4
 80006f0:	d100      	bne.n	80006f4 <cmox_sha256_append+0x10>
 80006f2:	b918      	cbnz	r0, 80006fc <cmox_sha256_append+0x18>
 80006f4:	b001      	add	sp, #4
 80006f6:	4806      	ldr	r0, [pc, #24]	@ (8000710 <cmox_sha256_append+0x2c>)
 80006f8:	bc10      	pop	{r4}
 80006fa:	4770      	bx	lr
 80006fc:	f100 0224 	add.w	r2, r0, #36	@ 0x24
 8000700:	b001      	add	sp, #4
 8000702:	3008      	adds	r0, #8
 8000704:	bc10      	pop	{r4}
 8000706:	f000 be4b 	b.w	80013a0 <cmox_md_append>
 800070a:	bf00      	nop
 800070c:	08000764 	.word	0x08000764
 8000710:	00020003 	.word	0x00020003

08000714 <cmox_sha256_generateTag>:
 8000714:	b410      	push	{r4}
 8000716:	b081      	sub	sp, #4
 8000718:	4613      	mov	r3, r2
 800071a:	6802      	ldr	r2, [r0, #0]
 800071c:	4c07      	ldr	r4, [pc, #28]	@ (800073c <cmox_sha256_generateTag+0x28>)
 800071e:	42a2      	cmp	r2, r4
 8000720:	d100      	bne.n	8000724 <cmox_sha256_generateTag+0x10>
 8000722:	b918      	cbnz	r0, 800072c <cmox_sha256_generateTag+0x18>
 8000724:	b001      	add	sp, #4
 8000726:	4806      	ldr	r0, [pc, #24]	@ (8000740 <cmox_sha256_generateTag+0x2c>)
 8000728:	bc10      	pop	{r4}
 800072a:	4770      	bx	lr
 800072c:	460a      	mov	r2, r1
 800072e:	f100 0124 	add.w	r1, r0, #36	@ 0x24
 8000732:	b001      	add	sp, #4
 8000734:	3008      	adds	r0, #8
 8000736:	bc10      	pop	{r4}
 8000738:	f000 be86 	b.w	8001448 <cmox_md_generateTag>
 800073c:	08000764 	.word	0x08000764
 8000740:	00020003 	.word	0x00020003
 8000744:	6a09e667 	.word	0x6a09e667
 8000748:	bb67ae85 	.word	0xbb67ae85
 800074c:	3c6ef372 	.word	0x3c6ef372
 8000750:	a54ff53a 	.word	0xa54ff53a
 8000754:	510e527f 	.word	0x510e527f
 8000758:	9b05688c 	.word	0x9b05688c
 800075c:	1f83d9ab 	.word	0x1f83d9ab
 8000760:	5be0cd19 	.word	0x5be0cd19

08000764 <CMOX_SHA256_VTABLE>:
 8000764:	08000655 08000681 080006c5 080006e5     U...............
 8000774:	08000715                                ....

08000778 <cmox_sha256_compute>:
 8000778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800077a:	4604      	mov	r4, r0
 800077c:	b0a3      	sub	sp, #140	@ 0x8c
 800077e:	480b      	ldr	r0, [pc, #44]	@ (80007ac <cmox_sha256_compute+0x34>)
 8000780:	460d      	mov	r5, r1
 8000782:	4616      	mov	r6, r2
 8000784:	461f      	mov	r7, r3
 8000786:	9002      	str	r0, [sp, #8]
 8000788:	4b09      	ldr	r3, [pc, #36]	@ (80007b0 <cmox_sha256_compute+0x38>)
 800078a:	2208      	movs	r2, #8
 800078c:	2140      	movs	r1, #64	@ 0x40
 800078e:	a804      	add	r0, sp, #16
 8000790:	f000 fdef 	bl	8001372 <cmox_md_construct>
 8000794:	9828      	ldr	r0, [sp, #160]	@ 0xa0
 8000796:	9700      	str	r7, [sp, #0]
 8000798:	4633      	mov	r3, r6
 800079a:	9001      	str	r0, [sp, #4]
 800079c:	462a      	mov	r2, r5
 800079e:	4621      	mov	r1, r4
 80007a0:	a802      	add	r0, sp, #8
 80007a2:	f7ff fe13 	bl	80003cc <cmox_hash_common_compute>
 80007a6:	b023      	add	sp, #140	@ 0x8c
 80007a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007aa:	bf00      	nop
 80007ac:	08000764 	.word	0x08000764
 80007b0:	08014524 	.word	0x08014524

080007b4 <cmox_sha256_construct>:
 80007b4:	b510      	push	{r4, lr}
 80007b6:	0004      	movs	r4, r0
 80007b8:	bf08      	it	eq
 80007ba:	2400      	moveq	r4, #0
 80007bc:	d008      	beq.n	80007d0 <cmox_sha256_construct+0x1c>
 80007be:	4805      	ldr	r0, [pc, #20]	@ (80007d4 <cmox_sha256_construct+0x20>)
 80007c0:	6020      	str	r0, [r4, #0]
 80007c2:	4b05      	ldr	r3, [pc, #20]	@ (80007d8 <cmox_sha256_construct+0x24>)
 80007c4:	2208      	movs	r2, #8
 80007c6:	2140      	movs	r1, #64	@ 0x40
 80007c8:	f104 0008 	add.w	r0, r4, #8
 80007cc:	f000 fdd1 	bl	8001372 <cmox_md_construct>
 80007d0:	4620      	mov	r0, r4
 80007d2:	bd10      	pop	{r4, pc}
 80007d4:	08000764 	.word	0x08000764
 80007d8:	08014524 	.word	0x08014524

080007dc <cmox_sha256_transform>:
 80007dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80007e0:	b0c1      	sub	sp, #260	@ 0x104
 80007e2:	680b      	ldr	r3, [r1, #0]
 80007e4:	4602      	mov	r2, r0
 80007e6:	a801      	add	r0, sp, #4
 80007e8:	ba1b      	rev	r3, r3
 80007ea:	9301      	str	r3, [sp, #4]
 80007ec:	684b      	ldr	r3, [r1, #4]
 80007ee:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 80007f2:	ba1b      	rev	r3, r3
 80007f4:	6043      	str	r3, [r0, #4]
 80007f6:	688b      	ldr	r3, [r1, #8]
 80007f8:	ba1b      	rev	r3, r3
 80007fa:	6083      	str	r3, [r0, #8]
 80007fc:	68cb      	ldr	r3, [r1, #12]
 80007fe:	ba1b      	rev	r3, r3
 8000800:	60c3      	str	r3, [r0, #12]
 8000802:	690b      	ldr	r3, [r1, #16]
 8000804:	ba1b      	rev	r3, r3
 8000806:	6103      	str	r3, [r0, #16]
 8000808:	694b      	ldr	r3, [r1, #20]
 800080a:	ba1b      	rev	r3, r3
 800080c:	6143      	str	r3, [r0, #20]
 800080e:	698b      	ldr	r3, [r1, #24]
 8000810:	ba1b      	rev	r3, r3
 8000812:	6183      	str	r3, [r0, #24]
 8000814:	69cb      	ldr	r3, [r1, #28]
 8000816:	ba1b      	rev	r3, r3
 8000818:	61c3      	str	r3, [r0, #28]
 800081a:	6a0b      	ldr	r3, [r1, #32]
 800081c:	ba1b      	rev	r3, r3
 800081e:	6203      	str	r3, [r0, #32]
 8000820:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8000822:	ba1b      	rev	r3, r3
 8000824:	6243      	str	r3, [r0, #36]	@ 0x24
 8000826:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8000828:	ba1b      	rev	r3, r3
 800082a:	6283      	str	r3, [r0, #40]	@ 0x28
 800082c:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 800082e:	ba1b      	rev	r3, r3
 8000830:	62c3      	str	r3, [r0, #44]	@ 0x2c
 8000832:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 8000834:	ba1b      	rev	r3, r3
 8000836:	6303      	str	r3, [r0, #48]	@ 0x30
 8000838:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800083a:	ba1b      	rev	r3, r3
 800083c:	6343      	str	r3, [r0, #52]	@ 0x34
 800083e:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 8000840:	ba1b      	rev	r3, r3
 8000842:	6383      	str	r3, [r0, #56]	@ 0x38
 8000844:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
 8000846:	ba09      	rev	r1, r1
 8000848:	63c1      	str	r1, [r0, #60]	@ 0x3c
 800084a:	2018      	movs	r0, #24
 800084c:	f85c ec08 	ldr.w	lr, [ip, #-8]
 8000850:	ea4f 41fe 	mov.w	r1, lr, ror #19
 8000854:	ea91 437e 	eors.w	r3, r1, lr, ror #17
 8000858:	f85c 1c3c 	ldr.w	r1, [ip, #-60]
 800085c:	ea4f 47b1 	mov.w	r7, r1, ror #18
 8000860:	ea97 16f1 	eors.w	r6, r7, r1, ror #7
 8000864:	ea83 239e 	eor.w	r3, r3, lr, lsr #10
 8000868:	f85c ec1c 	ldr.w	lr, [ip, #-28]
 800086c:	ea86 06d1 	eor.w	r6, r6, r1, lsr #3
 8000870:	4473      	add	r3, lr
 8000872:	18f3      	adds	r3, r6, r3
 8000874:	f85c 6c40 	ldr.w	r6, [ip, #-64]
 8000878:	18f3      	adds	r3, r6, r3
 800087a:	f8cc 3000 	str.w	r3, [ip]
 800087e:	f85c ec04 	ldr.w	lr, [ip, #-4]
 8000882:	ea4f 46fe 	mov.w	r6, lr, ror #19
 8000886:	ea96 437e 	eors.w	r3, r6, lr, ror #17
 800088a:	f85c 6c38 	ldr.w	r6, [ip, #-56]
 800088e:	ea4f 4ab6 	mov.w	sl, r6, ror #18
 8000892:	ea8a 17f6 	eor.w	r7, sl, r6, ror #7
 8000896:	ea83 239e 	eor.w	r3, r3, lr, lsr #10
 800089a:	f85c ec18 	ldr.w	lr, [ip, #-24]
 800089e:	ea87 07d6 	eor.w	r7, r7, r6, lsr #3
 80008a2:	4473      	add	r3, lr
 80008a4:	18fb      	adds	r3, r7, r3
 80008a6:	18c9      	adds	r1, r1, r3
 80008a8:	f8cc 1004 	str.w	r1, [ip, #4]
 80008ac:	f10c 0c08 	add.w	ip, ip, #8
 80008b0:	1e40      	subs	r0, r0, #1
 80008b2:	d1cb      	bne.n	800084c <cmox_sha256_transform+0x70>
 80008b4:	9200      	str	r2, [sp, #0]
 80008b6:	4610      	mov	r0, r2
 80008b8:	6dc1      	ldr	r1, [r0, #92]	@ 0x5c
 80008ba:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 80008bc:	f8d0 e060 	ldr.w	lr, [r0, #96]	@ 0x60
 80008c0:	f8d0 8070 	ldr.w	r8, [r0, #112]	@ 0x70
 80008c4:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 80008c6:	6f44      	ldr	r4, [r0, #116]	@ 0x74
 80008c8:	f8d0 a068 	ldr.w	sl, [r0, #104]	@ 0x68
 80008cc:	6f85      	ldr	r5, [r0, #120]	@ 0x78
 80008ce:	f8df 90fc 	ldr.w	r9, [pc, #252]	@ 80009cc <cmox_sha256_transform+0x1f0>
 80008d2:	f10d 0c04 	add.w	ip, sp, #4
 80008d6:	2020      	movs	r0, #32
 80008d8:	ea4f 16b3 	mov.w	r6, r3, ror #6
 80008dc:	ea86 26f3 	eor.w	r6, r6, r3, ror #11
 80008e0:	f85c 7b04 	ldr.w	r7, [ip], #4
 80008e4:	ea4e 0b01 	orr.w	fp, lr, r1
 80008e8:	ea86 6673 	eor.w	r6, r6, r3, ror #25
 80008ec:	ea0b 0b02 	and.w	fp, fp, r2
 80008f0:	1975      	adds	r5, r6, r5
 80008f2:	ea84 0608 	eor.w	r6, r4, r8
 80008f6:	401e      	ands	r6, r3
 80008f8:	4066      	eors	r6, r4
 80008fa:	1975      	adds	r5, r6, r5
 80008fc:	f859 6b04 	ldr.w	r6, [r9], #4
 8000900:	1975      	adds	r5, r6, r5
 8000902:	197e      	adds	r6, r7, r5
 8000904:	ea4f 07b1 	mov.w	r7, r1, ror #2
 8000908:	ea87 3771 	eor.w	r7, r7, r1, ror #13
 800090c:	ea0e 0501 	and.w	r5, lr, r1
 8000910:	ea4b 0505 	orr.w	r5, fp, r5
 8000914:	ea87 57b1 	eor.w	r7, r7, r1, ror #22
 8000918:	19ef      	adds	r7, r5, r7
 800091a:	4645      	mov	r5, r8
 800091c:	eb06 080a 	add.w	r8, r6, sl
 8000920:	4692      	mov	sl, r2
 8000922:	4672      	mov	r2, lr
 8000924:	eb07 0e06 	add.w	lr, r7, r6
 8000928:	ea4f 16b8 	mov.w	r6, r8, ror #6
 800092c:	ea86 26f8 	eor.w	r6, r6, r8, ror #11
 8000930:	f85c 7b04 	ldr.w	r7, [ip], #4
 8000934:	ea41 0b0e 	orr.w	fp, r1, lr
 8000938:	ea86 6678 	eor.w	r6, r6, r8, ror #25
 800093c:	ea0b 0b02 	and.w	fp, fp, r2
 8000940:	1934      	adds	r4, r6, r4
 8000942:	ea85 0603 	eor.w	r6, r5, r3
 8000946:	ea06 0608 	and.w	r6, r6, r8
 800094a:	406e      	eors	r6, r5
 800094c:	1934      	adds	r4, r6, r4
 800094e:	f859 6b04 	ldr.w	r6, [r9], #4
 8000952:	1934      	adds	r4, r6, r4
 8000954:	193e      	adds	r6, r7, r4
 8000956:	ea4f 07be 	mov.w	r7, lr, ror #2
 800095a:	ea87 377e 	eor.w	r7, r7, lr, ror #13
 800095e:	ea01 040e 	and.w	r4, r1, lr
 8000962:	ea4b 0404 	orr.w	r4, fp, r4
 8000966:	ea87 57be 	eor.w	r7, r7, lr, ror #22
 800096a:	19e7      	adds	r7, r4, r7
 800096c:	461c      	mov	r4, r3
 800096e:	eb06 030a 	add.w	r3, r6, sl
 8000972:	4692      	mov	sl, r2
 8000974:	460a      	mov	r2, r1
 8000976:	19b9      	adds	r1, r7, r6
 8000978:	1e40      	subs	r0, r0, #1
 800097a:	d1ad      	bne.n	80008d8 <cmox_sha256_transform+0xfc>
 800097c:	9800      	ldr	r0, [sp, #0]
 800097e:	f8d0 905c 	ldr.w	r9, [r0, #92]	@ 0x5c
 8000982:	4449      	add	r1, r9
 8000984:	65c1      	str	r1, [r0, #92]	@ 0x5c
 8000986:	9900      	ldr	r1, [sp, #0]
 8000988:	6e08      	ldr	r0, [r1, #96]	@ 0x60
 800098a:	4486      	add	lr, r0
 800098c:	f8c1 e060 	str.w	lr, [r1, #96]	@ 0x60
 8000990:	9800      	ldr	r0, [sp, #0]
 8000992:	6e41      	ldr	r1, [r0, #100]	@ 0x64
 8000994:	1852      	adds	r2, r2, r1
 8000996:	6642      	str	r2, [r0, #100]	@ 0x64
 8000998:	9900      	ldr	r1, [sp, #0]
 800099a:	6e88      	ldr	r0, [r1, #104]	@ 0x68
 800099c:	4482      	add	sl, r0
 800099e:	f8c1 a068 	str.w	sl, [r1, #104]	@ 0x68
 80009a2:	9800      	ldr	r0, [sp, #0]
 80009a4:	6ec1      	ldr	r1, [r0, #108]	@ 0x6c
 80009a6:	185b      	adds	r3, r3, r1
 80009a8:	66c3      	str	r3, [r0, #108]	@ 0x6c
 80009aa:	9900      	ldr	r1, [sp, #0]
 80009ac:	6f08      	ldr	r0, [r1, #112]	@ 0x70
 80009ae:	4480      	add	r8, r0
 80009b0:	f8c1 8070 	str.w	r8, [r1, #112]	@ 0x70
 80009b4:	9800      	ldr	r0, [sp, #0]
 80009b6:	6f41      	ldr	r1, [r0, #116]	@ 0x74
 80009b8:	1864      	adds	r4, r4, r1
 80009ba:	6744      	str	r4, [r0, #116]	@ 0x74
 80009bc:	9900      	ldr	r1, [sp, #0]
 80009be:	6f88      	ldr	r0, [r1, #120]	@ 0x78
 80009c0:	182d      	adds	r5, r5, r0
 80009c2:	678d      	str	r5, [r1, #120]	@ 0x78
 80009c4:	b041      	add	sp, #260	@ 0x104
 80009c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009ca:	bf00      	nop
 80009cc:	08014424 	.word	0x08014424

080009d0 <cmox_aesFast_encrypt>:
 80009d0:	f100 030c 	add.w	r3, r0, #12
 80009d4:	e92d 4ff4 	stmdb	sp!, {r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009d8:	b08c      	sub	sp, #48	@ 0x30
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	684c      	ldr	r4, [r1, #4]
 80009de:	6845      	ldr	r5, [r0, #4]
 80009e0:	6808      	ldr	r0, [r1, #0]
 80009e2:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 80009e6:	688f      	ldr	r7, [r1, #8]
 80009e8:	4050      	eors	r0, r2
 80009ea:	685a      	ldr	r2, [r3, #4]
 80009ec:	68d9      	ldr	r1, [r3, #12]
 80009ee:	08ed      	lsrs	r5, r5, #3
 80009f0:	4054      	eors	r4, r2
 80009f2:	689a      	ldr	r2, [r3, #8]
 80009f4:	1ced      	adds	r5, r5, #3
 80009f6:	ea81 0e0e 	eor.w	lr, r1, lr
 80009fa:	4057      	eors	r7, r2
 80009fc:	4ab9      	ldr	r2, [pc, #740]	@ (8000ce4 <cmox_aesFast_encrypt+0x314>)
 80009fe:	9500      	str	r5, [sp, #0]
 8000a00:	4621      	mov	r1, r4
 8000a02:	e061      	b.n	8000ac8 <cmox_aesFast_encrypt+0xf8>
 8000a04:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8000a06:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8000a0a:	f852 8028 	ldr.w	r8, [r2, r8, lsl #2]
 8000a0e:	f852 c020 	ldr.w	ip, [r2, r0, lsl #2]
 8000a12:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8000a16:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
 8000a1a:	ea4f 203c 	mov.w	r0, ip, ror #8
 8000a1e:	f852 c02a 	ldr.w	ip, [r2, sl, lsl #2]
 8000a22:	ea80 0008 	eor.w	r0, r0, r8
 8000a26:	9c03      	ldr	r4, [sp, #12]
 8000a28:	ea80 403c 	eor.w	r0, r0, ip, ror #16
 8000a2c:	f8dd c024 	ldr.w	ip, [sp, #36]	@ 0x24
 8000a30:	9d02      	ldr	r5, [sp, #8]
 8000a32:	ea90 6031 	eors.w	r0, r0, r1, ror #24
 8000a36:	6819      	ldr	r1, [r3, #0]
 8000a38:	9e01      	ldr	r6, [sp, #4]
 8000a3a:	4048      	eors	r0, r1
 8000a3c:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8000a40:	f852 c02e 	ldr.w	ip, [r2, lr, lsl #2]
 8000a44:	f852 e029 	ldr.w	lr, [r2, r9, lsl #2]
 8000a48:	ea97 2131 	eors.w	r1, r7, r1, ror #8
 8000a4c:	9f08      	ldr	r7, [sp, #32]
 8000a4e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8000a52:	ea81 413c 	eor.w	r1, r1, ip, ror #16
 8000a56:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8000a5a:	ea81 613e 	eor.w	r1, r1, lr, ror #24
 8000a5e:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8000a62:	ea8c 0101 	eor.w	r1, ip, r1
 8000a66:	f852 c027 	ldr.w	ip, [r2, r7, lsl #2]
 8000a6a:	ea4f 273c 	mov.w	r7, ip, ror #8
 8000a6e:	f852 c02e 	ldr.w	ip, [r2, lr, lsl #2]
 8000a72:	f8dd e018 	ldr.w	lr, [sp, #24]
 8000a76:	f852 802e 	ldr.w	r8, [r2, lr, lsl #2]
 8000a7a:	ea4f 6e38 	mov.w	lr, r8, ror #24
 8000a7e:	f852 8029 	ldr.w	r8, [r2, r9, lsl #2]
 8000a82:	ea87 0708 	eor.w	r7, r7, r8
 8000a86:	ea87 473c 	eor.w	r7, r7, ip, ror #16
 8000a8a:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8000a8e:	ea8e 0707 	eor.w	r7, lr, r7
 8000a92:	f8dd e010 	ldr.w	lr, [sp, #16]
 8000a96:	ea8c 0707 	eor.w	r7, ip, r7
 8000a9a:	f852 c02e 	ldr.w	ip, [r2, lr, lsl #2]
 8000a9e:	ea4f 2e3c 	mov.w	lr, ip, ror #8
 8000aa2:	f852 c024 	ldr.w	ip, [r2, r4, lsl #2]
 8000aa6:	ea4f 443c 	mov.w	r4, ip, ror #16
 8000aaa:	f852 c025 	ldr.w	ip, [r2, r5, lsl #2]
 8000aae:	ea4f 653c 	mov.w	r5, ip, ror #24
 8000ab2:	f852 c026 	ldr.w	ip, [r2, r6, lsl #2]
 8000ab6:	ea8e 0e0c 	eor.w	lr, lr, ip
 8000aba:	ea84 0e0e 	eor.w	lr, r4, lr
 8000abe:	68dc      	ldr	r4, [r3, #12]
 8000ac0:	ea85 0e0e 	eor.w	lr, r5, lr
 8000ac4:	ea84 0e0e 	eor.w	lr, r4, lr
 8000ac8:	020d      	lsls	r5, r1, #8
 8000aca:	fa5f f88e 	uxtb.w	r8, lr
 8000ace:	0e2d      	lsrs	r5, r5, #24
 8000ad0:	f852 a028 	ldr.w	sl, [r2, r8, lsl #2]
 8000ad4:	f852 6025 	ldr.w	r6, [r2, r5, lsl #2]
 8000ad8:	ea4f 4c07 	mov.w	ip, r7, lsl #16
 8000adc:	ea4f 683a 	mov.w	r8, sl, ror #24
 8000ae0:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 8000ae4:	ea4f 2936 	mov.w	r9, r6, ror #8
 8000ae8:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
 8000aec:	f852 a02b 	ldr.w	sl, [r2, fp, lsl #2]
 8000af0:	f852 602c 	ldr.w	r6, [r2, ip, lsl #2]
 8000af4:	f8d3 c010 	ldr.w	ip, [r3, #16]
 8000af8:	ea89 090a 	eor.w	r9, r9, sl
 8000afc:	ea89 4936 	eor.w	r9, r9, r6, ror #16
 8000b00:	ea88 0909 	eor.w	r9, r8, r9
 8000b04:	ea8c 0909 	eor.w	r9, ip, r9
 8000b08:	ea4f 2807 	mov.w	r8, r7, lsl #8
 8000b0c:	ea4f 6818 	mov.w	r8, r8, lsr #24
 8000b10:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8000b14:	f852 a028 	ldr.w	sl, [r2, r8, lsl #2]
 8000b18:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
 8000b1c:	f852 802c 	ldr.w	r8, [r2, ip, lsl #2]
 8000b20:	ea4f 4c38 	mov.w	ip, r8, ror #16
 8000b24:	fa5f f880 	uxtb.w	r8, r0
 8000b28:	f852 b028 	ldr.w	fp, [r2, r8, lsl #2]
 8000b2c:	ea4f 683b 	mov.w	r8, fp, ror #24
 8000b30:	ea4f 6b11 	mov.w	fp, r1, lsr #24
 8000b34:	f852 b02b 	ldr.w	fp, [r2, fp, lsl #2]
 8000b38:	ea8b 2a3a 	eor.w	sl, fp, sl, ror #8
 8000b3c:	ea8c 0a0a 	eor.w	sl, ip, sl
 8000b40:	f8d3 c014 	ldr.w	ip, [r3, #20]
 8000b44:	ea88 0a0a 	eor.w	sl, r8, sl
 8000b48:	ea4f 280e 	mov.w	r8, lr, lsl #8
 8000b4c:	ea8c 0a0a 	eor.w	sl, ip, sl
 8000b50:	ea4f 6818 	mov.w	r8, r8, lsr #24
 8000b54:	ea4f 4c00 	mov.w	ip, r0, lsl #16
 8000b58:	f852 b028 	ldr.w	fp, [r2, r8, lsl #2]
 8000b5c:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
 8000b60:	f852 802c 	ldr.w	r8, [r2, ip, lsl #2]
 8000b64:	fa5f fc81 	uxtb.w	ip, r1
 8000b68:	0409      	lsls	r1, r1, #16
 8000b6a:	ea4f 4838 	mov.w	r8, r8, ror #16
 8000b6e:	f8cd 8004 	str.w	r8, [sp, #4]
 8000b72:	f852 802c 	ldr.w	r8, [r2, ip, lsl #2]
 8000b76:	0e09      	lsrs	r1, r1, #24
 8000b78:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8000b7c:	ea4f 6c38 	mov.w	ip, r8, ror #24
 8000b80:	ea4f 6817 	mov.w	r8, r7, lsr #24
 8000b84:	f852 8028 	ldr.w	r8, [r2, r8, lsl #2]
 8000b88:	0200      	lsls	r0, r0, #8
 8000b8a:	0e00      	lsrs	r0, r0, #24
 8000b8c:	ea88 2b3b 	eor.w	fp, r8, fp, ror #8
 8000b90:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8000b94:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
 8000b98:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8000b9c:	ea88 0b0b 	eor.w	fp, r8, fp
 8000ba0:	ea8c 0b0b 	eor.w	fp, ip, fp
 8000ba4:	f8d3 c018 	ldr.w	ip, [r3, #24]
 8000ba8:	b2ff      	uxtb	r7, r7
 8000baa:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
 8000bae:	ea8c 0b0b 	eor.w	fp, ip, fp
 8000bb2:	ea4f 4c31 	mov.w	ip, r1, ror #16
 8000bb6:	f852 102e 	ldr.w	r1, [r2, lr, lsl #2]
 8000bba:	ea4f 280b 	mov.w	r8, fp, lsl #8
 8000bbe:	ea4f 6818 	mov.w	r8, r8, lsr #24
 8000bc2:	ea91 2030 	eors.w	r0, r1, r0, ror #8
 8000bc6:	ea8c 0100 	eor.w	r1, ip, r0
 8000bca:	ea91 6137 	eors.w	r1, r1, r7, ror #24
 8000bce:	9f00      	ldr	r7, [sp, #0]
 8000bd0:	69d8      	ldr	r0, [r3, #28]
 8000bd2:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 8000bd6:	1e7f      	subs	r7, r7, #1
 8000bd8:	9700      	str	r7, [sp, #0]
 8000bda:	4041      	eors	r1, r0
 8000bdc:	ea4f 470a 	mov.w	r7, sl, lsl #16
 8000be0:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 8000be4:	0e3f      	lsrs	r7, r7, #24
 8000be6:	f8cd e004 	str.w	lr, [sp, #4]
 8000bea:	9703      	str	r7, [sp, #12]
 8000bec:	ea4f 2e09 	mov.w	lr, r9, lsl #8
 8000bf0:	ea4f 671b 	mov.w	r7, fp, lsr #24
 8000bf4:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
 8000bf8:	9705      	str	r7, [sp, #20]
 8000bfa:	ea4f 400b 	mov.w	r0, fp, lsl #16
 8000bfe:	f8cd e010 	str.w	lr, [sp, #16]
 8000c02:	020f      	lsls	r7, r1, #8
 8000c04:	0e00      	lsrs	r0, r0, #24
 8000c06:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8000c0a:	0e3f      	lsrs	r7, r7, #24
 8000c0c:	900a      	str	r0, [sp, #40]	@ 0x28
 8000c0e:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
 8000c12:	9708      	str	r7, [sp, #32]
 8000c14:	9800      	ldr	r0, [sp, #0]
 8000c16:	f8cd e01c 	str.w	lr, [sp, #28]
 8000c1a:	ea4f 671a 	mov.w	r7, sl, lsr #24
 8000c1e:	ea4f 2c0a 	mov.w	ip, sl, lsl #8
 8000c22:	3320      	adds	r3, #32
 8000c24:	ea4f 4e01 	mov.w	lr, r1, lsl #16
 8000c28:	ea4f 6819 	mov.w	r8, r9, lsr #24
 8000c2c:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
 8000c30:	fa5f fb8b 	uxtb.w	fp, fp
 8000c34:	fa5f fa8a 	uxtb.w	sl, sl
 8000c38:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
 8000c3c:	f8cd c02c 	str.w	ip, [sp, #44]	@ 0x2c
 8000c40:	f8cd b008 	str.w	fp, [sp, #8]
 8000c44:	f8cd a018 	str.w	sl, [sp, #24]
 8000c48:	fa5f f989 	uxtb.w	r9, r9
 8000c4c:	b2c9      	uxtb	r1, r1
 8000c4e:	2800      	cmp	r0, #0
 8000c50:	f47f aed8 	bne.w	8000a04 <cmox_aesFast_encrypt+0x34>
 8000c54:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8000c56:	4c24      	ldr	r4, [pc, #144]	@ (8000ce8 <cmox_aesFast_encrypt+0x318>)
 8000c58:	f814 0008 	ldrb.w	r0, [r4, r8]
 8000c5c:	5d66      	ldrb	r6, [r4, r5]
 8000c5e:	5c61      	ldrb	r1, [r4, r1]
 8000c60:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8000c62:	0436      	lsls	r6, r6, #16
 8000c64:	ea46 6600 	orr.w	r6, r6, r0, lsl #24
 8000c68:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8000c6a:	5c25      	ldrb	r5, [r4, r0]
 8000c6c:	6818      	ldr	r0, [r3, #0]
 8000c6e:	ea46 2605 	orr.w	r6, r6, r5, lsl #8
 8000c72:	430e      	orrs	r6, r1
 8000c74:	4046      	eors	r6, r0
 8000c76:	6016      	str	r6, [r2, #0]
 8000c78:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000c7a:	5de5      	ldrb	r5, [r4, r7]
 8000c7c:	f814 1009 	ldrb.w	r1, [r4, r9]
 8000c80:	5c26      	ldrb	r6, [r4, r0]
 8000c82:	6858      	ldr	r0, [r3, #4]
 8000c84:	0436      	lsls	r6, r6, #16
 8000c86:	ea46 6605 	orr.w	r6, r6, r5, lsl #24
 8000c8a:	f814 500e 	ldrb.w	r5, [r4, lr]
 8000c8e:	ea46 2605 	orr.w	r6, r6, r5, lsl #8
 8000c92:	430e      	orrs	r6, r1
 8000c94:	4046      	eors	r6, r0
 8000c96:	6056      	str	r6, [r2, #4]
 8000c98:	9905      	ldr	r1, [sp, #20]
 8000c9a:	9e06      	ldr	r6, [sp, #24]
 8000c9c:	5c60      	ldrb	r0, [r4, r1]
 8000c9e:	9908      	ldr	r1, [sp, #32]
 8000ca0:	5c65      	ldrb	r5, [r4, r1]
 8000ca2:	042d      	lsls	r5, r5, #16
 8000ca4:	ea45 6500 	orr.w	r5, r5, r0, lsl #24
 8000ca8:	9807      	ldr	r0, [sp, #28]
 8000caa:	5c21      	ldrb	r1, [r4, r0]
 8000cac:	6898      	ldr	r0, [r3, #8]
 8000cae:	ea45 2501 	orr.w	r5, r5, r1, lsl #8
 8000cb2:	5da1      	ldrb	r1, [r4, r6]
 8000cb4:	430d      	orrs	r5, r1
 8000cb6:	4045      	eors	r5, r0
 8000cb8:	6095      	str	r5, [r2, #8]
 8000cba:	9901      	ldr	r1, [sp, #4]
 8000cbc:	9e02      	ldr	r6, [sp, #8]
 8000cbe:	5c60      	ldrb	r0, [r4, r1]
 8000cc0:	9904      	ldr	r1, [sp, #16]
 8000cc2:	5c65      	ldrb	r5, [r4, r1]
 8000cc4:	042d      	lsls	r5, r5, #16
 8000cc6:	ea45 6500 	orr.w	r5, r5, r0, lsl #24
 8000cca:	9803      	ldr	r0, [sp, #12]
 8000ccc:	5c21      	ldrb	r1, [r4, r0]
 8000cce:	5da0      	ldrb	r0, [r4, r6]
 8000cd0:	ea45 2501 	orr.w	r5, r5, r1, lsl #8
 8000cd4:	68d9      	ldr	r1, [r3, #12]
 8000cd6:	4305      	orrs	r5, r0
 8000cd8:	404d      	eors	r5, r1
 8000cda:	60d5      	str	r5, [r2, #12]
 8000cdc:	b00d      	add	sp, #52	@ 0x34
 8000cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ce2:	bf00      	nop
 8000ce4:	08014c5c 	.word	0x08014c5c
 8000ce8:	0801505c 	.word	0x0801505c

08000cec <cmox_ctr_cleanup>:
 8000cec:	b510      	push	{r4, lr}
 8000cee:	f000 f8ab 	bl	8000e48 <cmox_ctr_getByCipher>
 8000cf2:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 8000cf6:	2800      	cmp	r0, #0
 8000cf8:	bf0e      	itee	eq
 8000cfa:	4c03      	ldreq	r4, [pc, #12]	@ (8000d08 <cmox_ctr_cleanup+0x1c>)
 8000cfc:	f44f 718a 	movne.w	r1, #276	@ 0x114
 8000d00:	f00f f9c7 	blne	8010092 <__aeabi_memclr>
 8000d04:	4620      	mov	r0, r4
 8000d06:	bd10      	pop	{r4, pc}
 8000d08:	00010003 	.word	0x00010003

08000d0c <cmox_ctr_init>:
 8000d0c:	b510      	push	{r4, lr}
 8000d0e:	0004      	movs	r4, r0
 8000d10:	d101      	bne.n	8000d16 <cmox_ctr_init+0xa>
 8000d12:	4805      	ldr	r0, [pc, #20]	@ (8000d28 <cmox_ctr_init+0x1c>)
 8000d14:	bd10      	pop	{r4, pc}
 8000d16:	f000 f897 	bl	8000e48 <cmox_ctr_getByCipher>
 8000d1a:	f100 0108 	add.w	r1, r0, #8
 8000d1e:	4620      	mov	r0, r4
 8000d20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000d24:	f000 bdaa 	b.w	800187c <cmox_cipherMode_init>
 8000d28:	00010003 	.word	0x00010003

08000d2c <cmox_ctr_setKey>:
 8000d2c:	b538      	push	{r3, r4, r5, lr}
 8000d2e:	460c      	mov	r4, r1
 8000d30:	4615      	mov	r5, r2
 8000d32:	b908      	cbnz	r0, 8000d38 <cmox_ctr_setKey+0xc>
 8000d34:	4805      	ldr	r0, [pc, #20]	@ (8000d4c <cmox_ctr_setKey+0x20>)
 8000d36:	bd32      	pop	{r1, r4, r5, pc}
 8000d38:	f000 f886 	bl	8000e48 <cmox_ctr_getByCipher>
 8000d3c:	462a      	mov	r2, r5
 8000d3e:	4621      	mov	r1, r4
 8000d40:	3008      	adds	r0, #8
 8000d42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d46:	f000 bda1 	b.w	800188c <cmox_cipherMode_setKey>
 8000d4a:	bf00      	nop
 8000d4c:	00010003 	.word	0x00010003

08000d50 <cmox_ctr_setIV>:
 8000d50:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 8000d52:	0004      	movs	r4, r0
 8000d54:	460d      	mov	r5, r1
 8000d56:	4616      	mov	r6, r2
 8000d58:	d002      	beq.n	8000d60 <cmox_ctr_setIV+0x10>
 8000d5a:	f000 f875 	bl	8000e48 <cmox_ctr_getByCipher>
 8000d5e:	b908      	cbnz	r0, 8000d64 <cmox_ctr_setIV+0x14>
 8000d60:	4807      	ldr	r0, [pc, #28]	@ (8000d80 <cmox_ctr_setIV+0x30>)
 8000d62:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8000d64:	2e10      	cmp	r6, #16
 8000d66:	4633      	mov	r3, r6
 8000d68:	462a      	mov	r2, r5
 8000d6a:	bf0c      	ite	eq
 8000d6c:	2101      	moveq	r1, #1
 8000d6e:	2100      	movne	r1, #0
 8000d70:	9100      	str	r1, [sp, #0]
 8000d72:	f500 7182 	add.w	r1, r0, #260	@ 0x104
 8000d76:	4620      	mov	r0, r4
 8000d78:	f000 ff6c 	bl	8001c54 <cmox_cipherMode_setIV>
 8000d7c:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8000d7e:	bf00      	nop
 8000d80:	00010003 	.word	0x00010003

08000d84 <cmox_ctr_append>:
 8000d84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d88:	b088      	sub	sp, #32
 8000d8a:	4604      	mov	r4, r0
 8000d8c:	7920      	ldrb	r0, [r4, #4]
 8000d8e:	468b      	mov	fp, r1
 8000d90:	4690      	mov	r8, r2
 8000d92:	07c1      	lsls	r1, r0, #31
 8000d94:	4699      	mov	r9, r3
 8000d96:	bf58      	it	pl
 8000d98:	4825      	ldrpl	r0, [pc, #148]	@ (8000e30 <cmox_ctr_append+0xac>)
 8000d9a:	d545      	bpl.n	8000e28 <cmox_ctr_append+0xa4>
 8000d9c:	4620      	mov	r0, r4
 8000d9e:	f000 f853 	bl	8000e48 <cmox_ctr_getByCipher>
 8000da2:	4605      	mov	r5, r0
 8000da4:	7c28      	ldrb	r0, [r5, #16]
 8000da6:	f000 0005 	and.w	r0, r0, #5
 8000daa:	2805      	cmp	r0, #5
 8000dac:	bf18      	it	ne
 8000dae:	4821      	ldrne	r0, [pc, #132]	@ (8000e34 <cmox_ctr_append+0xb0>)
 8000db0:	d13a      	bne.n	8000e28 <cmox_ctr_append+0xa4>
 8000db2:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8000db4:	b10f      	cbz	r7, 8000dba <cmox_ctr_append+0x36>
 8000db6:	2000      	movs	r0, #0
 8000db8:	6038      	str	r0, [r7, #0]
 8000dba:	2600      	movs	r6, #0
 8000dbc:	e011      	b.n	8000de2 <cmox_ctr_append+0x5e>
 8000dbe:	f81d 0001 	ldrb.w	r0, [sp, r1]
 8000dc2:	f81b 3002 	ldrb.w	r3, [fp, r2]
 8000dc6:	4058      	eors	r0, r3
 8000dc8:	f809 0002 	strb.w	r0, [r9, r2]
 8000dcc:	b117      	cbz	r7, 8000dd4 <cmox_ctr_append+0x50>
 8000dce:	683a      	ldr	r2, [r7, #0]
 8000dd0:	1c52      	adds	r2, r2, #1
 8000dd2:	603a      	str	r2, [r7, #0]
 8000dd4:	1c49      	adds	r1, r1, #1
 8000dd6:	4551      	cmp	r1, sl
 8000dd8:	d202      	bcs.n	8000de0 <cmox_ctr_append+0x5c>
 8000dda:	198a      	adds	r2, r1, r6
 8000ddc:	4590      	cmp	r8, r2
 8000dde:	d2ee      	bcs.n	8000dbe <cmox_ctr_append+0x3a>
 8000de0:	3610      	adds	r6, #16
 8000de2:	4546      	cmp	r6, r8
 8000de4:	d21a      	bcs.n	8000e1c <cmox_ctr_append+0x98>
 8000de6:	68ab      	ldr	r3, [r5, #8]
 8000de8:	eba8 0a06 	sub.w	sl, r8, r6
 8000dec:	f1ba 0f10 	cmp.w	sl, #16
 8000df0:	f8d3 c000 	ldr.w	ip, [r3]
 8000df4:	aa04      	add	r2, sp, #16
 8000df6:	bf88      	it	hi
 8000df8:	f04f 0a10 	movhi.w	sl, #16
 8000dfc:	f505 7182 	add.w	r1, r5, #260	@ 0x104
 8000e00:	f105 0008 	add.w	r0, r5, #8
 8000e04:	47e0      	blx	ip
 8000e06:	f8d5 0110 	ldr.w	r0, [r5, #272]	@ 0x110
 8000e0a:	4669      	mov	r1, sp
 8000e0c:	1c40      	adds	r0, r0, #1
 8000e0e:	f8c5 0110 	str.w	r0, [r5, #272]	@ 0x110
 8000e12:	a804      	add	r0, sp, #16
 8000e14:	f000 ff5a 	bl	8001ccc <convert_block_2_bytes>
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e7dc      	b.n	8000dd6 <cmox_ctr_append+0x52>
 8000e1c:	45b0      	cmp	r8, r6
 8000e1e:	bf3c      	itt	cc
 8000e20:	2000      	movcc	r0, #0
 8000e22:	6060      	strcc	r0, [r4, #4]
 8000e24:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8000e28:	b009      	add	sp, #36	@ 0x24
 8000e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e2e:	bf00      	nop
 8000e30:	00010003 	.word	0x00010003
 8000e34:	00010004 	.word	0x00010004

08000e38 <cmox_ctr_general_dir>:
 8000e38:	b110      	cbz	r0, 8000e40 <cmox_ctr_general_dir+0x8>
 8000e3a:	4a02      	ldr	r2, [pc, #8]	@ (8000e44 <cmox_ctr_general_dir+0xc>)
 8000e3c:	6002      	str	r2, [r0, #0]
 8000e3e:	6081      	str	r1, [r0, #8]
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	08014540 	.word	0x08014540

08000e48 <cmox_ctr_getByCipher>:
 8000e48:	6801      	ldr	r1, [r0, #0]
 8000e4a:	4a02      	ldr	r2, [pc, #8]	@ (8000e54 <cmox_ctr_getByCipher+0xc>)
 8000e4c:	4291      	cmp	r1, r2
 8000e4e:	bf18      	it	ne
 8000e50:	2000      	movne	r0, #0
 8000e52:	4770      	bx	lr
 8000e54:	08014540 	.word	0x08014540

08000e58 <cmox_ctr_construct>:
 8000e58:	460a      	mov	r2, r1
 8000e5a:	6853      	ldr	r3, [r2, #4]
 8000e5c:	6812      	ldr	r2, [r2, #0]
 8000e5e:	6819      	ldr	r1, [r3, #0]

08000e60 <__iar_annotation$$tailcall>:
 8000e60:	4710      	bx	r2
	...

08000e64 <cmox_hmac_cleanup>:
 8000e64:	b510      	push	{r4, lr}
 8000e66:	f000 fa33 	bl	80012d0 <cmox_hmac_getByMAC>
 8000e6a:	f44f 3440 	mov.w	r4, #196608	@ 0x30000
 8000e6e:	2800      	cmp	r0, #0
 8000e70:	bf0e      	itee	eq
 8000e72:	4c03      	ldreq	r4, [pc, #12]	@ (8000e80 <cmox_hmac_cleanup+0x1c>)
 8000e74:	f44f 71c0 	movne.w	r1, #384	@ 0x180
 8000e78:	f00f f90b 	blne	8010092 <__aeabi_memclr>
 8000e7c:	4620      	mov	r0, r4
 8000e7e:	bd10      	pop	{r4, pc}
 8000e80:	00030002 	.word	0x00030002

08000e84 <cmox_hmac_init>:
 8000e84:	b510      	push	{r4, lr}
 8000e86:	4604      	mov	r4, r0
 8000e88:	f000 fa22 	bl	80012d0 <cmox_hmac_getByMAC>
 8000e8c:	b908      	cbnz	r0, 8000e92 <cmox_hmac_init+0xe>
 8000e8e:	4805      	ldr	r0, [pc, #20]	@ (8000ea4 <cmox_hmac_init+0x20>)
 8000e90:	bd10      	pop	{r4, pc}
 8000e92:	2100      	movs	r1, #0
 8000e94:	60a1      	str	r1, [r4, #8]
 8000e96:	f8d0 217c 	ldr.w	r2, [r0, #380]	@ 0x17c
 8000e9a:	6811      	ldr	r1, [r2, #0]
 8000e9c:	4788      	blx	r1
 8000e9e:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8000ea2:	bd10      	pop	{r4, pc}
 8000ea4:	00030002 	.word	0x00030002

08000ea8 <cmox_hmac_setTagLen>:
 8000ea8:	b570      	push	{r4, r5, r6, lr}
 8000eaa:	4604      	mov	r4, r0
 8000eac:	460d      	mov	r5, r1
 8000eae:	f000 fa0f 	bl	80012d0 <cmox_hmac_getByMAC>
 8000eb2:	4e06      	ldr	r6, [pc, #24]	@ (8000ecc <cmox_hmac_setTagLen+0x24>)
 8000eb4:	b140      	cbz	r0, 8000ec8 <cmox_hmac_setTagLen+0x20>
 8000eb6:	f8d0 017c 	ldr.w	r0, [r0, #380]	@ 0x17c
 8000eba:	6841      	ldr	r1, [r0, #4]
 8000ebc:	4788      	blx	r1
 8000ebe:	42a8      	cmp	r0, r5
 8000ec0:	bf24      	itt	cs
 8000ec2:	6065      	strcs	r5, [r4, #4]
 8000ec4:	f44f 3640 	movcs.w	r6, #196608	@ 0x30000
 8000ec8:	4630      	mov	r0, r6
 8000eca:	bd70      	pop	{r4, r5, r6, pc}
 8000ecc:	00030002 	.word	0x00030002

08000ed0 <cmox_hmac_setKey>:
 8000ed0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000ed4:	460c      	mov	r4, r1
 8000ed6:	0015      	movs	r5, r2
 8000ed8:	d000      	beq.n	8000edc <cmox_hmac_setKey+0xc>
 8000eda:	b12c      	cbz	r4, 8000ee8 <cmox_hmac_setKey+0x18>
 8000edc:	4606      	mov	r6, r0
 8000ede:	f000 f9f7 	bl	80012d0 <cmox_hmac_getByMAC>
 8000ee2:	ea5f 0800 	movs.w	r8, r0
 8000ee6:	d101      	bne.n	8000eec <cmox_hmac_setKey+0x1c>
 8000ee8:	4864      	ldr	r0, [pc, #400]	@ (800107c <cmox_hmac_setKey+0x1ac>)
 8000eea:	e0c3      	b.n	8001074 <cmox_hmac_setKey+0x1a4>
 8000eec:	f8d8 00f8 	ldr.w	r0, [r8, #248]	@ 0xf8
 8000ef0:	6801      	ldr	r1, [r0, #0]
 8000ef2:	684a      	ldr	r2, [r1, #4]
 8000ef4:	4790      	blx	r2
 8000ef6:	f5b0 3f00 	cmp.w	r0, #131072	@ 0x20000
 8000efa:	d117      	bne.n	8000f2c <cmox_hmac_setKey+0x5c>
 8000efc:	f8d8 117c 	ldr.w	r1, [r8, #380]	@ 0x17c
 8000f00:	4640      	mov	r0, r8
 8000f02:	688a      	ldr	r2, [r1, #8]
 8000f04:	4790      	blx	r2
 8000f06:	4681      	mov	r9, r0
 8000f08:	f1b9 0f81 	cmp.w	r9, #129	@ 0x81
 8000f0c:	f080 809e 	bcs.w	800104c <cmox_hmac_setKey+0x17c>
 8000f10:	f108 0afc 	add.w	sl, r8, #252	@ 0xfc
 8000f14:	45a9      	cmp	r9, r5
 8000f16:	d217      	bcs.n	8000f48 <cmox_hmac_setKey+0x78>
 8000f18:	f8d8 00f8 	ldr.w	r0, [r8, #248]	@ 0xf8
 8000f1c:	462a      	mov	r2, r5
 8000f1e:	4621      	mov	r1, r4
 8000f20:	6803      	ldr	r3, [r0, #0]
 8000f22:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8000f26:	47e0      	blx	ip
 8000f28:	f5b0 3f00 	cmp.w	r0, #131072	@ 0x20000
 8000f2c:	f040 808e 	bne.w	800104c <cmox_hmac_setKey+0x17c>
 8000f30:	f8d8 00f8 	ldr.w	r0, [r8, #248]	@ 0xf8
 8000f34:	466a      	mov	r2, sp
 8000f36:	4651      	mov	r1, sl
 8000f38:	6803      	ldr	r3, [r0, #0]
 8000f3a:	f8d3 c010 	ldr.w	ip, [r3, #16]
 8000f3e:	47e0      	blx	ip
 8000f40:	f5b0 3f00 	cmp.w	r0, #131072	@ 0x20000
 8000f44:	d176      	bne.n	8001034 <cmox_hmac_setKey+0x164>
 8000f46:	e00a      	b.n	8000f5e <cmox_hmac_setKey+0x8e>
 8000f48:	2000      	movs	r0, #0
 8000f4a:	e004      	b.n	8000f56 <cmox_hmac_setKey+0x86>
 8000f4c:	5c21      	ldrb	r1, [r4, r0]
 8000f4e:	f80a 1000 	strb.w	r1, [sl, r0]
 8000f52:	9800      	ldr	r0, [sp, #0]
 8000f54:	1c40      	adds	r0, r0, #1
 8000f56:	9000      	str	r0, [sp, #0]
 8000f58:	9800      	ldr	r0, [sp, #0]
 8000f5a:	42a8      	cmp	r0, r5
 8000f5c:	d3f6      	bcc.n	8000f4c <cmox_hmac_setKey+0x7c>
 8000f5e:	f04f 0c00 	mov.w	ip, #0
 8000f62:	4947      	ldr	r1, [pc, #284]	@ (8001080 <cmox_hmac_setKey+0x1b0>)
 8000f64:	4a47      	ldr	r2, [pc, #284]	@ (8001084 <cmox_hmac_setKey+0x1b4>)
 8000f66:	ac01      	add	r4, sp, #4
 8000f68:	4b47      	ldr	r3, [pc, #284]	@ (8001088 <cmox_hmac_setKey+0x1b8>)
 8000f6a:	9800      	ldr	r0, [sp, #0]
 8000f6c:	4584      	cmp	ip, r0
 8000f6e:	d258      	bcs.n	8001022 <cmox_hmac_setKey+0x152>
 8000f70:	e9d3 7000 	ldrd	r7, r0, [r3]
 8000f74:	ad01      	add	r5, sp, #4
 8000f76:	e9c5 7000 	strd	r7, r0, [r5]
 8000f7a:	7810      	ldrb	r0, [r2, #0]
 8000f7c:	2800      	cmp	r0, #0
 8000f7e:	bf1a      	itte	ne
 8000f80:	2004      	movne	r0, #4
 8000f82:	4686      	movne	lr, r0
 8000f84:	f04f 0e00 	moveq.w	lr, #0
 8000f88:	5808      	ldr	r0, [r1, r0]
 8000f8a:	f854 500e 	ldr.w	r5, [r4, lr]
 8000f8e:	2701      	movs	r7, #1
 8000f90:	4428      	add	r0, r5
 8000f92:	4d3e      	ldr	r5, [pc, #248]	@ (800108c <cmox_hmac_setKey+0x1bc>)
 8000f94:	6005      	str	r5, [r0, #0]
 8000f96:	f8d0 e000 	ldr.w	lr, [r0]
 8000f9a:	6087      	str	r7, [r0, #8]
 8000f9c:	9d01      	ldr	r5, [sp, #4]
 8000f9e:	684f      	ldr	r7, [r1, #4]
 8000fa0:	f81a 000c 	ldrb.w	r0, [sl, ip]
 8000fa4:	407d      	eors	r5, r7
 8000fa6:	ea8e 0505 	eor.w	r5, lr, r5
 8000faa:	f085 0e04 	eor.w	lr, r5, #4
 8000fae:	6865      	ldr	r5, [r4, #4]
 8000fb0:	680f      	ldr	r7, [r1, #0]
 8000fb2:	407d      	eors	r5, r7
 8000fb4:	f085 05fc 	eor.w	r5, r5, #252	@ 0xfc
 8000fb8:	4475      	add	r5, lr
 8000fba:	f085 05a3 	eor.w	r5, r5, #163	@ 0xa3
 8000fbe:	4068      	eors	r0, r5
 8000fc0:	f80a 000c 	strb.w	r0, [sl, ip]
 8000fc4:	f10c 0c01 	add.w	ip, ip, #1
 8000fc8:	e7cf      	b.n	8000f6a <cmox_hmac_setKey+0x9a>
 8000fca:	e9d3 4500 	ldrd	r4, r5, [r3]
 8000fce:	a801      	add	r0, sp, #4
 8000fd0:	e9c0 4500 	strd	r4, r5, [r0]
 8000fd4:	7810      	ldrb	r0, [r2, #0]
 8000fd6:	4d2e      	ldr	r5, [pc, #184]	@ (8001090 <cmox_hmac_setKey+0x1c0>)
 8000fd8:	2800      	cmp	r0, #0
 8000fda:	a801      	add	r0, sp, #4
 8000fdc:	bf14      	ite	ne
 8000fde:	f04f 0e04 	movne.w	lr, #4
 8000fe2:	f04f 0e00 	moveq.w	lr, #0
 8000fe6:	4674      	mov	r4, lr
 8000fe8:	f851 e00e 	ldr.w	lr, [r1, lr]
 8000fec:	5904      	ldr	r4, [r0, r4]
 8000fee:	2701      	movs	r7, #1
 8000ff0:	44a6      	add	lr, r4
 8000ff2:	f8ce 5000 	str.w	r5, [lr]
 8000ff6:	f8de 4000 	ldr.w	r4, [lr]
 8000ffa:	f8ce 7008 	str.w	r7, [lr, #8]
 8000ffe:	9f01      	ldr	r7, [sp, #4]
 8001000:	684d      	ldr	r5, [r1, #4]
 8001002:	6840      	ldr	r0, [r0, #4]
 8001004:	407d      	eors	r5, r7
 8001006:	406c      	eors	r4, r5
 8001008:	680d      	ldr	r5, [r1, #0]
 800100a:	f084 0404 	eor.w	r4, r4, #4
 800100e:	4068      	eors	r0, r5
 8001010:	f080 00fc 	eor.w	r0, r0, #252	@ 0xfc
 8001014:	1904      	adds	r4, r0, r4
 8001016:	f084 0457 	eor.w	r4, r4, #87	@ 0x57
 800101a:	f80a 400c 	strb.w	r4, [sl, ip]
 800101e:	f10c 0c01 	add.w	ip, ip, #1
 8001022:	45cc      	cmp	ip, r9
 8001024:	d3d1      	bcc.n	8000fca <cmox_hmac_setKey+0xfa>
 8001026:	f8d8 00f8 	ldr.w	r0, [r8, #248]	@ 0xf8
 800102a:	6801      	ldr	r1, [r0, #0]
 800102c:	684a      	ldr	r2, [r1, #4]
 800102e:	4790      	blx	r2
 8001030:	f5b0 3f00 	cmp.w	r0, #131072	@ 0x20000
 8001034:	d10a      	bne.n	800104c <cmox_hmac_setKey+0x17c>
 8001036:	f8d8 00f8 	ldr.w	r0, [r8, #248]	@ 0xf8
 800103a:	464a      	mov	r2, r9
 800103c:	4651      	mov	r1, sl
 800103e:	6803      	ldr	r3, [r0, #0]
 8001040:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8001044:	47c0      	blx	r8
 8001046:	f5b0 3f00 	cmp.w	r0, #131072	@ 0x20000
 800104a:	d001      	beq.n	8001050 <cmox_hmac_setKey+0x180>
 800104c:	4811      	ldr	r0, [pc, #68]	@ (8001094 <cmox_hmac_setKey+0x1c4>)
 800104e:	e011      	b.n	8001074 <cmox_hmac_setKey+0x1a4>
 8001050:	2000      	movs	r0, #0
 8001052:	e006      	b.n	8001062 <cmox_hmac_setKey+0x192>
 8001054:	f85a 1020 	ldr.w	r1, [sl, r0, lsl #2]
 8001058:	f081 316a 	eor.w	r1, r1, #1785358954	@ 0x6a6a6a6a
 800105c:	f84a 1020 	str.w	r1, [sl, r0, lsl #2]
 8001060:	1c40      	adds	r0, r0, #1
 8001062:	ebb0 0f99 	cmp.w	r0, r9, lsr #2
 8001066:	d3f5      	bcc.n	8001054 <cmox_hmac_setKey+0x184>
 8001068:	68b0      	ldr	r0, [r6, #8]
 800106a:	f040 0001 	orr.w	r0, r0, #1
 800106e:	60b0      	str	r0, [r6, #8]
 8001070:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8001074:	b004      	add	sp, #16
 8001076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800107a:	bf00      	nop
 800107c:	00030002 	.word	0x00030002
 8001080:	0801441c 	.word	0x0801441c
 8001084:	20000214 	.word	0x20000214
 8001088:	080012a8 	.word	0x080012a8
 800108c:	d74ebead 	.word	0xd74ebead
 8001090:	a175be0d 	.word	0xa175be0d
 8001094:	00030001 	.word	0x00030001

08001098 <cmox_hmac_append>:
 8001098:	b538      	push	{r3, r4, r5, lr}
 800109a:	460c      	mov	r4, r1
 800109c:	7a01      	ldrb	r1, [r0, #8]
 800109e:	4615      	mov	r5, r2
 80010a0:	07ca      	lsls	r2, r1, #31
 80010a2:	d502      	bpl.n	80010aa <cmox_hmac_append+0x12>
 80010a4:	f000 f914 	bl	80012d0 <cmox_hmac_getByMAC>
 80010a8:	b908      	cbnz	r0, 80010ae <cmox_hmac_append+0x16>
 80010aa:	4808      	ldr	r0, [pc, #32]	@ (80010cc <cmox_hmac_append+0x34>)
 80010ac:	bd32      	pop	{r1, r4, r5, pc}
 80010ae:	f8d0 00f8 	ldr.w	r0, [r0, #248]	@ 0xf8
 80010b2:	4621      	mov	r1, r4
 80010b4:	462a      	mov	r2, r5
 80010b6:	6803      	ldr	r3, [r0, #0]
 80010b8:	68dc      	ldr	r4, [r3, #12]
 80010ba:	47a0      	blx	r4
 80010bc:	f5b0 3f00 	cmp.w	r0, #131072	@ 0x20000
 80010c0:	d001      	beq.n	80010c6 <cmox_hmac_append+0x2e>
 80010c2:	4803      	ldr	r0, [pc, #12]	@ (80010d0 <cmox_hmac_append+0x38>)
 80010c4:	bd32      	pop	{r1, r4, r5, pc}
 80010c6:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 80010ca:	bd32      	pop	{r1, r4, r5, pc}
 80010cc:	00030002 	.word	0x00030002
 80010d0:	00030001 	.word	0x00030001

080010d4 <cmox_hmac_generateTag>:
 80010d4:	e92d 41f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, lr}
 80010d8:	b091      	sub	sp, #68	@ 0x44
 80010da:	4605      	mov	r5, r0
 80010dc:	460e      	mov	r6, r1
 80010de:	4617      	mov	r7, r2
 80010e0:	2140      	movs	r1, #64	@ 0x40
 80010e2:	a801      	add	r0, sp, #4
 80010e4:	f00e ffd5 	bl	8010092 <__aeabi_memclr>
 80010e8:	7a29      	ldrb	r1, [r5, #8]
 80010ea:	07c8      	lsls	r0, r1, #31
 80010ec:	d504      	bpl.n	80010f8 <cmox_hmac_generateTag+0x24>
 80010ee:	4628      	mov	r0, r5
 80010f0:	f000 f8ee 	bl	80012d0 <cmox_hmac_getByMAC>
 80010f4:	0004      	movs	r4, r0
 80010f6:	d102      	bne.n	80010fe <cmox_hmac_generateTag+0x2a>
 80010f8:	f8df 80a4 	ldr.w	r8, [pc, #164]	@ 80011a0 <cmox_hmac_generateTag+0xcc>
 80010fc:	e04b      	b.n	8001196 <cmox_hmac_generateTag+0xc2>
 80010fe:	f8d4 00f8 	ldr.w	r0, [r4, #248]	@ 0xf8
 8001102:	466a      	mov	r2, sp
 8001104:	a901      	add	r1, sp, #4
 8001106:	6803      	ldr	r3, [r0, #0]
 8001108:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 80011a4 <cmox_hmac_generateTag+0xd0>
 800110c:	f8d3 c010 	ldr.w	ip, [r3, #16]
 8001110:	47e0      	blx	ip
 8001112:	f5b0 3f00 	cmp.w	r0, #131072	@ 0x20000
 8001116:	d13e      	bne.n	8001196 <cmox_hmac_generateTag+0xc2>
 8001118:	f8d4 00f8 	ldr.w	r0, [r4, #248]	@ 0xf8
 800111c:	6801      	ldr	r1, [r0, #0]
 800111e:	684a      	ldr	r2, [r1, #4]
 8001120:	4790      	blx	r2
 8001122:	f5b0 3f00 	cmp.w	r0, #131072	@ 0x20000
 8001126:	d136      	bne.n	8001196 <cmox_hmac_generateTag+0xc2>
 8001128:	f8d4 117c 	ldr.w	r1, [r4, #380]	@ 0x17c
 800112c:	4620      	mov	r0, r4
 800112e:	688a      	ldr	r2, [r1, #8]
 8001130:	4790      	blx	r2
 8001132:	f8d4 30f8 	ldr.w	r3, [r4, #248]	@ 0xf8
 8001136:	4602      	mov	r2, r0
 8001138:	f104 01fc 	add.w	r1, r4, #252	@ 0xfc
 800113c:	4618      	mov	r0, r3
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8001144:	47e0      	blx	ip
 8001146:	f5b0 3f00 	cmp.w	r0, #131072	@ 0x20000
 800114a:	d124      	bne.n	8001196 <cmox_hmac_generateTag+0xc2>
 800114c:	f8d4 017c 	ldr.w	r0, [r4, #380]	@ 0x17c
 8001150:	6841      	ldr	r1, [r0, #4]
 8001152:	4788      	blx	r1
 8001154:	f8d4 30f8 	ldr.w	r3, [r4, #248]	@ 0xf8
 8001158:	4602      	mov	r2, r0
 800115a:	a901      	add	r1, sp, #4
 800115c:	4618      	mov	r0, r3
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8001164:	47e0      	blx	ip
 8001166:	f5b0 3f00 	cmp.w	r0, #131072	@ 0x20000
 800116a:	d114      	bne.n	8001196 <cmox_hmac_generateTag+0xc2>
 800116c:	f8d4 00f8 	ldr.w	r0, [r4, #248]	@ 0xf8
 8001170:	6869      	ldr	r1, [r5, #4]
 8001172:	6802      	ldr	r2, [r0, #0]
 8001174:	6893      	ldr	r3, [r2, #8]
 8001176:	4798      	blx	r3
 8001178:	f5b0 3f00 	cmp.w	r0, #131072	@ 0x20000
 800117c:	d10b      	bne.n	8001196 <cmox_hmac_generateTag+0xc2>
 800117e:	f8d4 00f8 	ldr.w	r0, [r4, #248]	@ 0xf8
 8001182:	463a      	mov	r2, r7
 8001184:	4631      	mov	r1, r6
 8001186:	6803      	ldr	r3, [r0, #0]
 8001188:	691c      	ldr	r4, [r3, #16]
 800118a:	47a0      	blx	r4
 800118c:	f5b0 3f00 	cmp.w	r0, #131072	@ 0x20000
 8001190:	bf08      	it	eq
 8001192:	f44f 3840 	moveq.w	r8, #196608	@ 0x30000
 8001196:	4640      	mov	r0, r8
 8001198:	b012      	add	sp, #72	@ 0x48
 800119a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800119e:	bf00      	nop
 80011a0:	00030002 	.word	0x00030002
 80011a4:	00030001 	.word	0x00030001

080011a8 <cmox_hmac_verifyTag>:
 80011a8:	e92d 41f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, lr}
 80011ac:	b0a5      	sub	sp, #148	@ 0x94
 80011ae:	4607      	mov	r7, r0
 80011b0:	4688      	mov	r8, r1
 80011b2:	4616      	mov	r6, r2
 80011b4:	2140      	movs	r1, #64	@ 0x40
 80011b6:	a815      	add	r0, sp, #84	@ 0x54
 80011b8:	f00e ff6b 	bl	8010092 <__aeabi_memclr>
 80011bc:	2200      	movs	r2, #0
 80011be:	9204      	str	r2, [sp, #16]
 80011c0:	2140      	movs	r1, #64	@ 0x40
 80011c2:	a805      	add	r0, sp, #20
 80011c4:	f00e ff65 	bl	8010092 <__aeabi_memclr>
 80011c8:	7a38      	ldrb	r0, [r7, #8]
 80011ca:	07c1      	lsls	r1, r0, #31
 80011cc:	d55e      	bpl.n	800128c <cmox_hmac_verifyTag+0xe4>
 80011ce:	4638      	mov	r0, r7
 80011d0:	f000 f87e 	bl	80012d0 <cmox_hmac_getByMAC>
 80011d4:	0005      	movs	r5, r0
 80011d6:	d059      	beq.n	800128c <cmox_hmac_verifyTag+0xe4>
 80011d8:	f8d5 00f8 	ldr.w	r0, [r5, #248]	@ 0xf8
 80011dc:	466a      	mov	r2, sp
 80011de:	a905      	add	r1, sp, #20
 80011e0:	6803      	ldr	r3, [r0, #0]
 80011e2:	4c2c      	ldr	r4, [pc, #176]	@ (8001294 <cmox_hmac_verifyTag+0xec>)
 80011e4:	f8d3 c010 	ldr.w	ip, [r3, #16]
 80011e8:	47e0      	blx	ip
 80011ea:	f5b0 3f00 	cmp.w	r0, #131072	@ 0x20000
 80011ee:	d13c      	bne.n	800126a <cmox_hmac_verifyTag+0xc2>
 80011f0:	f8d5 00f8 	ldr.w	r0, [r5, #248]	@ 0xf8
 80011f4:	6801      	ldr	r1, [r0, #0]
 80011f6:	684a      	ldr	r2, [r1, #4]
 80011f8:	4790      	blx	r2
 80011fa:	f5b0 3f00 	cmp.w	r0, #131072	@ 0x20000
 80011fe:	d134      	bne.n	800126a <cmox_hmac_verifyTag+0xc2>
 8001200:	f8d5 117c 	ldr.w	r1, [r5, #380]	@ 0x17c
 8001204:	4628      	mov	r0, r5
 8001206:	688a      	ldr	r2, [r1, #8]
 8001208:	4790      	blx	r2
 800120a:	f8d5 30f8 	ldr.w	r3, [r5, #248]	@ 0xf8
 800120e:	4602      	mov	r2, r0
 8001210:	f105 01fc 	add.w	r1, r5, #252	@ 0xfc
 8001214:	4618      	mov	r0, r3
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800121c:	47e0      	blx	ip
 800121e:	f5b0 3f00 	cmp.w	r0, #131072	@ 0x20000
 8001222:	d122      	bne.n	800126a <cmox_hmac_verifyTag+0xc2>
 8001224:	f8d5 017c 	ldr.w	r0, [r5, #380]	@ 0x17c
 8001228:	6841      	ldr	r1, [r0, #4]
 800122a:	4788      	blx	r1
 800122c:	f8d5 30f8 	ldr.w	r3, [r5, #248]	@ 0xf8
 8001230:	4602      	mov	r2, r0
 8001232:	a905      	add	r1, sp, #20
 8001234:	4618      	mov	r0, r3
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800123c:	47e0      	blx	ip
 800123e:	f5b0 3f00 	cmp.w	r0, #131072	@ 0x20000
 8001242:	d112      	bne.n	800126a <cmox_hmac_verifyTag+0xc2>
 8001244:	f8d5 00f8 	ldr.w	r0, [r5, #248]	@ 0xf8
 8001248:	6879      	ldr	r1, [r7, #4]
 800124a:	6802      	ldr	r2, [r0, #0]
 800124c:	6893      	ldr	r3, [r2, #8]
 800124e:	4798      	blx	r3
 8001250:	f5b0 3f00 	cmp.w	r0, #131072	@ 0x20000
 8001254:	d109      	bne.n	800126a <cmox_hmac_verifyTag+0xc2>
 8001256:	f8d5 00f8 	ldr.w	r0, [r5, #248]	@ 0xf8
 800125a:	aa04      	add	r2, sp, #16
 800125c:	a915      	add	r1, sp, #84	@ 0x54
 800125e:	6803      	ldr	r3, [r0, #0]
 8001260:	691d      	ldr	r5, [r3, #16]
 8001262:	47a8      	blx	r5
 8001264:	f5b0 3f00 	cmp.w	r0, #131072	@ 0x20000
 8001268:	d001      	beq.n	800126e <cmox_hmac_verifyTag+0xc6>
 800126a:	4620      	mov	r0, r4
 800126c:	e00f      	b.n	800128e <cmox_hmac_verifyTag+0xe6>
 800126e:	4b0a      	ldr	r3, [pc, #40]	@ (8001298 <cmox_hmac_verifyTag+0xf0>)
 8001270:	9603      	str	r6, [sp, #12]
 8001272:	681c      	ldr	r4, [r3, #0]
 8001274:	4909      	ldr	r1, [pc, #36]	@ (800129c <cmox_hmac_verifyTag+0xf4>)
 8001276:	9102      	str	r1, [sp, #8]
 8001278:	9400      	str	r4, [sp, #0]
 800127a:	4a09      	ldr	r2, [pc, #36]	@ (80012a0 <cmox_hmac_verifyTag+0xf8>)
 800127c:	9b04      	ldr	r3, [sp, #16]
 800127e:	9201      	str	r2, [sp, #4]
 8001280:	6879      	ldr	r1, [r7, #4]
 8001282:	4640      	mov	r0, r8
 8001284:	aa15      	add	r2, sp, #84	@ 0x54
 8001286:	f000 f9ed 	bl	8001664 <cmox_utils_robustCmp>
 800128a:	e000      	b.n	800128e <cmox_hmac_verifyTag+0xe6>
 800128c:	4805      	ldr	r0, [pc, #20]	@ (80012a4 <cmox_hmac_verifyTag+0xfc>)
 800128e:	b026      	add	sp, #152	@ 0x98
 8001290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001294:	00030001 	.word	0x00030001
 8001298:	0801456c 	.word	0x0801456c
 800129c:	00036e93 	.word	0x00036e93
 80012a0:	0003c726 	.word	0x0003c726
 80012a4:	00030002 	.word	0x00030002
 80012a8:	0101b004 	.word	0x0101b004
 80012ac:	45011700 	.word	0x45011700

080012b0 <hmac_table>:
 80012b0:	08000e65 08000e85 08000ea9 08000609     e...............
 80012c0:	08000ed1 08001099 080010d5 080011a9     ................

080012d0 <cmox_hmac_getByMAC>:
 80012d0:	6801      	ldr	r1, [r0, #0]
 80012d2:	4a02      	ldr	r2, [pc, #8]	@ (80012dc <cmox_hmac_getByMAC+0xc>)
 80012d4:	4291      	cmp	r1, r2
 80012d6:	bf18      	it	ne
 80012d8:	2000      	movne	r0, #0
 80012da:	4770      	bx	lr
 80012dc:	080012b0 	.word	0x080012b0

080012e0 <cmox_hmac_construct>:
 80012e0:	b510      	push	{r4, lr}
 80012e2:	0004      	movs	r4, r0
 80012e4:	bf08      	it	eq
 80012e6:	2400      	moveq	r4, #0
 80012e8:	d004      	beq.n	80012f4 <cmox_hmac_construct+0x14>
 80012ea:	4803      	ldr	r0, [pc, #12]	@ (80012f8 <cmox_hmac_construct+0x18>)
 80012ec:	6020      	str	r0, [r4, #0]
 80012ee:	6809      	ldr	r1, [r1, #0]
 80012f0:	4620      	mov	r0, r4
 80012f2:	4788      	blx	r1
 80012f4:	4620      	mov	r0, r4
 80012f6:	bd10      	pop	{r4, pc}
 80012f8:	080012b0 	.word	0x080012b0

080012fc <cmox_md_updateState_small>:
 80012fc:	2220      	movs	r2, #32
 80012fe:	305c      	adds	r0, #92	@ 0x5c
 8001300:	f00e bec5 	b.w	801008e <__aeabi_memcpy>

08001304 <cmox_md_copyLastState_small>:
 8001304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001306:	6883      	ldr	r3, [r0, #8]
 8001308:	2400      	movs	r4, #0
 800130a:	089a      	lsrs	r2, r3, #2
 800130c:	f003 0303 	and.w	r3, r3, #3
 8001310:	e00f      	b.n	8001332 <cmox_md_copyLastState_small+0x2e>
 8001312:	eb00 0684 	add.w	r6, r0, r4, lsl #2
 8001316:	6df7      	ldr	r7, [r6, #92]	@ 0x5c
 8001318:	eb01 0584 	add.w	r5, r1, r4, lsl #2
 800131c:	1c64      	adds	r4, r4, #1
 800131e:	70ef      	strb	r7, [r5, #3]
 8001320:	6df7      	ldr	r7, [r6, #92]	@ 0x5c
 8001322:	0a3f      	lsrs	r7, r7, #8
 8001324:	70af      	strb	r7, [r5, #2]
 8001326:	6df7      	ldr	r7, [r6, #92]	@ 0x5c
 8001328:	0c3f      	lsrs	r7, r7, #16
 800132a:	706f      	strb	r7, [r5, #1]
 800132c:	6df6      	ldr	r6, [r6, #92]	@ 0x5c
 800132e:	0e36      	lsrs	r6, r6, #24
 8001330:	702e      	strb	r6, [r5, #0]
 8001332:	4294      	cmp	r4, r2
 8001334:	d3ed      	bcc.n	8001312 <cmox_md_copyLastState_small+0xe>
 8001336:	2400      	movs	r4, #0
 8001338:	e00b      	b.n	8001352 <cmox_md_copyLastState_small+0x4e>
 800133a:	f100 055c 	add.w	r5, r0, #92	@ 0x5c
 800133e:	f855 6022 	ldr.w	r6, [r5, r2, lsl #2]
 8001342:	00e5      	lsls	r5, r4, #3
 8001344:	f1c5 0518 	rsb	r5, r5, #24
 8001348:	40ee      	lsrs	r6, r5
 800134a:	eb04 0782 	add.w	r7, r4, r2, lsl #2
 800134e:	55ce      	strb	r6, [r1, r7]
 8001350:	1c64      	adds	r4, r4, #1
 8001352:	429c      	cmp	r4, r3
 8001354:	d3f1      	bcc.n	800133a <cmox_md_copyLastState_small+0x36>
 8001356:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001358 <cmox_md_padMsgLen_small>:
 8001358:	b530      	push	{r4, r5, lr}
 800135a:	68c4      	ldr	r4, [r0, #12]
 800135c:	6903      	ldr	r3, [r0, #16]
 800135e:	2200      	movs	r2, #0
 8001360:	1ae3      	subs	r3, r4, r3
 8001362:	5c8c      	ldrb	r4, [r1, r2]
 8001364:	18d5      	adds	r5, r2, r3
 8001366:	4405      	add	r5, r0
 8001368:	1c52      	adds	r2, r2, #1
 800136a:	772c      	strb	r4, [r5, #28]
 800136c:	2a08      	cmp	r2, #8
 800136e:	d3f8      	bcc.n	8001362 <cmox_md_padMsgLen_small+0xa>
 8001370:	bd30      	pop	{r4, r5, pc}

08001372 <cmox_md_construct>:
 8001372:	6003      	str	r3, [r0, #0]
 8001374:	60c1      	str	r1, [r0, #12]
 8001376:	6102      	str	r2, [r0, #16]
 8001378:	4770      	bx	lr

0800137a <cmox_md_init>:
 800137a:	b538      	push	{r3, r4, r5, lr}
 800137c:	4615      	mov	r5, r2
 800137e:	4604      	mov	r4, r0
 8001380:	2200      	movs	r2, #0
 8001382:	6062      	str	r2, [r4, #4]
 8001384:	6823      	ldr	r3, [r4, #0]
 8001386:	685a      	ldr	r2, [r3, #4]
 8001388:	4790      	blx	r2
 800138a:	2000      	movs	r0, #0
 800138c:	6160      	str	r0, [r4, #20]
 800138e:	61a0      	str	r0, [r4, #24]
 8001390:	60a5      	str	r5, [r4, #8]
 8001392:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8001396:	bd32      	pop	{r1, r4, r5, pc}

08001398 <cmox_md_setTagSize>:
 8001398:	6081      	str	r1, [r0, #8]
 800139a:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800139e:	4770      	bx	lr

080013a0 <cmox_md_append>:
 80013a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80013a4:	4604      	mov	r4, r0
 80013a6:	7920      	ldrb	r0, [r4, #4]
 80013a8:	f8d4 800c 	ldr.w	r8, [r4, #12]
 80013ac:	0745      	lsls	r5, r0, #29
 80013ae:	bf48      	it	mi
 80013b0:	4824      	ldrmi	r0, [pc, #144]	@ (8001444 <cmox_md_append+0xa4>)
 80013b2:	d444      	bmi.n	800143e <cmox_md_append+0x9e>
 80013b4:	6966      	ldr	r6, [r4, #20]
 80013b6:	461d      	mov	r5, r3
 80013b8:	f1a8 0001 	sub.w	r0, r8, #1
 80013bc:	ea00 03d6 	and.w	r3, r0, r6, lsr #3
 80013c0:	eb06 06c5 	add.w	r6, r6, r5, lsl #3
 80013c4:	6166      	str	r6, [r4, #20]
 80013c6:	ebb6 0fc5 	cmp.w	r6, r5, lsl #3
 80013ca:	d202      	bcs.n	80013d2 <cmox_md_append+0x32>
 80013cc:	69a6      	ldr	r6, [r4, #24]
 80013ce:	1c76      	adds	r6, r6, #1
 80013d0:	61a6      	str	r6, [r4, #24]
 80013d2:	69a6      	ldr	r6, [r4, #24]
 80013d4:	4617      	mov	r7, r2
 80013d6:	eb06 7655 	add.w	r6, r6, r5, lsr #29
 80013da:	61a6      	str	r6, [r4, #24]
 80013dc:	460e      	mov	r6, r1
 80013de:	18e9      	adds	r1, r5, r3
 80013e0:	4288      	cmp	r0, r1
 80013e2:	d224      	bcs.n	800142e <cmox_md_append+0x8e>
 80013e4:	eba8 0903 	sub.w	r9, r8, r3
 80013e8:	464a      	mov	r2, r9
 80013ea:	4631      	mov	r1, r6
 80013ec:	18f8      	adds	r0, r7, r3
 80013ee:	f00e fe4e 	bl	801008e <__aeabi_memcpy>
 80013f2:	6822      	ldr	r2, [r4, #0]
 80013f4:	4639      	mov	r1, r7
 80013f6:	e00e      	b.n	8001416 <cmox_md_append+0x76>
 80013f8:	4642      	mov	r2, r8
 80013fa:	4638      	mov	r0, r7
 80013fc:	f00e fe47 	bl	801008e <__aeabi_memcpy>
 8001400:	6823      	ldr	r3, [r4, #0]
 8001402:	4639      	mov	r1, r7
 8001404:	4620      	mov	r0, r4
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	4790      	blx	r2
 800140a:	e007      	b.n	800141c <cmox_md_append+0x7c>
 800140c:	1831      	adds	r1, r6, r0
 800140e:	f011 0003 	ands.w	r0, r1, #3
 8001412:	d1f1      	bne.n	80013f8 <cmox_md_append+0x58>
 8001414:	6822      	ldr	r2, [r4, #0]
 8001416:	4620      	mov	r0, r4
 8001418:	6813      	ldr	r3, [r2, #0]
 800141a:	4798      	blx	r3
 800141c:	4648      	mov	r0, r9
 800141e:	eb00 0908 	add.w	r9, r0, r8
 8001422:	f1a9 0101 	sub.w	r1, r9, #1
 8001426:	42a9      	cmp	r1, r5
 8001428:	d3f0      	bcc.n	800140c <cmox_md_append+0x6c>
 800142a:	2300      	movs	r3, #0
 800142c:	e000      	b.n	8001430 <cmox_md_append+0x90>
 800142e:	2000      	movs	r0, #0
 8001430:	1a2a      	subs	r2, r5, r0
 8001432:	1831      	adds	r1, r6, r0
 8001434:	18f8      	adds	r0, r7, r3
 8001436:	f00e fe2a 	bl	801008e <__aeabi_memcpy>
 800143a:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800143e:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}
 8001442:	bf00      	nop
 8001444:	00020004 	.word	0x00020004

08001448 <cmox_md_generateTag>:
 8001448:	e92d 4ffc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800144c:	b085      	sub	sp, #20
 800144e:	4602      	mov	r2, r0
 8001450:	68d0      	ldr	r0, [r2, #12]
 8001452:	6913      	ldr	r3, [r2, #16]
 8001454:	2700      	movs	r7, #0
 8001456:	f8df c16c 	ldr.w	ip, [pc, #364]	@ 80015c4 <cmox_md_generateTag+0x17c>
 800145a:	eba0 0a03 	sub.w	sl, r0, r3
 800145e:	6850      	ldr	r0, [r2, #4]
 8001460:	f10d 0e0c 	add.w	lr, sp, #12
 8001464:	f8df 8160 	ldr.w	r8, [pc, #352]	@ 80015c8 <cmox_md_generateTag+0x180>
 8001468:	f040 0004 	orr.w	r0, r0, #4
 800146c:	6050      	str	r0, [r2, #4]
 800146e:	a803      	add	r0, sp, #12
 8001470:	9002      	str	r0, [sp, #8]
 8001472:	e9d8 3400 	ldrd	r3, r4, [r8]
 8001476:	a803      	add	r0, sp, #12
 8001478:	4d54      	ldr	r5, [pc, #336]	@ (80015cc <cmox_md_generateTag+0x184>)
 800147a:	e9c0 3400 	strd	r3, r4, [r0]
 800147e:	7828      	ldrb	r0, [r5, #0]
 8001480:	4d53      	ldr	r5, [pc, #332]	@ (80015d0 <cmox_md_generateTag+0x188>)
 8001482:	2800      	cmp	r0, #0
 8001484:	bf0c      	ite	eq
 8001486:	2300      	moveq	r3, #0
 8001488:	2304      	movne	r3, #4
 800148a:	4699      	mov	r9, r3
 800148c:	f85c 3003 	ldr.w	r3, [ip, r3]
 8001490:	f85e 4009 	ldr.w	r4, [lr, r9]
 8001494:	2601      	movs	r6, #1
 8001496:	4423      	add	r3, r4
 8001498:	601d      	str	r5, [r3, #0]
 800149a:	681c      	ldr	r4, [r3, #0]
 800149c:	609e      	str	r6, [r3, #8]
 800149e:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80014a2:	9d03      	ldr	r5, [sp, #12]
 80014a4:	f8dc 9000 	ldr.w	r9, [ip]
 80014a8:	f8de 6004 	ldr.w	r6, [lr, #4]
 80014ac:	405d      	eors	r5, r3
 80014ae:	4065      	eors	r5, r4
 80014b0:	4c48      	ldr	r4, [pc, #288]	@ (80015d4 <cmox_md_generateTag+0x18c>)
 80014b2:	4065      	eors	r5, r4
 80014b4:	ea89 0606 	eor.w	r6, r9, r6
 80014b8:	4c47      	ldr	r4, [pc, #284]	@ (80015d8 <cmox_md_generateTag+0x190>)
 80014ba:	4066      	eors	r6, r4
 80014bc:	1975      	adds	r5, r6, r5
 80014be:	4c47      	ldr	r4, [pc, #284]	@ (80015dc <cmox_md_generateTag+0x194>)
 80014c0:	e9d8 6b00 	ldrd	r6, fp, [r8]
 80014c4:	4065      	eors	r5, r4
 80014c6:	2800      	cmp	r0, #0
 80014c8:	ac03      	add	r4, sp, #12
 80014ca:	e9c4 6b00 	strd	r6, fp, [r4]
 80014ce:	9e02      	ldr	r6, [sp, #8]
 80014d0:	bf0e      	itee	eq
 80014d2:	2400      	moveq	r4, #0
 80014d4:	2004      	movne	r0, #4
 80014d6:	2404      	movne	r4, #4
 80014d8:	f85c 0000 	ldr.w	r0, [ip, r0]
 80014dc:	5934      	ldr	r4, [r6, r4]
 80014de:	2601      	movs	r6, #1
 80014e0:	1820      	adds	r0, r4, r0
 80014e2:	4c3f      	ldr	r4, [pc, #252]	@ (80015e0 <cmox_md_generateTag+0x198>)
 80014e4:	6004      	str	r4, [r0, #0]
 80014e6:	6804      	ldr	r4, [r0, #0]
 80014e8:	6086      	str	r6, [r0, #8]
 80014ea:	9803      	ldr	r0, [sp, #12]
 80014ec:	9e02      	ldr	r6, [sp, #8]
 80014ee:	4043      	eors	r3, r0
 80014f0:	4063      	eors	r3, r4
 80014f2:	6870      	ldr	r0, [r6, #4]
 80014f4:	4c37      	ldr	r4, [pc, #220]	@ (80015d4 <cmox_md_generateTag+0x18c>)
 80014f6:	4063      	eors	r3, r4
 80014f8:	ea89 0000 	eor.w	r0, r9, r0
 80014fc:	4c36      	ldr	r4, [pc, #216]	@ (80015d8 <cmox_md_generateTag+0x190>)
 80014fe:	4060      	eors	r0, r4
 8001500:	4403      	add	r3, r0
 8001502:	4838      	ldr	r0, [pc, #224]	@ (80015e4 <cmox_md_generateTag+0x19c>)
 8001504:	4043      	eors	r3, r0
 8001506:	0028      	movs	r0, r5
 8001508:	bf18      	it	ne
 800150a:	2001      	movne	r0, #1
 800150c:	1e5b      	subs	r3, r3, #1
 800150e:	419b      	sbcs	r3, r3
 8001510:	2f04      	cmp	r7, #4
 8001512:	bf2c      	ite	cs
 8001514:	b2c0      	uxtbcs	r0, r0
 8001516:	0fd8      	lsrcc	r0, r3, #31
 8001518:	f102 0314 	add.w	r3, r2, #20
 800151c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001520:	f007 0303 	and.w	r3, r7, #3
 8001524:	f1c3 0303 	rsb	r3, r3, #3
 8001528:	00db      	lsls	r3, r3, #3
 800152a:	40d8      	lsrs	r0, r3
 800152c:	f80d 0007 	strb.w	r0, [sp, r7]
 8001530:	1c7f      	adds	r7, r7, #1
 8001532:	2f08      	cmp	r7, #8
 8001534:	d39d      	bcc.n	8001472 <cmox_md_generateTag+0x2a>
 8001536:	4615      	mov	r5, r2
 8001538:	696a      	ldr	r2, [r5, #20]
 800153a:	69ab      	ldr	r3, [r5, #24]
 800153c:	68e8      	ldr	r0, [r5, #12]
 800153e:	08d2      	lsrs	r2, r2, #3
 8001540:	ea42 7243 	orr.w	r2, r2, r3, lsl #29
 8001544:	1e40      	subs	r0, r0, #1
 8001546:	2300      	movs	r3, #0
 8001548:	ea00 0702 	and.w	r7, r0, r2
 800154c:	4002      	ands	r2, r0
 800154e:	460c      	mov	r4, r1
 8001550:	429b      	cmp	r3, r3
 8001552:	d80a      	bhi.n	800156a <cmox_md_generateTag+0x122>
 8001554:	4552      	cmp	r2, sl
 8001556:	d208      	bcs.n	800156a <cmox_md_generateTag+0x122>
 8001558:	2080      	movs	r0, #128	@ 0x80
 800155a:	55e0      	strb	r0, [r4, r7]
 800155c:	1c7f      	adds	r7, r7, #1
 800155e:	4557      	cmp	r7, sl
 8001560:	d216      	bcs.n	8001590 <cmox_md_generateTag+0x148>
 8001562:	ebaa 0107 	sub.w	r1, sl, r7
 8001566:	19e0      	adds	r0, r4, r7
 8001568:	e010      	b.n	800158c <cmox_md_generateTag+0x144>
 800156a:	2080      	movs	r0, #128	@ 0x80
 800156c:	55e0      	strb	r0, [r4, r7]
 800156e:	e000      	b.n	8001572 <cmox_md_generateTag+0x12a>
 8001570:	55e3      	strb	r3, [r4, r7]
 8001572:	68e8      	ldr	r0, [r5, #12]
 8001574:	1c7f      	adds	r7, r7, #1
 8001576:	4287      	cmp	r7, r0
 8001578:	d3fa      	bcc.n	8001570 <cmox_md_generateTag+0x128>
 800157a:	682a      	ldr	r2, [r5, #0]
 800157c:	4628      	mov	r0, r5
 800157e:	6813      	ldr	r3, [r2, #0]
 8001580:	4798      	blx	r3
 8001582:	f1ba 0f00 	cmp.w	sl, #0
 8001586:	d003      	beq.n	8001590 <cmox_md_generateTag+0x148>
 8001588:	4651      	mov	r1, sl
 800158a:	4620      	mov	r0, r4
 800158c:	f00e fd81 	bl	8010092 <__aeabi_memclr>
 8001590:	682a      	ldr	r2, [r5, #0]
 8001592:	9e06      	ldr	r6, [sp, #24]
 8001594:	9f05      	ldr	r7, [sp, #20]
 8001596:	6893      	ldr	r3, [r2, #8]
 8001598:	4669      	mov	r1, sp
 800159a:	4628      	mov	r0, r5
 800159c:	4798      	blx	r3
 800159e:	682a      	ldr	r2, [r5, #0]
 80015a0:	4621      	mov	r1, r4
 80015a2:	4628      	mov	r0, r5
 80015a4:	f8d2 9000 	ldr.w	r9, [r2]
 80015a8:	47c8      	blx	r9
 80015aa:	682b      	ldr	r3, [r5, #0]
 80015ac:	4639      	mov	r1, r7
 80015ae:	4628      	mov	r0, r5
 80015b0:	68da      	ldr	r2, [r3, #12]
 80015b2:	4790      	blx	r2
 80015b4:	b10e      	cbz	r6, 80015ba <cmox_md_generateTag+0x172>
 80015b6:	68a8      	ldr	r0, [r5, #8]
 80015b8:	6030      	str	r0, [r6, #0]
 80015ba:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80015be:	b007      	add	sp, #28
 80015c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80015c4:	0801441c 	.word	0x0801441c
 80015c8:	080015e8 	.word	0x080015e8
 80015cc:	20000214 	.word	0x20000214
 80015d0:	9310c55f 	.word	0x9310c55f
 80015d4:	12008504 	.word	0x12008504
 80015d8:	7a0168fc 	.word	0x7a0168fc
 80015dc:	ff24f5c0 	.word	0xff24f5c0
 80015e0:	d433af24 	.word	0xd433af24
 80015e4:	8b69af26 	.word	0x8b69af26
 80015e8:	0101b004 	.word	0x0101b004
 80015ec:	45011700 	.word	0x45011700

080015f0 <firstloop_bb_cmp>:
 80015f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015f2:	2401      	movs	r4, #1
 80015f4:	9400      	str	r4, [sp, #0]
 80015f6:	2300      	movs	r3, #0
 80015f8:	2400      	movs	r4, #0
 80015fa:	e00d      	b.n	8001618 <firstloop_bb_cmp+0x28>
 80015fc:	9d00      	ldr	r5, [sp, #0]
 80015fe:	5d06      	ldrb	r6, [r0, r4]
 8001600:	5d0f      	ldrb	r7, [r1, r4]
 8001602:	1c64      	adds	r4, r4, #1
 8001604:	407e      	eors	r6, r7
 8001606:	43f6      	mvns	r6, r6
 8001608:	1c76      	adds	r6, r6, #1
 800160a:	0ff6      	lsrs	r6, r6, #31
 800160c:	f086 0601 	eor.w	r6, r6, #1
 8001610:	4035      	ands	r5, r6
 8001612:	9500      	str	r5, [sp, #0]
 8001614:	9d00      	ldr	r5, [sp, #0]
 8001616:	18eb      	adds	r3, r5, r3
 8001618:	4294      	cmp	r4, r2
 800161a:	d3ef      	bcc.n	80015fc <firstloop_bb_cmp+0xc>
 800161c:	4618      	mov	r0, r3
 800161e:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08001620 <secondloop_bb_cmp>:
 8001620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001622:	2300      	movs	r3, #0
 8001624:	2401      	movs	r4, #1
 8001626:	9400      	str	r4, [sp, #0]
 8001628:	2a00      	cmp	r2, #0
 800162a:	e011      	b.n	8001650 <secondloop_bb_cmp+0x30>
 800162c:	9c00      	ldr	r4, [sp, #0]
 800162e:	1885      	adds	r5, r0, r2
 8001630:	f815 6c01 	ldrb.w	r6, [r5, #-1]
 8001634:	188f      	adds	r7, r1, r2
 8001636:	f817 5c01 	ldrb.w	r5, [r7, #-1]
 800163a:	406e      	eors	r6, r5
 800163c:	43f6      	mvns	r6, r6
 800163e:	1c76      	adds	r6, r6, #1
 8001640:	0ff6      	lsrs	r6, r6, #31
 8001642:	f086 0601 	eor.w	r6, r6, #1
 8001646:	4034      	ands	r4, r6
 8001648:	9400      	str	r4, [sp, #0]
 800164a:	9c00      	ldr	r4, [sp, #0]
 800164c:	18e3      	adds	r3, r4, r3
 800164e:	1e52      	subs	r2, r2, #1
 8001650:	d1ec      	bne.n	800162c <secondloop_bb_cmp+0xc>
 8001652:	4618      	mov	r0, r3
 8001654:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
	...

08001658 <bufType_bb>:
 8001658:	15f1 0800 1621 0800 0001 0000               ....!.......

08001664 <cmox_utils_robustCmp>:
 8001664:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001668:	461d      	mov	r5, r3
 800166a:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800166e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8001670:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8001672:	f04f 33ff 	mov.w	r3, #4294967295
 8001676:	9300      	str	r3, [sp, #0]
 8001678:	f8d9 b000 	ldr.w	fp, [r9]
 800167c:	460e      	mov	r6, r1
 800167e:	4692      	mov	sl, r2
 8001680:	4680      	mov	r8, r0
 8001682:	4632      	mov	r2, r6
 8001684:	4651      	mov	r1, sl
 8001686:	47d8      	blx	fp
 8001688:	4683      	mov	fp, r0
 800168a:	b364      	cbz	r4, 80016e6 <cmox_utils_robustCmp+0x82>
 800168c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001690:	4632      	mov	r2, r6
 8001692:	4651      	mov	r1, sl
 8001694:	4640      	mov	r0, r8
 8001696:	4798      	blx	r3
 8001698:	ea6f 020b 	mvn.w	r2, fp
 800169c:	1c52      	adds	r2, r2, #1
 800169e:	9900      	ldr	r1, [sp, #0]
 80016a0:	ea42 020b 	orr.w	r2, r2, fp
 80016a4:	ea6f 73d2 	mvn.w	r3, r2, lsr #31
 80016a8:	1c5b      	adds	r3, r3, #1
 80016aa:	4019      	ands	r1, r3
 80016ac:	43c2      	mvns	r2, r0
 80016ae:	9100      	str	r1, [sp, #0]
 80016b0:	1c52      	adds	r2, r2, #1
 80016b2:	9900      	ldr	r1, [sp, #0]
 80016b4:	4302      	orrs	r2, r0
 80016b6:	ea6f 73d2 	mvn.w	r3, r2, lsr #31
 80016ba:	1c5b      	adds	r3, r3, #1
 80016bc:	4019      	ands	r1, r3
 80016be:	9100      	str	r1, [sp, #0]
 80016c0:	f086 3155 	eor.w	r1, r6, #1431655765	@ 0x55555555
 80016c4:	4048      	eors	r0, r1
 80016c6:	ea87 0100 	eor.w	r1, r7, r0
 80016ca:	f081 3155 	eor.w	r1, r1, #1431655765	@ 0x55555555
 80016ce:	6021      	str	r1, [r4, #0]
 80016d0:	f080 3155 	eor.w	r1, r0, #1431655765	@ 0x55555555
 80016d4:	43c9      	mvns	r1, r1
 80016d6:	1c49      	adds	r1, r1, #1
 80016d8:	9a00      	ldr	r2, [sp, #0]
 80016da:	4308      	orrs	r0, r1
 80016dc:	ea6f 70d0 	mvn.w	r0, r0, lsr #31
 80016e0:	1c40      	adds	r0, r0, #1
 80016e2:	4382      	bics	r2, r0
 80016e4:	9200      	str	r2, [sp, #0]
 80016e6:	f8d9 0008 	ldr.w	r0, [r9, #8]
 80016ea:	2801      	cmp	r0, #1
 80016ec:	d109      	bne.n	8001702 <cmox_utils_robustCmp+0x9e>
 80016ee:	4075      	eors	r5, r6
 80016f0:	43e9      	mvns	r1, r5
 80016f2:	1c49      	adds	r1, r1, #1
 80016f4:	9800      	ldr	r0, [sp, #0]
 80016f6:	430d      	orrs	r5, r1
 80016f8:	ea6f 72d5 	mvn.w	r2, r5, lsr #31
 80016fc:	1c52      	adds	r2, r2, #1
 80016fe:	4390      	bics	r0, r2
 8001700:	e00a      	b.n	8001718 <cmox_utils_robustCmp+0xb4>
 8001702:	1cf1      	adds	r1, r6, #3
 8001704:	ea85 0291 	eor.w	r2, r5, r1, lsr #2
 8001708:	9800      	ldr	r0, [sp, #0]
 800170a:	43d2      	mvns	r2, r2
 800170c:	1c52      	adds	r2, r2, #1
 800170e:	4315      	orrs	r5, r2
 8001710:	ea6f 73d5 	mvn.w	r3, r5, lsr #31
 8001714:	1c5b      	adds	r3, r3, #1
 8001716:	4398      	bics	r0, r3
 8001718:	f086 36aa 	eor.w	r6, r6, #2863311530	@ 0xaaaaaaaa
 800171c:	ea86 060b 	eor.w	r6, r6, fp
 8001720:	f086 33aa 	eor.w	r3, r6, #2863311530	@ 0xaaaaaaaa
 8001724:	43f2      	mvns	r2, r6
 8001726:	43db      	mvns	r3, r3
 8001728:	f3c2 72c0 	ubfx	r2, r2, #31, #1
 800172c:	1c5b      	adds	r3, r3, #1
 800172e:	9000      	str	r0, [sp, #0]
 8001730:	ea42 72d3 	orr.w	r2, r2, r3, lsr #31
 8001734:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001736:	9900      	ldr	r1, [sp, #0]
 8001738:	43d2      	mvns	r2, r2
 800173a:	1c52      	adds	r2, r2, #1
 800173c:	4391      	bics	r1, r2
 800173e:	9100      	str	r1, [sp, #0]
 8001740:	9900      	ldr	r1, [sp, #0]
 8001742:	4077      	eors	r7, r6
 8001744:	f087 37aa 	eor.w	r7, r7, #2863311530	@ 0xaaaaaaaa
 8001748:	4388      	bics	r0, r1
 800174a:	9900      	ldr	r1, [sp, #0]
 800174c:	400f      	ands	r7, r1
 800174e:	4338      	orrs	r0, r7
 8001750:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001754 <cmox_aesSmall_keySchedule>:
 8001754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001758:	f100 050c 	add.w	r5, r0, #12
 800175c:	2400      	movs	r4, #0
 800175e:	0892      	lsrs	r2, r2, #2
 8001760:	4b43      	ldr	r3, [pc, #268]	@ (8001870 <cmox_aesSmall_keySchedule+0x11c>)
 8001762:	2000      	movs	r0, #0
 8001764:	e010      	b.n	8001788 <cmox_aesSmall_keySchedule+0x34>
 8001766:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 800176a:	f896 c001 	ldrb.w	ip, [r6, #1]
 800176e:	7837      	ldrb	r7, [r6, #0]
 8001770:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 8001774:	ea4c 6c07 	orr.w	ip, ip, r7, lsl #24
 8001778:	78b7      	ldrb	r7, [r6, #2]
 800177a:	78f6      	ldrb	r6, [r6, #3]
 800177c:	ea4c 2707 	orr.w	r7, ip, r7, lsl #8
 8001780:	433e      	orrs	r6, r7
 8001782:	f845 6020 	str.w	r6, [r5, r0, lsl #2]
 8001786:	1c40      	adds	r0, r0, #1
 8001788:	4290      	cmp	r0, r2
 800178a:	d3ec      	bcc.n	8001766 <cmox_aesSmall_keySchedule+0x12>
 800178c:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8001790:	f858 0c04 	ldr.w	r0, [r8, #-4]
 8001794:	4f37      	ldr	r7, [pc, #220]	@ (8001874 <cmox_aesSmall_keySchedule+0x120>)
 8001796:	f8d5 c000 	ldr.w	ip, [r5]
 800179a:	0406      	lsls	r6, r0, #16
 800179c:	0201      	lsls	r1, r0, #8
 800179e:	0e36      	lsrs	r6, r6, #24
 80017a0:	0e09      	lsrs	r1, r1, #24
 80017a2:	5dbe      	ldrb	r6, [r7, r6]
 80017a4:	5c79      	ldrb	r1, [r7, r1]
 80017a6:	0436      	lsls	r6, r6, #16
 80017a8:	ea46 6601 	orr.w	r6, r6, r1, lsl #24
 80017ac:	b2c1      	uxtb	r1, r0
 80017ae:	5c79      	ldrb	r1, [r7, r1]
 80017b0:	0e00      	lsrs	r0, r0, #24
 80017b2:	ea46 2601 	orr.w	r6, r6, r1, lsl #8
 80017b6:	5c39      	ldrb	r1, [r7, r0]
 80017b8:	ea41 0006 	orr.w	r0, r1, r6
 80017bc:	ea80 010c 	eor.w	r1, r0, ip
 80017c0:	4e2d      	ldr	r6, [pc, #180]	@ (8001878 <cmox_aesSmall_keySchedule+0x124>)
 80017c2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80017c6:	1c64      	adds	r4, r4, #1
 80017c8:	4048      	eors	r0, r1
 80017ca:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
 80017ce:	2001      	movs	r0, #1
 80017d0:	1881      	adds	r1, r0, r2
 80017d2:	1f2e      	subs	r6, r5, #4
 80017d4:	f856 6021 	ldr.w	r6, [r6, r1, lsl #2]
 80017d8:	f855 c020 	ldr.w	ip, [r5, r0, lsl #2]
 80017dc:	1c40      	adds	r0, r0, #1
 80017de:	2804      	cmp	r0, #4
 80017e0:	ea8c 0606 	eor.w	r6, ip, r6
 80017e4:	f845 6021 	str.w	r6, [r5, r1, lsl #2]
 80017e8:	d3f2      	bcc.n	80017d0 <cmox_aesSmall_keySchedule+0x7c>
 80017ea:	2a04      	cmp	r2, #4
 80017ec:	d004      	beq.n	80017f8 <cmox_aesSmall_keySchedule+0xa4>
 80017ee:	2a06      	cmp	r2, #6
 80017f0:	d00b      	beq.n	800180a <cmox_aesSmall_keySchedule+0xb6>
 80017f2:	2a08      	cmp	r2, #8
 80017f4:	d014      	beq.n	8001820 <cmox_aesSmall_keySchedule+0xcc>
 80017f6:	e037      	b.n	8001868 <cmox_aesSmall_keySchedule+0x114>
 80017f8:	2c0a      	cmp	r4, #10
 80017fa:	d204      	bcs.n	8001806 <cmox_aesSmall_keySchedule+0xb2>
 80017fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001800:	d001      	beq.n	8001806 <cmox_aesSmall_keySchedule+0xb2>
 8001802:	4645      	mov	r5, r8
 8001804:	e7c2      	b.n	800178c <cmox_aesSmall_keySchedule+0x38>
 8001806:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800180a:	2c07      	cmp	r4, #7
 800180c:	d8fb      	bhi.n	8001806 <cmox_aesSmall_keySchedule+0xb2>
 800180e:	6a6f      	ldr	r7, [r5, #36]	@ 0x24
 8001810:	6928      	ldr	r0, [r5, #16]
 8001812:	4047      	eors	r7, r0
 8001814:	62af      	str	r7, [r5, #40]	@ 0x28
 8001816:	6968      	ldr	r0, [r5, #20]
 8001818:	ea80 0107 	eor.w	r1, r0, r7
 800181c:	62e9      	str	r1, [r5, #44]	@ 0x2c
 800181e:	e7ed      	b.n	80017fc <cmox_aesSmall_keySchedule+0xa8>
 8001820:	2c07      	cmp	r4, #7
 8001822:	d2f0      	bcs.n	8001806 <cmox_aesSmall_keySchedule+0xb2>
 8001824:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8001826:	6929      	ldr	r1, [r5, #16]
 8001828:	0e06      	lsrs	r6, r0, #24
 800182a:	f817 e006 	ldrb.w	lr, [r7, r6]
 800182e:	0206      	lsls	r6, r0, #8
 8001830:	0e36      	lsrs	r6, r6, #24
 8001832:	5dbe      	ldrb	r6, [r7, r6]
 8001834:	0436      	lsls	r6, r6, #16
 8001836:	ea46 6c0e 	orr.w	ip, r6, lr, lsl #24
 800183a:	0406      	lsls	r6, r0, #16
 800183c:	ea4f 6e16 	mov.w	lr, r6, lsr #24
 8001840:	f817 600e 	ldrb.w	r6, [r7, lr]
 8001844:	b2c0      	uxtb	r0, r0
 8001846:	5c38      	ldrb	r0, [r7, r0]
 8001848:	ea4c 2606 	orr.w	r6, ip, r6, lsl #8
 800184c:	4330      	orrs	r0, r6
 800184e:	4041      	eors	r1, r0
 8001850:	6329      	str	r1, [r5, #48]	@ 0x30
 8001852:	2005      	movs	r0, #5
 8001854:	eb05 0180 	add.w	r1, r5, r0, lsl #2
 8001858:	69cf      	ldr	r7, [r1, #28]
 800185a:	680e      	ldr	r6, [r1, #0]
 800185c:	1c40      	adds	r0, r0, #1
 800185e:	4077      	eors	r7, r6
 8001860:	620f      	str	r7, [r1, #32]
 8001862:	2807      	cmp	r0, #7
 8001864:	d9f6      	bls.n	8001854 <cmox_aesSmall_keySchedule+0x100>
 8001866:	e7c9      	b.n	80017fc <cmox_aesSmall_keySchedule+0xa8>
 8001868:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 800186c:	e7c9      	b.n	8001802 <cmox_aesSmall_keySchedule+0xae>
 800186e:	bf00      	nop
 8001870:	00010004 	.word	0x00010004
 8001874:	0801505c 	.word	0x0801505c
 8001878:	08014570 	.word	0x08014570

0800187c <cmox_cipherMode_init>:
 800187c:	2200      	movs	r2, #0
 800187e:	6042      	str	r2, [r0, #4]
 8001880:	2001      	movs	r0, #1
 8001882:	6088      	str	r0, [r1, #8]
 8001884:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8001888:	4770      	bx	lr
	...

0800188c <cmox_cipherMode_setKey>:
 800188c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001890:	b08c      	sub	sp, #48	@ 0x30
 8001892:	4692      	mov	sl, r2
 8001894:	4ae8      	ldr	r2, [pc, #928]	@ (8001c38 <cmox_cipherMode_setKey+0x3ac>)
 8001896:	4be9      	ldr	r3, [pc, #932]	@ (8001c3c <cmox_cipherMode_setKey+0x3b0>)
 8001898:	4de9      	ldr	r5, [pc, #932]	@ (8001c40 <cmox_cipherMode_setKey+0x3b4>)
 800189a:	f8df 83a8 	ldr.w	r8, [pc, #936]	@ 8001c44 <cmox_cipherMode_setKey+0x3b8>
 800189e:	4eea      	ldr	r6, [pc, #936]	@ (8001c48 <cmox_cipherMode_setKey+0x3bc>)
 80018a0:	f8df b3a8 	ldr.w	fp, [pc, #936]	@ 8001c4c <cmox_cipherMode_setKey+0x3c0>
 80018a4:	f10d 0c04 	add.w	ip, sp, #4
 80018a8:	f1ba 0f10 	cmp.w	sl, #16
 80018ac:	d008      	beq.n	80018c0 <cmox_cipherMode_setKey+0x34>
 80018ae:	f1ba 0f18 	cmp.w	sl, #24
 80018b2:	f000 8092 	beq.w	80019da <cmox_cipherMode_setKey+0x14e>
 80018b6:	f1ba 0f20 	cmp.w	sl, #32
 80018ba:	f000 8118 	beq.w	8001aee <cmox_cipherMode_setKey+0x262>
 80018be:	e1a8      	b.n	8001c12 <cmox_cipherMode_setKey+0x386>
 80018c0:	e9db 0400 	ldrd	r0, r4, [fp]
 80018c4:	f10d 0e24 	add.w	lr, sp, #36	@ 0x24
 80018c8:	4fe1      	ldr	r7, [pc, #900]	@ (8001c50 <cmox_cipherMode_setKey+0x3c4>)
 80018ca:	e9ce 0400 	strd	r0, r4, [lr]
 80018ce:	7838      	ldrb	r0, [r7, #0]
 80018d0:	2800      	cmp	r0, #0
 80018d2:	bf0c      	ite	eq
 80018d4:	f04f 0900 	moveq.w	r9, #0
 80018d8:	f04f 0904 	movne.w	r9, #4
 80018dc:	f856 4009 	ldr.w	r4, [r6, r9]
 80018e0:	f85e 7009 	ldr.w	r7, [lr, r9]
 80018e4:	443c      	add	r4, r7
 80018e6:	6023      	str	r3, [r4, #0]
 80018e8:	6827      	ldr	r7, [r4, #0]
 80018ea:	2301      	movs	r3, #1
 80018ec:	60a3      	str	r3, [r4, #8]
 80018ee:	7b8c      	ldrb	r4, [r1, #14]
 80018f0:	6873      	ldr	r3, [r6, #4]
 80018f2:	f8d6 9000 	ldr.w	r9, [r6]
 80018f6:	9400      	str	r4, [sp, #0]
 80018f8:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80018fa:	405f      	eors	r7, r3
 80018fc:	407c      	eors	r4, r7
 80018fe:	f8de 7004 	ldr.w	r7, [lr, #4]
 8001902:	f084 0404 	eor.w	r4, r4, #4
 8001906:	ea87 0709 	eor.w	r7, r7, r9
 800190a:	f087 0efc 	eor.w	lr, r7, #252	@ 0xfc
 800190e:	9f00      	ldr	r7, [sp, #0]
 8001910:	4474      	add	r4, lr
 8001912:	f084 0e52 	eor.w	lr, r4, #82	@ 0x52
 8001916:	44be      	add	lr, r7
 8001918:	f88c e00e 	strb.w	lr, [ip, #14]
 800191c:	f04f 0e01 	mov.w	lr, #1
 8001920:	f811 400e 	ldrb.w	r4, [r1, lr]
 8001924:	f80c 400e 	strb.w	r4, [ip, lr]
 8001928:	f10e 0e01 	add.w	lr, lr, #1
 800192c:	f1be 0f0e 	cmp.w	lr, #14
 8001930:	d3f6      	bcc.n	8001920 <cmox_cipherMode_setKey+0x94>
 8001932:	e9db 4700 	ldrd	r4, r7, [fp]
 8001936:	2800      	cmp	r0, #0
 8001938:	f10d 0e24 	add.w	lr, sp, #36	@ 0x24
 800193c:	e9ce 4700 	strd	r4, r7, [lr]
 8001940:	bf0c      	ite	eq
 8001942:	2700      	moveq	r7, #0
 8001944:	2704      	movne	r7, #4
 8001946:	463c      	mov	r4, r7
 8001948:	59f7      	ldr	r7, [r6, r7]
 800194a:	f85e 4004 	ldr.w	r4, [lr, r4]
 800194e:	19e4      	adds	r4, r4, r7
 8001950:	f8c4 8000 	str.w	r8, [r4]
 8001954:	f8d4 8000 	ldr.w	r8, [r4]
 8001958:	2701      	movs	r7, #1
 800195a:	60a7      	str	r7, [r4, #8]
 800195c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800195e:	ea83 0808 	eor.w	r8, r3, r8
 8001962:	780f      	ldrb	r7, [r1, #0]
 8001964:	ea84 0408 	eor.w	r4, r4, r8
 8001968:	f084 0804 	eor.w	r8, r4, #4
 800196c:	f8de 4004 	ldr.w	r4, [lr, #4]
 8001970:	2800      	cmp	r0, #0
 8001972:	ea84 0409 	eor.w	r4, r4, r9
 8001976:	f084 04fc 	eor.w	r4, r4, #252	@ 0xfc
 800197a:	4444      	add	r4, r8
 800197c:	f084 080b 	eor.w	r8, r4, #11
 8001980:	e9db 4e00 	ldrd	r4, lr, [fp]
 8001984:	44b8      	add	r8, r7
 8001986:	af09      	add	r7, sp, #36	@ 0x24
 8001988:	e9c7 4e00 	strd	r4, lr, [r7]
 800198c:	f88d 8004 	strb.w	r8, [sp, #4]
 8001990:	bf0e      	itee	eq
 8001992:	f04f 0e00 	moveq.w	lr, #0
 8001996:	2004      	movne	r0, #4
 8001998:	4686      	movne	lr, r0
 800199a:	ac09      	add	r4, sp, #36	@ 0x24
 800199c:	5836      	ldr	r6, [r6, r0]
 800199e:	f854 000e 	ldr.w	r0, [r4, lr]
 80019a2:	1986      	adds	r6, r0, r6
 80019a4:	6035      	str	r5, [r6, #0]
 80019a6:	6830      	ldr	r0, [r6, #0]
 80019a8:	2501      	movs	r5, #1
 80019aa:	60b5      	str	r5, [r6, #8]
 80019ac:	7bce      	ldrb	r6, [r1, #15]
 80019ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80019b0:	4043      	eors	r3, r0
 80019b2:	6860      	ldr	r0, [r4, #4]
 80019b4:	404b      	eors	r3, r1
 80019b6:	f083 0304 	eor.w	r3, r3, #4
 80019ba:	ea80 0009 	eor.w	r0, r0, r9
 80019be:	f080 00fc 	eor.w	r0, r0, #252	@ 0xfc
 80019c2:	4403      	add	r3, r0
 80019c4:	f083 0385 	eor.w	r3, r3, #133	@ 0x85
 80019c8:	199b      	adds	r3, r3, r6
 80019ca:	f88c 300f 	strb.w	r3, [ip, #15]
 80019ce:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80019d0:	7a28      	ldrb	r0, [r5, #8]
 80019d2:	07c1      	lsls	r1, r0, #31
 80019d4:	f100 811f 	bmi.w	8001c16 <cmox_cipherMode_setKey+0x38a>
 80019d8:	e11b      	b.n	8001c12 <cmox_cipherMode_setKey+0x386>
 80019da:	e9db e900 	ldrd	lr, r9, [fp]
 80019de:	a809      	add	r0, sp, #36	@ 0x24
 80019e0:	4c9b      	ldr	r4, [pc, #620]	@ (8001c50 <cmox_cipherMode_setKey+0x3c4>)
 80019e2:	e9c0 e900 	strd	lr, r9, [r0]
 80019e6:	7820      	ldrb	r0, [r4, #0]
 80019e8:	f10d 0e24 	add.w	lr, sp, #36	@ 0x24
 80019ec:	2800      	cmp	r0, #0
 80019ee:	bf0c      	ite	eq
 80019f0:	f04f 0900 	moveq.w	r9, #0
 80019f4:	f04f 0904 	movne.w	r9, #4
 80019f8:	f856 4009 	ldr.w	r4, [r6, r9]
 80019fc:	f85e 7009 	ldr.w	r7, [lr, r9]
 8001a00:	443c      	add	r4, r7
 8001a02:	6025      	str	r5, [r4, #0]
 8001a04:	6827      	ldr	r7, [r4, #0]
 8001a06:	2501      	movs	r5, #1
 8001a08:	60a5      	str	r5, [r4, #8]
 8001a0a:	7b8c      	ldrb	r4, [r1, #14]
 8001a0c:	6875      	ldr	r5, [r6, #4]
 8001a0e:	f8d6 9000 	ldr.w	r9, [r6]
 8001a12:	9400      	str	r4, [sp, #0]
 8001a14:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8001a16:	406f      	eors	r7, r5
 8001a18:	407c      	eors	r4, r7
 8001a1a:	f8de 7004 	ldr.w	r7, [lr, #4]
 8001a1e:	f084 0404 	eor.w	r4, r4, #4
 8001a22:	ea87 0709 	eor.w	r7, r7, r9
 8001a26:	f087 0efc 	eor.w	lr, r7, #252	@ 0xfc
 8001a2a:	9f00      	ldr	r7, [sp, #0]
 8001a2c:	4474      	add	r4, lr
 8001a2e:	f084 0e85 	eor.w	lr, r4, #133	@ 0x85
 8001a32:	44be      	add	lr, r7
 8001a34:	f88c e00e 	strb.w	lr, [ip, #14]
 8001a38:	f04f 0e01 	mov.w	lr, #1
 8001a3c:	f811 400e 	ldrb.w	r4, [r1, lr]
 8001a40:	f80c 400e 	strb.w	r4, [ip, lr]
 8001a44:	f10e 0e01 	add.w	lr, lr, #1
 8001a48:	f1be 0f0e 	cmp.w	lr, #14
 8001a4c:	d3f6      	bcc.n	8001a3c <cmox_cipherMode_setKey+0x1b0>
 8001a4e:	e9db 4700 	ldrd	r4, r7, [fp]
 8001a52:	2800      	cmp	r0, #0
 8001a54:	f10d 0e24 	add.w	lr, sp, #36	@ 0x24
 8001a58:	e9ce 4700 	strd	r4, r7, [lr]
 8001a5c:	bf0c      	ite	eq
 8001a5e:	2700      	moveq	r7, #0
 8001a60:	2704      	movne	r7, #4
 8001a62:	463c      	mov	r4, r7
 8001a64:	59f7      	ldr	r7, [r6, r7]
 8001a66:	f85e 4004 	ldr.w	r4, [lr, r4]
 8001a6a:	19e4      	adds	r4, r4, r7
 8001a6c:	6023      	str	r3, [r4, #0]
 8001a6e:	6827      	ldr	r7, [r4, #0]
 8001a70:	2301      	movs	r3, #1
 8001a72:	60a3      	str	r3, [r4, #8]
 8001a74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001a76:	406f      	eors	r7, r5
 8001a78:	780c      	ldrb	r4, [r1, #0]
 8001a7a:	405f      	eors	r7, r3
 8001a7c:	f8de 3004 	ldr.w	r3, [lr, #4]
 8001a80:	f087 0704 	eor.w	r7, r7, #4
 8001a84:	ea83 0309 	eor.w	r3, r3, r9
 8001a88:	f083 03fc 	eor.w	r3, r3, #252	@ 0xfc
 8001a8c:	441f      	add	r7, r3
 8001a8e:	f087 0752 	eor.w	r7, r7, #82	@ 0x52
 8001a92:	193f      	adds	r7, r7, r4
 8001a94:	f88d 7004 	strb.w	r7, [sp, #4]
 8001a98:	e9db 7300 	ldrd	r7, r3, [fp]
 8001a9c:	2800      	cmp	r0, #0
 8001a9e:	ac09      	add	r4, sp, #36	@ 0x24
 8001aa0:	e9c4 7300 	strd	r7, r3, [r4]
 8001aa4:	bf0e      	itee	eq
 8001aa6:	2300      	moveq	r3, #0
 8001aa8:	2004      	movne	r0, #4
 8001aaa:	2304      	movne	r3, #4
 8001aac:	5836      	ldr	r6, [r6, r0]
 8001aae:	58e0      	ldr	r0, [r4, r3]
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	1986      	adds	r6, r0, r6
 8001ab4:	f8c6 8000 	str.w	r8, [r6]
 8001ab8:	6830      	ldr	r0, [r6, #0]
 8001aba:	60b3      	str	r3, [r6, #8]
 8001abc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001abe:	4045      	eors	r5, r0
 8001ac0:	6860      	ldr	r0, [r4, #4]
 8001ac2:	405d      	eors	r5, r3
 8001ac4:	7bce      	ldrb	r6, [r1, #15]
 8001ac6:	ea80 0009 	eor.w	r0, r0, r9
 8001aca:	f085 0504 	eor.w	r5, r5, #4
 8001ace:	f080 00fc 	eor.w	r0, r0, #252	@ 0xfc
 8001ad2:	4405      	add	r5, r0
 8001ad4:	f085 050b 	eor.w	r5, r5, #11
 8001ad8:	19ad      	adds	r5, r5, r6
 8001ada:	f88c 500f 	strb.w	r5, [ip, #15]
 8001ade:	2010      	movs	r0, #16
 8001ae0:	5c0b      	ldrb	r3, [r1, r0]
 8001ae2:	f80c 3000 	strb.w	r3, [ip, r0]
 8001ae6:	1c40      	adds	r0, r0, #1
 8001ae8:	2818      	cmp	r0, #24
 8001aea:	d3f9      	bcc.n	8001ae0 <cmox_cipherMode_setKey+0x254>
 8001aec:	e76f      	b.n	80019ce <cmox_cipherMode_setKey+0x142>
 8001aee:	e9db e900 	ldrd	lr, r9, [fp]
 8001af2:	a809      	add	r0, sp, #36	@ 0x24
 8001af4:	4c56      	ldr	r4, [pc, #344]	@ (8001c50 <cmox_cipherMode_setKey+0x3c4>)
 8001af6:	e9c0 e900 	strd	lr, r9, [r0]
 8001afa:	7820      	ldrb	r0, [r4, #0]
 8001afc:	f10d 0e24 	add.w	lr, sp, #36	@ 0x24
 8001b00:	2800      	cmp	r0, #0
 8001b02:	bf0c      	ite	eq
 8001b04:	f04f 0900 	moveq.w	r9, #0
 8001b08:	f04f 0904 	movne.w	r9, #4
 8001b0c:	f856 4009 	ldr.w	r4, [r6, r9]
 8001b10:	f85e 7009 	ldr.w	r7, [lr, r9]
 8001b14:	443c      	add	r4, r7
 8001b16:	f8c4 8000 	str.w	r8, [r4]
 8001b1a:	6827      	ldr	r7, [r4, #0]
 8001b1c:	f04f 0801 	mov.w	r8, #1
 8001b20:	f8c4 8008 	str.w	r8, [r4, #8]
 8001b24:	7fcc      	ldrb	r4, [r1, #31]
 8001b26:	f8d6 8004 	ldr.w	r8, [r6, #4]
 8001b2a:	f8d6 9000 	ldr.w	r9, [r6]
 8001b2e:	9400      	str	r4, [sp, #0]
 8001b30:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8001b32:	ea88 0707 	eor.w	r7, r8, r7
 8001b36:	407c      	eors	r4, r7
 8001b38:	f8de 7004 	ldr.w	r7, [lr, #4]
 8001b3c:	f084 0404 	eor.w	r4, r4, #4
 8001b40:	ea87 0709 	eor.w	r7, r7, r9
 8001b44:	f087 0efc 	eor.w	lr, r7, #252	@ 0xfc
 8001b48:	9f00      	ldr	r7, [sp, #0]
 8001b4a:	4474      	add	r4, lr
 8001b4c:	f084 0e0b 	eor.w	lr, r4, #11
 8001b50:	44be      	add	lr, r7
 8001b52:	f88c e01f 	strb.w	lr, [ip, #31]
 8001b56:	f04f 0e00 	mov.w	lr, #0
 8001b5a:	f811 400e 	ldrb.w	r4, [r1, lr]
 8001b5e:	f80c 400e 	strb.w	r4, [ip, lr]
 8001b62:	f10e 0e01 	add.w	lr, lr, #1
 8001b66:	f1be 0f10 	cmp.w	lr, #16
 8001b6a:	d3f6      	bcc.n	8001b5a <cmox_cipherMode_setKey+0x2ce>
 8001b6c:	e9db 4700 	ldrd	r4, r7, [fp]
 8001b70:	2800      	cmp	r0, #0
 8001b72:	f10d 0e24 	add.w	lr, sp, #36	@ 0x24
 8001b76:	e9ce 4700 	strd	r4, r7, [lr]
 8001b7a:	bf0c      	ite	eq
 8001b7c:	2700      	moveq	r7, #0
 8001b7e:	2704      	movne	r7, #4
 8001b80:	463c      	mov	r4, r7
 8001b82:	59f7      	ldr	r7, [r6, r7]
 8001b84:	f85e 4004 	ldr.w	r4, [lr, r4]
 8001b88:	19e4      	adds	r4, r4, r7
 8001b8a:	6025      	str	r5, [r4, #0]
 8001b8c:	6827      	ldr	r7, [r4, #0]
 8001b8e:	2501      	movs	r5, #1
 8001b90:	60a5      	str	r5, [r4, #8]
 8001b92:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8001b94:	ea88 0707 	eor.w	r7, r8, r7
 8001b98:	7c4c      	ldrb	r4, [r1, #17]
 8001b9a:	406f      	eors	r7, r5
 8001b9c:	f8de 5004 	ldr.w	r5, [lr, #4]
 8001ba0:	f087 0704 	eor.w	r7, r7, #4
 8001ba4:	ea85 0509 	eor.w	r5, r5, r9
 8001ba8:	f085 05fc 	eor.w	r5, r5, #252	@ 0xfc
 8001bac:	442f      	add	r7, r5
 8001bae:	f087 0785 	eor.w	r7, r7, #133	@ 0x85
 8001bb2:	193f      	adds	r7, r7, r4
 8001bb4:	f88c 7011 	strb.w	r7, [ip, #17]
 8001bb8:	e9db 4700 	ldrd	r4, r7, [fp]
 8001bbc:	2800      	cmp	r0, #0
 8001bbe:	ad09      	add	r5, sp, #36	@ 0x24
 8001bc0:	e9c5 4700 	strd	r4, r7, [r5]
 8001bc4:	bf0e      	itee	eq
 8001bc6:	f04f 0b00 	moveq.w	fp, #0
 8001bca:	2004      	movne	r0, #4
 8001bcc:	4683      	movne	fp, r0
 8001bce:	5836      	ldr	r6, [r6, r0]
 8001bd0:	f855 000b 	ldr.w	r0, [r5, fp]
 8001bd4:	1986      	adds	r6, r0, r6
 8001bd6:	6033      	str	r3, [r6, #0]
 8001bd8:	6830      	ldr	r0, [r6, #0]
 8001bda:	2301      	movs	r3, #1
 8001bdc:	60b3      	str	r3, [r6, #8]
 8001bde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001be0:	ea88 0000 	eor.w	r0, r8, r0
 8001be4:	7c0e      	ldrb	r6, [r1, #16]
 8001be6:	4058      	eors	r0, r3
 8001be8:	f080 0804 	eor.w	r8, r0, #4
 8001bec:	6868      	ldr	r0, [r5, #4]
 8001bee:	ea80 0009 	eor.w	r0, r0, r9
 8001bf2:	f080 00fc 	eor.w	r0, r0, #252	@ 0xfc
 8001bf6:	4440      	add	r0, r8
 8001bf8:	f080 0852 	eor.w	r8, r0, #82	@ 0x52
 8001bfc:	44b0      	add	r8, r6
 8001bfe:	f88c 8010 	strb.w	r8, [ip, #16]
 8001c02:	2012      	movs	r0, #18
 8001c04:	5c0b      	ldrb	r3, [r1, r0]
 8001c06:	f80c 3000 	strb.w	r3, [ip, r0]
 8001c0a:	1c40      	adds	r0, r0, #1
 8001c0c:	281f      	cmp	r0, #31
 8001c0e:	d3f9      	bcc.n	8001c04 <cmox_cipherMode_setKey+0x378>
 8001c10:	e6dd      	b.n	80019ce <cmox_cipherMode_setKey+0x142>
 8001c12:	4610      	mov	r0, r2
 8001c14:	e00d      	b.n	8001c32 <cmox_cipherMode_setKey+0x3a6>
 8001c16:	682b      	ldr	r3, [r5, #0]
 8001c18:	4652      	mov	r2, sl
 8001c1a:	a901      	add	r1, sp, #4
 8001c1c:	685e      	ldr	r6, [r3, #4]
 8001c1e:	4628      	mov	r0, r5
 8001c20:	47b0      	blx	r6
 8001c22:	68a8      	ldr	r0, [r5, #8]
 8001c24:	f8c5 a004 	str.w	sl, [r5, #4]
 8001c28:	f040 0004 	orr.w	r0, r0, #4
 8001c2c:	60a8      	str	r0, [r5, #8]
 8001c2e:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8001c32:	b00d      	add	sp, #52	@ 0x34
 8001c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c38:	00010003 	.word	0x00010003
 8001c3c:	f78e2254 	.word	0xf78e2254
 8001c40:	2e8f137d 	.word	0x2e8f137d
 8001c44:	910e0ba4 	.word	0x910e0ba4
 8001c48:	0801441c 	.word	0x0801441c
 8001c4c:	08001cc4 	.word	0x08001cc4
 8001c50:	20000214 	.word	0x20000214

08001c54 <cmox_cipherMode_setIV>:
 8001c54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c56:	9c05      	ldr	r4, [sp, #20]
 8001c58:	2c00      	cmp	r4, #0
 8001c5a:	bf18      	it	ne
 8001c5c:	2a00      	cmpne	r2, #0
 8001c5e:	d101      	bne.n	8001c64 <cmox_cipherMode_setIV+0x10>
 8001c60:	480d      	ldr	r0, [pc, #52]	@ (8001c98 <cmox_cipherMode_setIV+0x44>)
 8001c62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c64:	2400      	movs	r4, #0
 8001c66:	e00d      	b.n	8001c84 <cmox_cipherMode_setIV+0x30>
 8001c68:	4415      	add	r5, r2
 8001c6a:	786f      	ldrb	r7, [r5, #1]
 8001c6c:	782e      	ldrb	r6, [r5, #0]
 8001c6e:	043f      	lsls	r7, r7, #16
 8001c70:	ea47 6706 	orr.w	r7, r7, r6, lsl #24
 8001c74:	78ae      	ldrb	r6, [r5, #2]
 8001c76:	78ed      	ldrb	r5, [r5, #3]
 8001c78:	ea47 2706 	orr.w	r7, r7, r6, lsl #8
 8001c7c:	432f      	orrs	r7, r5
 8001c7e:	f841 7024 	str.w	r7, [r1, r4, lsl #2]
 8001c82:	1c64      	adds	r4, r4, #1
 8001c84:	00a5      	lsls	r5, r4, #2
 8001c86:	429d      	cmp	r5, r3
 8001c88:	d3ee      	bcc.n	8001c68 <cmox_cipherMode_setIV+0x14>
 8001c8a:	6841      	ldr	r1, [r0, #4]
 8001c8c:	f041 0101 	orr.w	r1, r1, #1
 8001c90:	6041      	str	r1, [r0, #4]
 8001c92:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8001c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c98:	00010003 	.word	0x00010003

08001c9c <cmox_cipher_setTagLen_empty>:
 8001c9c:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8001ca0:	4770      	bx	lr

08001ca2 <cmox_cipher_setPayloadLen_empty>:
 8001ca2:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8001ca6:	4770      	bx	lr

08001ca8 <cmox_cipher_setADLen_empty>:
 8001ca8:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8001cac:	4770      	bx	lr

08001cae <cmox_cipher_appendAD_empty>:
 8001cae:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8001cb2:	4770      	bx	lr

08001cb4 <cmox_cipher_generateTag_empty>:
 8001cb4:	4800      	ldr	r0, [pc, #0]	@ (8001cb8 <cmox_cipher_generateTag_empty+0x4>)
 8001cb6:	4770      	bx	lr
 8001cb8:	00010002 	.word	0x00010002

08001cbc <cmox_cipher_verifyTag_empty>:
 8001cbc:	4800      	ldr	r0, [pc, #0]	@ (8001cc0 <cmox_cipher_verifyTag_empty+0x4>)
 8001cbe:	4770      	bx	lr
 8001cc0:	00010002 	.word	0x00010002
 8001cc4:	0101b004 	.word	0x0101b004
 8001cc8:	45011700 	.word	0x45011700

08001ccc <convert_block_2_bytes>:
 8001ccc:	b530      	push	{r4, r5, lr}
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 8001cd4:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8001cd8:	70dc      	strb	r4, [r3, #3]
 8001cda:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 8001cde:	0a2d      	lsrs	r5, r5, #8
 8001ce0:	709d      	strb	r5, [r3, #2]
 8001ce2:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 8001ce6:	0c24      	lsrs	r4, r4, #16
 8001ce8:	705c      	strb	r4, [r3, #1]
 8001cea:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 8001cee:	1c52      	adds	r2, r2, #1
 8001cf0:	0e24      	lsrs	r4, r4, #24
 8001cf2:	701c      	strb	r4, [r3, #0]
 8001cf4:	2a04      	cmp	r2, #4
 8001cf6:	d3eb      	bcc.n	8001cd0 <convert_block_2_bytes+0x4>
 8001cf8:	bd30      	pop	{r4, r5, pc}

08001cfa <strlen>:
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001d00:	2a00      	cmp	r2, #0
 8001d02:	d1fb      	bne.n	8001cfc <strlen+0x2>
 8001d04:	1a18      	subs	r0, r3, r0
 8001d06:	3801      	subs	r0, #1
 8001d08:	4770      	bx	lr

08001d0a <__aeabi_memset>:
 8001d0a:	b470      	push	{r4, r5, r6}
 8001d0c:	0784      	lsls	r4, r0, #30
 8001d0e:	d046      	beq.n	8001d9e <__aeabi_memset+0x94>
 8001d10:	1e4c      	subs	r4, r1, #1
 8001d12:	2900      	cmp	r1, #0
 8001d14:	d041      	beq.n	8001d9a <__aeabi_memset+0x90>
 8001d16:	b2d5      	uxtb	r5, r2
 8001d18:	4603      	mov	r3, r0
 8001d1a:	e002      	b.n	8001d22 <__aeabi_memset+0x18>
 8001d1c:	1e61      	subs	r1, r4, #1
 8001d1e:	b3e4      	cbz	r4, 8001d9a <__aeabi_memset+0x90>
 8001d20:	460c      	mov	r4, r1
 8001d22:	f803 5b01 	strb.w	r5, [r3], #1
 8001d26:	0799      	lsls	r1, r3, #30
 8001d28:	d1f8      	bne.n	8001d1c <__aeabi_memset+0x12>
 8001d2a:	2c03      	cmp	r4, #3
 8001d2c:	d92e      	bls.n	8001d8c <__aeabi_memset+0x82>
 8001d2e:	b2d5      	uxtb	r5, r2
 8001d30:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8001d34:	2c0f      	cmp	r4, #15
 8001d36:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8001d3a:	d919      	bls.n	8001d70 <__aeabi_memset+0x66>
 8001d3c:	4626      	mov	r6, r4
 8001d3e:	f103 0110 	add.w	r1, r3, #16
 8001d42:	3e10      	subs	r6, #16
 8001d44:	2e0f      	cmp	r6, #15
 8001d46:	f841 5c10 	str.w	r5, [r1, #-16]
 8001d4a:	f841 5c0c 	str.w	r5, [r1, #-12]
 8001d4e:	f841 5c08 	str.w	r5, [r1, #-8]
 8001d52:	f841 5c04 	str.w	r5, [r1, #-4]
 8001d56:	f101 0110 	add.w	r1, r1, #16
 8001d5a:	d8f2      	bhi.n	8001d42 <__aeabi_memset+0x38>
 8001d5c:	f1a4 0110 	sub.w	r1, r4, #16
 8001d60:	f021 010f 	bic.w	r1, r1, #15
 8001d64:	f004 040f 	and.w	r4, r4, #15
 8001d68:	3110      	adds	r1, #16
 8001d6a:	2c03      	cmp	r4, #3
 8001d6c:	440b      	add	r3, r1
 8001d6e:	d90d      	bls.n	8001d8c <__aeabi_memset+0x82>
 8001d70:	461e      	mov	r6, r3
 8001d72:	4621      	mov	r1, r4
 8001d74:	3904      	subs	r1, #4
 8001d76:	2903      	cmp	r1, #3
 8001d78:	f846 5b04 	str.w	r5, [r6], #4
 8001d7c:	d8fa      	bhi.n	8001d74 <__aeabi_memset+0x6a>
 8001d7e:	1f21      	subs	r1, r4, #4
 8001d80:	f021 0103 	bic.w	r1, r1, #3
 8001d84:	3104      	adds	r1, #4
 8001d86:	440b      	add	r3, r1
 8001d88:	f004 0403 	and.w	r4, r4, #3
 8001d8c:	b12c      	cbz	r4, 8001d9a <__aeabi_memset+0x90>
 8001d8e:	b2d2      	uxtb	r2, r2
 8001d90:	441c      	add	r4, r3
 8001d92:	f803 2b01 	strb.w	r2, [r3], #1
 8001d96:	42a3      	cmp	r3, r4
 8001d98:	d1fb      	bne.n	8001d92 <__aeabi_memset+0x88>
 8001d9a:	bc70      	pop	{r4, r5, r6}
 8001d9c:	4770      	bx	lr
 8001d9e:	460c      	mov	r4, r1
 8001da0:	4603      	mov	r3, r0
 8001da2:	e7c2      	b.n	8001d2a <__aeabi_memset+0x20>

08001da4 <__aeabi_drsub>:
 8001da4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8001da8:	e002      	b.n	8001db0 <__adddf3>
 8001daa:	bf00      	nop

08001dac <__aeabi_dsub>:
 8001dac:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08001db0 <__adddf3>:
 8001db0:	b530      	push	{r4, r5, lr}
 8001db2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8001db6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8001dba:	ea94 0f05 	teq	r4, r5
 8001dbe:	bf08      	it	eq
 8001dc0:	ea90 0f02 	teqeq	r0, r2
 8001dc4:	bf1f      	itttt	ne
 8001dc6:	ea54 0c00 	orrsne.w	ip, r4, r0
 8001dca:	ea55 0c02 	orrsne.w	ip, r5, r2
 8001dce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8001dd2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8001dd6:	f000 80e2 	beq.w	8001f9e <__adddf3+0x1ee>
 8001dda:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8001dde:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8001de2:	bfb8      	it	lt
 8001de4:	426d      	neglt	r5, r5
 8001de6:	dd0c      	ble.n	8001e02 <__adddf3+0x52>
 8001de8:	442c      	add	r4, r5
 8001dea:	ea80 0202 	eor.w	r2, r0, r2
 8001dee:	ea81 0303 	eor.w	r3, r1, r3
 8001df2:	ea82 0000 	eor.w	r0, r2, r0
 8001df6:	ea83 0101 	eor.w	r1, r3, r1
 8001dfa:	ea80 0202 	eor.w	r2, r0, r2
 8001dfe:	ea81 0303 	eor.w	r3, r1, r3
 8001e02:	2d36      	cmp	r5, #54	@ 0x36
 8001e04:	bf88      	it	hi
 8001e06:	bd30      	pophi	{r4, r5, pc}
 8001e08:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8001e0c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8001e10:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8001e14:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8001e18:	d002      	beq.n	8001e20 <__adddf3+0x70>
 8001e1a:	4240      	negs	r0, r0
 8001e1c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001e20:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8001e24:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8001e28:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8001e2c:	d002      	beq.n	8001e34 <__adddf3+0x84>
 8001e2e:	4252      	negs	r2, r2
 8001e30:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001e34:	ea94 0f05 	teq	r4, r5
 8001e38:	f000 80a7 	beq.w	8001f8a <__adddf3+0x1da>
 8001e3c:	f1a4 0401 	sub.w	r4, r4, #1
 8001e40:	f1d5 0e20 	rsbs	lr, r5, #32
 8001e44:	db0d      	blt.n	8001e62 <__adddf3+0xb2>
 8001e46:	fa02 fc0e 	lsl.w	ip, r2, lr
 8001e4a:	fa22 f205 	lsr.w	r2, r2, r5
 8001e4e:	1880      	adds	r0, r0, r2
 8001e50:	f141 0100 	adc.w	r1, r1, #0
 8001e54:	fa03 f20e 	lsl.w	r2, r3, lr
 8001e58:	1880      	adds	r0, r0, r2
 8001e5a:	fa43 f305 	asr.w	r3, r3, r5
 8001e5e:	4159      	adcs	r1, r3
 8001e60:	e00e      	b.n	8001e80 <__adddf3+0xd0>
 8001e62:	f1a5 0520 	sub.w	r5, r5, #32
 8001e66:	f10e 0e20 	add.w	lr, lr, #32
 8001e6a:	2a01      	cmp	r2, #1
 8001e6c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8001e70:	bf28      	it	cs
 8001e72:	f04c 0c02 	orrcs.w	ip, ip, #2
 8001e76:	fa43 f305 	asr.w	r3, r3, r5
 8001e7a:	18c0      	adds	r0, r0, r3
 8001e7c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8001e80:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8001e84:	d507      	bpl.n	8001e96 <__adddf3+0xe6>
 8001e86:	f04f 0e00 	mov.w	lr, #0
 8001e8a:	f1dc 0c00 	rsbs	ip, ip, #0
 8001e8e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8001e92:	eb6e 0101 	sbc.w	r1, lr, r1
 8001e96:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8001e9a:	d31b      	bcc.n	8001ed4 <__adddf3+0x124>
 8001e9c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8001ea0:	d30c      	bcc.n	8001ebc <__adddf3+0x10c>
 8001ea2:	0849      	lsrs	r1, r1, #1
 8001ea4:	ea5f 0030 	movs.w	r0, r0, rrx
 8001ea8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8001eac:	f104 0401 	add.w	r4, r4, #1
 8001eb0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8001eb4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8001eb8:	f080 809a 	bcs.w	8001ff0 <__adddf3+0x240>
 8001ebc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8001ec0:	bf08      	it	eq
 8001ec2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8001ec6:	f150 0000 	adcs.w	r0, r0, #0
 8001eca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8001ece:	ea41 0105 	orr.w	r1, r1, r5
 8001ed2:	bd30      	pop	{r4, r5, pc}
 8001ed4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8001ed8:	4140      	adcs	r0, r0
 8001eda:	eb41 0101 	adc.w	r1, r1, r1
 8001ede:	3c01      	subs	r4, #1
 8001ee0:	bf28      	it	cs
 8001ee2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8001ee6:	d2e9      	bcs.n	8001ebc <__adddf3+0x10c>
 8001ee8:	f091 0f00 	teq	r1, #0
 8001eec:	bf04      	itt	eq
 8001eee:	4601      	moveq	r1, r0
 8001ef0:	2000      	moveq	r0, #0
 8001ef2:	fab1 f381 	clz	r3, r1
 8001ef6:	bf08      	it	eq
 8001ef8:	3320      	addeq	r3, #32
 8001efa:	f1a3 030b 	sub.w	r3, r3, #11
 8001efe:	f1b3 0220 	subs.w	r2, r3, #32
 8001f02:	da0c      	bge.n	8001f1e <__adddf3+0x16e>
 8001f04:	320c      	adds	r2, #12
 8001f06:	dd08      	ble.n	8001f1a <__adddf3+0x16a>
 8001f08:	f102 0c14 	add.w	ip, r2, #20
 8001f0c:	f1c2 020c 	rsb	r2, r2, #12
 8001f10:	fa01 f00c 	lsl.w	r0, r1, ip
 8001f14:	fa21 f102 	lsr.w	r1, r1, r2
 8001f18:	e00c      	b.n	8001f34 <__adddf3+0x184>
 8001f1a:	f102 0214 	add.w	r2, r2, #20
 8001f1e:	bfd8      	it	le
 8001f20:	f1c2 0c20 	rsble	ip, r2, #32
 8001f24:	fa01 f102 	lsl.w	r1, r1, r2
 8001f28:	fa20 fc0c 	lsr.w	ip, r0, ip
 8001f2c:	bfdc      	itt	le
 8001f2e:	ea41 010c 	orrle.w	r1, r1, ip
 8001f32:	4090      	lslle	r0, r2
 8001f34:	1ae4      	subs	r4, r4, r3
 8001f36:	bfa2      	ittt	ge
 8001f38:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8001f3c:	4329      	orrge	r1, r5
 8001f3e:	bd30      	popge	{r4, r5, pc}
 8001f40:	ea6f 0404 	mvn.w	r4, r4
 8001f44:	3c1f      	subs	r4, #31
 8001f46:	da1c      	bge.n	8001f82 <__adddf3+0x1d2>
 8001f48:	340c      	adds	r4, #12
 8001f4a:	dc0e      	bgt.n	8001f6a <__adddf3+0x1ba>
 8001f4c:	f104 0414 	add.w	r4, r4, #20
 8001f50:	f1c4 0220 	rsb	r2, r4, #32
 8001f54:	fa20 f004 	lsr.w	r0, r0, r4
 8001f58:	fa01 f302 	lsl.w	r3, r1, r2
 8001f5c:	ea40 0003 	orr.w	r0, r0, r3
 8001f60:	fa21 f304 	lsr.w	r3, r1, r4
 8001f64:	ea45 0103 	orr.w	r1, r5, r3
 8001f68:	bd30      	pop	{r4, r5, pc}
 8001f6a:	f1c4 040c 	rsb	r4, r4, #12
 8001f6e:	f1c4 0220 	rsb	r2, r4, #32
 8001f72:	fa20 f002 	lsr.w	r0, r0, r2
 8001f76:	fa01 f304 	lsl.w	r3, r1, r4
 8001f7a:	ea40 0003 	orr.w	r0, r0, r3
 8001f7e:	4629      	mov	r1, r5
 8001f80:	bd30      	pop	{r4, r5, pc}
 8001f82:	fa21 f004 	lsr.w	r0, r1, r4
 8001f86:	4629      	mov	r1, r5
 8001f88:	bd30      	pop	{r4, r5, pc}
 8001f8a:	f094 0f00 	teq	r4, #0
 8001f8e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8001f92:	bf06      	itte	eq
 8001f94:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8001f98:	3401      	addeq	r4, #1
 8001f9a:	3d01      	subne	r5, #1
 8001f9c:	e74e      	b.n	8001e3c <__adddf3+0x8c>
 8001f9e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8001fa2:	bf18      	it	ne
 8001fa4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8001fa8:	d029      	beq.n	8001ffe <__adddf3+0x24e>
 8001faa:	ea94 0f05 	teq	r4, r5
 8001fae:	bf08      	it	eq
 8001fb0:	ea90 0f02 	teqeq	r0, r2
 8001fb4:	d005      	beq.n	8001fc2 <__adddf3+0x212>
 8001fb6:	ea54 0c00 	orrs.w	ip, r4, r0
 8001fba:	bf04      	itt	eq
 8001fbc:	4619      	moveq	r1, r3
 8001fbe:	4610      	moveq	r0, r2
 8001fc0:	bd30      	pop	{r4, r5, pc}
 8001fc2:	ea91 0f03 	teq	r1, r3
 8001fc6:	bf1e      	ittt	ne
 8001fc8:	2100      	movne	r1, #0
 8001fca:	2000      	movne	r0, #0
 8001fcc:	bd30      	popne	{r4, r5, pc}
 8001fce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8001fd2:	d105      	bne.n	8001fe0 <__adddf3+0x230>
 8001fd4:	0040      	lsls	r0, r0, #1
 8001fd6:	4149      	adcs	r1, r1
 8001fd8:	bf28      	it	cs
 8001fda:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8001fde:	bd30      	pop	{r4, r5, pc}
 8001fe0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8001fe4:	bf3c      	itt	cc
 8001fe6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8001fea:	bd30      	popcc	{r4, r5, pc}
 8001fec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8001ff0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8001ff4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8001ff8:	f04f 0000 	mov.w	r0, #0
 8001ffc:	bd30      	pop	{r4, r5, pc}
 8001ffe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8002002:	bf1a      	itte	ne
 8002004:	4619      	movne	r1, r3
 8002006:	4610      	movne	r0, r2
 8002008:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800200c:	bf1c      	itt	ne
 800200e:	460b      	movne	r3, r1
 8002010:	4602      	movne	r2, r0
 8002012:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8002016:	bf06      	itte	eq
 8002018:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800201c:	ea91 0f03 	teqeq	r1, r3
 8002020:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8002024:	bd30      	pop	{r4, r5, pc}
 8002026:	bf00      	nop

08002028 <__aeabi_ui2d>:
 8002028:	f090 0f00 	teq	r0, #0
 800202c:	bf04      	itt	eq
 800202e:	2100      	moveq	r1, #0
 8002030:	4770      	bxeq	lr
 8002032:	b530      	push	{r4, r5, lr}
 8002034:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8002038:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800203c:	f04f 0500 	mov.w	r5, #0
 8002040:	f04f 0100 	mov.w	r1, #0
 8002044:	e750      	b.n	8001ee8 <__adddf3+0x138>
 8002046:	bf00      	nop

08002048 <__aeabi_i2d>:
 8002048:	f090 0f00 	teq	r0, #0
 800204c:	bf04      	itt	eq
 800204e:	2100      	moveq	r1, #0
 8002050:	4770      	bxeq	lr
 8002052:	b530      	push	{r4, r5, lr}
 8002054:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8002058:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800205c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8002060:	bf48      	it	mi
 8002062:	4240      	negmi	r0, r0
 8002064:	f04f 0100 	mov.w	r1, #0
 8002068:	e73e      	b.n	8001ee8 <__adddf3+0x138>
 800206a:	bf00      	nop

0800206c <__aeabi_f2d>:
 800206c:	0042      	lsls	r2, r0, #1
 800206e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8002072:	ea4f 0131 	mov.w	r1, r1, rrx
 8002076:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800207a:	bf1f      	itttt	ne
 800207c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8002080:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8002084:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8002088:	4770      	bxne	lr
 800208a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800208e:	bf08      	it	eq
 8002090:	4770      	bxeq	lr
 8002092:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8002096:	bf04      	itt	eq
 8002098:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800209c:	4770      	bxeq	lr
 800209e:	b530      	push	{r4, r5, lr}
 80020a0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80020a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80020a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80020ac:	e71c      	b.n	8001ee8 <__adddf3+0x138>
 80020ae:	bf00      	nop

080020b0 <__aeabi_ul2d>:
 80020b0:	ea50 0201 	orrs.w	r2, r0, r1
 80020b4:	bf08      	it	eq
 80020b6:	4770      	bxeq	lr
 80020b8:	b530      	push	{r4, r5, lr}
 80020ba:	f04f 0500 	mov.w	r5, #0
 80020be:	e00a      	b.n	80020d6 <__aeabi_l2d+0x16>

080020c0 <__aeabi_l2d>:
 80020c0:	ea50 0201 	orrs.w	r2, r0, r1
 80020c4:	bf08      	it	eq
 80020c6:	4770      	bxeq	lr
 80020c8:	b530      	push	{r4, r5, lr}
 80020ca:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80020ce:	d502      	bpl.n	80020d6 <__aeabi_l2d+0x16>
 80020d0:	4240      	negs	r0, r0
 80020d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80020d6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80020da:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80020de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80020e2:	f43f aed8 	beq.w	8001e96 <__adddf3+0xe6>
 80020e6:	f04f 0203 	mov.w	r2, #3
 80020ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80020ee:	bf18      	it	ne
 80020f0:	3203      	addne	r2, #3
 80020f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80020f6:	bf18      	it	ne
 80020f8:	3203      	addne	r2, #3
 80020fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80020fe:	f1c2 0320 	rsb	r3, r2, #32
 8002102:	fa00 fc03 	lsl.w	ip, r0, r3
 8002106:	fa20 f002 	lsr.w	r0, r0, r2
 800210a:	fa01 fe03 	lsl.w	lr, r1, r3
 800210e:	ea40 000e 	orr.w	r0, r0, lr
 8002112:	fa21 f102 	lsr.w	r1, r1, r2
 8002116:	4414      	add	r4, r2
 8002118:	e6bd      	b.n	8001e96 <__adddf3+0xe6>
 800211a:	bf00      	nop

0800211c <__aeabi_dmul>:
 800211c:	b570      	push	{r4, r5, r6, lr}
 800211e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8002122:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8002126:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800212a:	bf1d      	ittte	ne
 800212c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8002130:	ea94 0f0c 	teqne	r4, ip
 8002134:	ea95 0f0c 	teqne	r5, ip
 8002138:	f000 f8de 	bleq	80022f8 <__aeabi_dmul+0x1dc>
 800213c:	442c      	add	r4, r5
 800213e:	ea81 0603 	eor.w	r6, r1, r3
 8002142:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8002146:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800214a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800214e:	bf18      	it	ne
 8002150:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8002154:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8002158:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800215c:	d038      	beq.n	80021d0 <__aeabi_dmul+0xb4>
 800215e:	fba0 ce02 	umull	ip, lr, r0, r2
 8002162:	f04f 0500 	mov.w	r5, #0
 8002166:	fbe1 e502 	umlal	lr, r5, r1, r2
 800216a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800216e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8002172:	f04f 0600 	mov.w	r6, #0
 8002176:	fbe1 5603 	umlal	r5, r6, r1, r3
 800217a:	f09c 0f00 	teq	ip, #0
 800217e:	bf18      	it	ne
 8002180:	f04e 0e01 	orrne.w	lr, lr, #1
 8002184:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8002188:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800218c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8002190:	d204      	bcs.n	800219c <__aeabi_dmul+0x80>
 8002192:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8002196:	416d      	adcs	r5, r5
 8002198:	eb46 0606 	adc.w	r6, r6, r6
 800219c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80021a0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80021a4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80021a8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80021ac:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80021b0:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80021b4:	bf88      	it	hi
 80021b6:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80021ba:	d81e      	bhi.n	80021fa <__aeabi_dmul+0xde>
 80021bc:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80021c0:	bf08      	it	eq
 80021c2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80021c6:	f150 0000 	adcs.w	r0, r0, #0
 80021ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80021ce:	bd70      	pop	{r4, r5, r6, pc}
 80021d0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80021d4:	ea46 0101 	orr.w	r1, r6, r1
 80021d8:	ea40 0002 	orr.w	r0, r0, r2
 80021dc:	ea81 0103 	eor.w	r1, r1, r3
 80021e0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80021e4:	bfc2      	ittt	gt
 80021e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80021ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80021ee:	bd70      	popgt	{r4, r5, r6, pc}
 80021f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80021f4:	f04f 0e00 	mov.w	lr, #0
 80021f8:	3c01      	subs	r4, #1
 80021fa:	f300 80ab 	bgt.w	8002354 <__aeabi_dmul+0x238>
 80021fe:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8002202:	bfde      	ittt	le
 8002204:	2000      	movle	r0, #0
 8002206:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800220a:	bd70      	pople	{r4, r5, r6, pc}
 800220c:	f1c4 0400 	rsb	r4, r4, #0
 8002210:	3c20      	subs	r4, #32
 8002212:	da35      	bge.n	8002280 <__aeabi_dmul+0x164>
 8002214:	340c      	adds	r4, #12
 8002216:	dc1b      	bgt.n	8002250 <__aeabi_dmul+0x134>
 8002218:	f104 0414 	add.w	r4, r4, #20
 800221c:	f1c4 0520 	rsb	r5, r4, #32
 8002220:	fa00 f305 	lsl.w	r3, r0, r5
 8002224:	fa20 f004 	lsr.w	r0, r0, r4
 8002228:	fa01 f205 	lsl.w	r2, r1, r5
 800222c:	ea40 0002 	orr.w	r0, r0, r2
 8002230:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8002234:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8002238:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800223c:	fa21 f604 	lsr.w	r6, r1, r4
 8002240:	eb42 0106 	adc.w	r1, r2, r6
 8002244:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8002248:	bf08      	it	eq
 800224a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800224e:	bd70      	pop	{r4, r5, r6, pc}
 8002250:	f1c4 040c 	rsb	r4, r4, #12
 8002254:	f1c4 0520 	rsb	r5, r4, #32
 8002258:	fa00 f304 	lsl.w	r3, r0, r4
 800225c:	fa20 f005 	lsr.w	r0, r0, r5
 8002260:	fa01 f204 	lsl.w	r2, r1, r4
 8002264:	ea40 0002 	orr.w	r0, r0, r2
 8002268:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800226c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8002270:	f141 0100 	adc.w	r1, r1, #0
 8002274:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8002278:	bf08      	it	eq
 800227a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800227e:	bd70      	pop	{r4, r5, r6, pc}
 8002280:	f1c4 0520 	rsb	r5, r4, #32
 8002284:	fa00 f205 	lsl.w	r2, r0, r5
 8002288:	ea4e 0e02 	orr.w	lr, lr, r2
 800228c:	fa20 f304 	lsr.w	r3, r0, r4
 8002290:	fa01 f205 	lsl.w	r2, r1, r5
 8002294:	ea43 0302 	orr.w	r3, r3, r2
 8002298:	fa21 f004 	lsr.w	r0, r1, r4
 800229c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80022a0:	fa21 f204 	lsr.w	r2, r1, r4
 80022a4:	ea20 0002 	bic.w	r0, r0, r2
 80022a8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80022ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80022b0:	bf08      	it	eq
 80022b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80022b6:	bd70      	pop	{r4, r5, r6, pc}
 80022b8:	f094 0f00 	teq	r4, #0
 80022bc:	d10f      	bne.n	80022de <__aeabi_dmul+0x1c2>
 80022be:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80022c2:	0040      	lsls	r0, r0, #1
 80022c4:	eb41 0101 	adc.w	r1, r1, r1
 80022c8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80022cc:	bf08      	it	eq
 80022ce:	3c01      	subeq	r4, #1
 80022d0:	d0f7      	beq.n	80022c2 <__aeabi_dmul+0x1a6>
 80022d2:	ea41 0106 	orr.w	r1, r1, r6
 80022d6:	f095 0f00 	teq	r5, #0
 80022da:	bf18      	it	ne
 80022dc:	4770      	bxne	lr
 80022de:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80022e2:	0052      	lsls	r2, r2, #1
 80022e4:	eb43 0303 	adc.w	r3, r3, r3
 80022e8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80022ec:	bf08      	it	eq
 80022ee:	3d01      	subeq	r5, #1
 80022f0:	d0f7      	beq.n	80022e2 <__aeabi_dmul+0x1c6>
 80022f2:	ea43 0306 	orr.w	r3, r3, r6
 80022f6:	4770      	bx	lr
 80022f8:	ea94 0f0c 	teq	r4, ip
 80022fc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8002300:	bf18      	it	ne
 8002302:	ea95 0f0c 	teqne	r5, ip
 8002306:	d00c      	beq.n	8002322 <__aeabi_dmul+0x206>
 8002308:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800230c:	bf18      	it	ne
 800230e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8002312:	d1d1      	bne.n	80022b8 <__aeabi_dmul+0x19c>
 8002314:	ea81 0103 	eor.w	r1, r1, r3
 8002318:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800231c:	f04f 0000 	mov.w	r0, #0
 8002320:	bd70      	pop	{r4, r5, r6, pc}
 8002322:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8002326:	bf06      	itte	eq
 8002328:	4610      	moveq	r0, r2
 800232a:	4619      	moveq	r1, r3
 800232c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8002330:	d019      	beq.n	8002366 <__aeabi_dmul+0x24a>
 8002332:	ea94 0f0c 	teq	r4, ip
 8002336:	d102      	bne.n	800233e <__aeabi_dmul+0x222>
 8002338:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800233c:	d113      	bne.n	8002366 <__aeabi_dmul+0x24a>
 800233e:	ea95 0f0c 	teq	r5, ip
 8002342:	d105      	bne.n	8002350 <__aeabi_dmul+0x234>
 8002344:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8002348:	bf1c      	itt	ne
 800234a:	4610      	movne	r0, r2
 800234c:	4619      	movne	r1, r3
 800234e:	d10a      	bne.n	8002366 <__aeabi_dmul+0x24a>
 8002350:	ea81 0103 	eor.w	r1, r1, r3
 8002354:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8002358:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800235c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8002360:	f04f 0000 	mov.w	r0, #0
 8002364:	bd70      	pop	{r4, r5, r6, pc}
 8002366:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800236a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800236e:	bd70      	pop	{r4, r5, r6, pc}

08002370 <__aeabi_ddiv>:
 8002370:	b570      	push	{r4, r5, r6, lr}
 8002372:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8002376:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800237a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800237e:	bf1d      	ittte	ne
 8002380:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8002384:	ea94 0f0c 	teqne	r4, ip
 8002388:	ea95 0f0c 	teqne	r5, ip
 800238c:	f000 f8a7 	bleq	80024de <__aeabi_ddiv+0x16e>
 8002390:	eba4 0405 	sub.w	r4, r4, r5
 8002394:	ea81 0e03 	eor.w	lr, r1, r3
 8002398:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800239c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80023a0:	f000 8088 	beq.w	80024b4 <__aeabi_ddiv+0x144>
 80023a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80023a8:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80023ac:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80023b0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80023b4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80023b8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80023bc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80023c0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80023c4:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80023c8:	429d      	cmp	r5, r3
 80023ca:	bf08      	it	eq
 80023cc:	4296      	cmpeq	r6, r2
 80023ce:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80023d2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80023d6:	d202      	bcs.n	80023de <__aeabi_ddiv+0x6e>
 80023d8:	085b      	lsrs	r3, r3, #1
 80023da:	ea4f 0232 	mov.w	r2, r2, rrx
 80023de:	1ab6      	subs	r6, r6, r2
 80023e0:	eb65 0503 	sbc.w	r5, r5, r3
 80023e4:	085b      	lsrs	r3, r3, #1
 80023e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80023ea:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80023ee:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80023f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80023f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80023fa:	bf22      	ittt	cs
 80023fc:	1ab6      	subcs	r6, r6, r2
 80023fe:	4675      	movcs	r5, lr
 8002400:	ea40 000c 	orrcs.w	r0, r0, ip
 8002404:	085b      	lsrs	r3, r3, #1
 8002406:	ea4f 0232 	mov.w	r2, r2, rrx
 800240a:	ebb6 0e02 	subs.w	lr, r6, r2
 800240e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8002412:	bf22      	ittt	cs
 8002414:	1ab6      	subcs	r6, r6, r2
 8002416:	4675      	movcs	r5, lr
 8002418:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800241c:	085b      	lsrs	r3, r3, #1
 800241e:	ea4f 0232 	mov.w	r2, r2, rrx
 8002422:	ebb6 0e02 	subs.w	lr, r6, r2
 8002426:	eb75 0e03 	sbcs.w	lr, r5, r3
 800242a:	bf22      	ittt	cs
 800242c:	1ab6      	subcs	r6, r6, r2
 800242e:	4675      	movcs	r5, lr
 8002430:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8002434:	085b      	lsrs	r3, r3, #1
 8002436:	ea4f 0232 	mov.w	r2, r2, rrx
 800243a:	ebb6 0e02 	subs.w	lr, r6, r2
 800243e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8002442:	bf22      	ittt	cs
 8002444:	1ab6      	subcs	r6, r6, r2
 8002446:	4675      	movcs	r5, lr
 8002448:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800244c:	ea55 0e06 	orrs.w	lr, r5, r6
 8002450:	d018      	beq.n	8002484 <__aeabi_ddiv+0x114>
 8002452:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8002456:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800245a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800245e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8002462:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8002466:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800246a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800246e:	d1c0      	bne.n	80023f2 <__aeabi_ddiv+0x82>
 8002470:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8002474:	d10b      	bne.n	800248e <__aeabi_ddiv+0x11e>
 8002476:	ea41 0100 	orr.w	r1, r1, r0
 800247a:	f04f 0000 	mov.w	r0, #0
 800247e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8002482:	e7b6      	b.n	80023f2 <__aeabi_ddiv+0x82>
 8002484:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8002488:	bf04      	itt	eq
 800248a:	4301      	orreq	r1, r0
 800248c:	2000      	moveq	r0, #0
 800248e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8002492:	bf88      	it	hi
 8002494:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8002498:	f63f aeaf 	bhi.w	80021fa <__aeabi_dmul+0xde>
 800249c:	ebb5 0c03 	subs.w	ip, r5, r3
 80024a0:	bf04      	itt	eq
 80024a2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80024a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80024aa:	f150 0000 	adcs.w	r0, r0, #0
 80024ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80024b2:	bd70      	pop	{r4, r5, r6, pc}
 80024b4:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80024b8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80024bc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80024c0:	bfc2      	ittt	gt
 80024c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80024c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80024ca:	bd70      	popgt	{r4, r5, r6, pc}
 80024cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80024d0:	f04f 0e00 	mov.w	lr, #0
 80024d4:	3c01      	subs	r4, #1
 80024d6:	e690      	b.n	80021fa <__aeabi_dmul+0xde>
 80024d8:	ea45 0e06 	orr.w	lr, r5, r6
 80024dc:	e68d      	b.n	80021fa <__aeabi_dmul+0xde>
 80024de:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80024e2:	ea94 0f0c 	teq	r4, ip
 80024e6:	bf08      	it	eq
 80024e8:	ea95 0f0c 	teqeq	r5, ip
 80024ec:	f43f af3b 	beq.w	8002366 <__aeabi_dmul+0x24a>
 80024f0:	ea94 0f0c 	teq	r4, ip
 80024f4:	d10a      	bne.n	800250c <__aeabi_ddiv+0x19c>
 80024f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80024fa:	f47f af34 	bne.w	8002366 <__aeabi_dmul+0x24a>
 80024fe:	ea95 0f0c 	teq	r5, ip
 8002502:	f47f af25 	bne.w	8002350 <__aeabi_dmul+0x234>
 8002506:	4610      	mov	r0, r2
 8002508:	4619      	mov	r1, r3
 800250a:	e72c      	b.n	8002366 <__aeabi_dmul+0x24a>
 800250c:	ea95 0f0c 	teq	r5, ip
 8002510:	d106      	bne.n	8002520 <__aeabi_ddiv+0x1b0>
 8002512:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8002516:	f43f aefd 	beq.w	8002314 <__aeabi_dmul+0x1f8>
 800251a:	4610      	mov	r0, r2
 800251c:	4619      	mov	r1, r3
 800251e:	e722      	b.n	8002366 <__aeabi_dmul+0x24a>
 8002520:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8002524:	bf18      	it	ne
 8002526:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800252a:	f47f aec5 	bne.w	80022b8 <__aeabi_dmul+0x19c>
 800252e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8002532:	f47f af0d 	bne.w	8002350 <__aeabi_dmul+0x234>
 8002536:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800253a:	f47f aeeb 	bne.w	8002314 <__aeabi_dmul+0x1f8>
 800253e:	e712      	b.n	8002366 <__aeabi_dmul+0x24a>

08002540 <__gedf2>:
 8002540:	f04f 3cff 	mov.w	ip, #4294967295
 8002544:	e006      	b.n	8002554 <__cmpdf2+0x4>
 8002546:	bf00      	nop

08002548 <__ledf2>:
 8002548:	f04f 0c01 	mov.w	ip, #1
 800254c:	e002      	b.n	8002554 <__cmpdf2+0x4>
 800254e:	bf00      	nop

08002550 <__cmpdf2>:
 8002550:	f04f 0c01 	mov.w	ip, #1
 8002554:	f84d cd04 	str.w	ip, [sp, #-4]!
 8002558:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800255c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8002560:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8002564:	bf18      	it	ne
 8002566:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800256a:	d01b      	beq.n	80025a4 <__cmpdf2+0x54>
 800256c:	b001      	add	sp, #4
 800256e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8002572:	bf0c      	ite	eq
 8002574:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8002578:	ea91 0f03 	teqne	r1, r3
 800257c:	bf02      	ittt	eq
 800257e:	ea90 0f02 	teqeq	r0, r2
 8002582:	2000      	moveq	r0, #0
 8002584:	4770      	bxeq	lr
 8002586:	f110 0f00 	cmn.w	r0, #0
 800258a:	ea91 0f03 	teq	r1, r3
 800258e:	bf58      	it	pl
 8002590:	4299      	cmppl	r1, r3
 8002592:	bf08      	it	eq
 8002594:	4290      	cmpeq	r0, r2
 8002596:	bf2c      	ite	cs
 8002598:	17d8      	asrcs	r0, r3, #31
 800259a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800259e:	f040 0001 	orr.w	r0, r0, #1
 80025a2:	4770      	bx	lr
 80025a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80025a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80025ac:	d102      	bne.n	80025b4 <__cmpdf2+0x64>
 80025ae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80025b2:	d107      	bne.n	80025c4 <__cmpdf2+0x74>
 80025b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80025b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80025bc:	d1d6      	bne.n	800256c <__cmpdf2+0x1c>
 80025be:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80025c2:	d0d3      	beq.n	800256c <__cmpdf2+0x1c>
 80025c4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop

080025cc <__aeabi_cdrcmple>:
 80025cc:	4684      	mov	ip, r0
 80025ce:	4610      	mov	r0, r2
 80025d0:	4662      	mov	r2, ip
 80025d2:	468c      	mov	ip, r1
 80025d4:	4619      	mov	r1, r3
 80025d6:	4663      	mov	r3, ip
 80025d8:	e000      	b.n	80025dc <__aeabi_cdcmpeq>
 80025da:	bf00      	nop

080025dc <__aeabi_cdcmpeq>:
 80025dc:	b501      	push	{r0, lr}
 80025de:	f7ff ffb7 	bl	8002550 <__cmpdf2>
 80025e2:	2800      	cmp	r0, #0
 80025e4:	bf48      	it	mi
 80025e6:	f110 0f00 	cmnmi.w	r0, #0
 80025ea:	bd01      	pop	{r0, pc}

080025ec <__aeabi_dcmpeq>:
 80025ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80025f0:	f7ff fff4 	bl	80025dc <__aeabi_cdcmpeq>
 80025f4:	bf0c      	ite	eq
 80025f6:	2001      	moveq	r0, #1
 80025f8:	2000      	movne	r0, #0
 80025fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80025fe:	bf00      	nop

08002600 <__aeabi_dcmplt>:
 8002600:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002604:	f7ff ffea 	bl	80025dc <__aeabi_cdcmpeq>
 8002608:	bf34      	ite	cc
 800260a:	2001      	movcc	r0, #1
 800260c:	2000      	movcs	r0, #0
 800260e:	f85d fb08 	ldr.w	pc, [sp], #8
 8002612:	bf00      	nop

08002614 <__aeabi_dcmple>:
 8002614:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002618:	f7ff ffe0 	bl	80025dc <__aeabi_cdcmpeq>
 800261c:	bf94      	ite	ls
 800261e:	2001      	movls	r0, #1
 8002620:	2000      	movhi	r0, #0
 8002622:	f85d fb08 	ldr.w	pc, [sp], #8
 8002626:	bf00      	nop

08002628 <__aeabi_dcmpge>:
 8002628:	f84d ed08 	str.w	lr, [sp, #-8]!
 800262c:	f7ff ffce 	bl	80025cc <__aeabi_cdrcmple>
 8002630:	bf94      	ite	ls
 8002632:	2001      	movls	r0, #1
 8002634:	2000      	movhi	r0, #0
 8002636:	f85d fb08 	ldr.w	pc, [sp], #8
 800263a:	bf00      	nop

0800263c <__aeabi_dcmpgt>:
 800263c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002640:	f7ff ffc4 	bl	80025cc <__aeabi_cdrcmple>
 8002644:	bf34      	ite	cc
 8002646:	2001      	movcc	r0, #1
 8002648:	2000      	movcs	r0, #0
 800264a:	f85d fb08 	ldr.w	pc, [sp], #8
 800264e:	bf00      	nop

08002650 <__aeabi_dcmpun>:
 8002650:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8002654:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8002658:	d102      	bne.n	8002660 <__aeabi_dcmpun+0x10>
 800265a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800265e:	d10a      	bne.n	8002676 <__aeabi_dcmpun+0x26>
 8002660:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8002664:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8002668:	d102      	bne.n	8002670 <__aeabi_dcmpun+0x20>
 800266a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800266e:	d102      	bne.n	8002676 <__aeabi_dcmpun+0x26>
 8002670:	f04f 0000 	mov.w	r0, #0
 8002674:	4770      	bx	lr
 8002676:	f04f 0001 	mov.w	r0, #1
 800267a:	4770      	bx	lr

0800267c <__aeabi_d2iz>:
 800267c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8002680:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8002684:	d215      	bcs.n	80026b2 <__aeabi_d2iz+0x36>
 8002686:	d511      	bpl.n	80026ac <__aeabi_d2iz+0x30>
 8002688:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800268c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8002690:	d912      	bls.n	80026b8 <__aeabi_d2iz+0x3c>
 8002692:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8002696:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800269a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800269e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80026a2:	fa23 f002 	lsr.w	r0, r3, r2
 80026a6:	bf18      	it	ne
 80026a8:	4240      	negne	r0, r0
 80026aa:	4770      	bx	lr
 80026ac:	f04f 0000 	mov.w	r0, #0
 80026b0:	4770      	bx	lr
 80026b2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80026b6:	d105      	bne.n	80026c4 <__aeabi_d2iz+0x48>
 80026b8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80026bc:	bf08      	it	eq
 80026be:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80026c2:	4770      	bx	lr
 80026c4:	f04f 0000 	mov.w	r0, #0
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop

080026cc <__aeabi_d2uiz>:
 80026cc:	004a      	lsls	r2, r1, #1
 80026ce:	d211      	bcs.n	80026f4 <__aeabi_d2uiz+0x28>
 80026d0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80026d4:	d211      	bcs.n	80026fa <__aeabi_d2uiz+0x2e>
 80026d6:	d50d      	bpl.n	80026f4 <__aeabi_d2uiz+0x28>
 80026d8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80026dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80026e0:	d40e      	bmi.n	8002700 <__aeabi_d2uiz+0x34>
 80026e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80026e6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80026ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80026ee:	fa23 f002 	lsr.w	r0, r3, r2
 80026f2:	4770      	bx	lr
 80026f4:	f04f 0000 	mov.w	r0, #0
 80026f8:	4770      	bx	lr
 80026fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80026fe:	d102      	bne.n	8002706 <__aeabi_d2uiz+0x3a>
 8002700:	f04f 30ff 	mov.w	r0, #4294967295
 8002704:	4770      	bx	lr
 8002706:	f04f 0000 	mov.w	r0, #0
 800270a:	4770      	bx	lr

0800270c <__aeabi_d2f>:
 800270c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8002710:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8002714:	bf24      	itt	cs
 8002716:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800271a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800271e:	d90d      	bls.n	800273c <__aeabi_d2f+0x30>
 8002720:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8002724:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8002728:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800272c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8002730:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8002734:	bf08      	it	eq
 8002736:	f020 0001 	biceq.w	r0, r0, #1
 800273a:	4770      	bx	lr
 800273c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8002740:	d121      	bne.n	8002786 <__aeabi_d2f+0x7a>
 8002742:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8002746:	bfbc      	itt	lt
 8002748:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800274c:	4770      	bxlt	lr
 800274e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8002752:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8002756:	f1c2 0218 	rsb	r2, r2, #24
 800275a:	f1c2 0c20 	rsb	ip, r2, #32
 800275e:	fa10 f30c 	lsls.w	r3, r0, ip
 8002762:	fa20 f002 	lsr.w	r0, r0, r2
 8002766:	bf18      	it	ne
 8002768:	f040 0001 	orrne.w	r0, r0, #1
 800276c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8002770:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8002774:	fa03 fc0c 	lsl.w	ip, r3, ip
 8002778:	ea40 000c 	orr.w	r0, r0, ip
 800277c:	fa23 f302 	lsr.w	r3, r3, r2
 8002780:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002784:	e7cc      	b.n	8002720 <__aeabi_d2f+0x14>
 8002786:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800278a:	d107      	bne.n	800279c <__aeabi_d2f+0x90>
 800278c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8002790:	bf1e      	ittt	ne
 8002792:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8002796:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800279a:	4770      	bxne	lr
 800279c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80027a0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80027a4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop

080027ac <__aeabi_uldivmod>:
 80027ac:	b953      	cbnz	r3, 80027c4 <__aeabi_uldivmod+0x18>
 80027ae:	b94a      	cbnz	r2, 80027c4 <__aeabi_uldivmod+0x18>
 80027b0:	2900      	cmp	r1, #0
 80027b2:	bf08      	it	eq
 80027b4:	2800      	cmpeq	r0, #0
 80027b6:	bf1c      	itt	ne
 80027b8:	f04f 31ff 	movne.w	r1, #4294967295
 80027bc:	f04f 30ff 	movne.w	r0, #4294967295
 80027c0:	f000 b9e6 	b.w	8002b90 <__aeabi_idiv0>
 80027c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80027c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80027cc:	f000 f83c 	bl	8002848 <__udivmoddi4>
 80027d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80027d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80027d8:	b004      	add	sp, #16
 80027da:	4770      	bx	lr

080027dc <__aeabi_d2lz>:
 80027dc:	b538      	push	{r3, r4, r5, lr}
 80027de:	2200      	movs	r2, #0
 80027e0:	2300      	movs	r3, #0
 80027e2:	4604      	mov	r4, r0
 80027e4:	460d      	mov	r5, r1
 80027e6:	f7ff ff0b 	bl	8002600 <__aeabi_dcmplt>
 80027ea:	b928      	cbnz	r0, 80027f8 <__aeabi_d2lz+0x1c>
 80027ec:	4620      	mov	r0, r4
 80027ee:	4629      	mov	r1, r5
 80027f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80027f4:	f000 b80a 	b.w	800280c <__aeabi_d2ulz>
 80027f8:	4620      	mov	r0, r4
 80027fa:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 80027fe:	f000 f805 	bl	800280c <__aeabi_d2ulz>
 8002802:	4240      	negs	r0, r0
 8002804:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8002808:	bd38      	pop	{r3, r4, r5, pc}
 800280a:	bf00      	nop

0800280c <__aeabi_d2ulz>:
 800280c:	b5d0      	push	{r4, r6, r7, lr}
 800280e:	2200      	movs	r2, #0
 8002810:	4b0b      	ldr	r3, [pc, #44]	@ (8002840 <__aeabi_d2ulz+0x34>)
 8002812:	4606      	mov	r6, r0
 8002814:	460f      	mov	r7, r1
 8002816:	f7ff fc81 	bl	800211c <__aeabi_dmul>
 800281a:	f7ff ff57 	bl	80026cc <__aeabi_d2uiz>
 800281e:	4604      	mov	r4, r0
 8002820:	f7ff fc02 	bl	8002028 <__aeabi_ui2d>
 8002824:	2200      	movs	r2, #0
 8002826:	4b07      	ldr	r3, [pc, #28]	@ (8002844 <__aeabi_d2ulz+0x38>)
 8002828:	f7ff fc78 	bl	800211c <__aeabi_dmul>
 800282c:	4602      	mov	r2, r0
 800282e:	460b      	mov	r3, r1
 8002830:	4630      	mov	r0, r6
 8002832:	4639      	mov	r1, r7
 8002834:	f7ff faba 	bl	8001dac <__aeabi_dsub>
 8002838:	f7ff ff48 	bl	80026cc <__aeabi_d2uiz>
 800283c:	4621      	mov	r1, r4
 800283e:	bdd0      	pop	{r4, r6, r7, pc}
 8002840:	3df00000 	.word	0x3df00000
 8002844:	41f00000 	.word	0x41f00000

08002848 <__udivmoddi4>:
 8002848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800284c:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800284e:	4688      	mov	r8, r1
 8002850:	4604      	mov	r4, r0
 8002852:	468e      	mov	lr, r1
 8002854:	2b00      	cmp	r3, #0
 8002856:	d14a      	bne.n	80028ee <__udivmoddi4+0xa6>
 8002858:	428a      	cmp	r2, r1
 800285a:	4617      	mov	r7, r2
 800285c:	d95f      	bls.n	800291e <__udivmoddi4+0xd6>
 800285e:	fab2 f682 	clz	r6, r2
 8002862:	b14e      	cbz	r6, 8002878 <__udivmoddi4+0x30>
 8002864:	f1c6 0320 	rsb	r3, r6, #32
 8002868:	fa01 fe06 	lsl.w	lr, r1, r6
 800286c:	40b7      	lsls	r7, r6
 800286e:	40b4      	lsls	r4, r6
 8002870:	fa20 f303 	lsr.w	r3, r0, r3
 8002874:	ea43 0e0e 	orr.w	lr, r3, lr
 8002878:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800287c:	fa1f fc87 	uxth.w	ip, r7
 8002880:	0c23      	lsrs	r3, r4, #16
 8002882:	fbbe f1f8 	udiv	r1, lr, r8
 8002886:	fb08 ee11 	mls	lr, r8, r1, lr
 800288a:	fb01 f20c 	mul.w	r2, r1, ip
 800288e:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8002892:	429a      	cmp	r2, r3
 8002894:	d907      	bls.n	80028a6 <__udivmoddi4+0x5e>
 8002896:	18fb      	adds	r3, r7, r3
 8002898:	f101 30ff 	add.w	r0, r1, #4294967295
 800289c:	d202      	bcs.n	80028a4 <__udivmoddi4+0x5c>
 800289e:	429a      	cmp	r2, r3
 80028a0:	f200 8154 	bhi.w	8002b4c <__udivmoddi4+0x304>
 80028a4:	4601      	mov	r1, r0
 80028a6:	1a9b      	subs	r3, r3, r2
 80028a8:	b2a2      	uxth	r2, r4
 80028aa:	fbb3 f0f8 	udiv	r0, r3, r8
 80028ae:	fb08 3310 	mls	r3, r8, r0, r3
 80028b2:	fb00 fc0c 	mul.w	ip, r0, ip
 80028b6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80028ba:	4594      	cmp	ip, r2
 80028bc:	d90b      	bls.n	80028d6 <__udivmoddi4+0x8e>
 80028be:	18ba      	adds	r2, r7, r2
 80028c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80028c4:	bf2c      	ite	cs
 80028c6:	2401      	movcs	r4, #1
 80028c8:	2400      	movcc	r4, #0
 80028ca:	4594      	cmp	ip, r2
 80028cc:	d902      	bls.n	80028d4 <__udivmoddi4+0x8c>
 80028ce:	2c00      	cmp	r4, #0
 80028d0:	f000 813f 	beq.w	8002b52 <__udivmoddi4+0x30a>
 80028d4:	4618      	mov	r0, r3
 80028d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80028da:	eba2 020c 	sub.w	r2, r2, ip
 80028de:	2100      	movs	r1, #0
 80028e0:	b11d      	cbz	r5, 80028ea <__udivmoddi4+0xa2>
 80028e2:	40f2      	lsrs	r2, r6
 80028e4:	2300      	movs	r3, #0
 80028e6:	e9c5 2300 	strd	r2, r3, [r5]
 80028ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80028ee:	428b      	cmp	r3, r1
 80028f0:	d905      	bls.n	80028fe <__udivmoddi4+0xb6>
 80028f2:	b10d      	cbz	r5, 80028f8 <__udivmoddi4+0xb0>
 80028f4:	e9c5 0100 	strd	r0, r1, [r5]
 80028f8:	2100      	movs	r1, #0
 80028fa:	4608      	mov	r0, r1
 80028fc:	e7f5      	b.n	80028ea <__udivmoddi4+0xa2>
 80028fe:	fab3 f183 	clz	r1, r3
 8002902:	2900      	cmp	r1, #0
 8002904:	d14e      	bne.n	80029a4 <__udivmoddi4+0x15c>
 8002906:	4543      	cmp	r3, r8
 8002908:	f0c0 8112 	bcc.w	8002b30 <__udivmoddi4+0x2e8>
 800290c:	4282      	cmp	r2, r0
 800290e:	f240 810f 	bls.w	8002b30 <__udivmoddi4+0x2e8>
 8002912:	4608      	mov	r0, r1
 8002914:	2d00      	cmp	r5, #0
 8002916:	d0e8      	beq.n	80028ea <__udivmoddi4+0xa2>
 8002918:	e9c5 4e00 	strd	r4, lr, [r5]
 800291c:	e7e5      	b.n	80028ea <__udivmoddi4+0xa2>
 800291e:	2a00      	cmp	r2, #0
 8002920:	f000 80ac 	beq.w	8002a7c <__udivmoddi4+0x234>
 8002924:	fab2 f682 	clz	r6, r2
 8002928:	2e00      	cmp	r6, #0
 800292a:	f040 80bb 	bne.w	8002aa4 <__udivmoddi4+0x25c>
 800292e:	1a8b      	subs	r3, r1, r2
 8002930:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8002934:	b2bc      	uxth	r4, r7
 8002936:	2101      	movs	r1, #1
 8002938:	0c02      	lsrs	r2, r0, #16
 800293a:	b280      	uxth	r0, r0
 800293c:	fbb3 fcfe 	udiv	ip, r3, lr
 8002940:	fb0e 331c 	mls	r3, lr, ip, r3
 8002944:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8002948:	fb04 f20c 	mul.w	r2, r4, ip
 800294c:	429a      	cmp	r2, r3
 800294e:	d90e      	bls.n	800296e <__udivmoddi4+0x126>
 8002950:	18fb      	adds	r3, r7, r3
 8002952:	f10c 38ff 	add.w	r8, ip, #4294967295
 8002956:	bf2c      	ite	cs
 8002958:	f04f 0901 	movcs.w	r9, #1
 800295c:	f04f 0900 	movcc.w	r9, #0
 8002960:	429a      	cmp	r2, r3
 8002962:	d903      	bls.n	800296c <__udivmoddi4+0x124>
 8002964:	f1b9 0f00 	cmp.w	r9, #0
 8002968:	f000 80ec 	beq.w	8002b44 <__udivmoddi4+0x2fc>
 800296c:	46c4      	mov	ip, r8
 800296e:	1a9b      	subs	r3, r3, r2
 8002970:	fbb3 f8fe 	udiv	r8, r3, lr
 8002974:	fb0e 3318 	mls	r3, lr, r8, r3
 8002978:	fb04 f408 	mul.w	r4, r4, r8
 800297c:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 8002980:	4294      	cmp	r4, r2
 8002982:	d90b      	bls.n	800299c <__udivmoddi4+0x154>
 8002984:	18ba      	adds	r2, r7, r2
 8002986:	f108 33ff 	add.w	r3, r8, #4294967295
 800298a:	bf2c      	ite	cs
 800298c:	2001      	movcs	r0, #1
 800298e:	2000      	movcc	r0, #0
 8002990:	4294      	cmp	r4, r2
 8002992:	d902      	bls.n	800299a <__udivmoddi4+0x152>
 8002994:	2800      	cmp	r0, #0
 8002996:	f000 80d1 	beq.w	8002b3c <__udivmoddi4+0x2f4>
 800299a:	4698      	mov	r8, r3
 800299c:	1b12      	subs	r2, r2, r4
 800299e:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 80029a2:	e79d      	b.n	80028e0 <__udivmoddi4+0x98>
 80029a4:	f1c1 0620 	rsb	r6, r1, #32
 80029a8:	408b      	lsls	r3, r1
 80029aa:	fa08 f401 	lsl.w	r4, r8, r1
 80029ae:	fa00 f901 	lsl.w	r9, r0, r1
 80029b2:	fa22 f706 	lsr.w	r7, r2, r6
 80029b6:	fa28 f806 	lsr.w	r8, r8, r6
 80029ba:	408a      	lsls	r2, r1
 80029bc:	431f      	orrs	r7, r3
 80029be:	fa20 f306 	lsr.w	r3, r0, r6
 80029c2:	0c38      	lsrs	r0, r7, #16
 80029c4:	4323      	orrs	r3, r4
 80029c6:	fa1f fc87 	uxth.w	ip, r7
 80029ca:	0c1c      	lsrs	r4, r3, #16
 80029cc:	fbb8 fef0 	udiv	lr, r8, r0
 80029d0:	fb00 881e 	mls	r8, r0, lr, r8
 80029d4:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 80029d8:	fb0e f80c 	mul.w	r8, lr, ip
 80029dc:	45a0      	cmp	r8, r4
 80029de:	d90e      	bls.n	80029fe <__udivmoddi4+0x1b6>
 80029e0:	193c      	adds	r4, r7, r4
 80029e2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80029e6:	bf2c      	ite	cs
 80029e8:	f04f 0b01 	movcs.w	fp, #1
 80029ec:	f04f 0b00 	movcc.w	fp, #0
 80029f0:	45a0      	cmp	r8, r4
 80029f2:	d903      	bls.n	80029fc <__udivmoddi4+0x1b4>
 80029f4:	f1bb 0f00 	cmp.w	fp, #0
 80029f8:	f000 80b8 	beq.w	8002b6c <__udivmoddi4+0x324>
 80029fc:	46d6      	mov	lr, sl
 80029fe:	eba4 0408 	sub.w	r4, r4, r8
 8002a02:	fa1f f883 	uxth.w	r8, r3
 8002a06:	fbb4 f3f0 	udiv	r3, r4, r0
 8002a0a:	fb00 4413 	mls	r4, r0, r3, r4
 8002a0e:	fb03 fc0c 	mul.w	ip, r3, ip
 8002a12:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8002a16:	45a4      	cmp	ip, r4
 8002a18:	d90e      	bls.n	8002a38 <__udivmoddi4+0x1f0>
 8002a1a:	193c      	adds	r4, r7, r4
 8002a1c:	f103 30ff 	add.w	r0, r3, #4294967295
 8002a20:	bf2c      	ite	cs
 8002a22:	f04f 0801 	movcs.w	r8, #1
 8002a26:	f04f 0800 	movcc.w	r8, #0
 8002a2a:	45a4      	cmp	ip, r4
 8002a2c:	d903      	bls.n	8002a36 <__udivmoddi4+0x1ee>
 8002a2e:	f1b8 0f00 	cmp.w	r8, #0
 8002a32:	f000 809f 	beq.w	8002b74 <__udivmoddi4+0x32c>
 8002a36:	4603      	mov	r3, r0
 8002a38:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8002a3c:	eba4 040c 	sub.w	r4, r4, ip
 8002a40:	fba0 ec02 	umull	lr, ip, r0, r2
 8002a44:	4564      	cmp	r4, ip
 8002a46:	4673      	mov	r3, lr
 8002a48:	46e0      	mov	r8, ip
 8002a4a:	d302      	bcc.n	8002a52 <__udivmoddi4+0x20a>
 8002a4c:	d107      	bne.n	8002a5e <__udivmoddi4+0x216>
 8002a4e:	45f1      	cmp	r9, lr
 8002a50:	d205      	bcs.n	8002a5e <__udivmoddi4+0x216>
 8002a52:	ebbe 0302 	subs.w	r3, lr, r2
 8002a56:	eb6c 0c07 	sbc.w	ip, ip, r7
 8002a5a:	3801      	subs	r0, #1
 8002a5c:	46e0      	mov	r8, ip
 8002a5e:	b15d      	cbz	r5, 8002a78 <__udivmoddi4+0x230>
 8002a60:	ebb9 0203 	subs.w	r2, r9, r3
 8002a64:	eb64 0408 	sbc.w	r4, r4, r8
 8002a68:	fa04 f606 	lsl.w	r6, r4, r6
 8002a6c:	fa22 f301 	lsr.w	r3, r2, r1
 8002a70:	40cc      	lsrs	r4, r1
 8002a72:	431e      	orrs	r6, r3
 8002a74:	e9c5 6400 	strd	r6, r4, [r5]
 8002a78:	2100      	movs	r1, #0
 8002a7a:	e736      	b.n	80028ea <__udivmoddi4+0xa2>
 8002a7c:	fbb1 fcf2 	udiv	ip, r1, r2
 8002a80:	0c01      	lsrs	r1, r0, #16
 8002a82:	4614      	mov	r4, r2
 8002a84:	b280      	uxth	r0, r0
 8002a86:	4696      	mov	lr, r2
 8002a88:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8002a8c:	2620      	movs	r6, #32
 8002a8e:	4690      	mov	r8, r2
 8002a90:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8002a94:	4610      	mov	r0, r2
 8002a96:	fbb1 f1f2 	udiv	r1, r1, r2
 8002a9a:	eba3 0308 	sub.w	r3, r3, r8
 8002a9e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8002aa2:	e74b      	b.n	800293c <__udivmoddi4+0xf4>
 8002aa4:	40b7      	lsls	r7, r6
 8002aa6:	f1c6 0320 	rsb	r3, r6, #32
 8002aaa:	fa01 f206 	lsl.w	r2, r1, r6
 8002aae:	fa21 f803 	lsr.w	r8, r1, r3
 8002ab2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8002ab6:	fa20 f303 	lsr.w	r3, r0, r3
 8002aba:	b2bc      	uxth	r4, r7
 8002abc:	40b0      	lsls	r0, r6
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	0c02      	lsrs	r2, r0, #16
 8002ac2:	0c19      	lsrs	r1, r3, #16
 8002ac4:	b280      	uxth	r0, r0
 8002ac6:	fbb8 f9fe 	udiv	r9, r8, lr
 8002aca:	fb0e 8819 	mls	r8, lr, r9, r8
 8002ace:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8002ad2:	fb09 f804 	mul.w	r8, r9, r4
 8002ad6:	4588      	cmp	r8, r1
 8002ad8:	d951      	bls.n	8002b7e <__udivmoddi4+0x336>
 8002ada:	1879      	adds	r1, r7, r1
 8002adc:	f109 3cff 	add.w	ip, r9, #4294967295
 8002ae0:	bf2c      	ite	cs
 8002ae2:	f04f 0a01 	movcs.w	sl, #1
 8002ae6:	f04f 0a00 	movcc.w	sl, #0
 8002aea:	4588      	cmp	r8, r1
 8002aec:	d902      	bls.n	8002af4 <__udivmoddi4+0x2ac>
 8002aee:	f1ba 0f00 	cmp.w	sl, #0
 8002af2:	d031      	beq.n	8002b58 <__udivmoddi4+0x310>
 8002af4:	eba1 0108 	sub.w	r1, r1, r8
 8002af8:	fbb1 f9fe 	udiv	r9, r1, lr
 8002afc:	fb09 f804 	mul.w	r8, r9, r4
 8002b00:	fb0e 1119 	mls	r1, lr, r9, r1
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002b0a:	4543      	cmp	r3, r8
 8002b0c:	d235      	bcs.n	8002b7a <__udivmoddi4+0x332>
 8002b0e:	18fb      	adds	r3, r7, r3
 8002b10:	f109 31ff 	add.w	r1, r9, #4294967295
 8002b14:	bf2c      	ite	cs
 8002b16:	f04f 0a01 	movcs.w	sl, #1
 8002b1a:	f04f 0a00 	movcc.w	sl, #0
 8002b1e:	4543      	cmp	r3, r8
 8002b20:	d2bb      	bcs.n	8002a9a <__udivmoddi4+0x252>
 8002b22:	f1ba 0f00 	cmp.w	sl, #0
 8002b26:	d1b8      	bne.n	8002a9a <__udivmoddi4+0x252>
 8002b28:	f1a9 0102 	sub.w	r1, r9, #2
 8002b2c:	443b      	add	r3, r7
 8002b2e:	e7b4      	b.n	8002a9a <__udivmoddi4+0x252>
 8002b30:	1a84      	subs	r4, r0, r2
 8002b32:	eb68 0203 	sbc.w	r2, r8, r3
 8002b36:	2001      	movs	r0, #1
 8002b38:	4696      	mov	lr, r2
 8002b3a:	e6eb      	b.n	8002914 <__udivmoddi4+0xcc>
 8002b3c:	443a      	add	r2, r7
 8002b3e:	f1a8 0802 	sub.w	r8, r8, #2
 8002b42:	e72b      	b.n	800299c <__udivmoddi4+0x154>
 8002b44:	f1ac 0c02 	sub.w	ip, ip, #2
 8002b48:	443b      	add	r3, r7
 8002b4a:	e710      	b.n	800296e <__udivmoddi4+0x126>
 8002b4c:	3902      	subs	r1, #2
 8002b4e:	443b      	add	r3, r7
 8002b50:	e6a9      	b.n	80028a6 <__udivmoddi4+0x5e>
 8002b52:	443a      	add	r2, r7
 8002b54:	3802      	subs	r0, #2
 8002b56:	e6be      	b.n	80028d6 <__udivmoddi4+0x8e>
 8002b58:	eba7 0808 	sub.w	r8, r7, r8
 8002b5c:	f1a9 0c02 	sub.w	ip, r9, #2
 8002b60:	4441      	add	r1, r8
 8002b62:	fbb1 f9fe 	udiv	r9, r1, lr
 8002b66:	fb09 f804 	mul.w	r8, r9, r4
 8002b6a:	e7c9      	b.n	8002b00 <__udivmoddi4+0x2b8>
 8002b6c:	f1ae 0e02 	sub.w	lr, lr, #2
 8002b70:	443c      	add	r4, r7
 8002b72:	e744      	b.n	80029fe <__udivmoddi4+0x1b6>
 8002b74:	3b02      	subs	r3, #2
 8002b76:	443c      	add	r4, r7
 8002b78:	e75e      	b.n	8002a38 <__udivmoddi4+0x1f0>
 8002b7a:	4649      	mov	r1, r9
 8002b7c:	e78d      	b.n	8002a9a <__udivmoddi4+0x252>
 8002b7e:	eba1 0108 	sub.w	r1, r1, r8
 8002b82:	46cc      	mov	ip, r9
 8002b84:	fbb1 f9fe 	udiv	r9, r1, lr
 8002b88:	fb09 f804 	mul.w	r8, r9, r4
 8002b8c:	e7b8      	b.n	8002b00 <__udivmoddi4+0x2b8>
 8002b8e:	bf00      	nop

08002b90 <__aeabi_idiv0>:
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop

08002b94 <send_command>:
/**
 * @brief Wysyła komendę "eszp_open" za pomocą funkcji szyfrującej oraz inkrementuje licznik
 * @return true jeśli transmisja zakończyła się sukcesem, false w przypadku błędu
 */
bool send_command(void)
{
 8002b94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b96:	b0a9      	sub	sp, #164	@ 0xa4
 8002b98:	af06      	add	r7, sp, #24
    // Bufory na zaszyfrowaną ramkę
    uint8_t secure_frame[MAX_FRAME_SIZE];
    size_t secure_frame_size = 0;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	603b      	str	r3, [r7, #0]

    printf("Przygotowuję komendę eszp_open z licznikiem: %02X %02X %02X %02X %02X %02X %02X %02X\r\n",
           global_counter[0], global_counter[1], global_counter[2], global_counter[3],
 8002b9e:	4b60      	ldr	r3, [pc, #384]	@ (8002d20 <send_command+0x18c>)
 8002ba0:	781b      	ldrb	r3, [r3, #0]
    printf("Przygotowuję komendę eszp_open z licznikiem: %02X %02X %02X %02X %02X %02X %02X %02X\r\n",
 8002ba2:	461d      	mov	r5, r3
           global_counter[0], global_counter[1], global_counter[2], global_counter[3],
 8002ba4:	4b5e      	ldr	r3, [pc, #376]	@ (8002d20 <send_command+0x18c>)
 8002ba6:	785b      	ldrb	r3, [r3, #1]
    printf("Przygotowuję komendę eszp_open z licznikiem: %02X %02X %02X %02X %02X %02X %02X %02X\r\n",
 8002ba8:	461e      	mov	r6, r3
           global_counter[0], global_counter[1], global_counter[2], global_counter[3],
 8002baa:	4b5d      	ldr	r3, [pc, #372]	@ (8002d20 <send_command+0x18c>)
 8002bac:	789b      	ldrb	r3, [r3, #2]
    printf("Przygotowuję komendę eszp_open z licznikiem: %02X %02X %02X %02X %02X %02X %02X %02X\r\n",
 8002bae:	469c      	mov	ip, r3
           global_counter[0], global_counter[1], global_counter[2], global_counter[3],
 8002bb0:	4b5b      	ldr	r3, [pc, #364]	@ (8002d20 <send_command+0x18c>)
 8002bb2:	78db      	ldrb	r3, [r3, #3]
    printf("Przygotowuję komendę eszp_open z licznikiem: %02X %02X %02X %02X %02X %02X %02X %02X\r\n",
 8002bb4:	461a      	mov	r2, r3
           global_counter[4], global_counter[5], global_counter[6], global_counter[7]);
 8002bb6:	4b5a      	ldr	r3, [pc, #360]	@ (8002d20 <send_command+0x18c>)
 8002bb8:	791b      	ldrb	r3, [r3, #4]
    printf("Przygotowuję komendę eszp_open z licznikiem: %02X %02X %02X %02X %02X %02X %02X %02X\r\n",
 8002bba:	4619      	mov	r1, r3
           global_counter[4], global_counter[5], global_counter[6], global_counter[7]);
 8002bbc:	4b58      	ldr	r3, [pc, #352]	@ (8002d20 <send_command+0x18c>)
 8002bbe:	795b      	ldrb	r3, [r3, #5]
    printf("Przygotowuję komendę eszp_open z licznikiem: %02X %02X %02X %02X %02X %02X %02X %02X\r\n",
 8002bc0:	4618      	mov	r0, r3
           global_counter[4], global_counter[5], global_counter[6], global_counter[7]);
 8002bc2:	4b57      	ldr	r3, [pc, #348]	@ (8002d20 <send_command+0x18c>)
 8002bc4:	799b      	ldrb	r3, [r3, #6]
    printf("Przygotowuję komendę eszp_open z licznikiem: %02X %02X %02X %02X %02X %02X %02X %02X\r\n",
 8002bc6:	461c      	mov	r4, r3
           global_counter[4], global_counter[5], global_counter[6], global_counter[7]);
 8002bc8:	4b55      	ldr	r3, [pc, #340]	@ (8002d20 <send_command+0x18c>)
 8002bca:	79db      	ldrb	r3, [r3, #7]
    printf("Przygotowuję komendę eszp_open z licznikiem: %02X %02X %02X %02X %02X %02X %02X %02X\r\n",
 8002bcc:	9304      	str	r3, [sp, #16]
 8002bce:	9403      	str	r4, [sp, #12]
 8002bd0:	9002      	str	r0, [sp, #8]
 8002bd2:	9101      	str	r1, [sp, #4]
 8002bd4:	9200      	str	r2, [sp, #0]
 8002bd6:	4663      	mov	r3, ip
 8002bd8:	4632      	mov	r2, r6
 8002bda:	4629      	mov	r1, r5
 8002bdc:	4851      	ldr	r0, [pc, #324]	@ (8002d24 <send_command+0x190>)
 8002bde:	f00d f85d 	bl	800fc9c <iprintf>

    // Utwórz bezpieczną ramkę z komendą "eszp_open"
    create_secure_command_frame(
 8002be2:	463b      	mov	r3, r7
 8002be4:	9305      	str	r3, [sp, #20]
 8002be6:	1d3b      	adds	r3, r7, #4
 8002be8:	9304      	str	r3, [sp, #16]
 8002bea:	2310      	movs	r3, #16
 8002bec:	9303      	str	r3, [sp, #12]
 8002bee:	4b4e      	ldr	r3, [pc, #312]	@ (8002d28 <send_command+0x194>)
 8002bf0:	9302      	str	r3, [sp, #8]
 8002bf2:	2320      	movs	r3, #32
 8002bf4:	9301      	str	r3, [sp, #4]
 8002bf6:	4b4d      	ldr	r3, [pc, #308]	@ (8002d2c <send_command+0x198>)
 8002bf8:	9300      	str	r3, [sp, #0]
 8002bfa:	2310      	movs	r3, #16
 8002bfc:	4a4c      	ldr	r2, [pc, #304]	@ (8002d30 <send_command+0x19c>)
 8002bfe:	4948      	ldr	r1, [pc, #288]	@ (8002d20 <send_command+0x18c>)
 8002c00:	484c      	ldr	r0, [pc, #304]	@ (8002d34 <send_command+0x1a0>)
 8002c02:	f000 fc25 	bl	8003450 <create_secure_command_frame>
        CRYPTO_IV, sizeof(CRYPTO_IV),              // Wektor inicjalizacyjny
        secure_frame, &secure_frame_size);

    // Inkrementuj licznik dla kolejnego użycia
    // Prostą inkrementacja - zaczynając od najmniej znaczącego bajtu
    int i = 7;
 8002c06:	2307      	movs	r3, #7
 8002c08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    while (i >= 0) {
 8002c0c:	e018      	b.n	8002c40 <send_command+0xac>
        global_counter[i]++;
 8002c0e:	4a44      	ldr	r2, [pc, #272]	@ (8002d20 <send_command+0x18c>)
 8002c10:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002c14:	4413      	add	r3, r2
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	3301      	adds	r3, #1
 8002c1a:	b2d9      	uxtb	r1, r3
 8002c1c:	4a40      	ldr	r2, [pc, #256]	@ (8002d20 <send_command+0x18c>)
 8002c1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002c22:	4413      	add	r3, r2
 8002c24:	460a      	mov	r2, r1
 8002c26:	701a      	strb	r2, [r3, #0]
        if (global_counter[i] != 0) break;  // Jeśli nie ma przepełnienia, zakończ
 8002c28:	4a3d      	ldr	r2, [pc, #244]	@ (8002d20 <send_command+0x18c>)
 8002c2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002c2e:	4413      	add	r3, r2
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d109      	bne.n	8002c4a <send_command+0xb6>
        i--;  // W przeciwnym wypadku kontynuuj inkrementację kolejnego bajtu
 8002c36:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    while (i >= 0) {
 8002c40:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	dae2      	bge.n	8002c0e <send_command+0x7a>
 8002c48:	e000      	b.n	8002c4c <send_command+0xb8>
        if (global_counter[i] != 0) break;  // Jeśli nie ma przepełnienia, zakończ
 8002c4a:	bf00      	nop
    }

    printf("Następna wartość licznika: %02X %02X %02X %02X %02X %02X %02X %02X\r\n",
           global_counter[0], global_counter[1], global_counter[2], global_counter[3],
 8002c4c:	4b34      	ldr	r3, [pc, #208]	@ (8002d20 <send_command+0x18c>)
 8002c4e:	781b      	ldrb	r3, [r3, #0]
    printf("Następna wartość licznika: %02X %02X %02X %02X %02X %02X %02X %02X\r\n",
 8002c50:	461d      	mov	r5, r3
           global_counter[0], global_counter[1], global_counter[2], global_counter[3],
 8002c52:	4b33      	ldr	r3, [pc, #204]	@ (8002d20 <send_command+0x18c>)
 8002c54:	785b      	ldrb	r3, [r3, #1]
    printf("Następna wartość licznika: %02X %02X %02X %02X %02X %02X %02X %02X\r\n",
 8002c56:	461e      	mov	r6, r3
           global_counter[0], global_counter[1], global_counter[2], global_counter[3],
 8002c58:	4b31      	ldr	r3, [pc, #196]	@ (8002d20 <send_command+0x18c>)
 8002c5a:	789b      	ldrb	r3, [r3, #2]
    printf("Następna wartość licznika: %02X %02X %02X %02X %02X %02X %02X %02X\r\n",
 8002c5c:	469c      	mov	ip, r3
           global_counter[0], global_counter[1], global_counter[2], global_counter[3],
 8002c5e:	4b30      	ldr	r3, [pc, #192]	@ (8002d20 <send_command+0x18c>)
 8002c60:	78db      	ldrb	r3, [r3, #3]
    printf("Następna wartość licznika: %02X %02X %02X %02X %02X %02X %02X %02X\r\n",
 8002c62:	461a      	mov	r2, r3
           global_counter[4], global_counter[5], global_counter[6], global_counter[7]);
 8002c64:	4b2e      	ldr	r3, [pc, #184]	@ (8002d20 <send_command+0x18c>)
 8002c66:	791b      	ldrb	r3, [r3, #4]
    printf("Następna wartość licznika: %02X %02X %02X %02X %02X %02X %02X %02X\r\n",
 8002c68:	4619      	mov	r1, r3
           global_counter[4], global_counter[5], global_counter[6], global_counter[7]);
 8002c6a:	4b2d      	ldr	r3, [pc, #180]	@ (8002d20 <send_command+0x18c>)
 8002c6c:	795b      	ldrb	r3, [r3, #5]
    printf("Następna wartość licznika: %02X %02X %02X %02X %02X %02X %02X %02X\r\n",
 8002c6e:	4618      	mov	r0, r3
           global_counter[4], global_counter[5], global_counter[6], global_counter[7]);
 8002c70:	4b2b      	ldr	r3, [pc, #172]	@ (8002d20 <send_command+0x18c>)
 8002c72:	799b      	ldrb	r3, [r3, #6]
    printf("Następna wartość licznika: %02X %02X %02X %02X %02X %02X %02X %02X\r\n",
 8002c74:	461c      	mov	r4, r3
           global_counter[4], global_counter[5], global_counter[6], global_counter[7]);
 8002c76:	4b2a      	ldr	r3, [pc, #168]	@ (8002d20 <send_command+0x18c>)
 8002c78:	79db      	ldrb	r3, [r3, #7]
    printf("Następna wartość licznika: %02X %02X %02X %02X %02X %02X %02X %02X\r\n",
 8002c7a:	9304      	str	r3, [sp, #16]
 8002c7c:	9403      	str	r4, [sp, #12]
 8002c7e:	9002      	str	r0, [sp, #8]
 8002c80:	9101      	str	r1, [sp, #4]
 8002c82:	9200      	str	r2, [sp, #0]
 8002c84:	4663      	mov	r3, ip
 8002c86:	4632      	mov	r2, r6
 8002c88:	4629      	mov	r1, r5
 8002c8a:	482b      	ldr	r0, [pc, #172]	@ (8002d38 <send_command+0x1a4>)
 8002c8c:	f00d f806 	bl	800fc9c <iprintf>

    // Wyślij przygotowaną ramkę jako surowe bajty
    printf("Rozpoczynam transmisję ramki o rozmiarze: %u bajtów\r\n", (unsigned)secure_frame_size);
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	4619      	mov	r1, r3
 8002c94:	4829      	ldr	r0, [pc, #164]	@ (8002d3c <send_command+0x1a8>)
 8002c96:	f00d f801 	bl	800fc9c <iprintf>

    // Ustaw flagi transmisji
    transmission_complete = false;
 8002c9a:	4b29      	ldr	r3, [pc, #164]	@ (8002d40 <send_command+0x1ac>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	701a      	strb	r2, [r3, #0]
    transmission_timed_out = false;
 8002ca0:	4b28      	ldr	r3, [pc, #160]	@ (8002d44 <send_command+0x1b0>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	701a      	strb	r2, [r3, #0]
    State = TX;
 8002ca6:	4b28      	ldr	r3, [pc, #160]	@ (8002d48 <send_command+0x1b4>)
 8002ca8:	2205      	movs	r2, #5
 8002caa:	701a      	strb	r2, [r3, #0]

    // Wyślij ramkę danych
    Radio.Send(secure_frame, secure_frame_size);
 8002cac:	4b27      	ldr	r3, [pc, #156]	@ (8002d4c <send_command+0x1b8>)
 8002cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cb0:	683a      	ldr	r2, [r7, #0]
 8002cb2:	b2d1      	uxtb	r1, r2
 8002cb4:	1d3a      	adds	r2, r7, #4
 8002cb6:	4610      	mov	r0, r2
 8002cb8:	4798      	blx	r3

    // Czekaj na zakończenie transmisji
    printf("Czekam na zakończenie transmisji...\r\n");
 8002cba:	4825      	ldr	r0, [pc, #148]	@ (8002d50 <send_command+0x1bc>)
 8002cbc:	f00d f856 	bl	800fd6c <puts>
    while (!transmission_complete && !transmission_timed_out)
 8002cc0:	e002      	b.n	8002cc8 <send_command+0x134>
    {
        DelayMs(10);
 8002cc2:	200a      	movs	r0, #10
 8002cc4:	f008 fa84 	bl	800b1d0 <DelayMs>
    while (!transmission_complete && !transmission_timed_out)
 8002cc8:	4b1d      	ldr	r3, [pc, #116]	@ (8002d40 <send_command+0x1ac>)
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	f083 0301 	eor.w	r3, r3, #1
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d007      	beq.n	8002ce8 <send_command+0x154>
 8002cd8:	4b1a      	ldr	r3, [pc, #104]	@ (8002d44 <send_command+0x1b0>)
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	f083 0301 	eor.w	r3, r3, #1
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d1ec      	bne.n	8002cc2 <send_command+0x12e>
    }

    // Sprawdź status transmisji
    if (transmission_timed_out) {
 8002ce8:	4b16      	ldr	r3, [pc, #88]	@ (8002d44 <send_command+0x1b0>)
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d004      	beq.n	8002cfc <send_command+0x168>
        printf("Transmisja zakończona timeoutem.\r\n");
 8002cf2:	4818      	ldr	r0, [pc, #96]	@ (8002d54 <send_command+0x1c0>)
 8002cf4:	f00d f83a 	bl	800fd6c <puts>
        return false;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	e00d      	b.n	8002d18 <send_command+0x184>
    } else if (transmission_complete) {
 8002cfc:	4b10      	ldr	r3, [pc, #64]	@ (8002d40 <send_command+0x1ac>)
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d004      	beq.n	8002d10 <send_command+0x17c>
        printf("Transmisja zakończona sukcesem (TX Done).\r\n");
 8002d06:	4814      	ldr	r0, [pc, #80]	@ (8002d58 <send_command+0x1c4>)
 8002d08:	f00d f830 	bl	800fd6c <puts>
        return true;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e003      	b.n	8002d18 <send_command+0x184>
    } else {
        printf("Nieznany stan transmisji.\r\n");
 8002d10:	4812      	ldr	r0, [pc, #72]	@ (8002d5c <send_command+0x1c8>)
 8002d12:	f00d f82b 	bl	800fd6c <puts>
        return false;
 8002d16:	2300      	movs	r3, #0
    }
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	378c      	adds	r7, #140	@ 0x8c
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d20:	20000004 	.word	0x20000004
 8002d24:	08013908 	.word	0x08013908
 8002d28:	080145d0 	.word	0x080145d0
 8002d2c:	080145b0 	.word	0x080145b0
 8002d30:	080145a0 	.word	0x080145a0
 8002d34:	08014598 	.word	0x08014598
 8002d38:	08013964 	.word	0x08013964
 8002d3c:	080139ac 	.word	0x080139ac
 8002d40:	20000260 	.word	0x20000260
 8002d44:	20000261 	.word	0x20000261
 8002d48:	20000215 	.word	0x20000215
 8002d4c:	080146f8 	.word	0x080146f8
 8002d50:	080139e4 	.word	0x080139e4
 8002d54:	08013a0c 	.word	0x08013a0c
 8002d58:	08013a30 	.word	0x08013a30
 8002d5c:	08013a5c 	.word	0x08013a5c

08002d60 <app_main>:


/** * Main application entry point.
 */
void app_main( void )
{
 8002d60:	b590      	push	{r4, r7, lr}
 8002d62:	b08d      	sub	sp, #52	@ 0x34
 8002d64:	af0a      	add	r7, sp, #40	@ 0x28
    bool tx_success;

    // Target board initialisation
    BoardInitMcu( );
 8002d66:	f008 fa0b 	bl	800b180 <BoardInitMcu>
    BoardInitPeriph( );
 8002d6a:	f008 f9d3 	bl	800b114 <BoardInitPeriph>

    // Radio initialization
    RadioEvents.TxDone = OnTxDone;
 8002d6e:	4b38      	ldr	r3, [pc, #224]	@ (8002e50 <app_main+0xf0>)
 8002d70:	4a38      	ldr	r2, [pc, #224]	@ (8002e54 <app_main+0xf4>)
 8002d72:	601a      	str	r2, [r3, #0]
    RadioEvents.RxDone = OnRxDone;
 8002d74:	4b36      	ldr	r3, [pc, #216]	@ (8002e50 <app_main+0xf0>)
 8002d76:	4a38      	ldr	r2, [pc, #224]	@ (8002e58 <app_main+0xf8>)
 8002d78:	609a      	str	r2, [r3, #8]
    RadioEvents.TxTimeout = OnTxTimeout;
 8002d7a:	4b35      	ldr	r3, [pc, #212]	@ (8002e50 <app_main+0xf0>)
 8002d7c:	4a37      	ldr	r2, [pc, #220]	@ (8002e5c <app_main+0xfc>)
 8002d7e:	605a      	str	r2, [r3, #4]
    RadioEvents.RxTimeout = OnRxTimeout;
 8002d80:	4b33      	ldr	r3, [pc, #204]	@ (8002e50 <app_main+0xf0>)
 8002d82:	4a37      	ldr	r2, [pc, #220]	@ (8002e60 <app_main+0x100>)
 8002d84:	60da      	str	r2, [r3, #12]
    RadioEvents.RxError = OnRxError;
 8002d86:	4b32      	ldr	r3, [pc, #200]	@ (8002e50 <app_main+0xf0>)
 8002d88:	4a36      	ldr	r2, [pc, #216]	@ (8002e64 <app_main+0x104>)
 8002d8a:	611a      	str	r2, [r3, #16]

    Radio.Init( &RadioEvents );
 8002d8c:	4b36      	ldr	r3, [pc, #216]	@ (8002e68 <app_main+0x108>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	482f      	ldr	r0, [pc, #188]	@ (8002e50 <app_main+0xf0>)
 8002d92:	4798      	blx	r3

    Radio.SetChannel( RF_FREQUENCY );
 8002d94:	4b34      	ldr	r3, [pc, #208]	@ (8002e68 <app_main+0x108>)
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	4834      	ldr	r0, [pc, #208]	@ (8002e6c <app_main+0x10c>)
 8002d9a:	4798      	blx	r3
                                   LORA_SYMBOL_TIMEOUT, LORA_FIX_LENGTH_PAYLOAD_ON,
                                   0, true, 0, 0, LORA_IQ_INVERSION_ON, true );

#elif defined( USE_MODEM_FSK )

    Radio.SetTxConfig(  MODEM_FSK,						/* Radio modem to be used [0: FSK, 1: LoRa] */
 8002d9c:	4b32      	ldr	r3, [pc, #200]	@ (8002e68 <app_main+0x108>)
 8002d9e:	69dc      	ldr	r4, [r3, #28]
 8002da0:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8002da4:	9308      	str	r3, [sp, #32]
 8002da6:	2300      	movs	r3, #0
 8002da8:	9307      	str	r3, [sp, #28]
 8002daa:	2300      	movs	r3, #0
 8002dac:	9306      	str	r3, [sp, #24]
 8002dae:	2300      	movs	r3, #0
 8002db0:	9305      	str	r3, [sp, #20]
 8002db2:	2301      	movs	r3, #1
 8002db4:	9304      	str	r3, [sp, #16]
 8002db6:	2300      	movs	r3, #0
 8002db8:	9303      	str	r3, [sp, #12]
 8002dba:	2305      	movs	r3, #5
 8002dbc:	9302      	str	r3, [sp, #8]
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	9301      	str	r3, [sp, #4]
 8002dc2:	f24c 3350 	movw	r3, #50000	@ 0xc350
 8002dc6:	9300      	str	r3, [sp, #0]
 8002dc8:	2300      	movs	r3, #0
 8002dca:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8002dce:	2100      	movs	r1, #0
 8002dd0:	2000      	movs	r0, #0
 8002dd2:	47a0      	blx	r4
						0,								/* Inverts IQ signals (LoRa only). FSK: N/A ( set to 0 ) */
						3000							/* Transmission timeout [ms] */
	);

    // Konfiguracja RX nie jest ściśle potrzebna do samego wysyłania
    Radio.SetRxConfig(  MODEM_FSK,						/* Radio modem to be used [0: FSK, 1: LoRa] */
 8002dd4:	4b24      	ldr	r3, [pc, #144]	@ (8002e68 <app_main+0x108>)
 8002dd6:	699c      	ldr	r4, [r3, #24]
 8002dd8:	2300      	movs	r3, #0
 8002dda:	9309      	str	r3, [sp, #36]	@ 0x24
 8002ddc:	2300      	movs	r3, #0
 8002dde:	9308      	str	r3, [sp, #32]
 8002de0:	2300      	movs	r3, #0
 8002de2:	9307      	str	r3, [sp, #28]
 8002de4:	2300      	movs	r3, #0
 8002de6:	9306      	str	r3, [sp, #24]
 8002de8:	2301      	movs	r3, #1
 8002dea:	9305      	str	r3, [sp, #20]
 8002dec:	2300      	movs	r3, #0
 8002dee:	9304      	str	r3, [sp, #16]
 8002df0:	2300      	movs	r3, #0
 8002df2:	9303      	str	r3, [sp, #12]
 8002df4:	2300      	movs	r3, #0
 8002df6:	9302      	str	r3, [sp, #8]
 8002df8:	2305      	movs	r3, #5
 8002dfa:	9301      	str	r3, [sp, #4]
 8002dfc:	4b1c      	ldr	r3, [pc, #112]	@ (8002e70 <app_main+0x110>)
 8002dfe:	9300      	str	r3, [sp, #0]
 8002e00:	2300      	movs	r3, #0
 8002e02:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8002e06:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8002e0a:	2000      	movs	r0, #0
 8002e0c:	47a0      	blx	r4

#else
    #error "Please define a frequency band in the compiler options."
#endif

    tx_success = send_command();
 8002e0e:	f7ff fec1 	bl	8002b94 <send_command>
 8002e12:	4603      	mov	r3, r0
 8002e14:	71fb      	strb	r3, [r7, #7]


    printf("Single transmission attempt finished. Result: %s\r\n", tx_success ? "Success" : "Fail/Timeout");
 8002e16:	79fb      	ldrb	r3, [r7, #7]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d001      	beq.n	8002e20 <app_main+0xc0>
 8002e1c:	4b15      	ldr	r3, [pc, #84]	@ (8002e74 <app_main+0x114>)
 8002e1e:	e000      	b.n	8002e22 <app_main+0xc2>
 8002e20:	4b15      	ldr	r3, [pc, #84]	@ (8002e78 <app_main+0x118>)
 8002e22:	4619      	mov	r1, r3
 8002e24:	4815      	ldr	r0, [pc, #84]	@ (8002e7c <app_main+0x11c>)
 8002e26:	f00c ff39 	bl	800fc9c <iprintf>

    Radio.Sleep();
 8002e2a:	4b0f      	ldr	r3, [pc, #60]	@ (8002e68 <app_main+0x108>)
 8002e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e2e:	4798      	blx	r3
    State = LOWPOWER;
 8002e30:	4b13      	ldr	r3, [pc, #76]	@ (8002e80 <app_main+0x120>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	701a      	strb	r2, [r3, #0]
    printf("Radio sleeping\r\n");
 8002e36:	4813      	ldr	r0, [pc, #76]	@ (8002e84 <app_main+0x124>)
 8002e38:	f00c ff98 	bl	800fd6c <puts>
    DelayMs(100);
 8002e3c:	2064      	movs	r0, #100	@ 0x64
 8002e3e:	f008 f9c7 	bl	800b1d0 <DelayMs>
    printf("Back\r\n");
 8002e42:	4811      	ldr	r0, [pc, #68]	@ (8002e88 <app_main+0x128>)
 8002e44:	f00c ff92 	bl	800fd6c <puts>

}
 8002e48:	bf00      	nop
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd90      	pop	{r4, r7, pc}
 8002e50:	20000264 	.word	0x20000264
 8002e54:	08002f05 	.word	0x08002f05
 8002e58:	08002e8d 	.word	0x08002e8d
 8002e5c:	08002f45 	.word	0x08002f45
 8002e60:	08002f8d 	.word	0x08002f8d
 8002e64:	08002fb9 	.word	0x08002fb9
 8002e68:	080146f8 	.word	0x080146f8
 8002e6c:	33bfae40 	.word	0x33bfae40
 8002e70:	00014585 	.word	0x00014585
 8002e74:	08013b4c 	.word	0x08013b4c
 8002e78:	08013b54 	.word	0x08013b54
 8002e7c:	08013b64 	.word	0x08013b64
 8002e80:	20000215 	.word	0x20000215
 8002e84:	08013b98 	.word	0x08013b98
 8002e88:	08013ba8 	.word	0x08013ba8

08002e8c <OnRxDone>:
}



void OnRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	4608      	mov	r0, r1
 8002e96:	4611      	mov	r1, r2
 8002e98:	461a      	mov	r2, r3
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	817b      	strh	r3, [r7, #10]
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	813b      	strh	r3, [r7, #8]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	71fb      	strb	r3, [r7, #7]
    BufferSize = size;
 8002ea6:	4a10      	ldr	r2, [pc, #64]	@ (8002ee8 <OnRxDone+0x5c>)
 8002ea8:	897b      	ldrh	r3, [r7, #10]
 8002eaa:	8013      	strh	r3, [r2, #0]
    memcpy( Buffer, payload, BufferSize );
 8002eac:	4b0e      	ldr	r3, [pc, #56]	@ (8002ee8 <OnRxDone+0x5c>)
 8002eae:	881b      	ldrh	r3, [r3, #0]
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	68f9      	ldr	r1, [r7, #12]
 8002eb4:	480d      	ldr	r0, [pc, #52]	@ (8002eec <OnRxDone+0x60>)
 8002eb6:	f00d f8fd 	bl	80100b4 <memcpy>
    RssiValue = rssi;
 8002eba:	893b      	ldrh	r3, [r7, #8]
 8002ebc:	b25a      	sxtb	r2, r3
 8002ebe:	4b0c      	ldr	r3, [pc, #48]	@ (8002ef0 <OnRxDone+0x64>)
 8002ec0:	701a      	strb	r2, [r3, #0]
    SnrValue = snr;
 8002ec2:	4a0c      	ldr	r2, [pc, #48]	@ (8002ef4 <OnRxDone+0x68>)
 8002ec4:	79fb      	ldrb	r3, [r7, #7]
 8002ec6:	7013      	strb	r3, [r2, #0]
    State = RX_DONE;
 8002ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ef8 <OnRxDone+0x6c>)
 8002eca:	2202      	movs	r2, #2
 8002ecc:	701a      	strb	r2, [r3, #0]
    trx_events_cnt.rxdone++;
 8002ece:	4b0b      	ldr	r3, [pc, #44]	@ (8002efc <OnRxDone+0x70>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	4a09      	ldr	r2, [pc, #36]	@ (8002efc <OnRxDone+0x70>)
 8002ed6:	6013      	str	r3, [r2, #0]
    printf("Callback: OnRxDone executed (unexpected in TX-only mode).\r\n");
 8002ed8:	4809      	ldr	r0, [pc, #36]	@ (8002f00 <OnRxDone+0x74>)
 8002eda:	f00c ff47 	bl	800fd6c <puts>
}
 8002ede:	bf00      	nop
 8002ee0:	3710      	adds	r7, #16
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	20000000 	.word	0x20000000
 8002eec:	20000218 	.word	0x20000218
 8002ef0:	20000216 	.word	0x20000216
 8002ef4:	20000217 	.word	0x20000217
 8002ef8:	20000215 	.word	0x20000215
 8002efc:	2000024c 	.word	0x2000024c
 8002f00:	08013c38 	.word	0x08013c38

08002f04 <OnTxDone>:

void OnTxDone( void )
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	af00      	add	r7, sp, #0
    printf(">>> OnTxDone ENTERED! <<<\r\n"); // Dodaj to
 8002f08:	4809      	ldr	r0, [pc, #36]	@ (8002f30 <OnTxDone+0x2c>)
 8002f0a:	f00c ff2f 	bl	800fd6c <puts>
    State = LOWPOWER;
 8002f0e:	4b09      	ldr	r3, [pc, #36]	@ (8002f34 <OnTxDone+0x30>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	701a      	strb	r2, [r3, #0]
    trx_events_cnt.txdone++;
 8002f14:	4b08      	ldr	r3, [pc, #32]	@ (8002f38 <OnTxDone+0x34>)
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	3301      	adds	r3, #1
 8002f1a:	4a07      	ldr	r2, [pc, #28]	@ (8002f38 <OnTxDone+0x34>)
 8002f1c:	60d3      	str	r3, [r2, #12]
    transmission_complete = true;
 8002f1e:	4b07      	ldr	r3, [pc, #28]	@ (8002f3c <OnTxDone+0x38>)
 8002f20:	2201      	movs	r2, #1
 8002f22:	701a      	strb	r2, [r3, #0]
    printf("Callback: OnTxDone executed.\r\n");
 8002f24:	4806      	ldr	r0, [pc, #24]	@ (8002f40 <OnTxDone+0x3c>)
 8002f26:	f00c ff21 	bl	800fd6c <puts>
}
 8002f2a:	bf00      	nop
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	08013c74 	.word	0x08013c74
 8002f34:	20000215 	.word	0x20000215
 8002f38:	2000024c 	.word	0x2000024c
 8002f3c:	20000260 	.word	0x20000260
 8002f40:	08013c90 	.word	0x08013c90

08002f44 <OnTxTimeout>:

void OnTxTimeout( void )
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	af00      	add	r7, sp, #0
    printf(">>> OnTxTimeout ENTERED! <<<\r\n"); // Dodaj to
 8002f48:	480a      	ldr	r0, [pc, #40]	@ (8002f74 <OnTxTimeout+0x30>)
 8002f4a:	f00c ff0f 	bl	800fd6c <puts>
    Radio.Sleep( );
 8002f4e:	4b0a      	ldr	r3, [pc, #40]	@ (8002f78 <OnTxTimeout+0x34>)
 8002f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f52:	4798      	blx	r3
    State = TX_TIMEOUT;
 8002f54:	4b09      	ldr	r3, [pc, #36]	@ (8002f7c <OnTxTimeout+0x38>)
 8002f56:	2206      	movs	r2, #6
 8002f58:	701a      	strb	r2, [r3, #0]
    trx_events_cnt.txtimeout++;
 8002f5a:	4b09      	ldr	r3, [pc, #36]	@ (8002f80 <OnTxTimeout+0x3c>)
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	3301      	adds	r3, #1
 8002f60:	4a07      	ldr	r2, [pc, #28]	@ (8002f80 <OnTxTimeout+0x3c>)
 8002f62:	6113      	str	r3, [r2, #16]
    transmission_timed_out = true;
 8002f64:	4b07      	ldr	r3, [pc, #28]	@ (8002f84 <OnTxTimeout+0x40>)
 8002f66:	2201      	movs	r2, #1
 8002f68:	701a      	strb	r2, [r3, #0]
    printf("Callback: OnTxTimeout executed.\r\n");
 8002f6a:	4807      	ldr	r0, [pc, #28]	@ (8002f88 <OnTxTimeout+0x44>)
 8002f6c:	f00c fefe 	bl	800fd6c <puts>
}
 8002f70:	bf00      	nop
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	08013cb0 	.word	0x08013cb0
 8002f78:	080146f8 	.word	0x080146f8
 8002f7c:	20000215 	.word	0x20000215
 8002f80:	2000024c 	.word	0x2000024c
 8002f84:	20000261 	.word	0x20000261
 8002f88:	08013cd0 	.word	0x08013cd0

08002f8c <OnRxTimeout>:

void OnRxTimeout( void )
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
    State = RX_TIMEOUT;
 8002f90:	4b06      	ldr	r3, [pc, #24]	@ (8002fac <OnRxTimeout+0x20>)
 8002f92:	2203      	movs	r2, #3
 8002f94:	701a      	strb	r2, [r3, #0]
    trx_events_cnt.rxtimeout++;
 8002f96:	4b06      	ldr	r3, [pc, #24]	@ (8002fb0 <OnRxTimeout+0x24>)
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	4a04      	ldr	r2, [pc, #16]	@ (8002fb0 <OnRxTimeout+0x24>)
 8002f9e:	6053      	str	r3, [r2, #4]
    printf("Callback: OnRxTimeout executed (unexpected in TX-only mode).\r\n");
 8002fa0:	4804      	ldr	r0, [pc, #16]	@ (8002fb4 <OnRxTimeout+0x28>)
 8002fa2:	f00c fee3 	bl	800fd6c <puts>
}
 8002fa6:	bf00      	nop
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	20000215 	.word	0x20000215
 8002fb0:	2000024c 	.word	0x2000024c
 8002fb4:	08013cf4 	.word	0x08013cf4

08002fb8 <OnRxError>:

void OnRxError( void )
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	af00      	add	r7, sp, #0
    State = RX_ERROR;
 8002fbc:	4b08      	ldr	r3, [pc, #32]	@ (8002fe0 <OnRxError+0x28>)
 8002fbe:	2204      	movs	r2, #4
 8002fc0:	701a      	strb	r2, [r3, #0]
    trx_events_cnt.rxerror++;
 8002fc2:	4b08      	ldr	r3, [pc, #32]	@ (8002fe4 <OnRxError+0x2c>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	4a06      	ldr	r2, [pc, #24]	@ (8002fe4 <OnRxError+0x2c>)
 8002fca:	6093      	str	r3, [r2, #8]
    Radio.Rx(0);
 8002fcc:	4b06      	ldr	r3, [pc, #24]	@ (8002fe8 <OnRxError+0x30>)
 8002fce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fd0:	2000      	movs	r0, #0
 8002fd2:	4798      	blx	r3
    printf("Callback: OnRxError executed (unexpected in TX-only mode).\r\n");
 8002fd4:	4805      	ldr	r0, [pc, #20]	@ (8002fec <OnRxError+0x34>)
 8002fd6:	f00c fec9 	bl	800fd6c <puts>
}
 8002fda:	bf00      	nop
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	20000215 	.word	0x20000215
 8002fe4:	2000024c 	.word	0x2000024c
 8002fe8:	080146f8 	.word	0x080146f8
 8002fec:	08013d34 	.word	0x08013d34

08002ff0 <cmox_ll_init>:
  * @brief          CMOX library low level initialization
  * @param          pArg User defined parameter that is transmitted from initialize service
  * @retval         Initialization status: @ref CMOX_INIT_SUCCESS / @ref CMOX_INIT_FAIL
  */
cmox_init_retval_t cmox_ll_init(void *pArg)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  (void)pArg;
  /* Ensure CRC is enabled for cryptographic processing */
  __HAL_RCC_CRC_RELEASE_RESET();
 8002ff8:	4b0d      	ldr	r3, [pc, #52]	@ (8003030 <cmox_ll_init+0x40>)
 8002ffa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ffc:	4a0c      	ldr	r2, [pc, #48]	@ (8003030 <cmox_ll_init+0x40>)
 8002ffe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003002:	6613      	str	r3, [r2, #96]	@ 0x60
  __HAL_RCC_CRC_CLK_ENABLE();
 8003004:	4b0a      	ldr	r3, [pc, #40]	@ (8003030 <cmox_ll_init+0x40>)
 8003006:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800300a:	4a09      	ldr	r2, [pc, #36]	@ (8003030 <cmox_ll_init+0x40>)
 800300c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003010:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8003014:	4b06      	ldr	r3, [pc, #24]	@ (8003030 <cmox_ll_init+0x40>)
 8003016:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800301a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800301e:	60fb      	str	r3, [r7, #12]
 8003020:	68fb      	ldr	r3, [r7, #12]
  return CMOX_INIT_SUCCESS;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	3714      	adds	r7, #20
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr
 8003030:	46020c00 	.word	0x46020c00

08003034 <cmox_ll_deInit>:
  * @brief          CMOX library low level de-initialization
  * @param          pArg User defined parameter that is transmitted from finalize service
  * @retval         De-initialization status: @ref CMOX_INIT_SUCCESS / @ref CMOX_INIT_FAIL
  */
cmox_init_retval_t cmox_ll_deInit(void *pArg)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  (void)pArg;
  /* Do not turn off CRC to avoid side effect on other SW parts using it */
  return CMOX_INIT_SUCCESS;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	370c      	adds	r7, #12
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
	...

0800304c <btox>:
#include "config.h"  // Dodane odwołanie do pliku konfiguracyjnego
#include "cmox_crypto.h"  // Główny plik nagłówkowy biblioteki kryptograficznej

/* Function to convert binary to hex string */
void btox(uint8_t *hexbuf, const uint8_t *binbuf, int n)
{
 800304c:	b4b0      	push	{r4, r5, r7}
 800304e:	b08b      	sub	sp, #44	@ 0x2c
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	607a      	str	r2, [r7, #4]
    n *= 2;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	005b      	lsls	r3, r3, #1
 800305c:	607b      	str	r3, [r7, #4]
    hexbuf[n] = 0x00;       // string null termination
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	68fa      	ldr	r2, [r7, #12]
 8003062:	4413      	add	r3, r2
 8003064:	2200      	movs	r2, #0
 8003066:	701a      	strb	r2, [r3, #0]
    const char hex[]= "0123456789abcdef";
 8003068:	4b17      	ldr	r3, [pc, #92]	@ (80030c8 <btox+0x7c>)
 800306a:	f107 0414 	add.w	r4, r7, #20
 800306e:	461d      	mov	r5, r3
 8003070:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003072:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003074:	682b      	ldr	r3, [r5, #0]
 8003076:	7023      	strb	r3, [r4, #0]
    while (--n >= 0)
 8003078:	e01a      	b.n	80030b0 <btox+0x64>
        hexbuf[n] = hex[(binbuf[n>>1] >> ((1 - (n&1)) << 2)) & 0xF];
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	105b      	asrs	r3, r3, #1
 800307e:	461a      	mov	r2, r3
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	4413      	add	r3, r2
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	461a      	mov	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <btox+0x4a>
 8003092:	2304      	movs	r3, #4
 8003094:	e000      	b.n	8003098 <btox+0x4c>
 8003096:	2300      	movs	r3, #0
 8003098:	fa42 f303 	asr.w	r3, r2, r3
 800309c:	f003 020f 	and.w	r2, r3, #15
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	68f9      	ldr	r1, [r7, #12]
 80030a4:	440b      	add	r3, r1
 80030a6:	3228      	adds	r2, #40	@ 0x28
 80030a8:	443a      	add	r2, r7
 80030aa:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80030ae:	701a      	strb	r2, [r3, #0]
    while (--n >= 0)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	3b01      	subs	r3, #1
 80030b4:	607b      	str	r3, [r7, #4]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	dade      	bge.n	800307a <btox+0x2e>
}
 80030bc:	bf00      	nop
 80030be:	bf00      	nop
 80030c0:	372c      	adds	r7, #44	@ 0x2c
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bcb0      	pop	{r4, r5, r7}
 80030c6:	4770      	bx	lr
 80030c8:	08013d70 	.word	0x08013d70

080030cc <validate_and_process_command>:
                                   const uint8_t *aes_key, size_t aes_key_size,
                                   const uint8_t *hmac_key, size_t hmac_key_size,
                                   const uint8_t *iv, size_t iv_size,
                                   uint8_t *output_pilot_id, uint8_t *output_counter,
                                   uint8_t *output_command, size_t *output_command_size)
{
 80030cc:	b5b0      	push	{r4, r5, r7, lr}
 80030ce:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 80030d2:	af06      	add	r7, sp, #24
 80030d4:	f507 741c 	add.w	r4, r7, #624	@ 0x270
 80030d8:	f5a4 7419 	sub.w	r4, r4, #612	@ 0x264
 80030dc:	6020      	str	r0, [r4, #0]
 80030de:	f507 701c 	add.w	r0, r7, #624	@ 0x270
 80030e2:	f5a0 701a 	sub.w	r0, r0, #616	@ 0x268
 80030e6:	6001      	str	r1, [r0, #0]
 80030e8:	f507 711c 	add.w	r1, r7, #624	@ 0x270
 80030ec:	f5a1 711b 	sub.w	r1, r1, #620	@ 0x26c
 80030f0:	600a      	str	r2, [r1, #0]
 80030f2:	f507 721c 	add.w	r2, r7, #624	@ 0x270
 80030f6:	f5a2 721c 	sub.w	r2, r2, #624	@ 0x270
 80030fa:	6013      	str	r3, [r2, #0]
    cmox_cipher_retval_t cipher_retval;
    cmox_mac_retval_t mac_retval;
    size_t computed_size;
    uint8_t result = 0; // 0 = błąd, 1 = sukces
 80030fc:	2300      	movs	r3, #0
 80030fe:	f887 326f 	strb.w	r3, [r7, #623]	@ 0x26f
    uint8_t computed_hmac[CMOX_SHA256_SIZE];               // Bufor na obliczony HMAC
    uint8_t decrypted_frame[MAX_FRAME_SIZE];               // Bufor na odszyfrowaną ramkę
    uint8_t buffer[MAX_FRAME_SIZE*2];                      // Bufor pomocniczy na wydruk hex
    size_t computed_hmac_size;

    printf("\n\r===== Walidacja i przetwarzanie odebranej ramki =====\n\r");
 8003102:	48bf      	ldr	r0, [pc, #764]	@ (8003400 <validate_and_process_command+0x334>)
 8003104:	f00c fdca 	bl	800fc9c <iprintf>

    /* Sprawdź minimalny rozmiar danych */
    if (data_size < (16 + CMOX_SHA256_SIZE)) { // 16 bajtów data + HMAC
 8003108:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800310c:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2b2f      	cmp	r3, #47	@ 0x2f
 8003114:	d804      	bhi.n	8003120 <validate_and_process_command+0x54>
        printf("Błąd: Otrzymano zbyt mało danych!\n\r");
 8003116:	48bb      	ldr	r0, [pc, #748]	@ (8003404 <validate_and_process_command+0x338>)
 8003118:	f00c fdc0 	bl	800fc9c <iprintf>
        return 0;
 800311c:	2300      	movs	r3, #0
 800311e:	e16a      	b.n	80033f6 <validate_and_process_command+0x32a>
    }

    /* Rozdziel dane na zaszyfrowaną ramkę i HMAC */
    size_t encrypted_size = data_size - CMOX_SHA256_SIZE;
 8003120:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8003124:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	3b20      	subs	r3, #32
 800312c:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
    memcpy(encrypted_frame, received_data, encrypted_size);
 8003130:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8003134:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8003138:	f507 70ec 	add.w	r0, r7, #472	@ 0x1d8
 800313c:	f8d7 2268 	ldr.w	r2, [r7, #616]	@ 0x268
 8003140:	6819      	ldr	r1, [r3, #0]
 8003142:	f00c ffb7 	bl	80100b4 <memcpy>
    memcpy(received_hmac, received_data + encrypted_size, CMOX_SHA256_SIZE);
 8003146:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800314a:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 8003154:	4413      	add	r3, r2
 8003156:	f507 74dc 	add.w	r4, r7, #440	@ 0x1b8
 800315a:	461d      	mov	r5, r3
 800315c:	6828      	ldr	r0, [r5, #0]
 800315e:	6869      	ldr	r1, [r5, #4]
 8003160:	68aa      	ldr	r2, [r5, #8]
 8003162:	68eb      	ldr	r3, [r5, #12]
 8003164:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003166:	6928      	ldr	r0, [r5, #16]
 8003168:	6969      	ldr	r1, [r5, #20]
 800316a:	69aa      	ldr	r2, [r5, #24]
 800316c:	69eb      	ldr	r3, [r5, #28]
 800316e:	c40f      	stmia	r4!, {r0, r1, r2, r3}

    printf("Otrzymana zaszyfrowana ramka (hex): ");
 8003170:	48a5      	ldr	r0, [pc, #660]	@ (8003408 <validate_and_process_command+0x33c>)
 8003172:	f00c fd93 	bl	800fc9c <iprintf>
    btox(buffer, encrypted_frame, encrypted_size);
 8003176:	f8d7 2268 	ldr.w	r2, [r7, #616]	@ 0x268
 800317a:	f507 71ec 	add.w	r1, r7, #472	@ 0x1d8
 800317e:	f107 0318 	add.w	r3, r7, #24
 8003182:	4618      	mov	r0, r3
 8003184:	f7ff ff62 	bl	800304c <btox>
    printf("%s\n\r", buffer);
 8003188:	f107 0318 	add.w	r3, r7, #24
 800318c:	4619      	mov	r1, r3
 800318e:	489f      	ldr	r0, [pc, #636]	@ (800340c <validate_and_process_command+0x340>)
 8003190:	f00c fd84 	bl	800fc9c <iprintf>

    printf("Otrzymany HMAC (hex): ");
 8003194:	489e      	ldr	r0, [pc, #632]	@ (8003410 <validate_and_process_command+0x344>)
 8003196:	f00c fd81 	bl	800fc9c <iprintf>
    btox(buffer, received_hmac, CMOX_SHA256_SIZE);
 800319a:	f507 71dc 	add.w	r1, r7, #440	@ 0x1b8
 800319e:	f107 0318 	add.w	r3, r7, #24
 80031a2:	2220      	movs	r2, #32
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7ff ff51 	bl	800304c <btox>
    printf("%s\n\r", buffer);
 80031aa:	f107 0318 	add.w	r3, r7, #24
 80031ae:	4619      	mov	r1, r3
 80031b0:	4896      	ldr	r0, [pc, #600]	@ (800340c <validate_and_process_command+0x340>)
 80031b2:	f00c fd73 	bl	800fc9c <iprintf>

    /* Inicjalizuj bibliotekę kryptograficzną */
    if (cmox_initialize(NULL) != CMOX_INIT_SUCCESS)
 80031b6:	2000      	movs	r0, #0
 80031b8:	f7fd f98e 	bl	80004d8 <cmox_initialize>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <validate_and_process_command+0xfa>
        Error_Handler();
 80031c2:	f000 fdb9 	bl	8003d38 <Error_Handler>

    /* 1. Obliczenie HMAC i porównanie z otrzymanym - używając osobnego klucza HMAC */
    printf("\n\r>> Weryfikacja HMAC <<\n\r");
 80031c6:	4893      	ldr	r0, [pc, #588]	@ (8003414 <validate_and_process_command+0x348>)
 80031c8:	f00c fd68 	bl	800fc9c <iprintf>

    /* Użyj funkcji cmox_mac_compute z kluczem HMAC */
    mac_retval = cmox_mac_compute(CMOX_HMAC_SHA256_ALGO,            /* Algorytm HMAC-SHA256 */
 80031cc:	4b92      	ldr	r3, [pc, #584]	@ (8003418 <validate_and_process_command+0x34c>)
 80031ce:	6818      	ldr	r0, [r3, #0]
 80031d0:	f507 71ec 	add.w	r1, r7, #472	@ 0x1d8
 80031d4:	f107 0314 	add.w	r3, r7, #20
 80031d8:	9305      	str	r3, [sp, #20]
 80031da:	2320      	movs	r3, #32
 80031dc:	9304      	str	r3, [sp, #16]
 80031de:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80031e2:	9303      	str	r3, [sp, #12]
 80031e4:	2300      	movs	r3, #0
 80031e6:	9302      	str	r3, [sp, #8]
 80031e8:	2300      	movs	r3, #0
 80031ea:	9301      	str	r3, [sp, #4]
 80031ec:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 80031f0:	9300      	str	r3, [sp, #0]
 80031f2:	f8d7 3280 	ldr.w	r3, [r7, #640]	@ 0x280
 80031f6:	f8d7 2268 	ldr.w	r2, [r7, #616]	@ 0x268
 80031fa:	f7fd fa09 	bl	8000610 <cmox_mac_compute>
 80031fe:	f8c7 0264 	str.w	r0, [r7, #612]	@ 0x264
                              hmac_key, hmac_key_size,               /* Klucz HMAC */
                              NULL, 0,                               /* Brak danych niestandardowych */
                              computed_hmac, CMOX_SHA256_SIZE, &computed_hmac_size);  /* Bufor na podpis HMAC */

    /* Sprawdź czy obliczenie HMAC się powiodło */
    if (mac_retval != CMOX_MAC_SUCCESS)
 8003202:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 8003206:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800320a:	d001      	beq.n	8003210 <validate_and_process_command+0x144>
        Error_Handler();
 800320c:	f000 fd94 	bl	8003d38 <Error_Handler>

    /* Wydrukuj obliczony HMAC */
    printf("Obliczony HMAC (hex): ");
 8003210:	4882      	ldr	r0, [pc, #520]	@ (800341c <validate_and_process_command+0x350>)
 8003212:	f00c fd43 	bl	800fc9c <iprintf>
    btox(buffer, computed_hmac, computed_hmac_size);
 8003216:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800321a:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	461a      	mov	r2, r3
 8003222:	f507 71cc 	add.w	r1, r7, #408	@ 0x198
 8003226:	f107 0318 	add.w	r3, r7, #24
 800322a:	4618      	mov	r0, r3
 800322c:	f7ff ff0e 	bl	800304c <btox>
    printf("%s\n\r", buffer);
 8003230:	f107 0318 	add.w	r3, r7, #24
 8003234:	4619      	mov	r1, r3
 8003236:	4875      	ldr	r0, [pc, #468]	@ (800340c <validate_and_process_command+0x340>)
 8003238:	f00c fd30 	bl	800fc9c <iprintf>

    /* Porównaj otrzymany HMAC z obliczonym */
    if (memcmp(received_hmac, computed_hmac, CMOX_SHA256_SIZE) != 0) {
 800323c:	f507 71cc 	add.w	r1, r7, #408	@ 0x198
 8003240:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8003244:	2220      	movs	r2, #32
 8003246:	4618      	mov	r0, r3
 8003248:	f00c fe92 	bl	800ff70 <memcmp>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d006      	beq.n	8003260 <validate_and_process_command+0x194>
        printf("Błąd: Podpis HMAC nie zgadza się! Możliwa manipulacja danymi.\n\r");
 8003252:	4873      	ldr	r0, [pc, #460]	@ (8003420 <validate_and_process_command+0x354>)
 8003254:	f00c fd22 	bl	800fc9c <iprintf>
        result = 0;  // Błąd weryfikacji HMAC
 8003258:	2300      	movs	r3, #0
 800325a:	f887 326f 	strb.w	r3, [r7, #623]	@ 0x26f
 800325e:	e0c0      	b.n	80033e2 <validate_and_process_command+0x316>
    } else {
        printf("Weryfikacja HMAC poprawna.\n\r");
 8003260:	4870      	ldr	r0, [pc, #448]	@ (8003424 <validate_and_process_command+0x358>)
 8003262:	f00c fd1b 	bl	800fc9c <iprintf>

        /* 2. Deszyfrowanie ramki przy użyciu klucza AES */
        printf("\n\r>> Deszyfrowanie ramki <<\n\r");
 8003266:	4870      	ldr	r0, [pc, #448]	@ (8003428 <validate_and_process_command+0x35c>)
 8003268:	f00c fd18 	bl	800fc9c <iprintf>

        cipher_retval = cmox_cipher_decrypt(CMOX_AESFAST_CTR_DEC_ALGO,   /* Algorytm AES-CTR */
 800326c:	4b6f      	ldr	r3, [pc, #444]	@ (800342c <validate_and_process_command+0x360>)
 800326e:	6818      	ldr	r0, [r3, #0]
 8003270:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8003274:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 8003278:	f507 71ec 	add.w	r1, r7, #472	@ 0x1d8
 800327c:	f507 7216 	add.w	r2, r7, #600	@ 0x258
 8003280:	9204      	str	r2, [sp, #16]
 8003282:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8003286:	9203      	str	r2, [sp, #12]
 8003288:	f8d7 228c 	ldr.w	r2, [r7, #652]	@ 0x28c
 800328c:	9202      	str	r2, [sp, #8]
 800328e:	f8d7 2288 	ldr.w	r2, [r7, #648]	@ 0x288
 8003292:	9201      	str	r2, [sp, #4]
 8003294:	f507 721c 	add.w	r2, r7, #624	@ 0x270
 8003298:	f5a2 721c 	sub.w	r2, r2, #624	@ 0x270
 800329c:	6812      	ldr	r2, [r2, #0]
 800329e:	9200      	str	r2, [sp, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f8d7 2268 	ldr.w	r2, [r7, #616]	@ 0x268
 80032a6:	f7fd f813 	bl	80002d0 <cmox_cipher_decrypt>
 80032aa:	f8c7 0260 	str.w	r0, [r7, #608]	@ 0x260
                                  aes_key, aes_key_size,                  /* Klucz AES */
                                  iv, iv_size,                            /* Wektor inicjalizacyjny */
                                  decrypted_frame, &computed_size);       /* Bufor na odszyfrowane dane */

        /* Sprawdź czy deszyfrowanie się powiodło */
        if (cipher_retval != CMOX_CIPHER_SUCCESS) {
 80032ae:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 80032b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032b6:	d006      	beq.n	80032c6 <validate_and_process_command+0x1fa>
            printf("Błąd: Deszyfrowanie nie powiodło się!\n\r");
 80032b8:	485d      	ldr	r0, [pc, #372]	@ (8003430 <validate_and_process_command+0x364>)
 80032ba:	f00c fcef 	bl	800fc9c <iprintf>
            result = 0;  // Błąd deszyfrowania
 80032be:	2300      	movs	r3, #0
 80032c0:	f887 326f 	strb.w	r3, [r7, #623]	@ 0x26f
 80032c4:	e08d      	b.n	80033e2 <validate_and_process_command+0x316>
        } else {
            /* Zapewnij null-terminator dla bezpiecznego wydruku */
            decrypted_frame[computed_size] = '\0';
 80032c6:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 80032ca:	f507 721c 	add.w	r2, r7, #624	@ 0x270
 80032ce:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80032d2:	2100      	movs	r1, #0
 80032d4:	54d1      	strb	r1, [r2, r3]

            printf("Odszyfrowana ramka (hex): ");
 80032d6:	4857      	ldr	r0, [pc, #348]	@ (8003434 <validate_and_process_command+0x368>)
 80032d8:	f00c fce0 	bl	800fc9c <iprintf>
            btox(buffer, decrypted_frame, computed_size);
 80032dc:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 80032e0:	461a      	mov	r2, r3
 80032e2:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 80032e6:	f107 0318 	add.w	r3, r7, #24
 80032ea:	4618      	mov	r0, r3
 80032ec:	f7ff feae 	bl	800304c <btox>
            printf("%s\n\r", buffer);
 80032f0:	f107 0318 	add.w	r3, r7, #24
 80032f4:	4619      	mov	r1, r3
 80032f6:	4845      	ldr	r0, [pc, #276]	@ (800340c <validate_and_process_command+0x340>)
 80032f8:	f00c fcd0 	bl	800fc9c <iprintf>

            /* 3. Analiza odszyfrowanej ramki */
            printf("\n\r>> Analiza odszyfrowanej ramki <<\n\r");
 80032fc:	484e      	ldr	r0, [pc, #312]	@ (8003438 <validate_and_process_command+0x36c>)
 80032fe:	f00c fccd 	bl	800fc9c <iprintf>

            /* Sprawdź czy rozmiar ramki jest wystarczający */
            if (computed_size < 16) {  // co najmniej 8+8 bajtów na ID i licznik
 8003302:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8003306:	2b0f      	cmp	r3, #15
 8003308:	d806      	bhi.n	8003318 <validate_and_process_command+0x24c>
                printf("Błąd: Odszyfrowana ramka jest zbyt mała!\n\r");
 800330a:	484c      	ldr	r0, [pc, #304]	@ (800343c <validate_and_process_command+0x370>)
 800330c:	f00c fcc6 	bl	800fc9c <iprintf>
                result = 0;  // Błąd rozmiaru ramki
 8003310:	2300      	movs	r3, #0
 8003312:	f887 326f 	strb.w	r3, [r7, #623]	@ 0x26f
 8003316:	e064      	b.n	80033e2 <validate_and_process_command+0x316>
            } else {
                /* Pobierz ID pilota (8 bajtów) */
                memcpy(output_pilot_id, decrypted_frame, PILOT_ID_LENGTH);
 8003318:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800331c:	2208      	movs	r2, #8
 800331e:	4619      	mov	r1, r3
 8003320:	f8d7 0290 	ldr.w	r0, [r7, #656]	@ 0x290
 8003324:	f00c fec6 	bl	80100b4 <memcpy>
                printf("- ID pilota (8B): ");
 8003328:	4845      	ldr	r0, [pc, #276]	@ (8003440 <validate_and_process_command+0x374>)
 800332a:	f00c fcb7 	bl	800fc9c <iprintf>
                btox(buffer, output_pilot_id, PILOT_ID_LENGTH);
 800332e:	f107 0318 	add.w	r3, r7, #24
 8003332:	2208      	movs	r2, #8
 8003334:	f8d7 1290 	ldr.w	r1, [r7, #656]	@ 0x290
 8003338:	4618      	mov	r0, r3
 800333a:	f7ff fe87 	bl	800304c <btox>
                printf("%s\n\r", buffer);
 800333e:	f107 0318 	add.w	r3, r7, #24
 8003342:	4619      	mov	r1, r3
 8003344:	4831      	ldr	r0, [pc, #196]	@ (800340c <validate_and_process_command+0x340>)
 8003346:	f00c fca9 	bl	800fc9c <iprintf>

                /* Pobierz licznik (8 bajtów) */
                memcpy(output_counter, decrypted_frame + PILOT_ID_LENGTH, 8);
 800334a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800334e:	3308      	adds	r3, #8
 8003350:	2208      	movs	r2, #8
 8003352:	4619      	mov	r1, r3
 8003354:	f8d7 0294 	ldr.w	r0, [r7, #660]	@ 0x294
 8003358:	f00c feac 	bl	80100b4 <memcpy>
                printf("- Licznik (8B): ");
 800335c:	4839      	ldr	r0, [pc, #228]	@ (8003444 <validate_and_process_command+0x378>)
 800335e:	f00c fc9d 	bl	800fc9c <iprintf>
                btox(buffer, output_counter, 8);
 8003362:	f107 0318 	add.w	r3, r7, #24
 8003366:	2208      	movs	r2, #8
 8003368:	f8d7 1294 	ldr.w	r1, [r7, #660]	@ 0x294
 800336c:	4618      	mov	r0, r3
 800336e:	f7ff fe6d 	bl	800304c <btox>
                printf("%s\n\r", buffer);
 8003372:	f107 0318 	add.w	r3, r7, #24
 8003376:	4619      	mov	r1, r3
 8003378:	4824      	ldr	r0, [pc, #144]	@ (800340c <validate_and_process_command+0x340>)
 800337a:	f00c fc8f 	bl	800fc9c <iprintf>

                /* Pobierz komendę (reszta danych) */
                size_t command_size = computed_size - 16;  // 16 bajtów to ID + licznik
 800337e:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8003382:	3b10      	subs	r3, #16
 8003384:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
                if (command_size > 0) {
 8003388:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 800338c:	2b00      	cmp	r3, #0
 800338e:	d01e      	beq.n	80033ce <validate_and_process_command+0x302>
                    memcpy(output_command, decrypted_frame + 16, command_size);
 8003390:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003394:	3310      	adds	r3, #16
 8003396:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 800339a:	4619      	mov	r1, r3
 800339c:	f8d7 0298 	ldr.w	r0, [r7, #664]	@ 0x298
 80033a0:	f00c fe88 	bl	80100b4 <memcpy>
                    output_command[command_size] = '\0';  // Dodaj null-terminator dla bezpiecznego wydruku
 80033a4:	f8d7 2298 	ldr.w	r2, [r7, #664]	@ 0x298
 80033a8:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 80033ac:	4413      	add	r3, r2
 80033ae:	2200      	movs	r2, #0
 80033b0:	701a      	strb	r2, [r3, #0]
                    *output_command_size = command_size;
 80033b2:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 80033b6:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 80033ba:	601a      	str	r2, [r3, #0]

                    printf("- Komenda: %s\n\r", output_command);
 80033bc:	f8d7 1298 	ldr.w	r1, [r7, #664]	@ 0x298
 80033c0:	4821      	ldr	r0, [pc, #132]	@ (8003448 <validate_and_process_command+0x37c>)
 80033c2:	f00c fc6b 	bl	800fc9c <iprintf>
                    result = 1;  // Wszystko OK
 80033c6:	2301      	movs	r3, #1
 80033c8:	f887 326f 	strb.w	r3, [r7, #623]	@ 0x26f
 80033cc:	e009      	b.n	80033e2 <validate_and_process_command+0x316>
                } else {
                    printf("Ostrzeżenie: Brak komendy w ramce!\n\r");
 80033ce:	481f      	ldr	r0, [pc, #124]	@ (800344c <validate_and_process_command+0x380>)
 80033d0:	f00c fc64 	bl	800fc9c <iprintf>
                    *output_command_size = 0;
 80033d4:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 80033d8:	2200      	movs	r2, #0
 80033da:	601a      	str	r2, [r3, #0]
                    result = 0;  // Brak komendy
 80033dc:	2300      	movs	r3, #0
 80033de:	f887 326f 	strb.w	r3, [r7, #623]	@ 0x26f
            }
        }
    }

    /* Zwolnij zasoby biblioteki kryptograficznej */
    if (cmox_finalize(NULL) != CMOX_INIT_SUCCESS)
 80033e2:	2000      	movs	r0, #0
 80033e4:	f7fd f888 	bl	80004f8 <cmox_finalize>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d001      	beq.n	80033f2 <validate_and_process_command+0x326>
        Error_Handler();
 80033ee:	f000 fca3 	bl	8003d38 <Error_Handler>

    return result;
 80033f2:	f897 326f 	ldrb.w	r3, [r7, #623]	@ 0x26f
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	f507 771c 	add.w	r7, r7, #624	@ 0x270
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bdb0      	pop	{r4, r5, r7, pc}
 8003400:	08013eb0 	.word	0x08013eb0
 8003404:	08013eec 	.word	0x08013eec
 8003408:	08013f14 	.word	0x08013f14
 800340c:	08013f3c 	.word	0x08013f3c
 8003410:	08013f44 	.word	0x08013f44
 8003414:	08013f5c 	.word	0x08013f5c
 8003418:	08014418 	.word	0x08014418
 800341c:	08013f78 	.word	0x08013f78
 8003420:	08013f90 	.word	0x08013f90
 8003424:	08013fd4 	.word	0x08013fd4
 8003428:	08013ff4 	.word	0x08013ff4
 800342c:	0801440c 	.word	0x0801440c
 8003430:	08014014 	.word	0x08014014
 8003434:	08014040 	.word	0x08014040
 8003438:	0801405c 	.word	0x0801405c
 800343c:	08014084 	.word	0x08014084
 8003440:	080140b4 	.word	0x080140b4
 8003444:	080140c8 	.word	0x080140c8
 8003448:	080140dc 	.word	0x080140dc
 800344c:	080140ec 	.word	0x080140ec

08003450 <create_secure_command_frame>:
void create_secure_command_frame(const uint8_t *pilot_id, const uint8_t *counter,
                               const uint8_t *aes_key, size_t aes_key_size,
                               const uint8_t *hmac_key, size_t hmac_key_size,
                               const uint8_t *iv, size_t iv_size,
                               uint8_t *output, size_t *output_size)
{
 8003450:	b590      	push	{r4, r7, lr}
 8003452:	f5ad 7d1d 	sub.w	sp, sp, #628	@ 0x274
 8003456:	af06      	add	r7, sp, #24
 8003458:	f507 7416 	add.w	r4, r7, #600	@ 0x258
 800345c:	f5a4 7413 	sub.w	r4, r4, #588	@ 0x24c
 8003460:	6020      	str	r0, [r4, #0]
 8003462:	f507 7016 	add.w	r0, r7, #600	@ 0x258
 8003466:	f5a0 7014 	sub.w	r0, r0, #592	@ 0x250
 800346a:	6001      	str	r1, [r0, #0]
 800346c:	f507 7116 	add.w	r1, r7, #600	@ 0x258
 8003470:	f5a1 7115 	sub.w	r1, r1, #596	@ 0x254
 8003474:	600a      	str	r2, [r1, #0]
 8003476:	f507 7216 	add.w	r2, r7, #600	@ 0x258
 800347a:	f5a2 7216 	sub.w	r2, r2, #600	@ 0x258
 800347e:	6013      	str	r3, [r2, #0]
    cmox_mac_retval_t mac_retval;
    size_t computed_size;
    size_t mac_size;

    /* Stałe dla komendy */
    const uint8_t command[] = "eszp_open";
 8003480:	4aa3      	ldr	r2, [pc, #652]	@ (8003710 <create_secure_command_frame+0x2c0>)
 8003482:	f507 730d 	add.w	r3, r7, #564	@ 0x234
 8003486:	ca07      	ldmia	r2, {r0, r1, r2}
 8003488:	c303      	stmia	r3!, {r0, r1}
 800348a:	801a      	strh	r2, [r3, #0]
    uint8_t encrypted_frame[MAX_FRAME_SIZE];         // Bufor na zaszyfrowaną ramkę
    uint8_t hmac[CMOX_SHA256_SIZE];                  // Bufor na podpis HMAC
    uint8_t buffer[MAX_FRAME_SIZE*2];                // Bufor pomocniczy na wydruk hex

    /* Utwórz ramkę danych: [pilot_id (8B) | counter (8B) | command (zmienna długość)] */
    size_t frame_size = 0;
 800348c:	2300      	movs	r3, #0
 800348e:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254

    /* Skopiuj ID pilota (8 bajtów) */
    memcpy(frame, pilot_id, PILOT_ID_LENGTH);
 8003492:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003496:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800349a:	f507 70da 	add.w	r0, r7, #436	@ 0x1b4
 800349e:	2208      	movs	r2, #8
 80034a0:	6819      	ldr	r1, [r3, #0]
 80034a2:	f00c fe07 	bl	80100b4 <memcpy>
    frame_size += PILOT_ID_LENGTH;
 80034a6:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 80034aa:	3308      	adds	r3, #8
 80034ac:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254

    /* Skopiuj licznik (8 bajtów) */
    memcpy(frame + frame_size, counter, 8);
 80034b0:	f507 72da 	add.w	r2, r7, #436	@ 0x1b4
 80034b4:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 80034b8:	18d0      	adds	r0, r2, r3
 80034ba:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80034be:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 80034c2:	2208      	movs	r2, #8
 80034c4:	6819      	ldr	r1, [r3, #0]
 80034c6:	f00c fdf5 	bl	80100b4 <memcpy>
    frame_size += 8;
 80034ca:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 80034ce:	3308      	adds	r3, #8
 80034d0:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254

    /* Skopiuj komendę */
    memcpy(frame + frame_size, command, strlen((char*)command));
 80034d4:	f507 72da 	add.w	r2, r7, #436	@ 0x1b4
 80034d8:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 80034dc:	4413      	add	r3, r2
 80034de:	f507 710d 	add.w	r1, r7, #564	@ 0x234
 80034e2:	2209      	movs	r2, #9
 80034e4:	4618      	mov	r0, r3
 80034e6:	f00c fde5 	bl	80100b4 <memcpy>
    frame_size += strlen((char*)command);
 80034ea:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 80034ee:	3309      	adds	r3, #9
 80034f0:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254

    printf("\n\r===== Tworzenie bezpiecznej ramki danych =====\n\r");
 80034f4:	4887      	ldr	r0, [pc, #540]	@ (8003714 <create_secure_command_frame+0x2c4>)
 80034f6:	f00c fbd1 	bl	800fc9c <iprintf>

    /* Wyświetl utworzoną ramkę */
    printf("Ramka danych:\n\r");
 80034fa:	4887      	ldr	r0, [pc, #540]	@ (8003718 <create_secure_command_frame+0x2c8>)
 80034fc:	f00c fbce 	bl	800fc9c <iprintf>
    printf("- ID pilota (8B): ");
 8003500:	4886      	ldr	r0, [pc, #536]	@ (800371c <create_secure_command_frame+0x2cc>)
 8003502:	f00c fbcb 	bl	800fc9c <iprintf>
    btox(buffer, pilot_id, PILOT_ID_LENGTH);
 8003506:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800350a:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800350e:	f107 0014 	add.w	r0, r7, #20
 8003512:	2208      	movs	r2, #8
 8003514:	6819      	ldr	r1, [r3, #0]
 8003516:	f7ff fd99 	bl	800304c <btox>
    printf("%s\n\r", buffer);
 800351a:	f107 0314 	add.w	r3, r7, #20
 800351e:	4619      	mov	r1, r3
 8003520:	487f      	ldr	r0, [pc, #508]	@ (8003720 <create_secure_command_frame+0x2d0>)
 8003522:	f00c fbbb 	bl	800fc9c <iprintf>

    printf("- Licznik (8B): ");
 8003526:	487f      	ldr	r0, [pc, #508]	@ (8003724 <create_secure_command_frame+0x2d4>)
 8003528:	f00c fbb8 	bl	800fc9c <iprintf>
    btox(buffer, counter, 8);
 800352c:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003530:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8003534:	f107 0014 	add.w	r0, r7, #20
 8003538:	2208      	movs	r2, #8
 800353a:	6819      	ldr	r1, [r3, #0]
 800353c:	f7ff fd86 	bl	800304c <btox>
    printf("%s\n\r", buffer);
 8003540:	f107 0314 	add.w	r3, r7, #20
 8003544:	4619      	mov	r1, r3
 8003546:	4876      	ldr	r0, [pc, #472]	@ (8003720 <create_secure_command_frame+0x2d0>)
 8003548:	f00c fba8 	bl	800fc9c <iprintf>

    printf("- Komenda: %s\n\r", command);
 800354c:	f507 730d 	add.w	r3, r7, #564	@ 0x234
 8003550:	4619      	mov	r1, r3
 8003552:	4875      	ldr	r0, [pc, #468]	@ (8003728 <create_secure_command_frame+0x2d8>)
 8003554:	f00c fba2 	bl	800fc9c <iprintf>

    printf("Pełna ramka (hex): ");
 8003558:	4874      	ldr	r0, [pc, #464]	@ (800372c <create_secure_command_frame+0x2dc>)
 800355a:	f00c fb9f 	bl	800fc9c <iprintf>
    btox(buffer, frame, frame_size);
 800355e:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 8003562:	f507 71da 	add.w	r1, r7, #436	@ 0x1b4
 8003566:	f107 0314 	add.w	r3, r7, #20
 800356a:	4618      	mov	r0, r3
 800356c:	f7ff fd6e 	bl	800304c <btox>
    printf("%s\n\r", buffer);
 8003570:	f107 0314 	add.w	r3, r7, #20
 8003574:	4619      	mov	r1, r3
 8003576:	486a      	ldr	r0, [pc, #424]	@ (8003720 <create_secure_command_frame+0x2d0>)
 8003578:	f00c fb90 	bl	800fc9c <iprintf>

    /* Inicjalizuj bibliotekę kryptograficzną */
    if (cmox_initialize(NULL) != CMOX_INIT_SUCCESS)
 800357c:	2000      	movs	r0, #0
 800357e:	f7fc ffab 	bl	80004d8 <cmox_initialize>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d001      	beq.n	800358c <create_secure_command_frame+0x13c>
        Error_Handler();
 8003588:	f000 fbd6 	bl	8003d38 <Error_Handler>

    /* 1. Szyfrowanie ramki za pomocą AES-CTR */
    printf("\n\r>> Szyfrowanie ramki danych <<\n\r");
 800358c:	4868      	ldr	r0, [pc, #416]	@ (8003730 <create_secure_command_frame+0x2e0>)
 800358e:	f00c fb85 	bl	800fc9c <iprintf>

    cipher_retval = cmox_cipher_encrypt(CMOX_AESFAST_CTR_ENC_ALGO,    /* Algorytm AES-CTR */
 8003592:	4b68      	ldr	r3, [pc, #416]	@ (8003734 <create_secure_command_frame+0x2e4>)
 8003594:	6818      	ldr	r0, [r3, #0]
 8003596:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800359a:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 800359e:	f507 71da 	add.w	r1, r7, #436	@ 0x1b4
 80035a2:	f507 7211 	add.w	r2, r7, #580	@ 0x244
 80035a6:	9204      	str	r2, [sp, #16]
 80035a8:	f507 729a 	add.w	r2, r7, #308	@ 0x134
 80035ac:	9203      	str	r2, [sp, #12]
 80035ae:	f8d7 2274 	ldr.w	r2, [r7, #628]	@ 0x274
 80035b2:	9202      	str	r2, [sp, #8]
 80035b4:	f8d7 2270 	ldr.w	r2, [r7, #624]	@ 0x270
 80035b8:	9201      	str	r2, [sp, #4]
 80035ba:	f507 7216 	add.w	r2, r7, #600	@ 0x258
 80035be:	f5a2 7216 	sub.w	r2, r2, #600	@ 0x258
 80035c2:	6812      	ldr	r2, [r2, #0]
 80035c4:	9200      	str	r2, [sp, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 80035cc:	f7fc fe54 	bl	8000278 <cmox_cipher_encrypt>
 80035d0:	f8c7 0250 	str.w	r0, [r7, #592]	@ 0x250
                               aes_key, aes_key_size,                  /* Klucz AES */
                               iv, iv_size,                            /* Wektor inicjalizacyjny */
                               encrypted_frame, &computed_size);       /* Bufor na zaszyfrowane dane */

    /* Sprawdź czy szyfrowanie się powiodło */
    if (cipher_retval != CMOX_CIPHER_SUCCESS)
 80035d4:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 80035d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035dc:	d001      	beq.n	80035e2 <create_secure_command_frame+0x192>
        Error_Handler();
 80035de:	f000 fbab 	bl	8003d38 <Error_Handler>

    printf("Zaszyfrowana ramka (hex): ");
 80035e2:	4855      	ldr	r0, [pc, #340]	@ (8003738 <create_secure_command_frame+0x2e8>)
 80035e4:	f00c fb5a 	bl	800fc9c <iprintf>
    btox(buffer, encrypted_frame, computed_size);
 80035e8:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 80035ec:	461a      	mov	r2, r3
 80035ee:	f507 719a 	add.w	r1, r7, #308	@ 0x134
 80035f2:	f107 0314 	add.w	r3, r7, #20
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7ff fd28 	bl	800304c <btox>
    printf("%s\n\r", buffer);
 80035fc:	f107 0314 	add.w	r3, r7, #20
 8003600:	4619      	mov	r1, r3
 8003602:	4847      	ldr	r0, [pc, #284]	@ (8003720 <create_secure_command_frame+0x2d0>)
 8003604:	f00c fb4a 	bl	800fc9c <iprintf>

    /* 2. Obliczenie podpisu HMAC - używając osobnego klucza do HMAC */
    printf("\n\r>> Obliczanie podpisu HMAC <<\n\r");
 8003608:	484c      	ldr	r0, [pc, #304]	@ (800373c <create_secure_command_frame+0x2ec>)
 800360a:	f00c fb47 	bl	800fc9c <iprintf>

    /* Użyj funkcji cmox_mac_compute z kluczem HMAC */
    mac_retval = cmox_mac_compute(CMOX_HMAC_SHA256_ALGO,            /* Algorytm HMAC-SHA256 */
 800360e:	4b4c      	ldr	r3, [pc, #304]	@ (8003740 <create_secure_command_frame+0x2f0>)
 8003610:	6818      	ldr	r0, [r3, #0]
 8003612:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 8003616:	f507 719a 	add.w	r1, r7, #308	@ 0x134
 800361a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800361e:	9305      	str	r3, [sp, #20]
 8003620:	2320      	movs	r3, #32
 8003622:	9304      	str	r3, [sp, #16]
 8003624:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8003628:	9303      	str	r3, [sp, #12]
 800362a:	2300      	movs	r3, #0
 800362c:	9302      	str	r3, [sp, #8]
 800362e:	2300      	movs	r3, #0
 8003630:	9301      	str	r3, [sp, #4]
 8003632:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 8003636:	9300      	str	r3, [sp, #0]
 8003638:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 800363c:	f7fc ffe8 	bl	8000610 <cmox_mac_compute>
 8003640:	f8c7 024c 	str.w	r0, [r7, #588]	@ 0x24c
                              hmac_key, hmac_key_size,               /* Klucz HMAC */
                              NULL, 0,                               /* Brak danych niestandardowych */
                              hmac, CMOX_SHA256_SIZE, &mac_size);    /* Bufor na podpis HMAC */

    /* Sprawdź czy obliczenie HMAC się powiodło */
    if (mac_retval != CMOX_MAC_SUCCESS)
 8003644:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8003648:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800364c:	d001      	beq.n	8003652 <create_secure_command_frame+0x202>
        Error_Handler();
 800364e:	f000 fb73 	bl	8003d38 <Error_Handler>

    printf("Podpis HMAC (hex): ");
 8003652:	483c      	ldr	r0, [pc, #240]	@ (8003744 <create_secure_command_frame+0x2f4>)
 8003654:	f00c fb22 	bl	800fc9c <iprintf>
    btox(buffer, hmac, mac_size);
 8003658:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 800365c:	461a      	mov	r2, r3
 800365e:	f507 718a 	add.w	r1, r7, #276	@ 0x114
 8003662:	f107 0314 	add.w	r3, r7, #20
 8003666:	4618      	mov	r0, r3
 8003668:	f7ff fcf0 	bl	800304c <btox>
    printf("%s\n\r", buffer);
 800366c:	f107 0314 	add.w	r3, r7, #20
 8003670:	4619      	mov	r1, r3
 8003672:	482b      	ldr	r0, [pc, #172]	@ (8003720 <create_secure_command_frame+0x2d0>)
 8003674:	f00c fb12 	bl	800fc9c <iprintf>

    /* 3. Kompletna zaszyfrowana wiadomość do wysłania: [encrypted_frame | hmac] */
    printf("\n\r>> Przygotowanie kompletnej ramki danych <<\n\r");
 8003678:	4833      	ldr	r0, [pc, #204]	@ (8003748 <create_secure_command_frame+0x2f8>)
 800367a:	f00c fb0f 	bl	800fc9c <iprintf>

    /* Skopiuj zaszyfrowaną ramkę */
    memcpy(output, encrypted_frame, computed_size);
 800367e:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 8003682:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8003686:	4619      	mov	r1, r3
 8003688:	f8d7 0278 	ldr.w	r0, [r7, #632]	@ 0x278
 800368c:	f00c fd12 	bl	80100b4 <memcpy>
    size_t output_frame_size = computed_size;
 8003690:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8003694:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248

    /* Skopiuj podpis HMAC */
    memcpy(output + output_frame_size, hmac, mac_size);
 8003698:	f8d7 2278 	ldr.w	r2, [r7, #632]	@ 0x278
 800369c:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 80036a0:	4413      	add	r3, r2
 80036a2:	f8d7 2240 	ldr.w	r2, [r7, #576]	@ 0x240
 80036a6:	f507 718a 	add.w	r1, r7, #276	@ 0x114
 80036aa:	4618      	mov	r0, r3
 80036ac:	f00c fd02 	bl	80100b4 <memcpy>
    output_frame_size += mac_size;
 80036b0:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 80036b4:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 80036b8:	4413      	add	r3, r2
 80036ba:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248

    /* Ustaw rozmiar wyjściowy */
    *output_size = output_frame_size;
 80036be:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 80036c2:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 80036c6:	601a      	str	r2, [r3, #0]

    printf("Kompletna ramka do wysyłki (hex): ");
 80036c8:	4820      	ldr	r0, [pc, #128]	@ (800374c <create_secure_command_frame+0x2fc>)
 80036ca:	f00c fae7 	bl	800fc9c <iprintf>
    btox(buffer, output, output_frame_size);
 80036ce:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 80036d2:	f107 0314 	add.w	r3, r7, #20
 80036d6:	f8d7 1278 	ldr.w	r1, [r7, #632]	@ 0x278
 80036da:	4618      	mov	r0, r3
 80036dc:	f7ff fcb6 	bl	800304c <btox>
    printf("%s\n\r", buffer);
 80036e0:	f107 0314 	add.w	r3, r7, #20
 80036e4:	4619      	mov	r1, r3
 80036e6:	480e      	ldr	r0, [pc, #56]	@ (8003720 <create_secure_command_frame+0x2d0>)
 80036e8:	f00c fad8 	bl	800fc9c <iprintf>
    printf("Całkowity rozmiar ramki: %u bajtów\n\r", (unsigned int)output_frame_size);
 80036ec:	f8d7 1248 	ldr.w	r1, [r7, #584]	@ 0x248
 80036f0:	4817      	ldr	r0, [pc, #92]	@ (8003750 <create_secure_command_frame+0x300>)
 80036f2:	f00c fad3 	bl	800fc9c <iprintf>

    /* Zwolnij zasoby biblioteki kryptograficznej */
    if (cmox_finalize(NULL) != CMOX_INIT_SUCCESS)
 80036f6:	2000      	movs	r0, #0
 80036f8:	f7fc fefe 	bl	80004f8 <cmox_finalize>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <create_secure_command_frame+0x2b6>
        Error_Handler();
 8003702:	f000 fb19 	bl	8003d38 <Error_Handler>
}
 8003706:	bf00      	nop
 8003708:	f507 7717 	add.w	r7, r7, #604	@ 0x25c
 800370c:	46bd      	mov	sp, r7
 800370e:	bd90      	pop	{r4, r7, pc}
 8003710:	08014264 	.word	0x08014264
 8003714:	08014114 	.word	0x08014114
 8003718:	08014148 	.word	0x08014148
 800371c:	080140b4 	.word	0x080140b4
 8003720:	08013f3c 	.word	0x08013f3c
 8003724:	080140c8 	.word	0x080140c8
 8003728:	080140dc 	.word	0x080140dc
 800372c:	08014158 	.word	0x08014158
 8003730:	08014170 	.word	0x08014170
 8003734:	08014408 	.word	0x08014408
 8003738:	08014194 	.word	0x08014194
 800373c:	080141b0 	.word	0x080141b0
 8003740:	08014418 	.word	0x08014418
 8003744:	080141d4 	.word	0x080141d4
 8003748:	080141e8 	.word	0x080141e8
 800374c:	08014218 	.word	0x08014218
 8003750:	0801423c 	.word	0x0801423c

08003754 <__io_putchar>:

UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */
int __io_putchar(int ch)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
	if (ch == '\n') {
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2b0a      	cmp	r3, #10
 8003760:	d109      	bne.n	8003776 <__io_putchar+0x22>
		uint8_t ch2 = '\r';
 8003762:	230d      	movs	r3, #13
 8003764:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart1, &ch2, 1, HAL_MAX_DELAY);
 8003766:	f107 010f 	add.w	r1, r7, #15
 800376a:	f04f 33ff 	mov.w	r3, #4294967295
 800376e:	2201      	movs	r2, #1
 8003770:	4807      	ldr	r0, [pc, #28]	@ (8003790 <__io_putchar+0x3c>)
 8003772:	f006 ff87 	bl	800a684 <HAL_UART_Transmit>
	}

	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8003776:	1d39      	adds	r1, r7, #4
 8003778:	f04f 33ff 	mov.w	r3, #4294967295
 800377c:	2201      	movs	r2, #1
 800377e:	4804      	ldr	r0, [pc, #16]	@ (8003790 <__io_putchar+0x3c>)
 8003780:	f006 ff80 	bl	800a684 <HAL_UART_Transmit>
	return 1;
 8003784:	2301      	movs	r3, #1
}
 8003786:	4618      	mov	r0, r3
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	20000364 	.word	0x20000364

08003794 <HAL_GPIO_EXTI_Falling_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile uint8_t buttonPressed = 0; // Flaga sygnalizująca naciśnięcie
volatile bool transmission_in_progress = false; // Flaga blokująca kolejne przerwania
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	4603      	mov	r3, r0
 800379c:	80fb      	strh	r3, [r7, #6]
    // Sprawdź czy to właściwy pin ORAZ czy transmisja nie jest już w toku
    if(GPIO_Pin == BUTTON_TRANSMIT_Pin && !transmission_in_progress)
 800379e:	88fb      	ldrh	r3, [r7, #6]
 80037a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037a4:	d132      	bne.n	800380c <HAL_GPIO_EXTI_Falling_Callback+0x78>
 80037a6:	4b1b      	ldr	r3, [pc, #108]	@ (8003814 <HAL_GPIO_EXTI_Falling_Callback+0x80>)
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	f083 0301 	eor.w	r3, r3, #1
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d02a      	beq.n	800380c <HAL_GPIO_EXTI_Falling_Callback+0x78>
    {
        // Zastosuj prosty software debounce - opóźnienie czasowe
        // (Można też użyć HAL_GetTick() do bardziej precyzyjnego pomiaru)
        uint32_t last_tick = HAL_GetTick();
 80037b6:	f000 fe39 	bl	800442c <HAL_GetTick>
 80037ba:	60f8      	str	r0, [r7, #12]
        while (HAL_GPIO_ReadPin(BUTTON_TRANSMIT_GPIO_Port, BUTTON_TRANSMIT_Pin) == GPIO_PIN_RESET) {
 80037bc:	e006      	b.n	80037cc <HAL_GPIO_EXTI_Falling_Callback+0x38>
             // Czekaj aż przycisk zostanie puszczony LUB minie krótki czas (np. 50ms)
             if (HAL_GetTick() - last_tick > 50) break;
 80037be:	f000 fe35 	bl	800442c <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	2b32      	cmp	r3, #50	@ 0x32
 80037ca:	d808      	bhi.n	80037de <HAL_GPIO_EXTI_Falling_Callback+0x4a>
        while (HAL_GPIO_ReadPin(BUTTON_TRANSMIT_GPIO_Port, BUTTON_TRANSMIT_Pin) == GPIO_PIN_RESET) {
 80037cc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80037d0:	4811      	ldr	r0, [pc, #68]	@ (8003818 <HAL_GPIO_EXTI_Falling_Callback+0x84>)
 80037d2:	f001 fab9 	bl	8004d48 <HAL_GPIO_ReadPin>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d0f0      	beq.n	80037be <HAL_GPIO_EXTI_Falling_Callback+0x2a>
 80037dc:	e000      	b.n	80037e0 <HAL_GPIO_EXTI_Falling_Callback+0x4c>
             if (HAL_GetTick() - last_tick > 50) break;
 80037de:	bf00      	nop
        }

        // Sprawdź ponownie, czy flaga nie została ustawiona w międzyczasie
        // i czy przycisk jest faktycznie nieaktywny (puszczony - stan wysoki dla PULLUP)
         if (!transmission_in_progress && HAL_GPIO_ReadPin(BUTTON_TRANSMIT_GPIO_Port, BUTTON_TRANSMIT_Pin) == GPIO_PIN_SET) {
 80037e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003814 <HAL_GPIO_EXTI_Falling_Callback+0x80>)
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	f083 0301 	eor.w	r3, r3, #1
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d00d      	beq.n	800380c <HAL_GPIO_EXTI_Falling_Callback+0x78>
 80037f0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80037f4:	4808      	ldr	r0, [pc, #32]	@ (8003818 <HAL_GPIO_EXTI_Falling_Callback+0x84>)
 80037f6:	f001 faa7 	bl	8004d48 <HAL_GPIO_ReadPin>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d105      	bne.n	800380c <HAL_GPIO_EXTI_Falling_Callback+0x78>
             buttonPressed = 1; // Ustaw flagę żądania transmisji
 8003800:	4b06      	ldr	r3, [pc, #24]	@ (800381c <HAL_GPIO_EXTI_Falling_Callback+0x88>)
 8003802:	2201      	movs	r2, #1
 8003804:	701a      	strb	r2, [r3, #0]
             transmission_in_progress = true; // Zablokuj możliwość kolejnego przerwania do końca cyklu
 8003806:	4b03      	ldr	r3, [pc, #12]	@ (8003814 <HAL_GPIO_EXTI_Falling_Callback+0x80>)
 8003808:	2201      	movs	r2, #1
 800380a:	701a      	strb	r2, [r3, #0]
         }
    }
}
 800380c:	bf00      	nop
 800380e:	3710      	adds	r7, #16
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}
 8003814:	200003f9 	.word	0x200003f9
 8003818:	42020800 	.word	0x42020800
 800381c:	200003f8 	.word	0x200003f8

08003820 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b0ba      	sub	sp, #232	@ 0xe8
 8003824:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003826:	f000 fd47 	bl	80042b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800382a:	f000 f8b1 	bl	8003990 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800382e:	f000 fa27 	bl	8003c80 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8003832:	f000 f9d9 	bl	8003be8 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8003836:	f000 f91b 	bl	8003a70 <MX_RTC_Init>
  MX_SPI1_Init();
 800383a:	f000 f967 	bl	8003b0c <MX_SPI1_Init>
  MX_CRC_Init();
 800383e:	f000 f8f5 	bl	8003a2c <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  printf("===== Test funkcji kryptograficznych =====\n\r");
 8003842:	4844      	ldr	r0, [pc, #272]	@ (8003954 <main+0x134>)
 8003844:	f00c fa2a 	bl	800fc9c <iprintf>

  printf("\n\r>> Test funkcji bezpiecznej ramki z komendą:\n\r");
 8003848:	4843      	ldr	r0, [pc, #268]	@ (8003958 <main+0x138>)
 800384a:	f00c fa27 	bl	800fc9c <iprintf>

  /* Zmienna na licznik - teraz tylko ta wartość jest definiowana lokalnie */
  uint8_t counter[8] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01};
 800384e:	4a43      	ldr	r2, [pc, #268]	@ (800395c <main+0x13c>)
 8003850:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8003854:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003858:	e883 0003 	stmia.w	r3, {r0, r1}

  /* Bufory na ramkę i wyniki */
  uint8_t secure_frame[MAX_FRAME_SIZE];
  size_t secure_frame_size;

  create_secure_command_frame(
 800385c:	f107 01b8 	add.w	r1, r7, #184	@ 0xb8
 8003860:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003864:	9305      	str	r3, [sp, #20]
 8003866:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800386a:	9304      	str	r3, [sp, #16]
 800386c:	2310      	movs	r3, #16
 800386e:	9303      	str	r3, [sp, #12]
 8003870:	4b3b      	ldr	r3, [pc, #236]	@ (8003960 <main+0x140>)
 8003872:	9302      	str	r3, [sp, #8]
 8003874:	2320      	movs	r3, #32
 8003876:	9301      	str	r3, [sp, #4]
 8003878:	4b3a      	ldr	r3, [pc, #232]	@ (8003964 <main+0x144>)
 800387a:	9300      	str	r3, [sp, #0]
 800387c:	2310      	movs	r3, #16
 800387e:	4a3a      	ldr	r2, [pc, #232]	@ (8003968 <main+0x148>)
 8003880:	483a      	ldr	r0, [pc, #232]	@ (800396c <main+0x14c>)
 8003882:	f7ff fde5 	bl	8003450 <create_secure_command_frame>
  uint8_t received_pilot_id[PILOT_ID_LENGTH];
  uint8_t received_counter[8];
  uint8_t received_command[MAX_COMMAND_LENGTH];
  size_t received_command_size;

  uint8_t result = validate_and_process_command(
 8003886:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003888:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 800388c:	463b      	mov	r3, r7
 800388e:	9307      	str	r3, [sp, #28]
 8003890:	1d3b      	adds	r3, r7, #4
 8003892:	9306      	str	r3, [sp, #24]
 8003894:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003898:	9305      	str	r3, [sp, #20]
 800389a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800389e:	9304      	str	r3, [sp, #16]
 80038a0:	2310      	movs	r3, #16
 80038a2:	9303      	str	r3, [sp, #12]
 80038a4:	4b2e      	ldr	r3, [pc, #184]	@ (8003960 <main+0x140>)
 80038a6:	9302      	str	r3, [sp, #8]
 80038a8:	2320      	movs	r3, #32
 80038aa:	9301      	str	r3, [sp, #4]
 80038ac:	4b2d      	ldr	r3, [pc, #180]	@ (8003964 <main+0x144>)
 80038ae:	9300      	str	r3, [sp, #0]
 80038b0:	2310      	movs	r3, #16
 80038b2:	4a2d      	ldr	r2, [pc, #180]	@ (8003968 <main+0x148>)
 80038b4:	f7ff fc0a 	bl	80030cc <validate_and_process_command>
 80038b8:	4603      	mov	r3, r0
 80038ba:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
      CRYPTO_HMAC_KEY, sizeof(CRYPTO_HMAC_KEY),  // Klucz do podpisu HMAC
      CRYPTO_IV, sizeof(CRYPTO_IV),              // Wektor inicjalizacyjny
      received_pilot_id, received_counter,
      received_command, &received_command_size);

  if (result) {
 80038be:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d014      	beq.n	80038f0 <main+0xd0>
      printf("\n\r>> Odebrana komenda została pomyślnie zweryfikowana i przetworzona!\n\r");
 80038c6:	482a      	ldr	r0, [pc, #168]	@ (8003970 <main+0x150>)
 80038c8:	f00c f9e8 	bl	800fc9c <iprintf>

      /* Weryfikacja czy odebrane ID pilota zgadza się z konfiguracyjnym */
      if (memcmp(received_pilot_id, PILOT_ID, PILOT_ID_LENGTH) == 0) {
 80038cc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80038d0:	2208      	movs	r2, #8
 80038d2:	4926      	ldr	r1, [pc, #152]	@ (800396c <main+0x14c>)
 80038d4:	4618      	mov	r0, r3
 80038d6:	f00c fb4b 	bl	800ff70 <memcmp>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d103      	bne.n	80038e8 <main+0xc8>
          printf(">> ID pilota zweryfikowane poprawnie.\n\r");
 80038e0:	4824      	ldr	r0, [pc, #144]	@ (8003974 <main+0x154>)
 80038e2:	f00c f9db 	bl	800fc9c <iprintf>
 80038e6:	e006      	b.n	80038f6 <main+0xd6>
      } else {
          printf(">> Błąd: Odebrane ID pilota nie zgadza się z oczekiwanym.\n\r");
 80038e8:	4823      	ldr	r0, [pc, #140]	@ (8003978 <main+0x158>)
 80038ea:	f00c f9d7 	bl	800fc9c <iprintf>
 80038ee:	e002      	b.n	80038f6 <main+0xd6>
      }
  } else {
      printf("\n\r>> Błąd podczas weryfikacji lub przetwarzania odebranej komendy!\n\r");
 80038f0:	4822      	ldr	r0, [pc, #136]	@ (800397c <main+0x15c>)
 80038f2:	f00c f9d3 	bl	800fc9c <iprintf>
  }


  printf("\n\r===== Koniec testów =====\n\r");
 80038f6:	4822      	ldr	r0, [pc, #136]	@ (8003980 <main+0x160>)
 80038f8:	f00c f9d0 	bl	800fc9c <iprintf>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (buttonPressed)
 80038fc:	4b21      	ldr	r3, [pc, #132]	@ (8003984 <main+0x164>)
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d0fa      	beq.n	80038fc <main+0xdc>
	  {
	      buttonPressed = 0;
 8003906:	4b1f      	ldr	r3, [pc, #124]	@ (8003984 <main+0x164>)
 8003908:	2200      	movs	r2, #0
 800390a:	701a      	strb	r2, [r3, #0]
	      transmission_in_progress = true;
 800390c:	4b1e      	ldr	r3, [pc, #120]	@ (8003988 <main+0x168>)
 800390e:	2201      	movs	r2, #1
 8003910:	701a      	strb	r2, [r3, #0]

	      app_main();
 8003912:	f7ff fa25 	bl	8002d60 <app_main>

	      transmission_in_progress = false;
 8003916:	4b1c      	ldr	r3, [pc, #112]	@ (8003988 <main+0x168>)
 8003918:	2200      	movs	r2, #0
 800391a:	701a      	strb	r2, [r3, #0]
	        for(int i = 0; i < 10; i++)
 800391c:	2300      	movs	r3, #0
 800391e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003922:	e012      	b.n	800394a <main+0x12a>
	        {
	            HAL_GPIO_TogglePin(LED_TX_GPIO_Port, LED_TX_Pin); // Włącz diodę
 8003924:	2180      	movs	r1, #128	@ 0x80
 8003926:	4819      	ldr	r0, [pc, #100]	@ (800398c <main+0x16c>)
 8003928:	f001 fa3e 	bl	8004da8 <HAL_GPIO_TogglePin>
	            HAL_Delay(100);
 800392c:	2064      	movs	r0, #100	@ 0x64
 800392e:	f000 fd89 	bl	8004444 <HAL_Delay>
	            HAL_GPIO_TogglePin(LED_TX_GPIO_Port, LED_TX_Pin); // Wyłącz diodę
 8003932:	2180      	movs	r1, #128	@ 0x80
 8003934:	4815      	ldr	r0, [pc, #84]	@ (800398c <main+0x16c>)
 8003936:	f001 fa37 	bl	8004da8 <HAL_GPIO_TogglePin>
	            HAL_Delay(100);
 800393a:	2064      	movs	r0, #100	@ 0x64
 800393c:	f000 fd82 	bl	8004444 <HAL_Delay>
	        for(int i = 0; i < 10; i++)
 8003940:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003944:	3301      	adds	r3, #1
 8003946:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800394a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800394e:	2b09      	cmp	r3, #9
 8003950:	dde8      	ble.n	8003924 <main+0x104>
	  if (buttonPressed)
 8003952:	e7d3      	b.n	80038fc <main+0xdc>
 8003954:	08014270 	.word	0x08014270
 8003958:	080142a0 	.word	0x080142a0
 800395c:	080143f0 	.word	0x080143f0
 8003960:	080145d0 	.word	0x080145d0
 8003964:	080145b0 	.word	0x080145b0
 8003968:	080145a0 	.word	0x080145a0
 800396c:	08014598 	.word	0x08014598
 8003970:	080142d4 	.word	0x080142d4
 8003974:	08014320 	.word	0x08014320
 8003978:	08014348 	.word	0x08014348
 800397c:	08014388 	.word	0x08014388
 8003980:	080143d0 	.word	0x080143d0
 8003984:	200003f8 	.word	0x200003f8
 8003988:	200003f9 	.word	0x200003f9
 800398c:	42020800 	.word	0x42020800

08003990 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b09e      	sub	sp, #120	@ 0x78
 8003994:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003996:	f107 0318 	add.w	r3, r7, #24
 800399a:	2260      	movs	r2, #96	@ 0x60
 800399c:	2100      	movs	r1, #0
 800399e:	4618      	mov	r0, r3
 80039a0:	f00c faf6 	bl	800ff90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80039a4:	463b      	mov	r3, r7
 80039a6:	2200      	movs	r2, #0
 80039a8:	601a      	str	r2, [r3, #0]
 80039aa:	605a      	str	r2, [r3, #4]
 80039ac:	609a      	str	r2, [r3, #8]
 80039ae:	60da      	str	r2, [r3, #12]
 80039b0:	611a      	str	r2, [r3, #16]
 80039b2:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE4) != HAL_OK)
 80039b4:	2000      	movs	r0, #0
 80039b6:	f001 fa37 	bl	8004e28 <HAL_PWREx_ControlVoltageScaling>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d001      	beq.n	80039c4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80039c0:	f000 f9ba 	bl	8003d38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 80039c4:	2318      	movs	r3, #24
 80039c6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80039c8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80039cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80039ce:	2301      	movs	r3, #1
 80039d0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80039d2:	2310      	movs	r3, #16
 80039d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 80039d6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80039da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 80039dc:	2300      	movs	r3, #0
 80039de:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80039e0:	2300      	movs	r3, #0
 80039e2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80039e4:	f107 0318 	add.w	r3, r7, #24
 80039e8:	4618      	mov	r0, r3
 80039ea:	f001 faa9 	bl	8004f40 <HAL_RCC_OscConfig>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d001      	beq.n	80039f8 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80039f4:	f000 f9a0 	bl	8003d38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80039f8:	231f      	movs	r3, #31
 80039fa:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80039fc:	2300      	movs	r3, #0
 80039fe:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a00:	2300      	movs	r3, #0
 8003a02:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003a04:	2300      	movs	r3, #0
 8003a06:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003a10:	463b      	mov	r3, r7
 8003a12:	2100      	movs	r1, #0
 8003a14:	4618      	mov	r0, r3
 8003a16:	f002 f96f 	bl	8005cf8 <HAL_RCC_ClockConfig>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d001      	beq.n	8003a24 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003a20:	f000 f98a 	bl	8003d38 <Error_Handler>
  }
}
 8003a24:	bf00      	nop
 8003a26:	3778      	adds	r7, #120	@ 0x78
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8003a30:	4b0d      	ldr	r3, [pc, #52]	@ (8003a68 <MX_CRC_Init+0x3c>)
 8003a32:	4a0e      	ldr	r2, [pc, #56]	@ (8003a6c <MX_CRC_Init+0x40>)
 8003a34:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8003a36:	4b0c      	ldr	r3, [pc, #48]	@ (8003a68 <MX_CRC_Init+0x3c>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8003a3c:	4b0a      	ldr	r3, [pc, #40]	@ (8003a68 <MX_CRC_Init+0x3c>)
 8003a3e:	2200      	movs	r2, #0
 8003a40:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8003a42:	4b09      	ldr	r3, [pc, #36]	@ (8003a68 <MX_CRC_Init+0x3c>)
 8003a44:	2200      	movs	r2, #0
 8003a46:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8003a48:	4b07      	ldr	r3, [pc, #28]	@ (8003a68 <MX_CRC_Init+0x3c>)
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8003a4e:	4b06      	ldr	r3, [pc, #24]	@ (8003a68 <MX_CRC_Init+0x3c>)
 8003a50:	2201      	movs	r2, #1
 8003a52:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8003a54:	4804      	ldr	r0, [pc, #16]	@ (8003a68 <MX_CRC_Init+0x3c>)
 8003a56:	f000 fead 	bl	80047b4 <HAL_CRC_Init>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d001      	beq.n	8003a64 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8003a60:	f000 f96a 	bl	8003d38 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8003a64:	bf00      	nop
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	20000280 	.word	0x20000280
 8003a6c:	40023000 	.word	0x40023000

08003a70 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b088      	sub	sp, #32
 8003a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8003a76:	1d3b      	adds	r3, r7, #4
 8003a78:	2200      	movs	r2, #0
 8003a7a:	601a      	str	r2, [r3, #0]
 8003a7c:	605a      	str	r2, [r3, #4]
 8003a7e:	609a      	str	r2, [r3, #8]
 8003a80:	60da      	str	r2, [r3, #12]
 8003a82:	611a      	str	r2, [r3, #16]
 8003a84:	615a      	str	r2, [r3, #20]
 8003a86:	619a      	str	r2, [r3, #24]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003a88:	4b1e      	ldr	r3, [pc, #120]	@ (8003b04 <MX_RTC_Init+0x94>)
 8003a8a:	4a1f      	ldr	r2, [pc, #124]	@ (8003b08 <MX_RTC_Init+0x98>)
 8003a8c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003a8e:	4b1d      	ldr	r3, [pc, #116]	@ (8003b04 <MX_RTC_Init+0x94>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003a94:	4b1b      	ldr	r3, [pc, #108]	@ (8003b04 <MX_RTC_Init+0x94>)
 8003a96:	227f      	movs	r2, #127	@ 0x7f
 8003a98:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003a9a:	4b1a      	ldr	r3, [pc, #104]	@ (8003b04 <MX_RTC_Init+0x94>)
 8003a9c:	22ff      	movs	r2, #255	@ 0xff
 8003a9e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003aa0:	4b18      	ldr	r3, [pc, #96]	@ (8003b04 <MX_RTC_Init+0x94>)
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003aa6:	4b17      	ldr	r3, [pc, #92]	@ (8003b04 <MX_RTC_Init+0x94>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003aac:	4b15      	ldr	r3, [pc, #84]	@ (8003b04 <MX_RTC_Init+0x94>)
 8003aae:	2200      	movs	r2, #0
 8003ab0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003ab2:	4b14      	ldr	r3, [pc, #80]	@ (8003b04 <MX_RTC_Init+0x94>)
 8003ab4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003ab8:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8003aba:	4b12      	ldr	r3, [pc, #72]	@ (8003b04 <MX_RTC_Init+0x94>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8003ac0:	4b10      	ldr	r3, [pc, #64]	@ (8003b04 <MX_RTC_Init+0x94>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003ac6:	480f      	ldr	r0, [pc, #60]	@ (8003b04 <MX_RTC_Init+0x94>)
 8003ac8:	f005 f8a4 	bl	8008c14 <HAL_RTC_Init>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d001      	beq.n	8003ad6 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8003ad2:	f000 f931 	bl	8003d38 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	607b      	str	r3, [r7, #4]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8003ada:	2300      	movs	r3, #0
 8003adc:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	617b      	str	r3, [r7, #20]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	61bb      	str	r3, [r7, #24]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8003ae6:	1d3b      	adds	r3, r7, #4
 8003ae8:	4619      	mov	r1, r3
 8003aea:	4806      	ldr	r0, [pc, #24]	@ (8003b04 <MX_RTC_Init+0x94>)
 8003aec:	f005 fe50 	bl	8009790 <HAL_RTCEx_PrivilegeModeSet>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d001      	beq.n	8003afa <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 8003af6:	f000 f91f 	bl	8003d38 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003afa:	bf00      	nop
 8003afc:	3720      	adds	r7, #32
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	200002a4 	.word	0x200002a4
 8003b08:	46007800 	.word	0x46007800

08003b0c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8003b12:	1d3b      	adds	r3, r7, #4
 8003b14:	2200      	movs	r2, #0
 8003b16:	601a      	str	r2, [r3, #0]
 8003b18:	605a      	str	r2, [r3, #4]
 8003b1a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003b1c:	4b30      	ldr	r3, [pc, #192]	@ (8003be0 <MX_SPI1_Init+0xd4>)
 8003b1e:	4a31      	ldr	r2, [pc, #196]	@ (8003be4 <MX_SPI1_Init+0xd8>)
 8003b20:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003b22:	4b2f      	ldr	r3, [pc, #188]	@ (8003be0 <MX_SPI1_Init+0xd4>)
 8003b24:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8003b28:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003b2a:	4b2d      	ldr	r3, [pc, #180]	@ (8003be0 <MX_SPI1_Init+0xd4>)
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8003b30:	4b2b      	ldr	r3, [pc, #172]	@ (8003be0 <MX_SPI1_Init+0xd4>)
 8003b32:	2203      	movs	r2, #3
 8003b34:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b36:	4b2a      	ldr	r3, [pc, #168]	@ (8003be0 <MX_SPI1_Init+0xd4>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003b3c:	4b28      	ldr	r3, [pc, #160]	@ (8003be0 <MX_SPI1_Init+0xd4>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003b42:	4b27      	ldr	r3, [pc, #156]	@ (8003be0 <MX_SPI1_Init+0xd4>)
 8003b44:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003b48:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b4a:	4b25      	ldr	r3, [pc, #148]	@ (8003be0 <MX_SPI1_Init+0xd4>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003b50:	4b23      	ldr	r3, [pc, #140]	@ (8003be0 <MX_SPI1_Init+0xd4>)
 8003b52:	2200      	movs	r2, #0
 8003b54:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003b56:	4b22      	ldr	r3, [pc, #136]	@ (8003be0 <MX_SPI1_Init+0xd4>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b5c:	4b20      	ldr	r3, [pc, #128]	@ (8003be0 <MX_SPI1_Init+0xd4>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8003b62:	4b1f      	ldr	r3, [pc, #124]	@ (8003be0 <MX_SPI1_Init+0xd4>)
 8003b64:	2207      	movs	r2, #7
 8003b66:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003b68:	4b1d      	ldr	r3, [pc, #116]	@ (8003be0 <MX_SPI1_Init+0xd4>)
 8003b6a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003b6e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003b70:	4b1b      	ldr	r3, [pc, #108]	@ (8003be0 <MX_SPI1_Init+0xd4>)
 8003b72:	2200      	movs	r2, #0
 8003b74:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8003b76:	4b1a      	ldr	r3, [pc, #104]	@ (8003be0 <MX_SPI1_Init+0xd4>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003b7c:	4b18      	ldr	r3, [pc, #96]	@ (8003be0 <MX_SPI1_Init+0xd4>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003b82:	4b17      	ldr	r3, [pc, #92]	@ (8003be0 <MX_SPI1_Init+0xd4>)
 8003b84:	2200      	movs	r2, #0
 8003b86:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003b88:	4b15      	ldr	r3, [pc, #84]	@ (8003be0 <MX_SPI1_Init+0xd4>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003b8e:	4b14      	ldr	r3, [pc, #80]	@ (8003be0 <MX_SPI1_Init+0xd4>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003b94:	4b12      	ldr	r3, [pc, #72]	@ (8003be0 <MX_SPI1_Init+0xd4>)
 8003b96:	2200      	movs	r2, #0
 8003b98:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8003b9a:	4b11      	ldr	r3, [pc, #68]	@ (8003be0 <MX_SPI1_Init+0xd4>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8003ba0:	4b0f      	ldr	r3, [pc, #60]	@ (8003be0 <MX_SPI1_Init+0xd4>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003ba6:	480e      	ldr	r0, [pc, #56]	@ (8003be0 <MX_SPI1_Init+0xd4>)
 8003ba8:	f005 fe20 	bl	80097ec <HAL_SPI_Init>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d001      	beq.n	8003bb6 <MX_SPI1_Init+0xaa>
  {
    Error_Handler();
 8003bb2:	f000 f8c1 	bl	8003d38 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8003bba:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003bbe:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8003bc4:	1d3b      	adds	r3, r7, #4
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	4805      	ldr	r0, [pc, #20]	@ (8003be0 <MX_SPI1_Init+0xd4>)
 8003bca:	f006 fcca 	bl	800a562 <HAL_SPIEx_SetConfigAutonomousMode>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d001      	beq.n	8003bd8 <MX_SPI1_Init+0xcc>
  {
    Error_Handler();
 8003bd4:	f000 f8b0 	bl	8003d38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003bd8:	bf00      	nop
 8003bda:	3710      	adds	r7, #16
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	200002d4 	.word	0x200002d4
 8003be4:	40013000 	.word	0x40013000

08003be8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003bec:	4b22      	ldr	r3, [pc, #136]	@ (8003c78 <MX_USART1_UART_Init+0x90>)
 8003bee:	4a23      	ldr	r2, [pc, #140]	@ (8003c7c <MX_USART1_UART_Init+0x94>)
 8003bf0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003bf2:	4b21      	ldr	r3, [pc, #132]	@ (8003c78 <MX_USART1_UART_Init+0x90>)
 8003bf4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003bf8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003bfa:	4b1f      	ldr	r3, [pc, #124]	@ (8003c78 <MX_USART1_UART_Init+0x90>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003c00:	4b1d      	ldr	r3, [pc, #116]	@ (8003c78 <MX_USART1_UART_Init+0x90>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003c06:	4b1c      	ldr	r3, [pc, #112]	@ (8003c78 <MX_USART1_UART_Init+0x90>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003c0c:	4b1a      	ldr	r3, [pc, #104]	@ (8003c78 <MX_USART1_UART_Init+0x90>)
 8003c0e:	220c      	movs	r2, #12
 8003c10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c12:	4b19      	ldr	r3, [pc, #100]	@ (8003c78 <MX_USART1_UART_Init+0x90>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c18:	4b17      	ldr	r3, [pc, #92]	@ (8003c78 <MX_USART1_UART_Init+0x90>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003c1e:	4b16      	ldr	r3, [pc, #88]	@ (8003c78 <MX_USART1_UART_Init+0x90>)
 8003c20:	2200      	movs	r2, #0
 8003c22:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003c24:	4b14      	ldr	r3, [pc, #80]	@ (8003c78 <MX_USART1_UART_Init+0x90>)
 8003c26:	2200      	movs	r2, #0
 8003c28:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003c2a:	4b13      	ldr	r3, [pc, #76]	@ (8003c78 <MX_USART1_UART_Init+0x90>)
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003c30:	4811      	ldr	r0, [pc, #68]	@ (8003c78 <MX_USART1_UART_Init+0x90>)
 8003c32:	f006 fcd7 	bl	800a5e4 <HAL_UART_Init>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d001      	beq.n	8003c40 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003c3c:	f000 f87c 	bl	8003d38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003c40:	2100      	movs	r1, #0
 8003c42:	480d      	ldr	r0, [pc, #52]	@ (8003c78 <MX_USART1_UART_Init+0x90>)
 8003c44:	f007 f99c 	bl	800af80 <HAL_UARTEx_SetTxFifoThreshold>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d001      	beq.n	8003c52 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003c4e:	f000 f873 	bl	8003d38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003c52:	2100      	movs	r1, #0
 8003c54:	4808      	ldr	r0, [pc, #32]	@ (8003c78 <MX_USART1_UART_Init+0x90>)
 8003c56:	f007 f9d1 	bl	800affc <HAL_UARTEx_SetRxFifoThreshold>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d001      	beq.n	8003c64 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003c60:	f000 f86a 	bl	8003d38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003c64:	4804      	ldr	r0, [pc, #16]	@ (8003c78 <MX_USART1_UART_Init+0x90>)
 8003c66:	f007 f952 	bl	800af0e <HAL_UARTEx_DisableFifoMode>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d001      	beq.n	8003c74 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003c70:	f000 f862 	bl	8003d38 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003c74:	bf00      	nop
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	20000364 	.word	0x20000364
 8003c7c:	40013800 	.word	0x40013800

08003c80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b088      	sub	sp, #32
 8003c84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c86:	f107 030c 	add.w	r3, r7, #12
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	601a      	str	r2, [r3, #0]
 8003c8e:	605a      	str	r2, [r3, #4]
 8003c90:	609a      	str	r2, [r3, #8]
 8003c92:	60da      	str	r2, [r3, #12]
 8003c94:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c96:	4b25      	ldr	r3, [pc, #148]	@ (8003d2c <MX_GPIO_Init+0xac>)
 8003c98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c9c:	4a23      	ldr	r2, [pc, #140]	@ (8003d2c <MX_GPIO_Init+0xac>)
 8003c9e:	f043 0301 	orr.w	r3, r3, #1
 8003ca2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003ca6:	4b21      	ldr	r3, [pc, #132]	@ (8003d2c <MX_GPIO_Init+0xac>)
 8003ca8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003cac:	f003 0301 	and.w	r3, r3, #1
 8003cb0:	60bb      	str	r3, [r7, #8]
 8003cb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cb4:	4b1d      	ldr	r3, [pc, #116]	@ (8003d2c <MX_GPIO_Init+0xac>)
 8003cb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003cba:	4a1c      	ldr	r2, [pc, #112]	@ (8003d2c <MX_GPIO_Init+0xac>)
 8003cbc:	f043 0304 	orr.w	r3, r3, #4
 8003cc0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003cc4:	4b19      	ldr	r3, [pc, #100]	@ (8003d2c <MX_GPIO_Init+0xac>)
 8003cc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003cca:	f003 0304 	and.w	r3, r3, #4
 8003cce:	607b      	str	r3, [r7, #4]
 8003cd0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_TX_GPIO_Port, LED_TX_Pin, GPIO_PIN_RESET);
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	2180      	movs	r1, #128	@ 0x80
 8003cd6:	4816      	ldr	r0, [pc, #88]	@ (8003d30 <MX_GPIO_Init+0xb0>)
 8003cd8:	f001 f84e 	bl	8004d78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_TX_Pin */
  GPIO_InitStruct.Pin = LED_TX_Pin;
 8003cdc:	2380      	movs	r3, #128	@ 0x80
 8003cde:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_TX_GPIO_Port, &GPIO_InitStruct);
 8003cec:	f107 030c 	add.w	r3, r7, #12
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	480f      	ldr	r0, [pc, #60]	@ (8003d30 <MX_GPIO_Init+0xb0>)
 8003cf4:	f000 fe50 	bl	8004998 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_TRANSMIT_Pin */
  GPIO_InitStruct.Pin = BUTTON_TRANSMIT_Pin;
 8003cf8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003cfc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003cfe:	4b0d      	ldr	r3, [pc, #52]	@ (8003d34 <MX_GPIO_Init+0xb4>)
 8003d00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003d02:	2302      	movs	r3, #2
 8003d04:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_TRANSMIT_GPIO_Port, &GPIO_InitStruct);
 8003d06:	f107 030c 	add.w	r3, r7, #12
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	4808      	ldr	r0, [pc, #32]	@ (8003d30 <MX_GPIO_Init+0xb0>)
 8003d0e:	f000 fe43 	bl	8004998 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI8_IRQn, 0, 0);
 8003d12:	2200      	movs	r2, #0
 8003d14:	2100      	movs	r1, #0
 8003d16:	2013      	movs	r0, #19
 8003d18:	f000 fc70 	bl	80045fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI8_IRQn);
 8003d1c:	2013      	movs	r0, #19
 8003d1e:	f000 fc87 	bl	8004630 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8003d22:	bf00      	nop
 8003d24:	3720      	adds	r7, #32
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	46020c00 	.word	0x46020c00
 8003d30:	42020800 	.word	0x42020800
 8003d34:	10210000 	.word	0x10210000

08003d38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003d3c:	b672      	cpsid	i
}
 8003d3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003d40:	bf00      	nop
 8003d42:	e7fd      	b.n	8003d40 <Error_Handler+0x8>

08003d44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003d4a:	4b0a      	ldr	r3, [pc, #40]	@ (8003d74 <HAL_MspInit+0x30>)
 8003d4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d50:	4a08      	ldr	r2, [pc, #32]	@ (8003d74 <HAL_MspInit+0x30>)
 8003d52:	f043 0304 	orr.w	r3, r3, #4
 8003d56:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003d5a:	4b06      	ldr	r3, [pc, #24]	@ (8003d74 <HAL_MspInit+0x30>)
 8003d5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d60:	f003 0304 	and.w	r3, r3, #4
 8003d64:	607b      	str	r3, [r7, #4]
 8003d66:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d68:	bf00      	nop
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr
 8003d74:	46020c00 	.word	0x46020c00

08003d78 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b085      	sub	sp, #20
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a0b      	ldr	r2, [pc, #44]	@ (8003db4 <HAL_CRC_MspInit+0x3c>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d10e      	bne.n	8003da8 <HAL_CRC_MspInit+0x30>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003d8a:	4b0b      	ldr	r3, [pc, #44]	@ (8003db8 <HAL_CRC_MspInit+0x40>)
 8003d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d90:	4a09      	ldr	r2, [pc, #36]	@ (8003db8 <HAL_CRC_MspInit+0x40>)
 8003d92:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003d96:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8003d9a:	4b07      	ldr	r3, [pc, #28]	@ (8003db8 <HAL_CRC_MspInit+0x40>)
 8003d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003da0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003da4:	60fb      	str	r3, [r7, #12]
 8003da6:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8003da8:	bf00      	nop
 8003daa:	3714      	adds	r7, #20
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr
 8003db4:	40023000 	.word	0x40023000
 8003db8:	46020c00 	.word	0x46020c00

08003dbc <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b0b4      	sub	sp, #208	@ 0xd0
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003dc4:	f107 0310 	add.w	r3, r7, #16
 8003dc8:	22c0      	movs	r2, #192	@ 0xc0
 8003dca:	2100      	movs	r1, #0
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f00c f8df 	bl	800ff90 <memset>
  if(hrtc->Instance==RTC)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a1d      	ldr	r2, [pc, #116]	@ (8003e4c <HAL_RTC_MspInit+0x90>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d132      	bne.n	8003e42 <HAL_RTC_MspInit+0x86>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003ddc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8003de0:	f04f 0300 	mov.w	r3, #0
 8003de4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003de8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003dec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003df0:	f107 0310 	add.w	r3, r7, #16
 8003df4:	4618      	mov	r0, r3
 8003df6:	f002 fb4f 	bl	8006498 <HAL_RCCEx_PeriphCLKConfig>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d001      	beq.n	8003e04 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8003e00:	f7ff ff9a 	bl	8003d38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003e04:	4b12      	ldr	r3, [pc, #72]	@ (8003e50 <HAL_RTC_MspInit+0x94>)
 8003e06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e0a:	4a11      	ldr	r2, [pc, #68]	@ (8003e50 <HAL_RTC_MspInit+0x94>)
 8003e0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e10:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003e14:	4b0e      	ldr	r3, [pc, #56]	@ (8003e50 <HAL_RTC_MspInit+0x94>)
 8003e16:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003e1a:	4a0d      	ldr	r2, [pc, #52]	@ (8003e50 <HAL_RTC_MspInit+0x94>)
 8003e1c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003e20:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8003e24:	4b0a      	ldr	r3, [pc, #40]	@ (8003e50 <HAL_RTC_MspInit+0x94>)
 8003e26:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003e2a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e2e:	60fb      	str	r3, [r7, #12]
 8003e30:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 8003e32:	4b07      	ldr	r3, [pc, #28]	@ (8003e50 <HAL_RTC_MspInit+0x94>)
 8003e34:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003e38:	4a05      	ldr	r2, [pc, #20]	@ (8003e50 <HAL_RTC_MspInit+0x94>)
 8003e3a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003e3e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8003e42:	bf00      	nop
 8003e44:	37d0      	adds	r7, #208	@ 0xd0
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	46007800 	.word	0x46007800
 8003e50:	46020c00 	.word	0x46020c00

08003e54 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b0ba      	sub	sp, #232	@ 0xe8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e5c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003e60:	2200      	movs	r2, #0
 8003e62:	601a      	str	r2, [r3, #0]
 8003e64:	605a      	str	r2, [r3, #4]
 8003e66:	609a      	str	r2, [r3, #8]
 8003e68:	60da      	str	r2, [r3, #12]
 8003e6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003e6c:	f107 0310 	add.w	r3, r7, #16
 8003e70:	22c0      	movs	r2, #192	@ 0xc0
 8003e72:	2100      	movs	r1, #0
 8003e74:	4618      	mov	r0, r3
 8003e76:	f00c f88b 	bl	800ff90 <memset>
  if(hspi->Instance==SPI1)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a27      	ldr	r2, [pc, #156]	@ (8003f1c <HAL_SPI_MspInit+0xc8>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d146      	bne.n	8003f12 <HAL_SPI_MspInit+0xbe>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8003e84:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003e88:	f04f 0300 	mov.w	r3, #0
 8003e8c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 8003e90:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003e94:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003e98:	f107 0310 	add.w	r3, r7, #16
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f002 fafb 	bl	8006498 <HAL_RCCEx_PeriphCLKConfig>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d001      	beq.n	8003eac <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8003ea8:	f7ff ff46 	bl	8003d38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003eac:	4b1c      	ldr	r3, [pc, #112]	@ (8003f20 <HAL_SPI_MspInit+0xcc>)
 8003eae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003eb2:	4a1b      	ldr	r2, [pc, #108]	@ (8003f20 <HAL_SPI_MspInit+0xcc>)
 8003eb4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003eb8:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8003ebc:	4b18      	ldr	r3, [pc, #96]	@ (8003f20 <HAL_SPI_MspInit+0xcc>)
 8003ebe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003ec2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ec6:	60fb      	str	r3, [r7, #12]
 8003ec8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003eca:	4b15      	ldr	r3, [pc, #84]	@ (8003f20 <HAL_SPI_MspInit+0xcc>)
 8003ecc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ed0:	4a13      	ldr	r2, [pc, #76]	@ (8003f20 <HAL_SPI_MspInit+0xcc>)
 8003ed2:	f043 0301 	orr.w	r3, r3, #1
 8003ed6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003eda:	4b11      	ldr	r3, [pc, #68]	@ (8003f20 <HAL_SPI_MspInit+0xcc>)
 8003edc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ee0:	f003 0301 	and.w	r3, r3, #1
 8003ee4:	60bb      	str	r3, [r7, #8]
 8003ee6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8003ee8:	23c2      	movs	r3, #194	@ 0xc2
 8003eea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eee:	2302      	movs	r3, #2
 8003ef0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003efa:	2300      	movs	r3, #0
 8003efc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003f00:	2305      	movs	r3, #5
 8003f02:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f06:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	4805      	ldr	r0, [pc, #20]	@ (8003f24 <HAL_SPI_MspInit+0xd0>)
 8003f0e:	f000 fd43 	bl	8004998 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8003f12:	bf00      	nop
 8003f14:	37e8      	adds	r7, #232	@ 0xe8
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	40013000 	.word	0x40013000
 8003f20:	46020c00 	.word	0x46020c00
 8003f24:	42020000 	.word	0x42020000

08003f28 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b0ba      	sub	sp, #232	@ 0xe8
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f30:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003f34:	2200      	movs	r2, #0
 8003f36:	601a      	str	r2, [r3, #0]
 8003f38:	605a      	str	r2, [r3, #4]
 8003f3a:	609a      	str	r2, [r3, #8]
 8003f3c:	60da      	str	r2, [r3, #12]
 8003f3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003f40:	f107 0310 	add.w	r3, r7, #16
 8003f44:	22c0      	movs	r2, #192	@ 0xc0
 8003f46:	2100      	movs	r1, #0
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f00c f821 	bl	800ff90 <memset>
  if(huart->Instance==USART1)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a26      	ldr	r2, [pc, #152]	@ (8003fec <HAL_UART_MspInit+0xc4>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d145      	bne.n	8003fe4 <HAL_UART_MspInit+0xbc>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003f58:	f04f 0201 	mov.w	r2, #1
 8003f5c:	f04f 0300 	mov.w	r3, #0
 8003f60:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003f64:	2300      	movs	r3, #0
 8003f66:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003f68:	f107 0310 	add.w	r3, r7, #16
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f002 fa93 	bl	8006498 <HAL_RCCEx_PeriphCLKConfig>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d001      	beq.n	8003f7c <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8003f78:	f7ff fede 	bl	8003d38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003f7c:	4b1c      	ldr	r3, [pc, #112]	@ (8003ff0 <HAL_UART_MspInit+0xc8>)
 8003f7e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003f82:	4a1b      	ldr	r2, [pc, #108]	@ (8003ff0 <HAL_UART_MspInit+0xc8>)
 8003f84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003f88:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8003f8c:	4b18      	ldr	r3, [pc, #96]	@ (8003ff0 <HAL_UART_MspInit+0xc8>)
 8003f8e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003f92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f96:	60fb      	str	r3, [r7, #12]
 8003f98:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f9a:	4b15      	ldr	r3, [pc, #84]	@ (8003ff0 <HAL_UART_MspInit+0xc8>)
 8003f9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003fa0:	4a13      	ldr	r2, [pc, #76]	@ (8003ff0 <HAL_UART_MspInit+0xc8>)
 8003fa2:	f043 0301 	orr.w	r3, r3, #1
 8003fa6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003faa:	4b11      	ldr	r3, [pc, #68]	@ (8003ff0 <HAL_UART_MspInit+0xc8>)
 8003fac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003fb0:	f003 0301 	and.w	r3, r3, #1
 8003fb4:	60bb      	str	r3, [r7, #8]
 8003fb6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003fb8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003fbc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fc0:	2302      	movs	r3, #2
 8003fc2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003fd2:	2307      	movs	r3, #7
 8003fd4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fd8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003fdc:	4619      	mov	r1, r3
 8003fde:	4805      	ldr	r0, [pc, #20]	@ (8003ff4 <HAL_UART_MspInit+0xcc>)
 8003fe0:	f000 fcda 	bl	8004998 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8003fe4:	bf00      	nop
 8003fe6:	37e8      	adds	r7, #232	@ 0xe8
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	40013800 	.word	0x40013800
 8003ff0:	46020c00 	.word	0x46020c00
 8003ff4:	42020000 	.word	0x42020000

08003ff8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003ffc:	bf00      	nop
 8003ffe:	e7fd      	b.n	8003ffc <NMI_Handler+0x4>

08004000 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004000:	b480      	push	{r7}
 8004002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004004:	bf00      	nop
 8004006:	e7fd      	b.n	8004004 <HardFault_Handler+0x4>

08004008 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004008:	b480      	push	{r7}
 800400a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800400c:	bf00      	nop
 800400e:	e7fd      	b.n	800400c <MemManage_Handler+0x4>

08004010 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004010:	b480      	push	{r7}
 8004012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004014:	bf00      	nop
 8004016:	e7fd      	b.n	8004014 <BusFault_Handler+0x4>

08004018 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004018:	b480      	push	{r7}
 800401a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800401c:	bf00      	nop
 800401e:	e7fd      	b.n	800401c <UsageFault_Handler+0x4>

08004020 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004020:	b480      	push	{r7}
 8004022:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004024:	bf00      	nop
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr

0800402e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800402e:	b480      	push	{r7}
 8004030:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004032:	bf00      	nop
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800403c:	b480      	push	{r7}
 800403e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004040:	bf00      	nop
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr

0800404a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800404a:	b580      	push	{r7, lr}
 800404c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800404e:	f000 f9d9 	bl	8004404 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004052:	bf00      	nop
 8004054:	bd80      	pop	{r7, pc}

08004056 <EXTI8_IRQHandler>:

/**
  * @brief This function handles EXTI Line8 interrupt.
  */
void EXTI8_IRQHandler(void)
{
 8004056:	b580      	push	{r7, lr}
 8004058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI8_IRQn 0 */

  /* USER CODE END EXTI8_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_TRANSMIT_Pin);
 800405a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800405e:	f000 febd 	bl	8004ddc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI8_IRQn 1 */

  /* USER CODE END EXTI8_IRQn 1 */
}
 8004062:	bf00      	nop
 8004064:	bd80      	pop	{r7, pc}

08004066 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004066:	b480      	push	{r7}
 8004068:	af00      	add	r7, sp, #0
  return 1;
 800406a:	2301      	movs	r3, #1
}
 800406c:	4618      	mov	r0, r3
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr

08004076 <_kill>:

int _kill(int pid, int sig)
{
 8004076:	b580      	push	{r7, lr}
 8004078:	b082      	sub	sp, #8
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
 800407e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004080:	f00b ffd8 	bl	8010034 <__errno>
 8004084:	4603      	mov	r3, r0
 8004086:	2216      	movs	r2, #22
 8004088:	601a      	str	r2, [r3, #0]
  return -1;
 800408a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800408e:	4618      	mov	r0, r3
 8004090:	3708      	adds	r7, #8
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}

08004096 <_exit>:

void _exit (int status)
{
 8004096:	b580      	push	{r7, lr}
 8004098:	b082      	sub	sp, #8
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800409e:	f04f 31ff 	mov.w	r1, #4294967295
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f7ff ffe7 	bl	8004076 <_kill>
  while (1) {}    /* Make sure we hang here */
 80040a8:	bf00      	nop
 80040aa:	e7fd      	b.n	80040a8 <_exit+0x12>

080040ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b086      	sub	sp, #24
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040b8:	2300      	movs	r3, #0
 80040ba:	617b      	str	r3, [r7, #20]
 80040bc:	e00a      	b.n	80040d4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80040be:	f3af 8000 	nop.w
 80040c2:	4601      	mov	r1, r0
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	1c5a      	adds	r2, r3, #1
 80040c8:	60ba      	str	r2, [r7, #8]
 80040ca:	b2ca      	uxtb	r2, r1
 80040cc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	3301      	adds	r3, #1
 80040d2:	617b      	str	r3, [r7, #20]
 80040d4:	697a      	ldr	r2, [r7, #20]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	429a      	cmp	r2, r3
 80040da:	dbf0      	blt.n	80040be <_read+0x12>
  }

  return len;
 80040dc:	687b      	ldr	r3, [r7, #4]
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3718      	adds	r7, #24
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}

080040e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80040e6:	b580      	push	{r7, lr}
 80040e8:	b086      	sub	sp, #24
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	60f8      	str	r0, [r7, #12]
 80040ee:	60b9      	str	r1, [r7, #8]
 80040f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040f2:	2300      	movs	r3, #0
 80040f4:	617b      	str	r3, [r7, #20]
 80040f6:	e009      	b.n	800410c <_write+0x26>
  {
    __io_putchar(*ptr++);
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	1c5a      	adds	r2, r3, #1
 80040fc:	60ba      	str	r2, [r7, #8]
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	4618      	mov	r0, r3
 8004102:	f7ff fb27 	bl	8003754 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	3301      	adds	r3, #1
 800410a:	617b      	str	r3, [r7, #20]
 800410c:	697a      	ldr	r2, [r7, #20]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	429a      	cmp	r2, r3
 8004112:	dbf1      	blt.n	80040f8 <_write+0x12>
  }
  return len;
 8004114:	687b      	ldr	r3, [r7, #4]
}
 8004116:	4618      	mov	r0, r3
 8004118:	3718      	adds	r7, #24
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}

0800411e <_close>:

int _close(int file)
{
 800411e:	b480      	push	{r7}
 8004120:	b083      	sub	sp, #12
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004126:	f04f 33ff 	mov.w	r3, #4294967295
}
 800412a:	4618      	mov	r0, r3
 800412c:	370c      	adds	r7, #12
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr

08004136 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004136:	b480      	push	{r7}
 8004138:	b083      	sub	sp, #12
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
 800413e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004146:	605a      	str	r2, [r3, #4]
  return 0;
 8004148:	2300      	movs	r3, #0
}
 800414a:	4618      	mov	r0, r3
 800414c:	370c      	adds	r7, #12
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr

08004156 <_isatty>:

int _isatty(int file)
{
 8004156:	b480      	push	{r7}
 8004158:	b083      	sub	sp, #12
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800415e:	2301      	movs	r3, #1
}
 8004160:	4618      	mov	r0, r3
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800416c:	b480      	push	{r7}
 800416e:	b085      	sub	sp, #20
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3714      	adds	r7, #20
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
	...

08004188 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b086      	sub	sp, #24
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004190:	4a14      	ldr	r2, [pc, #80]	@ (80041e4 <_sbrk+0x5c>)
 8004192:	4b15      	ldr	r3, [pc, #84]	@ (80041e8 <_sbrk+0x60>)
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800419c:	4b13      	ldr	r3, [pc, #76]	@ (80041ec <_sbrk+0x64>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d102      	bne.n	80041aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80041a4:	4b11      	ldr	r3, [pc, #68]	@ (80041ec <_sbrk+0x64>)
 80041a6:	4a12      	ldr	r2, [pc, #72]	@ (80041f0 <_sbrk+0x68>)
 80041a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80041aa:	4b10      	ldr	r3, [pc, #64]	@ (80041ec <_sbrk+0x64>)
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4413      	add	r3, r2
 80041b2:	693a      	ldr	r2, [r7, #16]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d207      	bcs.n	80041c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80041b8:	f00b ff3c 	bl	8010034 <__errno>
 80041bc:	4603      	mov	r3, r0
 80041be:	220c      	movs	r2, #12
 80041c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80041c2:	f04f 33ff 	mov.w	r3, #4294967295
 80041c6:	e009      	b.n	80041dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80041c8:	4b08      	ldr	r3, [pc, #32]	@ (80041ec <_sbrk+0x64>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80041ce:	4b07      	ldr	r3, [pc, #28]	@ (80041ec <_sbrk+0x64>)
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4413      	add	r3, r2
 80041d6:	4a05      	ldr	r2, [pc, #20]	@ (80041ec <_sbrk+0x64>)
 80041d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80041da:	68fb      	ldr	r3, [r7, #12]
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3718      	adds	r7, #24
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	20040000 	.word	0x20040000
 80041e8:	00000400 	.word	0x00000400
 80041ec:	200003fc 	.word	0x200003fc
 80041f0:	200008f0 	.word	0x200008f0

080041f4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80041f4:	b480      	push	{r7}
 80041f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80041f8:	4b18      	ldr	r3, [pc, #96]	@ (800425c <SystemInit+0x68>)
 80041fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041fe:	4a17      	ldr	r2, [pc, #92]	@ (800425c <SystemInit+0x68>)
 8004200:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004204:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8004208:	4b15      	ldr	r3, [pc, #84]	@ (8004260 <SystemInit+0x6c>)
 800420a:	2201      	movs	r2, #1
 800420c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800420e:	4b14      	ldr	r3, [pc, #80]	@ (8004260 <SystemInit+0x6c>)
 8004210:	2200      	movs	r2, #0
 8004212:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8004214:	4b12      	ldr	r3, [pc, #72]	@ (8004260 <SystemInit+0x6c>)
 8004216:	2200      	movs	r2, #0
 8004218:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 800421a:	4b11      	ldr	r3, [pc, #68]	@ (8004260 <SystemInit+0x6c>)
 800421c:	2200      	movs	r2, #0
 800421e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8004220:	4b0f      	ldr	r3, [pc, #60]	@ (8004260 <SystemInit+0x6c>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a0e      	ldr	r2, [pc, #56]	@ (8004260 <SystemInit+0x6c>)
 8004226:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 800422a:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 800422e:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8004230:	4b0b      	ldr	r3, [pc, #44]	@ (8004260 <SystemInit+0x6c>)
 8004232:	2200      	movs	r2, #0
 8004234:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8004236:	4b0a      	ldr	r3, [pc, #40]	@ (8004260 <SystemInit+0x6c>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a09      	ldr	r2, [pc, #36]	@ (8004260 <SystemInit+0x6c>)
 800423c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004240:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8004242:	4b07      	ldr	r3, [pc, #28]	@ (8004260 <SystemInit+0x6c>)
 8004244:	2200      	movs	r2, #0
 8004246:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004248:	4b04      	ldr	r3, [pc, #16]	@ (800425c <SystemInit+0x68>)
 800424a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800424e:	609a      	str	r2, [r3, #8]
  #endif
}
 8004250:	bf00      	nop
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop
 800425c:	e000ed00 	.word	0xe000ed00
 8004260:	46020c00 	.word	0x46020c00

08004264 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004264:	480d      	ldr	r0, [pc, #52]	@ (800429c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004266:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004268:	f7ff ffc4 	bl	80041f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800426c:	480c      	ldr	r0, [pc, #48]	@ (80042a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800426e:	490d      	ldr	r1, [pc, #52]	@ (80042a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004270:	4a0d      	ldr	r2, [pc, #52]	@ (80042a8 <LoopForever+0xe>)
  movs r3, #0
 8004272:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004274:	e002      	b.n	800427c <LoopCopyDataInit>

08004276 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004276:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004278:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800427a:	3304      	adds	r3, #4

0800427c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800427c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800427e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004280:	d3f9      	bcc.n	8004276 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004282:	4a0a      	ldr	r2, [pc, #40]	@ (80042ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8004284:	4c0a      	ldr	r4, [pc, #40]	@ (80042b0 <LoopForever+0x16>)
  movs r3, #0
 8004286:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004288:	e001      	b.n	800428e <LoopFillZerobss>

0800428a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800428a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800428c:	3204      	adds	r2, #4

0800428e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800428e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004290:	d3fb      	bcc.n	800428a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004292:	f00b fed5 	bl	8010040 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004296:	f7ff fac3 	bl	8003820 <main>

0800429a <LoopForever>:

LoopForever:
    b LoopForever
 800429a:	e7fe      	b.n	800429a <LoopForever>
  ldr   r0, =_estack
 800429c:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 80042a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80042a4:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 80042a8:	0801516c 	.word	0x0801516c
  ldr r2, =_sbss
 80042ac:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 80042b0:	200008ec 	.word	0x200008ec

080042b4 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80042b4:	e7fe      	b.n	80042b4 <ADC1_IRQHandler>
	...

080042b8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80042bc:	4b12      	ldr	r3, [pc, #72]	@ (8004308 <HAL_Init+0x50>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a11      	ldr	r2, [pc, #68]	@ (8004308 <HAL_Init+0x50>)
 80042c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80042c8:	2003      	movs	r0, #3
 80042ca:	f000 f98c 	bl	80045e6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80042ce:	f001 ff05 	bl	80060dc <HAL_RCC_GetSysClockFreq>
 80042d2:	4602      	mov	r2, r0
 80042d4:	4b0d      	ldr	r3, [pc, #52]	@ (800430c <HAL_Init+0x54>)
 80042d6:	6a1b      	ldr	r3, [r3, #32]
 80042d8:	f003 030f 	and.w	r3, r3, #15
 80042dc:	490c      	ldr	r1, [pc, #48]	@ (8004310 <HAL_Init+0x58>)
 80042de:	5ccb      	ldrb	r3, [r1, r3]
 80042e0:	fa22 f303 	lsr.w	r3, r2, r3
 80042e4:	4a0b      	ldr	r2, [pc, #44]	@ (8004314 <HAL_Init+0x5c>)
 80042e6:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80042e8:	2004      	movs	r0, #4
 80042ea:	f000 f9d1 	bl	8004690 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80042ee:	200f      	movs	r0, #15
 80042f0:	f000 f812 	bl	8004318 <HAL_InitTick>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d001      	beq.n	80042fe <HAL_Init+0x46>
  {
    return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e002      	b.n	8004304 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80042fe:	f7ff fd21 	bl	8003d44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004302:	2300      	movs	r3, #0
}
 8004304:	4618      	mov	r0, r3
 8004306:	bd80      	pop	{r7, pc}
 8004308:	40022000 	.word	0x40022000
 800430c:	46020c00 	.word	0x46020c00
 8004310:	080145e0 	.word	0x080145e0
 8004314:	2000000c 	.word	0x2000000c

08004318 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8004320:	2300      	movs	r3, #0
 8004322:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8004324:	4b33      	ldr	r3, [pc, #204]	@ (80043f4 <HAL_InitTick+0xdc>)
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d101      	bne.n	8004330 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e05c      	b.n	80043ea <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8004330:	4b31      	ldr	r3, [pc, #196]	@ (80043f8 <HAL_InitTick+0xe0>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0304 	and.w	r3, r3, #4
 8004338:	2b04      	cmp	r3, #4
 800433a:	d10c      	bne.n	8004356 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 800433c:	4b2f      	ldr	r3, [pc, #188]	@ (80043fc <HAL_InitTick+0xe4>)
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	4b2c      	ldr	r3, [pc, #176]	@ (80043f4 <HAL_InitTick+0xdc>)
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	4619      	mov	r1, r3
 8004346:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800434a:	fbb3 f3f1 	udiv	r3, r3, r1
 800434e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004352:	60fb      	str	r3, [r7, #12]
 8004354:	e037      	b.n	80043c6 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8004356:	f000 f9f3 	bl	8004740 <HAL_SYSTICK_GetCLKSourceConfig>
 800435a:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	2b02      	cmp	r3, #2
 8004360:	d023      	beq.n	80043aa <HAL_InitTick+0x92>
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	2b02      	cmp	r3, #2
 8004366:	d82d      	bhi.n	80043c4 <HAL_InitTick+0xac>
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d003      	beq.n	8004376 <HAL_InitTick+0x5e>
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	2b01      	cmp	r3, #1
 8004372:	d00d      	beq.n	8004390 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8004374:	e026      	b.n	80043c4 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8004376:	4b21      	ldr	r3, [pc, #132]	@ (80043fc <HAL_InitTick+0xe4>)
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	4b1e      	ldr	r3, [pc, #120]	@ (80043f4 <HAL_InitTick+0xdc>)
 800437c:	781b      	ldrb	r3, [r3, #0]
 800437e:	4619      	mov	r1, r3
 8004380:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8004384:	fbb3 f3f1 	udiv	r3, r3, r1
 8004388:	fbb2 f3f3 	udiv	r3, r2, r3
 800438c:	60fb      	str	r3, [r7, #12]
        break;
 800438e:	e01a      	b.n	80043c6 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8004390:	4b18      	ldr	r3, [pc, #96]	@ (80043f4 <HAL_InitTick+0xdc>)
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	461a      	mov	r2, r3
 8004396:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800439a:	fbb3 f3f2 	udiv	r3, r3, r2
 800439e:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80043a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a6:	60fb      	str	r3, [r7, #12]
        break;
 80043a8:	e00d      	b.n	80043c6 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80043aa:	4b12      	ldr	r3, [pc, #72]	@ (80043f4 <HAL_InitTick+0xdc>)
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	461a      	mov	r2, r3
 80043b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80043b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80043b8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80043bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c0:	60fb      	str	r3, [r7, #12]
        break;
 80043c2:	e000      	b.n	80043c6 <HAL_InitTick+0xae>
        break;
 80043c4:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 80043c6:	68f8      	ldr	r0, [r7, #12]
 80043c8:	f000 f940 	bl	800464c <HAL_SYSTICK_Config>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d001      	beq.n	80043d6 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e009      	b.n	80043ea <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80043d6:	2200      	movs	r2, #0
 80043d8:	6879      	ldr	r1, [r7, #4]
 80043da:	f04f 30ff 	mov.w	r0, #4294967295
 80043de:	f000 f90d 	bl	80045fc <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 80043e2:	4a07      	ldr	r2, [pc, #28]	@ (8004400 <HAL_InitTick+0xe8>)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3710      	adds	r7, #16
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	20000014 	.word	0x20000014
 80043f8:	e000e010 	.word	0xe000e010
 80043fc:	2000000c 	.word	0x2000000c
 8004400:	20000010 	.word	0x20000010

08004404 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004404:	b480      	push	{r7}
 8004406:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004408:	4b06      	ldr	r3, [pc, #24]	@ (8004424 <HAL_IncTick+0x20>)
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	461a      	mov	r2, r3
 800440e:	4b06      	ldr	r3, [pc, #24]	@ (8004428 <HAL_IncTick+0x24>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4413      	add	r3, r2
 8004414:	4a04      	ldr	r2, [pc, #16]	@ (8004428 <HAL_IncTick+0x24>)
 8004416:	6013      	str	r3, [r2, #0]
}
 8004418:	bf00      	nop
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop
 8004424:	20000014 	.word	0x20000014
 8004428:	20000400 	.word	0x20000400

0800442c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800442c:	b480      	push	{r7}
 800442e:	af00      	add	r7, sp, #0
  return uwTick;
 8004430:	4b03      	ldr	r3, [pc, #12]	@ (8004440 <HAL_GetTick+0x14>)
 8004432:	681b      	ldr	r3, [r3, #0]
}
 8004434:	4618      	mov	r0, r3
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	20000400 	.word	0x20000400

08004444 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800444c:	f7ff ffee 	bl	800442c <HAL_GetTick>
 8004450:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800445c:	d005      	beq.n	800446a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800445e:	4b0a      	ldr	r3, [pc, #40]	@ (8004488 <HAL_Delay+0x44>)
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	461a      	mov	r2, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	4413      	add	r3, r2
 8004468:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800446a:	bf00      	nop
 800446c:	f7ff ffde 	bl	800442c <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	429a      	cmp	r2, r3
 800447a:	d8f7      	bhi.n	800446c <HAL_Delay+0x28>
  {
  }
}
 800447c:	bf00      	nop
 800447e:	bf00      	nop
 8004480:	3710      	adds	r7, #16
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	20000014 	.word	0x20000014

0800448c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800448c:	b480      	push	{r7}
 800448e:	b085      	sub	sp, #20
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f003 0307 	and.w	r3, r3, #7
 800449a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800449c:	4b0c      	ldr	r3, [pc, #48]	@ (80044d0 <__NVIC_SetPriorityGrouping+0x44>)
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044a2:	68ba      	ldr	r2, [r7, #8]
 80044a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80044a8:	4013      	ands	r3, r2
 80044aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80044b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044be:	4a04      	ldr	r2, [pc, #16]	@ (80044d0 <__NVIC_SetPriorityGrouping+0x44>)
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	60d3      	str	r3, [r2, #12]
}
 80044c4:	bf00      	nop
 80044c6:	3714      	adds	r7, #20
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr
 80044d0:	e000ed00 	.word	0xe000ed00

080044d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044d4:	b480      	push	{r7}
 80044d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044d8:	4b04      	ldr	r3, [pc, #16]	@ (80044ec <__NVIC_GetPriorityGrouping+0x18>)
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	0a1b      	lsrs	r3, r3, #8
 80044de:	f003 0307 	and.w	r3, r3, #7
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr
 80044ec:	e000ed00 	.word	0xe000ed00

080044f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	4603      	mov	r3, r0
 80044f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	db0b      	blt.n	800451a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004502:	79fb      	ldrb	r3, [r7, #7]
 8004504:	f003 021f 	and.w	r2, r3, #31
 8004508:	4907      	ldr	r1, [pc, #28]	@ (8004528 <__NVIC_EnableIRQ+0x38>)
 800450a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800450e:	095b      	lsrs	r3, r3, #5
 8004510:	2001      	movs	r0, #1
 8004512:	fa00 f202 	lsl.w	r2, r0, r2
 8004516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800451a:	bf00      	nop
 800451c:	370c      	adds	r7, #12
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	e000e100 	.word	0xe000e100

0800452c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	4603      	mov	r3, r0
 8004534:	6039      	str	r1, [r7, #0]
 8004536:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800453c:	2b00      	cmp	r3, #0
 800453e:	db0a      	blt.n	8004556 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	b2da      	uxtb	r2, r3
 8004544:	490c      	ldr	r1, [pc, #48]	@ (8004578 <__NVIC_SetPriority+0x4c>)
 8004546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800454a:	0112      	lsls	r2, r2, #4
 800454c:	b2d2      	uxtb	r2, r2
 800454e:	440b      	add	r3, r1
 8004550:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004554:	e00a      	b.n	800456c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	b2da      	uxtb	r2, r3
 800455a:	4908      	ldr	r1, [pc, #32]	@ (800457c <__NVIC_SetPriority+0x50>)
 800455c:	79fb      	ldrb	r3, [r7, #7]
 800455e:	f003 030f 	and.w	r3, r3, #15
 8004562:	3b04      	subs	r3, #4
 8004564:	0112      	lsls	r2, r2, #4
 8004566:	b2d2      	uxtb	r2, r2
 8004568:	440b      	add	r3, r1
 800456a:	761a      	strb	r2, [r3, #24]
}
 800456c:	bf00      	nop
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr
 8004578:	e000e100 	.word	0xe000e100
 800457c:	e000ed00 	.word	0xe000ed00

08004580 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004580:	b480      	push	{r7}
 8004582:	b089      	sub	sp, #36	@ 0x24
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f003 0307 	and.w	r3, r3, #7
 8004592:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	f1c3 0307 	rsb	r3, r3, #7
 800459a:	2b04      	cmp	r3, #4
 800459c:	bf28      	it	cs
 800459e:	2304      	movcs	r3, #4
 80045a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	3304      	adds	r3, #4
 80045a6:	2b06      	cmp	r3, #6
 80045a8:	d902      	bls.n	80045b0 <NVIC_EncodePriority+0x30>
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	3b03      	subs	r3, #3
 80045ae:	e000      	b.n	80045b2 <NVIC_EncodePriority+0x32>
 80045b0:	2300      	movs	r3, #0
 80045b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045b4:	f04f 32ff 	mov.w	r2, #4294967295
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	fa02 f303 	lsl.w	r3, r2, r3
 80045be:	43da      	mvns	r2, r3
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	401a      	ands	r2, r3
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045c8:	f04f 31ff 	mov.w	r1, #4294967295
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	fa01 f303 	lsl.w	r3, r1, r3
 80045d2:	43d9      	mvns	r1, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045d8:	4313      	orrs	r3, r2
         );
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3724      	adds	r7, #36	@ 0x24
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr

080045e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045e6:	b580      	push	{r7, lr}
 80045e8:	b082      	sub	sp, #8
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f7ff ff4c 	bl	800448c <__NVIC_SetPriorityGrouping>
}
 80045f4:	bf00      	nop
 80045f6:	3708      	adds	r7, #8
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b086      	sub	sp, #24
 8004600:	af00      	add	r7, sp, #0
 8004602:	4603      	mov	r3, r0
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	607a      	str	r2, [r7, #4]
 8004608:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800460a:	f7ff ff63 	bl	80044d4 <__NVIC_GetPriorityGrouping>
 800460e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	68b9      	ldr	r1, [r7, #8]
 8004614:	6978      	ldr	r0, [r7, #20]
 8004616:	f7ff ffb3 	bl	8004580 <NVIC_EncodePriority>
 800461a:	4602      	mov	r2, r0
 800461c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004620:	4611      	mov	r1, r2
 8004622:	4618      	mov	r0, r3
 8004624:	f7ff ff82 	bl	800452c <__NVIC_SetPriority>
}
 8004628:	bf00      	nop
 800462a:	3718      	adds	r7, #24
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b082      	sub	sp, #8
 8004634:	af00      	add	r7, sp, #0
 8004636:	4603      	mov	r3, r0
 8004638:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800463a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800463e:	4618      	mov	r0, r3
 8004640:	f7ff ff56 	bl	80044f0 <__NVIC_EnableIRQ>
}
 8004644:	bf00      	nop
 8004646:	3708      	adds	r7, #8
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	3b01      	subs	r3, #1
 8004658:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800465c:	d301      	bcc.n	8004662 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 800465e:	2301      	movs	r3, #1
 8004660:	e00d      	b.n	800467e <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8004662:	4a0a      	ldr	r2, [pc, #40]	@ (800468c <HAL_SYSTICK_Config+0x40>)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	3b01      	subs	r3, #1
 8004668:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 800466a:	4b08      	ldr	r3, [pc, #32]	@ (800468c <HAL_SYSTICK_Config+0x40>)
 800466c:	2200      	movs	r2, #0
 800466e:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8004670:	4b06      	ldr	r3, [pc, #24]	@ (800468c <HAL_SYSTICK_Config+0x40>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a05      	ldr	r2, [pc, #20]	@ (800468c <HAL_SYSTICK_Config+0x40>)
 8004676:	f043 0303 	orr.w	r3, r3, #3
 800467a:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	370c      	adds	r7, #12
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	e000e010 	.word	0xe000e010

08004690 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2b04      	cmp	r3, #4
 800469c:	d844      	bhi.n	8004728 <HAL_SYSTICK_CLKSourceConfig+0x98>
 800469e:	a201      	add	r2, pc, #4	@ (adr r2, 80046a4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80046a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a4:	080046c7 	.word	0x080046c7
 80046a8:	080046e5 	.word	0x080046e5
 80046ac:	08004707 	.word	0x08004707
 80046b0:	08004729 	.word	0x08004729
 80046b4:	080046b9 	.word	0x080046b9
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80046b8:	4b1f      	ldr	r3, [pc, #124]	@ (8004738 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a1e      	ldr	r2, [pc, #120]	@ (8004738 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80046be:	f043 0304 	orr.w	r3, r3, #4
 80046c2:	6013      	str	r3, [r2, #0]
      break;
 80046c4:	e031      	b.n	800472a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80046c6:	4b1c      	ldr	r3, [pc, #112]	@ (8004738 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a1b      	ldr	r2, [pc, #108]	@ (8004738 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80046cc:	f023 0304 	bic.w	r3, r3, #4
 80046d0:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 80046d2:	4b1a      	ldr	r3, [pc, #104]	@ (800473c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80046d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80046d8:	4a18      	ldr	r2, [pc, #96]	@ (800473c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80046da:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80046de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80046e2:	e022      	b.n	800472a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80046e4:	4b14      	ldr	r3, [pc, #80]	@ (8004738 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a13      	ldr	r2, [pc, #76]	@ (8004738 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80046ea:	f023 0304 	bic.w	r3, r3, #4
 80046ee:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 80046f0:	4b12      	ldr	r3, [pc, #72]	@ (800473c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80046f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80046f6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80046fa:	4a10      	ldr	r2, [pc, #64]	@ (800473c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80046fc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004700:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8004704:	e011      	b.n	800472a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8004706:	4b0c      	ldr	r3, [pc, #48]	@ (8004738 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a0b      	ldr	r2, [pc, #44]	@ (8004738 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800470c:	f023 0304 	bic.w	r3, r3, #4
 8004710:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8004712:	4b0a      	ldr	r3, [pc, #40]	@ (800473c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004714:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004718:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800471c:	4a07      	ldr	r2, [pc, #28]	@ (800473c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800471e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004722:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8004726:	e000      	b.n	800472a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8004728:	bf00      	nop
  }
}
 800472a:	bf00      	nop
 800472c:	370c      	adds	r7, #12
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr
 8004736:	bf00      	nop
 8004738:	e000e010 	.word	0xe000e010
 800473c:	46020c00 	.word	0x46020c00

08004740 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8004746:	4b19      	ldr	r3, [pc, #100]	@ (80047ac <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0304 	and.w	r3, r3, #4
 800474e:	2b00      	cmp	r3, #0
 8004750:	d002      	beq.n	8004758 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8004752:	2304      	movs	r3, #4
 8004754:	607b      	str	r3, [r7, #4]
 8004756:	e021      	b.n	800479c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8004758:	4b15      	ldr	r3, [pc, #84]	@ (80047b0 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 800475a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800475e:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8004762:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800476a:	d011      	beq.n	8004790 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004772:	d810      	bhi.n	8004796 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d004      	beq.n	8004784 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004780:	d003      	beq.n	800478a <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8004782:	e008      	b.n	8004796 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8004784:	2300      	movs	r3, #0
 8004786:	607b      	str	r3, [r7, #4]
        break;
 8004788:	e008      	b.n	800479c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 800478a:	2301      	movs	r3, #1
 800478c:	607b      	str	r3, [r7, #4]
        break;
 800478e:	e005      	b.n	800479c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8004790:	2302      	movs	r3, #2
 8004792:	607b      	str	r3, [r7, #4]
        break;
 8004794:	e002      	b.n	800479c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8004796:	2300      	movs	r3, #0
 8004798:	607b      	str	r3, [r7, #4]
        break;
 800479a:	bf00      	nop
    }
  }
  return systick_source;
 800479c:	687b      	ldr	r3, [r7, #4]
}
 800479e:	4618      	mov	r0, r3
 80047a0:	370c      	adds	r7, #12
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	e000e010 	.word	0xe000e010
 80047b0:	46020c00 	.word	0x46020c00

080047b4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d101      	bne.n	80047c6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e054      	b.n	8004870 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	7f5b      	ldrb	r3, [r3, #29]
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d105      	bne.n	80047dc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f7ff face 	bl	8003d78 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2202      	movs	r2, #2
 80047e0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	791b      	ldrb	r3, [r3, #4]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d10c      	bne.n	8004804 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a22      	ldr	r2, [pc, #136]	@ (8004878 <HAL_CRC_Init+0xc4>)
 80047f0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	689a      	ldr	r2, [r3, #8]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f022 0218 	bic.w	r2, r2, #24
 8004800:	609a      	str	r2, [r3, #8]
 8004802:	e00c      	b.n	800481e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6899      	ldr	r1, [r3, #8]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	461a      	mov	r2, r3
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 f834 	bl	800487c <HAL_CRCEx_Polynomial_Set>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d001      	beq.n	800481e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e028      	b.n	8004870 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	795b      	ldrb	r3, [r3, #5]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d105      	bne.n	8004832 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f04f 32ff 	mov.w	r2, #4294967295
 800482e:	611a      	str	r2, [r3, #16]
 8004830:	e004      	b.n	800483c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	6912      	ldr	r2, [r2, #16]
 800483a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	695a      	ldr	r2, [r3, #20]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	430a      	orrs	r2, r1
 8004850:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	699a      	ldr	r2, [r3, #24]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	430a      	orrs	r2, r1
 8004866:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	3708      	adds	r7, #8
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}
 8004878:	04c11db7 	.word	0x04c11db7

0800487c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800487c:	b480      	push	{r7}
 800487e:	b087      	sub	sp, #28
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004888:	2300      	movs	r3, #0
 800488a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800488c:	231f      	movs	r3, #31
 800488e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	f003 0301 	and.w	r3, r3, #1
 8004896:	2b00      	cmp	r3, #0
 8004898:	d102      	bne.n	80048a0 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	75fb      	strb	r3, [r7, #23]
 800489e:	e063      	b.n	8004968 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80048a0:	bf00      	nop
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	1e5a      	subs	r2, r3, #1
 80048a6:	613a      	str	r2, [r7, #16]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d009      	beq.n	80048c0 <HAL_CRCEx_Polynomial_Set+0x44>
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	f003 031f 	and.w	r3, r3, #31
 80048b2:	68ba      	ldr	r2, [r7, #8]
 80048b4:	fa22 f303 	lsr.w	r3, r2, r3
 80048b8:	f003 0301 	and.w	r3, r3, #1
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d0f0      	beq.n	80048a2 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2b18      	cmp	r3, #24
 80048c4:	d846      	bhi.n	8004954 <HAL_CRCEx_Polynomial_Set+0xd8>
 80048c6:	a201      	add	r2, pc, #4	@ (adr r2, 80048cc <HAL_CRCEx_Polynomial_Set+0x50>)
 80048c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048cc:	0800495b 	.word	0x0800495b
 80048d0:	08004955 	.word	0x08004955
 80048d4:	08004955 	.word	0x08004955
 80048d8:	08004955 	.word	0x08004955
 80048dc:	08004955 	.word	0x08004955
 80048e0:	08004955 	.word	0x08004955
 80048e4:	08004955 	.word	0x08004955
 80048e8:	08004955 	.word	0x08004955
 80048ec:	08004949 	.word	0x08004949
 80048f0:	08004955 	.word	0x08004955
 80048f4:	08004955 	.word	0x08004955
 80048f8:	08004955 	.word	0x08004955
 80048fc:	08004955 	.word	0x08004955
 8004900:	08004955 	.word	0x08004955
 8004904:	08004955 	.word	0x08004955
 8004908:	08004955 	.word	0x08004955
 800490c:	0800493d 	.word	0x0800493d
 8004910:	08004955 	.word	0x08004955
 8004914:	08004955 	.word	0x08004955
 8004918:	08004955 	.word	0x08004955
 800491c:	08004955 	.word	0x08004955
 8004920:	08004955 	.word	0x08004955
 8004924:	08004955 	.word	0x08004955
 8004928:	08004955 	.word	0x08004955
 800492c:	08004931 	.word	0x08004931
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	2b06      	cmp	r3, #6
 8004934:	d913      	bls.n	800495e <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800493a:	e010      	b.n	800495e <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	2b07      	cmp	r3, #7
 8004940:	d90f      	bls.n	8004962 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004946:	e00c      	b.n	8004962 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	2b0f      	cmp	r3, #15
 800494c:	d90b      	bls.n	8004966 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004952:	e008      	b.n	8004966 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	75fb      	strb	r3, [r7, #23]
        break;
 8004958:	e006      	b.n	8004968 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800495a:	bf00      	nop
 800495c:	e004      	b.n	8004968 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800495e:	bf00      	nop
 8004960:	e002      	b.n	8004968 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004962:	bf00      	nop
 8004964:	e000      	b.n	8004968 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004966:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8004968:	7dfb      	ldrb	r3, [r7, #23]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d10d      	bne.n	800498a <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	68ba      	ldr	r2, [r7, #8]
 8004974:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f023 0118 	bic.w	r1, r3, #24
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	430a      	orrs	r2, r1
 8004988:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800498a:	7dfb      	ldrb	r3, [r7, #23]
}
 800498c:	4618      	mov	r0, r3
 800498e:	371c      	adds	r7, #28
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8004998:	b480      	push	{r7}
 800499a:	b089      	sub	sp, #36	@ 0x24
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80049a2:	2300      	movs	r3, #0
 80049a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80049aa:	e1ba      	b.n	8004d22 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	2101      	movs	r1, #1
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	fa01 f303 	lsl.w	r3, r1, r3
 80049b8:	4013      	ands	r3, r2
 80049ba:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	f000 81aa 	beq.w	8004d1c <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4a55      	ldr	r2, [pc, #340]	@ (8004b20 <HAL_GPIO_Init+0x188>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d15d      	bne.n	8004a8c <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80049d6:	2201      	movs	r2, #1
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	fa02 f303 	lsl.w	r3, r2, r3
 80049de:	43db      	mvns	r3, r3
 80049e0:	69fa      	ldr	r2, [r7, #28]
 80049e2:	4013      	ands	r3, r2
 80049e4:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	f003 0201 	and.w	r2, r3, #1
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	fa02 f303 	lsl.w	r3, r2, r3
 80049f4:	69fa      	ldr	r2, [r7, #28]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	69fa      	ldr	r2, [r7, #28]
 80049fe:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8004a00:	4a48      	ldr	r2, [pc, #288]	@ (8004b24 <HAL_GPIO_Init+0x18c>)
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004a08:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8004a0a:	4a46      	ldr	r2, [pc, #280]	@ (8004b24 <HAL_GPIO_Init+0x18c>)
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	00db      	lsls	r3, r3, #3
 8004a10:	4413      	add	r3, r2
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	08da      	lsrs	r2, r3, #3
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	3208      	adds	r2, #8
 8004a1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a22:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	f003 0307 	and.w	r3, r3, #7
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	220f      	movs	r2, #15
 8004a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a32:	43db      	mvns	r3, r3
 8004a34:	69fa      	ldr	r2, [r7, #28]
 8004a36:	4013      	ands	r3, r2
 8004a38:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	f003 0307 	and.w	r3, r3, #7
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	220b      	movs	r2, #11
 8004a44:	fa02 f303 	lsl.w	r3, r2, r3
 8004a48:	69fa      	ldr	r2, [r7, #28]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	08da      	lsrs	r2, r3, #3
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	3208      	adds	r2, #8
 8004a56:	69f9      	ldr	r1, [r7, #28]
 8004a58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	005b      	lsls	r3, r3, #1
 8004a66:	2203      	movs	r2, #3
 8004a68:	fa02 f303 	lsl.w	r3, r2, r3
 8004a6c:	43db      	mvns	r3, r3
 8004a6e:	69fa      	ldr	r2, [r7, #28]
 8004a70:	4013      	ands	r3, r2
 8004a72:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	005b      	lsls	r3, r3, #1
 8004a78:	2202      	movs	r2, #2
 8004a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a7e:	69fa      	ldr	r2, [r7, #28]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	69fa      	ldr	r2, [r7, #28]
 8004a88:	601a      	str	r2, [r3, #0]
 8004a8a:	e067      	b.n	8004b5c <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	2b02      	cmp	r3, #2
 8004a92:	d003      	beq.n	8004a9c <HAL_GPIO_Init+0x104>
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	2b12      	cmp	r3, #18
 8004a9a:	d145      	bne.n	8004b28 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	08da      	lsrs	r2, r3, #3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	3208      	adds	r2, #8
 8004aa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004aa8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	f003 0307 	and.w	r3, r3, #7
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	220f      	movs	r2, #15
 8004ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab8:	43db      	mvns	r3, r3
 8004aba:	69fa      	ldr	r2, [r7, #28]
 8004abc:	4013      	ands	r3, r2
 8004abe:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	691b      	ldr	r3, [r3, #16]
 8004ac4:	f003 020f 	and.w	r2, r3, #15
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	f003 0307 	and.w	r3, r3, #7
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad4:	69fa      	ldr	r2, [r7, #28]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	08da      	lsrs	r2, r3, #3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	3208      	adds	r2, #8
 8004ae2:	69f9      	ldr	r1, [r7, #28]
 8004ae4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	005b      	lsls	r3, r3, #1
 8004af2:	2203      	movs	r2, #3
 8004af4:	fa02 f303 	lsl.w	r3, r2, r3
 8004af8:	43db      	mvns	r3, r3
 8004afa:	69fa      	ldr	r2, [r7, #28]
 8004afc:	4013      	ands	r3, r2
 8004afe:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	f003 0203 	and.w	r2, r3, #3
 8004b08:	69bb      	ldr	r3, [r7, #24]
 8004b0a:	005b      	lsls	r3, r3, #1
 8004b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b10:	69fa      	ldr	r2, [r7, #28]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	69fa      	ldr	r2, [r7, #28]
 8004b1a:	601a      	str	r2, [r3, #0]
 8004b1c:	e01e      	b.n	8004b5c <HAL_GPIO_Init+0x1c4>
 8004b1e:	bf00      	nop
 8004b20:	46020000 	.word	0x46020000
 8004b24:	08014638 	.word	0x08014638
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	005b      	lsls	r3, r3, #1
 8004b32:	2203      	movs	r2, #3
 8004b34:	fa02 f303 	lsl.w	r3, r2, r3
 8004b38:	43db      	mvns	r3, r3
 8004b3a:	69fa      	ldr	r2, [r7, #28]
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	f003 0203 	and.w	r2, r3, #3
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	005b      	lsls	r3, r3, #1
 8004b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b50:	69fa      	ldr	r2, [r7, #28]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	69fa      	ldr	r2, [r7, #28]
 8004b5a:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d00b      	beq.n	8004b7c <HAL_GPIO_Init+0x1e4>
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d007      	beq.n	8004b7c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004b70:	2b11      	cmp	r3, #17
 8004b72:	d003      	beq.n	8004b7c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	2b12      	cmp	r3, #18
 8004b7a:	d130      	bne.n	8004bde <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	005b      	lsls	r3, r3, #1
 8004b86:	2203      	movs	r2, #3
 8004b88:	fa02 f303 	lsl.w	r3, r2, r3
 8004b8c:	43db      	mvns	r3, r3
 8004b8e:	69fa      	ldr	r2, [r7, #28]
 8004b90:	4013      	ands	r3, r2
 8004b92:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	68da      	ldr	r2, [r3, #12]
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	005b      	lsls	r3, r3, #1
 8004b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba0:	69fa      	ldr	r2, [r7, #28]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	69fa      	ldr	r2, [r7, #28]
 8004baa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	69bb      	ldr	r3, [r7, #24]
 8004bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bba:	43db      	mvns	r3, r3
 8004bbc:	69fa      	ldr	r2, [r7, #28]
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	091b      	lsrs	r3, r3, #4
 8004bc8:	f003 0201 	and.w	r2, r3, #1
 8004bcc:	69bb      	ldr	r3, [r7, #24]
 8004bce:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd2:	69fa      	ldr	r2, [r7, #28]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	69fa      	ldr	r2, [r7, #28]
 8004bdc:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	2b03      	cmp	r3, #3
 8004be4:	d017      	beq.n	8004c16 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8004bec:	69bb      	ldr	r3, [r7, #24]
 8004bee:	005b      	lsls	r3, r3, #1
 8004bf0:	2203      	movs	r2, #3
 8004bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf6:	43db      	mvns	r3, r3
 8004bf8:	69fa      	ldr	r2, [r7, #28]
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	689a      	ldr	r2, [r3, #8]
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	005b      	lsls	r3, r3, #1
 8004c06:	fa02 f303 	lsl.w	r3, r2, r3
 8004c0a:	69fa      	ldr	r2, [r7, #28]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	69fa      	ldr	r2, [r7, #28]
 8004c14:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d07c      	beq.n	8004d1c <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8004c22:	4a47      	ldr	r2, [pc, #284]	@ (8004d40 <HAL_GPIO_Init+0x3a8>)
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	089b      	lsrs	r3, r3, #2
 8004c28:	3318      	adds	r3, #24
 8004c2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c2e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	f003 0303 	and.w	r3, r3, #3
 8004c36:	00db      	lsls	r3, r3, #3
 8004c38:	220f      	movs	r2, #15
 8004c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c3e:	43db      	mvns	r3, r3
 8004c40:	69fa      	ldr	r2, [r7, #28]
 8004c42:	4013      	ands	r3, r2
 8004c44:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	0a9a      	lsrs	r2, r3, #10
 8004c4a:	4b3e      	ldr	r3, [pc, #248]	@ (8004d44 <HAL_GPIO_Init+0x3ac>)
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	697a      	ldr	r2, [r7, #20]
 8004c50:	f002 0203 	and.w	r2, r2, #3
 8004c54:	00d2      	lsls	r2, r2, #3
 8004c56:	4093      	lsls	r3, r2
 8004c58:	69fa      	ldr	r2, [r7, #28]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8004c5e:	4938      	ldr	r1, [pc, #224]	@ (8004d40 <HAL_GPIO_Init+0x3a8>)
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	089b      	lsrs	r3, r3, #2
 8004c64:	3318      	adds	r3, #24
 8004c66:	69fa      	ldr	r2, [r7, #28]
 8004c68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8004c6c:	4b34      	ldr	r3, [pc, #208]	@ (8004d40 <HAL_GPIO_Init+0x3a8>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	43db      	mvns	r3, r3
 8004c76:	69fa      	ldr	r2, [r7, #28]
 8004c78:	4013      	ands	r3, r2
 8004c7a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d003      	beq.n	8004c90 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8004c88:	69fa      	ldr	r2, [r7, #28]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8004c90:	4a2b      	ldr	r2, [pc, #172]	@ (8004d40 <HAL_GPIO_Init+0x3a8>)
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8004c96:	4b2a      	ldr	r3, [pc, #168]	@ (8004d40 <HAL_GPIO_Init+0x3a8>)
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	43db      	mvns	r3, r3
 8004ca0:	69fa      	ldr	r2, [r7, #28]
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d003      	beq.n	8004cba <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8004cb2:	69fa      	ldr	r2, [r7, #28]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8004cba:	4a21      	ldr	r2, [pc, #132]	@ (8004d40 <HAL_GPIO_Init+0x3a8>)
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8004cc0:	4b1f      	ldr	r3, [pc, #124]	@ (8004d40 <HAL_GPIO_Init+0x3a8>)
 8004cc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004cc6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	43db      	mvns	r3, r3
 8004ccc:	69fa      	ldr	r2, [r7, #28]
 8004cce:	4013      	ands	r3, r2
 8004cd0:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d003      	beq.n	8004ce6 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8004cde:	69fa      	ldr	r2, [r7, #28]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8004ce6:	4a16      	ldr	r2, [pc, #88]	@ (8004d40 <HAL_GPIO_Init+0x3a8>)
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8004cee:	4b14      	ldr	r3, [pc, #80]	@ (8004d40 <HAL_GPIO_Init+0x3a8>)
 8004cf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004cf4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	43db      	mvns	r3, r3
 8004cfa:	69fa      	ldr	r2, [r7, #28]
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d003      	beq.n	8004d14 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8004d0c:	69fa      	ldr	r2, [r7, #28]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8004d14:	4a0a      	ldr	r2, [pc, #40]	@ (8004d40 <HAL_GPIO_Init+0x3a8>)
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	3301      	adds	r3, #1
 8004d20:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	fa22 f303 	lsr.w	r3, r2, r3
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	f47f ae3d 	bne.w	80049ac <HAL_GPIO_Init+0x14>
  }
}
 8004d32:	bf00      	nop
 8004d34:	bf00      	nop
 8004d36:	3724      	adds	r7, #36	@ 0x24
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr
 8004d40:	46022000 	.word	0x46022000
 8004d44:	002f7f7f 	.word	0x002f7f7f

08004d48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	460b      	mov	r3, r1
 8004d52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	691a      	ldr	r2, [r3, #16]
 8004d58:	887b      	ldrh	r3, [r7, #2]
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d002      	beq.n	8004d66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004d60:	2301      	movs	r3, #1
 8004d62:	73fb      	strb	r3, [r7, #15]
 8004d64:	e001      	b.n	8004d6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004d66:	2300      	movs	r3, #0
 8004d68:	73fb      	strb	r3, [r7, #15]
  }

  return bitstatus;
 8004d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3714      	adds	r7, #20
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr

08004d78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	460b      	mov	r3, r1
 8004d82:	807b      	strh	r3, [r7, #2]
 8004d84:	4613      	mov	r3, r2
 8004d86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004d88:	787b      	ldrb	r3, [r7, #1]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d003      	beq.n	8004d96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004d8e:	887a      	ldrh	r2, [r7, #2]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8004d94:	e002      	b.n	8004d9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8004d96:	887a      	ldrh	r2, [r7, #2]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004d9c:	bf00      	nop
 8004d9e:	370c      	adds	r7, #12
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr

08004da8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b085      	sub	sp, #20
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	460b      	mov	r3, r1
 8004db2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	695b      	ldr	r3, [r3, #20]
 8004db8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004dba:	887a      	ldrh	r2, [r7, #2]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	041a      	lsls	r2, r3, #16
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	43d9      	mvns	r1, r3
 8004dc6:	887b      	ldrh	r3, [r7, #2]
 8004dc8:	400b      	ands	r3, r1
 8004dca:	431a      	orrs	r2, r3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	619a      	str	r2, [r3, #24]
}
 8004dd0:	bf00      	nop
 8004dd2:	3714      	adds	r7, #20
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b082      	sub	sp, #8
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	4603      	mov	r3, r0
 8004de4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8004de6:	4b0f      	ldr	r3, [pc, #60]	@ (8004e24 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8004de8:	68da      	ldr	r2, [r3, #12]
 8004dea:	88fb      	ldrh	r3, [r7, #6]
 8004dec:	4013      	ands	r3, r2
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d006      	beq.n	8004e00 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8004df2:	4a0c      	ldr	r2, [pc, #48]	@ (8004e24 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8004df4:	88fb      	ldrh	r3, [r7, #6]
 8004df6:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8004df8:	88fb      	ldrh	r3, [r7, #6]
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f006 fcbc 	bl	800b778 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8004e00:	4b08      	ldr	r3, [pc, #32]	@ (8004e24 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8004e02:	691a      	ldr	r2, [r3, #16]
 8004e04:	88fb      	ldrh	r3, [r7, #6]
 8004e06:	4013      	ands	r3, r2
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d006      	beq.n	8004e1a <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8004e0c:	4a05      	ldr	r2, [pc, #20]	@ (8004e24 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8004e0e:	88fb      	ldrh	r3, [r7, #6]
 8004e10:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8004e12:	88fb      	ldrh	r3, [r7, #6]
 8004e14:	4618      	mov	r0, r3
 8004e16:	f7fe fcbd 	bl	8003794 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8004e1a:	bf00      	nop
 8004e1c:	3708      	adds	r7, #8
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	46022000 	.word	0x46022000

08004e28 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b085      	sub	sp, #20
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8004e30:	4b39      	ldr	r3, [pc, #228]	@ (8004f18 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004e32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e34:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004e38:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8004e3a:	68ba      	ldr	r2, [r7, #8]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d10b      	bne.n	8004e5a <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e48:	d905      	bls.n	8004e56 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004e4a:	4b33      	ldr	r3, [pc, #204]	@ (8004f18 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	4a32      	ldr	r2, [pc, #200]	@ (8004f18 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004e50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004e54:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8004e56:	2300      	movs	r3, #0
 8004e58:	e057      	b.n	8004f0a <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e60:	d90a      	bls.n	8004e78 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8004e62:	4b2d      	ldr	r3, [pc, #180]	@ (8004f18 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	4a2a      	ldr	r2, [pc, #168]	@ (8004f18 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004e70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004e74:	60d3      	str	r3, [r2, #12]
 8004e76:	e007      	b.n	8004e88 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8004e78:	4b27      	ldr	r3, [pc, #156]	@ (8004f18 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8004e80:	4925      	ldr	r1, [pc, #148]	@ (8004f18 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004e88:	4b24      	ldr	r3, [pc, #144]	@ (8004f1c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a24      	ldr	r2, [pc, #144]	@ (8004f20 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e92:	099b      	lsrs	r3, r3, #6
 8004e94:	2232      	movs	r2, #50	@ 0x32
 8004e96:	fb02 f303 	mul.w	r3, r2, r3
 8004e9a:	4a21      	ldr	r2, [pc, #132]	@ (8004f20 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004ea0:	099b      	lsrs	r3, r3, #6
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004ea6:	e002      	b.n	8004eae <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	3b01      	subs	r3, #1
 8004eac:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004eae:	4b1a      	ldr	r3, [pc, #104]	@ (8004f18 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d102      	bne.n	8004ec0 <HAL_PWREx_ControlVoltageScaling+0x98>
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d1f3      	bne.n	8004ea8 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d01b      	beq.n	8004efe <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004ec6:	4b15      	ldr	r3, [pc, #84]	@ (8004f1c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a15      	ldr	r2, [pc, #84]	@ (8004f20 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed0:	099b      	lsrs	r3, r3, #6
 8004ed2:	2232      	movs	r2, #50	@ 0x32
 8004ed4:	fb02 f303 	mul.w	r3, r2, r3
 8004ed8:	4a11      	ldr	r2, [pc, #68]	@ (8004f20 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004eda:	fba2 2303 	umull	r2, r3, r2, r3
 8004ede:	099b      	lsrs	r3, r3, #6
 8004ee0:	3301      	adds	r3, #1
 8004ee2:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004ee4:	e002      	b.n	8004eec <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004eec:	4b0a      	ldr	r3, [pc, #40]	@ (8004f18 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004eee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ef0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d102      	bne.n	8004efe <HAL_PWREx_ControlVoltageScaling+0xd6>
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1f3      	bne.n	8004ee6 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d101      	bne.n	8004f08 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8004f04:	2303      	movs	r3, #3
 8004f06:	e000      	b.n	8004f0a <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8004f08:	2300      	movs	r3, #0
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3714      	adds	r7, #20
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop
 8004f18:	46020800 	.word	0x46020800
 8004f1c:	2000000c 	.word	0x2000000c
 8004f20:	10624dd3 	.word	0x10624dd3

08004f24 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004f24:	b480      	push	{r7}
 8004f26:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8004f28:	4b04      	ldr	r3, [pc, #16]	@ (8004f3c <HAL_PWREx_GetVoltageRange+0x18>)
 8004f2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f2c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr
 8004f3a:	bf00      	nop
 8004f3c:	46020800 	.word	0x46020800

08004f40 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b08e      	sub	sp, #56	@ 0x38
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d102      	bne.n	8004f5a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	f000 bec8 	b.w	8005cea <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f5a:	4b99      	ldr	r3, [pc, #612]	@ (80051c0 <HAL_RCC_OscConfig+0x280>)
 8004f5c:	69db      	ldr	r3, [r3, #28]
 8004f5e:	f003 030c 	and.w	r3, r3, #12
 8004f62:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f64:	4b96      	ldr	r3, [pc, #600]	@ (80051c0 <HAL_RCC_OscConfig+0x280>)
 8004f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f68:	f003 0303 	and.w	r3, r3, #3
 8004f6c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 0310 	and.w	r3, r3, #16
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	f000 816c 	beq.w	8005254 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d007      	beq.n	8004f92 <HAL_RCC_OscConfig+0x52>
 8004f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f84:	2b0c      	cmp	r3, #12
 8004f86:	f040 80de 	bne.w	8005146 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004f8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	f040 80da 	bne.w	8005146 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	69db      	ldr	r3, [r3, #28]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d102      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	f000 bea5 	b.w	8005cea <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004fa4:	4b86      	ldr	r3, [pc, #536]	@ (80051c0 <HAL_RCC_OscConfig+0x280>)
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d004      	beq.n	8004fba <HAL_RCC_OscConfig+0x7a>
 8004fb0:	4b83      	ldr	r3, [pc, #524]	@ (80051c0 <HAL_RCC_OscConfig+0x280>)
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004fb8:	e005      	b.n	8004fc6 <HAL_RCC_OscConfig+0x86>
 8004fba:	4b81      	ldr	r3, [pc, #516]	@ (80051c0 <HAL_RCC_OscConfig+0x280>)
 8004fbc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004fc0:	041b      	lsls	r3, r3, #16
 8004fc2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d255      	bcs.n	8005076 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d10a      	bne.n	8004fe6 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f001 f9d9 	bl	800638c <RCC_SetFlashLatencyFromMSIRange>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d002      	beq.n	8004fe6 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	f000 be82 	b.w	8005cea <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004fe6:	4b76      	ldr	r3, [pc, #472]	@ (80051c0 <HAL_RCC_OscConfig+0x280>)
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	4a75      	ldr	r2, [pc, #468]	@ (80051c0 <HAL_RCC_OscConfig+0x280>)
 8004fec:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004ff0:	6093      	str	r3, [r2, #8]
 8004ff2:	4b73      	ldr	r3, [pc, #460]	@ (80051c0 <HAL_RCC_OscConfig+0x280>)
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ffe:	4970      	ldr	r1, [pc, #448]	@ (80051c0 <HAL_RCC_OscConfig+0x280>)
 8005000:	4313      	orrs	r3, r2
 8005002:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005008:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800500c:	d309      	bcc.n	8005022 <HAL_RCC_OscConfig+0xe2>
 800500e:	4b6c      	ldr	r3, [pc, #432]	@ (80051c0 <HAL_RCC_OscConfig+0x280>)
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	f023 021f 	bic.w	r2, r3, #31
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a1b      	ldr	r3, [r3, #32]
 800501a:	4969      	ldr	r1, [pc, #420]	@ (80051c0 <HAL_RCC_OscConfig+0x280>)
 800501c:	4313      	orrs	r3, r2
 800501e:	60cb      	str	r3, [r1, #12]
 8005020:	e07e      	b.n	8005120 <HAL_RCC_OscConfig+0x1e0>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005026:	2b00      	cmp	r3, #0
 8005028:	da0a      	bge.n	8005040 <HAL_RCC_OscConfig+0x100>
 800502a:	4b65      	ldr	r3, [pc, #404]	@ (80051c0 <HAL_RCC_OscConfig+0x280>)
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a1b      	ldr	r3, [r3, #32]
 8005036:	015b      	lsls	r3, r3, #5
 8005038:	4961      	ldr	r1, [pc, #388]	@ (80051c0 <HAL_RCC_OscConfig+0x280>)
 800503a:	4313      	orrs	r3, r2
 800503c:	60cb      	str	r3, [r1, #12]
 800503e:	e06f      	b.n	8005120 <HAL_RCC_OscConfig+0x1e0>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005044:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005048:	d30a      	bcc.n	8005060 <HAL_RCC_OscConfig+0x120>
 800504a:	4b5d      	ldr	r3, [pc, #372]	@ (80051c0 <HAL_RCC_OscConfig+0x280>)
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a1b      	ldr	r3, [r3, #32]
 8005056:	029b      	lsls	r3, r3, #10
 8005058:	4959      	ldr	r1, [pc, #356]	@ (80051c0 <HAL_RCC_OscConfig+0x280>)
 800505a:	4313      	orrs	r3, r2
 800505c:	60cb      	str	r3, [r1, #12]
 800505e:	e05f      	b.n	8005120 <HAL_RCC_OscConfig+0x1e0>
 8005060:	4b57      	ldr	r3, [pc, #348]	@ (80051c0 <HAL_RCC_OscConfig+0x280>)
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6a1b      	ldr	r3, [r3, #32]
 800506c:	03db      	lsls	r3, r3, #15
 800506e:	4954      	ldr	r1, [pc, #336]	@ (80051c0 <HAL_RCC_OscConfig+0x280>)
 8005070:	4313      	orrs	r3, r2
 8005072:	60cb      	str	r3, [r1, #12]
 8005074:	e054      	b.n	8005120 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8005076:	4b52      	ldr	r3, [pc, #328]	@ (80051c0 <HAL_RCC_OscConfig+0x280>)
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	4a51      	ldr	r2, [pc, #324]	@ (80051c0 <HAL_RCC_OscConfig+0x280>)
 800507c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005080:	6093      	str	r3, [r2, #8]
 8005082:	4b4f      	ldr	r3, [pc, #316]	@ (80051c0 <HAL_RCC_OscConfig+0x280>)
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800508e:	494c      	ldr	r1, [pc, #304]	@ (80051c0 <HAL_RCC_OscConfig+0x280>)
 8005090:	4313      	orrs	r3, r2
 8005092:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005098:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800509c:	d309      	bcc.n	80050b2 <HAL_RCC_OscConfig+0x172>
 800509e:	4b48      	ldr	r3, [pc, #288]	@ (80051c0 <HAL_RCC_OscConfig+0x280>)
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	f023 021f 	bic.w	r2, r3, #31
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a1b      	ldr	r3, [r3, #32]
 80050aa:	4945      	ldr	r1, [pc, #276]	@ (80051c0 <HAL_RCC_OscConfig+0x280>)
 80050ac:	4313      	orrs	r3, r2
 80050ae:	60cb      	str	r3, [r1, #12]
 80050b0:	e028      	b.n	8005104 <HAL_RCC_OscConfig+0x1c4>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	da0a      	bge.n	80050d0 <HAL_RCC_OscConfig+0x190>
 80050ba:	4b41      	ldr	r3, [pc, #260]	@ (80051c0 <HAL_RCC_OscConfig+0x280>)
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a1b      	ldr	r3, [r3, #32]
 80050c6:	015b      	lsls	r3, r3, #5
 80050c8:	493d      	ldr	r1, [pc, #244]	@ (80051c0 <HAL_RCC_OscConfig+0x280>)
 80050ca:	4313      	orrs	r3, r2
 80050cc:	60cb      	str	r3, [r1, #12]
 80050ce:	e019      	b.n	8005104 <HAL_RCC_OscConfig+0x1c4>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050d8:	d30a      	bcc.n	80050f0 <HAL_RCC_OscConfig+0x1b0>
 80050da:	4b39      	ldr	r3, [pc, #228]	@ (80051c0 <HAL_RCC_OscConfig+0x280>)
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a1b      	ldr	r3, [r3, #32]
 80050e6:	029b      	lsls	r3, r3, #10
 80050e8:	4935      	ldr	r1, [pc, #212]	@ (80051c0 <HAL_RCC_OscConfig+0x280>)
 80050ea:	4313      	orrs	r3, r2
 80050ec:	60cb      	str	r3, [r1, #12]
 80050ee:	e009      	b.n	8005104 <HAL_RCC_OscConfig+0x1c4>
 80050f0:	4b33      	ldr	r3, [pc, #204]	@ (80051c0 <HAL_RCC_OscConfig+0x280>)
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6a1b      	ldr	r3, [r3, #32]
 80050fc:	03db      	lsls	r3, r3, #15
 80050fe:	4930      	ldr	r1, [pc, #192]	@ (80051c0 <HAL_RCC_OscConfig+0x280>)
 8005100:	4313      	orrs	r3, r2
 8005102:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005106:	2b00      	cmp	r3, #0
 8005108:	d10a      	bne.n	8005120 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800510e:	4618      	mov	r0, r3
 8005110:	f001 f93c 	bl	800638c <RCC_SetFlashLatencyFromMSIRange>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d002      	beq.n	8005120 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	f000 bde5 	b.w	8005cea <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8005120:	f001 f8de 	bl	80062e0 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005124:	4b27      	ldr	r3, [pc, #156]	@ (80051c4 <HAL_RCC_OscConfig+0x284>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4618      	mov	r0, r3
 800512a:	f7ff f8f5 	bl	8004318 <HAL_InitTick>
 800512e:	4603      	mov	r3, r0
 8005130:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8005134:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005138:	2b00      	cmp	r3, #0
 800513a:	f000 808a 	beq.w	8005252 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800513e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005142:	f000 bdd2 	b.w	8005cea <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	69db      	ldr	r3, [r3, #28]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d066      	beq.n	800521c <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800514e:	4b1c      	ldr	r3, [pc, #112]	@ (80051c0 <HAL_RCC_OscConfig+0x280>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a1b      	ldr	r2, [pc, #108]	@ (80051c0 <HAL_RCC_OscConfig+0x280>)
 8005154:	f043 0301 	orr.w	r3, r3, #1
 8005158:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800515a:	f7ff f967 	bl	800442c <HAL_GetTick>
 800515e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8005160:	e009      	b.n	8005176 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005162:	f7ff f963 	bl	800442c <HAL_GetTick>
 8005166:	4602      	mov	r2, r0
 8005168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	2b02      	cmp	r3, #2
 800516e:	d902      	bls.n	8005176 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8005170:	2303      	movs	r3, #3
 8005172:	f000 bdba 	b.w	8005cea <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8005176:	4b12      	ldr	r3, [pc, #72]	@ (80051c0 <HAL_RCC_OscConfig+0x280>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 0304 	and.w	r3, r3, #4
 800517e:	2b00      	cmp	r3, #0
 8005180:	d0ef      	beq.n	8005162 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8005182:	4b0f      	ldr	r3, [pc, #60]	@ (80051c0 <HAL_RCC_OscConfig+0x280>)
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	4a0e      	ldr	r2, [pc, #56]	@ (80051c0 <HAL_RCC_OscConfig+0x280>)
 8005188:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800518c:	6093      	str	r3, [r2, #8]
 800518e:	4b0c      	ldr	r3, [pc, #48]	@ (80051c0 <HAL_RCC_OscConfig+0x280>)
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800519a:	4909      	ldr	r1, [pc, #36]	@ (80051c0 <HAL_RCC_OscConfig+0x280>)
 800519c:	4313      	orrs	r3, r2
 800519e:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051a4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80051a8:	d30e      	bcc.n	80051c8 <HAL_RCC_OscConfig+0x288>
 80051aa:	4b05      	ldr	r3, [pc, #20]	@ (80051c0 <HAL_RCC_OscConfig+0x280>)
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	f023 021f 	bic.w	r2, r3, #31
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a1b      	ldr	r3, [r3, #32]
 80051b6:	4902      	ldr	r1, [pc, #8]	@ (80051c0 <HAL_RCC_OscConfig+0x280>)
 80051b8:	4313      	orrs	r3, r2
 80051ba:	60cb      	str	r3, [r1, #12]
 80051bc:	e04a      	b.n	8005254 <HAL_RCC_OscConfig+0x314>
 80051be:	bf00      	nop
 80051c0:	46020c00 	.word	0x46020c00
 80051c4:	20000010 	.word	0x20000010
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	da0a      	bge.n	80051e6 <HAL_RCC_OscConfig+0x2a6>
 80051d0:	4b98      	ldr	r3, [pc, #608]	@ (8005434 <HAL_RCC_OscConfig+0x4f4>)
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a1b      	ldr	r3, [r3, #32]
 80051dc:	015b      	lsls	r3, r3, #5
 80051de:	4995      	ldr	r1, [pc, #596]	@ (8005434 <HAL_RCC_OscConfig+0x4f4>)
 80051e0:	4313      	orrs	r3, r2
 80051e2:	60cb      	str	r3, [r1, #12]
 80051e4:	e036      	b.n	8005254 <HAL_RCC_OscConfig+0x314>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051ee:	d30a      	bcc.n	8005206 <HAL_RCC_OscConfig+0x2c6>
 80051f0:	4b90      	ldr	r3, [pc, #576]	@ (8005434 <HAL_RCC_OscConfig+0x4f4>)
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a1b      	ldr	r3, [r3, #32]
 80051fc:	029b      	lsls	r3, r3, #10
 80051fe:	498d      	ldr	r1, [pc, #564]	@ (8005434 <HAL_RCC_OscConfig+0x4f4>)
 8005200:	4313      	orrs	r3, r2
 8005202:	60cb      	str	r3, [r1, #12]
 8005204:	e026      	b.n	8005254 <HAL_RCC_OscConfig+0x314>
 8005206:	4b8b      	ldr	r3, [pc, #556]	@ (8005434 <HAL_RCC_OscConfig+0x4f4>)
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a1b      	ldr	r3, [r3, #32]
 8005212:	03db      	lsls	r3, r3, #15
 8005214:	4987      	ldr	r1, [pc, #540]	@ (8005434 <HAL_RCC_OscConfig+0x4f4>)
 8005216:	4313      	orrs	r3, r2
 8005218:	60cb      	str	r3, [r1, #12]
 800521a:	e01b      	b.n	8005254 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 800521c:	4b85      	ldr	r3, [pc, #532]	@ (8005434 <HAL_RCC_OscConfig+0x4f4>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a84      	ldr	r2, [pc, #528]	@ (8005434 <HAL_RCC_OscConfig+0x4f4>)
 8005222:	f023 0301 	bic.w	r3, r3, #1
 8005226:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005228:	f7ff f900 	bl	800442c <HAL_GetTick>
 800522c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800522e:	e009      	b.n	8005244 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005230:	f7ff f8fc 	bl	800442c <HAL_GetTick>
 8005234:	4602      	mov	r2, r0
 8005236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	2b02      	cmp	r3, #2
 800523c:	d902      	bls.n	8005244 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	f000 bd53 	b.w	8005cea <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8005244:	4b7b      	ldr	r3, [pc, #492]	@ (8005434 <HAL_RCC_OscConfig+0x4f4>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 0304 	and.w	r3, r3, #4
 800524c:	2b00      	cmp	r3, #0
 800524e:	d1ef      	bne.n	8005230 <HAL_RCC_OscConfig+0x2f0>
 8005250:	e000      	b.n	8005254 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005252:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 0301 	and.w	r3, r3, #1
 800525c:	2b00      	cmp	r3, #0
 800525e:	f000 808b 	beq.w	8005378 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005264:	2b08      	cmp	r3, #8
 8005266:	d005      	beq.n	8005274 <HAL_RCC_OscConfig+0x334>
 8005268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800526a:	2b0c      	cmp	r3, #12
 800526c:	d109      	bne.n	8005282 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800526e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005270:	2b03      	cmp	r3, #3
 8005272:	d106      	bne.n	8005282 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d17d      	bne.n	8005378 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	f000 bd34 	b.w	8005cea <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800528a:	d106      	bne.n	800529a <HAL_RCC_OscConfig+0x35a>
 800528c:	4b69      	ldr	r3, [pc, #420]	@ (8005434 <HAL_RCC_OscConfig+0x4f4>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a68      	ldr	r2, [pc, #416]	@ (8005434 <HAL_RCC_OscConfig+0x4f4>)
 8005292:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005296:	6013      	str	r3, [r2, #0]
 8005298:	e041      	b.n	800531e <HAL_RCC_OscConfig+0x3de>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80052a2:	d112      	bne.n	80052ca <HAL_RCC_OscConfig+0x38a>
 80052a4:	4b63      	ldr	r3, [pc, #396]	@ (8005434 <HAL_RCC_OscConfig+0x4f4>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a62      	ldr	r2, [pc, #392]	@ (8005434 <HAL_RCC_OscConfig+0x4f4>)
 80052aa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80052ae:	6013      	str	r3, [r2, #0]
 80052b0:	4b60      	ldr	r3, [pc, #384]	@ (8005434 <HAL_RCC_OscConfig+0x4f4>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a5f      	ldr	r2, [pc, #380]	@ (8005434 <HAL_RCC_OscConfig+0x4f4>)
 80052b6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80052ba:	6013      	str	r3, [r2, #0]
 80052bc:	4b5d      	ldr	r3, [pc, #372]	@ (8005434 <HAL_RCC_OscConfig+0x4f4>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a5c      	ldr	r2, [pc, #368]	@ (8005434 <HAL_RCC_OscConfig+0x4f4>)
 80052c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052c6:	6013      	str	r3, [r2, #0]
 80052c8:	e029      	b.n	800531e <HAL_RCC_OscConfig+0x3de>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80052d2:	d112      	bne.n	80052fa <HAL_RCC_OscConfig+0x3ba>
 80052d4:	4b57      	ldr	r3, [pc, #348]	@ (8005434 <HAL_RCC_OscConfig+0x4f4>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a56      	ldr	r2, [pc, #344]	@ (8005434 <HAL_RCC_OscConfig+0x4f4>)
 80052da:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80052de:	6013      	str	r3, [r2, #0]
 80052e0:	4b54      	ldr	r3, [pc, #336]	@ (8005434 <HAL_RCC_OscConfig+0x4f4>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a53      	ldr	r2, [pc, #332]	@ (8005434 <HAL_RCC_OscConfig+0x4f4>)
 80052e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80052ea:	6013      	str	r3, [r2, #0]
 80052ec:	4b51      	ldr	r3, [pc, #324]	@ (8005434 <HAL_RCC_OscConfig+0x4f4>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a50      	ldr	r2, [pc, #320]	@ (8005434 <HAL_RCC_OscConfig+0x4f4>)
 80052f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052f6:	6013      	str	r3, [r2, #0]
 80052f8:	e011      	b.n	800531e <HAL_RCC_OscConfig+0x3de>
 80052fa:	4b4e      	ldr	r3, [pc, #312]	@ (8005434 <HAL_RCC_OscConfig+0x4f4>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a4d      	ldr	r2, [pc, #308]	@ (8005434 <HAL_RCC_OscConfig+0x4f4>)
 8005300:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005304:	6013      	str	r3, [r2, #0]
 8005306:	4b4b      	ldr	r3, [pc, #300]	@ (8005434 <HAL_RCC_OscConfig+0x4f4>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a4a      	ldr	r2, [pc, #296]	@ (8005434 <HAL_RCC_OscConfig+0x4f4>)
 800530c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005310:	6013      	str	r3, [r2, #0]
 8005312:	4b48      	ldr	r3, [pc, #288]	@ (8005434 <HAL_RCC_OscConfig+0x4f4>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a47      	ldr	r2, [pc, #284]	@ (8005434 <HAL_RCC_OscConfig+0x4f4>)
 8005318:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800531c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d014      	beq.n	8005350 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8005326:	f7ff f881 	bl	800442c <HAL_GetTick>
 800532a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800532c:	e009      	b.n	8005342 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800532e:	f7ff f87d 	bl	800442c <HAL_GetTick>
 8005332:	4602      	mov	r2, r0
 8005334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005336:	1ad3      	subs	r3, r2, r3
 8005338:	2b64      	cmp	r3, #100	@ 0x64
 800533a:	d902      	bls.n	8005342 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 800533c:	2303      	movs	r3, #3
 800533e:	f000 bcd4 	b.w	8005cea <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005342:	4b3c      	ldr	r3, [pc, #240]	@ (8005434 <HAL_RCC_OscConfig+0x4f4>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800534a:	2b00      	cmp	r3, #0
 800534c:	d0ef      	beq.n	800532e <HAL_RCC_OscConfig+0x3ee>
 800534e:	e013      	b.n	8005378 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8005350:	f7ff f86c 	bl	800442c <HAL_GetTick>
 8005354:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005356:	e009      	b.n	800536c <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005358:	f7ff f868 	bl	800442c <HAL_GetTick>
 800535c:	4602      	mov	r2, r0
 800535e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	2b64      	cmp	r3, #100	@ 0x64
 8005364:	d902      	bls.n	800536c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8005366:	2303      	movs	r3, #3
 8005368:	f000 bcbf 	b.w	8005cea <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800536c:	4b31      	ldr	r3, [pc, #196]	@ (8005434 <HAL_RCC_OscConfig+0x4f4>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005374:	2b00      	cmp	r3, #0
 8005376:	d1ef      	bne.n	8005358 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 0302 	and.w	r3, r3, #2
 8005380:	2b00      	cmp	r3, #0
 8005382:	d05f      	beq.n	8005444 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005386:	2b04      	cmp	r3, #4
 8005388:	d005      	beq.n	8005396 <HAL_RCC_OscConfig+0x456>
 800538a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800538c:	2b0c      	cmp	r3, #12
 800538e:	d114      	bne.n	80053ba <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005392:	2b02      	cmp	r3, #2
 8005394:	d111      	bne.n	80053ba <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d102      	bne.n	80053a4 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	f000 bca3 	b.w	8005cea <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80053a4:	4b23      	ldr	r3, [pc, #140]	@ (8005434 <HAL_RCC_OscConfig+0x4f4>)
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	691b      	ldr	r3, [r3, #16]
 80053b0:	041b      	lsls	r3, r3, #16
 80053b2:	4920      	ldr	r1, [pc, #128]	@ (8005434 <HAL_RCC_OscConfig+0x4f4>)
 80053b4:	4313      	orrs	r3, r2
 80053b6:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80053b8:	e044      	b.n	8005444 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d024      	beq.n	800540c <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80053c2:	4b1c      	ldr	r3, [pc, #112]	@ (8005434 <HAL_RCC_OscConfig+0x4f4>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a1b      	ldr	r2, [pc, #108]	@ (8005434 <HAL_RCC_OscConfig+0x4f4>)
 80053c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053cc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80053ce:	f7ff f82d 	bl	800442c <HAL_GetTick>
 80053d2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80053d4:	e009      	b.n	80053ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053d6:	f7ff f829 	bl	800442c <HAL_GetTick>
 80053da:	4602      	mov	r2, r0
 80053dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	2b02      	cmp	r3, #2
 80053e2:	d902      	bls.n	80053ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80053e4:	2303      	movs	r3, #3
 80053e6:	f000 bc80 	b.w	8005cea <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80053ea:	4b12      	ldr	r3, [pc, #72]	@ (8005434 <HAL_RCC_OscConfig+0x4f4>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d0ef      	beq.n	80053d6 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80053f6:	4b0f      	ldr	r3, [pc, #60]	@ (8005434 <HAL_RCC_OscConfig+0x4f4>)
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	041b      	lsls	r3, r3, #16
 8005404:	490b      	ldr	r1, [pc, #44]	@ (8005434 <HAL_RCC_OscConfig+0x4f4>)
 8005406:	4313      	orrs	r3, r2
 8005408:	610b      	str	r3, [r1, #16]
 800540a:	e01b      	b.n	8005444 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 800540c:	4b09      	ldr	r3, [pc, #36]	@ (8005434 <HAL_RCC_OscConfig+0x4f4>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a08      	ldr	r2, [pc, #32]	@ (8005434 <HAL_RCC_OscConfig+0x4f4>)
 8005412:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005416:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005418:	f7ff f808 	bl	800442c <HAL_GetTick>
 800541c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800541e:	e00b      	b.n	8005438 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005420:	f7ff f804 	bl	800442c <HAL_GetTick>
 8005424:	4602      	mov	r2, r0
 8005426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	2b02      	cmp	r3, #2
 800542c:	d904      	bls.n	8005438 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800542e:	2303      	movs	r3, #3
 8005430:	f000 bc5b 	b.w	8005cea <HAL_RCC_OscConfig+0xdaa>
 8005434:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005438:	4baf      	ldr	r3, [pc, #700]	@ (80056f8 <HAL_RCC_OscConfig+0x7b8>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005440:	2b00      	cmp	r3, #0
 8005442:	d1ed      	bne.n	8005420 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0308 	and.w	r3, r3, #8
 800544c:	2b00      	cmp	r3, #0
 800544e:	f000 80c8 	beq.w	80055e2 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8005452:	2300      	movs	r3, #0
 8005454:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005458:	4ba7      	ldr	r3, [pc, #668]	@ (80056f8 <HAL_RCC_OscConfig+0x7b8>)
 800545a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800545e:	f003 0304 	and.w	r3, r3, #4
 8005462:	2b00      	cmp	r3, #0
 8005464:	d111      	bne.n	800548a <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005466:	4ba4      	ldr	r3, [pc, #656]	@ (80056f8 <HAL_RCC_OscConfig+0x7b8>)
 8005468:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800546c:	4aa2      	ldr	r2, [pc, #648]	@ (80056f8 <HAL_RCC_OscConfig+0x7b8>)
 800546e:	f043 0304 	orr.w	r3, r3, #4
 8005472:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005476:	4ba0      	ldr	r3, [pc, #640]	@ (80056f8 <HAL_RCC_OscConfig+0x7b8>)
 8005478:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800547c:	f003 0304 	and.w	r3, r3, #4
 8005480:	617b      	str	r3, [r7, #20]
 8005482:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8005484:	2301      	movs	r3, #1
 8005486:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800548a:	4b9c      	ldr	r3, [pc, #624]	@ (80056fc <HAL_RCC_OscConfig+0x7bc>)
 800548c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800548e:	f003 0301 	and.w	r3, r3, #1
 8005492:	2b00      	cmp	r3, #0
 8005494:	d119      	bne.n	80054ca <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8005496:	4b99      	ldr	r3, [pc, #612]	@ (80056fc <HAL_RCC_OscConfig+0x7bc>)
 8005498:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800549a:	4a98      	ldr	r2, [pc, #608]	@ (80056fc <HAL_RCC_OscConfig+0x7bc>)
 800549c:	f043 0301 	orr.w	r3, r3, #1
 80054a0:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054a2:	f7fe ffc3 	bl	800442c <HAL_GetTick>
 80054a6:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80054a8:	e009      	b.n	80054be <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054aa:	f7fe ffbf 	bl	800442c <HAL_GetTick>
 80054ae:	4602      	mov	r2, r0
 80054b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054b2:	1ad3      	subs	r3, r2, r3
 80054b4:	2b02      	cmp	r3, #2
 80054b6:	d902      	bls.n	80054be <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 80054b8:	2303      	movs	r3, #3
 80054ba:	f000 bc16 	b.w	8005cea <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80054be:	4b8f      	ldr	r3, [pc, #572]	@ (80056fc <HAL_RCC_OscConfig+0x7bc>)
 80054c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054c2:	f003 0301 	and.w	r3, r3, #1
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d0ef      	beq.n	80054aa <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	695b      	ldr	r3, [r3, #20]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d05f      	beq.n	8005592 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80054d2:	4b89      	ldr	r3, [pc, #548]	@ (80056f8 <HAL_RCC_OscConfig+0x7b8>)
 80054d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80054d8:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	699a      	ldr	r2, [r3, #24]
 80054de:	6a3b      	ldr	r3, [r7, #32]
 80054e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d037      	beq.n	8005558 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80054e8:	6a3b      	ldr	r3, [r7, #32]
 80054ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d006      	beq.n	8005500 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 80054f2:	6a3b      	ldr	r3, [r7, #32]
 80054f4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d101      	bne.n	8005500 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	e3f4      	b.n	8005cea <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8005500:	6a3b      	ldr	r3, [r7, #32]
 8005502:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005506:	2b00      	cmp	r3, #0
 8005508:	d01b      	beq.n	8005542 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 800550a:	4b7b      	ldr	r3, [pc, #492]	@ (80056f8 <HAL_RCC_OscConfig+0x7b8>)
 800550c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005510:	4a79      	ldr	r2, [pc, #484]	@ (80056f8 <HAL_RCC_OscConfig+0x7b8>)
 8005512:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8005516:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 800551a:	f7fe ff87 	bl	800442c <HAL_GetTick>
 800551e:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005520:	e008      	b.n	8005534 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005522:	f7fe ff83 	bl	800442c <HAL_GetTick>
 8005526:	4602      	mov	r2, r0
 8005528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800552a:	1ad3      	subs	r3, r2, r3
 800552c:	2b05      	cmp	r3, #5
 800552e:	d901      	bls.n	8005534 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8005530:	2303      	movs	r3, #3
 8005532:	e3da      	b.n	8005cea <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005534:	4b70      	ldr	r3, [pc, #448]	@ (80056f8 <HAL_RCC_OscConfig+0x7b8>)
 8005536:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800553a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800553e:	2b00      	cmp	r3, #0
 8005540:	d1ef      	bne.n	8005522 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8005542:	4b6d      	ldr	r3, [pc, #436]	@ (80056f8 <HAL_RCC_OscConfig+0x7b8>)
 8005544:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005548:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	699b      	ldr	r3, [r3, #24]
 8005550:	4969      	ldr	r1, [pc, #420]	@ (80056f8 <HAL_RCC_OscConfig+0x7b8>)
 8005552:	4313      	orrs	r3, r2
 8005554:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8005558:	4b67      	ldr	r3, [pc, #412]	@ (80056f8 <HAL_RCC_OscConfig+0x7b8>)
 800555a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800555e:	4a66      	ldr	r2, [pc, #408]	@ (80056f8 <HAL_RCC_OscConfig+0x7b8>)
 8005560:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005564:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8005568:	f7fe ff60 	bl	800442c <HAL_GetTick>
 800556c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800556e:	e008      	b.n	8005582 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005570:	f7fe ff5c 	bl	800442c <HAL_GetTick>
 8005574:	4602      	mov	r2, r0
 8005576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	2b05      	cmp	r3, #5
 800557c:	d901      	bls.n	8005582 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	e3b3      	b.n	8005cea <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8005582:	4b5d      	ldr	r3, [pc, #372]	@ (80056f8 <HAL_RCC_OscConfig+0x7b8>)
 8005584:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005588:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800558c:	2b00      	cmp	r3, #0
 800558e:	d0ef      	beq.n	8005570 <HAL_RCC_OscConfig+0x630>
 8005590:	e01b      	b.n	80055ca <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8005592:	4b59      	ldr	r3, [pc, #356]	@ (80056f8 <HAL_RCC_OscConfig+0x7b8>)
 8005594:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005598:	4a57      	ldr	r2, [pc, #348]	@ (80056f8 <HAL_RCC_OscConfig+0x7b8>)
 800559a:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800559e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80055a2:	f7fe ff43 	bl	800442c <HAL_GetTick>
 80055a6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80055a8:	e008      	b.n	80055bc <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055aa:	f7fe ff3f 	bl	800442c <HAL_GetTick>
 80055ae:	4602      	mov	r2, r0
 80055b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055b2:	1ad3      	subs	r3, r2, r3
 80055b4:	2b05      	cmp	r3, #5
 80055b6:	d901      	bls.n	80055bc <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 80055b8:	2303      	movs	r3, #3
 80055ba:	e396      	b.n	8005cea <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80055bc:	4b4e      	ldr	r3, [pc, #312]	@ (80056f8 <HAL_RCC_OscConfig+0x7b8>)
 80055be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80055c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d1ef      	bne.n	80055aa <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80055ca:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d107      	bne.n	80055e2 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055d2:	4b49      	ldr	r3, [pc, #292]	@ (80056f8 <HAL_RCC_OscConfig+0x7b8>)
 80055d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055d8:	4a47      	ldr	r2, [pc, #284]	@ (80056f8 <HAL_RCC_OscConfig+0x7b8>)
 80055da:	f023 0304 	bic.w	r3, r3, #4
 80055de:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0304 	and.w	r3, r3, #4
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	f000 8111 	beq.w	8005812 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 80055f0:	2300      	movs	r3, #0
 80055f2:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055f6:	4b40      	ldr	r3, [pc, #256]	@ (80056f8 <HAL_RCC_OscConfig+0x7b8>)
 80055f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055fc:	f003 0304 	and.w	r3, r3, #4
 8005600:	2b00      	cmp	r3, #0
 8005602:	d111      	bne.n	8005628 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005604:	4b3c      	ldr	r3, [pc, #240]	@ (80056f8 <HAL_RCC_OscConfig+0x7b8>)
 8005606:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800560a:	4a3b      	ldr	r2, [pc, #236]	@ (80056f8 <HAL_RCC_OscConfig+0x7b8>)
 800560c:	f043 0304 	orr.w	r3, r3, #4
 8005610:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005614:	4b38      	ldr	r3, [pc, #224]	@ (80056f8 <HAL_RCC_OscConfig+0x7b8>)
 8005616:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800561a:	f003 0304 	and.w	r3, r3, #4
 800561e:	613b      	str	r3, [r7, #16]
 8005620:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8005622:	2301      	movs	r3, #1
 8005624:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005628:	4b34      	ldr	r3, [pc, #208]	@ (80056fc <HAL_RCC_OscConfig+0x7bc>)
 800562a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800562c:	f003 0301 	and.w	r3, r3, #1
 8005630:	2b00      	cmp	r3, #0
 8005632:	d118      	bne.n	8005666 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8005634:	4b31      	ldr	r3, [pc, #196]	@ (80056fc <HAL_RCC_OscConfig+0x7bc>)
 8005636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005638:	4a30      	ldr	r2, [pc, #192]	@ (80056fc <HAL_RCC_OscConfig+0x7bc>)
 800563a:	f043 0301 	orr.w	r3, r3, #1
 800563e:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005640:	f7fe fef4 	bl	800442c <HAL_GetTick>
 8005644:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005646:	e008      	b.n	800565a <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005648:	f7fe fef0 	bl	800442c <HAL_GetTick>
 800564c:	4602      	mov	r2, r0
 800564e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005650:	1ad3      	subs	r3, r2, r3
 8005652:	2b02      	cmp	r3, #2
 8005654:	d901      	bls.n	800565a <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	e347      	b.n	8005cea <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800565a:	4b28      	ldr	r3, [pc, #160]	@ (80056fc <HAL_RCC_OscConfig+0x7bc>)
 800565c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800565e:	f003 0301 	and.w	r3, r3, #1
 8005662:	2b00      	cmp	r3, #0
 8005664:	d0f0      	beq.n	8005648 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	f003 0301 	and.w	r3, r3, #1
 800566e:	2b00      	cmp	r3, #0
 8005670:	d01f      	beq.n	80056b2 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	f003 0304 	and.w	r3, r3, #4
 800567a:	2b00      	cmp	r3, #0
 800567c:	d010      	beq.n	80056a0 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800567e:	4b1e      	ldr	r3, [pc, #120]	@ (80056f8 <HAL_RCC_OscConfig+0x7b8>)
 8005680:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005684:	4a1c      	ldr	r2, [pc, #112]	@ (80056f8 <HAL_RCC_OscConfig+0x7b8>)
 8005686:	f043 0304 	orr.w	r3, r3, #4
 800568a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800568e:	4b1a      	ldr	r3, [pc, #104]	@ (80056f8 <HAL_RCC_OscConfig+0x7b8>)
 8005690:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005694:	4a18      	ldr	r2, [pc, #96]	@ (80056f8 <HAL_RCC_OscConfig+0x7b8>)
 8005696:	f043 0301 	orr.w	r3, r3, #1
 800569a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800569e:	e018      	b.n	80056d2 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80056a0:	4b15      	ldr	r3, [pc, #84]	@ (80056f8 <HAL_RCC_OscConfig+0x7b8>)
 80056a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80056a6:	4a14      	ldr	r2, [pc, #80]	@ (80056f8 <HAL_RCC_OscConfig+0x7b8>)
 80056a8:	f043 0301 	orr.w	r3, r3, #1
 80056ac:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80056b0:	e00f      	b.n	80056d2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80056b2:	4b11      	ldr	r3, [pc, #68]	@ (80056f8 <HAL_RCC_OscConfig+0x7b8>)
 80056b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80056b8:	4a0f      	ldr	r2, [pc, #60]	@ (80056f8 <HAL_RCC_OscConfig+0x7b8>)
 80056ba:	f023 0301 	bic.w	r3, r3, #1
 80056be:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80056c2:	4b0d      	ldr	r3, [pc, #52]	@ (80056f8 <HAL_RCC_OscConfig+0x7b8>)
 80056c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80056c8:	4a0b      	ldr	r2, [pc, #44]	@ (80056f8 <HAL_RCC_OscConfig+0x7b8>)
 80056ca:	f023 0304 	bic.w	r3, r3, #4
 80056ce:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d057      	beq.n	800578a <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 80056da:	f7fe fea7 	bl	800442c <HAL_GetTick>
 80056de:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056e0:	e00e      	b.n	8005700 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056e2:	f7fe fea3 	bl	800442c <HAL_GetTick>
 80056e6:	4602      	mov	r2, r0
 80056e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d905      	bls.n	8005700 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 80056f4:	2303      	movs	r3, #3
 80056f6:	e2f8      	b.n	8005cea <HAL_RCC_OscConfig+0xdaa>
 80056f8:	46020c00 	.word	0x46020c00
 80056fc:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005700:	4b9c      	ldr	r3, [pc, #624]	@ (8005974 <HAL_RCC_OscConfig+0xa34>)
 8005702:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005706:	f003 0302 	and.w	r3, r3, #2
 800570a:	2b00      	cmp	r3, #0
 800570c:	d0e9      	beq.n	80056e2 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005716:	2b00      	cmp	r3, #0
 8005718:	d01b      	beq.n	8005752 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800571a:	4b96      	ldr	r3, [pc, #600]	@ (8005974 <HAL_RCC_OscConfig+0xa34>)
 800571c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005720:	4a94      	ldr	r2, [pc, #592]	@ (8005974 <HAL_RCC_OscConfig+0xa34>)
 8005722:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005726:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800572a:	e00a      	b.n	8005742 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800572c:	f7fe fe7e 	bl	800442c <HAL_GetTick>
 8005730:	4602      	mov	r2, r0
 8005732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	f241 3288 	movw	r2, #5000	@ 0x1388
 800573a:	4293      	cmp	r3, r2
 800573c:	d901      	bls.n	8005742 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800573e:	2303      	movs	r3, #3
 8005740:	e2d3      	b.n	8005cea <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005742:	4b8c      	ldr	r3, [pc, #560]	@ (8005974 <HAL_RCC_OscConfig+0xa34>)
 8005744:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005748:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800574c:	2b00      	cmp	r3, #0
 800574e:	d0ed      	beq.n	800572c <HAL_RCC_OscConfig+0x7ec>
 8005750:	e053      	b.n	80057fa <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005752:	4b88      	ldr	r3, [pc, #544]	@ (8005974 <HAL_RCC_OscConfig+0xa34>)
 8005754:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005758:	4a86      	ldr	r2, [pc, #536]	@ (8005974 <HAL_RCC_OscConfig+0xa34>)
 800575a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800575e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005762:	e00a      	b.n	800577a <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005764:	f7fe fe62 	bl	800442c <HAL_GetTick>
 8005768:	4602      	mov	r2, r0
 800576a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005772:	4293      	cmp	r3, r2
 8005774:	d901      	bls.n	800577a <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8005776:	2303      	movs	r3, #3
 8005778:	e2b7      	b.n	8005cea <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800577a:	4b7e      	ldr	r3, [pc, #504]	@ (8005974 <HAL_RCC_OscConfig+0xa34>)
 800577c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005780:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005784:	2b00      	cmp	r3, #0
 8005786:	d1ed      	bne.n	8005764 <HAL_RCC_OscConfig+0x824>
 8005788:	e037      	b.n	80057fa <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800578a:	f7fe fe4f 	bl	800442c <HAL_GetTick>
 800578e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005790:	e00a      	b.n	80057a8 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005792:	f7fe fe4b 	bl	800442c <HAL_GetTick>
 8005796:	4602      	mov	r2, r0
 8005798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800579a:	1ad3      	subs	r3, r2, r3
 800579c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d901      	bls.n	80057a8 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 80057a4:	2303      	movs	r3, #3
 80057a6:	e2a0      	b.n	8005cea <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80057a8:	4b72      	ldr	r3, [pc, #456]	@ (8005974 <HAL_RCC_OscConfig+0xa34>)
 80057aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80057ae:	f003 0302 	and.w	r3, r3, #2
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d1ed      	bne.n	8005792 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80057b6:	4b6f      	ldr	r3, [pc, #444]	@ (8005974 <HAL_RCC_OscConfig+0xa34>)
 80057b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80057bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d01a      	beq.n	80057fa <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80057c4:	4b6b      	ldr	r3, [pc, #428]	@ (8005974 <HAL_RCC_OscConfig+0xa34>)
 80057c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80057ca:	4a6a      	ldr	r2, [pc, #424]	@ (8005974 <HAL_RCC_OscConfig+0xa34>)
 80057cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057d0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80057d4:	e00a      	b.n	80057ec <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057d6:	f7fe fe29 	bl	800442c <HAL_GetTick>
 80057da:	4602      	mov	r2, r0
 80057dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057de:	1ad3      	subs	r3, r2, r3
 80057e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d901      	bls.n	80057ec <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 80057e8:	2303      	movs	r3, #3
 80057ea:	e27e      	b.n	8005cea <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80057ec:	4b61      	ldr	r3, [pc, #388]	@ (8005974 <HAL_RCC_OscConfig+0xa34>)
 80057ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80057f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d1ed      	bne.n	80057d6 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80057fa:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d107      	bne.n	8005812 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005802:	4b5c      	ldr	r3, [pc, #368]	@ (8005974 <HAL_RCC_OscConfig+0xa34>)
 8005804:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005808:	4a5a      	ldr	r2, [pc, #360]	@ (8005974 <HAL_RCC_OscConfig+0xa34>)
 800580a:	f023 0304 	bic.w	r3, r3, #4
 800580e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 0320 	and.w	r3, r3, #32
 800581a:	2b00      	cmp	r3, #0
 800581c:	d036      	beq.n	800588c <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005822:	2b00      	cmp	r3, #0
 8005824:	d019      	beq.n	800585a <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8005826:	4b53      	ldr	r3, [pc, #332]	@ (8005974 <HAL_RCC_OscConfig+0xa34>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a52      	ldr	r2, [pc, #328]	@ (8005974 <HAL_RCC_OscConfig+0xa34>)
 800582c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005830:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005832:	f7fe fdfb 	bl	800442c <HAL_GetTick>
 8005836:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005838:	e008      	b.n	800584c <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800583a:	f7fe fdf7 	bl	800442c <HAL_GetTick>
 800583e:	4602      	mov	r2, r0
 8005840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005842:	1ad3      	subs	r3, r2, r3
 8005844:	2b02      	cmp	r3, #2
 8005846:	d901      	bls.n	800584c <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8005848:	2303      	movs	r3, #3
 800584a:	e24e      	b.n	8005cea <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800584c:	4b49      	ldr	r3, [pc, #292]	@ (8005974 <HAL_RCC_OscConfig+0xa34>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005854:	2b00      	cmp	r3, #0
 8005856:	d0f0      	beq.n	800583a <HAL_RCC_OscConfig+0x8fa>
 8005858:	e018      	b.n	800588c <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800585a:	4b46      	ldr	r3, [pc, #280]	@ (8005974 <HAL_RCC_OscConfig+0xa34>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a45      	ldr	r2, [pc, #276]	@ (8005974 <HAL_RCC_OscConfig+0xa34>)
 8005860:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005864:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005866:	f7fe fde1 	bl	800442c <HAL_GetTick>
 800586a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800586c:	e008      	b.n	8005880 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800586e:	f7fe fddd 	bl	800442c <HAL_GetTick>
 8005872:	4602      	mov	r2, r0
 8005874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005876:	1ad3      	subs	r3, r2, r3
 8005878:	2b02      	cmp	r3, #2
 800587a:	d901      	bls.n	8005880 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 800587c:	2303      	movs	r3, #3
 800587e:	e234      	b.n	8005cea <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005880:	4b3c      	ldr	r3, [pc, #240]	@ (8005974 <HAL_RCC_OscConfig+0xa34>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005888:	2b00      	cmp	r3, #0
 800588a:	d1f0      	bne.n	800586e <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005894:	2b00      	cmp	r3, #0
 8005896:	d036      	beq.n	8005906 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800589c:	2b00      	cmp	r3, #0
 800589e:	d019      	beq.n	80058d4 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 80058a0:	4b34      	ldr	r3, [pc, #208]	@ (8005974 <HAL_RCC_OscConfig+0xa34>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a33      	ldr	r2, [pc, #204]	@ (8005974 <HAL_RCC_OscConfig+0xa34>)
 80058a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80058aa:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80058ac:	f7fe fdbe 	bl	800442c <HAL_GetTick>
 80058b0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80058b2:	e008      	b.n	80058c6 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80058b4:	f7fe fdba 	bl	800442c <HAL_GetTick>
 80058b8:	4602      	mov	r2, r0
 80058ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058bc:	1ad3      	subs	r3, r2, r3
 80058be:	2b02      	cmp	r3, #2
 80058c0:	d901      	bls.n	80058c6 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 80058c2:	2303      	movs	r3, #3
 80058c4:	e211      	b.n	8005cea <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80058c6:	4b2b      	ldr	r3, [pc, #172]	@ (8005974 <HAL_RCC_OscConfig+0xa34>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d0f0      	beq.n	80058b4 <HAL_RCC_OscConfig+0x974>
 80058d2:	e018      	b.n	8005906 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 80058d4:	4b27      	ldr	r3, [pc, #156]	@ (8005974 <HAL_RCC_OscConfig+0xa34>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a26      	ldr	r2, [pc, #152]	@ (8005974 <HAL_RCC_OscConfig+0xa34>)
 80058da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80058de:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80058e0:	f7fe fda4 	bl	800442c <HAL_GetTick>
 80058e4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80058e6:	e008      	b.n	80058fa <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80058e8:	f7fe fda0 	bl	800442c <HAL_GetTick>
 80058ec:	4602      	mov	r2, r0
 80058ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058f0:	1ad3      	subs	r3, r2, r3
 80058f2:	2b02      	cmp	r3, #2
 80058f4:	d901      	bls.n	80058fa <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 80058f6:	2303      	movs	r3, #3
 80058f8:	e1f7      	b.n	8005cea <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80058fa:	4b1e      	ldr	r3, [pc, #120]	@ (8005974 <HAL_RCC_OscConfig+0xa34>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005902:	2b00      	cmp	r3, #0
 8005904:	d1f0      	bne.n	80058e8 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800590e:	2b00      	cmp	r3, #0
 8005910:	d07f      	beq.n	8005a12 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005916:	2b00      	cmp	r3, #0
 8005918:	d062      	beq.n	80059e0 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800591a:	4b16      	ldr	r3, [pc, #88]	@ (8005974 <HAL_RCC_OscConfig+0xa34>)
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	4a15      	ldr	r2, [pc, #84]	@ (8005974 <HAL_RCC_OscConfig+0xa34>)
 8005920:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005924:	6093      	str	r3, [r2, #8]
 8005926:	4b13      	ldr	r3, [pc, #76]	@ (8005974 <HAL_RCC_OscConfig+0xa34>)
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005932:	4910      	ldr	r1, [pc, #64]	@ (8005974 <HAL_RCC_OscConfig+0xa34>)
 8005934:	4313      	orrs	r3, r2
 8005936:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800593c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005940:	d309      	bcc.n	8005956 <HAL_RCC_OscConfig+0xa16>
 8005942:	4b0c      	ldr	r3, [pc, #48]	@ (8005974 <HAL_RCC_OscConfig+0xa34>)
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	f023 021f 	bic.w	r2, r3, #31
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a1b      	ldr	r3, [r3, #32]
 800594e:	4909      	ldr	r1, [pc, #36]	@ (8005974 <HAL_RCC_OscConfig+0xa34>)
 8005950:	4313      	orrs	r3, r2
 8005952:	60cb      	str	r3, [r1, #12]
 8005954:	e02a      	b.n	80059ac <HAL_RCC_OscConfig+0xa6c>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800595a:	2b00      	cmp	r3, #0
 800595c:	da0c      	bge.n	8005978 <HAL_RCC_OscConfig+0xa38>
 800595e:	4b05      	ldr	r3, [pc, #20]	@ (8005974 <HAL_RCC_OscConfig+0xa34>)
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a1b      	ldr	r3, [r3, #32]
 800596a:	015b      	lsls	r3, r3, #5
 800596c:	4901      	ldr	r1, [pc, #4]	@ (8005974 <HAL_RCC_OscConfig+0xa34>)
 800596e:	4313      	orrs	r3, r2
 8005970:	60cb      	str	r3, [r1, #12]
 8005972:	e01b      	b.n	80059ac <HAL_RCC_OscConfig+0xa6c>
 8005974:	46020c00 	.word	0x46020c00
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800597c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005980:	d30a      	bcc.n	8005998 <HAL_RCC_OscConfig+0xa58>
 8005982:	4ba1      	ldr	r3, [pc, #644]	@ (8005c08 <HAL_RCC_OscConfig+0xcc8>)
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a1b      	ldr	r3, [r3, #32]
 800598e:	029b      	lsls	r3, r3, #10
 8005990:	499d      	ldr	r1, [pc, #628]	@ (8005c08 <HAL_RCC_OscConfig+0xcc8>)
 8005992:	4313      	orrs	r3, r2
 8005994:	60cb      	str	r3, [r1, #12]
 8005996:	e009      	b.n	80059ac <HAL_RCC_OscConfig+0xa6c>
 8005998:	4b9b      	ldr	r3, [pc, #620]	@ (8005c08 <HAL_RCC_OscConfig+0xcc8>)
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6a1b      	ldr	r3, [r3, #32]
 80059a4:	03db      	lsls	r3, r3, #15
 80059a6:	4998      	ldr	r1, [pc, #608]	@ (8005c08 <HAL_RCC_OscConfig+0xcc8>)
 80059a8:	4313      	orrs	r3, r2
 80059aa:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 80059ac:	4b96      	ldr	r3, [pc, #600]	@ (8005c08 <HAL_RCC_OscConfig+0xcc8>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a95      	ldr	r2, [pc, #596]	@ (8005c08 <HAL_RCC_OscConfig+0xcc8>)
 80059b2:	f043 0310 	orr.w	r3, r3, #16
 80059b6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80059b8:	f7fe fd38 	bl	800442c <HAL_GetTick>
 80059bc:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80059be:	e008      	b.n	80059d2 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80059c0:	f7fe fd34 	bl	800442c <HAL_GetTick>
 80059c4:	4602      	mov	r2, r0
 80059c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059c8:	1ad3      	subs	r3, r2, r3
 80059ca:	2b02      	cmp	r3, #2
 80059cc:	d901      	bls.n	80059d2 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 80059ce:	2303      	movs	r3, #3
 80059d0:	e18b      	b.n	8005cea <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80059d2:	4b8d      	ldr	r3, [pc, #564]	@ (8005c08 <HAL_RCC_OscConfig+0xcc8>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 0320 	and.w	r3, r3, #32
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d0f0      	beq.n	80059c0 <HAL_RCC_OscConfig+0xa80>
 80059de:	e018      	b.n	8005a12 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 80059e0:	4b89      	ldr	r3, [pc, #548]	@ (8005c08 <HAL_RCC_OscConfig+0xcc8>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a88      	ldr	r2, [pc, #544]	@ (8005c08 <HAL_RCC_OscConfig+0xcc8>)
 80059e6:	f023 0310 	bic.w	r3, r3, #16
 80059ea:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80059ec:	f7fe fd1e 	bl	800442c <HAL_GetTick>
 80059f0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80059f2:	e008      	b.n	8005a06 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80059f4:	f7fe fd1a 	bl	800442c <HAL_GetTick>
 80059f8:	4602      	mov	r2, r0
 80059fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059fc:	1ad3      	subs	r3, r2, r3
 80059fe:	2b02      	cmp	r3, #2
 8005a00:	d901      	bls.n	8005a06 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8005a02:	2303      	movs	r3, #3
 8005a04:	e171      	b.n	8005cea <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8005a06:	4b80      	ldr	r3, [pc, #512]	@ (8005c08 <HAL_RCC_OscConfig+0xcc8>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 0320 	and.w	r3, r3, #32
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d1f0      	bne.n	80059f4 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	f000 8166 	beq.w	8005ce8 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a22:	4b79      	ldr	r3, [pc, #484]	@ (8005c08 <HAL_RCC_OscConfig+0xcc8>)
 8005a24:	69db      	ldr	r3, [r3, #28]
 8005a26:	f003 030c 	and.w	r3, r3, #12
 8005a2a:	2b0c      	cmp	r3, #12
 8005a2c:	f000 80f2 	beq.w	8005c14 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a34:	2b02      	cmp	r3, #2
 8005a36:	f040 80c5 	bne.w	8005bc4 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8005a3a:	4b73      	ldr	r3, [pc, #460]	@ (8005c08 <HAL_RCC_OscConfig+0xcc8>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a72      	ldr	r2, [pc, #456]	@ (8005c08 <HAL_RCC_OscConfig+0xcc8>)
 8005a40:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a44:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005a46:	f7fe fcf1 	bl	800442c <HAL_GetTick>
 8005a4a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005a4c:	e008      	b.n	8005a60 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a4e:	f7fe fced 	bl	800442c <HAL_GetTick>
 8005a52:	4602      	mov	r2, r0
 8005a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a56:	1ad3      	subs	r3, r2, r3
 8005a58:	2b02      	cmp	r3, #2
 8005a5a:	d901      	bls.n	8005a60 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	e144      	b.n	8005cea <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005a60:	4b69      	ldr	r3, [pc, #420]	@ (8005c08 <HAL_RCC_OscConfig+0xcc8>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d1f0      	bne.n	8005a4e <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a6c:	4b66      	ldr	r3, [pc, #408]	@ (8005c08 <HAL_RCC_OscConfig+0xcc8>)
 8005a6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a72:	f003 0304 	and.w	r3, r3, #4
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d111      	bne.n	8005a9e <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8005a7a:	4b63      	ldr	r3, [pc, #396]	@ (8005c08 <HAL_RCC_OscConfig+0xcc8>)
 8005a7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a80:	4a61      	ldr	r2, [pc, #388]	@ (8005c08 <HAL_RCC_OscConfig+0xcc8>)
 8005a82:	f043 0304 	orr.w	r3, r3, #4
 8005a86:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005a8a:	4b5f      	ldr	r3, [pc, #380]	@ (8005c08 <HAL_RCC_OscConfig+0xcc8>)
 8005a8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a90:	f003 0304 	and.w	r3, r3, #4
 8005a94:	60fb      	str	r3, [r7, #12]
 8005a96:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8005a9e:	4b5b      	ldr	r3, [pc, #364]	@ (8005c0c <HAL_RCC_OscConfig+0xccc>)
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005aa6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005aaa:	d102      	bne.n	8005ab2 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8005aac:	2301      	movs	r3, #1
 8005aae:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005ab2:	4b56      	ldr	r3, [pc, #344]	@ (8005c0c <HAL_RCC_OscConfig+0xccc>)
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	4a55      	ldr	r2, [pc, #340]	@ (8005c0c <HAL_RCC_OscConfig+0xccc>)
 8005ab8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005abc:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8005abe:	4b52      	ldr	r3, [pc, #328]	@ (8005c08 <HAL_RCC_OscConfig+0xcc8>)
 8005ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ac2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005ac6:	f023 0303 	bic.w	r3, r3, #3
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005ad2:	3a01      	subs	r2, #1
 8005ad4:	0212      	lsls	r2, r2, #8
 8005ad6:	4311      	orrs	r1, r2
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005adc:	430a      	orrs	r2, r1
 8005ade:	494a      	ldr	r1, [pc, #296]	@ (8005c08 <HAL_RCC_OscConfig+0xcc8>)
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	628b      	str	r3, [r1, #40]	@ 0x28
 8005ae4:	4b48      	ldr	r3, [pc, #288]	@ (8005c08 <HAL_RCC_OscConfig+0xcc8>)
 8005ae6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ae8:	4b49      	ldr	r3, [pc, #292]	@ (8005c10 <HAL_RCC_OscConfig+0xcd0>)
 8005aea:	4013      	ands	r3, r2
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005af0:	3a01      	subs	r2, #1
 8005af2:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005afa:	3a01      	subs	r2, #1
 8005afc:	0252      	lsls	r2, r2, #9
 8005afe:	b292      	uxth	r2, r2
 8005b00:	4311      	orrs	r1, r2
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005b06:	3a01      	subs	r2, #1
 8005b08:	0412      	lsls	r2, r2, #16
 8005b0a:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8005b0e:	4311      	orrs	r1, r2
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8005b14:	3a01      	subs	r2, #1
 8005b16:	0612      	lsls	r2, r2, #24
 8005b18:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8005b1c:	430a      	orrs	r2, r1
 8005b1e:	493a      	ldr	r1, [pc, #232]	@ (8005c08 <HAL_RCC_OscConfig+0xcc8>)
 8005b20:	4313      	orrs	r3, r2
 8005b22:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8005b24:	4b38      	ldr	r3, [pc, #224]	@ (8005c08 <HAL_RCC_OscConfig+0xcc8>)
 8005b26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b28:	4a37      	ldr	r2, [pc, #220]	@ (8005c08 <HAL_RCC_OscConfig+0xcc8>)
 8005b2a:	f023 0310 	bic.w	r3, r3, #16
 8005b2e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b34:	4a34      	ldr	r2, [pc, #208]	@ (8005c08 <HAL_RCC_OscConfig+0xcc8>)
 8005b36:	00db      	lsls	r3, r3, #3
 8005b38:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8005b3a:	4b33      	ldr	r3, [pc, #204]	@ (8005c08 <HAL_RCC_OscConfig+0xcc8>)
 8005b3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b3e:	4a32      	ldr	r2, [pc, #200]	@ (8005c08 <HAL_RCC_OscConfig+0xcc8>)
 8005b40:	f043 0310 	orr.w	r3, r3, #16
 8005b44:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8005b46:	4b30      	ldr	r3, [pc, #192]	@ (8005c08 <HAL_RCC_OscConfig+0xcc8>)
 8005b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b4a:	f023 020c 	bic.w	r2, r3, #12
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b52:	492d      	ldr	r1, [pc, #180]	@ (8005c08 <HAL_RCC_OscConfig+0xcc8>)
 8005b54:	4313      	orrs	r3, r2
 8005b56:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8005b58:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d105      	bne.n	8005b6c <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005b60:	4b2a      	ldr	r3, [pc, #168]	@ (8005c0c <HAL_RCC_OscConfig+0xccc>)
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	4a29      	ldr	r2, [pc, #164]	@ (8005c0c <HAL_RCC_OscConfig+0xccc>)
 8005b66:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005b6a:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8005b6c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d107      	bne.n	8005b84 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8005b74:	4b24      	ldr	r3, [pc, #144]	@ (8005c08 <HAL_RCC_OscConfig+0xcc8>)
 8005b76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b7a:	4a23      	ldr	r2, [pc, #140]	@ (8005c08 <HAL_RCC_OscConfig+0xcc8>)
 8005b7c:	f023 0304 	bic.w	r3, r3, #4
 8005b80:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8005b84:	4b20      	ldr	r3, [pc, #128]	@ (8005c08 <HAL_RCC_OscConfig+0xcc8>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a1f      	ldr	r2, [pc, #124]	@ (8005c08 <HAL_RCC_OscConfig+0xcc8>)
 8005b8a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005b8e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005b90:	f7fe fc4c 	bl	800442c <HAL_GetTick>
 8005b94:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005b96:	e008      	b.n	8005baa <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b98:	f7fe fc48 	bl	800442c <HAL_GetTick>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ba0:	1ad3      	subs	r3, r2, r3
 8005ba2:	2b02      	cmp	r3, #2
 8005ba4:	d901      	bls.n	8005baa <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8005ba6:	2303      	movs	r3, #3
 8005ba8:	e09f      	b.n	8005cea <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005baa:	4b17      	ldr	r3, [pc, #92]	@ (8005c08 <HAL_RCC_OscConfig+0xcc8>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d0f0      	beq.n	8005b98 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005bb6:	4b14      	ldr	r3, [pc, #80]	@ (8005c08 <HAL_RCC_OscConfig+0xcc8>)
 8005bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bba:	4a13      	ldr	r2, [pc, #76]	@ (8005c08 <HAL_RCC_OscConfig+0xcc8>)
 8005bbc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005bc0:	6293      	str	r3, [r2, #40]	@ 0x28
 8005bc2:	e091      	b.n	8005ce8 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8005bc4:	4b10      	ldr	r3, [pc, #64]	@ (8005c08 <HAL_RCC_OscConfig+0xcc8>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a0f      	ldr	r2, [pc, #60]	@ (8005c08 <HAL_RCC_OscConfig+0xcc8>)
 8005bca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005bce:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005bd0:	f7fe fc2c 	bl	800442c <HAL_GetTick>
 8005bd4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005bd6:	e008      	b.n	8005bea <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bd8:	f7fe fc28 	bl	800442c <HAL_GetTick>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005be0:	1ad3      	subs	r3, r2, r3
 8005be2:	2b02      	cmp	r3, #2
 8005be4:	d901      	bls.n	8005bea <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8005be6:	2303      	movs	r3, #3
 8005be8:	e07f      	b.n	8005cea <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005bea:	4b07      	ldr	r3, [pc, #28]	@ (8005c08 <HAL_RCC_OscConfig+0xcc8>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d1f0      	bne.n	8005bd8 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8005bf6:	4b04      	ldr	r3, [pc, #16]	@ (8005c08 <HAL_RCC_OscConfig+0xcc8>)
 8005bf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bfa:	4a03      	ldr	r2, [pc, #12]	@ (8005c08 <HAL_RCC_OscConfig+0xcc8>)
 8005bfc:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8005c00:	f023 0303 	bic.w	r3, r3, #3
 8005c04:	6293      	str	r3, [r2, #40]	@ 0x28
 8005c06:	e06f      	b.n	8005ce8 <HAL_RCC_OscConfig+0xda8>
 8005c08:	46020c00 	.word	0x46020c00
 8005c0c:	46020800 	.word	0x46020800
 8005c10:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8005c14:	4b37      	ldr	r3, [pc, #220]	@ (8005cf4 <HAL_RCC_OscConfig+0xdb4>)
 8005c16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c18:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005c1a:	4b36      	ldr	r3, [pc, #216]	@ (8005cf4 <HAL_RCC_OscConfig+0xdb4>)
 8005c1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c1e:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d039      	beq.n	8005c9c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	f003 0203 	and.w	r2, r3, #3
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d132      	bne.n	8005c9c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8005c36:	69fb      	ldr	r3, [r7, #28]
 8005c38:	0a1b      	lsrs	r3, r3, #8
 8005c3a:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c42:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d129      	bne.n	8005c9c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d122      	bne.n	8005c9c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c60:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d11a      	bne.n	8005c9c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	0a5b      	lsrs	r3, r3, #9
 8005c6a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c72:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d111      	bne.n	8005c9c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	0c1b      	lsrs	r3, r3, #16
 8005c7c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c84:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d108      	bne.n	8005c9c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8005c8a:	69bb      	ldr	r3, [r7, #24]
 8005c8c:	0e1b      	lsrs	r3, r3, #24
 8005c8e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c96:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d001      	beq.n	8005ca0 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e024      	b.n	8005cea <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8005ca0:	4b14      	ldr	r3, [pc, #80]	@ (8005cf4 <HAL_RCC_OscConfig+0xdb4>)
 8005ca2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ca4:	08db      	lsrs	r3, r3, #3
 8005ca6:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d01a      	beq.n	8005ce8 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8005cb2:	4b10      	ldr	r3, [pc, #64]	@ (8005cf4 <HAL_RCC_OscConfig+0xdb4>)
 8005cb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cb6:	4a0f      	ldr	r2, [pc, #60]	@ (8005cf4 <HAL_RCC_OscConfig+0xdb4>)
 8005cb8:	f023 0310 	bic.w	r3, r3, #16
 8005cbc:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cbe:	f7fe fbb5 	bl	800442c <HAL_GetTick>
 8005cc2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8005cc4:	bf00      	nop
 8005cc6:	f7fe fbb1 	bl	800442c <HAL_GetTick>
 8005cca:	4602      	mov	r2, r0
 8005ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d0f9      	beq.n	8005cc6 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cd6:	4a07      	ldr	r2, [pc, #28]	@ (8005cf4 <HAL_RCC_OscConfig+0xdb4>)
 8005cd8:	00db      	lsls	r3, r3, #3
 8005cda:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8005cdc:	4b05      	ldr	r3, [pc, #20]	@ (8005cf4 <HAL_RCC_OscConfig+0xdb4>)
 8005cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ce0:	4a04      	ldr	r2, [pc, #16]	@ (8005cf4 <HAL_RCC_OscConfig+0xdb4>)
 8005ce2:	f043 0310 	orr.w	r3, r3, #16
 8005ce6:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8005ce8:	2300      	movs	r3, #0
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3738      	adds	r7, #56	@ 0x38
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
 8005cf2:	bf00      	nop
 8005cf4:	46020c00 	.word	0x46020c00

08005cf8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b086      	sub	sp, #24
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d101      	bne.n	8005d0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e1d9      	b.n	80060c0 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005d0c:	4b9b      	ldr	r3, [pc, #620]	@ (8005f7c <HAL_RCC_ClockConfig+0x284>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 030f 	and.w	r3, r3, #15
 8005d14:	683a      	ldr	r2, [r7, #0]
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d910      	bls.n	8005d3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d1a:	4b98      	ldr	r3, [pc, #608]	@ (8005f7c <HAL_RCC_ClockConfig+0x284>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f023 020f 	bic.w	r2, r3, #15
 8005d22:	4996      	ldr	r1, [pc, #600]	@ (8005f7c <HAL_RCC_ClockConfig+0x284>)
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d2a:	4b94      	ldr	r3, [pc, #592]	@ (8005f7c <HAL_RCC_ClockConfig+0x284>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f003 030f 	and.w	r3, r3, #15
 8005d32:	683a      	ldr	r2, [r7, #0]
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d001      	beq.n	8005d3c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e1c1      	b.n	80060c0 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 0310 	and.w	r3, r3, #16
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d010      	beq.n	8005d6a <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	695a      	ldr	r2, [r3, #20]
 8005d4c:	4b8c      	ldr	r3, [pc, #560]	@ (8005f80 <HAL_RCC_ClockConfig+0x288>)
 8005d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d50:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d908      	bls.n	8005d6a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8005d58:	4b89      	ldr	r3, [pc, #548]	@ (8005f80 <HAL_RCC_ClockConfig+0x288>)
 8005d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d5c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	695b      	ldr	r3, [r3, #20]
 8005d64:	4986      	ldr	r1, [pc, #536]	@ (8005f80 <HAL_RCC_ClockConfig+0x288>)
 8005d66:	4313      	orrs	r3, r2
 8005d68:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f003 0308 	and.w	r3, r3, #8
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d012      	beq.n	8005d9c <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	691a      	ldr	r2, [r3, #16]
 8005d7a:	4b81      	ldr	r3, [pc, #516]	@ (8005f80 <HAL_RCC_ClockConfig+0x288>)
 8005d7c:	6a1b      	ldr	r3, [r3, #32]
 8005d7e:	091b      	lsrs	r3, r3, #4
 8005d80:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d909      	bls.n	8005d9c <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8005d88:	4b7d      	ldr	r3, [pc, #500]	@ (8005f80 <HAL_RCC_ClockConfig+0x288>)
 8005d8a:	6a1b      	ldr	r3, [r3, #32]
 8005d8c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	691b      	ldr	r3, [r3, #16]
 8005d94:	011b      	lsls	r3, r3, #4
 8005d96:	497a      	ldr	r1, [pc, #488]	@ (8005f80 <HAL_RCC_ClockConfig+0x288>)
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f003 0304 	and.w	r3, r3, #4
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d010      	beq.n	8005dca <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	68da      	ldr	r2, [r3, #12]
 8005dac:	4b74      	ldr	r3, [pc, #464]	@ (8005f80 <HAL_RCC_ClockConfig+0x288>)
 8005dae:	6a1b      	ldr	r3, [r3, #32]
 8005db0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d908      	bls.n	8005dca <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005db8:	4b71      	ldr	r3, [pc, #452]	@ (8005f80 <HAL_RCC_ClockConfig+0x288>)
 8005dba:	6a1b      	ldr	r3, [r3, #32]
 8005dbc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	496e      	ldr	r1, [pc, #440]	@ (8005f80 <HAL_RCC_ClockConfig+0x288>)
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f003 0302 	and.w	r3, r3, #2
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d010      	beq.n	8005df8 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	689a      	ldr	r2, [r3, #8]
 8005dda:	4b69      	ldr	r3, [pc, #420]	@ (8005f80 <HAL_RCC_ClockConfig+0x288>)
 8005ddc:	6a1b      	ldr	r3, [r3, #32]
 8005dde:	f003 030f 	and.w	r3, r3, #15
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d908      	bls.n	8005df8 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8005de6:	4b66      	ldr	r3, [pc, #408]	@ (8005f80 <HAL_RCC_ClockConfig+0x288>)
 8005de8:	6a1b      	ldr	r3, [r3, #32]
 8005dea:	f023 020f 	bic.w	r2, r3, #15
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	4963      	ldr	r1, [pc, #396]	@ (8005f80 <HAL_RCC_ClockConfig+0x288>)
 8005df4:	4313      	orrs	r3, r2
 8005df6:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 0301 	and.w	r3, r3, #1
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	f000 80d2 	beq.w	8005faa <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8005e06:	2300      	movs	r3, #0
 8005e08:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	2b03      	cmp	r3, #3
 8005e10:	d143      	bne.n	8005e9a <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e12:	4b5b      	ldr	r3, [pc, #364]	@ (8005f80 <HAL_RCC_ClockConfig+0x288>)
 8005e14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e18:	f003 0304 	and.w	r3, r3, #4
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d110      	bne.n	8005e42 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005e20:	4b57      	ldr	r3, [pc, #348]	@ (8005f80 <HAL_RCC_ClockConfig+0x288>)
 8005e22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e26:	4a56      	ldr	r2, [pc, #344]	@ (8005f80 <HAL_RCC_ClockConfig+0x288>)
 8005e28:	f043 0304 	orr.w	r3, r3, #4
 8005e2c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005e30:	4b53      	ldr	r3, [pc, #332]	@ (8005f80 <HAL_RCC_ClockConfig+0x288>)
 8005e32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e36:	f003 0304 	and.w	r3, r3, #4
 8005e3a:	60bb      	str	r3, [r7, #8]
 8005e3c:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8005e42:	f7fe faf3 	bl	800442c <HAL_GetTick>
 8005e46:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8005e48:	4b4e      	ldr	r3, [pc, #312]	@ (8005f84 <HAL_RCC_ClockConfig+0x28c>)
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d00f      	beq.n	8005e74 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005e54:	e008      	b.n	8005e68 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8005e56:	f7fe fae9 	bl	800442c <HAL_GetTick>
 8005e5a:	4602      	mov	r2, r0
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	1ad3      	subs	r3, r2, r3
 8005e60:	2b02      	cmp	r3, #2
 8005e62:	d901      	bls.n	8005e68 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8005e64:	2303      	movs	r3, #3
 8005e66:	e12b      	b.n	80060c0 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005e68:	4b46      	ldr	r3, [pc, #280]	@ (8005f84 <HAL_RCC_ClockConfig+0x28c>)
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d0f0      	beq.n	8005e56 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005e74:	7dfb      	ldrb	r3, [r7, #23]
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d107      	bne.n	8005e8a <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005e7a:	4b41      	ldr	r3, [pc, #260]	@ (8005f80 <HAL_RCC_ClockConfig+0x288>)
 8005e7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e80:	4a3f      	ldr	r2, [pc, #252]	@ (8005f80 <HAL_RCC_ClockConfig+0x288>)
 8005e82:	f023 0304 	bic.w	r3, r3, #4
 8005e86:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005e8a:	4b3d      	ldr	r3, [pc, #244]	@ (8005f80 <HAL_RCC_ClockConfig+0x288>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d121      	bne.n	8005eda <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	e112      	b.n	80060c0 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	2b02      	cmp	r3, #2
 8005ea0:	d107      	bne.n	8005eb2 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ea2:	4b37      	ldr	r3, [pc, #220]	@ (8005f80 <HAL_RCC_ClockConfig+0x288>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d115      	bne.n	8005eda <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e106      	b.n	80060c0 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d107      	bne.n	8005eca <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8005eba:	4b31      	ldr	r3, [pc, #196]	@ (8005f80 <HAL_RCC_ClockConfig+0x288>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f003 0304 	and.w	r3, r3, #4
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d109      	bne.n	8005eda <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e0fa      	b.n	80060c0 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005eca:	4b2d      	ldr	r3, [pc, #180]	@ (8005f80 <HAL_RCC_ClockConfig+0x288>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d101      	bne.n	8005eda <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e0f2      	b.n	80060c0 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8005eda:	4b29      	ldr	r3, [pc, #164]	@ (8005f80 <HAL_RCC_ClockConfig+0x288>)
 8005edc:	69db      	ldr	r3, [r3, #28]
 8005ede:	f023 0203 	bic.w	r2, r3, #3
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	4926      	ldr	r1, [pc, #152]	@ (8005f80 <HAL_RCC_ClockConfig+0x288>)
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8005eec:	f7fe fa9e 	bl	800442c <HAL_GetTick>
 8005ef0:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	2b03      	cmp	r3, #3
 8005ef8:	d112      	bne.n	8005f20 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005efa:	e00a      	b.n	8005f12 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005efc:	f7fe fa96 	bl	800442c <HAL_GetTick>
 8005f00:	4602      	mov	r2, r0
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	1ad3      	subs	r3, r2, r3
 8005f06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d901      	bls.n	8005f12 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8005f0e:	2303      	movs	r3, #3
 8005f10:	e0d6      	b.n	80060c0 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005f12:	4b1b      	ldr	r3, [pc, #108]	@ (8005f80 <HAL_RCC_ClockConfig+0x288>)
 8005f14:	69db      	ldr	r3, [r3, #28]
 8005f16:	f003 030c 	and.w	r3, r3, #12
 8005f1a:	2b0c      	cmp	r3, #12
 8005f1c:	d1ee      	bne.n	8005efc <HAL_RCC_ClockConfig+0x204>
 8005f1e:	e044      	b.n	8005faa <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	2b02      	cmp	r3, #2
 8005f26:	d112      	bne.n	8005f4e <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005f28:	e00a      	b.n	8005f40 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f2a:	f7fe fa7f 	bl	800442c <HAL_GetTick>
 8005f2e:	4602      	mov	r2, r0
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	1ad3      	subs	r3, r2, r3
 8005f34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d901      	bls.n	8005f40 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005f3c:	2303      	movs	r3, #3
 8005f3e:	e0bf      	b.n	80060c0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005f40:	4b0f      	ldr	r3, [pc, #60]	@ (8005f80 <HAL_RCC_ClockConfig+0x288>)
 8005f42:	69db      	ldr	r3, [r3, #28]
 8005f44:	f003 030c 	and.w	r3, r3, #12
 8005f48:	2b08      	cmp	r3, #8
 8005f4a:	d1ee      	bne.n	8005f2a <HAL_RCC_ClockConfig+0x232>
 8005f4c:	e02d      	b.n	8005faa <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d123      	bne.n	8005f9e <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005f56:	e00a      	b.n	8005f6e <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f58:	f7fe fa68 	bl	800442c <HAL_GetTick>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	1ad3      	subs	r3, r2, r3
 8005f62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d901      	bls.n	8005f6e <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	e0a8      	b.n	80060c0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005f6e:	4b04      	ldr	r3, [pc, #16]	@ (8005f80 <HAL_RCC_ClockConfig+0x288>)
 8005f70:	69db      	ldr	r3, [r3, #28]
 8005f72:	f003 030c 	and.w	r3, r3, #12
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d1ee      	bne.n	8005f58 <HAL_RCC_ClockConfig+0x260>
 8005f7a:	e016      	b.n	8005faa <HAL_RCC_ClockConfig+0x2b2>
 8005f7c:	40022000 	.word	0x40022000
 8005f80:	46020c00 	.word	0x46020c00
 8005f84:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f88:	f7fe fa50 	bl	800442c <HAL_GetTick>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	1ad3      	subs	r3, r2, r3
 8005f92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d901      	bls.n	8005f9e <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	e090      	b.n	80060c0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005f9e:	4b4a      	ldr	r3, [pc, #296]	@ (80060c8 <HAL_RCC_ClockConfig+0x3d0>)
 8005fa0:	69db      	ldr	r3, [r3, #28]
 8005fa2:	f003 030c 	and.w	r3, r3, #12
 8005fa6:	2b04      	cmp	r3, #4
 8005fa8:	d1ee      	bne.n	8005f88 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f003 0302 	and.w	r3, r3, #2
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d010      	beq.n	8005fd8 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	689a      	ldr	r2, [r3, #8]
 8005fba:	4b43      	ldr	r3, [pc, #268]	@ (80060c8 <HAL_RCC_ClockConfig+0x3d0>)
 8005fbc:	6a1b      	ldr	r3, [r3, #32]
 8005fbe:	f003 030f 	and.w	r3, r3, #15
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d208      	bcs.n	8005fd8 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8005fc6:	4b40      	ldr	r3, [pc, #256]	@ (80060c8 <HAL_RCC_ClockConfig+0x3d0>)
 8005fc8:	6a1b      	ldr	r3, [r3, #32]
 8005fca:	f023 020f 	bic.w	r2, r3, #15
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	493d      	ldr	r1, [pc, #244]	@ (80060c8 <HAL_RCC_ClockConfig+0x3d0>)
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005fd8:	4b3c      	ldr	r3, [pc, #240]	@ (80060cc <HAL_RCC_ClockConfig+0x3d4>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f003 030f 	and.w	r3, r3, #15
 8005fe0:	683a      	ldr	r2, [r7, #0]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d210      	bcs.n	8006008 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fe6:	4b39      	ldr	r3, [pc, #228]	@ (80060cc <HAL_RCC_ClockConfig+0x3d4>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f023 020f 	bic.w	r2, r3, #15
 8005fee:	4937      	ldr	r1, [pc, #220]	@ (80060cc <HAL_RCC_ClockConfig+0x3d4>)
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ff6:	4b35      	ldr	r3, [pc, #212]	@ (80060cc <HAL_RCC_ClockConfig+0x3d4>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f003 030f 	and.w	r3, r3, #15
 8005ffe:	683a      	ldr	r2, [r7, #0]
 8006000:	429a      	cmp	r2, r3
 8006002:	d001      	beq.n	8006008 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	e05b      	b.n	80060c0 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f003 0304 	and.w	r3, r3, #4
 8006010:	2b00      	cmp	r3, #0
 8006012:	d010      	beq.n	8006036 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	68da      	ldr	r2, [r3, #12]
 8006018:	4b2b      	ldr	r3, [pc, #172]	@ (80060c8 <HAL_RCC_ClockConfig+0x3d0>)
 800601a:	6a1b      	ldr	r3, [r3, #32]
 800601c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006020:	429a      	cmp	r2, r3
 8006022:	d208      	bcs.n	8006036 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8006024:	4b28      	ldr	r3, [pc, #160]	@ (80060c8 <HAL_RCC_ClockConfig+0x3d0>)
 8006026:	6a1b      	ldr	r3, [r3, #32]
 8006028:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	4925      	ldr	r1, [pc, #148]	@ (80060c8 <HAL_RCC_ClockConfig+0x3d0>)
 8006032:	4313      	orrs	r3, r2
 8006034:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f003 0308 	and.w	r3, r3, #8
 800603e:	2b00      	cmp	r3, #0
 8006040:	d012      	beq.n	8006068 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	691a      	ldr	r2, [r3, #16]
 8006046:	4b20      	ldr	r3, [pc, #128]	@ (80060c8 <HAL_RCC_ClockConfig+0x3d0>)
 8006048:	6a1b      	ldr	r3, [r3, #32]
 800604a:	091b      	lsrs	r3, r3, #4
 800604c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006050:	429a      	cmp	r2, r3
 8006052:	d209      	bcs.n	8006068 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8006054:	4b1c      	ldr	r3, [pc, #112]	@ (80060c8 <HAL_RCC_ClockConfig+0x3d0>)
 8006056:	6a1b      	ldr	r3, [r3, #32]
 8006058:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	691b      	ldr	r3, [r3, #16]
 8006060:	011b      	lsls	r3, r3, #4
 8006062:	4919      	ldr	r1, [pc, #100]	@ (80060c8 <HAL_RCC_ClockConfig+0x3d0>)
 8006064:	4313      	orrs	r3, r2
 8006066:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f003 0310 	and.w	r3, r3, #16
 8006070:	2b00      	cmp	r3, #0
 8006072:	d010      	beq.n	8006096 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	695a      	ldr	r2, [r3, #20]
 8006078:	4b13      	ldr	r3, [pc, #76]	@ (80060c8 <HAL_RCC_ClockConfig+0x3d0>)
 800607a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800607c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006080:	429a      	cmp	r2, r3
 8006082:	d208      	bcs.n	8006096 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8006084:	4b10      	ldr	r3, [pc, #64]	@ (80060c8 <HAL_RCC_ClockConfig+0x3d0>)
 8006086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006088:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	695b      	ldr	r3, [r3, #20]
 8006090:	490d      	ldr	r1, [pc, #52]	@ (80060c8 <HAL_RCC_ClockConfig+0x3d0>)
 8006092:	4313      	orrs	r3, r2
 8006094:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8006096:	f000 f821 	bl	80060dc <HAL_RCC_GetSysClockFreq>
 800609a:	4602      	mov	r2, r0
 800609c:	4b0a      	ldr	r3, [pc, #40]	@ (80060c8 <HAL_RCC_ClockConfig+0x3d0>)
 800609e:	6a1b      	ldr	r3, [r3, #32]
 80060a0:	f003 030f 	and.w	r3, r3, #15
 80060a4:	490a      	ldr	r1, [pc, #40]	@ (80060d0 <HAL_RCC_ClockConfig+0x3d8>)
 80060a6:	5ccb      	ldrb	r3, [r1, r3]
 80060a8:	fa22 f303 	lsr.w	r3, r2, r3
 80060ac:	4a09      	ldr	r2, [pc, #36]	@ (80060d4 <HAL_RCC_ClockConfig+0x3dc>)
 80060ae:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80060b0:	4b09      	ldr	r3, [pc, #36]	@ (80060d8 <HAL_RCC_ClockConfig+0x3e0>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4618      	mov	r0, r3
 80060b6:	f7fe f92f 	bl	8004318 <HAL_InitTick>
 80060ba:	4603      	mov	r3, r0
 80060bc:	73fb      	strb	r3, [r7, #15]

  return status;
 80060be:	7bfb      	ldrb	r3, [r7, #15]
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3718      	adds	r7, #24
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	46020c00 	.word	0x46020c00
 80060cc:	40022000 	.word	0x40022000
 80060d0:	080145e0 	.word	0x080145e0
 80060d4:	2000000c 	.word	0x2000000c
 80060d8:	20000010 	.word	0x20000010

080060dc <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060dc:	b480      	push	{r7}
 80060de:	b08b      	sub	sp, #44	@ 0x2c
 80060e0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80060e2:	2300      	movs	r3, #0
 80060e4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80060e6:	2300      	movs	r3, #0
 80060e8:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060ea:	4b78      	ldr	r3, [pc, #480]	@ (80062cc <HAL_RCC_GetSysClockFreq+0x1f0>)
 80060ec:	69db      	ldr	r3, [r3, #28]
 80060ee:	f003 030c 	and.w	r3, r3, #12
 80060f2:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80060f4:	4b75      	ldr	r3, [pc, #468]	@ (80062cc <HAL_RCC_GetSysClockFreq+0x1f0>)
 80060f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060f8:	f003 0303 	and.w	r3, r3, #3
 80060fc:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80060fe:	69bb      	ldr	r3, [r7, #24]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d005      	beq.n	8006110 <HAL_RCC_GetSysClockFreq+0x34>
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	2b0c      	cmp	r3, #12
 8006108:	d121      	bne.n	800614e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	2b01      	cmp	r3, #1
 800610e:	d11e      	bne.n	800614e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8006110:	4b6e      	ldr	r3, [pc, #440]	@ (80062cc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006118:	2b00      	cmp	r3, #0
 800611a:	d107      	bne.n	800612c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800611c:	4b6b      	ldr	r3, [pc, #428]	@ (80062cc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800611e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006122:	0b1b      	lsrs	r3, r3, #12
 8006124:	f003 030f 	and.w	r3, r3, #15
 8006128:	627b      	str	r3, [r7, #36]	@ 0x24
 800612a:	e005      	b.n	8006138 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800612c:	4b67      	ldr	r3, [pc, #412]	@ (80062cc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	0f1b      	lsrs	r3, r3, #28
 8006132:	f003 030f 	and.w	r3, r3, #15
 8006136:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006138:	4a65      	ldr	r2, [pc, #404]	@ (80062d0 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800613a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800613c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006140:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006142:	69bb      	ldr	r3, [r7, #24]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d110      	bne.n	800616a <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800614a:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800614c:	e00d      	b.n	800616a <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800614e:	4b5f      	ldr	r3, [pc, #380]	@ (80062cc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006150:	69db      	ldr	r3, [r3, #28]
 8006152:	f003 030c 	and.w	r3, r3, #12
 8006156:	2b04      	cmp	r3, #4
 8006158:	d102      	bne.n	8006160 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800615a:	4b5e      	ldr	r3, [pc, #376]	@ (80062d4 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800615c:	623b      	str	r3, [r7, #32]
 800615e:	e004      	b.n	800616a <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006160:	69bb      	ldr	r3, [r7, #24]
 8006162:	2b08      	cmp	r3, #8
 8006164:	d101      	bne.n	800616a <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006166:	4b5b      	ldr	r3, [pc, #364]	@ (80062d4 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8006168:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	2b0c      	cmp	r3, #12
 800616e:	f040 80a5 	bne.w	80062bc <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006172:	4b56      	ldr	r3, [pc, #344]	@ (80062cc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006176:	f003 0303 	and.w	r3, r3, #3
 800617a:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800617c:	4b53      	ldr	r3, [pc, #332]	@ (80062cc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800617e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006180:	0a1b      	lsrs	r3, r3, #8
 8006182:	f003 030f 	and.w	r3, r3, #15
 8006186:	3301      	adds	r3, #1
 8006188:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800618a:	4b50      	ldr	r3, [pc, #320]	@ (80062cc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800618c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800618e:	091b      	lsrs	r3, r3, #4
 8006190:	f003 0301 	and.w	r3, r3, #1
 8006194:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8006196:	4b4d      	ldr	r3, [pc, #308]	@ (80062cc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006198:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800619a:	08db      	lsrs	r3, r3, #3
 800619c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80061a0:	68ba      	ldr	r2, [r7, #8]
 80061a2:	fb02 f303 	mul.w	r3, r2, r3
 80061a6:	ee07 3a90 	vmov	s15, r3
 80061aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061ae:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	2b02      	cmp	r3, #2
 80061b6:	d003      	beq.n	80061c0 <HAL_RCC_GetSysClockFreq+0xe4>
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	2b03      	cmp	r3, #3
 80061bc:	d022      	beq.n	8006204 <HAL_RCC_GetSysClockFreq+0x128>
 80061be:	e043      	b.n	8006248 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	ee07 3a90 	vmov	s15, r3
 80061c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061ca:	eddf 6a43 	vldr	s13, [pc, #268]	@ 80062d8 <HAL_RCC_GetSysClockFreq+0x1fc>
 80061ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061d2:	4b3e      	ldr	r3, [pc, #248]	@ (80062cc <HAL_RCC_GetSysClockFreq+0x1f0>)
 80061d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061da:	ee07 3a90 	vmov	s15, r3
 80061de:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80061e2:	ed97 6a01 	vldr	s12, [r7, #4]
 80061e6:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 80062dc <HAL_RCC_GetSysClockFreq+0x200>
 80061ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80061ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80061f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80061f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80061fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006202:	e046      	b.n	8006292 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	ee07 3a90 	vmov	s15, r3
 800620a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800620e:	eddf 6a32 	vldr	s13, [pc, #200]	@ 80062d8 <HAL_RCC_GetSysClockFreq+0x1fc>
 8006212:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006216:	4b2d      	ldr	r3, [pc, #180]	@ (80062cc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006218:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800621a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800621e:	ee07 3a90 	vmov	s15, r3
 8006222:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006226:	ed97 6a01 	vldr	s12, [r7, #4]
 800622a:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 80062dc <HAL_RCC_GetSysClockFreq+0x200>
 800622e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006232:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006236:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800623a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800623e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006242:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006246:	e024      	b.n	8006292 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800624a:	ee07 3a90 	vmov	s15, r3
 800624e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	ee07 3a90 	vmov	s15, r3
 8006258:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800625c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006260:	4b1a      	ldr	r3, [pc, #104]	@ (80062cc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006262:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006264:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006268:	ee07 3a90 	vmov	s15, r3
 800626c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006270:	ed97 6a01 	vldr	s12, [r7, #4]
 8006274:	eddf 5a19 	vldr	s11, [pc, #100]	@ 80062dc <HAL_RCC_GetSysClockFreq+0x200>
 8006278:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800627c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006280:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006284:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006288:	ee67 7a27 	vmul.f32	s15, s14, s15
 800628c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006290:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8006292:	4b0e      	ldr	r3, [pc, #56]	@ (80062cc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006294:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006296:	0e1b      	lsrs	r3, r3, #24
 8006298:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800629c:	3301      	adds	r3, #1
 800629e:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	ee07 3a90 	vmov	s15, r3
 80062a6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80062aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80062ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062b6:	ee17 3a90 	vmov	r3, s15
 80062ba:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 80062bc:	6a3b      	ldr	r3, [r7, #32]
}
 80062be:	4618      	mov	r0, r3
 80062c0:	372c      	adds	r7, #44	@ 0x2c
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr
 80062ca:	bf00      	nop
 80062cc:	46020c00 	.word	0x46020c00
 80062d0:	080145f8 	.word	0x080145f8
 80062d4:	00f42400 	.word	0x00f42400
 80062d8:	4b742400 	.word	0x4b742400
 80062dc:	46000000 	.word	0x46000000

080062e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80062e4:	f7ff fefa 	bl	80060dc <HAL_RCC_GetSysClockFreq>
 80062e8:	4602      	mov	r2, r0
 80062ea:	4b07      	ldr	r3, [pc, #28]	@ (8006308 <HAL_RCC_GetHCLKFreq+0x28>)
 80062ec:	6a1b      	ldr	r3, [r3, #32]
 80062ee:	f003 030f 	and.w	r3, r3, #15
 80062f2:	4906      	ldr	r1, [pc, #24]	@ (800630c <HAL_RCC_GetHCLKFreq+0x2c>)
 80062f4:	5ccb      	ldrb	r3, [r1, r3]
 80062f6:	fa22 f303 	lsr.w	r3, r2, r3
 80062fa:	4a05      	ldr	r2, [pc, #20]	@ (8006310 <HAL_RCC_GetHCLKFreq+0x30>)
 80062fc:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80062fe:	4b04      	ldr	r3, [pc, #16]	@ (8006310 <HAL_RCC_GetHCLKFreq+0x30>)
 8006300:	681b      	ldr	r3, [r3, #0]
}
 8006302:	4618      	mov	r0, r3
 8006304:	bd80      	pop	{r7, pc}
 8006306:	bf00      	nop
 8006308:	46020c00 	.word	0x46020c00
 800630c:	080145e0 	.word	0x080145e0
 8006310:	2000000c 	.word	0x2000000c

08006314 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8006318:	f7ff ffe2 	bl	80062e0 <HAL_RCC_GetHCLKFreq>
 800631c:	4602      	mov	r2, r0
 800631e:	4b05      	ldr	r3, [pc, #20]	@ (8006334 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006320:	6a1b      	ldr	r3, [r3, #32]
 8006322:	091b      	lsrs	r3, r3, #4
 8006324:	f003 0307 	and.w	r3, r3, #7
 8006328:	4903      	ldr	r1, [pc, #12]	@ (8006338 <HAL_RCC_GetPCLK1Freq+0x24>)
 800632a:	5ccb      	ldrb	r3, [r1, r3]
 800632c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006330:	4618      	mov	r0, r3
 8006332:	bd80      	pop	{r7, pc}
 8006334:	46020c00 	.word	0x46020c00
 8006338:	080145f0 	.word	0x080145f0

0800633c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8006340:	f7ff ffce 	bl	80062e0 <HAL_RCC_GetHCLKFreq>
 8006344:	4602      	mov	r2, r0
 8006346:	4b05      	ldr	r3, [pc, #20]	@ (800635c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006348:	6a1b      	ldr	r3, [r3, #32]
 800634a:	0a1b      	lsrs	r3, r3, #8
 800634c:	f003 0307 	and.w	r3, r3, #7
 8006350:	4903      	ldr	r1, [pc, #12]	@ (8006360 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006352:	5ccb      	ldrb	r3, [r1, r3]
 8006354:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006358:	4618      	mov	r0, r3
 800635a:	bd80      	pop	{r7, pc}
 800635c:	46020c00 	.word	0x46020c00
 8006360:	080145f0 	.word	0x080145f0

08006364 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8006368:	f7ff ffba 	bl	80062e0 <HAL_RCC_GetHCLKFreq>
 800636c:	4602      	mov	r2, r0
 800636e:	4b05      	ldr	r3, [pc, #20]	@ (8006384 <HAL_RCC_GetPCLK3Freq+0x20>)
 8006370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006372:	091b      	lsrs	r3, r3, #4
 8006374:	f003 0307 	and.w	r3, r3, #7
 8006378:	4903      	ldr	r1, [pc, #12]	@ (8006388 <HAL_RCC_GetPCLK3Freq+0x24>)
 800637a:	5ccb      	ldrb	r3, [r1, r3]
 800637c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006380:	4618      	mov	r0, r3
 8006382:	bd80      	pop	{r7, pc}
 8006384:	46020c00 	.word	0x46020c00
 8006388:	080145f0 	.word	0x080145f0

0800638c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b086      	sub	sp, #24
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006394:	4b3e      	ldr	r3, [pc, #248]	@ (8006490 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006396:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800639a:	f003 0304 	and.w	r3, r3, #4
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d003      	beq.n	80063aa <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80063a2:	f7fe fdbf 	bl	8004f24 <HAL_PWREx_GetVoltageRange>
 80063a6:	6178      	str	r0, [r7, #20]
 80063a8:	e019      	b.n	80063de <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80063aa:	4b39      	ldr	r3, [pc, #228]	@ (8006490 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80063ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80063b0:	4a37      	ldr	r2, [pc, #220]	@ (8006490 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80063b2:	f043 0304 	orr.w	r3, r3, #4
 80063b6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80063ba:	4b35      	ldr	r3, [pc, #212]	@ (8006490 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80063bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80063c0:	f003 0304 	and.w	r3, r3, #4
 80063c4:	60fb      	str	r3, [r7, #12]
 80063c6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80063c8:	f7fe fdac 	bl	8004f24 <HAL_PWREx_GetVoltageRange>
 80063cc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80063ce:	4b30      	ldr	r3, [pc, #192]	@ (8006490 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80063d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80063d4:	4a2e      	ldr	r2, [pc, #184]	@ (8006490 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80063d6:	f023 0304 	bic.w	r3, r3, #4
 80063da:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80063e4:	d003      	beq.n	80063ee <RCC_SetFlashLatencyFromMSIRange+0x62>
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80063ec:	d109      	bne.n	8006402 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80063f4:	d202      	bcs.n	80063fc <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80063f6:	2301      	movs	r3, #1
 80063f8:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80063fa:	e033      	b.n	8006464 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80063fc:	2300      	movs	r3, #0
 80063fe:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8006400:	e030      	b.n	8006464 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006408:	d208      	bcs.n	800641c <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006410:	d102      	bne.n	8006418 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8006412:	2303      	movs	r3, #3
 8006414:	613b      	str	r3, [r7, #16]
 8006416:	e025      	b.n	8006464 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8006418:	2301      	movs	r3, #1
 800641a:	e035      	b.n	8006488 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006422:	d90f      	bls.n	8006444 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d109      	bne.n	800643e <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006430:	d902      	bls.n	8006438 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8006432:	2300      	movs	r3, #0
 8006434:	613b      	str	r3, [r7, #16]
 8006436:	e015      	b.n	8006464 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8006438:	2301      	movs	r3, #1
 800643a:	613b      	str	r3, [r7, #16]
 800643c:	e012      	b.n	8006464 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800643e:	2300      	movs	r3, #0
 8006440:	613b      	str	r3, [r7, #16]
 8006442:	e00f      	b.n	8006464 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800644a:	d109      	bne.n	8006460 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006452:	d102      	bne.n	800645a <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8006454:	2301      	movs	r3, #1
 8006456:	613b      	str	r3, [r7, #16]
 8006458:	e004      	b.n	8006464 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800645a:	2302      	movs	r3, #2
 800645c:	613b      	str	r3, [r7, #16]
 800645e:	e001      	b.n	8006464 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8006460:	2301      	movs	r3, #1
 8006462:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006464:	4b0b      	ldr	r3, [pc, #44]	@ (8006494 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f023 020f 	bic.w	r2, r3, #15
 800646c:	4909      	ldr	r1, [pc, #36]	@ (8006494 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	4313      	orrs	r3, r2
 8006472:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8006474:	4b07      	ldr	r3, [pc, #28]	@ (8006494 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f003 030f 	and.w	r3, r3, #15
 800647c:	693a      	ldr	r2, [r7, #16]
 800647e:	429a      	cmp	r2, r3
 8006480:	d001      	beq.n	8006486 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	e000      	b.n	8006488 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8006486:	2300      	movs	r3, #0
}
 8006488:	4618      	mov	r0, r3
 800648a:	3718      	adds	r7, #24
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}
 8006490:	46020c00 	.word	0x46020c00
 8006494:	40022000 	.word	0x40022000

08006498 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8006498:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800649c:	b0b6      	sub	sp, #216	@ 0xd8
 800649e:	af00      	add	r7, sp, #0
 80064a0:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80064a4:	2300      	movs	r3, #0
 80064a6:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80064aa:	2300      	movs	r3, #0
 80064ac:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80064b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80064b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b8:	f002 0401 	and.w	r4, r2, #1
 80064bc:	2500      	movs	r5, #0
 80064be:	ea54 0305 	orrs.w	r3, r4, r5
 80064c2:	d00b      	beq.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80064c4:	4bc5      	ldr	r3, [pc, #788]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80064c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80064ca:	f023 0103 	bic.w	r1, r3, #3
 80064ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80064d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064d4:	4ac1      	ldr	r2, [pc, #772]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80064d6:	430b      	orrs	r3, r1
 80064d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80064dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80064e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e4:	f002 0804 	and.w	r8, r2, #4
 80064e8:	f04f 0900 	mov.w	r9, #0
 80064ec:	ea58 0309 	orrs.w	r3, r8, r9
 80064f0:	d00b      	beq.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80064f2:	4bba      	ldr	r3, [pc, #744]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80064f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80064f8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80064fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006500:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006502:	4ab6      	ldr	r2, [pc, #728]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8006504:	430b      	orrs	r3, r1
 8006506:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800650a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800650e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006512:	f002 0a08 	and.w	sl, r2, #8
 8006516:	f04f 0b00 	mov.w	fp, #0
 800651a:	ea5a 030b 	orrs.w	r3, sl, fp
 800651e:	d00b      	beq.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8006520:	4bae      	ldr	r3, [pc, #696]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8006522:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006526:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800652a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800652e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006530:	4aaa      	ldr	r2, [pc, #680]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8006532:	430b      	orrs	r3, r1
 8006534:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006538:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800653c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006540:	f002 0310 	and.w	r3, r2, #16
 8006544:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006548:	2300      	movs	r3, #0
 800654a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800654e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006552:	460b      	mov	r3, r1
 8006554:	4313      	orrs	r3, r2
 8006556:	d00b      	beq.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8006558:	4ba0      	ldr	r3, [pc, #640]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800655a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800655e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006562:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006566:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006568:	4a9c      	ldr	r2, [pc, #624]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800656a:	430b      	orrs	r3, r1
 800656c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006570:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006578:	f002 0320 	and.w	r3, r2, #32
 800657c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006580:	2300      	movs	r3, #0
 8006582:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006586:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800658a:	460b      	mov	r3, r1
 800658c:	4313      	orrs	r3, r2
 800658e:	d00b      	beq.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8006590:	4b92      	ldr	r3, [pc, #584]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8006592:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006596:	f023 0107 	bic.w	r1, r3, #7
 800659a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800659e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065a0:	4a8e      	ldr	r2, [pc, #568]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80065a2:	430b      	orrs	r3, r1
 80065a4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80065a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80065ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b0:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80065b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80065b8:	2300      	movs	r3, #0
 80065ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80065be:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80065c2:	460b      	mov	r3, r1
 80065c4:	4313      	orrs	r3, r2
 80065c6:	d00b      	beq.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80065c8:	4b84      	ldr	r3, [pc, #528]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80065ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80065ce:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 80065d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80065d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80065d8:	4a80      	ldr	r2, [pc, #512]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80065da:	430b      	orrs	r3, r1
 80065dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80065e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80065e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80065ec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80065f0:	2300      	movs	r3, #0
 80065f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80065f6:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80065fa:	460b      	mov	r3, r1
 80065fc:	4313      	orrs	r3, r2
 80065fe:	d00b      	beq.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8006600:	4b76      	ldr	r3, [pc, #472]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8006602:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006606:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800660a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800660e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006610:	4a72      	ldr	r2, [pc, #456]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8006612:	430b      	orrs	r3, r1
 8006614:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006618:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800661c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006620:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8006624:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006628:	2300      	movs	r3, #0
 800662a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800662e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006632:	460b      	mov	r3, r1
 8006634:	4313      	orrs	r3, r2
 8006636:	d00b      	beq.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8006638:	4b68      	ldr	r3, [pc, #416]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800663a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800663e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006642:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006646:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006648:	4a64      	ldr	r2, [pc, #400]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800664a:	430b      	orrs	r3, r1
 800664c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006650:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006658:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800665c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006660:	2300      	movs	r3, #0
 8006662:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006666:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800666a:	460b      	mov	r3, r1
 800666c:	4313      	orrs	r3, r2
 800666e:	d00b      	beq.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8006670:	4b5a      	ldr	r3, [pc, #360]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8006672:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006676:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 800667a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800667e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006680:	4a56      	ldr	r2, [pc, #344]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8006682:	430b      	orrs	r3, r1
 8006684:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006688:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800668c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006690:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8006694:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006698:	2300      	movs	r3, #0
 800669a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800669e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80066a2:	460b      	mov	r3, r1
 80066a4:	4313      	orrs	r3, r2
 80066a6:	d00b      	beq.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80066a8:	4b4c      	ldr	r3, [pc, #304]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80066aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80066ae:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 80066b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80066b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066b8:	4a48      	ldr	r2, [pc, #288]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80066ba:	430b      	orrs	r3, r1
 80066bc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80066c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80066c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c8:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80066cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80066d0:	2300      	movs	r3, #0
 80066d2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80066d6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80066da:	460b      	mov	r3, r1
 80066dc:	4313      	orrs	r3, r2
 80066de:	d00b      	beq.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80066e0:	4b3e      	ldr	r3, [pc, #248]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80066e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80066e6:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80066ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80066ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80066f0:	4a3a      	ldr	r2, [pc, #232]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80066f2:	430b      	orrs	r3, r1
 80066f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 80066f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80066fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006700:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006704:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006706:	2300      	movs	r3, #0
 8006708:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800670a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800670e:	460b      	mov	r3, r1
 8006710:	4313      	orrs	r3, r2
 8006712:	d00b      	beq.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8006714:	4b31      	ldr	r3, [pc, #196]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8006716:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800671a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800671e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006722:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006724:	4a2d      	ldr	r2, [pc, #180]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8006726:	430b      	orrs	r3, r1
 8006728:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800672c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006734:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006738:	673b      	str	r3, [r7, #112]	@ 0x70
 800673a:	2300      	movs	r3, #0
 800673c:	677b      	str	r3, [r7, #116]	@ 0x74
 800673e:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006742:	460b      	mov	r3, r1
 8006744:	4313      	orrs	r3, r2
 8006746:	d04f      	beq.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8006748:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800674c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006750:	2b80      	cmp	r3, #128	@ 0x80
 8006752:	d02d      	beq.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8006754:	2b80      	cmp	r3, #128	@ 0x80
 8006756:	d827      	bhi.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8006758:	2b60      	cmp	r3, #96	@ 0x60
 800675a:	d02b      	beq.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 800675c:	2b60      	cmp	r3, #96	@ 0x60
 800675e:	d823      	bhi.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8006760:	2b40      	cmp	r3, #64	@ 0x40
 8006762:	d006      	beq.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006764:	2b40      	cmp	r3, #64	@ 0x40
 8006766:	d81f      	bhi.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8006768:	2b00      	cmp	r3, #0
 800676a:	d009      	beq.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 800676c:	2b20      	cmp	r3, #32
 800676e:	d011      	beq.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8006770:	e01a      	b.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x310>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006772:	4b1a      	ldr	r3, [pc, #104]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8006774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006776:	4a19      	ldr	r2, [pc, #100]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8006778:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800677c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800677e:	e01a      	b.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006780:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006784:	3308      	adds	r3, #8
 8006786:	4618      	mov	r0, r3
 8006788:	f002 f914 	bl	80089b4 <RCCEx_PLL2_Config>
 800678c:	4603      	mov	r3, r0
 800678e:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006792:	e010      	b.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006794:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006798:	332c      	adds	r3, #44	@ 0x2c
 800679a:	4618      	mov	r0, r3
 800679c:	f002 f9a2 	bl	8008ae4 <RCCEx_PLL3_Config>
 80067a0:	4603      	mov	r3, r0
 80067a2:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        /* SAI1 clock source config set later after clock selection check */
        break;
 80067a6:	e006      	b.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 80067ae:	e002      	b.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
        break;
 80067b0:	bf00      	nop
 80067b2:	e000      	b.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
        break;
 80067b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067b6:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d110      	bne.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x348>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80067be:	4b07      	ldr	r3, [pc, #28]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80067c0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80067c4:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 80067c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80067cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80067d0:	4a02      	ldr	r2, [pc, #8]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80067d2:	430b      	orrs	r3, r1
 80067d4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80067d8:	e006      	b.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x350>
 80067da:	bf00      	nop
 80067dc:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067e0:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80067e4:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80067e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80067ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80067f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80067f6:	2300      	movs	r3, #0
 80067f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80067fa:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80067fe:	460b      	mov	r3, r1
 8006800:	4313      	orrs	r3, r2
 8006802:	d046      	beq.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8006804:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006808:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800680c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006810:	d028      	beq.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8006812:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006816:	d821      	bhi.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8006818:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800681c:	d022      	beq.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800681e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006822:	d81b      	bhi.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8006824:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006828:	d01c      	beq.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800682a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800682e:	d815      	bhi.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8006830:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006834:	d008      	beq.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 8006836:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800683a:	d80f      	bhi.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 800683c:	2b00      	cmp	r3, #0
 800683e:	d011      	beq.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8006840:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006844:	d00e      	beq.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8006846:	e009      	b.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006848:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800684c:	3308      	adds	r3, #8
 800684e:	4618      	mov	r0, r3
 8006850:	f002 f8b0 	bl	80089b4 <RCCEx_PLL2_Config>
 8006854:	4603      	mov	r3, r0
 8006856:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 800685a:	e004      	b.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800685c:	2301      	movs	r3, #1
 800685e:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8006862:	e000      	b.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
        break;
 8006864:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006866:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800686a:	2b00      	cmp	r3, #0
 800686c:	d10d      	bne.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800686e:	4bb6      	ldr	r3, [pc, #728]	@ (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8006870:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006874:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006878:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800687c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006880:	4ab1      	ldr	r2, [pc, #708]	@ (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8006882:	430b      	orrs	r3, r1
 8006884:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006888:	e003      	b.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800688a:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800688e:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8006892:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800689a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800689e:	663b      	str	r3, [r7, #96]	@ 0x60
 80068a0:	2300      	movs	r3, #0
 80068a2:	667b      	str	r3, [r7, #100]	@ 0x64
 80068a4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80068a8:	460b      	mov	r3, r1
 80068aa:	4313      	orrs	r3, r2
 80068ac:	d03e      	beq.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 80068ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80068b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068b6:	2b04      	cmp	r3, #4
 80068b8:	d81d      	bhi.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 80068ba:	a201      	add	r2, pc, #4	@ (adr r2, 80068c0 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80068bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068c0:	080068ff 	.word	0x080068ff
 80068c4:	080068d5 	.word	0x080068d5
 80068c8:	080068e3 	.word	0x080068e3
 80068cc:	080068ff 	.word	0x080068ff
 80068d0:	080068ff 	.word	0x080068ff
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80068d4:	4b9c      	ldr	r3, [pc, #624]	@ (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80068d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068d8:	4a9b      	ldr	r2, [pc, #620]	@ (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80068da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80068de:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80068e0:	e00e      	b.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x468>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80068e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80068e6:	332c      	adds	r3, #44	@ 0x2c
 80068e8:	4618      	mov	r0, r3
 80068ea:	f002 f8fb 	bl	8008ae4 <RCCEx_PLL3_Config>
 80068ee:	4603      	mov	r3, r0
 80068f0:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 80068f4:	e004      	b.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x468>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80068f6:	2301      	movs	r3, #1
 80068f8:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 80068fc:	e000      	b.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x468>
        break;
 80068fe:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006900:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8006904:	2b00      	cmp	r3, #0
 8006906:	d10d      	bne.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8006908:	4b8f      	ldr	r3, [pc, #572]	@ (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800690a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800690e:	f023 0107 	bic.w	r1, r3, #7
 8006912:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006916:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800691a:	4a8b      	ldr	r2, [pc, #556]	@ (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800691c:	430b      	orrs	r3, r1
 800691e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006922:	e003      	b.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x494>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006924:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8006928:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800692c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006934:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006938:	65bb      	str	r3, [r7, #88]	@ 0x58
 800693a:	2300      	movs	r3, #0
 800693c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800693e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006942:	460b      	mov	r3, r1
 8006944:	4313      	orrs	r3, r2
 8006946:	d04a      	beq.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x546>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8006948:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800694c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006950:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006954:	d028      	beq.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8006956:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800695a:	d821      	bhi.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800695c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006960:	d024      	beq.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x514>
 8006962:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006966:	d81b      	bhi.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8006968:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800696c:	d00e      	beq.n	800698c <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 800696e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006972:	d815      	bhi.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8006974:	2b00      	cmp	r3, #0
 8006976:	d01b      	beq.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006978:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800697c:	d110      	bne.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800697e:	4b72      	ldr	r3, [pc, #456]	@ (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8006980:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006982:	4a71      	ldr	r2, [pc, #452]	@ (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8006984:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006988:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800698a:	e012      	b.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800698c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006990:	332c      	adds	r3, #44	@ 0x2c
 8006992:	4618      	mov	r0, r3
 8006994:	f002 f8a6 	bl	8008ae4 <RCCEx_PLL3_Config>
 8006998:	4603      	mov	r3, r0
 800699a:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 800699e:	e008      	b.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80069a0:	2301      	movs	r3, #1
 80069a2:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 80069a6:	e004      	b.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 80069a8:	bf00      	nop
 80069aa:	e002      	b.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 80069ac:	bf00      	nop
 80069ae:	e000      	b.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 80069b0:	bf00      	nop
    }
    if (ret == HAL_OK)
 80069b2:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d10d      	bne.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x53e>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 80069ba:	4b63      	ldr	r3, [pc, #396]	@ (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80069bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80069c0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80069c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80069c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069cc:	4a5e      	ldr	r2, [pc, #376]	@ (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80069ce:	430b      	orrs	r3, r1
 80069d0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80069d4:	e003      	b.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x546>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069d6:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80069da:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80069de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80069e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80069ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80069ec:	2300      	movs	r3, #0
 80069ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80069f0:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80069f4:	460b      	mov	r3, r1
 80069f6:	4313      	orrs	r3, r2
 80069f8:	f000 80ba 	beq.w	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80069fc:	2300      	movs	r3, #0
 80069fe:	f887 30d1 	strb.w	r3, [r7, #209]	@ 0xd1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a02:	4b51      	ldr	r3, [pc, #324]	@ (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8006a04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a08:	f003 0304 	and.w	r3, r3, #4
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d113      	bne.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a10:	4b4d      	ldr	r3, [pc, #308]	@ (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8006a12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a16:	4a4c      	ldr	r2, [pc, #304]	@ (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8006a18:	f043 0304 	orr.w	r3, r3, #4
 8006a1c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006a20:	4b49      	ldr	r3, [pc, #292]	@ (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8006a22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a26:	f003 0304 	and.w	r3, r3, #4
 8006a2a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006a2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
      pwrclkchanged = SET;
 8006a32:	2301      	movs	r3, #1
 8006a34:	f887 30d1 	strb.w	r3, [r7, #209]	@ 0xd1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006a38:	4b44      	ldr	r3, [pc, #272]	@ (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 8006a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a3c:	4a43      	ldr	r2, [pc, #268]	@ (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 8006a3e:	f043 0301 	orr.w	r3, r3, #1
 8006a42:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006a44:	f7fd fcf2 	bl	800442c <HAL_GetTick>
 8006a48:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006a4c:	e00b      	b.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a4e:	f7fd fced 	bl	800442c <HAL_GetTick>
 8006a52:	4602      	mov	r2, r0
 8006a54:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006a58:	1ad3      	subs	r3, r2, r3
 8006a5a:	2b02      	cmp	r3, #2
 8006a5c:	d903      	bls.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        ret = HAL_TIMEOUT;
 8006a5e:	2303      	movs	r3, #3
 8006a60:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8006a64:	e005      	b.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x5da>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006a66:	4b39      	ldr	r3, [pc, #228]	@ (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 8006a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a6a:	f003 0301 	and.w	r3, r3, #1
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d0ed      	beq.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
      }
    }

    if (ret == HAL_OK)
 8006a72:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d16a      	bne.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006a7a:	4b33      	ldr	r3, [pc, #204]	@ (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8006a7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a84:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8006a88:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d023      	beq.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x640>
 8006a90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006a94:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8006a98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d01b      	beq.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x640>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006aa0:	4b29      	ldr	r3, [pc, #164]	@ (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8006aa2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006aa6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006aaa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006aae:	4b26      	ldr	r3, [pc, #152]	@ (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8006ab0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ab4:	4a24      	ldr	r2, [pc, #144]	@ (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8006ab6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006aba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006abe:	4b22      	ldr	r3, [pc, #136]	@ (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8006ac0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ac4:	4a20      	ldr	r2, [pc, #128]	@ (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8006ac6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006aca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006ace:	4a1e      	ldr	r2, [pc, #120]	@ (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8006ad0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006ad4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006ad8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006adc:	f003 0301 	and.w	r3, r3, #1
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d019      	beq.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x680>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ae4:	f7fd fca2 	bl	800442c <HAL_GetTick>
 8006ae8:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006aec:	e00d      	b.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006aee:	f7fd fc9d 	bl	800442c <HAL_GetTick>
 8006af2:	4602      	mov	r2, r0
 8006af4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006af8:	1ad2      	subs	r2, r2, r3
 8006afa:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d903      	bls.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8006b02:	2303      	movs	r3, #3
 8006b04:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
            break;
 8006b08:	e006      	b.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x680>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b0a:	4b0f      	ldr	r3, [pc, #60]	@ (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8006b0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b10:	f003 0302 	and.w	r3, r3, #2
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d0ea      	beq.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if (ret == HAL_OK)
 8006b18:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d10d      	bne.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8006b20:	4b09      	ldr	r3, [pc, #36]	@ (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8006b22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b26:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006b2a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006b2e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006b32:	4a05      	ldr	r2, [pc, #20]	@ (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8006b34:	430b      	orrs	r3, r1
 8006b36:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006b3a:	e00d      	b.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006b3c:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8006b40:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
 8006b44:	e008      	b.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 8006b46:	bf00      	nop
 8006b48:	46020c00 	.word	0x46020c00
 8006b4c:	46020800 	.word	0x46020800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b50:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8006b54:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006b58:	f897 30d1 	ldrb.w	r3, [r7, #209]	@ 0xd1
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d107      	bne.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b60:	4bb2      	ldr	r3, [pc, #712]	@ (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8006b62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b66:	4ab1      	ldr	r2, [pc, #708]	@ (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8006b68:	f023 0304 	bic.w	r3, r3, #4
 8006b6c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8006b70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b78:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006b7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b7e:	2300      	movs	r3, #0
 8006b80:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b82:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006b86:	460b      	mov	r3, r1
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	d042      	beq.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x77a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8006b8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006b90:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006b94:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006b98:	d022      	beq.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8006b9a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006b9e:	d81b      	bhi.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8006ba0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ba4:	d011      	beq.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x732>
 8006ba6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006baa:	d815      	bhi.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d019      	beq.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8006bb0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006bb4:	d110      	bne.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x740>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006bb6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006bba:	3308      	adds	r3, #8
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f001 fef9 	bl	80089b4 <RCCEx_PLL2_Config>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8006bc8:	e00d      	b.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0x74e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bca:	4b98      	ldr	r3, [pc, #608]	@ (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8006bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bce:	4a97      	ldr	r2, [pc, #604]	@ (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8006bd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006bd4:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8006bd6:	e006      	b.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0x74e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8006bde:	e002      	b.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0x74e>
        break;
 8006be0:	bf00      	nop
 8006be2:	e000      	b.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0x74e>
        break;
 8006be4:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006be6:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d10d      	bne.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x772>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8006bee:	4b8f      	ldr	r3, [pc, #572]	@ (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8006bf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006bf4:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8006bf8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006bfc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006c00:	4a8a      	ldr	r2, [pc, #552]	@ (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8006c02:	430b      	orrs	r3, r1
 8006c04:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006c08:	e003      	b.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x77a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c0a:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8006c0e:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006c12:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c1a:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006c1e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c20:	2300      	movs	r3, #0
 8006c22:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c24:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006c28:	460b      	mov	r3, r1
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	d02d      	beq.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x7f2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8006c2e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c3a:	d00b      	beq.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8006c3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c40:	d804      	bhi.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x7b4>
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d008      	beq.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8006c46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c4a:	d007      	beq.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8006c52:	e004      	b.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 8006c54:	bf00      	nop
 8006c56:	e002      	b.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 8006c58:	bf00      	nop
 8006c5a:	e000      	b.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 8006c5c:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006c5e:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d10d      	bne.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x7ea>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8006c66:	4b71      	ldr	r3, [pc, #452]	@ (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8006c68:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006c6c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006c70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c78:	4a6c      	ldr	r2, [pc, #432]	@ (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8006c7a:	430b      	orrs	r3, r1
 8006c7c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006c80:	e003      	b.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x7f2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c82:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8006c86:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8006c8a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c92:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006c96:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006c98:	2300      	movs	r3, #0
 8006c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c9c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006ca0:	460b      	mov	r3, r1
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	d00c      	beq.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x828>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8006ca6:	4b61      	ldr	r3, [pc, #388]	@ (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8006ca8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006cac:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 8006cb0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006cb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006cb8:	4a5c      	ldr	r2, [pc, #368]	@ (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8006cba:	430b      	orrs	r3, r1
 8006cbc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8006cc0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc8:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006ccc:	633b      	str	r3, [r7, #48]	@ 0x30
 8006cce:	2300      	movs	r3, #0
 8006cd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cd2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006cd6:	460b      	mov	r3, r1
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	d019      	beq.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x878>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8006cdc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006ce0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006ce4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006ce8:	d105      	bne.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006cea:	4b50      	ldr	r3, [pc, #320]	@ (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8006cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cee:	4a4f      	ldr	r2, [pc, #316]	@ (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8006cf0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006cf4:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8006cf6:	4b4d      	ldr	r3, [pc, #308]	@ (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8006cf8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006cfc:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006d00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006d04:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006d08:	4a48      	ldr	r2, [pc, #288]	@ (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8006d0a:	430b      	orrs	r3, r1
 8006d0c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8006d10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d18:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006d1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d1e:	2300      	movs	r3, #0
 8006d20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d22:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006d26:	460b      	mov	r3, r1
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	d00c      	beq.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x8ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8006d2c:	4b3f      	ldr	r3, [pc, #252]	@ (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8006d2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006d32:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006d36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006d3a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006d3e:	493b      	ldr	r1, [pc, #236]	@ (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8006d40:	4313      	orrs	r3, r2
 8006d42:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8006d46:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d4e:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006d52:	623b      	str	r3, [r7, #32]
 8006d54:	2300      	movs	r3, #0
 8006d56:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d58:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006d5c:	460b      	mov	r3, r1
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	d00c      	beq.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x8e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8006d62:	4b32      	ldr	r3, [pc, #200]	@ (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8006d64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006d68:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006d6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006d70:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006d74:	492d      	ldr	r1, [pc, #180]	@ (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8006d76:	4313      	orrs	r3, r2
 8006d78:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8006d7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d84:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006d88:	61bb      	str	r3, [r7, #24]
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	61fb      	str	r3, [r7, #28]
 8006d8e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006d92:	460b      	mov	r3, r1
 8006d94:	4313      	orrs	r3, r2
 8006d96:	d00c      	beq.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x91a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8006d98:	4b24      	ldr	r3, [pc, #144]	@ (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8006d9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006d9e:	f023 0218 	bic.w	r2, r3, #24
 8006da2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006da6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006daa:	4920      	ldr	r1, [pc, #128]	@ (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8006dac:	4313      	orrs	r3, r2
 8006dae:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006db2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dba:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8006dbe:	613b      	str	r3, [r7, #16]
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	617b      	str	r3, [r7, #20]
 8006dc4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006dc8:	460b      	mov	r3, r1
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	d034      	beq.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8006dce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006dd2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006dd6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006dda:	d105      	bne.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x950>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ddc:	4b13      	ldr	r3, [pc, #76]	@ (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8006dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006de0:	4a12      	ldr	r2, [pc, #72]	@ (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8006de2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006de6:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8006de8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006dec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006df0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006df4:	d108      	bne.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x970>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006df6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006dfa:	3308      	adds	r3, #8
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f001 fdd9 	bl	80089b4 <RCCEx_PLL2_Config>
 8006e02:	4603      	mov	r3, r0
 8006e04:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
    }
    if (ret == HAL_OK)
 8006e08:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d10f      	bne.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x998>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8006e10:	4b06      	ldr	r3, [pc, #24]	@ (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8006e12:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006e16:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006e1a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006e1e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006e22:	4902      	ldr	r1, [pc, #8]	@ (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8006e24:	4313      	orrs	r3, r2
 8006e26:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8006e2a:	e005      	b.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 8006e2c:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e30:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8006e34:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8006e38:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e40:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8006e44:	60bb      	str	r3, [r7, #8]
 8006e46:	2300      	movs	r3, #0
 8006e48:	60fb      	str	r3, [r7, #12]
 8006e4a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006e4e:	460b      	mov	r3, r1
 8006e50:	4313      	orrs	r3, r2
 8006e52:	d03a      	beq.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0xa32>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8006e54:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006e58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e5c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e60:	d00e      	beq.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8006e62:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e66:	d815      	bhi.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d017      	beq.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8006e6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006e70:	d110      	bne.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e72:	4b27      	ldr	r3, [pc, #156]	@ (8006f10 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8006e74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e76:	4a26      	ldr	r2, [pc, #152]	@ (8006f10 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8006e78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e7c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006e7e:	e00e      	b.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0xa06>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006e80:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006e84:	3308      	adds	r3, #8
 8006e86:	4618      	mov	r0, r3
 8006e88:	f001 fd94 	bl	80089b4 <RCCEx_PLL2_Config>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006e92:	e004      	b.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0xa06>
      default:
        ret = HAL_ERROR;
 8006e94:	2301      	movs	r3, #1
 8006e96:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8006e9a:	e000      	b.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0xa06>
        break;
 8006e9c:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006e9e:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d10d      	bne.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0xa2a>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8006ea6:	4b1a      	ldr	r3, [pc, #104]	@ (8006f10 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8006ea8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006eac:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006eb0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006eb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006eb8:	4915      	ldr	r1, [pc, #84]	@ (8006f10 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8006ec0:	e003      	b.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0xa32>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ec2:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8006ec6:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8006eca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed2:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006ed6:	603b      	str	r3, [r7, #0]
 8006ed8:	2300      	movs	r3, #0
 8006eda:	607b      	str	r3, [r7, #4]
 8006edc:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006ee0:	460b      	mov	r3, r1
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	d00c      	beq.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0xa68>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8006ee6:	4b0a      	ldr	r3, [pc, #40]	@ (8006f10 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8006ee8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006eec:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8006ef0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006ef4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006ef8:	4905      	ldr	r1, [pc, #20]	@ (8006f10 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8006efa:	4313      	orrs	r3, r2
 8006efc:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8006f00:	f897 30d2 	ldrb.w	r3, [r7, #210]	@ 0xd2
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	37d8      	adds	r7, #216	@ 0xd8
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f0e:	bf00      	nop
 8006f10:	46020c00 	.word	0x46020c00

08006f14 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b089      	sub	sp, #36	@ 0x24
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8006f1c:	4ba6      	ldr	r3, [pc, #664]	@ (80071b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006f1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f24:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006f26:	4ba4      	ldr	r3, [pc, #656]	@ (80071b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f2a:	f003 0303 	and.w	r3, r3, #3
 8006f2e:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8006f30:	4ba1      	ldr	r3, [pc, #644]	@ (80071b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f34:	0a1b      	lsrs	r3, r3, #8
 8006f36:	f003 030f 	and.w	r3, r3, #15
 8006f3a:	3301      	adds	r3, #1
 8006f3c:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8006f3e:	4b9e      	ldr	r3, [pc, #632]	@ (80071b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006f40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f42:	091b      	lsrs	r3, r3, #4
 8006f44:	f003 0301 	and.w	r3, r3, #1
 8006f48:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8006f4a:	4b9b      	ldr	r3, [pc, #620]	@ (80071b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006f4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f4e:	08db      	lsrs	r3, r3, #3
 8006f50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f54:	68fa      	ldr	r2, [r7, #12]
 8006f56:	fb02 f303 	mul.w	r3, r2, r3
 8006f5a:	ee07 3a90 	vmov	s15, r3
 8006f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f62:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	2b03      	cmp	r3, #3
 8006f6a:	d062      	beq.n	8007032 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	2b03      	cmp	r3, #3
 8006f70:	f200 8081 	bhi.w	8007076 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	2b01      	cmp	r3, #1
 8006f78:	d024      	beq.n	8006fc4 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	2b02      	cmp	r3, #2
 8006f7e:	d17a      	bne.n	8007076 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	ee07 3a90 	vmov	s15, r3
 8006f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f8a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80071bc <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8006f8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f92:	4b89      	ldr	r3, [pc, #548]	@ (80071b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006f94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f9a:	ee07 3a90 	vmov	s15, r3
 8006f9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8006fa2:	ed97 6a02 	vldr	s12, [r7, #8]
 8006fa6:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80071c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8006faa:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006fae:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8006fb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006fba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fbe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006fc2:	e08f      	b.n	80070e4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006fc4:	4b7c      	ldr	r3, [pc, #496]	@ (80071b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d005      	beq.n	8006fdc <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8006fd0:	4b79      	ldr	r3, [pc, #484]	@ (80071b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	0f1b      	lsrs	r3, r3, #28
 8006fd6:	f003 030f 	and.w	r3, r3, #15
 8006fda:	e006      	b.n	8006fea <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8006fdc:	4b76      	ldr	r3, [pc, #472]	@ (80071b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006fde:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006fe2:	041b      	lsls	r3, r3, #16
 8006fe4:	0f1b      	lsrs	r3, r3, #28
 8006fe6:	f003 030f 	and.w	r3, r3, #15
 8006fea:	4a76      	ldr	r2, [pc, #472]	@ (80071c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8006fec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ff0:	ee07 3a90 	vmov	s15, r3
 8006ff4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	ee07 3a90 	vmov	s15, r3
 8006ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007002:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007006:	69bb      	ldr	r3, [r7, #24]
 8007008:	ee07 3a90 	vmov	s15, r3
 800700c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007010:	ed97 6a02 	vldr	s12, [r7, #8]
 8007014:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80071c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8007018:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800701c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007020:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007024:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8007028:	ee67 7a27 	vmul.f32	s15, s14, s15
 800702c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007030:	e058      	b.n	80070e4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	ee07 3a90 	vmov	s15, r3
 8007038:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800703c:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80071bc <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8007040:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007044:	4b5c      	ldr	r3, [pc, #368]	@ (80071b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007046:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007048:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800704c:	ee07 3a90 	vmov	s15, r3
 8007050:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8007054:	ed97 6a02 	vldr	s12, [r7, #8]
 8007058:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80071c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800705c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007060:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8007064:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007068:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800706c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007070:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007074:	e036      	b.n	80070e4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8007076:	4b50      	ldr	r3, [pc, #320]	@ (80071b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800707e:	2b00      	cmp	r3, #0
 8007080:	d005      	beq.n	800708e <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8007082:	4b4d      	ldr	r3, [pc, #308]	@ (80071b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	0f1b      	lsrs	r3, r3, #28
 8007088:	f003 030f 	and.w	r3, r3, #15
 800708c:	e006      	b.n	800709c <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800708e:	4b4a      	ldr	r3, [pc, #296]	@ (80071b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007090:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007094:	041b      	lsls	r3, r3, #16
 8007096:	0f1b      	lsrs	r3, r3, #28
 8007098:	f003 030f 	and.w	r3, r3, #15
 800709c:	4a49      	ldr	r2, [pc, #292]	@ (80071c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800709e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070a2:	ee07 3a90 	vmov	s15, r3
 80070a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	ee07 3a90 	vmov	s15, r3
 80070b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80070b8:	69bb      	ldr	r3, [r7, #24]
 80070ba:	ee07 3a90 	vmov	s15, r3
 80070be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80070c6:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80071c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80070ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80070da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80070e2:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80070e4:	4b34      	ldr	r3, [pc, #208]	@ (80071b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80070e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d017      	beq.n	8007120 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80070f0:	4b31      	ldr	r3, [pc, #196]	@ (80071b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80070f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070f4:	0a5b      	lsrs	r3, r3, #9
 80070f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80070fa:	ee07 3a90 	vmov	s15, r3
 80070fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8007102:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007106:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800710a:	edd7 6a07 	vldr	s13, [r7, #28]
 800710e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007112:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007116:	ee17 2a90 	vmov	r2, s15
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	601a      	str	r2, [r3, #0]
 800711e:	e002      	b.n	8007126 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2200      	movs	r2, #0
 8007124:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8007126:	4b24      	ldr	r3, [pc, #144]	@ (80071b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800712a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800712e:	2b00      	cmp	r3, #0
 8007130:	d017      	beq.n	8007162 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007132:	4b21      	ldr	r3, [pc, #132]	@ (80071b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007134:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007136:	0c1b      	lsrs	r3, r3, #16
 8007138:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800713c:	ee07 3a90 	vmov	s15, r3
 8007140:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8007144:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007148:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800714c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007150:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007154:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007158:	ee17 2a90 	vmov	r2, s15
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	605a      	str	r2, [r3, #4]
 8007160:	e002      	b.n	8007168 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2200      	movs	r2, #0
 8007166:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8007168:	4b13      	ldr	r3, [pc, #76]	@ (80071b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800716a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800716c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007170:	2b00      	cmp	r3, #0
 8007172:	d017      	beq.n	80071a4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007174:	4b10      	ldr	r3, [pc, #64]	@ (80071b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007176:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007178:	0e1b      	lsrs	r3, r3, #24
 800717a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800717e:	ee07 3a90 	vmov	s15, r3
 8007182:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8007186:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800718a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800718e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007192:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007196:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800719a:	ee17 2a90 	vmov	r2, s15
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80071a2:	e002      	b.n	80071aa <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2200      	movs	r2, #0
 80071a8:	609a      	str	r2, [r3, #8]
}
 80071aa:	bf00      	nop
 80071ac:	3724      	adds	r7, #36	@ 0x24
 80071ae:	46bd      	mov	sp, r7
 80071b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b4:	4770      	bx	lr
 80071b6:	bf00      	nop
 80071b8:	46020c00 	.word	0x46020c00
 80071bc:	4b742400 	.word	0x4b742400
 80071c0:	46000000 	.word	0x46000000
 80071c4:	080145f8 	.word	0x080145f8

080071c8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b089      	sub	sp, #36	@ 0x24
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80071d0:	4ba6      	ldr	r3, [pc, #664]	@ (800746c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80071d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071d8:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80071da:	4ba4      	ldr	r3, [pc, #656]	@ (800746c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80071dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071de:	f003 0303 	and.w	r3, r3, #3
 80071e2:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 80071e4:	4ba1      	ldr	r3, [pc, #644]	@ (800746c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80071e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071e8:	0a1b      	lsrs	r3, r3, #8
 80071ea:	f003 030f 	and.w	r3, r3, #15
 80071ee:	3301      	adds	r3, #1
 80071f0:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 80071f2:	4b9e      	ldr	r3, [pc, #632]	@ (800746c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80071f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071f6:	091b      	lsrs	r3, r3, #4
 80071f8:	f003 0301 	and.w	r3, r3, #1
 80071fc:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80071fe:	4b9b      	ldr	r3, [pc, #620]	@ (800746c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007202:	08db      	lsrs	r3, r3, #3
 8007204:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007208:	68fa      	ldr	r2, [r7, #12]
 800720a:	fb02 f303 	mul.w	r3, r2, r3
 800720e:	ee07 3a90 	vmov	s15, r3
 8007212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007216:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	2b03      	cmp	r3, #3
 800721e:	d062      	beq.n	80072e6 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	2b03      	cmp	r3, #3
 8007224:	f200 8081 	bhi.w	800732a <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	2b01      	cmp	r3, #1
 800722c:	d024      	beq.n	8007278 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	2b02      	cmp	r3, #2
 8007232:	d17a      	bne.n	800732a <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	ee07 3a90 	vmov	s15, r3
 800723a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800723e:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8007470 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8007242:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007246:	4b89      	ldr	r3, [pc, #548]	@ (800746c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007248:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800724a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800724e:	ee07 3a90 	vmov	s15, r3
 8007252:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8007256:	ed97 6a02 	vldr	s12, [r7, #8]
 800725a:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8007474 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800725e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007262:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8007266:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800726a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800726e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007272:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007276:	e08f      	b.n	8007398 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8007278:	4b7c      	ldr	r3, [pc, #496]	@ (800746c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007280:	2b00      	cmp	r3, #0
 8007282:	d005      	beq.n	8007290 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8007284:	4b79      	ldr	r3, [pc, #484]	@ (800746c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	0f1b      	lsrs	r3, r3, #28
 800728a:	f003 030f 	and.w	r3, r3, #15
 800728e:	e006      	b.n	800729e <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8007290:	4b76      	ldr	r3, [pc, #472]	@ (800746c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007292:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007296:	041b      	lsls	r3, r3, #16
 8007298:	0f1b      	lsrs	r3, r3, #28
 800729a:	f003 030f 	and.w	r3, r3, #15
 800729e:	4a76      	ldr	r2, [pc, #472]	@ (8007478 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 80072a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072a4:	ee07 3a90 	vmov	s15, r3
 80072a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	ee07 3a90 	vmov	s15, r3
 80072b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80072ba:	69bb      	ldr	r3, [r7, #24]
 80072bc:	ee07 3a90 	vmov	s15, r3
 80072c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072c4:	ed97 6a02 	vldr	s12, [r7, #8]
 80072c8:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8007474 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80072cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80072dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072e0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80072e4:	e058      	b.n	8007398 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	ee07 3a90 	vmov	s15, r3
 80072ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072f0:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007470 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 80072f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072f8:	4b5c      	ldr	r3, [pc, #368]	@ (800746c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80072fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007300:	ee07 3a90 	vmov	s15, r3
 8007304:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8007308:	ed97 6a02 	vldr	s12, [r7, #8]
 800730c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8007474 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8007310:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007314:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8007318:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800731c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007320:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007324:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007328:	e036      	b.n	8007398 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800732a:	4b50      	ldr	r3, [pc, #320]	@ (800746c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800732c:	689b      	ldr	r3, [r3, #8]
 800732e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007332:	2b00      	cmp	r3, #0
 8007334:	d005      	beq.n	8007342 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8007336:	4b4d      	ldr	r3, [pc, #308]	@ (800746c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	0f1b      	lsrs	r3, r3, #28
 800733c:	f003 030f 	and.w	r3, r3, #15
 8007340:	e006      	b.n	8007350 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8007342:	4b4a      	ldr	r3, [pc, #296]	@ (800746c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007344:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007348:	041b      	lsls	r3, r3, #16
 800734a:	0f1b      	lsrs	r3, r3, #28
 800734c:	f003 030f 	and.w	r3, r3, #15
 8007350:	4a49      	ldr	r2, [pc, #292]	@ (8007478 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8007352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007356:	ee07 3a90 	vmov	s15, r3
 800735a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	ee07 3a90 	vmov	s15, r3
 8007364:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007368:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800736c:	69bb      	ldr	r3, [r7, #24]
 800736e:	ee07 3a90 	vmov	s15, r3
 8007372:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007376:	ed97 6a02 	vldr	s12, [r7, #8]
 800737a:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8007474 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800737e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007382:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007386:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800738a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800738e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007392:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007396:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8007398:	4b34      	ldr	r3, [pc, #208]	@ (800746c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800739a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800739c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d017      	beq.n	80073d4 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80073a4:	4b31      	ldr	r3, [pc, #196]	@ (800746c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80073a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073a8:	0a5b      	lsrs	r3, r3, #9
 80073aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80073ae:	ee07 3a90 	vmov	s15, r3
 80073b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 80073b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80073ba:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80073be:	edd7 6a07 	vldr	s13, [r7, #28]
 80073c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073ca:	ee17 2a90 	vmov	r2, s15
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	601a      	str	r2, [r3, #0]
 80073d2:	e002      	b.n	80073da <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80073da:	4b24      	ldr	r3, [pc, #144]	@ (800746c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80073dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d017      	beq.n	8007416 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80073e6:	4b21      	ldr	r3, [pc, #132]	@ (800746c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80073e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073ea:	0c1b      	lsrs	r3, r3, #16
 80073ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80073f0:	ee07 3a90 	vmov	s15, r3
 80073f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 80073f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80073fc:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007400:	edd7 6a07 	vldr	s13, [r7, #28]
 8007404:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007408:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800740c:	ee17 2a90 	vmov	r2, s15
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	605a      	str	r2, [r3, #4]
 8007414:	e002      	b.n	800741c <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2200      	movs	r2, #0
 800741a:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800741c:	4b13      	ldr	r3, [pc, #76]	@ (800746c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800741e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007420:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007424:	2b00      	cmp	r3, #0
 8007426:	d017      	beq.n	8007458 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007428:	4b10      	ldr	r3, [pc, #64]	@ (800746c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800742a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800742c:	0e1b      	lsrs	r3, r3, #24
 800742e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007432:	ee07 3a90 	vmov	s15, r3
 8007436:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800743a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800743e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007442:	edd7 6a07 	vldr	s13, [r7, #28]
 8007446:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800744a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800744e:	ee17 2a90 	vmov	r2, s15
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007456:	e002      	b.n	800745e <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2200      	movs	r2, #0
 800745c:	609a      	str	r2, [r3, #8]
}
 800745e:	bf00      	nop
 8007460:	3724      	adds	r7, #36	@ 0x24
 8007462:	46bd      	mov	sp, r7
 8007464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007468:	4770      	bx	lr
 800746a:	bf00      	nop
 800746c:	46020c00 	.word	0x46020c00
 8007470:	4b742400 	.word	0x4b742400
 8007474:	46000000 	.word	0x46000000
 8007478:	080145f8 	.word	0x080145f8

0800747c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800747c:	b480      	push	{r7}
 800747e:	b089      	sub	sp, #36	@ 0x24
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8007484:	4ba6      	ldr	r3, [pc, #664]	@ (8007720 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007486:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007488:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800748c:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800748e:	4ba4      	ldr	r3, [pc, #656]	@ (8007720 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007492:	f003 0303 	and.w	r3, r3, #3
 8007496:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8007498:	4ba1      	ldr	r3, [pc, #644]	@ (8007720 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800749a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800749c:	0a1b      	lsrs	r3, r3, #8
 800749e:	f003 030f 	and.w	r3, r3, #15
 80074a2:	3301      	adds	r3, #1
 80074a4:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 80074a6:	4b9e      	ldr	r3, [pc, #632]	@ (8007720 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80074a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074aa:	091b      	lsrs	r3, r3, #4
 80074ac:	f003 0301 	and.w	r3, r3, #1
 80074b0:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80074b2:	4b9b      	ldr	r3, [pc, #620]	@ (8007720 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80074b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074b6:	08db      	lsrs	r3, r3, #3
 80074b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80074bc:	68fa      	ldr	r2, [r7, #12]
 80074be:	fb02 f303 	mul.w	r3, r2, r3
 80074c2:	ee07 3a90 	vmov	s15, r3
 80074c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074ca:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	2b03      	cmp	r3, #3
 80074d2:	d062      	beq.n	800759a <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	2b03      	cmp	r3, #3
 80074d8:	f200 8081 	bhi.w	80075de <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d024      	beq.n	800752c <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	2b02      	cmp	r3, #2
 80074e6:	d17a      	bne.n	80075de <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	ee07 3a90 	vmov	s15, r3
 80074ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074f2:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8007724 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 80074f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074fa:	4b89      	ldr	r3, [pc, #548]	@ (8007720 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80074fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007502:	ee07 3a90 	vmov	s15, r3
 8007506:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800750a:	ed97 6a02 	vldr	s12, [r7, #8]
 800750e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8007728 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8007512:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007516:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800751a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800751e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007522:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007526:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800752a:	e08f      	b.n	800764c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800752c:	4b7c      	ldr	r3, [pc, #496]	@ (8007720 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800752e:	689b      	ldr	r3, [r3, #8]
 8007530:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007534:	2b00      	cmp	r3, #0
 8007536:	d005      	beq.n	8007544 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8007538:	4b79      	ldr	r3, [pc, #484]	@ (8007720 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800753a:	689b      	ldr	r3, [r3, #8]
 800753c:	0f1b      	lsrs	r3, r3, #28
 800753e:	f003 030f 	and.w	r3, r3, #15
 8007542:	e006      	b.n	8007552 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8007544:	4b76      	ldr	r3, [pc, #472]	@ (8007720 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007546:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800754a:	041b      	lsls	r3, r3, #16
 800754c:	0f1b      	lsrs	r3, r3, #28
 800754e:	f003 030f 	and.w	r3, r3, #15
 8007552:	4a76      	ldr	r2, [pc, #472]	@ (800772c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8007554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007558:	ee07 3a90 	vmov	s15, r3
 800755c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	ee07 3a90 	vmov	s15, r3
 8007566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800756a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800756e:	69bb      	ldr	r3, [r7, #24]
 8007570:	ee07 3a90 	vmov	s15, r3
 8007574:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007578:	ed97 6a02 	vldr	s12, [r7, #8]
 800757c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8007728 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8007580:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007584:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007588:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800758c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8007590:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007594:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007598:	e058      	b.n	800764c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	ee07 3a90 	vmov	s15, r3
 80075a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075a4:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007724 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 80075a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075ac:	4b5c      	ldr	r3, [pc, #368]	@ (8007720 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80075ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075b4:	ee07 3a90 	vmov	s15, r3
 80075b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80075bc:	ed97 6a02 	vldr	s12, [r7, #8]
 80075c0:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8007728 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80075c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80075c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80075cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80075d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075d8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80075dc:	e036      	b.n	800764c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80075de:	4b50      	ldr	r3, [pc, #320]	@ (8007720 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80075e0:	689b      	ldr	r3, [r3, #8]
 80075e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d005      	beq.n	80075f6 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 80075ea:	4b4d      	ldr	r3, [pc, #308]	@ (8007720 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80075ec:	689b      	ldr	r3, [r3, #8]
 80075ee:	0f1b      	lsrs	r3, r3, #28
 80075f0:	f003 030f 	and.w	r3, r3, #15
 80075f4:	e006      	b.n	8007604 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 80075f6:	4b4a      	ldr	r3, [pc, #296]	@ (8007720 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80075f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80075fc:	041b      	lsls	r3, r3, #16
 80075fe:	0f1b      	lsrs	r3, r3, #28
 8007600:	f003 030f 	and.w	r3, r3, #15
 8007604:	4a49      	ldr	r2, [pc, #292]	@ (800772c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8007606:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800760a:	ee07 3a90 	vmov	s15, r3
 800760e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	ee07 3a90 	vmov	s15, r3
 8007618:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800761c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007620:	69bb      	ldr	r3, [r7, #24]
 8007622:	ee07 3a90 	vmov	s15, r3
 8007626:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800762a:	ed97 6a02 	vldr	s12, [r7, #8]
 800762e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8007728 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8007632:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007636:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800763a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800763e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8007642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007646:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800764a:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800764c:	4b34      	ldr	r3, [pc, #208]	@ (8007720 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800764e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007650:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007654:	2b00      	cmp	r3, #0
 8007656:	d017      	beq.n	8007688 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007658:	4b31      	ldr	r3, [pc, #196]	@ (8007720 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800765a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800765c:	0a5b      	lsrs	r3, r3, #9
 800765e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007662:	ee07 3a90 	vmov	s15, r3
 8007666:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800766a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800766e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007672:	edd7 6a07 	vldr	s13, [r7, #28]
 8007676:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800767a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800767e:	ee17 2a90 	vmov	r2, s15
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	601a      	str	r2, [r3, #0]
 8007686:	e002      	b.n	800768e <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2200      	movs	r2, #0
 800768c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800768e:	4b24      	ldr	r3, [pc, #144]	@ (8007720 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007692:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007696:	2b00      	cmp	r3, #0
 8007698:	d017      	beq.n	80076ca <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800769a:	4b21      	ldr	r3, [pc, #132]	@ (8007720 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800769c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800769e:	0c1b      	lsrs	r3, r3, #16
 80076a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076a4:	ee07 3a90 	vmov	s15, r3
 80076a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 80076ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80076b0:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80076b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80076b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076c0:	ee17 2a90 	vmov	r2, s15
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	605a      	str	r2, [r3, #4]
 80076c8:	e002      	b.n	80076d0 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2200      	movs	r2, #0
 80076ce:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80076d0:	4b13      	ldr	r3, [pc, #76]	@ (8007720 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80076d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d017      	beq.n	800770c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80076dc:	4b10      	ldr	r3, [pc, #64]	@ (8007720 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80076de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076e0:	0e1b      	lsrs	r3, r3, #24
 80076e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076e6:	ee07 3a90 	vmov	s15, r3
 80076ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 80076ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80076f2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80076f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80076fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007702:	ee17 2a90 	vmov	r2, s15
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800770a:	e002      	b.n	8007712 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2200      	movs	r2, #0
 8007710:	609a      	str	r2, [r3, #8]
}
 8007712:	bf00      	nop
 8007714:	3724      	adds	r7, #36	@ 0x24
 8007716:	46bd      	mov	sp, r7
 8007718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771c:	4770      	bx	lr
 800771e:	bf00      	nop
 8007720:	46020c00 	.word	0x46020c00
 8007724:	4b742400 	.word	0x4b742400
 8007728:	46000000 	.word	0x46000000
 800772c:	080145f8 	.word	0x080145f8

08007730 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b08e      	sub	sp, #56	@ 0x38
 8007734:	af00      	add	r7, sp, #0
 8007736:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800773a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800773e:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8007742:	430b      	orrs	r3, r1
 8007744:	d145      	bne.n	80077d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8007746:	4b9b      	ldr	r3, [pc, #620]	@ (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8007748:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800774c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007750:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8007752:	4b98      	ldr	r3, [pc, #608]	@ (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8007754:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007758:	f003 0302 	and.w	r3, r3, #2
 800775c:	2b02      	cmp	r3, #2
 800775e:	d108      	bne.n	8007772 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8007760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007762:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007766:	d104      	bne.n	8007772 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8007768:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800776c:	637b      	str	r3, [r7, #52]	@ 0x34
 800776e:	f001 b912 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8007772:	4b90      	ldr	r3, [pc, #576]	@ (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8007774:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007778:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800777c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007780:	d114      	bne.n	80077ac <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8007782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007784:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007788:	d110      	bne.n	80077ac <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800778a:	4b8a      	ldr	r3, [pc, #552]	@ (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800778c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007790:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007794:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007798:	d103      	bne.n	80077a2 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800779a:	23fa      	movs	r3, #250	@ 0xfa
 800779c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800779e:	f001 b8fa 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 80077a2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80077a6:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80077a8:	f001 b8f5 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 80077ac:	4b81      	ldr	r3, [pc, #516]	@ (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80077b8:	d107      	bne.n	80077ca <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 80077ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80077c0:	d103      	bne.n	80077ca <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 80077c2:	4b7d      	ldr	r3, [pc, #500]	@ (80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80077c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80077c6:	f001 b8e6 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80077ca:	2300      	movs	r3, #0
 80077cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80077ce:	f001 b8e2 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80077d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077d6:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80077da:	430b      	orrs	r3, r1
 80077dc:	d151      	bne.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80077de:	4b75      	ldr	r3, [pc, #468]	@ (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80077e0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80077e4:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 80077e8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80077ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ec:	2b80      	cmp	r3, #128	@ 0x80
 80077ee:	d035      	beq.n	800785c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 80077f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077f2:	2b80      	cmp	r3, #128	@ 0x80
 80077f4:	d841      	bhi.n	800787a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80077f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077f8:	2b60      	cmp	r3, #96	@ 0x60
 80077fa:	d02a      	beq.n	8007852 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 80077fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077fe:	2b60      	cmp	r3, #96	@ 0x60
 8007800:	d83b      	bhi.n	800787a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8007802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007804:	2b40      	cmp	r3, #64	@ 0x40
 8007806:	d009      	beq.n	800781c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800780a:	2b40      	cmp	r3, #64	@ 0x40
 800780c:	d835      	bhi.n	800787a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800780e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007810:	2b00      	cmp	r3, #0
 8007812:	d00c      	beq.n	800782e <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8007814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007816:	2b20      	cmp	r3, #32
 8007818:	d012      	beq.n	8007840 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800781a:	e02e      	b.n	800787a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800781c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007820:	4618      	mov	r0, r3
 8007822:	f7ff fb77 	bl	8006f14 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007828:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800782a:	f001 b8b4 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800782e:	f107 0318 	add.w	r3, r7, #24
 8007832:	4618      	mov	r0, r3
 8007834:	f7ff fcc8 	bl	80071c8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8007838:	69bb      	ldr	r3, [r7, #24]
 800783a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800783c:	f001 b8ab 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007840:	f107 030c 	add.w	r3, r7, #12
 8007844:	4618      	mov	r0, r3
 8007846:	f7ff fe19 	bl	800747c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800784e:	f001 b8a2 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007852:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007856:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007858:	f001 b89d 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800785c:	4b55      	ldr	r3, [pc, #340]	@ (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007864:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007868:	d103      	bne.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800786a:	4b54      	ldr	r3, [pc, #336]	@ (80079bc <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800786c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800786e:	f001 b892 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8007872:	2300      	movs	r3, #0
 8007874:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007876:	f001 b88e 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default :
      {
        frequency = 0U;
 800787a:	2300      	movs	r3, #0
 800787c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800787e:	f001 b88a 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        break;
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8007882:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007886:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800788a:	430b      	orrs	r3, r1
 800788c:	d126      	bne.n	80078dc <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800788e:	4b49      	ldr	r3, [pc, #292]	@ (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8007890:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007894:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007898:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800789a:	4b46      	ldr	r3, [pc, #280]	@ (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80078a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078a6:	d106      	bne.n	80078b6 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 80078a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d103      	bne.n	80078b6 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
    {
      frequency = HSI_VALUE;
 80078ae:	4b43      	ldr	r3, [pc, #268]	@ (80079bc <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80078b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80078b2:	f001 b870 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 80078b6:	4b3f      	ldr	r3, [pc, #252]	@ (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80078be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078c2:	d107      	bne.n	80078d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 80078c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80078ca:	d103      	bne.n	80078d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
    {
      frequency = HSI_VALUE >> 1U;
 80078cc:	4b3c      	ldr	r3, [pc, #240]	@ (80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80078ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80078d0:	f001 b861 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 80078d4:	2300      	movs	r3, #0
 80078d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80078d8:	f001 b85d 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 80078dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078e0:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 80078e4:	430b      	orrs	r3, r1
 80078e6:	d171      	bne.n	80079cc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80078e8:	4b32      	ldr	r3, [pc, #200]	@ (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80078ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80078ee:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80078f2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80078f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078f6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80078fa:	d034      	beq.n	8007966 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 80078fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078fe:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007902:	d853      	bhi.n	80079ac <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8007904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007906:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800790a:	d00b      	beq.n	8007924 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800790c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800790e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007912:	d84b      	bhi.n	80079ac <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8007914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007916:	2b00      	cmp	r3, #0
 8007918:	d016      	beq.n	8007948 <HAL_RCCEx_GetPeriphCLKFreq+0x218>
 800791a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800791c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007920:	d009      	beq.n	8007936 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
 8007922:	e043      	b.n	80079ac <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007924:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007928:	4618      	mov	r0, r3
 800792a:	f7ff faf3 	bl	8006f14 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800792e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007930:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007932:	f001 b830 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007936:	f107 0318 	add.w	r3, r7, #24
 800793a:	4618      	mov	r0, r3
 800793c:	f7ff fc44 	bl	80071c8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8007940:	69fb      	ldr	r3, [r7, #28]
 8007942:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007944:	f001 b827 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8007948:	4b1a      	ldr	r3, [pc, #104]	@ (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007950:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007954:	d103      	bne.n	800795e <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
        {
          frequency = HSI48_VALUE;
 8007956:	4b1b      	ldr	r3, [pc, #108]	@ (80079c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007958:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800795a:	f001 b81c 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 800795e:	2300      	movs	r3, #0
 8007960:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007962:	f001 b818 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007966:	4b13      	ldr	r3, [pc, #76]	@ (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f003 0320 	and.w	r3, r3, #32
 800796e:	2b20      	cmp	r3, #32
 8007970:	d118      	bne.n	80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007972:	4b10      	ldr	r3, [pc, #64]	@ (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8007974:	689b      	ldr	r3, [r3, #8]
 8007976:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800797a:	2b00      	cmp	r3, #0
 800797c:	d005      	beq.n	800798a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800797e:	4b0d      	ldr	r3, [pc, #52]	@ (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8007980:	689b      	ldr	r3, [r3, #8]
 8007982:	0e1b      	lsrs	r3, r3, #24
 8007984:	f003 030f 	and.w	r3, r3, #15
 8007988:	e006      	b.n	8007998 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
 800798a:	4b0a      	ldr	r3, [pc, #40]	@ (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800798c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007990:	041b      	lsls	r3, r3, #16
 8007992:	0e1b      	lsrs	r3, r3, #24
 8007994:	f003 030f 	and.w	r3, r3, #15
 8007998:	4a0b      	ldr	r2, [pc, #44]	@ (80079c8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800799a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800799e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80079a0:	f000 bff9 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 80079a4:	2300      	movs	r3, #0
 80079a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80079a8:	f000 bff5 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default :

        frequency = 0U;
 80079ac:	2300      	movs	r3, #0
 80079ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80079b0:	f000 bff1 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 80079b4:	46020c00 	.word	0x46020c00
 80079b8:	0007a120 	.word	0x0007a120
 80079bc:	00f42400 	.word	0x00f42400
 80079c0:	007a1200 	.word	0x007a1200
 80079c4:	02dc6c00 	.word	0x02dc6c00
 80079c8:	080145f8 	.word	0x080145f8
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80079cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079d0:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 80079d4:	430b      	orrs	r3, r1
 80079d6:	d17f      	bne.n	8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80079d8:	4ba8      	ldr	r3, [pc, #672]	@ (8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80079da:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80079de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80079e2:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 80079e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d165      	bne.n	8007ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80079ea:	4ba4      	ldr	r3, [pc, #656]	@ (8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80079ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80079f0:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80079f4:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 80079f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079f8:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80079fc:	d034      	beq.n	8007a68 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80079fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a00:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007a04:	d853      	bhi.n	8007aae <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8007a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a08:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007a0c:	d00b      	beq.n	8007a26 <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
 8007a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a10:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007a14:	d84b      	bhi.n	8007aae <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8007a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d016      	beq.n	8007a4a <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
 8007a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a1e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007a22:	d009      	beq.n	8007a38 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8007a24:	e043      	b.n	8007aae <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f7ff fa72 	bl	8006f14 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a32:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007a34:	f000 bfaf 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a38:	f107 0318 	add.w	r3, r7, #24
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f7ff fbc3 	bl	80071c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007a42:	69fb      	ldr	r3, [r7, #28]
 8007a44:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007a46:	f000 bfa6 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8007a4a:	4b8c      	ldr	r3, [pc, #560]	@ (8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007a52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a56:	d103      	bne.n	8007a60 <HAL_RCCEx_GetPeriphCLKFreq+0x330>
          {
            frequency = HSI48_VALUE;
 8007a58:	4b89      	ldr	r3, [pc, #548]	@ (8007c80 <HAL_RCCEx_GetPeriphCLKFreq+0x550>)
 8007a5a:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8007a5c:	f000 bf9b 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
            frequency = 0U;
 8007a60:	2300      	movs	r3, #0
 8007a62:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007a64:	f000 bf97 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007a68:	4b84      	ldr	r3, [pc, #528]	@ (8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f003 0320 	and.w	r3, r3, #32
 8007a70:	2b20      	cmp	r3, #32
 8007a72:	d118      	bne.n	8007aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007a74:	4b81      	ldr	r3, [pc, #516]	@ (8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8007a76:	689b      	ldr	r3, [r3, #8]
 8007a78:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d005      	beq.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
 8007a80:	4b7e      	ldr	r3, [pc, #504]	@ (8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8007a82:	689b      	ldr	r3, [r3, #8]
 8007a84:	0e1b      	lsrs	r3, r3, #24
 8007a86:	f003 030f 	and.w	r3, r3, #15
 8007a8a:	e006      	b.n	8007a9a <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
 8007a8c:	4b7b      	ldr	r3, [pc, #492]	@ (8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8007a8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007a92:	041b      	lsls	r3, r3, #16
 8007a94:	0e1b      	lsrs	r3, r3, #24
 8007a96:	f003 030f 	and.w	r3, r3, #15
 8007a9a:	4a7a      	ldr	r2, [pc, #488]	@ (8007c84 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8007a9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007aa0:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8007aa2:	f000 bf78 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
            frequency = 0U;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007aaa:	f000 bf74 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        default :
        {
          frequency = 0U;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007ab2:	f000 bf70 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8007ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ab8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007abc:	d108      	bne.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007abe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f7ff fa26 	bl	8006f14 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8007ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aca:	637b      	str	r3, [r7, #52]	@ 0x34
 8007acc:	f000 bf63 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else
    {
      frequency = 0U;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ad4:	f000 bf5f 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8007ad8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007adc:	1e51      	subs	r1, r2, #1
 8007ade:	430b      	orrs	r3, r1
 8007ae0:	d136      	bne.n	8007b50 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8007ae2:	4b66      	ldr	r3, [pc, #408]	@ (8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8007ae4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007ae8:	f003 0303 	and.w	r3, r3, #3
 8007aec:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8007aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d104      	bne.n	8007afe <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8007af4:	f7fe fc22 	bl	800633c <HAL_RCC_GetPCLK2Freq>
 8007af8:	6378      	str	r0, [r7, #52]	@ 0x34
 8007afa:	f000 bf4c 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8007afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d104      	bne.n	8007b0e <HAL_RCCEx_GetPeriphCLKFreq+0x3de>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007b04:	f7fe faea 	bl	80060dc <HAL_RCC_GetSysClockFreq>
 8007b08:	6378      	str	r0, [r7, #52]	@ 0x34
 8007b0a:	f000 bf44 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8007b0e:	4b5b      	ldr	r3, [pc, #364]	@ (8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b1a:	d106      	bne.n	8007b2a <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 8007b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b1e:	2b02      	cmp	r3, #2
 8007b20:	d103      	bne.n	8007b2a <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
    {
      frequency = HSI_VALUE;
 8007b22:	4b59      	ldr	r3, [pc, #356]	@ (8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8007b24:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b26:	f000 bf36 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8007b2a:	4b54      	ldr	r3, [pc, #336]	@ (8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8007b2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007b30:	f003 0302 	and.w	r3, r3, #2
 8007b34:	2b02      	cmp	r3, #2
 8007b36:	d107      	bne.n	8007b48 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8007b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b3a:	2b03      	cmp	r3, #3
 8007b3c:	d104      	bne.n	8007b48 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
    {
      frequency = LSE_VALUE;
 8007b3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b42:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b44:	f000 bf27 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b4c:	f000 bf23 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      frequency = 0U;
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8007b50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b54:	1f11      	subs	r1, r2, #4
 8007b56:	430b      	orrs	r3, r1
 8007b58:	d136      	bne.n	8007bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8007b5a:	4b48      	ldr	r3, [pc, #288]	@ (8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8007b5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007b60:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007b64:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8007b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d104      	bne.n	8007b76 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007b6c:	f7fe fbd2 	bl	8006314 <HAL_RCC_GetPCLK1Freq>
 8007b70:	6378      	str	r0, [r7, #52]	@ 0x34
 8007b72:	f000 bf10 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8007b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b78:	2b10      	cmp	r3, #16
 8007b7a:	d104      	bne.n	8007b86 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007b7c:	f7fe faae 	bl	80060dc <HAL_RCC_GetSysClockFreq>
 8007b80:	6378      	str	r0, [r7, #52]	@ 0x34
 8007b82:	f000 bf08 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8007b86:	4b3d      	ldr	r3, [pc, #244]	@ (8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b92:	d106      	bne.n	8007ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8007b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b96:	2b20      	cmp	r3, #32
 8007b98:	d103      	bne.n	8007ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    {
      frequency = HSI_VALUE;
 8007b9a:	4b3b      	ldr	r3, [pc, #236]	@ (8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8007b9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b9e:	f000 befa 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8007ba2:	4b36      	ldr	r3, [pc, #216]	@ (8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8007ba4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007ba8:	f003 0302 	and.w	r3, r3, #2
 8007bac:	2b02      	cmp	r3, #2
 8007bae:	d107      	bne.n	8007bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
 8007bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bb2:	2b30      	cmp	r3, #48	@ 0x30
 8007bb4:	d104      	bne.n	8007bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
    {
      frequency = LSE_VALUE;
 8007bb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007bba:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bbc:	f000 beeb 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bc4:	f000 bee7 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8007bc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bcc:	f1a2 0108 	sub.w	r1, r2, #8
 8007bd0:	430b      	orrs	r3, r1
 8007bd2:	d136      	bne.n	8007c42 <HAL_RCCEx_GetPeriphCLKFreq+0x512>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8007bd4:	4b29      	ldr	r3, [pc, #164]	@ (8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8007bd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007bda:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007bde:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8007be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d104      	bne.n	8007bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007be6:	f7fe fb95 	bl	8006314 <HAL_RCC_GetPCLK1Freq>
 8007bea:	6378      	str	r0, [r7, #52]	@ 0x34
 8007bec:	f000 bed3 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8007bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bf2:	2b40      	cmp	r3, #64	@ 0x40
 8007bf4:	d104      	bne.n	8007c00 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007bf6:	f7fe fa71 	bl	80060dc <HAL_RCC_GetSysClockFreq>
 8007bfa:	6378      	str	r0, [r7, #52]	@ 0x34
 8007bfc:	f000 becb 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8007c00:	4b1e      	ldr	r3, [pc, #120]	@ (8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c0c:	d106      	bne.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8007c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c10:	2b80      	cmp	r3, #128	@ 0x80
 8007c12:	d103      	bne.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
    {
      frequency = HSI_VALUE;
 8007c14:	4b1c      	ldr	r3, [pc, #112]	@ (8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8007c16:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c18:	f000 bebd 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8007c1c:	4b17      	ldr	r3, [pc, #92]	@ (8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8007c1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007c22:	f003 0302 	and.w	r3, r3, #2
 8007c26:	2b02      	cmp	r3, #2
 8007c28:	d107      	bne.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 8007c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c2c:	2bc0      	cmp	r3, #192	@ 0xc0
 8007c2e:	d104      	bne.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {
      frequency = LSE_VALUE;
 8007c30:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c34:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c36:	f000 beae 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c3e:	f000 beaa 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8007c42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c46:	f1a2 0110 	sub.w	r1, r2, #16
 8007c4a:	430b      	orrs	r3, r1
 8007c4c:	d141      	bne.n	8007cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a2>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8007c4e:	4b0b      	ldr	r3, [pc, #44]	@ (8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8007c50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007c54:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c58:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8007c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d104      	bne.n	8007c6a <HAL_RCCEx_GetPeriphCLKFreq+0x53a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007c60:	f7fe fb58 	bl	8006314 <HAL_RCC_GetPCLK1Freq>
 8007c64:	6378      	str	r0, [r7, #52]	@ 0x34
 8007c66:	f000 be96 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8007c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c70:	d10c      	bne.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007c72:	f7fe fa33 	bl	80060dc <HAL_RCC_GetSysClockFreq>
 8007c76:	6378      	str	r0, [r7, #52]	@ 0x34
 8007c78:	f000 be8d 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8007c7c:	46020c00 	.word	0x46020c00
 8007c80:	02dc6c00 	.word	0x02dc6c00
 8007c84:	080145f8 	.word	0x080145f8
 8007c88:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8007c8c:	4baa      	ldr	r3, [pc, #680]	@ (8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c98:	d107      	bne.n	8007caa <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 8007c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ca0:	d103      	bne.n	8007caa <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 8007ca2:	4ba6      	ldr	r3, [pc, #664]	@ (8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8007ca4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ca6:	f000 be76 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8007caa:	4ba3      	ldr	r3, [pc, #652]	@ (8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007cac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007cb0:	f003 0302 	and.w	r3, r3, #2
 8007cb4:	2b02      	cmp	r3, #2
 8007cb6:	d108      	bne.n	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
 8007cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007cbe:	d104      	bne.n	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
    {
      frequency = LSE_VALUE;
 8007cc0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007cc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cc6:	f000 be66 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cce:	f000 be62 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8007cd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cd6:	f1a2 0120 	sub.w	r1, r2, #32
 8007cda:	430b      	orrs	r3, r1
 8007cdc:	d158      	bne.n	8007d90 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8007cde:	4b96      	ldr	r3, [pc, #600]	@ (8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007ce0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007ce4:	f003 0307 	and.w	r3, r3, #7
 8007ce8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8007cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d104      	bne.n	8007cfa <HAL_RCCEx_GetPeriphCLKFreq+0x5ca>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8007cf0:	f7fe fb38 	bl	8006364 <HAL_RCC_GetPCLK3Freq>
 8007cf4:	6378      	str	r0, [r7, #52]	@ 0x34
 8007cf6:	f000 be4e 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8007cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d104      	bne.n	8007d0a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007d00:	f7fe f9ec 	bl	80060dc <HAL_RCC_GetSysClockFreq>
 8007d04:	6378      	str	r0, [r7, #52]	@ 0x34
 8007d06:	f000 be46 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8007d0a:	4b8b      	ldr	r3, [pc, #556]	@ (8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d16:	d106      	bne.n	8007d26 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8007d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d1a:	2b02      	cmp	r3, #2
 8007d1c:	d103      	bne.n	8007d26 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      frequency = HSI_VALUE;
 8007d1e:	4b87      	ldr	r3, [pc, #540]	@ (8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8007d20:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d22:	f000 be38 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8007d26:	4b84      	ldr	r3, [pc, #528]	@ (8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007d28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d2c:	f003 0302 	and.w	r3, r3, #2
 8007d30:	2b02      	cmp	r3, #2
 8007d32:	d107      	bne.n	8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8007d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d36:	2b03      	cmp	r3, #3
 8007d38:	d104      	bne.n	8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
    {
      frequency = LSE_VALUE;
 8007d3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d40:	f000 be29 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8007d44:	4b7c      	ldr	r3, [pc, #496]	@ (8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f003 0320 	and.w	r3, r3, #32
 8007d4c:	2b20      	cmp	r3, #32
 8007d4e:	d11b      	bne.n	8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8007d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d52:	2b04      	cmp	r3, #4
 8007d54:	d118      	bne.n	8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007d56:	4b78      	ldr	r3, [pc, #480]	@ (8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007d58:	689b      	ldr	r3, [r3, #8]
 8007d5a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d005      	beq.n	8007d6e <HAL_RCCEx_GetPeriphCLKFreq+0x63e>
 8007d62:	4b75      	ldr	r3, [pc, #468]	@ (8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007d64:	689b      	ldr	r3, [r3, #8]
 8007d66:	0e1b      	lsrs	r3, r3, #24
 8007d68:	f003 030f 	and.w	r3, r3, #15
 8007d6c:	e006      	b.n	8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8007d6e:	4b72      	ldr	r3, [pc, #456]	@ (8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007d70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007d74:	041b      	lsls	r3, r3, #16
 8007d76:	0e1b      	lsrs	r3, r3, #24
 8007d78:	f003 030f 	and.w	r3, r3, #15
 8007d7c:	4a70      	ldr	r2, [pc, #448]	@ (8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8007d7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d82:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d84:	f000 be07 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d8c:	f000 be03 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8007d90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d94:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8007d98:	430b      	orrs	r3, r1
 8007d9a:	d16c      	bne.n	8007e76 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8007d9c:	4b66      	ldr	r3, [pc, #408]	@ (8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007d9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007da2:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007da6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8007da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007daa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007dae:	d104      	bne.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007db0:	f7fe f994 	bl	80060dc <HAL_RCC_GetSysClockFreq>
 8007db4:	6378      	str	r0, [r7, #52]	@ 0x34
 8007db6:	f000 bdee 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8007dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dbc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007dc0:	d108      	bne.n	8007dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x6a4>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007dc2:	f107 0318 	add.w	r3, r7, #24
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f7ff f9fe 	bl	80071c8 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8007dcc:	6a3b      	ldr	r3, [r7, #32]
 8007dce:	637b      	str	r3, [r7, #52]	@ 0x34
 8007dd0:	f000 bde1 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8007dd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d104      	bne.n	8007de4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8007dda:	f7fe fa81 	bl	80062e0 <HAL_RCC_GetHCLKFreq>
 8007dde:	6378      	str	r0, [r7, #52]	@ 0x34
 8007de0:	f000 bdd9 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8007de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007de6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007dea:	d122      	bne.n	8007e32 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007dec:	4b52      	ldr	r3, [pc, #328]	@ (8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f003 0320 	and.w	r3, r3, #32
 8007df4:	2b20      	cmp	r3, #32
 8007df6:	d118      	bne.n	8007e2a <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007df8:	4b4f      	ldr	r3, [pc, #316]	@ (8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007dfa:	689b      	ldr	r3, [r3, #8]
 8007dfc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d005      	beq.n	8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8007e04:	4b4c      	ldr	r3, [pc, #304]	@ (8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007e06:	689b      	ldr	r3, [r3, #8]
 8007e08:	0e1b      	lsrs	r3, r3, #24
 8007e0a:	f003 030f 	and.w	r3, r3, #15
 8007e0e:	e006      	b.n	8007e1e <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 8007e10:	4b49      	ldr	r3, [pc, #292]	@ (8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007e12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007e16:	041b      	lsls	r3, r3, #16
 8007e18:	0e1b      	lsrs	r3, r3, #24
 8007e1a:	f003 030f 	and.w	r3, r3, #15
 8007e1e:	4a48      	ldr	r2, [pc, #288]	@ (8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8007e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e24:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e26:	f000 bdb6 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = 0U;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e2e:	f000 bdb2 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8007e32:	4b41      	ldr	r3, [pc, #260]	@ (8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e3a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e3e:	d107      	bne.n	8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8007e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e42:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007e46:	d103      	bne.n	8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
    {
      frequency = HSE_VALUE;
 8007e48:	4b3c      	ldr	r3, [pc, #240]	@ (8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8007e4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e4c:	f000 bda3 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8007e50:	4b39      	ldr	r3, [pc, #228]	@ (8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e5c:	d107      	bne.n	8007e6e <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
 8007e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e60:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007e64:	d103      	bne.n	8007e6e <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
    {
      frequency = HSI_VALUE;
 8007e66:	4b35      	ldr	r3, [pc, #212]	@ (8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8007e68:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e6a:	f000 bd94 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e72:	f000 bd90 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8007e76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e7a:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8007e7e:	430b      	orrs	r3, r1
 8007e80:	d160      	bne.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8007e82:	4b2d      	ldr	r3, [pc, #180]	@ (8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007e84:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007e88:	f003 0307 	and.w	r3, r3, #7
 8007e8c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e90:	2b04      	cmp	r3, #4
 8007e92:	d84c      	bhi.n	8007f2e <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 8007e94:	a201      	add	r2, pc, #4	@ (adr r2, 8007e9c <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 8007e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e9a:	bf00      	nop
 8007e9c:	08007ed5 	.word	0x08007ed5
 8007ea0:	08007eb1 	.word	0x08007eb1
 8007ea4:	08007ec3 	.word	0x08007ec3
 8007ea8:	08007edf 	.word	0x08007edf
 8007eac:	08007ee9 	.word	0x08007ee9
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007eb0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f7ff f82d 	bl	8006f14 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ebc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007ebe:	f000 bd6a 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ec2:	f107 030c 	add.w	r3, r7, #12
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f7ff fad8 	bl	800747c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007ed0:	f000 bd61 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8007ed4:	f7fe fa04 	bl	80062e0 <HAL_RCC_GetHCLKFreq>
 8007ed8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007eda:	f000 bd5c 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007ede:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007ee2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007ee4:	f000 bd57 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007ee8:	4b13      	ldr	r3, [pc, #76]	@ (8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f003 0320 	and.w	r3, r3, #32
 8007ef0:	2b20      	cmp	r3, #32
 8007ef2:	d118      	bne.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007ef4:	4b10      	ldr	r3, [pc, #64]	@ (8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007ef6:	689b      	ldr	r3, [r3, #8]
 8007ef8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d005      	beq.n	8007f0c <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8007f00:	4b0d      	ldr	r3, [pc, #52]	@ (8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007f02:	689b      	ldr	r3, [r3, #8]
 8007f04:	0e1b      	lsrs	r3, r3, #24
 8007f06:	f003 030f 	and.w	r3, r3, #15
 8007f0a:	e006      	b.n	8007f1a <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 8007f0c:	4b0a      	ldr	r3, [pc, #40]	@ (8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007f0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007f12:	041b      	lsls	r3, r3, #16
 8007f14:	0e1b      	lsrs	r3, r3, #24
 8007f16:	f003 030f 	and.w	r3, r3, #15
 8007f1a:	4a09      	ldr	r2, [pc, #36]	@ (8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8007f1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f20:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007f22:	f000 bd38 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8007f26:	2300      	movs	r3, #0
 8007f28:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007f2a:	f000 bd34 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007f32:	f000 bd30 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8007f36:	bf00      	nop
 8007f38:	46020c00 	.word	0x46020c00
 8007f3c:	00f42400 	.word	0x00f42400
 8007f40:	080145f8 	.word	0x080145f8
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8007f44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f48:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8007f4c:	430b      	orrs	r3, r1
 8007f4e:	d167      	bne.n	8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8007f50:	4ba0      	ldr	r3, [pc, #640]	@ (80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8007f52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007f56:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007f5a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f5e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007f62:	d036      	beq.n	8007fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8007f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f66:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007f6a:	d855      	bhi.n	8008018 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8007f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f6e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007f72:	d029      	beq.n	8007fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
 8007f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f76:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007f7a:	d84d      	bhi.n	8008018 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8007f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f7e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f82:	d013      	beq.n	8007fac <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 8007f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f86:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f8a:	d845      	bhi.n	8008018 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8007f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d015      	beq.n	8007fbe <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
 8007f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f98:	d13e      	bne.n	8008018 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f7fe ffb8 	bl	8006f14 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fa6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007fa8:	f000 bcf5 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007fac:	f107 030c 	add.w	r3, r7, #12
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f7ff fa63 	bl	800747c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007fba:	f000 bcec 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8007fbe:	f7fe f98f 	bl	80062e0 <HAL_RCC_GetHCLKFreq>
 8007fc2:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007fc4:	f000 bce7 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007fc8:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007fcc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007fce:	f000 bce2 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007fd2:	4b80      	ldr	r3, [pc, #512]	@ (80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f003 0320 	and.w	r3, r3, #32
 8007fda:	2b20      	cmp	r3, #32
 8007fdc:	d118      	bne.n	8008010 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007fde:	4b7d      	ldr	r3, [pc, #500]	@ (80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8007fe0:	689b      	ldr	r3, [r3, #8]
 8007fe2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d005      	beq.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 8007fea:	4b7a      	ldr	r3, [pc, #488]	@ (80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	0e1b      	lsrs	r3, r3, #24
 8007ff0:	f003 030f 	and.w	r3, r3, #15
 8007ff4:	e006      	b.n	8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
 8007ff6:	4b77      	ldr	r3, [pc, #476]	@ (80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8007ff8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007ffc:	041b      	lsls	r3, r3, #16
 8007ffe:	0e1b      	lsrs	r3, r3, #24
 8008000:	f003 030f 	and.w	r3, r3, #15
 8008004:	4a74      	ldr	r2, [pc, #464]	@ (80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 8008006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800800a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800800c:	f000 bcc3 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8008010:	2300      	movs	r3, #0
 8008012:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008014:	f000 bcbf 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8008018:	2300      	movs	r3, #0
 800801a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800801c:	f000 bcbb 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8008020:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008024:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8008028:	430b      	orrs	r3, r1
 800802a:	d14c      	bne.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0x996>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800802c:	4b69      	ldr	r3, [pc, #420]	@ (80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800802e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008032:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008036:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8008038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800803a:	2b00      	cmp	r3, #0
 800803c:	d104      	bne.n	8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800803e:	f7fe f969 	bl	8006314 <HAL_RCC_GetPCLK1Freq>
 8008042:	6378      	str	r0, [r7, #52]	@ 0x34
 8008044:	f000 bca7 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8008048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800804a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800804e:	d104      	bne.n	800805a <HAL_RCCEx_GetPeriphCLKFreq+0x92a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008050:	f7fe f844 	bl	80060dc <HAL_RCC_GetSysClockFreq>
 8008054:	6378      	str	r0, [r7, #52]	@ 0x34
 8008056:	f000 bc9e 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800805a:	4b5e      	ldr	r3, [pc, #376]	@ (80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008062:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008066:	d107      	bne.n	8008078 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
 8008068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800806a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800806e:	d103      	bne.n	8008078 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
    {
      frequency = HSI_VALUE;
 8008070:	4b5a      	ldr	r3, [pc, #360]	@ (80081dc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8008072:	637b      	str	r3, [r7, #52]	@ 0x34
 8008074:	f000 bc8f 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8008078:	4b56      	ldr	r3, [pc, #344]	@ (80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f003 0320 	and.w	r3, r3, #32
 8008080:	2b20      	cmp	r3, #32
 8008082:	d11c      	bne.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
 8008084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008086:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800808a:	d118      	bne.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800808c:	4b51      	ldr	r3, [pc, #324]	@ (80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800808e:	689b      	ldr	r3, [r3, #8]
 8008090:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008094:	2b00      	cmp	r3, #0
 8008096:	d005      	beq.n	80080a4 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
 8008098:	4b4e      	ldr	r3, [pc, #312]	@ (80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800809a:	689b      	ldr	r3, [r3, #8]
 800809c:	0e1b      	lsrs	r3, r3, #24
 800809e:	f003 030f 	and.w	r3, r3, #15
 80080a2:	e006      	b.n	80080b2 <HAL_RCCEx_GetPeriphCLKFreq+0x982>
 80080a4:	4b4b      	ldr	r3, [pc, #300]	@ (80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80080a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80080aa:	041b      	lsls	r3, r3, #16
 80080ac:	0e1b      	lsrs	r3, r3, #24
 80080ae:	f003 030f 	and.w	r3, r3, #15
 80080b2:	4a49      	ldr	r2, [pc, #292]	@ (80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 80080b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80080ba:	f000 bc6c 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 80080be:	2300      	movs	r3, #0
 80080c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80080c2:	f000 bc68 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 80080c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080ca:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 80080ce:	430b      	orrs	r3, r1
 80080d0:	d14c      	bne.n	800816c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80080d2:	4b40      	ldr	r3, [pc, #256]	@ (80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80080d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80080d8:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80080dc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80080de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d104      	bne.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80080e4:	f7fe f916 	bl	8006314 <HAL_RCC_GetPCLK1Freq>
 80080e8:	6378      	str	r0, [r7, #52]	@ 0x34
 80080ea:	f000 bc54 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 80080ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080f4:	d104      	bne.n	8008100 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80080f6:	f7fd fff1 	bl	80060dc <HAL_RCC_GetSysClockFreq>
 80080fa:	6378      	str	r0, [r7, #52]	@ 0x34
 80080fc:	f000 bc4b 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8008100:	4b34      	ldr	r3, [pc, #208]	@ (80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008108:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800810c:	d107      	bne.n	800811e <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
 800810e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008110:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008114:	d103      	bne.n	800811e <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HSI_VALUE;
 8008116:	4b31      	ldr	r3, [pc, #196]	@ (80081dc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8008118:	637b      	str	r3, [r7, #52]	@ 0x34
 800811a:	f000 bc3c 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800811e:	4b2d      	ldr	r3, [pc, #180]	@ (80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f003 0320 	and.w	r3, r3, #32
 8008126:	2b20      	cmp	r3, #32
 8008128:	d11c      	bne.n	8008164 <HAL_RCCEx_GetPeriphCLKFreq+0xa34>
 800812a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800812c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008130:	d118      	bne.n	8008164 <HAL_RCCEx_GetPeriphCLKFreq+0xa34>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008132:	4b28      	ldr	r3, [pc, #160]	@ (80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8008134:	689b      	ldr	r3, [r3, #8]
 8008136:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800813a:	2b00      	cmp	r3, #0
 800813c:	d005      	beq.n	800814a <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 800813e:	4b25      	ldr	r3, [pc, #148]	@ (80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8008140:	689b      	ldr	r3, [r3, #8]
 8008142:	0e1b      	lsrs	r3, r3, #24
 8008144:	f003 030f 	and.w	r3, r3, #15
 8008148:	e006      	b.n	8008158 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>
 800814a:	4b22      	ldr	r3, [pc, #136]	@ (80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800814c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008150:	041b      	lsls	r3, r3, #16
 8008152:	0e1b      	lsrs	r3, r3, #24
 8008154:	f003 030f 	and.w	r3, r3, #15
 8008158:	4a1f      	ldr	r2, [pc, #124]	@ (80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 800815a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800815e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008160:	f000 bc19 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8008164:	2300      	movs	r3, #0
 8008166:	637b      	str	r3, [r7, #52]	@ 0x34
 8008168:	f000 bc15 	b.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800816c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008170:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8008174:	430b      	orrs	r3, r1
 8008176:	d157      	bne.n	8008228 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8008178:	4b16      	ldr	r3, [pc, #88]	@ (80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800817a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800817e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008182:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008186:	2bc0      	cmp	r3, #192	@ 0xc0
 8008188:	d02a      	beq.n	80081e0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 800818a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800818c:	2bc0      	cmp	r3, #192	@ 0xc0
 800818e:	d848      	bhi.n	8008222 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 8008190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008192:	2b80      	cmp	r3, #128	@ 0x80
 8008194:	d00d      	beq.n	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8008196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008198:	2b80      	cmp	r3, #128	@ 0x80
 800819a:	d842      	bhi.n	8008222 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 800819c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d003      	beq.n	80081aa <HAL_RCCEx_GetPeriphCLKFreq+0xa7a>
 80081a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081a4:	2b40      	cmp	r3, #64	@ 0x40
 80081a6:	d011      	beq.n	80081cc <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80081a8:	e03b      	b.n	8008222 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 80081aa:	f7fe f8db 	bl	8006364 <HAL_RCC_GetPCLK3Freq>
 80081ae:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80081b0:	e3f1      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80081b2:	4b08      	ldr	r3, [pc, #32]	@ (80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80081ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081be:	d102      	bne.n	80081c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSI_VALUE;
 80081c0:	4b06      	ldr	r3, [pc, #24]	@ (80081dc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80081c2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80081c4:	e3e7      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 80081c6:	2300      	movs	r3, #0
 80081c8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80081ca:	e3e4      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 80081cc:	f7fd ff86 	bl	80060dc <HAL_RCC_GetSysClockFreq>
 80081d0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80081d2:	e3e0      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 80081d4:	46020c00 	.word	0x46020c00
 80081d8:	080145f8 	.word	0x080145f8
 80081dc:	00f42400 	.word	0x00f42400
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80081e0:	4ba3      	ldr	r3, [pc, #652]	@ (8008470 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f003 0320 	and.w	r3, r3, #32
 80081e8:	2b20      	cmp	r3, #32
 80081ea:	d117      	bne.n	800821c <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80081ec:	4ba0      	ldr	r3, [pc, #640]	@ (8008470 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80081ee:	689b      	ldr	r3, [r3, #8]
 80081f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d005      	beq.n	8008204 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>
 80081f8:	4b9d      	ldr	r3, [pc, #628]	@ (8008470 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80081fa:	689b      	ldr	r3, [r3, #8]
 80081fc:	0e1b      	lsrs	r3, r3, #24
 80081fe:	f003 030f 	and.w	r3, r3, #15
 8008202:	e006      	b.n	8008212 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
 8008204:	4b9a      	ldr	r3, [pc, #616]	@ (8008470 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8008206:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800820a:	041b      	lsls	r3, r3, #16
 800820c:	0e1b      	lsrs	r3, r3, #24
 800820e:	f003 030f 	and.w	r3, r3, #15
 8008212:	4a98      	ldr	r2, [pc, #608]	@ (8008474 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8008214:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008218:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800821a:	e3bc      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 800821c:	2300      	movs	r3, #0
 800821e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008220:	e3b9      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      default:
      {
        frequency = 0U;
 8008222:	2300      	movs	r3, #0
 8008224:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008226:	e3b6      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8008228:	e9d7 2300 	ldrd	r2, r3, [r7]
 800822c:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 8008230:	430b      	orrs	r3, r1
 8008232:	d147      	bne.n	80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8008234:	4b8e      	ldr	r3, [pc, #568]	@ (8008470 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8008236:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800823a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800823e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8008240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008242:	2b00      	cmp	r3, #0
 8008244:	d103      	bne.n	800824e <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008246:	f7fe f865 	bl	8006314 <HAL_RCC_GetPCLK1Freq>
 800824a:	6378      	str	r0, [r7, #52]	@ 0x34
 800824c:	e3a3      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800824e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008250:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008254:	d103      	bne.n	800825e <HAL_RCCEx_GetPeriphCLKFreq+0xb2e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008256:	f7fd ff41 	bl	80060dc <HAL_RCC_GetSysClockFreq>
 800825a:	6378      	str	r0, [r7, #52]	@ 0x34
 800825c:	e39b      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800825e:	4b84      	ldr	r3, [pc, #528]	@ (8008470 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008266:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800826a:	d106      	bne.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 800826c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800826e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008272:	d102      	bne.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
    {
      frequency = HSI_VALUE;
 8008274:	4b80      	ldr	r3, [pc, #512]	@ (8008478 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 8008276:	637b      	str	r3, [r7, #52]	@ 0x34
 8008278:	e38d      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800827a:	4b7d      	ldr	r3, [pc, #500]	@ (8008470 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f003 0320 	and.w	r3, r3, #32
 8008282:	2b20      	cmp	r3, #32
 8008284:	d11b      	bne.n	80082be <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
 8008286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008288:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800828c:	d117      	bne.n	80082be <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800828e:	4b78      	ldr	r3, [pc, #480]	@ (8008470 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8008290:	689b      	ldr	r3, [r3, #8]
 8008292:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008296:	2b00      	cmp	r3, #0
 8008298:	d005      	beq.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0xb76>
 800829a:	4b75      	ldr	r3, [pc, #468]	@ (8008470 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800829c:	689b      	ldr	r3, [r3, #8]
 800829e:	0e1b      	lsrs	r3, r3, #24
 80082a0:	f003 030f 	and.w	r3, r3, #15
 80082a4:	e006      	b.n	80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 80082a6:	4b72      	ldr	r3, [pc, #456]	@ (8008470 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80082a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80082ac:	041b      	lsls	r3, r3, #16
 80082ae:	0e1b      	lsrs	r3, r3, #24
 80082b0:	f003 030f 	and.w	r3, r3, #15
 80082b4:	4a6f      	ldr	r2, [pc, #444]	@ (8008474 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 80082b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80082bc:	e36b      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 80082be:	2300      	movs	r3, #0
 80082c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80082c2:	e368      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 80082c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082c8:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80082cc:	430b      	orrs	r3, r1
 80082ce:	d164      	bne.n	800839a <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 80082d0:	4b67      	ldr	r3, [pc, #412]	@ (8008470 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80082d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80082d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80082da:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 80082dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d120      	bne.n	8008324 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80082e2:	4b63      	ldr	r3, [pc, #396]	@ (8008470 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f003 0320 	and.w	r3, r3, #32
 80082ea:	2b20      	cmp	r3, #32
 80082ec:	d117      	bne.n	800831e <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80082ee:	4b60      	ldr	r3, [pc, #384]	@ (8008470 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80082f0:	689b      	ldr	r3, [r3, #8]
 80082f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d005      	beq.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xbd6>
 80082fa:	4b5d      	ldr	r3, [pc, #372]	@ (8008470 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80082fc:	689b      	ldr	r3, [r3, #8]
 80082fe:	0e1b      	lsrs	r3, r3, #24
 8008300:	f003 030f 	and.w	r3, r3, #15
 8008304:	e006      	b.n	8008314 <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
 8008306:	4b5a      	ldr	r3, [pc, #360]	@ (8008470 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8008308:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800830c:	041b      	lsls	r3, r3, #16
 800830e:	0e1b      	lsrs	r3, r3, #24
 8008310:	f003 030f 	and.w	r3, r3, #15
 8008314:	4a57      	ldr	r2, [pc, #348]	@ (8008474 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8008316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800831a:	637b      	str	r3, [r7, #52]	@ 0x34
 800831c:	e33b      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = 0U;
 800831e:	2300      	movs	r3, #0
 8008320:	637b      	str	r3, [r7, #52]	@ 0x34
 8008322:	e338      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8008324:	4b52      	ldr	r3, [pc, #328]	@ (8008470 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8008326:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800832a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800832e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008332:	d112      	bne.n	800835a <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
 8008334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008336:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800833a:	d10e      	bne.n	800835a <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800833c:	4b4c      	ldr	r3, [pc, #304]	@ (8008470 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800833e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008342:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008346:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800834a:	d102      	bne.n	8008352 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
      {
        frequency = LSI_VALUE / 128U;
 800834c:	23fa      	movs	r3, #250	@ 0xfa
 800834e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008350:	e321      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8008352:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008356:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008358:	e31d      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800835a:	4b45      	ldr	r3, [pc, #276]	@ (8008470 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008362:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008366:	d106      	bne.n	8008376 <HAL_RCCEx_GetPeriphCLKFreq+0xc46>
 8008368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800836a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800836e:	d102      	bne.n	8008376 <HAL_RCCEx_GetPeriphCLKFreq+0xc46>
    {
      frequency = HSI_VALUE;
 8008370:	4b41      	ldr	r3, [pc, #260]	@ (8008478 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 8008372:	637b      	str	r3, [r7, #52]	@ 0x34
 8008374:	e30f      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8008376:	4b3e      	ldr	r3, [pc, #248]	@ (8008470 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8008378:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800837c:	f003 0302 	and.w	r3, r3, #2
 8008380:	2b02      	cmp	r3, #2
 8008382:	d107      	bne.n	8008394 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 8008384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008386:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800838a:	d103      	bne.n	8008394 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = LSE_VALUE;
 800838c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008390:	637b      	str	r3, [r7, #52]	@ 0x34
 8008392:	e300      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8008394:	2300      	movs	r3, #0
 8008396:	637b      	str	r3, [r7, #52]	@ 0x34
 8008398:	e2fd      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800839a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800839e:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80083a2:	430b      	orrs	r3, r1
 80083a4:	d16a      	bne.n	800847c <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80083a6:	4b32      	ldr	r3, [pc, #200]	@ (8008470 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80083a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80083ac:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80083b0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 80083b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d120      	bne.n	80083fa <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80083b8:	4b2d      	ldr	r3, [pc, #180]	@ (8008470 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f003 0320 	and.w	r3, r3, #32
 80083c0:	2b20      	cmp	r3, #32
 80083c2:	d117      	bne.n	80083f4 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80083c4:	4b2a      	ldr	r3, [pc, #168]	@ (8008470 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80083c6:	689b      	ldr	r3, [r3, #8]
 80083c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d005      	beq.n	80083dc <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 80083d0:	4b27      	ldr	r3, [pc, #156]	@ (8008470 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80083d2:	689b      	ldr	r3, [r3, #8]
 80083d4:	0e1b      	lsrs	r3, r3, #24
 80083d6:	f003 030f 	and.w	r3, r3, #15
 80083da:	e006      	b.n	80083ea <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 80083dc:	4b24      	ldr	r3, [pc, #144]	@ (8008470 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80083de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80083e2:	041b      	lsls	r3, r3, #16
 80083e4:	0e1b      	lsrs	r3, r3, #24
 80083e6:	f003 030f 	and.w	r3, r3, #15
 80083ea:	4a22      	ldr	r2, [pc, #136]	@ (8008474 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 80083ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80083f2:	e2d0      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = 0U;
 80083f4:	2300      	movs	r3, #0
 80083f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80083f8:	e2cd      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 80083fa:	4b1d      	ldr	r3, [pc, #116]	@ (8008470 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80083fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008400:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008404:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008408:	d112      	bne.n	8008430 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 800840a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800840c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008410:	d10e      	bne.n	8008430 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008412:	4b17      	ldr	r3, [pc, #92]	@ (8008470 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8008414:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008418:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800841c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008420:	d102      	bne.n	8008428 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 8008422:	23fa      	movs	r3, #250	@ 0xfa
 8008424:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008426:	e2b6      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8008428:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800842c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800842e:	e2b2      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8008430:	4b0f      	ldr	r3, [pc, #60]	@ (8008470 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008438:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800843c:	d106      	bne.n	800844c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 800843e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008440:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008444:	d102      	bne.n	800844c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 8008446:	4b0c      	ldr	r3, [pc, #48]	@ (8008478 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 8008448:	637b      	str	r3, [r7, #52]	@ 0x34
 800844a:	e2a4      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800844c:	4b08      	ldr	r3, [pc, #32]	@ (8008470 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800844e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008452:	f003 0302 	and.w	r3, r3, #2
 8008456:	2b02      	cmp	r3, #2
 8008458:	d107      	bne.n	800846a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 800845a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800845c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008460:	d103      	bne.n	800846a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 8008462:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008466:	637b      	str	r3, [r7, #52]	@ 0x34
 8008468:	e295      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800846a:	2300      	movs	r3, #0
 800846c:	637b      	str	r3, [r7, #52]	@ 0x34
 800846e:	e292      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8008470:	46020c00 	.word	0x46020c00
 8008474:	080145f8 	.word	0x080145f8
 8008478:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800847c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008480:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8008484:	430b      	orrs	r3, r1
 8008486:	d147      	bne.n	8008518 <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008488:	4b9a      	ldr	r3, [pc, #616]	@ (80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 800848a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800848e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8008492:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8008494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008496:	2b00      	cmp	r3, #0
 8008498:	d103      	bne.n	80084a2 <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800849a:	f7fd ff3b 	bl	8006314 <HAL_RCC_GetPCLK1Freq>
 800849e:	6378      	str	r0, [r7, #52]	@ 0x34
 80084a0:	e279      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 80084a2:	4b94      	ldr	r3, [pc, #592]	@ (80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80084a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80084a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80084ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80084b0:	d112      	bne.n	80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
 80084b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084b4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80084b8:	d10e      	bne.n	80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80084ba:	4b8e      	ldr	r3, [pc, #568]	@ (80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80084bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80084c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80084c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80084c8:	d102      	bne.n	80084d0 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
      {
        frequency = LSI_VALUE / 128U;
 80084ca:	23fa      	movs	r3, #250	@ 0xfa
 80084cc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80084ce:	e262      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 80084d0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80084d4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80084d6:	e25e      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 80084d8:	4b86      	ldr	r3, [pc, #536]	@ (80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80084e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80084e4:	d106      	bne.n	80084f4 <HAL_RCCEx_GetPeriphCLKFreq+0xdc4>
 80084e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084e8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80084ec:	d102      	bne.n	80084f4 <HAL_RCCEx_GetPeriphCLKFreq+0xdc4>
    {
      frequency = HSI_VALUE;
 80084ee:	4b82      	ldr	r3, [pc, #520]	@ (80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 80084f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80084f2:	e250      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 80084f4:	4b7f      	ldr	r3, [pc, #508]	@ (80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80084f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80084fa:	f003 0302 	and.w	r3, r3, #2
 80084fe:	2b02      	cmp	r3, #2
 8008500:	d107      	bne.n	8008512 <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
 8008502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008504:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008508:	d103      	bne.n	8008512 <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
    {
      frequency = LSE_VALUE;
 800850a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800850e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008510:	e241      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8008512:	2300      	movs	r3, #0
 8008514:	637b      	str	r3, [r7, #52]	@ 0x34
 8008516:	e23e      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8008518:	e9d7 2300 	ldrd	r2, r3, [r7]
 800851c:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8008520:	430b      	orrs	r3, r1
 8008522:	d12d      	bne.n	8008580 <HAL_RCCEx_GetPeriphCLKFreq+0xe50>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8008524:	4b73      	ldr	r3, [pc, #460]	@ (80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8008526:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800852a:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800852e:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8008530:	4b70      	ldr	r3, [pc, #448]	@ (80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008538:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800853c:	d105      	bne.n	800854a <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 800853e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008540:	2b00      	cmp	r3, #0
 8008542:	d102      	bne.n	800854a <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
    {
      frequency = HSE_VALUE;
 8008544:	4b6c      	ldr	r3, [pc, #432]	@ (80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8008546:	637b      	str	r3, [r7, #52]	@ 0x34
 8008548:	e225      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800854a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800854c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008550:	d107      	bne.n	8008562 <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008552:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008556:	4618      	mov	r0, r3
 8008558:	f7fe fcdc 	bl	8006f14 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800855c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800855e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008560:	e219      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8008562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008564:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008568:	d107      	bne.n	800857a <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800856a:	f107 0318 	add.w	r3, r7, #24
 800856e:	4618      	mov	r0, r3
 8008570:	f7fe fe2a 	bl	80071c8 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8008574:	69bb      	ldr	r3, [r7, #24]
 8008576:	637b      	str	r3, [r7, #52]	@ 0x34
 8008578:	e20d      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800857a:	2300      	movs	r3, #0
 800857c:	637b      	str	r3, [r7, #52]	@ 0x34
 800857e:	e20a      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8008580:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008584:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8008588:	430b      	orrs	r3, r1
 800858a:	d156      	bne.n	800863a <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800858c:	4b59      	ldr	r3, [pc, #356]	@ (80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 800858e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008592:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8008596:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8008598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800859a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800859e:	d028      	beq.n	80085f2 <HAL_RCCEx_GetPeriphCLKFreq+0xec2>
 80085a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085a2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80085a6:	d845      	bhi.n	8008634 <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
 80085a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80085ae:	d013      	beq.n	80085d8 <HAL_RCCEx_GetPeriphCLKFreq+0xea8>
 80085b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80085b6:	d83d      	bhi.n	8008634 <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
 80085b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d004      	beq.n	80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe98>
 80085be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085c0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80085c4:	d004      	beq.n	80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0xea0>
 80085c6:	e035      	b.n	8008634 <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 80085c8:	f7fd feb8 	bl	800633c <HAL_RCC_GetPCLK2Freq>
 80085cc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80085ce:	e1e2      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80085d0:	f7fd fd84 	bl	80060dc <HAL_RCC_GetSysClockFreq>
 80085d4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80085d6:	e1de      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80085d8:	4b46      	ldr	r3, [pc, #280]	@ (80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80085e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80085e4:	d102      	bne.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0xebc>
        {
          frequency = HSI_VALUE;
 80085e6:	4b44      	ldr	r3, [pc, #272]	@ (80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 80085e8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80085ea:	e1d4      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 80085ec:	2300      	movs	r3, #0
 80085ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80085f0:	e1d1      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80085f2:	4b40      	ldr	r3, [pc, #256]	@ (80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f003 0320 	and.w	r3, r3, #32
 80085fa:	2b20      	cmp	r3, #32
 80085fc:	d117      	bne.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xefe>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80085fe:	4b3d      	ldr	r3, [pc, #244]	@ (80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8008600:	689b      	ldr	r3, [r3, #8]
 8008602:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008606:	2b00      	cmp	r3, #0
 8008608:	d005      	beq.n	8008616 <HAL_RCCEx_GetPeriphCLKFreq+0xee6>
 800860a:	4b3a      	ldr	r3, [pc, #232]	@ (80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 800860c:	689b      	ldr	r3, [r3, #8]
 800860e:	0e1b      	lsrs	r3, r3, #24
 8008610:	f003 030f 	and.w	r3, r3, #15
 8008614:	e006      	b.n	8008624 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 8008616:	4b37      	ldr	r3, [pc, #220]	@ (80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8008618:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800861c:	041b      	lsls	r3, r3, #16
 800861e:	0e1b      	lsrs	r3, r3, #24
 8008620:	f003 030f 	and.w	r3, r3, #15
 8008624:	4a35      	ldr	r2, [pc, #212]	@ (80086fc <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>)
 8008626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800862a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800862c:	e1b3      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 800862e:	2300      	movs	r3, #0
 8008630:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008632:	e1b0      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8008634:	2300      	movs	r3, #0
 8008636:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008638:	e1ad      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800863a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800863e:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8008642:	430b      	orrs	r3, r1
 8008644:	d15c      	bne.n	8008700 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8008646:	4b2b      	ldr	r3, [pc, #172]	@ (80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8008648:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800864c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008650:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8008652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008654:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008658:	d028      	beq.n	80086ac <HAL_RCCEx_GetPeriphCLKFreq+0xf7c>
 800865a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800865c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008660:	d845      	bhi.n	80086ee <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 8008662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008664:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008668:	d013      	beq.n	8008692 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
 800866a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800866c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008670:	d83d      	bhi.n	80086ee <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 8008672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008674:	2b00      	cmp	r3, #0
 8008676:	d004      	beq.n	8008682 <HAL_RCCEx_GetPeriphCLKFreq+0xf52>
 8008678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800867a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800867e:	d004      	beq.n	800868a <HAL_RCCEx_GetPeriphCLKFreq+0xf5a>
 8008680:	e035      	b.n	80086ee <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8008682:	f7fd fe47 	bl	8006314 <HAL_RCC_GetPCLK1Freq>
 8008686:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008688:	e185      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800868a:	f7fd fd27 	bl	80060dc <HAL_RCC_GetSysClockFreq>
 800868e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008690:	e181      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008692:	4b18      	ldr	r3, [pc, #96]	@ (80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800869a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800869e:	d102      	bne.n	80086a6 <HAL_RCCEx_GetPeriphCLKFreq+0xf76>
        {
          frequency = HSI_VALUE;
 80086a0:	4b15      	ldr	r3, [pc, #84]	@ (80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 80086a2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80086a4:	e177      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 80086a6:	2300      	movs	r3, #0
 80086a8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80086aa:	e174      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80086ac:	4b11      	ldr	r3, [pc, #68]	@ (80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f003 0320 	and.w	r3, r3, #32
 80086b4:	2b20      	cmp	r3, #32
 80086b6:	d117      	bne.n	80086e8 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80086b8:	4b0e      	ldr	r3, [pc, #56]	@ (80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80086ba:	689b      	ldr	r3, [r3, #8]
 80086bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d005      	beq.n	80086d0 <HAL_RCCEx_GetPeriphCLKFreq+0xfa0>
 80086c4:	4b0b      	ldr	r3, [pc, #44]	@ (80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80086c6:	689b      	ldr	r3, [r3, #8]
 80086c8:	0e1b      	lsrs	r3, r3, #24
 80086ca:	f003 030f 	and.w	r3, r3, #15
 80086ce:	e006      	b.n	80086de <HAL_RCCEx_GetPeriphCLKFreq+0xfae>
 80086d0:	4b08      	ldr	r3, [pc, #32]	@ (80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80086d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80086d6:	041b      	lsls	r3, r3, #16
 80086d8:	0e1b      	lsrs	r3, r3, #24
 80086da:	f003 030f 	and.w	r3, r3, #15
 80086de:	4a07      	ldr	r2, [pc, #28]	@ (80086fc <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>)
 80086e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80086e4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80086e6:	e156      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 80086e8:	2300      	movs	r3, #0
 80086ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80086ec:	e153      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 80086ee:	2300      	movs	r3, #0
 80086f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80086f2:	e150      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 80086f4:	46020c00 	.word	0x46020c00
 80086f8:	00f42400 	.word	0x00f42400
 80086fc:	080145f8 	.word	0x080145f8
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8008700:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008704:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8008708:	430b      	orrs	r3, r1
 800870a:	d176      	bne.n	80087fa <HAL_RCCEx_GetPeriphCLKFreq+0x10ca>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800870c:	4ba4      	ldr	r3, [pc, #656]	@ (80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 800870e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008712:	f003 0318 	and.w	r3, r3, #24
 8008716:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8008718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800871a:	2b18      	cmp	r3, #24
 800871c:	d86a      	bhi.n	80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
 800871e:	a201      	add	r2, pc, #4	@ (adr r2, 8008724 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8008720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008724:	08008789 	.word	0x08008789
 8008728:	080087f5 	.word	0x080087f5
 800872c:	080087f5 	.word	0x080087f5
 8008730:	080087f5 	.word	0x080087f5
 8008734:	080087f5 	.word	0x080087f5
 8008738:	080087f5 	.word	0x080087f5
 800873c:	080087f5 	.word	0x080087f5
 8008740:	080087f5 	.word	0x080087f5
 8008744:	08008791 	.word	0x08008791
 8008748:	080087f5 	.word	0x080087f5
 800874c:	080087f5 	.word	0x080087f5
 8008750:	080087f5 	.word	0x080087f5
 8008754:	080087f5 	.word	0x080087f5
 8008758:	080087f5 	.word	0x080087f5
 800875c:	080087f5 	.word	0x080087f5
 8008760:	080087f5 	.word	0x080087f5
 8008764:	08008799 	.word	0x08008799
 8008768:	080087f5 	.word	0x080087f5
 800876c:	080087f5 	.word	0x080087f5
 8008770:	080087f5 	.word	0x080087f5
 8008774:	080087f5 	.word	0x080087f5
 8008778:	080087f5 	.word	0x080087f5
 800877c:	080087f5 	.word	0x080087f5
 8008780:	080087f5 	.word	0x080087f5
 8008784:	080087b3 	.word	0x080087b3
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8008788:	f7fd fdec 	bl	8006364 <HAL_RCC_GetPCLK3Freq>
 800878c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800878e:	e102      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008790:	f7fd fca4 	bl	80060dc <HAL_RCC_GetSysClockFreq>
 8008794:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008796:	e0fe      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008798:	4b81      	ldr	r3, [pc, #516]	@ (80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80087a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80087a4:	d102      	bne.n	80087ac <HAL_RCCEx_GetPeriphCLKFreq+0x107c>
        {
          frequency = HSI_VALUE;
 80087a6:	4b7f      	ldr	r3, [pc, #508]	@ (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1274>)
 80087a8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80087aa:	e0f4      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 80087ac:	2300      	movs	r3, #0
 80087ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80087b0:	e0f1      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80087b2:	4b7b      	ldr	r3, [pc, #492]	@ (80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f003 0320 	and.w	r3, r3, #32
 80087ba:	2b20      	cmp	r3, #32
 80087bc:	d117      	bne.n	80087ee <HAL_RCCEx_GetPeriphCLKFreq+0x10be>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80087be:	4b78      	ldr	r3, [pc, #480]	@ (80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80087c0:	689b      	ldr	r3, [r3, #8]
 80087c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d005      	beq.n	80087d6 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 80087ca:	4b75      	ldr	r3, [pc, #468]	@ (80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80087cc:	689b      	ldr	r3, [r3, #8]
 80087ce:	0e1b      	lsrs	r3, r3, #24
 80087d0:	f003 030f 	and.w	r3, r3, #15
 80087d4:	e006      	b.n	80087e4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
 80087d6:	4b72      	ldr	r3, [pc, #456]	@ (80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80087d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80087dc:	041b      	lsls	r3, r3, #16
 80087de:	0e1b      	lsrs	r3, r3, #24
 80087e0:	f003 030f 	and.w	r3, r3, #15
 80087e4:	4a70      	ldr	r2, [pc, #448]	@ (80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 80087e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087ea:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80087ec:	e0d3      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 80087ee:	2300      	movs	r3, #0
 80087f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80087f2:	e0d0      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 80087f4:	2300      	movs	r3, #0
 80087f6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80087f8:	e0cd      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 80087fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087fe:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8008802:	430b      	orrs	r3, r1
 8008804:	d155      	bne.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8008806:	4b66      	ldr	r3, [pc, #408]	@ (80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8008808:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800880c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8008810:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008814:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008818:	d013      	beq.n	8008842 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
 800881a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800881c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008820:	d844      	bhi.n	80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x117c>
 8008822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008824:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008828:	d013      	beq.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0x1122>
 800882a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800882c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008830:	d83c      	bhi.n	80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x117c>
 8008832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008834:	2b00      	cmp	r3, #0
 8008836:	d014      	beq.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0x1132>
 8008838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800883a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800883e:	d014      	beq.n	800886a <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 8008840:	e034      	b.n	80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x117c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008842:	f107 0318 	add.w	r3, r7, #24
 8008846:	4618      	mov	r0, r3
 8008848:	f7fe fcbe 	bl	80071c8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800884c:	69fb      	ldr	r3, [r7, #28]
 800884e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008850:	e0a1      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008852:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008856:	4618      	mov	r0, r3
 8008858:	f7fe fb5c 	bl	8006f14 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800885c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800885e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008860:	e099      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008862:	f7fd fc3b 	bl	80060dc <HAL_RCC_GetSysClockFreq>
 8008866:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008868:	e095      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800886a:	4b4d      	ldr	r3, [pc, #308]	@ (80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f003 0320 	and.w	r3, r3, #32
 8008872:	2b20      	cmp	r3, #32
 8008874:	d117      	bne.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1176>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008876:	4b4a      	ldr	r3, [pc, #296]	@ (80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8008878:	689b      	ldr	r3, [r3, #8]
 800887a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800887e:	2b00      	cmp	r3, #0
 8008880:	d005      	beq.n	800888e <HAL_RCCEx_GetPeriphCLKFreq+0x115e>
 8008882:	4b47      	ldr	r3, [pc, #284]	@ (80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8008884:	689b      	ldr	r3, [r3, #8]
 8008886:	0e1b      	lsrs	r3, r3, #24
 8008888:	f003 030f 	and.w	r3, r3, #15
 800888c:	e006      	b.n	800889c <HAL_RCCEx_GetPeriphCLKFreq+0x116c>
 800888e:	4b44      	ldr	r3, [pc, #272]	@ (80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8008890:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008894:	041b      	lsls	r3, r3, #16
 8008896:	0e1b      	lsrs	r3, r3, #24
 8008898:	f003 030f 	and.w	r3, r3, #15
 800889c:	4a42      	ldr	r2, [pc, #264]	@ (80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 800889e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088a2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80088a4:	e077      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 80088a6:	2300      	movs	r3, #0
 80088a8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80088aa:	e074      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 80088ac:	2300      	movs	r3, #0
 80088ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80088b0:	e071      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 80088b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088b6:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 80088ba:	430b      	orrs	r3, r1
 80088bc:	d131      	bne.n	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 80088be:	4b38      	ldr	r3, [pc, #224]	@ (80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80088c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80088c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80088c8:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 80088ca:	4b35      	ldr	r3, [pc, #212]	@ (80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80088cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80088d0:	f003 0302 	and.w	r3, r3, #2
 80088d4:	2b02      	cmp	r3, #2
 80088d6:	d106      	bne.n	80088e6 <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 80088d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d103      	bne.n	80088e6 <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
    {
      frequency = LSE_VALUE;
 80088de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80088e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80088e4:	e057      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 80088e6:	4b2e      	ldr	r3, [pc, #184]	@ (80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80088e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80088ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80088f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80088f4:	d112      	bne.n	800891c <HAL_RCCEx_GetPeriphCLKFreq+0x11ec>
 80088f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80088fc:	d10e      	bne.n	800891c <HAL_RCCEx_GetPeriphCLKFreq+0x11ec>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80088fe:	4b28      	ldr	r3, [pc, #160]	@ (80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8008900:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008904:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008908:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800890c:	d102      	bne.n	8008914 <HAL_RCCEx_GetPeriphCLKFreq+0x11e4>
      {
        frequency = LSI_VALUE / 128U;
 800890e:	23fa      	movs	r3, #250	@ 0xfa
 8008910:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008912:	e040      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8008914:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008918:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800891a:	e03c      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800891c:	2300      	movs	r3, #0
 800891e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008920:	e039      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8008922:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008926:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800892a:	430b      	orrs	r3, r1
 800892c:	d131      	bne.n	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800892e:	4b1c      	ldr	r3, [pc, #112]	@ (80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8008930:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008934:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8008938:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800893a:	4b19      	ldr	r3, [pc, #100]	@ (80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008942:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008946:	d105      	bne.n	8008954 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 8008948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800894a:	2b00      	cmp	r3, #0
 800894c:	d102      	bne.n	8008954 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      frequency = HSI48_VALUE;
 800894e:	4b17      	ldr	r3, [pc, #92]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x127c>)
 8008950:	637b      	str	r3, [r7, #52]	@ 0x34
 8008952:	e020      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8008954:	4b12      	ldr	r3, [pc, #72]	@ (80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800895c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008960:	d106      	bne.n	8008970 <HAL_RCCEx_GetPeriphCLKFreq+0x1240>
 8008962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008964:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008968:	d102      	bne.n	8008970 <HAL_RCCEx_GetPeriphCLKFreq+0x1240>
    {
      frequency = HSI48_VALUE >> 1U ;
 800896a:	4b11      	ldr	r3, [pc, #68]	@ (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800896c:	637b      	str	r3, [r7, #52]	@ 0x34
 800896e:	e012      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8008970:	4b0b      	ldr	r3, [pc, #44]	@ (80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008978:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800897c:	d106      	bne.n	800898c <HAL_RCCEx_GetPeriphCLKFreq+0x125c>
 800897e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008980:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008984:	d102      	bne.n	800898c <HAL_RCCEx_GetPeriphCLKFreq+0x125c>
    {
      frequency = HSI_VALUE;
 8008986:	4b07      	ldr	r3, [pc, #28]	@ (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1274>)
 8008988:	637b      	str	r3, [r7, #52]	@ 0x34
 800898a:	e004      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800898c:	2300      	movs	r3, #0
 800898e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008990:	e001      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8008992:	2300      	movs	r3, #0
 8008994:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8008996:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008998:	4618      	mov	r0, r3
 800899a:	3738      	adds	r7, #56	@ 0x38
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}
 80089a0:	46020c00 	.word	0x46020c00
 80089a4:	00f42400 	.word	0x00f42400
 80089a8:	080145f8 	.word	0x080145f8
 80089ac:	02dc6c00 	.word	0x02dc6c00
 80089b0:	016e3600 	.word	0x016e3600

080089b4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b084      	sub	sp, #16
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 80089bc:	4b47      	ldr	r3, [pc, #284]	@ (8008adc <RCCEx_PLL2_Config+0x128>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	4a46      	ldr	r2, [pc, #280]	@ (8008adc <RCCEx_PLL2_Config+0x128>)
 80089c2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80089c6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80089c8:	f7fb fd30 	bl	800442c <HAL_GetTick>
 80089cc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80089ce:	e008      	b.n	80089e2 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80089d0:	f7fb fd2c 	bl	800442c <HAL_GetTick>
 80089d4:	4602      	mov	r2, r0
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	1ad3      	subs	r3, r2, r3
 80089da:	2b02      	cmp	r3, #2
 80089dc:	d901      	bls.n	80089e2 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80089de:	2303      	movs	r3, #3
 80089e0:	e077      	b.n	8008ad2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80089e2:	4b3e      	ldr	r3, [pc, #248]	@ (8008adc <RCCEx_PLL2_Config+0x128>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d1f0      	bne.n	80089d0 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80089ee:	4b3b      	ldr	r3, [pc, #236]	@ (8008adc <RCCEx_PLL2_Config+0x128>)
 80089f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089f2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80089f6:	f023 0303 	bic.w	r3, r3, #3
 80089fa:	687a      	ldr	r2, [r7, #4]
 80089fc:	6811      	ldr	r1, [r2, #0]
 80089fe:	687a      	ldr	r2, [r7, #4]
 8008a00:	6852      	ldr	r2, [r2, #4]
 8008a02:	3a01      	subs	r2, #1
 8008a04:	0212      	lsls	r2, r2, #8
 8008a06:	430a      	orrs	r2, r1
 8008a08:	4934      	ldr	r1, [pc, #208]	@ (8008adc <RCCEx_PLL2_Config+0x128>)
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8008a0e:	4b33      	ldr	r3, [pc, #204]	@ (8008adc <RCCEx_PLL2_Config+0x128>)
 8008a10:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008a12:	4b33      	ldr	r3, [pc, #204]	@ (8008ae0 <RCCEx_PLL2_Config+0x12c>)
 8008a14:	4013      	ands	r3, r2
 8008a16:	687a      	ldr	r2, [r7, #4]
 8008a18:	6892      	ldr	r2, [r2, #8]
 8008a1a:	3a01      	subs	r2, #1
 8008a1c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008a20:	687a      	ldr	r2, [r7, #4]
 8008a22:	68d2      	ldr	r2, [r2, #12]
 8008a24:	3a01      	subs	r2, #1
 8008a26:	0252      	lsls	r2, r2, #9
 8008a28:	b292      	uxth	r2, r2
 8008a2a:	4311      	orrs	r1, r2
 8008a2c:	687a      	ldr	r2, [r7, #4]
 8008a2e:	6912      	ldr	r2, [r2, #16]
 8008a30:	3a01      	subs	r2, #1
 8008a32:	0412      	lsls	r2, r2, #16
 8008a34:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8008a38:	4311      	orrs	r1, r2
 8008a3a:	687a      	ldr	r2, [r7, #4]
 8008a3c:	6952      	ldr	r2, [r2, #20]
 8008a3e:	3a01      	subs	r2, #1
 8008a40:	0612      	lsls	r2, r2, #24
 8008a42:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8008a46:	430a      	orrs	r2, r1
 8008a48:	4924      	ldr	r1, [pc, #144]	@ (8008adc <RCCEx_PLL2_Config+0x128>)
 8008a4a:	4313      	orrs	r3, r2
 8008a4c:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8008a4e:	4b23      	ldr	r3, [pc, #140]	@ (8008adc <RCCEx_PLL2_Config+0x128>)
 8008a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a52:	f023 020c 	bic.w	r2, r3, #12
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	699b      	ldr	r3, [r3, #24]
 8008a5a:	4920      	ldr	r1, [pc, #128]	@ (8008adc <RCCEx_PLL2_Config+0x128>)
 8008a5c:	4313      	orrs	r3, r2
 8008a5e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8008a60:	4b1e      	ldr	r3, [pc, #120]	@ (8008adc <RCCEx_PLL2_Config+0x128>)
 8008a62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6a1b      	ldr	r3, [r3, #32]
 8008a68:	491c      	ldr	r1, [pc, #112]	@ (8008adc <RCCEx_PLL2_Config+0x128>)
 8008a6a:	4313      	orrs	r3, r2
 8008a6c:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8008a6e:	4b1b      	ldr	r3, [pc, #108]	@ (8008adc <RCCEx_PLL2_Config+0x128>)
 8008a70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a72:	4a1a      	ldr	r2, [pc, #104]	@ (8008adc <RCCEx_PLL2_Config+0x128>)
 8008a74:	f023 0310 	bic.w	r3, r3, #16
 8008a78:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008a7a:	4b18      	ldr	r3, [pc, #96]	@ (8008adc <RCCEx_PLL2_Config+0x128>)
 8008a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a7e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008a82:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8008a86:	687a      	ldr	r2, [r7, #4]
 8008a88:	69d2      	ldr	r2, [r2, #28]
 8008a8a:	00d2      	lsls	r2, r2, #3
 8008a8c:	4913      	ldr	r1, [pc, #76]	@ (8008adc <RCCEx_PLL2_Config+0x128>)
 8008a8e:	4313      	orrs	r3, r2
 8008a90:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8008a92:	4b12      	ldr	r3, [pc, #72]	@ (8008adc <RCCEx_PLL2_Config+0x128>)
 8008a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a96:	4a11      	ldr	r2, [pc, #68]	@ (8008adc <RCCEx_PLL2_Config+0x128>)
 8008a98:	f043 0310 	orr.w	r3, r3, #16
 8008a9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8008a9e:	4b0f      	ldr	r3, [pc, #60]	@ (8008adc <RCCEx_PLL2_Config+0x128>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	4a0e      	ldr	r2, [pc, #56]	@ (8008adc <RCCEx_PLL2_Config+0x128>)
 8008aa4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008aa8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008aaa:	f7fb fcbf 	bl	800442c <HAL_GetTick>
 8008aae:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008ab0:	e008      	b.n	8008ac4 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008ab2:	f7fb fcbb 	bl	800442c <HAL_GetTick>
 8008ab6:	4602      	mov	r2, r0
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	1ad3      	subs	r3, r2, r3
 8008abc:	2b02      	cmp	r3, #2
 8008abe:	d901      	bls.n	8008ac4 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008ac0:	2303      	movs	r3, #3
 8008ac2:	e006      	b.n	8008ad2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008ac4:	4b05      	ldr	r3, [pc, #20]	@ (8008adc <RCCEx_PLL2_Config+0x128>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d0f0      	beq.n	8008ab2 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8008ad0:	2300      	movs	r3, #0

}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3710      	adds	r7, #16
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}
 8008ada:	bf00      	nop
 8008adc:	46020c00 	.word	0x46020c00
 8008ae0:	80800000 	.word	0x80800000

08008ae4 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b084      	sub	sp, #16
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8008aec:	4b47      	ldr	r3, [pc, #284]	@ (8008c0c <RCCEx_PLL3_Config+0x128>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4a46      	ldr	r2, [pc, #280]	@ (8008c0c <RCCEx_PLL3_Config+0x128>)
 8008af2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008af6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008af8:	f7fb fc98 	bl	800442c <HAL_GetTick>
 8008afc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008afe:	e008      	b.n	8008b12 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008b00:	f7fb fc94 	bl	800442c <HAL_GetTick>
 8008b04:	4602      	mov	r2, r0
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	1ad3      	subs	r3, r2, r3
 8008b0a:	2b02      	cmp	r3, #2
 8008b0c:	d901      	bls.n	8008b12 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008b0e:	2303      	movs	r3, #3
 8008b10:	e077      	b.n	8008c02 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008b12:	4b3e      	ldr	r3, [pc, #248]	@ (8008c0c <RCCEx_PLL3_Config+0x128>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d1f0      	bne.n	8008b00 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8008b1e:	4b3b      	ldr	r3, [pc, #236]	@ (8008c0c <RCCEx_PLL3_Config+0x128>)
 8008b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b22:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008b26:	f023 0303 	bic.w	r3, r3, #3
 8008b2a:	687a      	ldr	r2, [r7, #4]
 8008b2c:	6811      	ldr	r1, [r2, #0]
 8008b2e:	687a      	ldr	r2, [r7, #4]
 8008b30:	6852      	ldr	r2, [r2, #4]
 8008b32:	3a01      	subs	r2, #1
 8008b34:	0212      	lsls	r2, r2, #8
 8008b36:	430a      	orrs	r2, r1
 8008b38:	4934      	ldr	r1, [pc, #208]	@ (8008c0c <RCCEx_PLL3_Config+0x128>)
 8008b3a:	4313      	orrs	r3, r2
 8008b3c:	630b      	str	r3, [r1, #48]	@ 0x30
 8008b3e:	4b33      	ldr	r3, [pc, #204]	@ (8008c0c <RCCEx_PLL3_Config+0x128>)
 8008b40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008b42:	4b33      	ldr	r3, [pc, #204]	@ (8008c10 <RCCEx_PLL3_Config+0x12c>)
 8008b44:	4013      	ands	r3, r2
 8008b46:	687a      	ldr	r2, [r7, #4]
 8008b48:	6892      	ldr	r2, [r2, #8]
 8008b4a:	3a01      	subs	r2, #1
 8008b4c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008b50:	687a      	ldr	r2, [r7, #4]
 8008b52:	68d2      	ldr	r2, [r2, #12]
 8008b54:	3a01      	subs	r2, #1
 8008b56:	0252      	lsls	r2, r2, #9
 8008b58:	b292      	uxth	r2, r2
 8008b5a:	4311      	orrs	r1, r2
 8008b5c:	687a      	ldr	r2, [r7, #4]
 8008b5e:	6912      	ldr	r2, [r2, #16]
 8008b60:	3a01      	subs	r2, #1
 8008b62:	0412      	lsls	r2, r2, #16
 8008b64:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8008b68:	4311      	orrs	r1, r2
 8008b6a:	687a      	ldr	r2, [r7, #4]
 8008b6c:	6952      	ldr	r2, [r2, #20]
 8008b6e:	3a01      	subs	r2, #1
 8008b70:	0612      	lsls	r2, r2, #24
 8008b72:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8008b76:	430a      	orrs	r2, r1
 8008b78:	4924      	ldr	r1, [pc, #144]	@ (8008c0c <RCCEx_PLL3_Config+0x128>)
 8008b7a:	4313      	orrs	r3, r2
 8008b7c:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8008b7e:	4b23      	ldr	r3, [pc, #140]	@ (8008c0c <RCCEx_PLL3_Config+0x128>)
 8008b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b82:	f023 020c 	bic.w	r2, r3, #12
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	699b      	ldr	r3, [r3, #24]
 8008b8a:	4920      	ldr	r1, [pc, #128]	@ (8008c0c <RCCEx_PLL3_Config+0x128>)
 8008b8c:	4313      	orrs	r3, r2
 8008b8e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8008b90:	4b1e      	ldr	r3, [pc, #120]	@ (8008c0c <RCCEx_PLL3_Config+0x128>)
 8008b92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6a1b      	ldr	r3, [r3, #32]
 8008b98:	491c      	ldr	r1, [pc, #112]	@ (8008c0c <RCCEx_PLL3_Config+0x128>)
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8008b9e:	4b1b      	ldr	r3, [pc, #108]	@ (8008c0c <RCCEx_PLL3_Config+0x128>)
 8008ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ba2:	4a1a      	ldr	r2, [pc, #104]	@ (8008c0c <RCCEx_PLL3_Config+0x128>)
 8008ba4:	f023 0310 	bic.w	r3, r3, #16
 8008ba8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008baa:	4b18      	ldr	r3, [pc, #96]	@ (8008c0c <RCCEx_PLL3_Config+0x128>)
 8008bac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008bae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008bb2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8008bb6:	687a      	ldr	r2, [r7, #4]
 8008bb8:	69d2      	ldr	r2, [r2, #28]
 8008bba:	00d2      	lsls	r2, r2, #3
 8008bbc:	4913      	ldr	r1, [pc, #76]	@ (8008c0c <RCCEx_PLL3_Config+0x128>)
 8008bbe:	4313      	orrs	r3, r2
 8008bc0:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8008bc2:	4b12      	ldr	r3, [pc, #72]	@ (8008c0c <RCCEx_PLL3_Config+0x128>)
 8008bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bc6:	4a11      	ldr	r2, [pc, #68]	@ (8008c0c <RCCEx_PLL3_Config+0x128>)
 8008bc8:	f043 0310 	orr.w	r3, r3, #16
 8008bcc:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8008bce:	4b0f      	ldr	r3, [pc, #60]	@ (8008c0c <RCCEx_PLL3_Config+0x128>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	4a0e      	ldr	r2, [pc, #56]	@ (8008c0c <RCCEx_PLL3_Config+0x128>)
 8008bd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008bd8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008bda:	f7fb fc27 	bl	800442c <HAL_GetTick>
 8008bde:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008be0:	e008      	b.n	8008bf4 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008be2:	f7fb fc23 	bl	800442c <HAL_GetTick>
 8008be6:	4602      	mov	r2, r0
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	1ad3      	subs	r3, r2, r3
 8008bec:	2b02      	cmp	r3, #2
 8008bee:	d901      	bls.n	8008bf4 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008bf0:	2303      	movs	r3, #3
 8008bf2:	e006      	b.n	8008c02 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008bf4:	4b05      	ldr	r3, [pc, #20]	@ (8008c0c <RCCEx_PLL3_Config+0x128>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d0f0      	beq.n	8008be2 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8008c00:	2300      	movs	r3, #0
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3710      	adds	r7, #16
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}
 8008c0a:	bf00      	nop
 8008c0c:	46020c00 	.word	0x46020c00
 8008c10:	80800000 	.word	0x80800000

08008c14 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b084      	sub	sp, #16
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d078      	beq.n	8008d18 <HAL_RTC_Init+0x104>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8008c2c:	b2db      	uxtb	r3, r3
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d106      	bne.n	8008c40 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2200      	movs	r2, #0
 8008c36:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f7fb f8be 	bl	8003dbc <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2202      	movs	r2, #2
 8008c44:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8008c48:	4b36      	ldr	r3, [pc, #216]	@ (8008d24 <HAL_RTC_Init+0x110>)
 8008c4a:	68db      	ldr	r3, [r3, #12]
 8008c4c:	f003 0310 	and.w	r3, r3, #16
 8008c50:	2b10      	cmp	r3, #16
 8008c52:	d058      	beq.n	8008d06 <HAL_RTC_Init+0xf2>
    {
      /* Check that the RTC mode is not 'binary only' */
      if (__HAL_RTC_GET_BINARY_MODE(hrtc) != RTC_BINARY_ONLY)
 8008c54:	4b33      	ldr	r3, [pc, #204]	@ (8008d24 <HAL_RTC_Init+0x110>)
 8008c56:	68db      	ldr	r3, [r3, #12]
 8008c58:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008c5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c60:	d053      	beq.n	8008d0a <HAL_RTC_Init+0xf6>
      {
        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008c62:	4b30      	ldr	r3, [pc, #192]	@ (8008d24 <HAL_RTC_Init+0x110>)
 8008c64:	22ca      	movs	r2, #202	@ 0xca
 8008c66:	625a      	str	r2, [r3, #36]	@ 0x24
 8008c68:	4b2e      	ldr	r3, [pc, #184]	@ (8008d24 <HAL_RTC_Init+0x110>)
 8008c6a:	2253      	movs	r2, #83	@ 0x53
 8008c6c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Enter Initialization mode */
        status = RTC_EnterInitMode(hrtc);
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f000 fca0 	bl	80095b4 <RTC_EnterInitMode>
 8008c74:	4603      	mov	r3, r0
 8008c76:	73fb      	strb	r3, [r7, #15]

        if (status == HAL_OK)
 8008c78:	7bfb      	ldrb	r3, [r7, #15]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d13f      	bne.n	8008cfe <HAL_RTC_Init+0xea>
        {
          /* Clear RTC_CR FMT, OSEL and POL Bits */
          CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8008c7e:	4b29      	ldr	r3, [pc, #164]	@ (8008d24 <HAL_RTC_Init+0x110>)
 8008c80:	699b      	ldr	r3, [r3, #24]
 8008c82:	4a28      	ldr	r2, [pc, #160]	@ (8008d24 <HAL_RTC_Init+0x110>)
 8008c84:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8008c88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c8c:	6193      	str	r3, [r2, #24]
          /* Set RTC_CR register */
          SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8008c8e:	4b25      	ldr	r3, [pc, #148]	@ (8008d24 <HAL_RTC_Init+0x110>)
 8008c90:	699a      	ldr	r2, [r3, #24]
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6859      	ldr	r1, [r3, #4]
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	691b      	ldr	r3, [r3, #16]
 8008c9a:	4319      	orrs	r1, r3
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	699b      	ldr	r3, [r3, #24]
 8008ca0:	430b      	orrs	r3, r1
 8008ca2:	4920      	ldr	r1, [pc, #128]	@ (8008d24 <HAL_RTC_Init+0x110>)
 8008ca4:	4313      	orrs	r3, r2
 8008ca6:	618b      	str	r3, [r1, #24]

          /* Configure the RTC PRER */
          WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	68da      	ldr	r2, [r3, #12]
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	689b      	ldr	r3, [r3, #8]
 8008cb0:	041b      	lsls	r3, r3, #16
 8008cb2:	491c      	ldr	r1, [pc, #112]	@ (8008d24 <HAL_RTC_Init+0x110>)
 8008cb4:	4313      	orrs	r3, r2
 8008cb6:	610b      	str	r3, [r1, #16]

          /* Configure the Binary mode */
          MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8008cb8:	4b1a      	ldr	r3, [pc, #104]	@ (8008d24 <HAL_RTC_Init+0x110>)
 8008cba:	68db      	ldr	r3, [r3, #12]
 8008cbc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cc8:	430b      	orrs	r3, r1
 8008cca:	4916      	ldr	r1, [pc, #88]	@ (8008d24 <HAL_RTC_Init+0x110>)
 8008ccc:	4313      	orrs	r3, r2
 8008cce:	60cb      	str	r3, [r1, #12]

          /* Exit Initialization mode */
          status = RTC_ExitInitMode(hrtc);
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f000 fcab 	bl	800962c <RTC_ExitInitMode>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	73fb      	strb	r3, [r7, #15]

          if (status == HAL_OK)
 8008cda:	7bfb      	ldrb	r3, [r7, #15]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d10e      	bne.n	8008cfe <HAL_RTC_Init+0xea>
          {
            MODIFY_REG(RTC->CR, \
 8008ce0:	4b10      	ldr	r3, [pc, #64]	@ (8008d24 <HAL_RTC_Init+0x110>)
 8008ce2:	699b      	ldr	r3, [r3, #24]
 8008ce4:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6a19      	ldr	r1, [r3, #32]
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	69db      	ldr	r3, [r3, #28]
 8008cf0:	4319      	orrs	r1, r3
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	695b      	ldr	r3, [r3, #20]
 8008cf6:	430b      	orrs	r3, r1
 8008cf8:	490a      	ldr	r1, [pc, #40]	@ (8008d24 <HAL_RTC_Init+0x110>)
 8008cfa:	4313      	orrs	r3, r2
 8008cfc:	618b      	str	r3, [r1, #24]
                       hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
          }
        }

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008cfe:	4b09      	ldr	r3, [pc, #36]	@ (8008d24 <HAL_RTC_Init+0x110>)
 8008d00:	22ff      	movs	r2, #255	@ 0xff
 8008d02:	625a      	str	r2, [r3, #36]	@ 0x24
 8008d04:	e001      	b.n	8008d0a <HAL_RTC_Init+0xf6>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8008d06:	2300      	movs	r3, #0
 8008d08:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8008d0a:	7bfb      	ldrb	r3, [r7, #15]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d103      	bne.n	8008d18 <HAL_RTC_Init+0x104>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2201      	movs	r2, #1
 8008d14:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 8008d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3710      	adds	r7, #16
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}
 8008d22:	bf00      	nop
 8008d24:	46007800 	.word	0x46007800

08008d28 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008d28:	b590      	push	{r4, r7, lr}
 8008d2a:	b087      	sub	sp, #28
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	60f8      	str	r0, [r7, #12]
 8008d30:	60b9      	str	r1, [r7, #8]
 8008d32:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008d3a:	2b01      	cmp	r3, #1
 8008d3c:	d101      	bne.n	8008d42 <HAL_RTC_SetTime+0x1a>
 8008d3e:	2302      	movs	r3, #2
 8008d40:	e088      	b.n	8008e54 <HAL_RTC_SetTime+0x12c>
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	2201      	movs	r2, #1
 8008d46:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	2202      	movs	r2, #2
 8008d4e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008d52:	4b42      	ldr	r3, [pc, #264]	@ (8008e5c <HAL_RTC_SetTime+0x134>)
 8008d54:	22ca      	movs	r2, #202	@ 0xca
 8008d56:	625a      	str	r2, [r3, #36]	@ 0x24
 8008d58:	4b40      	ldr	r3, [pc, #256]	@ (8008e5c <HAL_RTC_SetTime+0x134>)
 8008d5a:	2253      	movs	r2, #83	@ 0x53
 8008d5c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008d5e:	68f8      	ldr	r0, [r7, #12]
 8008d60:	f000 fc28 	bl	80095b4 <RTC_EnterInitMode>
 8008d64:	4603      	mov	r3, r0
 8008d66:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8008d68:	7cfb      	ldrb	r3, [r7, #19]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d163      	bne.n	8008e36 <HAL_RTC_SetTime+0x10e>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8008d6e:	4b3b      	ldr	r3, [pc, #236]	@ (8008e5c <HAL_RTC_SetTime+0x134>)
 8008d70:	68db      	ldr	r3, [r3, #12]
 8008d72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008d76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d7a:	d057      	beq.n	8008e2c <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d125      	bne.n	8008dce <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8008d82:	4b36      	ldr	r3, [pc, #216]	@ (8008e5c <HAL_RTC_SetTime+0x134>)
 8008d84:	699b      	ldr	r3, [r3, #24]
 8008d86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d102      	bne.n	8008d94 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	2200      	movs	r2, #0
 8008d92:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	781b      	ldrb	r3, [r3, #0]
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f000 fc85 	bl	80096a8 <RTC_ByteToBcd2>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	785b      	ldrb	r3, [r3, #1]
 8008da6:	4618      	mov	r0, r3
 8008da8:	f000 fc7e 	bl	80096a8 <RTC_ByteToBcd2>
 8008dac:	4603      	mov	r3, r0
 8008dae:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008db0:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	789b      	ldrb	r3, [r3, #2]
 8008db6:	4618      	mov	r0, r3
 8008db8:	f000 fc76 	bl	80096a8 <RTC_ByteToBcd2>
 8008dbc:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008dbe:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	78db      	ldrb	r3, [r3, #3]
 8008dc6:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008dc8:	4313      	orrs	r3, r2
 8008dca:	617b      	str	r3, [r7, #20]
 8008dcc:	e017      	b.n	8008dfe <HAL_RTC_SetTime+0xd6>
      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8008dce:	4b23      	ldr	r3, [pc, #140]	@ (8008e5c <HAL_RTC_SetTime+0x134>)
 8008dd0:	699b      	ldr	r3, [r3, #24]
 8008dd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d102      	bne.n	8008de0 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	781b      	ldrb	r3, [r3, #0]
 8008de4:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	785b      	ldrb	r3, [r3, #1]
 8008dea:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008dec:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8008dee:	68ba      	ldr	r2, [r7, #8]
 8008df0:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008df2:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	78db      	ldrb	r3, [r3, #3]
 8008df8:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8008dfe:	4a17      	ldr	r2, [pc, #92]	@ (8008e5c <HAL_RTC_SetTime+0x134>)
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8008e06:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8008e0a:	6013      	str	r3, [r2, #0]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8008e0c:	4b13      	ldr	r3, [pc, #76]	@ (8008e5c <HAL_RTC_SetTime+0x134>)
 8008e0e:	699b      	ldr	r3, [r3, #24]
 8008e10:	4a12      	ldr	r2, [pc, #72]	@ (8008e5c <HAL_RTC_SetTime+0x134>)
 8008e12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008e16:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8008e18:	4b10      	ldr	r3, [pc, #64]	@ (8008e5c <HAL_RTC_SetTime+0x134>)
 8008e1a:	699a      	ldr	r2, [r3, #24]
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	68d9      	ldr	r1, [r3, #12]
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	691b      	ldr	r3, [r3, #16]
 8008e24:	430b      	orrs	r3, r1
 8008e26:	490d      	ldr	r1, [pc, #52]	@ (8008e5c <HAL_RTC_SetTime+0x134>)
 8008e28:	4313      	orrs	r3, r2
 8008e2a:	618b      	str	r3, [r1, #24]
    }

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008e2c:	68f8      	ldr	r0, [r7, #12]
 8008e2e:	f000 fbfd 	bl	800962c <RTC_ExitInitMode>
 8008e32:	4603      	mov	r3, r0
 8008e34:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e36:	4b09      	ldr	r3, [pc, #36]	@ (8008e5c <HAL_RTC_SetTime+0x134>)
 8008e38:	22ff      	movs	r2, #255	@ 0xff
 8008e3a:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8008e3c:	7cfb      	ldrb	r3, [r7, #19]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d103      	bne.n	8008e4a <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	2201      	movs	r2, #1
 8008e46:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 8008e52:	7cfb      	ldrb	r3, [r7, #19]
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	371c      	adds	r7, #28
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd90      	pop	{r4, r7, pc}
 8008e5c:	46007800 	.word	0x46007800

08008e60 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(const RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b086      	sub	sp, #24
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	60f8      	str	r0, [r7, #12]
 8008e68:	60b9      	str	r1, [r7, #8]
 8008e6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = READ_REG(RTC->SSR);
 8008e6c:	4b34      	ldr	r3, [pc, #208]	@ (8008f40 <HAL_RTC_GetTime+0xe0>)
 8008e6e:	689a      	ldr	r2, [r3, #8]
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	605a      	str	r2, [r3, #4]


  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8008e74:	4b32      	ldr	r3, [pc, #200]	@ (8008f40 <HAL_RTC_GetTime+0xe0>)
 8008e76:	68db      	ldr	r3, [r3, #12]
 8008e78:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008e7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e80:	d04a      	beq.n	8008f18 <HAL_RTC_GetTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field */
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 8008e82:	4b2f      	ldr	r3, [pc, #188]	@ (8008f40 <HAL_RTC_GetTime+0xe0>)
 8008e84:	691b      	ldr	r3, [r3, #16]
 8008e86:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 8008e8e:	4b2c      	ldr	r3, [pc, #176]	@ (8008f40 <HAL_RTC_GetTime+0xe0>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8008e96:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8008e9a:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8008e9c:	697b      	ldr	r3, [r7, #20]
 8008e9e:	0c1b      	lsrs	r3, r3, #16
 8008ea0:	b2db      	uxtb	r3, r3
 8008ea2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008ea6:	b2da      	uxtb	r2, r3
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8008eac:	697b      	ldr	r3, [r7, #20]
 8008eae:	0a1b      	lsrs	r3, r3, #8
 8008eb0:	b2db      	uxtb	r3, r3
 8008eb2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008eb6:	b2da      	uxtb	r2, r3
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	b2db      	uxtb	r3, r3
 8008ec0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ec4:	b2da      	uxtb	r2, r3
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	0d9b      	lsrs	r3, r3, #22
 8008ece:	b2db      	uxtb	r3, r3
 8008ed0:	f003 0301 	and.w	r3, r3, #1
 8008ed4:	b2da      	uxtb	r2, r3
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d12a      	bne.n	8008f36 <HAL_RTC_GetTime+0xd6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	781b      	ldrb	r3, [r3, #0]
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f000 fbff 	bl	80096e8 <RTC_Bcd2ToByte>
 8008eea:	4603      	mov	r3, r0
 8008eec:	461a      	mov	r2, r3
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	785b      	ldrb	r3, [r3, #1]
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f000 fbf6 	bl	80096e8 <RTC_Bcd2ToByte>
 8008efc:	4603      	mov	r3, r0
 8008efe:	461a      	mov	r2, r3
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	789b      	ldrb	r3, [r3, #2]
 8008f08:	4618      	mov	r0, r3
 8008f0a:	f000 fbed 	bl	80096e8 <RTC_Bcd2ToByte>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	461a      	mov	r2, r3
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	709a      	strb	r2, [r3, #2]
 8008f16:	e00e      	b.n	8008f36 <HAL_RTC_GetTime+0xd6>
    }
  }
  else
  {
    /* Initialize structure fields */
    sTime->Hours = 0U;
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = 0U;
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	2200      	movs	r2, #0
 8008f22:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = 0U;
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	2200      	movs	r2, #0
 8008f28:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = 0U;
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	70da      	strb	r2, [r3, #3]
    sTime->SecondFraction = 0U;
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	2200      	movs	r2, #0
 8008f34:	609a      	str	r2, [r3, #8]
  }

  return HAL_OK;
 8008f36:	2300      	movs	r3, #0
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	3718      	adds	r7, #24
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}
 8008f40:	46007800 	.word	0x46007800

08008f44 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008f44:	b590      	push	{r4, r7, lr}
 8008f46:	b087      	sub	sp, #28
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	60f8      	str	r0, [r7, #12]
 8008f4c:	60b9      	str	r1, [r7, #8]
 8008f4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008f56:	2b01      	cmp	r3, #1
 8008f58:	d101      	bne.n	8008f5e <HAL_RTC_SetDate+0x1a>
 8008f5a:	2302      	movs	r3, #2
 8008f5c:	e071      	b.n	8009042 <HAL_RTC_SetDate+0xfe>
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	2201      	movs	r2, #1
 8008f62:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	2202      	movs	r2, #2
 8008f6a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d10e      	bne.n	8008f92 <HAL_RTC_SetDate+0x4e>
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	785b      	ldrb	r3, [r3, #1]
 8008f78:	f003 0310 	and.w	r3, r3, #16
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d008      	beq.n	8008f92 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	785b      	ldrb	r3, [r3, #1]
 8008f84:	f023 0310 	bic.w	r3, r3, #16
 8008f88:	b2db      	uxtb	r3, r3
 8008f8a:	330a      	adds	r3, #10
 8008f8c:	b2da      	uxtb	r2, r3
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d11c      	bne.n	8008fd2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	78db      	ldrb	r3, [r3, #3]
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f000 fb83 	bl	80096a8 <RTC_ByteToBcd2>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	785b      	ldrb	r3, [r3, #1]
 8008faa:	4618      	mov	r0, r3
 8008fac:	f000 fb7c 	bl	80096a8 <RTC_ByteToBcd2>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8008fb4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	789b      	ldrb	r3, [r3, #2]
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f000 fb74 	bl	80096a8 <RTC_ByteToBcd2>
 8008fc0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008fc2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	781b      	ldrb	r3, [r3, #0]
 8008fca:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8008fcc:	4313      	orrs	r3, r2
 8008fce:	617b      	str	r3, [r7, #20]
 8008fd0:	e00e      	b.n	8008ff0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	78db      	ldrb	r3, [r3, #3]
 8008fd6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	785b      	ldrb	r3, [r3, #1]
 8008fdc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8008fde:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8008fe0:	68ba      	ldr	r2, [r7, #8]
 8008fe2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8008fe4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	781b      	ldrb	r3, [r3, #0]
 8008fea:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8008fec:	4313      	orrs	r3, r2
 8008fee:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008ff0:	4b16      	ldr	r3, [pc, #88]	@ (800904c <HAL_RTC_SetDate+0x108>)
 8008ff2:	22ca      	movs	r2, #202	@ 0xca
 8008ff4:	625a      	str	r2, [r3, #36]	@ 0x24
 8008ff6:	4b15      	ldr	r3, [pc, #84]	@ (800904c <HAL_RTC_SetDate+0x108>)
 8008ff8:	2253      	movs	r2, #83	@ 0x53
 8008ffa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008ffc:	68f8      	ldr	r0, [r7, #12]
 8008ffe:	f000 fad9 	bl	80095b4 <RTC_EnterInitMode>
 8009002:	4603      	mov	r3, r0
 8009004:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8009006:	7cfb      	ldrb	r3, [r7, #19]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d10b      	bne.n	8009024 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800900c:	4a0f      	ldr	r2, [pc, #60]	@ (800904c <HAL_RTC_SetDate+0x108>)
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009014:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009018:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800901a:	68f8      	ldr	r0, [r7, #12]
 800901c:	f000 fb06 	bl	800962c <RTC_ExitInitMode>
 8009020:	4603      	mov	r3, r0
 8009022:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009024:	4b09      	ldr	r3, [pc, #36]	@ (800904c <HAL_RTC_SetDate+0x108>)
 8009026:	22ff      	movs	r2, #255	@ 0xff
 8009028:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800902a:	7cfb      	ldrb	r3, [r7, #19]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d103      	bne.n	8009038 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	2201      	movs	r2, #1
 8009034:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	2200      	movs	r2, #0
 800903c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 8009040:	7cfb      	ldrb	r3, [r7, #19]
}
 8009042:	4618      	mov	r0, r3
 8009044:	371c      	adds	r7, #28
 8009046:	46bd      	mov	sp, r7
 8009048:	bd90      	pop	{r4, r7, pc}
 800904a:	bf00      	nop
 800904c:	46007800 	.word	0x46007800

08009050 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(const RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b086      	sub	sp, #24
 8009054:	af00      	add	r7, sp, #0
 8009056:	60f8      	str	r0, [r7, #12]
 8009058:	60b9      	str	r1, [r7, #8]
 800905a:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 800905c:	4b22      	ldr	r3, [pc, #136]	@ (80090e8 <HAL_RTC_GetDate+0x98>)
 800905e:	685b      	ldr	r3, [r3, #4]
 8009060:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009064:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009068:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	0c1b      	lsrs	r3, r3, #16
 800906e:	b2da      	uxtb	r2, r3
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	0a1b      	lsrs	r3, r3, #8
 8009078:	b2db      	uxtb	r3, r3
 800907a:	f003 031f 	and.w	r3, r3, #31
 800907e:	b2da      	uxtb	r2, r3
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	b2db      	uxtb	r3, r3
 8009088:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800908c:	b2da      	uxtb	r2, r3
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8009092:	697b      	ldr	r3, [r7, #20]
 8009094:	0b5b      	lsrs	r3, r3, #13
 8009096:	b2db      	uxtb	r3, r3
 8009098:	f003 0307 	and.w	r3, r3, #7
 800909c:	b2da      	uxtb	r2, r3
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d11a      	bne.n	80090de <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	78db      	ldrb	r3, [r3, #3]
 80090ac:	4618      	mov	r0, r3
 80090ae:	f000 fb1b 	bl	80096e8 <RTC_Bcd2ToByte>
 80090b2:	4603      	mov	r3, r0
 80090b4:	461a      	mov	r2, r3
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	785b      	ldrb	r3, [r3, #1]
 80090be:	4618      	mov	r0, r3
 80090c0:	f000 fb12 	bl	80096e8 <RTC_Bcd2ToByte>
 80090c4:	4603      	mov	r3, r0
 80090c6:	461a      	mov	r2, r3
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	789b      	ldrb	r3, [r3, #2]
 80090d0:	4618      	mov	r0, r3
 80090d2:	f000 fb09 	bl	80096e8 <RTC_Bcd2ToByte>
 80090d6:	4603      	mov	r3, r0
 80090d8:	461a      	mov	r2, r3
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80090de:	2300      	movs	r3, #0
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3718      	adds	r7, #24
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}
 80090e8:	46007800 	.word	0x46007800

080090ec <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80090ec:	b590      	push	{r4, r7, lr}
 80090ee:	b087      	sub	sp, #28
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	60f8      	str	r0, [r7, #12]
 80090f4:	60b9      	str	r1, [r7, #8]
 80090f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80090f8:	2300      	movs	r3, #0
 80090fa:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8009102:	2b01      	cmp	r3, #1
 8009104:	d101      	bne.n	800910a <HAL_RTC_SetAlarm_IT+0x1e>
 8009106:	2302      	movs	r3, #2
 8009108:	e0ea      	b.n	80092e0 <HAL_RTC_SetAlarm_IT+0x1f4>
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	2201      	movs	r2, #1
 800910e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	2202      	movs	r2, #2
 8009116:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
                 (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif /* USE_FULL_ASSERT */

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 800911a:	4b73      	ldr	r3, [pc, #460]	@ (80092e8 <HAL_RTC_SetAlarm_IT+0x1fc>)
 800911c:	68db      	ldr	r3, [r3, #12]
 800911e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009122:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8009124:	693b      	ldr	r3, [r7, #16]
 8009126:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800912a:	d05c      	beq.n	80091e6 <HAL_RTC_SetAlarm_IT+0xfa>
  {
    if (Format == RTC_FORMAT_BIN)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d136      	bne.n	80091a0 <HAL_RTC_SetAlarm_IT+0xb4>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8009132:	4b6d      	ldr	r3, [pc, #436]	@ (80092e8 <HAL_RTC_SetAlarm_IT+0x1fc>)
 8009134:	699b      	ldr	r3, [r3, #24]
 8009136:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800913a:	2b00      	cmp	r3, #0
 800913c:	d102      	bne.n	8009144 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	2200      	movs	r2, #0
 8009142:	70da      	strb	r2, [r3, #3]
      }
      else
      {
        assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
      }
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	781b      	ldrb	r3, [r3, #0]
 8009148:	4618      	mov	r0, r3
 800914a:	f000 faad 	bl	80096a8 <RTC_ByteToBcd2>
 800914e:	4603      	mov	r3, r0
 8009150:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	785b      	ldrb	r3, [r3, #1]
 8009156:	4618      	mov	r0, r3
 8009158:	f000 faa6 	bl	80096a8 <RTC_ByteToBcd2>
 800915c:	4603      	mov	r3, r0
 800915e:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8009160:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	789b      	ldrb	r3, [r3, #2]
 8009166:	4618      	mov	r0, r3
 8009168:	f000 fa9e 	bl	80096a8 <RTC_ByteToBcd2>
 800916c:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800916e:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	78db      	ldrb	r3, [r3, #3]
 8009176:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8009178:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8009182:	4618      	mov	r0, r3
 8009184:	f000 fa90 	bl	80096a8 <RTC_ByteToBcd2>
 8009188:	4603      	mov	r3, r0
 800918a:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800918c:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8009194:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800919a:	4313      	orrs	r3, r2
 800919c:	617b      	str	r3, [r7, #20]
 800919e:	e022      	b.n	80091e6 <HAL_RTC_SetAlarm_IT+0xfa>
    }
    else /* Format BCD */
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80091a0:	4b51      	ldr	r3, [pc, #324]	@ (80092e8 <HAL_RTC_SetAlarm_IT+0x1fc>)
 80091a2:	699b      	ldr	r3, [r3, #24]
 80091a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d102      	bne.n	80091b2 <HAL_RTC_SetAlarm_IT+0xc6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	2200      	movs	r2, #0
 80091b0:	70da      	strb	r2, [r3, #3]
      {
        assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
      }

#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	781b      	ldrb	r3, [r3, #0]
 80091b6:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	785b      	ldrb	r3, [r3, #1]
 80091bc:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80091be:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80091c0:	68ba      	ldr	r2, [r7, #8]
 80091c2:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80091c4:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	78db      	ldrb	r3, [r3, #3]
 80091ca:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80091cc:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80091d4:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80091d6:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80091dc:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80091e2:	4313      	orrs	r3, r2
 80091e4:	617b      	str	r3, [r7, #20]
    }
  }


  /* Configure the Alarm registers */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80091ee:	d137      	bne.n	8009260 <HAL_RTC_SetAlarm_IT+0x174>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80091f0:	4b3d      	ldr	r3, [pc, #244]	@ (80092e8 <HAL_RTC_SetAlarm_IT+0x1fc>)
 80091f2:	699b      	ldr	r3, [r3, #24]
 80091f4:	4a3c      	ldr	r2, [pc, #240]	@ (80092e8 <HAL_RTC_SetAlarm_IT+0x1fc>)
 80091f6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80091fa:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80091fc:	4b3a      	ldr	r3, [pc, #232]	@ (80092e8 <HAL_RTC_SetAlarm_IT+0x1fc>)
 80091fe:	2201      	movs	r2, #1
 8009200:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8009202:	693b      	ldr	r3, [r7, #16]
 8009204:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009208:	d107      	bne.n	800921a <HAL_RTC_SetAlarm_IT+0x12e>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	699a      	ldr	r2, [r3, #24]
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	69db      	ldr	r3, [r3, #28]
 8009212:	4935      	ldr	r1, [pc, #212]	@ (80092e8 <HAL_RTC_SetAlarm_IT+0x1fc>)
 8009214:	4313      	orrs	r3, r2
 8009216:	644b      	str	r3, [r1, #68]	@ 0x44
 8009218:	e006      	b.n	8009228 <HAL_RTC_SetAlarm_IT+0x13c>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 800921a:	4a33      	ldr	r2, [pc, #204]	@ (80092e8 <HAL_RTC_SetAlarm_IT+0x1fc>)
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	6413      	str	r3, [r2, #64]	@ 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8009220:	4a31      	ldr	r2, [pc, #196]	@ (80092e8 <HAL_RTC_SetAlarm_IT+0x1fc>)
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	699b      	ldr	r3, [r3, #24]
 8009226:	6453      	str	r3, [r2, #68]	@ 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8009228:	4a2f      	ldr	r2, [pc, #188]	@ (80092e8 <HAL_RTC_SetAlarm_IT+0x1fc>)
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	685b      	ldr	r3, [r3, #4]
 800922e:	6713      	str	r3, [r2, #112]	@ 0x70

    if (sAlarm->FlagAutoClr == ALARM_FLAG_AUTOCLR_ENABLE)
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009234:	2b01      	cmp	r3, #1
 8009236:	d106      	bne.n	8009246 <HAL_RTC_SetAlarm_IT+0x15a>
    {
      /* Configure the  Alarm A output clear */
      SET_BIT(RTC->CR, RTC_CR_ALRAFCLR);
 8009238:	4b2b      	ldr	r3, [pc, #172]	@ (80092e8 <HAL_RTC_SetAlarm_IT+0x1fc>)
 800923a:	699b      	ldr	r3, [r3, #24]
 800923c:	4a2a      	ldr	r2, [pc, #168]	@ (80092e8 <HAL_RTC_SetAlarm_IT+0x1fc>)
 800923e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009242:	6193      	str	r3, [r2, #24]
 8009244:	e005      	b.n	8009252 <HAL_RTC_SetAlarm_IT+0x166>
    }
    else
    {
      /* Disable the  Alarm A output clear*/
      CLEAR_BIT(RTC->CR, RTC_CR_ALRAFCLR);
 8009246:	4b28      	ldr	r3, [pc, #160]	@ (80092e8 <HAL_RTC_SetAlarm_IT+0x1fc>)
 8009248:	699b      	ldr	r3, [r3, #24]
 800924a:	4a27      	ldr	r2, [pc, #156]	@ (80092e8 <HAL_RTC_SetAlarm_IT+0x1fc>)
 800924c:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8009250:	6193      	str	r3, [r2, #24]
    }

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8009252:	4b25      	ldr	r3, [pc, #148]	@ (80092e8 <HAL_RTC_SetAlarm_IT+0x1fc>)
 8009254:	699b      	ldr	r3, [r3, #24]
 8009256:	4a24      	ldr	r2, [pc, #144]	@ (80092e8 <HAL_RTC_SetAlarm_IT+0x1fc>)
 8009258:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 800925c:	6193      	str	r3, [r2, #24]
 800925e:	e036      	b.n	80092ce <HAL_RTC_SetAlarm_IT+0x1e2>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8009260:	4b21      	ldr	r3, [pc, #132]	@ (80092e8 <HAL_RTC_SetAlarm_IT+0x1fc>)
 8009262:	699b      	ldr	r3, [r3, #24]
 8009264:	4a20      	ldr	r2, [pc, #128]	@ (80092e8 <HAL_RTC_SetAlarm_IT+0x1fc>)
 8009266:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 800926a:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800926c:	4b1e      	ldr	r3, [pc, #120]	@ (80092e8 <HAL_RTC_SetAlarm_IT+0x1fc>)
 800926e:	2202      	movs	r2, #2
 8009270:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009278:	d107      	bne.n	800928a <HAL_RTC_SetAlarm_IT+0x19e>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	699a      	ldr	r2, [r3, #24]
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	69db      	ldr	r3, [r3, #28]
 8009282:	4919      	ldr	r1, [pc, #100]	@ (80092e8 <HAL_RTC_SetAlarm_IT+0x1fc>)
 8009284:	4313      	orrs	r3, r2
 8009286:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8009288:	e006      	b.n	8009298 <HAL_RTC_SetAlarm_IT+0x1ac>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 800928a:	4a17      	ldr	r2, [pc, #92]	@ (80092e8 <HAL_RTC_SetAlarm_IT+0x1fc>)
 800928c:	697b      	ldr	r3, [r7, #20]
 800928e:	6493      	str	r3, [r2, #72]	@ 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8009290:	4a15      	ldr	r2, [pc, #84]	@ (80092e8 <HAL_RTC_SetAlarm_IT+0x1fc>)
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	699b      	ldr	r3, [r3, #24]
 8009296:	64d3      	str	r3, [r2, #76]	@ 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8009298:	4a13      	ldr	r2, [pc, #76]	@ (80092e8 <HAL_RTC_SetAlarm_IT+0x1fc>)
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	685b      	ldr	r3, [r3, #4]
 800929e:	6753      	str	r3, [r2, #116]	@ 0x74

    if (sAlarm->FlagAutoClr == ALARM_FLAG_AUTOCLR_ENABLE)
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092a4:	2b01      	cmp	r3, #1
 80092a6:	d106      	bne.n	80092b6 <HAL_RTC_SetAlarm_IT+0x1ca>
    {
      /* Configure the  Alarm B Output clear */
      SET_BIT(RTC->CR, RTC_CR_ALRBFCLR);
 80092a8:	4b0f      	ldr	r3, [pc, #60]	@ (80092e8 <HAL_RTC_SetAlarm_IT+0x1fc>)
 80092aa:	699b      	ldr	r3, [r3, #24]
 80092ac:	4a0e      	ldr	r2, [pc, #56]	@ (80092e8 <HAL_RTC_SetAlarm_IT+0x1fc>)
 80092ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80092b2:	6193      	str	r3, [r2, #24]
 80092b4:	e005      	b.n	80092c2 <HAL_RTC_SetAlarm_IT+0x1d6>
    }
    else
    {
      /* Disable the  Alarm B Output clear */
      CLEAR_BIT(RTC->CR, RTC_CR_ALRBFCLR);
 80092b6:	4b0c      	ldr	r3, [pc, #48]	@ (80092e8 <HAL_RTC_SetAlarm_IT+0x1fc>)
 80092b8:	699b      	ldr	r3, [r3, #24]
 80092ba:	4a0b      	ldr	r2, [pc, #44]	@ (80092e8 <HAL_RTC_SetAlarm_IT+0x1fc>)
 80092bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80092c0:	6193      	str	r3, [r2, #24]
    }

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80092c2:	4b09      	ldr	r3, [pc, #36]	@ (80092e8 <HAL_RTC_SetAlarm_IT+0x1fc>)
 80092c4:	699b      	ldr	r3, [r3, #24]
 80092c6:	4a08      	ldr	r2, [pc, #32]	@ (80092e8 <HAL_RTC_SetAlarm_IT+0x1fc>)
 80092c8:	f443 5308 	orr.w	r3, r3, #8704	@ 0x2200
 80092cc:	6193      	str	r3, [r2, #24]
  }


  hrtc->State = HAL_RTC_STATE_READY;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	2201      	movs	r2, #1
 80092d2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	2200      	movs	r2, #0
 80092da:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80092de:	2300      	movs	r3, #0
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	371c      	adds	r7, #28
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd90      	pop	{r4, r7, pc}
 80092e8:	46007800 	.word	0x46007800

080092ec <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80092ec:	b480      	push	{r7}
 80092ee:	b083      	sub	sp, #12
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
 80092f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80092fc:	2b01      	cmp	r3, #1
 80092fe:	d101      	bne.n	8009304 <HAL_RTC_DeactivateAlarm+0x18>
 8009300:	2302      	movs	r3, #2
 8009302:	e02d      	b.n	8009360 <HAL_RTC_DeactivateAlarm+0x74>
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2201      	movs	r2, #1
 8009308:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2202      	movs	r2, #2
 8009310:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d


  /* In case of interrupt mode is used, the interrupt source must disabled */
  if (Alarm == RTC_ALARM_A)
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800931a:	d10c      	bne.n	8009336 <HAL_RTC_DeactivateAlarm+0x4a>
  {
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800931c:	4b13      	ldr	r3, [pc, #76]	@ (800936c <HAL_RTC_DeactivateAlarm+0x80>)
 800931e:	699b      	ldr	r3, [r3, #24]
 8009320:	4a12      	ldr	r2, [pc, #72]	@ (800936c <HAL_RTC_DeactivateAlarm+0x80>)
 8009322:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8009326:	6193      	str	r3, [r2, #24]
    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8009328:	4b10      	ldr	r3, [pc, #64]	@ (800936c <HAL_RTC_DeactivateAlarm+0x80>)
 800932a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800932c:	4a0f      	ldr	r2, [pc, #60]	@ (800936c <HAL_RTC_DeactivateAlarm+0x80>)
 800932e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009332:	6453      	str	r3, [r2, #68]	@ 0x44
 8009334:	e00b      	b.n	800934e <HAL_RTC_DeactivateAlarm+0x62>
  }
  else
  {
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8009336:	4b0d      	ldr	r3, [pc, #52]	@ (800936c <HAL_RTC_DeactivateAlarm+0x80>)
 8009338:	699b      	ldr	r3, [r3, #24]
 800933a:	4a0c      	ldr	r2, [pc, #48]	@ (800936c <HAL_RTC_DeactivateAlarm+0x80>)
 800933c:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 8009340:	6193      	str	r3, [r2, #24]
    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8009342:	4b0a      	ldr	r3, [pc, #40]	@ (800936c <HAL_RTC_DeactivateAlarm+0x80>)
 8009344:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009346:	4a09      	ldr	r2, [pc, #36]	@ (800936c <HAL_RTC_DeactivateAlarm+0x80>)
 8009348:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800934c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }


  hrtc->State = HAL_RTC_STATE_READY;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2201      	movs	r2, #1
 8009352:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2200      	movs	r2, #0
 800935a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800935e:	2300      	movs	r3, #0
}
 8009360:	4618      	mov	r0, r3
 8009362:	370c      	adds	r7, #12
 8009364:	46bd      	mov	sp, r7
 8009366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936a:	4770      	bx	lr
 800936c:	46007800 	.word	0x46007800

08009370 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(const RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm,
                                   uint32_t Format)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b086      	sub	sp, #24
 8009374:	af00      	add	r7, sp, #0
 8009376:	60f8      	str	r0, [r7, #12]
 8009378:	60b9      	str	r1, [r7, #8]
 800937a:	607a      	str	r2, [r7, #4]
 800937c:	603b      	str	r3, [r7, #0]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if (Alarm == RTC_ALARM_A)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009384:	d141      	bne.n	800940a <HAL_RTC_GetAlarm+0x9a>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800938c:	62da      	str	r2, [r3, #44]	@ 0x2c

    tmpreg = READ_REG(RTC->ALRMAR);
 800938e:	4b56      	ldr	r3, [pc, #344]	@ (80094e8 <HAL_RTC_GetAlarm+0x178>)
 8009390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009392:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)(READ_REG(RTC->ALRMASSR) & RTC_ALRMASSR_SS);
 8009394:	4b54      	ldr	r3, [pc, #336]	@ (80094e8 <HAL_RTC_GetAlarm+0x178>)
 8009396:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009398:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800939c:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	0c1b      	lsrs	r3, r3, #16
 80093a2:	b2db      	uxtb	r3, r3
 80093a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80093a8:	b2da      	uxtb	r2, r3
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	0a1b      	lsrs	r3, r3, #8
 80093b2:	b2db      	uxtb	r3, r3
 80093b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80093b8:	b2da      	uxtb	r2, r3
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	b2db      	uxtb	r3, r3
 80093c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80093c6:	b2da      	uxtb	r2, r3
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 80093cc:	697b      	ldr	r3, [r7, #20]
 80093ce:	0d9b      	lsrs	r3, r3, #22
 80093d0:	b2db      	uxtb	r3, r3
 80093d2:	f003 0301 	and.w	r3, r3, #1
 80093d6:	b2da      	uxtb	r2, r3
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	693a      	ldr	r2, [r7, #16]
 80093e0:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 80093e2:	697b      	ldr	r3, [r7, #20]
 80093e4:	0e1b      	lsrs	r3, r3, #24
 80093e6:	b2db      	uxtb	r3, r3
 80093e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80093ec:	b2da      	uxtb	r2, r3
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	621a      	str	r2, [r3, #32]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	f003 3280 	and.w	r2, r3, #2155905152	@ 0x80808080
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	615a      	str	r2, [r3, #20]
 8009408:	e040      	b.n	800948c <HAL_RTC_GetAlarm+0x11c>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009410:	62da      	str	r2, [r3, #44]	@ 0x2c

    tmpreg = READ_REG(RTC->ALRMBR);
 8009412:	4b35      	ldr	r3, [pc, #212]	@ (80094e8 <HAL_RTC_GetAlarm+0x178>)
 8009414:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009416:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)(READ_REG(RTC->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8009418:	4b33      	ldr	r3, [pc, #204]	@ (80094e8 <HAL_RTC_GetAlarm+0x178>)
 800941a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800941c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8009420:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 8009422:	697b      	ldr	r3, [r7, #20]
 8009424:	0c1b      	lsrs	r3, r3, #16
 8009426:	b2db      	uxtb	r3, r3
 8009428:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800942c:	b2da      	uxtb	r2, r3
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	0a1b      	lsrs	r3, r3, #8
 8009436:	b2db      	uxtb	r3, r3
 8009438:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800943c:	b2da      	uxtb	r2, r3
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	b2db      	uxtb	r3, r3
 8009446:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800944a:	b2da      	uxtb	r2, r3
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	0d9b      	lsrs	r3, r3, #22
 8009454:	b2db      	uxtb	r3, r3
 8009456:	f003 0301 	and.w	r3, r3, #1
 800945a:	b2da      	uxtb	r2, r3
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	693a      	ldr	r2, [r7, #16]
 8009464:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	0e1b      	lsrs	r3, r3, #24
 800946a:	b2db      	uxtb	r3, r3
 800946c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009470:	b2da      	uxtb	r2, r3
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 8009478:	697b      	ldr	r3, [r7, #20]
 800947a:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	621a      	str	r2, [r3, #32]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	f003 3280 	and.w	r2, r3, #2155905152	@ 0x80808080
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	615a      	str	r2, [r3, #20]
  }

  if (Format == RTC_FORMAT_BIN)
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d125      	bne.n	80094de <HAL_RTC_GetAlarm+0x16e>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	781b      	ldrb	r3, [r3, #0]
 8009496:	4618      	mov	r0, r3
 8009498:	f000 f926 	bl	80096e8 <RTC_Bcd2ToByte>
 800949c:	4603      	mov	r3, r0
 800949e:	461a      	mov	r2, r3
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	785b      	ldrb	r3, [r3, #1]
 80094a8:	4618      	mov	r0, r3
 80094aa:	f000 f91d 	bl	80096e8 <RTC_Bcd2ToByte>
 80094ae:	4603      	mov	r3, r0
 80094b0:	461a      	mov	r2, r3
 80094b2:	68bb      	ldr	r3, [r7, #8]
 80094b4:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	789b      	ldrb	r3, [r3, #2]
 80094ba:	4618      	mov	r0, r3
 80094bc:	f000 f914 	bl	80096e8 <RTC_Bcd2ToByte>
 80094c0:	4603      	mov	r3, r0
 80094c2:	461a      	mov	r2, r3
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80094ce:	4618      	mov	r0, r3
 80094d0:	f000 f90a 	bl	80096e8 <RTC_Bcd2ToByte>
 80094d4:	4603      	mov	r3, r0
 80094d6:	461a      	mov	r2, r3
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 80094de:	2300      	movs	r3, #0
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	3718      	adds	r7, #24
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}
 80094e8:	46007800 	.word	0x46007800

080094ec <HAL_RTC_AlarmIRQHandler>:
  * @note   Alarm non-secure is available in non-secure driver.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b084      	sub	sp, #16
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
  /* Get interrupt status */
  uint32_t tmp = READ_REG(RTC->MISR);
 80094f4:	4b10      	ldr	r3, [pc, #64]	@ (8009538 <HAL_RTC_AlarmIRQHandler+0x4c>)
 80094f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094f8:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	f003 0301 	and.w	r3, r3, #1
 8009500:	2b00      	cmp	r3, #0
 8009502:	d005      	beq.n	8009510 <HAL_RTC_AlarmIRQHandler+0x24>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8009504:	4b0c      	ldr	r3, [pc, #48]	@ (8009538 <HAL_RTC_AlarmIRQHandler+0x4c>)
 8009506:	2201      	movs	r2, #1
 8009508:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f000 f816 	bl	800953c <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	f003 0302 	and.w	r3, r3, #2
 8009516:	2b00      	cmp	r3, #0
 8009518:	d005      	beq.n	8009526 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800951a:	4b07      	ldr	r3, [pc, #28]	@ (8009538 <HAL_RTC_AlarmIRQHandler+0x4c>)
 800951c:	2202      	movs	r2, #2
 800951e:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f000 f92b 	bl	800977c <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2201      	movs	r2, #1
 800952a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 800952e:	bf00      	nop
 8009530:	3710      	adds	r7, #16
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}
 8009536:	bf00      	nop
 8009538:	46007800 	.word	0x46007800

0800953c <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A secure secure callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800953c:	b480      	push	{r7}
 800953e:	b083      	sub	sp, #12
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the secure secure callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8009544:	bf00      	nop
 8009546:	370c      	adds	r7, #12
 8009548:	46bd      	mov	sp, r7
 800954a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954e:	4770      	bx	lr

08009550 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b084      	sub	sp, #16
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8009558:	4b15      	ldr	r3, [pc, #84]	@ (80095b0 <HAL_RTC_WaitForSynchro+0x60>)
 800955a:	68db      	ldr	r3, [r3, #12]
 800955c:	4a14      	ldr	r2, [pc, #80]	@ (80095b0 <HAL_RTC_WaitForSynchro+0x60>)
 800955e:	f023 0320 	bic.w	r3, r3, #32
 8009562:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8009564:	f7fa ff62 	bl	800442c <HAL_GetTick>
 8009568:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800956a:	e013      	b.n	8009594 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800956c:	f7fa ff5e 	bl	800442c <HAL_GetTick>
 8009570:	4602      	mov	r2, r0
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	1ad3      	subs	r3, r2, r3
 8009576:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800957a:	d90b      	bls.n	8009594 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800957c:	4b0c      	ldr	r3, [pc, #48]	@ (80095b0 <HAL_RTC_WaitForSynchro+0x60>)
 800957e:	68db      	ldr	r3, [r3, #12]
 8009580:	f003 0320 	and.w	r3, r3, #32
 8009584:	2b00      	cmp	r3, #0
 8009586:	d10c      	bne.n	80095a2 <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2203      	movs	r2, #3
 800958c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 8009590:	2303      	movs	r3, #3
 8009592:	e008      	b.n	80095a6 <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8009594:	4b06      	ldr	r3, [pc, #24]	@ (80095b0 <HAL_RTC_WaitForSynchro+0x60>)
 8009596:	68db      	ldr	r3, [r3, #12]
 8009598:	f003 0320 	and.w	r3, r3, #32
 800959c:	2b00      	cmp	r3, #0
 800959e:	d0e5      	beq.n	800956c <HAL_RTC_WaitForSynchro+0x1c>
 80095a0:	e000      	b.n	80095a4 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 80095a2:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 80095a4:	2300      	movs	r3, #0
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3710      	adds	r7, #16
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}
 80095ae:	bf00      	nop
 80095b0:	46007800 	.word	0x46007800

080095b4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b084      	sub	sp, #16
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80095bc:	2300      	movs	r3, #0
 80095be:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80095c0:	4b19      	ldr	r3, [pc, #100]	@ (8009628 <RTC_EnterInitMode+0x74>)
 80095c2:	68db      	ldr	r3, [r3, #12]
 80095c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d128      	bne.n	800961e <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80095cc:	4b16      	ldr	r3, [pc, #88]	@ (8009628 <RTC_EnterInitMode+0x74>)
 80095ce:	68db      	ldr	r3, [r3, #12]
 80095d0:	4a15      	ldr	r2, [pc, #84]	@ (8009628 <RTC_EnterInitMode+0x74>)
 80095d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095d6:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80095d8:	f7fa ff28 	bl	800442c <HAL_GetTick>
 80095dc:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80095de:	e013      	b.n	8009608 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80095e0:	f7fa ff24 	bl	800442c <HAL_GetTick>
 80095e4:	4602      	mov	r2, r0
 80095e6:	68bb      	ldr	r3, [r7, #8]
 80095e8:	1ad3      	subs	r3, r2, r3
 80095ea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80095ee:	d90b      	bls.n	8009608 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80095f0:	4b0d      	ldr	r3, [pc, #52]	@ (8009628 <RTC_EnterInitMode+0x74>)
 80095f2:	68db      	ldr	r3, [r3, #12]
 80095f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d10f      	bne.n	800961c <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 80095fc:	2303      	movs	r3, #3
 80095fe:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2203      	movs	r2, #3
 8009604:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009608:	4b07      	ldr	r3, [pc, #28]	@ (8009628 <RTC_EnterInitMode+0x74>)
 800960a:	68db      	ldr	r3, [r3, #12]
 800960c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009610:	2b00      	cmp	r3, #0
 8009612:	d104      	bne.n	800961e <RTC_EnterInitMode+0x6a>
 8009614:	7bfb      	ldrb	r3, [r7, #15]
 8009616:	2b03      	cmp	r3, #3
 8009618:	d1e2      	bne.n	80095e0 <RTC_EnterInitMode+0x2c>
 800961a:	e000      	b.n	800961e <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800961c:	bf00      	nop
        }
      }
    }
  }

  return status;
 800961e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009620:	4618      	mov	r0, r3
 8009622:	3710      	adds	r7, #16
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}
 8009628:	46007800 	.word	0x46007800

0800962c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b084      	sub	sp, #16
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009634:	2300      	movs	r3, #0
 8009636:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8009638:	4b1a      	ldr	r3, [pc, #104]	@ (80096a4 <RTC_ExitInitMode+0x78>)
 800963a:	68db      	ldr	r3, [r3, #12]
 800963c:	4a19      	ldr	r2, [pc, #100]	@ (80096a4 <RTC_ExitInitMode+0x78>)
 800963e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009642:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8009644:	4b17      	ldr	r3, [pc, #92]	@ (80096a4 <RTC_ExitInitMode+0x78>)
 8009646:	699b      	ldr	r3, [r3, #24]
 8009648:	f003 0320 	and.w	r3, r3, #32
 800964c:	2b00      	cmp	r3, #0
 800964e:	d10c      	bne.n	800966a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f7ff ff7d 	bl	8009550 <HAL_RTC_WaitForSynchro>
 8009656:	4603      	mov	r3, r0
 8009658:	2b00      	cmp	r3, #0
 800965a:	d01e      	beq.n	800969a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2203      	movs	r2, #3
 8009660:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8009664:	2303      	movs	r3, #3
 8009666:	73fb      	strb	r3, [r7, #15]
 8009668:	e017      	b.n	800969a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800966a:	4b0e      	ldr	r3, [pc, #56]	@ (80096a4 <RTC_ExitInitMode+0x78>)
 800966c:	699b      	ldr	r3, [r3, #24]
 800966e:	4a0d      	ldr	r2, [pc, #52]	@ (80096a4 <RTC_ExitInitMode+0x78>)
 8009670:	f023 0320 	bic.w	r3, r3, #32
 8009674:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f7ff ff6a 	bl	8009550 <HAL_RTC_WaitForSynchro>
 800967c:	4603      	mov	r3, r0
 800967e:	2b00      	cmp	r3, #0
 8009680:	d005      	beq.n	800968e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2203      	movs	r2, #3
 8009686:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800968a:	2303      	movs	r3, #3
 800968c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800968e:	4b05      	ldr	r3, [pc, #20]	@ (80096a4 <RTC_ExitInitMode+0x78>)
 8009690:	699b      	ldr	r3, [r3, #24]
 8009692:	4a04      	ldr	r2, [pc, #16]	@ (80096a4 <RTC_ExitInitMode+0x78>)
 8009694:	f043 0320 	orr.w	r3, r3, #32
 8009698:	6193      	str	r3, [r2, #24]
  }
  return status;
 800969a:	7bfb      	ldrb	r3, [r7, #15]
}
 800969c:	4618      	mov	r0, r3
 800969e:	3710      	adds	r7, #16
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}
 80096a4:	46007800 	.word	0x46007800

080096a8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80096a8:	b480      	push	{r7}
 80096aa:	b085      	sub	sp, #20
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	4603      	mov	r3, r0
 80096b0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80096b2:	2300      	movs	r3, #0
 80096b4:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 80096b6:	79fb      	ldrb	r3, [r7, #7]
 80096b8:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 80096ba:	e005      	b.n	80096c8 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	3301      	adds	r3, #1
 80096c0:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 80096c2:	7afb      	ldrb	r3, [r7, #11]
 80096c4:	3b0a      	subs	r3, #10
 80096c6:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 80096c8:	7afb      	ldrb	r3, [r7, #11]
 80096ca:	2b09      	cmp	r3, #9
 80096cc:	d8f6      	bhi.n	80096bc <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	b2db      	uxtb	r3, r3
 80096d2:	011b      	lsls	r3, r3, #4
 80096d4:	b2da      	uxtb	r2, r3
 80096d6:	7afb      	ldrb	r3, [r7, #11]
 80096d8:	4313      	orrs	r3, r2
 80096da:	b2db      	uxtb	r3, r3
}
 80096dc:	4618      	mov	r0, r3
 80096de:	3714      	adds	r7, #20
 80096e0:	46bd      	mov	sp, r7
 80096e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e6:	4770      	bx	lr

080096e8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80096e8:	b480      	push	{r7}
 80096ea:	b085      	sub	sp, #20
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	4603      	mov	r3, r0
 80096f0:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 80096f2:	79fb      	ldrb	r3, [r7, #7]
 80096f4:	091b      	lsrs	r3, r3, #4
 80096f6:	b2db      	uxtb	r3, r3
 80096f8:	461a      	mov	r2, r3
 80096fa:	4613      	mov	r3, r2
 80096fc:	009b      	lsls	r3, r3, #2
 80096fe:	4413      	add	r3, r2
 8009700:	005b      	lsls	r3, r3, #1
 8009702:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	b2da      	uxtb	r2, r3
 8009708:	79fb      	ldrb	r3, [r7, #7]
 800970a:	f003 030f 	and.w	r3, r3, #15
 800970e:	b2db      	uxtb	r3, r3
 8009710:	4413      	add	r3, r2
 8009712:	b2db      	uxtb	r3, r3
}
 8009714:	4618      	mov	r0, r3
 8009716:	3714      	adds	r7, #20
 8009718:	46bd      	mov	sp, r7
 800971a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971e:	4770      	bx	lr

08009720 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8009720:	b480      	push	{r7}
 8009722:	b083      	sub	sp, #12
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800972e:	2b01      	cmp	r3, #1
 8009730:	d101      	bne.n	8009736 <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 8009732:	2302      	movs	r3, #2
 8009734:	e019      	b.n	800976a <HAL_RTCEx_DeactivateWakeUpTimer+0x4a>
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2201      	movs	r2, #1
 800973a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2202      	movs	r2, #2
 8009742:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d


  /* Disable the Wakeup Timer */
  /* In case of interrupt mode is used, the interrupt source must disabled */
  CLEAR_BIT(RTC->CR, (RTC_CR_WUTE | RTC_CR_WUTIE));
 8009746:	4b0c      	ldr	r3, [pc, #48]	@ (8009778 <HAL_RTCEx_DeactivateWakeUpTimer+0x58>)
 8009748:	699b      	ldr	r3, [r3, #24]
 800974a:	4a0b      	ldr	r2, [pc, #44]	@ (8009778 <HAL_RTCEx_DeactivateWakeUpTimer+0x58>)
 800974c:	f423 4388 	bic.w	r3, r3, #17408	@ 0x4400
 8009750:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009752:	4b09      	ldr	r3, [pc, #36]	@ (8009778 <HAL_RTCEx_DeactivateWakeUpTimer+0x58>)
 8009754:	22ff      	movs	r2, #255	@ 0xff
 8009756:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2201      	movs	r2, #1
 800975c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2200      	movs	r2, #0
 8009764:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8009768:	2300      	movs	r3, #0
}
 800976a:	4618      	mov	r0, r3
 800976c:	370c      	adds	r7, #12
 800976e:	46bd      	mov	sp, r7
 8009770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009774:	4770      	bx	lr
 8009776:	bf00      	nop
 8009778:	46007800 	.word	0x46007800

0800977c <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800977c:	b480      	push	{r7}
 800977e:	b083      	sub	sp, #12
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8009784:	bf00      	nop
 8009786:	370c      	adds	r7, #12
 8009788:	46bd      	mov	sp, r7
 800978a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978e:	4770      	bx	lr

08009790 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 8009790:	b480      	push	{r7}
 8009792:	b083      	sub	sp, #12
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
 8009798:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	681a      	ldr	r2, [r3, #0]
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	685b      	ldr	r3, [r3, #4]
 80097a2:	4910      	ldr	r1, [pc, #64]	@ (80097e4 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80097a4:	4313      	orrs	r3, r2
 80097a6:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	689a      	ldr	r2, [r3, #8]
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	68db      	ldr	r3, [r3, #12]
 80097b0:	431a      	orrs	r2, r3
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	699b      	ldr	r3, [r3, #24]
 80097b6:	490c      	ldr	r1, [pc, #48]	@ (80097e8 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 80097b8:	4313      	orrs	r3, r2
 80097ba:	624b      	str	r3, [r1, #36]	@ 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 80097bc:	4b0a      	ldr	r3, [pc, #40]	@ (80097e8 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 80097be:	6a1b      	ldr	r3, [r3, #32]
 80097c0:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	6919      	ldr	r1, [r3, #16]
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	695b      	ldr	r3, [r3, #20]
 80097cc:	041b      	lsls	r3, r3, #16
 80097ce:	430b      	orrs	r3, r1
 80097d0:	4905      	ldr	r1, [pc, #20]	@ (80097e8 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 80097d2:	4313      	orrs	r3, r2
 80097d4:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 80097d6:	2300      	movs	r3, #0
}
 80097d8:	4618      	mov	r0, r3
 80097da:	370c      	adds	r7, #12
 80097dc:	46bd      	mov	sp, r7
 80097de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e2:	4770      	bx	lr
 80097e4:	46007800 	.word	0x46007800
 80097e8:	46007c00 	.word	0x46007c00

080097ec <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b084      	sub	sp, #16
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d101      	bne.n	80097fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80097fa:	2301      	movs	r3, #1
 80097fc:	e0fb      	b.n	80099f6 <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	4a7f      	ldr	r2, [pc, #508]	@ (8009a00 <HAL_SPI_Init+0x214>)
 8009804:	4293      	cmp	r3, r2
 8009806:	d004      	beq.n	8009812 <HAL_SPI_Init+0x26>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	4a7d      	ldr	r2, [pc, #500]	@ (8009a04 <HAL_SPI_Init+0x218>)
 800980e:	4293      	cmp	r3, r2
 8009810:	e000      	b.n	8009814 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8009812:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2200      	movs	r2, #0
 8009818:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	4a78      	ldr	r2, [pc, #480]	@ (8009a00 <HAL_SPI_Init+0x214>)
 8009820:	4293      	cmp	r3, r2
 8009822:	d004      	beq.n	800982e <HAL_SPI_Init+0x42>
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4a76      	ldr	r2, [pc, #472]	@ (8009a04 <HAL_SPI_Init+0x218>)
 800982a:	4293      	cmp	r3, r2
 800982c:	d105      	bne.n	800983a <HAL_SPI_Init+0x4e>
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	68db      	ldr	r3, [r3, #12]
 8009832:	2b0f      	cmp	r3, #15
 8009834:	d901      	bls.n	800983a <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8009836:	2301      	movs	r3, #1
 8009838:	e0dd      	b.n	80099f6 <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f000 fe76 	bl	800a52c <SPI_GetPacketSize>
 8009840:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	4a6e      	ldr	r2, [pc, #440]	@ (8009a00 <HAL_SPI_Init+0x214>)
 8009848:	4293      	cmp	r3, r2
 800984a:	d004      	beq.n	8009856 <HAL_SPI_Init+0x6a>
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	4a6c      	ldr	r2, [pc, #432]	@ (8009a04 <HAL_SPI_Init+0x218>)
 8009852:	4293      	cmp	r3, r2
 8009854:	d102      	bne.n	800985c <HAL_SPI_Init+0x70>
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	2b08      	cmp	r3, #8
 800985a:	d816      	bhi.n	800988a <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009860:	4a69      	ldr	r2, [pc, #420]	@ (8009a08 <HAL_SPI_Init+0x21c>)
 8009862:	4293      	cmp	r3, r2
 8009864:	d00e      	beq.n	8009884 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	4a68      	ldr	r2, [pc, #416]	@ (8009a0c <HAL_SPI_Init+0x220>)
 800986c:	4293      	cmp	r3, r2
 800986e:	d009      	beq.n	8009884 <HAL_SPI_Init+0x98>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	4a66      	ldr	r2, [pc, #408]	@ (8009a10 <HAL_SPI_Init+0x224>)
 8009876:	4293      	cmp	r3, r2
 8009878:	d004      	beq.n	8009884 <HAL_SPI_Init+0x98>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	4a65      	ldr	r2, [pc, #404]	@ (8009a14 <HAL_SPI_Init+0x228>)
 8009880:	4293      	cmp	r3, r2
 8009882:	d104      	bne.n	800988e <HAL_SPI_Init+0xa2>
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	2b10      	cmp	r3, #16
 8009888:	d901      	bls.n	800988e <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 800988a:	2301      	movs	r3, #1
 800988c:	e0b3      	b.n	80099f6 <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8009894:	b2db      	uxtb	r3, r3
 8009896:	2b00      	cmp	r3, #0
 8009898:	d106      	bne.n	80098a8 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2200      	movs	r2, #0
 800989e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f7fa fad6 	bl	8003e54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2202      	movs	r2, #2
 80098ac:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	681a      	ldr	r2, [r3, #0]
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f022 0201 	bic.w	r2, r2, #1
 80098be:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	689b      	ldr	r3, [r3, #8]
 80098c6:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80098ca:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	699b      	ldr	r3, [r3, #24]
 80098d0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80098d4:	d119      	bne.n	800990a <HAL_SPI_Init+0x11e>
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	685b      	ldr	r3, [r3, #4]
 80098da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80098de:	d103      	bne.n	80098e8 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d008      	beq.n	80098fa <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d10c      	bne.n	800990a <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80098f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80098f8:	d107      	bne.n	800990a <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	681a      	ldr	r2, [r3, #0]
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009908:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	685b      	ldr	r3, [r3, #4]
 800990e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009912:	2b00      	cmp	r3, #0
 8009914:	d00f      	beq.n	8009936 <HAL_SPI_Init+0x14a>
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	68db      	ldr	r3, [r3, #12]
 800991a:	2b06      	cmp	r3, #6
 800991c:	d90b      	bls.n	8009936 <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	430a      	orrs	r2, r1
 8009932:	601a      	str	r2, [r3, #0]
 8009934:	e007      	b.n	8009946 <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	681a      	ldr	r2, [r3, #0]
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009944:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	69da      	ldr	r2, [r3, #28]
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800994e:	431a      	orrs	r2, r3
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	431a      	orrs	r2, r3
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009958:	ea42 0103 	orr.w	r1, r2, r3
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	68da      	ldr	r2, [r3, #12]
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	430a      	orrs	r2, r1
 8009966:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009970:	431a      	orrs	r2, r3
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009976:	431a      	orrs	r2, r3
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	699b      	ldr	r3, [r3, #24]
 800997c:	431a      	orrs	r2, r3
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	691b      	ldr	r3, [r3, #16]
 8009982:	431a      	orrs	r2, r3
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	695b      	ldr	r3, [r3, #20]
 8009988:	431a      	orrs	r2, r3
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6a1b      	ldr	r3, [r3, #32]
 800998e:	431a      	orrs	r2, r3
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	685b      	ldr	r3, [r3, #4]
 8009994:	431a      	orrs	r2, r3
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800999a:	431a      	orrs	r2, r3
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	689b      	ldr	r3, [r3, #8]
 80099a0:	431a      	orrs	r2, r3
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80099a6:	431a      	orrs	r2, r3
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099ac:	431a      	orrs	r2, r3
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80099b2:	ea42 0103 	orr.w	r1, r2, r3
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	430a      	orrs	r2, r1
 80099c0:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	685b      	ldr	r3, [r3, #4]
 80099c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d00a      	beq.n	80099e4 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	68db      	ldr	r3, [r3, #12]
 80099d4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	430a      	orrs	r2, r1
 80099e2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2200      	movs	r2, #0
 80099e8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2201      	movs	r2, #1
 80099f0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 80099f4:	2300      	movs	r3, #0
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	3710      	adds	r7, #16
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}
 80099fe:	bf00      	nop
 8009a00:	46002000 	.word	0x46002000
 8009a04:	56002000 	.word	0x56002000
 8009a08:	40013000 	.word	0x40013000
 8009a0c:	50013000 	.word	0x50013000
 8009a10:	40003800 	.word	0x40003800
 8009a14:	50003800 	.word	0x50003800

08009a18 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b088      	sub	sp, #32
 8009a1c:	af02      	add	r7, sp, #8
 8009a1e:	60f8      	str	r0, [r7, #12]
 8009a20:	60b9      	str	r1, [r7, #8]
 8009a22:	603b      	str	r3, [r7, #0]
 8009a24:	4613      	mov	r3, r2
 8009a26:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	3320      	adds	r3, #32
 8009a2e:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Check transfer size parameter */
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	4a90      	ldr	r2, [pc, #576]	@ (8009c78 <HAL_SPI_Transmit+0x260>)
 8009a36:	4293      	cmp	r3, r2
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009a38:	f7fa fcf8 	bl	800442c <HAL_GetTick>
 8009a3c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8009a44:	b2db      	uxtb	r3, r3
 8009a46:	2b01      	cmp	r3, #1
 8009a48:	d001      	beq.n	8009a4e <HAL_SPI_Transmit+0x36>
  {
    return HAL_BUSY;
 8009a4a:	2302      	movs	r3, #2
 8009a4c:	e1f4      	b.n	8009e38 <HAL_SPI_Transmit+0x420>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d002      	beq.n	8009a5a <HAL_SPI_Transmit+0x42>
 8009a54:	88fb      	ldrh	r3, [r7, #6]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d101      	bne.n	8009a5e <HAL_SPI_Transmit+0x46>
  {
    return HAL_ERROR;
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	e1ec      	b.n	8009e38 <HAL_SPI_Transmit+0x420>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8009a64:	2b01      	cmp	r3, #1
 8009a66:	d101      	bne.n	8009a6c <HAL_SPI_Transmit+0x54>
 8009a68:	2302      	movs	r3, #2
 8009a6a:	e1e5      	b.n	8009e38 <HAL_SPI_Transmit+0x420>
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	2201      	movs	r2, #1
 8009a70:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	2203      	movs	r2, #3
 8009a78:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	2200      	movs	r2, #0
 8009a80:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	68ba      	ldr	r2, [r7, #8]
 8009a88:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	88fa      	ldrh	r2, [r7, #6]
 8009a8e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	88fa      	ldrh	r2, [r7, #6]
 8009a96:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	2200      	movs	r2, #0
 8009aac:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	2200      	movs	r2, #0
 8009aba:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	689b      	ldr	r3, [r3, #8]
 8009ac0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8009ac4:	d108      	bne.n	8009ad8 <HAL_SPI_Transmit+0xc0>
  {
    SPI_1LINE_TX(hspi);
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	681a      	ldr	r2, [r3, #0]
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009ad4:	601a      	str	r2, [r3, #0]
 8009ad6:	e009      	b.n	8009aec <HAL_SPI_Transmit+0xd4>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	68db      	ldr	r3, [r3, #12]
 8009ade:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8009aea:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	685b      	ldr	r3, [r3, #4]
 8009af2:	0c1b      	lsrs	r3, r3, #16
 8009af4:	041b      	lsls	r3, r3, #16
 8009af6:	88f9      	ldrh	r1, [r7, #6]
 8009af8:	68fa      	ldr	r2, [r7, #12]
 8009afa:	6812      	ldr	r2, [r2, #0]
 8009afc:	430b      	orrs	r3, r1
 8009afe:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	681a      	ldr	r2, [r3, #0]
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f042 0201 	orr.w	r2, r2, #1
 8009b0e:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	69db      	ldr	r3, [r3, #28]
 8009b16:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d10c      	bne.n	8009b38 <HAL_SPI_Transmit+0x120>
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	685b      	ldr	r3, [r3, #4]
 8009b22:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009b26:	d107      	bne.n	8009b38 <HAL_SPI_Transmit+0x120>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	681a      	ldr	r2, [r3, #0]
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009b36:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	68db      	ldr	r3, [r3, #12]
 8009b3c:	2b0f      	cmp	r3, #15
 8009b3e:	d95b      	bls.n	8009bf8 <HAL_SPI_Transmit+0x1e0>
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	4a4d      	ldr	r2, [pc, #308]	@ (8009c7c <HAL_SPI_Transmit+0x264>)
 8009b46:	4293      	cmp	r3, r2
 8009b48:	d04f      	beq.n	8009bea <HAL_SPI_Transmit+0x1d2>
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	4a4c      	ldr	r2, [pc, #304]	@ (8009c80 <HAL_SPI_Transmit+0x268>)
 8009b50:	4293      	cmp	r3, r2
 8009b52:	d04a      	beq.n	8009bea <HAL_SPI_Transmit+0x1d2>
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	4a4a      	ldr	r2, [pc, #296]	@ (8009c84 <HAL_SPI_Transmit+0x26c>)
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	d045      	beq.n	8009bea <HAL_SPI_Transmit+0x1d2>
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	4a49      	ldr	r2, [pc, #292]	@ (8009c88 <HAL_SPI_Transmit+0x270>)
 8009b64:	4293      	cmp	r3, r2
 8009b66:	d147      	bne.n	8009bf8 <HAL_SPI_Transmit+0x1e0>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009b68:	e03f      	b.n	8009bea <HAL_SPI_Transmit+0x1d2>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	695b      	ldr	r3, [r3, #20]
 8009b70:	f003 0302 	and.w	r3, r3, #2
 8009b74:	2b02      	cmp	r3, #2
 8009b76:	d114      	bne.n	8009ba2 <HAL_SPI_Transmit+0x18a>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	6812      	ldr	r2, [r2, #0]
 8009b82:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009b88:	1d1a      	adds	r2, r3, #4
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009b94:	b29b      	uxth	r3, r3
 8009b96:	3b01      	subs	r3, #1
 8009b98:	b29a      	uxth	r2, r3
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009ba0:	e023      	b.n	8009bea <HAL_SPI_Transmit+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009ba2:	f7fa fc43 	bl	800442c <HAL_GetTick>
 8009ba6:	4602      	mov	r2, r0
 8009ba8:	693b      	ldr	r3, [r7, #16]
 8009baa:	1ad3      	subs	r3, r2, r3
 8009bac:	683a      	ldr	r2, [r7, #0]
 8009bae:	429a      	cmp	r2, r3
 8009bb0:	d803      	bhi.n	8009bba <HAL_SPI_Transmit+0x1a2>
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bb8:	d102      	bne.n	8009bc0 <HAL_SPI_Transmit+0x1a8>
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d114      	bne.n	8009bea <HAL_SPI_Transmit+0x1d2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009bc0:	68f8      	ldr	r0, [r7, #12]
 8009bc2:	f000 fbe5 	bl	800a390 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009bcc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	2201      	movs	r2, #1
 8009bda:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	2200      	movs	r2, #0
 8009be2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8009be6:	2303      	movs	r3, #3
 8009be8:	e126      	b.n	8009e38 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009bf0:	b29b      	uxth	r3, r3
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d1b9      	bne.n	8009b6a <HAL_SPI_Transmit+0x152>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8009bf6:	e0f9      	b.n	8009dec <HAL_SPI_Transmit+0x3d4>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	68db      	ldr	r3, [r3, #12]
 8009bfc:	2b07      	cmp	r3, #7
 8009bfe:	f240 80ee 	bls.w	8009dde <HAL_SPI_Transmit+0x3c6>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009c02:	e067      	b.n	8009cd4 <HAL_SPI_Transmit+0x2bc>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	695b      	ldr	r3, [r3, #20]
 8009c0a:	f003 0302 	and.w	r3, r3, #2
 8009c0e:	2b02      	cmp	r3, #2
 8009c10:	d13c      	bne.n	8009c8c <HAL_SPI_Transmit+0x274>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009c18:	b29b      	uxth	r3, r3
 8009c1a:	2b01      	cmp	r3, #1
 8009c1c:	d918      	bls.n	8009c50 <HAL_SPI_Transmit+0x238>
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d014      	beq.n	8009c50 <HAL_SPI_Transmit+0x238>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	6812      	ldr	r2, [r2, #0]
 8009c30:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c36:	1d1a      	adds	r2, r3, #4
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009c42:	b29b      	uxth	r3, r3
 8009c44:	3b02      	subs	r3, #2
 8009c46:	b29a      	uxth	r2, r3
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009c4e:	e041      	b.n	8009cd4 <HAL_SPI_Transmit+0x2bc>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c54:	881a      	ldrh	r2, [r3, #0]
 8009c56:	697b      	ldr	r3, [r7, #20]
 8009c58:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c5e:	1c9a      	adds	r2, r3, #2
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009c6a:	b29b      	uxth	r3, r3
 8009c6c:	3b01      	subs	r3, #1
 8009c6e:	b29a      	uxth	r2, r3
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009c76:	e02d      	b.n	8009cd4 <HAL_SPI_Transmit+0x2bc>
 8009c78:	46002000 	.word	0x46002000
 8009c7c:	40013000 	.word	0x40013000
 8009c80:	50013000 	.word	0x50013000
 8009c84:	40003800 	.word	0x40003800
 8009c88:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009c8c:	f7fa fbce 	bl	800442c <HAL_GetTick>
 8009c90:	4602      	mov	r2, r0
 8009c92:	693b      	ldr	r3, [r7, #16]
 8009c94:	1ad3      	subs	r3, r2, r3
 8009c96:	683a      	ldr	r2, [r7, #0]
 8009c98:	429a      	cmp	r2, r3
 8009c9a:	d803      	bhi.n	8009ca4 <HAL_SPI_Transmit+0x28c>
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ca2:	d102      	bne.n	8009caa <HAL_SPI_Transmit+0x292>
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d114      	bne.n	8009cd4 <HAL_SPI_Transmit+0x2bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009caa:	68f8      	ldr	r0, [r7, #12]
 8009cac:	f000 fb70 	bl	800a390 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009cb6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	2201      	movs	r2, #1
 8009cc4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	2200      	movs	r2, #0
 8009ccc:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8009cd0:	2303      	movs	r3, #3
 8009cd2:	e0b1      	b.n	8009e38 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009cda:	b29b      	uxth	r3, r3
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d191      	bne.n	8009c04 <HAL_SPI_Transmit+0x1ec>
 8009ce0:	e084      	b.n	8009dec <HAL_SPI_Transmit+0x3d4>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	695b      	ldr	r3, [r3, #20]
 8009ce8:	f003 0302 	and.w	r3, r3, #2
 8009cec:	2b02      	cmp	r3, #2
 8009cee:	d152      	bne.n	8009d96 <HAL_SPI_Transmit+0x37e>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009cf6:	b29b      	uxth	r3, r3
 8009cf8:	2b03      	cmp	r3, #3
 8009cfa:	d918      	bls.n	8009d2e <HAL_SPI_Transmit+0x316>
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d00:	2b40      	cmp	r3, #64	@ 0x40
 8009d02:	d914      	bls.n	8009d2e <HAL_SPI_Transmit+0x316>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	6812      	ldr	r2, [r2, #0]
 8009d0e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009d14:	1d1a      	adds	r2, r3, #4
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009d20:	b29b      	uxth	r3, r3
 8009d22:	3b04      	subs	r3, #4
 8009d24:	b29a      	uxth	r2, r3
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009d2c:	e057      	b.n	8009dde <HAL_SPI_Transmit+0x3c6>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009d34:	b29b      	uxth	r3, r3
 8009d36:	2b01      	cmp	r3, #1
 8009d38:	d917      	bls.n	8009d6a <HAL_SPI_Transmit+0x352>
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d013      	beq.n	8009d6a <HAL_SPI_Transmit+0x352>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009d46:	881a      	ldrh	r2, [r3, #0]
 8009d48:	697b      	ldr	r3, [r7, #20]
 8009d4a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009d50:	1c9a      	adds	r2, r3, #2
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009d5c:	b29b      	uxth	r3, r3
 8009d5e:	3b02      	subs	r3, #2
 8009d60:	b29a      	uxth	r2, r3
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009d68:	e039      	b.n	8009dde <HAL_SPI_Transmit+0x3c6>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	3320      	adds	r3, #32
 8009d74:	7812      	ldrb	r2, [r2, #0]
 8009d76:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009d7c:	1c5a      	adds	r2, r3, #1
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009d88:	b29b      	uxth	r3, r3
 8009d8a:	3b01      	subs	r3, #1
 8009d8c:	b29a      	uxth	r2, r3
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009d94:	e023      	b.n	8009dde <HAL_SPI_Transmit+0x3c6>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009d96:	f7fa fb49 	bl	800442c <HAL_GetTick>
 8009d9a:	4602      	mov	r2, r0
 8009d9c:	693b      	ldr	r3, [r7, #16]
 8009d9e:	1ad3      	subs	r3, r2, r3
 8009da0:	683a      	ldr	r2, [r7, #0]
 8009da2:	429a      	cmp	r2, r3
 8009da4:	d803      	bhi.n	8009dae <HAL_SPI_Transmit+0x396>
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dac:	d102      	bne.n	8009db4 <HAL_SPI_Transmit+0x39c>
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d114      	bne.n	8009dde <HAL_SPI_Transmit+0x3c6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009db4:	68f8      	ldr	r0, [r7, #12]
 8009db6:	f000 faeb 	bl	800a390 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009dc0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	2201      	movs	r2, #1
 8009dce:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8009dda:	2303      	movs	r3, #3
 8009ddc:	e02c      	b.n	8009e38 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009de4:	b29b      	uxth	r3, r3
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	f47f af7b 	bne.w	8009ce2 <HAL_SPI_Transmit+0x2ca>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8009dec:	693b      	ldr	r3, [r7, #16]
 8009dee:	9300      	str	r3, [sp, #0]
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	2200      	movs	r2, #0
 8009df4:	2108      	movs	r1, #8
 8009df6:	68f8      	ldr	r0, [r7, #12]
 8009df8:	f000 fb6a 	bl	800a4d0 <SPI_WaitOnFlagUntilTimeout>
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d007      	beq.n	8009e12 <HAL_SPI_Transmit+0x3fa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009e08:	f043 0220 	orr.w	r2, r3, #32
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009e12:	68f8      	ldr	r0, [r7, #12]
 8009e14:	f000 fabc 	bl	800a390 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	2201      	movs	r2, #1
 8009e1c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	2200      	movs	r2, #0
 8009e24:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d001      	beq.n	8009e36 <HAL_SPI_Transmit+0x41e>
  {
    return HAL_ERROR;
 8009e32:	2301      	movs	r3, #1
 8009e34:	e000      	b.n	8009e38 <HAL_SPI_Transmit+0x420>
  }
  else
  {
    return HAL_OK;
 8009e36:	2300      	movs	r3, #0
  }
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	3718      	adds	r7, #24
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}

08009e40 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b088      	sub	sp, #32
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	60f8      	str	r0, [r7, #12]
 8009e48:	60b9      	str	r1, [r7, #8]
 8009e4a:	603b      	str	r3, [r7, #0]
 8009e4c:	4613      	mov	r3, r2
 8009e4e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e54:	095b      	lsrs	r3, r3, #5
 8009e56:	b29b      	uxth	r3, r3
 8009e58:	3301      	adds	r3, #1
 8009e5a:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	3330      	adds	r3, #48	@ 0x30
 8009e62:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Check transfer size parameter */
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	4a96      	ldr	r2, [pc, #600]	@ (800a0c4 <HAL_SPI_Receive+0x284>)
 8009e6a:	4293      	cmp	r3, r2
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009e6c:	f7fa fade 	bl	800442c <HAL_GetTick>
 8009e70:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8009e78:	b2db      	uxtb	r3, r3
 8009e7a:	2b01      	cmp	r3, #1
 8009e7c:	d001      	beq.n	8009e82 <HAL_SPI_Receive+0x42>
  {
    return HAL_BUSY;
 8009e7e:	2302      	movs	r3, #2
 8009e80:	e274      	b.n	800a36c <HAL_SPI_Receive+0x52c>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009e82:	68bb      	ldr	r3, [r7, #8]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d002      	beq.n	8009e8e <HAL_SPI_Receive+0x4e>
 8009e88:	88fb      	ldrh	r3, [r7, #6]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d101      	bne.n	8009e92 <HAL_SPI_Receive+0x52>
  {
    return HAL_ERROR;
 8009e8e:	2301      	movs	r3, #1
 8009e90:	e26c      	b.n	800a36c <HAL_SPI_Receive+0x52c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8009e98:	2b01      	cmp	r3, #1
 8009e9a:	d101      	bne.n	8009ea0 <HAL_SPI_Receive+0x60>
 8009e9c:	2302      	movs	r3, #2
 8009e9e:	e265      	b.n	800a36c <HAL_SPI_Receive+0x52c>
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	2201      	movs	r2, #1
 8009ea4:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	2204      	movs	r2, #4
 8009eac:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	68ba      	ldr	r2, [r7, #8]
 8009ebc:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = Size;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	88fa      	ldrh	r2, [r7, #6]
 8009ec2:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = Size;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	88fa      	ldrh	r2, [r7, #6]
 8009eca:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = (uint16_t) 0UL;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = (uint16_t) 0UL;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	2200      	movs	r2, #0
 8009ee0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxISR       = NULL;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	2200      	movs	r2, #0
 8009eee:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	689b      	ldr	r3, [r3, #8]
 8009ef4:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8009ef8:	d108      	bne.n	8009f0c <HAL_SPI_Receive+0xcc>
  {
    SPI_1LINE_RX(hspi);
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	681a      	ldr	r2, [r3, #0]
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009f08:	601a      	str	r2, [r3, #0]
 8009f0a:	e009      	b.n	8009f20 <HAL_SPI_Receive+0xe0>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	68db      	ldr	r3, [r3, #12]
 8009f12:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8009f1e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	685b      	ldr	r3, [r3, #4]
 8009f26:	0c1b      	lsrs	r3, r3, #16
 8009f28:	041b      	lsls	r3, r3, #16
 8009f2a:	88f9      	ldrh	r1, [r7, #6]
 8009f2c:	68fa      	ldr	r2, [r7, #12]
 8009f2e:	6812      	ldr	r2, [r2, #0]
 8009f30:	430b      	orrs	r3, r1
 8009f32:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	681a      	ldr	r2, [r3, #0]
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f042 0201 	orr.w	r2, r2, #1
 8009f42:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	69db      	ldr	r3, [r3, #28]
 8009f4a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d10c      	bne.n	8009f6c <HAL_SPI_Receive+0x12c>
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	685b      	ldr	r3, [r3, #4]
 8009f56:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009f5a:	d107      	bne.n	8009f6c <HAL_SPI_Receive+0x12c>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	681a      	ldr	r2, [r3, #0]
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009f6a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	68db      	ldr	r3, [r3, #12]
 8009f70:	2b0f      	cmp	r3, #15
 8009f72:	f240 8081 	bls.w	800a078 <HAL_SPI_Receive+0x238>
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	4a53      	ldr	r2, [pc, #332]	@ (800a0c8 <HAL_SPI_Receive+0x288>)
 8009f7c:	4293      	cmp	r3, r2
 8009f7e:	d074      	beq.n	800a06a <HAL_SPI_Receive+0x22a>
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	4a51      	ldr	r2, [pc, #324]	@ (800a0cc <HAL_SPI_Receive+0x28c>)
 8009f86:	4293      	cmp	r3, r2
 8009f88:	d06f      	beq.n	800a06a <HAL_SPI_Receive+0x22a>
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	4a50      	ldr	r2, [pc, #320]	@ (800a0d0 <HAL_SPI_Receive+0x290>)
 8009f90:	4293      	cmp	r3, r2
 8009f92:	d06a      	beq.n	800a06a <HAL_SPI_Receive+0x22a>
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	4a4e      	ldr	r2, [pc, #312]	@ (800a0d4 <HAL_SPI_Receive+0x294>)
 8009f9a:	4293      	cmp	r3, r2
 8009f9c:	d16c      	bne.n	800a078 <HAL_SPI_Receive+0x238>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8009f9e:	e064      	b.n	800a06a <HAL_SPI_Receive+0x22a>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	695b      	ldr	r3, [r3, #20]
 8009fa6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	695b      	ldr	r3, [r3, #20]
 8009fae:	f003 0301 	and.w	r3, r3, #1
 8009fb2:	2b01      	cmp	r3, #1
 8009fb4:	d114      	bne.n	8009fe0 <HAL_SPI_Receive+0x1a0>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	681a      	ldr	r2, [r3, #0]
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009fbe:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009fc0:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009fc6:	1d1a      	adds	r2, r3, #4
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8009fd2:	b29b      	uxth	r3, r3
 8009fd4:	3b01      	subs	r3, #1
 8009fd6:	b29a      	uxth	r2, r3
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8009fde:	e044      	b.n	800a06a <HAL_SPI_Receive+0x22a>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8009fe6:	b29b      	uxth	r3, r3
 8009fe8:	8bfa      	ldrh	r2, [r7, #30]
 8009fea:	429a      	cmp	r2, r3
 8009fec:	d919      	bls.n	800a022 <HAL_SPI_Receive+0x1e2>
 8009fee:	693b      	ldr	r3, [r7, #16]
 8009ff0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d014      	beq.n	800a022 <HAL_SPI_Receive+0x1e2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	681a      	ldr	r2, [r3, #0]
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a000:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a002:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a008:	1d1a      	adds	r2, r3, #4
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a014:	b29b      	uxth	r3, r3
 800a016:	3b01      	subs	r3, #1
 800a018:	b29a      	uxth	r2, r3
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800a020:	e023      	b.n	800a06a <HAL_SPI_Receive+0x22a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a022:	f7fa fa03 	bl	800442c <HAL_GetTick>
 800a026:	4602      	mov	r2, r0
 800a028:	697b      	ldr	r3, [r7, #20]
 800a02a:	1ad3      	subs	r3, r2, r3
 800a02c:	683a      	ldr	r2, [r7, #0]
 800a02e:	429a      	cmp	r2, r3
 800a030:	d803      	bhi.n	800a03a <HAL_SPI_Receive+0x1fa>
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a038:	d102      	bne.n	800a040 <HAL_SPI_Receive+0x200>
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d114      	bne.n	800a06a <HAL_SPI_Receive+0x22a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a040:	68f8      	ldr	r0, [r7, #12]
 800a042:	f000 f9a5 	bl	800a390 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a04c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	2201      	movs	r2, #1
 800a05a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	2200      	movs	r2, #0
 800a062:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800a066:	2303      	movs	r3, #3
 800a068:	e180      	b.n	800a36c <HAL_SPI_Receive+0x52c>
    while (hspi->RxXferCount > 0UL)
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a070:	b29b      	uxth	r3, r3
 800a072:	2b00      	cmp	r3, #0
 800a074:	d194      	bne.n	8009fa0 <HAL_SPI_Receive+0x160>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800a076:	e166      	b.n	800a346 <HAL_SPI_Receive+0x506>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	68db      	ldr	r3, [r3, #12]
 800a07c:	2b07      	cmp	r3, #7
 800a07e:	f240 815b 	bls.w	800a338 <HAL_SPI_Receive+0x4f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800a082:	e099      	b.n	800a1b8 <HAL_SPI_Receive+0x378>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	695b      	ldr	r3, [r3, #20]
 800a08a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	695b      	ldr	r3, [r3, #20]
 800a092:	f003 0301 	and.w	r3, r3, #1
 800a096:	2b01      	cmp	r3, #1
 800a098:	d11e      	bne.n	800a0d8 <HAL_SPI_Receive+0x298>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a09e:	69ba      	ldr	r2, [r7, #24]
 800a0a0:	8812      	ldrh	r2, [r2, #0]
 800a0a2:	b292      	uxth	r2, r2
 800a0a4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a0aa:	1c9a      	adds	r2, r3, #2
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a0b6:	b29b      	uxth	r3, r3
 800a0b8:	3b01      	subs	r3, #1
 800a0ba:	b29a      	uxth	r2, r3
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800a0c2:	e079      	b.n	800a1b8 <HAL_SPI_Receive+0x378>
 800a0c4:	46002000 	.word	0x46002000
 800a0c8:	40013000 	.word	0x40013000
 800a0cc:	50013000 	.word	0x50013000
 800a0d0:	40003800 	.word	0x40003800
 800a0d4:	50003800 	.word	0x50003800
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a0de:	b29b      	uxth	r3, r3
 800a0e0:	8bfa      	ldrh	r2, [r7, #30]
 800a0e2:	429a      	cmp	r2, r3
 800a0e4:	d924      	bls.n	800a130 <HAL_SPI_Receive+0x2f0>
 800a0e6:	693b      	ldr	r3, [r7, #16]
 800a0e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d01f      	beq.n	800a130 <HAL_SPI_Receive+0x2f0>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a0f4:	69ba      	ldr	r2, [r7, #24]
 800a0f6:	8812      	ldrh	r2, [r2, #0]
 800a0f8:	b292      	uxth	r2, r2
 800a0fa:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a100:	1c9a      	adds	r2, r3, #2
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	66da      	str	r2, [r3, #108]	@ 0x6c
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a10a:	69ba      	ldr	r2, [r7, #24]
 800a10c:	8812      	ldrh	r2, [r2, #0]
 800a10e:	b292      	uxth	r2, r2
 800a110:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a116:	1c9a      	adds	r2, r3, #2
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount -= (uint16_t)2UL;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a122:	b29b      	uxth	r3, r3
 800a124:	3b02      	subs	r3, #2
 800a126:	b29a      	uxth	r2, r3
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800a12e:	e043      	b.n	800a1b8 <HAL_SPI_Receive+0x378>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a136:	b29b      	uxth	r3, r3
 800a138:	2b01      	cmp	r3, #1
 800a13a:	d119      	bne.n	800a170 <HAL_SPI_Receive+0x330>
 800a13c:	693b      	ldr	r3, [r7, #16]
 800a13e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a142:	2b00      	cmp	r3, #0
 800a144:	d014      	beq.n	800a170 <HAL_SPI_Receive+0x330>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a14a:	69ba      	ldr	r2, [r7, #24]
 800a14c:	8812      	ldrh	r2, [r2, #0]
 800a14e:	b292      	uxth	r2, r2
 800a150:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a156:	1c9a      	adds	r2, r3, #2
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a162:	b29b      	uxth	r3, r3
 800a164:	3b01      	subs	r3, #1
 800a166:	b29a      	uxth	r2, r3
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800a16e:	e023      	b.n	800a1b8 <HAL_SPI_Receive+0x378>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a170:	f7fa f95c 	bl	800442c <HAL_GetTick>
 800a174:	4602      	mov	r2, r0
 800a176:	697b      	ldr	r3, [r7, #20]
 800a178:	1ad3      	subs	r3, r2, r3
 800a17a:	683a      	ldr	r2, [r7, #0]
 800a17c:	429a      	cmp	r2, r3
 800a17e:	d803      	bhi.n	800a188 <HAL_SPI_Receive+0x348>
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a186:	d102      	bne.n	800a18e <HAL_SPI_Receive+0x34e>
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d114      	bne.n	800a1b8 <HAL_SPI_Receive+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a18e:	68f8      	ldr	r0, [r7, #12]
 800a190:	f000 f8fe 	bl	800a390 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a19a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	2201      	movs	r2, #1
 800a1a8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800a1b4:	2303      	movs	r3, #3
 800a1b6:	e0d9      	b.n	800a36c <HAL_SPI_Receive+0x52c>
    while (hspi->RxXferCount > 0UL)
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a1be:	b29b      	uxth	r3, r3
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	f47f af5f 	bne.w	800a084 <HAL_SPI_Receive+0x244>
 800a1c6:	e0be      	b.n	800a346 <HAL_SPI_Receive+0x506>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	695b      	ldr	r3, [r3, #20]
 800a1ce:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	695b      	ldr	r3, [r3, #20]
 800a1d6:	f003 0301 	and.w	r3, r3, #1
 800a1da:	2b01      	cmp	r3, #1
 800a1dc:	d117      	bne.n	800a20e <HAL_SPI_Receive+0x3ce>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a1ea:	7812      	ldrb	r2, [r2, #0]
 800a1ec:	b2d2      	uxtb	r2, r2
 800a1ee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a1f4:	1c5a      	adds	r2, r3, #1
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a200:	b29b      	uxth	r3, r3
 800a202:	3b01      	subs	r3, #1
 800a204:	b29a      	uxth	r2, r3
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800a20c:	e094      	b.n	800a338 <HAL_SPI_Receive+0x4f8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a214:	b29b      	uxth	r3, r3
 800a216:	8bfa      	ldrh	r2, [r7, #30]
 800a218:	429a      	cmp	r2, r3
 800a21a:	d946      	bls.n	800a2aa <HAL_SPI_Receive+0x46a>
 800a21c:	693b      	ldr	r3, [r7, #16]
 800a21e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a222:	2b00      	cmp	r3, #0
 800a224:	d041      	beq.n	800a2aa <HAL_SPI_Receive+0x46a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a232:	7812      	ldrb	r2, [r2, #0]
 800a234:	b2d2      	uxtb	r2, r2
 800a236:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a23c:	1c5a      	adds	r2, r3, #1
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	66da      	str	r2, [r3, #108]	@ 0x6c
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a24e:	7812      	ldrb	r2, [r2, #0]
 800a250:	b2d2      	uxtb	r2, r2
 800a252:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a258:	1c5a      	adds	r2, r3, #1
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	66da      	str	r2, [r3, #108]	@ 0x6c
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a26a:	7812      	ldrb	r2, [r2, #0]
 800a26c:	b2d2      	uxtb	r2, r2
 800a26e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a274:	1c5a      	adds	r2, r3, #1
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	66da      	str	r2, [r3, #108]	@ 0x6c
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a286:	7812      	ldrb	r2, [r2, #0]
 800a288:	b2d2      	uxtb	r2, r2
 800a28a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a290:	1c5a      	adds	r2, r3, #1
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount -= (uint16_t)4UL;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a29c:	b29b      	uxth	r3, r3
 800a29e:	3b04      	subs	r3, #4
 800a2a0:	b29a      	uxth	r2, r3
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800a2a8:	e046      	b.n	800a338 <HAL_SPI_Receive+0x4f8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a2b0:	b29b      	uxth	r3, r3
 800a2b2:	2b03      	cmp	r3, #3
 800a2b4:	d81c      	bhi.n	800a2f0 <HAL_SPI_Receive+0x4b0>
 800a2b6:	693b      	ldr	r3, [r7, #16]
 800a2b8:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d017      	beq.n	800a2f0 <HAL_SPI_Receive+0x4b0>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a2cc:	7812      	ldrb	r2, [r2, #0]
 800a2ce:	b2d2      	uxtb	r2, r2
 800a2d0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a2d6:	1c5a      	adds	r2, r3, #1
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a2e2:	b29b      	uxth	r3, r3
 800a2e4:	3b01      	subs	r3, #1
 800a2e6:	b29a      	uxth	r2, r3
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800a2ee:	e023      	b.n	800a338 <HAL_SPI_Receive+0x4f8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a2f0:	f7fa f89c 	bl	800442c <HAL_GetTick>
 800a2f4:	4602      	mov	r2, r0
 800a2f6:	697b      	ldr	r3, [r7, #20]
 800a2f8:	1ad3      	subs	r3, r2, r3
 800a2fa:	683a      	ldr	r2, [r7, #0]
 800a2fc:	429a      	cmp	r2, r3
 800a2fe:	d803      	bhi.n	800a308 <HAL_SPI_Receive+0x4c8>
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a306:	d102      	bne.n	800a30e <HAL_SPI_Receive+0x4ce>
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d114      	bne.n	800a338 <HAL_SPI_Receive+0x4f8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a30e:	68f8      	ldr	r0, [r7, #12]
 800a310:	f000 f83e 	bl	800a390 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a31a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	2201      	movs	r2, #1
 800a328:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	2200      	movs	r2, #0
 800a330:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800a334:	2303      	movs	r3, #3
 800a336:	e019      	b.n	800a36c <HAL_SPI_Receive+0x52c>
    while (hspi->RxXferCount > 0UL)
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a33e:	b29b      	uxth	r3, r3
 800a340:	2b00      	cmp	r3, #0
 800a342:	f47f af41 	bne.w	800a1c8 <HAL_SPI_Receive+0x388>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a346:	68f8      	ldr	r0, [r7, #12]
 800a348:	f000 f822 	bl	800a390 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	2201      	movs	r2, #1
 800a350:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	2200      	movs	r2, #0
 800a358:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a362:	2b00      	cmp	r3, #0
 800a364:	d001      	beq.n	800a36a <HAL_SPI_Receive+0x52a>
  {
    return HAL_ERROR;
 800a366:	2301      	movs	r3, #1
 800a368:	e000      	b.n	800a36c <HAL_SPI_Receive+0x52c>
  }
  else
  {
    return HAL_OK;
 800a36a:	2300      	movs	r3, #0
  }
}
 800a36c:	4618      	mov	r0, r3
 800a36e:	3720      	adds	r7, #32
 800a370:	46bd      	mov	sp, r7
 800a372:	bd80      	pop	{r7, pc}

0800a374 <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800a374:	b480      	push	{r7}
 800a376:	b083      	sub	sp, #12
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800a382:	b2db      	uxtb	r3, r3
}
 800a384:	4618      	mov	r0, r3
 800a386:	370c      	adds	r7, #12
 800a388:	46bd      	mov	sp, r7
 800a38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38e:	4770      	bx	lr

0800a390 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800a390:	b480      	push	{r7}
 800a392:	b085      	sub	sp, #20
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	695b      	ldr	r3, [r3, #20]
 800a39e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	699a      	ldr	r2, [r3, #24]
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	f042 0208 	orr.w	r2, r2, #8
 800a3ae:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	699a      	ldr	r2, [r3, #24]
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	f042 0210 	orr.w	r2, r2, #16
 800a3be:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	681a      	ldr	r2, [r3, #0]
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f022 0201 	bic.w	r2, r2, #1
 800a3ce:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	691b      	ldr	r3, [r3, #16]
 800a3d6:	687a      	ldr	r2, [r7, #4]
 800a3d8:	6812      	ldr	r2, [r2, #0]
 800a3da:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 800a3de:	f023 0303 	bic.w	r3, r3, #3
 800a3e2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	689a      	ldr	r2, [r3, #8]
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800a3f2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800a3fa:	b2db      	uxtb	r3, r3
 800a3fc:	2b04      	cmp	r3, #4
 800a3fe:	d014      	beq.n	800a42a <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	f003 0320 	and.w	r3, r3, #32
 800a406:	2b00      	cmp	r3, #0
 800a408:	d00f      	beq.n	800a42a <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a410:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	699a      	ldr	r2, [r3, #24]
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f042 0220 	orr.w	r2, r2, #32
 800a428:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800a430:	b2db      	uxtb	r3, r3
 800a432:	2b03      	cmp	r3, #3
 800a434:	d014      	beq.n	800a460 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d00f      	beq.n	800a460 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a446:	f043 0204 	orr.w	r2, r3, #4
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	699a      	ldr	r2, [r3, #24]
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a45e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a466:	2b00      	cmp	r3, #0
 800a468:	d00f      	beq.n	800a48a <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a470:	f043 0201 	orr.w	r2, r3, #1
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	699a      	ldr	r2, [r3, #24]
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a488:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a490:	2b00      	cmp	r3, #0
 800a492:	d00f      	beq.n	800a4b4 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a49a:	f043 0208 	orr.w	r2, r3, #8
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	699a      	ldr	r2, [r3, #24]
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a4b2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2200      	movs	r2, #0
 800a4c0:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 800a4c4:	bf00      	nop
 800a4c6:	3714      	adds	r7, #20
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ce:	4770      	bx	lr

0800a4d0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b084      	sub	sp, #16
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	60f8      	str	r0, [r7, #12]
 800a4d8:	60b9      	str	r1, [r7, #8]
 800a4da:	603b      	str	r3, [r7, #0]
 800a4dc:	4613      	mov	r3, r2
 800a4de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a4e0:	e010      	b.n	800a504 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a4e2:	f7f9 ffa3 	bl	800442c <HAL_GetTick>
 800a4e6:	4602      	mov	r2, r0
 800a4e8:	69bb      	ldr	r3, [r7, #24]
 800a4ea:	1ad3      	subs	r3, r2, r3
 800a4ec:	683a      	ldr	r2, [r7, #0]
 800a4ee:	429a      	cmp	r2, r3
 800a4f0:	d803      	bhi.n	800a4fa <SPI_WaitOnFlagUntilTimeout+0x2a>
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4f8:	d102      	bne.n	800a500 <SPI_WaitOnFlagUntilTimeout+0x30>
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d101      	bne.n	800a504 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800a500:	2303      	movs	r3, #3
 800a502:	e00f      	b.n	800a524 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	695a      	ldr	r2, [r3, #20]
 800a50a:	68bb      	ldr	r3, [r7, #8]
 800a50c:	4013      	ands	r3, r2
 800a50e:	68ba      	ldr	r2, [r7, #8]
 800a510:	429a      	cmp	r2, r3
 800a512:	bf0c      	ite	eq
 800a514:	2301      	moveq	r3, #1
 800a516:	2300      	movne	r3, #0
 800a518:	b2db      	uxtb	r3, r3
 800a51a:	461a      	mov	r2, r3
 800a51c:	79fb      	ldrb	r3, [r7, #7]
 800a51e:	429a      	cmp	r2, r3
 800a520:	d0df      	beq.n	800a4e2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800a522:	2300      	movs	r3, #0
}
 800a524:	4618      	mov	r0, r3
 800a526:	3710      	adds	r7, #16
 800a528:	46bd      	mov	sp, r7
 800a52a:	bd80      	pop	{r7, pc}

0800a52c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800a52c:	b480      	push	{r7}
 800a52e:	b085      	sub	sp, #20
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a538:	095b      	lsrs	r3, r3, #5
 800a53a:	3301      	adds	r3, #1
 800a53c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	68db      	ldr	r3, [r3, #12]
 800a542:	3301      	adds	r3, #1
 800a544:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a546:	68bb      	ldr	r3, [r7, #8]
 800a548:	3307      	adds	r3, #7
 800a54a:	08db      	lsrs	r3, r3, #3
 800a54c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a54e:	68bb      	ldr	r3, [r7, #8]
 800a550:	68fa      	ldr	r2, [r7, #12]
 800a552:	fb02 f303 	mul.w	r3, r2, r3
}
 800a556:	4618      	mov	r0, r3
 800a558:	3714      	adds	r7, #20
 800a55a:	46bd      	mov	sp, r7
 800a55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a560:	4770      	bx	lr

0800a562 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 800a562:	b480      	push	{r7}
 800a564:	b083      	sub	sp, #12
 800a566:	af00      	add	r7, sp, #0
 800a568:	6078      	str	r0, [r7, #4]
 800a56a:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800a572:	b2db      	uxtb	r3, r3
 800a574:	2b01      	cmp	r3, #1
 800a576:	d12e      	bne.n	800a5d6 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800a57e:	2b01      	cmp	r3, #1
 800a580:	d101      	bne.n	800a586 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 800a582:	2302      	movs	r3, #2
 800a584:	e028      	b.n	800a5d8 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2201      	movs	r2, #1
 800a58a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2202      	movs	r2, #2
 800a592:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	681a      	ldr	r2, [r3, #0]
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	f022 0201 	bic.w	r2, r2, #1
 800a5a4:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	681a      	ldr	r2, [r3, #0]
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	685b      	ldr	r3, [r3, #4]
 800a5ae:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800a5b2:	ea42 0103 	orr.w	r1, r2, r3
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	689a      	ldr	r2, [r3, #8]
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	430a      	orrs	r2, r1
 800a5c0:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	2201      	movs	r2, #1
 800a5c6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	e000      	b.n	800a5d8 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800a5d6:	2301      	movs	r3, #1
  }
}
 800a5d8:	4618      	mov	r0, r3
 800a5da:	370c      	adds	r7, #12
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e2:	4770      	bx	lr

0800a5e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b082      	sub	sp, #8
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d101      	bne.n	800a5f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a5f2:	2301      	movs	r3, #1
 800a5f4:	e042      	b.n	800a67c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d106      	bne.n	800a60e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2200      	movs	r2, #0
 800a604:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a608:	6878      	ldr	r0, [r7, #4]
 800a60a:	f7f9 fc8d 	bl	8003f28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	2224      	movs	r2, #36	@ 0x24
 800a612:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	681a      	ldr	r2, [r3, #0]
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	f022 0201 	bic.w	r2, r2, #1
 800a624:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d002      	beq.n	800a634 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a62e:	6878      	ldr	r0, [r7, #4]
 800a630:	f000 fa4e 	bl	800aad0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f000 f8b3 	bl	800a7a0 <UART_SetConfig>
 800a63a:	4603      	mov	r3, r0
 800a63c:	2b01      	cmp	r3, #1
 800a63e:	d101      	bne.n	800a644 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a640:	2301      	movs	r3, #1
 800a642:	e01b      	b.n	800a67c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	685a      	ldr	r2, [r3, #4]
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a652:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	689a      	ldr	r2, [r3, #8]
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a662:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	681a      	ldr	r2, [r3, #0]
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	f042 0201 	orr.w	r2, r2, #1
 800a672:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a674:	6878      	ldr	r0, [r7, #4]
 800a676:	f000 facd 	bl	800ac14 <UART_CheckIdleState>
 800a67a:	4603      	mov	r3, r0
}
 800a67c:	4618      	mov	r0, r3
 800a67e:	3708      	adds	r7, #8
 800a680:	46bd      	mov	sp, r7
 800a682:	bd80      	pop	{r7, pc}

0800a684 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b08a      	sub	sp, #40	@ 0x28
 800a688:	af02      	add	r7, sp, #8
 800a68a:	60f8      	str	r0, [r7, #12]
 800a68c:	60b9      	str	r1, [r7, #8]
 800a68e:	603b      	str	r3, [r7, #0]
 800a690:	4613      	mov	r3, r2
 800a692:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a69a:	2b20      	cmp	r3, #32
 800a69c:	d17b      	bne.n	800a796 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800a69e:	68bb      	ldr	r3, [r7, #8]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d002      	beq.n	800a6aa <HAL_UART_Transmit+0x26>
 800a6a4:	88fb      	ldrh	r3, [r7, #6]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d101      	bne.n	800a6ae <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	e074      	b.n	800a798 <HAL_UART_Transmit+0x114>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	2221      	movs	r2, #33	@ 0x21
 800a6ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a6be:	f7f9 feb5 	bl	800442c <HAL_GetTick>
 800a6c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	88fa      	ldrh	r2, [r7, #6]
 800a6c8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	88fa      	ldrh	r2, [r7, #6]
 800a6d0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	689b      	ldr	r3, [r3, #8]
 800a6d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a6dc:	d108      	bne.n	800a6f0 <HAL_UART_Transmit+0x6c>
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	691b      	ldr	r3, [r3, #16]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d104      	bne.n	800a6f0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a6ea:	68bb      	ldr	r3, [r7, #8]
 800a6ec:	61bb      	str	r3, [r7, #24]
 800a6ee:	e003      	b.n	800a6f8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a6f8:	e030      	b.n	800a75c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	9300      	str	r3, [sp, #0]
 800a6fe:	697b      	ldr	r3, [r7, #20]
 800a700:	2200      	movs	r2, #0
 800a702:	2180      	movs	r1, #128	@ 0x80
 800a704:	68f8      	ldr	r0, [r7, #12]
 800a706:	f000 fb2f 	bl	800ad68 <UART_WaitOnFlagUntilTimeout>
 800a70a:	4603      	mov	r3, r0
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d005      	beq.n	800a71c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	2220      	movs	r2, #32
 800a714:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800a718:	2303      	movs	r3, #3
 800a71a:	e03d      	b.n	800a798 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800a71c:	69fb      	ldr	r3, [r7, #28]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d10b      	bne.n	800a73a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a722:	69bb      	ldr	r3, [r7, #24]
 800a724:	881b      	ldrh	r3, [r3, #0]
 800a726:	461a      	mov	r2, r3
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a730:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a732:	69bb      	ldr	r3, [r7, #24]
 800a734:	3302      	adds	r3, #2
 800a736:	61bb      	str	r3, [r7, #24]
 800a738:	e007      	b.n	800a74a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a73a:	69fb      	ldr	r3, [r7, #28]
 800a73c:	781a      	ldrb	r2, [r3, #0]
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a744:	69fb      	ldr	r3, [r7, #28]
 800a746:	3301      	adds	r3, #1
 800a748:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a750:	b29b      	uxth	r3, r3
 800a752:	3b01      	subs	r3, #1
 800a754:	b29a      	uxth	r2, r3
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a762:	b29b      	uxth	r3, r3
 800a764:	2b00      	cmp	r3, #0
 800a766:	d1c8      	bne.n	800a6fa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	9300      	str	r3, [sp, #0]
 800a76c:	697b      	ldr	r3, [r7, #20]
 800a76e:	2200      	movs	r2, #0
 800a770:	2140      	movs	r1, #64	@ 0x40
 800a772:	68f8      	ldr	r0, [r7, #12]
 800a774:	f000 faf8 	bl	800ad68 <UART_WaitOnFlagUntilTimeout>
 800a778:	4603      	mov	r3, r0
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d005      	beq.n	800a78a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	2220      	movs	r2, #32
 800a782:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800a786:	2303      	movs	r3, #3
 800a788:	e006      	b.n	800a798 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	2220      	movs	r2, #32
 800a78e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800a792:	2300      	movs	r3, #0
 800a794:	e000      	b.n	800a798 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800a796:	2302      	movs	r3, #2
  }
}
 800a798:	4618      	mov	r0, r3
 800a79a:	3720      	adds	r7, #32
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bd80      	pop	{r7, pc}

0800a7a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a7a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a7a4:	b094      	sub	sp, #80	@ 0x50
 800a7a6:	af00      	add	r7, sp, #0
 800a7a8:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800a7b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7b2:	681a      	ldr	r2, [r3, #0]
 800a7b4:	4b9b      	ldr	r3, [pc, #620]	@ (800aa24 <UART_SetConfig+0x284>)
 800a7b6:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a7b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7ba:	689a      	ldr	r2, [r3, #8]
 800a7bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7be:	691b      	ldr	r3, [r3, #16]
 800a7c0:	431a      	orrs	r2, r3
 800a7c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7c4:	695b      	ldr	r3, [r3, #20]
 800a7c6:	431a      	orrs	r2, r3
 800a7c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7ca:	69db      	ldr	r3, [r3, #28]
 800a7cc:	4313      	orrs	r3, r2
 800a7ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a7d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	4994      	ldr	r1, [pc, #592]	@ (800aa28 <UART_SetConfig+0x288>)
 800a7d8:	4019      	ands	r1, r3
 800a7da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7dc:	681a      	ldr	r2, [r3, #0]
 800a7de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a7e0:	430b      	orrs	r3, r1
 800a7e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a7e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	685b      	ldr	r3, [r3, #4]
 800a7ea:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a7ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7f0:	68d9      	ldr	r1, [r3, #12]
 800a7f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7f4:	681a      	ldr	r2, [r3, #0]
 800a7f6:	ea40 0301 	orr.w	r3, r0, r1
 800a7fa:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a7fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7fe:	699b      	ldr	r3, [r3, #24]
 800a800:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a804:	681a      	ldr	r2, [r3, #0]
 800a806:	4b87      	ldr	r3, [pc, #540]	@ (800aa24 <UART_SetConfig+0x284>)
 800a808:	429a      	cmp	r2, r3
 800a80a:	d009      	beq.n	800a820 <UART_SetConfig+0x80>
 800a80c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a80e:	681a      	ldr	r2, [r3, #0]
 800a810:	4b86      	ldr	r3, [pc, #536]	@ (800aa2c <UART_SetConfig+0x28c>)
 800a812:	429a      	cmp	r2, r3
 800a814:	d004      	beq.n	800a820 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a818:	6a1a      	ldr	r2, [r3, #32]
 800a81a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a81c:	4313      	orrs	r3, r2
 800a81e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	689b      	ldr	r3, [r3, #8]
 800a826:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800a82a:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800a82e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a830:	681a      	ldr	r2, [r3, #0]
 800a832:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a834:	430b      	orrs	r3, r1
 800a836:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a83e:	f023 000f 	bic.w	r0, r3, #15
 800a842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a844:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800a846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a848:	681a      	ldr	r2, [r3, #0]
 800a84a:	ea40 0301 	orr.w	r3, r0, r1
 800a84e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a852:	681a      	ldr	r2, [r3, #0]
 800a854:	4b76      	ldr	r3, [pc, #472]	@ (800aa30 <UART_SetConfig+0x290>)
 800a856:	429a      	cmp	r2, r3
 800a858:	d102      	bne.n	800a860 <UART_SetConfig+0xc0>
 800a85a:	2301      	movs	r3, #1
 800a85c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a85e:	e021      	b.n	800a8a4 <UART_SetConfig+0x104>
 800a860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a862:	681a      	ldr	r2, [r3, #0]
 800a864:	4b73      	ldr	r3, [pc, #460]	@ (800aa34 <UART_SetConfig+0x294>)
 800a866:	429a      	cmp	r2, r3
 800a868:	d102      	bne.n	800a870 <UART_SetConfig+0xd0>
 800a86a:	2304      	movs	r3, #4
 800a86c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a86e:	e019      	b.n	800a8a4 <UART_SetConfig+0x104>
 800a870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a872:	681a      	ldr	r2, [r3, #0]
 800a874:	4b70      	ldr	r3, [pc, #448]	@ (800aa38 <UART_SetConfig+0x298>)
 800a876:	429a      	cmp	r2, r3
 800a878:	d102      	bne.n	800a880 <UART_SetConfig+0xe0>
 800a87a:	2308      	movs	r3, #8
 800a87c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a87e:	e011      	b.n	800a8a4 <UART_SetConfig+0x104>
 800a880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a882:	681a      	ldr	r2, [r3, #0]
 800a884:	4b6d      	ldr	r3, [pc, #436]	@ (800aa3c <UART_SetConfig+0x29c>)
 800a886:	429a      	cmp	r2, r3
 800a888:	d102      	bne.n	800a890 <UART_SetConfig+0xf0>
 800a88a:	2310      	movs	r3, #16
 800a88c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a88e:	e009      	b.n	800a8a4 <UART_SetConfig+0x104>
 800a890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a892:	681a      	ldr	r2, [r3, #0]
 800a894:	4b63      	ldr	r3, [pc, #396]	@ (800aa24 <UART_SetConfig+0x284>)
 800a896:	429a      	cmp	r2, r3
 800a898:	d102      	bne.n	800a8a0 <UART_SetConfig+0x100>
 800a89a:	2320      	movs	r3, #32
 800a89c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a89e:	e001      	b.n	800a8a4 <UART_SetConfig+0x104>
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a8a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8a6:	681a      	ldr	r2, [r3, #0]
 800a8a8:	4b5e      	ldr	r3, [pc, #376]	@ (800aa24 <UART_SetConfig+0x284>)
 800a8aa:	429a      	cmp	r2, r3
 800a8ac:	d004      	beq.n	800a8b8 <UART_SetConfig+0x118>
 800a8ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8b0:	681a      	ldr	r2, [r3, #0]
 800a8b2:	4b5e      	ldr	r3, [pc, #376]	@ (800aa2c <UART_SetConfig+0x28c>)
 800a8b4:	429a      	cmp	r2, r3
 800a8b6:	d172      	bne.n	800a99e <UART_SetConfig+0x1fe>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a8b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	623b      	str	r3, [r7, #32]
 800a8be:	627a      	str	r2, [r7, #36]	@ 0x24
 800a8c0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800a8c4:	f7fc ff34 	bl	8007730 <HAL_RCCEx_GetPeriphCLKFreq>
 800a8c8:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800a8ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	f000 80e7 	beq.w	800aaa0 <UART_SetConfig+0x300>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a8d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8d6:	4a5a      	ldr	r2, [pc, #360]	@ (800aa40 <UART_SetConfig+0x2a0>)
 800a8d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a8dc:	461a      	mov	r2, r3
 800a8de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a8e0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a8e4:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a8e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8e8:	685a      	ldr	r2, [r3, #4]
 800a8ea:	4613      	mov	r3, r2
 800a8ec:	005b      	lsls	r3, r3, #1
 800a8ee:	4413      	add	r3, r2
 800a8f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a8f2:	429a      	cmp	r2, r3
 800a8f4:	d305      	bcc.n	800a902 <UART_SetConfig+0x162>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a8f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8f8:	685b      	ldr	r3, [r3, #4]
 800a8fa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a8fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a8fe:	429a      	cmp	r2, r3
 800a900:	d903      	bls.n	800a90a <UART_SetConfig+0x16a>
      {
        ret = HAL_ERROR;
 800a902:	2301      	movs	r3, #1
 800a904:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a908:	e048      	b.n	800a99c <UART_SetConfig+0x1fc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a90a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a90c:	2200      	movs	r2, #0
 800a90e:	61bb      	str	r3, [r7, #24]
 800a910:	61fa      	str	r2, [r7, #28]
 800a912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a916:	4a4a      	ldr	r2, [pc, #296]	@ (800aa40 <UART_SetConfig+0x2a0>)
 800a918:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a91c:	b29b      	uxth	r3, r3
 800a91e:	2200      	movs	r2, #0
 800a920:	613b      	str	r3, [r7, #16]
 800a922:	617a      	str	r2, [r7, #20]
 800a924:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a928:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a92c:	f7f7 ff3e 	bl	80027ac <__aeabi_uldivmod>
 800a930:	4602      	mov	r2, r0
 800a932:	460b      	mov	r3, r1
 800a934:	4610      	mov	r0, r2
 800a936:	4619      	mov	r1, r3
 800a938:	f04f 0200 	mov.w	r2, #0
 800a93c:	f04f 0300 	mov.w	r3, #0
 800a940:	020b      	lsls	r3, r1, #8
 800a942:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a946:	0202      	lsls	r2, r0, #8
 800a948:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a94a:	6849      	ldr	r1, [r1, #4]
 800a94c:	0849      	lsrs	r1, r1, #1
 800a94e:	2000      	movs	r0, #0
 800a950:	460c      	mov	r4, r1
 800a952:	4605      	mov	r5, r0
 800a954:	eb12 0804 	adds.w	r8, r2, r4
 800a958:	eb43 0905 	adc.w	r9, r3, r5
 800a95c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a95e:	685b      	ldr	r3, [r3, #4]
 800a960:	2200      	movs	r2, #0
 800a962:	60bb      	str	r3, [r7, #8]
 800a964:	60fa      	str	r2, [r7, #12]
 800a966:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a96a:	4640      	mov	r0, r8
 800a96c:	4649      	mov	r1, r9
 800a96e:	f7f7 ff1d 	bl	80027ac <__aeabi_uldivmod>
 800a972:	4602      	mov	r2, r0
 800a974:	460b      	mov	r3, r1
 800a976:	4613      	mov	r3, r2
 800a978:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a97a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a97c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a980:	d308      	bcc.n	800a994 <UART_SetConfig+0x1f4>
 800a982:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a984:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a988:	d204      	bcs.n	800a994 <UART_SetConfig+0x1f4>
        {
          huart->Instance->BRR = usartdiv;
 800a98a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a990:	60da      	str	r2, [r3, #12]
 800a992:	e003      	b.n	800a99c <UART_SetConfig+0x1fc>
        }
        else
        {
          ret = HAL_ERROR;
 800a994:	2301      	movs	r3, #1
 800a996:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800a99a:	e081      	b.n	800aaa0 <UART_SetConfig+0x300>
 800a99c:	e080      	b.n	800aaa0 <UART_SetConfig+0x300>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a99e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9a0:	69db      	ldr	r3, [r3, #28]
 800a9a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a9a6:	d14d      	bne.n	800aa44 <UART_SetConfig+0x2a4>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a9a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	603b      	str	r3, [r7, #0]
 800a9ae:	607a      	str	r2, [r7, #4]
 800a9b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a9b4:	f7fc febc 	bl	8007730 <HAL_RCCEx_GetPeriphCLKFreq>
 800a9b8:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a9ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d06f      	beq.n	800aaa0 <UART_SetConfig+0x300>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a9c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9c4:	4a1e      	ldr	r2, [pc, #120]	@ (800aa40 <UART_SetConfig+0x2a0>)
 800a9c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a9ca:	461a      	mov	r2, r3
 800a9cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a9ce:	fbb3 f3f2 	udiv	r3, r3, r2
 800a9d2:	005a      	lsls	r2, r3, #1
 800a9d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9d6:	685b      	ldr	r3, [r3, #4]
 800a9d8:	085b      	lsrs	r3, r3, #1
 800a9da:	441a      	add	r2, r3
 800a9dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9de:	685b      	ldr	r3, [r3, #4]
 800a9e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a9e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9e8:	2b0f      	cmp	r3, #15
 800a9ea:	d916      	bls.n	800aa1a <UART_SetConfig+0x27a>
 800a9ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a9f2:	d212      	bcs.n	800aa1a <UART_SetConfig+0x27a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a9f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9f6:	b29b      	uxth	r3, r3
 800a9f8:	f023 030f 	bic.w	r3, r3, #15
 800a9fc:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a9fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa00:	085b      	lsrs	r3, r3, #1
 800aa02:	b29b      	uxth	r3, r3
 800aa04:	f003 0307 	and.w	r3, r3, #7
 800aa08:	b29a      	uxth	r2, r3
 800aa0a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800aa0c:	4313      	orrs	r3, r2
 800aa0e:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800aa10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800aa16:	60da      	str	r2, [r3, #12]
 800aa18:	e042      	b.n	800aaa0 <UART_SetConfig+0x300>
      }
      else
      {
        ret = HAL_ERROR;
 800aa1a:	2301      	movs	r3, #1
 800aa1c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800aa20:	e03e      	b.n	800aaa0 <UART_SetConfig+0x300>
 800aa22:	bf00      	nop
 800aa24:	46002400 	.word	0x46002400
 800aa28:	cfff69f3 	.word	0xcfff69f3
 800aa2c:	56002400 	.word	0x56002400
 800aa30:	40013800 	.word	0x40013800
 800aa34:	40004800 	.word	0x40004800
 800aa38:	40004c00 	.word	0x40004c00
 800aa3c:	40005000 	.word	0x40005000
 800aa40:	080146b8 	.word	0x080146b8
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800aa44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aa46:	2200      	movs	r2, #0
 800aa48:	469a      	mov	sl, r3
 800aa4a:	4693      	mov	fp, r2
 800aa4c:	4650      	mov	r0, sl
 800aa4e:	4659      	mov	r1, fp
 800aa50:	f7fc fe6e 	bl	8007730 <HAL_RCCEx_GetPeriphCLKFreq>
 800aa54:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800aa56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d021      	beq.n	800aaa0 <UART_SetConfig+0x300>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aa5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa60:	4a1a      	ldr	r2, [pc, #104]	@ (800aacc <UART_SetConfig+0x32c>)
 800aa62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aa66:	461a      	mov	r2, r3
 800aa68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa6a:	fbb3 f2f2 	udiv	r2, r3, r2
 800aa6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa70:	685b      	ldr	r3, [r3, #4]
 800aa72:	085b      	lsrs	r3, r3, #1
 800aa74:	441a      	add	r2, r3
 800aa76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa78:	685b      	ldr	r3, [r3, #4]
 800aa7a:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aa80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa82:	2b0f      	cmp	r3, #15
 800aa84:	d909      	bls.n	800aa9a <UART_SetConfig+0x2fa>
 800aa86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa8c:	d205      	bcs.n	800aa9a <UART_SetConfig+0x2fa>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800aa8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa90:	b29a      	uxth	r2, r3
 800aa92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	60da      	str	r2, [r3, #12]
 800aa98:	e002      	b.n	800aaa0 <UART_SetConfig+0x300>
      }
      else
      {
        ret = HAL_ERROR;
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800aaa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaa2:	2201      	movs	r2, #1
 800aaa4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800aaa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaaa:	2201      	movs	r2, #1
 800aaac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800aab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aab2:	2200      	movs	r2, #0
 800aab4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800aab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aab8:	2200      	movs	r2, #0
 800aaba:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800aabc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800aac0:	4618      	mov	r0, r3
 800aac2:	3750      	adds	r7, #80	@ 0x50
 800aac4:	46bd      	mov	sp, r7
 800aac6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aaca:	bf00      	nop
 800aacc:	080146b8 	.word	0x080146b8

0800aad0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800aad0:	b480      	push	{r7}
 800aad2:	b083      	sub	sp, #12
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aadc:	f003 0308 	and.w	r3, r3, #8
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d00a      	beq.n	800aafa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	685b      	ldr	r3, [r3, #4]
 800aaea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	430a      	orrs	r2, r1
 800aaf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aafe:	f003 0301 	and.w	r3, r3, #1
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d00a      	beq.n	800ab1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	685b      	ldr	r3, [r3, #4]
 800ab0c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	430a      	orrs	r2, r1
 800ab1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab20:	f003 0302 	and.w	r3, r3, #2
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d00a      	beq.n	800ab3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	685b      	ldr	r3, [r3, #4]
 800ab2e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	430a      	orrs	r2, r1
 800ab3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab42:	f003 0304 	and.w	r3, r3, #4
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d00a      	beq.n	800ab60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	685b      	ldr	r3, [r3, #4]
 800ab50:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	430a      	orrs	r2, r1
 800ab5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab64:	f003 0310 	and.w	r3, r3, #16
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d00a      	beq.n	800ab82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	689b      	ldr	r3, [r3, #8]
 800ab72:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	430a      	orrs	r2, r1
 800ab80:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab86:	f003 0320 	and.w	r3, r3, #32
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d00a      	beq.n	800aba4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	689b      	ldr	r3, [r3, #8]
 800ab94:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	430a      	orrs	r2, r1
 800aba2:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aba8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800abac:	2b00      	cmp	r3, #0
 800abae:	d01a      	beq.n	800abe6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	685b      	ldr	r3, [r3, #4]
 800abb6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	430a      	orrs	r2, r1
 800abc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800abca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800abce:	d10a      	bne.n	800abe6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	685b      	ldr	r3, [r3, #4]
 800abd6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	430a      	orrs	r2, r1
 800abe4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d00a      	beq.n	800ac08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	685b      	ldr	r3, [r3, #4]
 800abf8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	430a      	orrs	r2, r1
 800ac06:	605a      	str	r2, [r3, #4]
  }
}
 800ac08:	bf00      	nop
 800ac0a:	370c      	adds	r7, #12
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac12:	4770      	bx	lr

0800ac14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b098      	sub	sp, #96	@ 0x60
 800ac18:	af02      	add	r7, sp, #8
 800ac1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	2200      	movs	r2, #0
 800ac20:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ac24:	f7f9 fc02 	bl	800442c <HAL_GetTick>
 800ac28:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	f003 0308 	and.w	r3, r3, #8
 800ac34:	2b08      	cmp	r3, #8
 800ac36:	d12f      	bne.n	800ac98 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ac38:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ac3c:	9300      	str	r3, [sp, #0]
 800ac3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ac40:	2200      	movs	r2, #0
 800ac42:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	f000 f88e 	bl	800ad68 <UART_WaitOnFlagUntilTimeout>
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d022      	beq.n	800ac98 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac5a:	e853 3f00 	ldrex	r3, [r3]
 800ac5e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ac60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ac66:	653b      	str	r3, [r7, #80]	@ 0x50
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	461a      	mov	r2, r3
 800ac6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ac70:	647b      	str	r3, [r7, #68]	@ 0x44
 800ac72:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac74:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ac76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ac78:	e841 2300 	strex	r3, r2, [r1]
 800ac7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ac7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d1e6      	bne.n	800ac52 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	2220      	movs	r2, #32
 800ac88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2200      	movs	r2, #0
 800ac90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ac94:	2303      	movs	r3, #3
 800ac96:	e063      	b.n	800ad60 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	f003 0304 	and.w	r3, r3, #4
 800aca2:	2b04      	cmp	r3, #4
 800aca4:	d149      	bne.n	800ad3a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aca6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800acaa:	9300      	str	r3, [sp, #0]
 800acac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800acae:	2200      	movs	r2, #0
 800acb0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800acb4:	6878      	ldr	r0, [r7, #4]
 800acb6:	f000 f857 	bl	800ad68 <UART_WaitOnFlagUntilTimeout>
 800acba:	4603      	mov	r3, r0
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d03c      	beq.n	800ad3a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acc8:	e853 3f00 	ldrex	r3, [r3]
 800accc:	623b      	str	r3, [r7, #32]
   return(result);
 800acce:	6a3b      	ldr	r3, [r7, #32]
 800acd0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800acd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	461a      	mov	r2, r3
 800acdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800acde:	633b      	str	r3, [r7, #48]	@ 0x30
 800ace0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ace2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ace4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ace6:	e841 2300 	strex	r3, r2, [r1]
 800acea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800acec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d1e6      	bne.n	800acc0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	3308      	adds	r3, #8
 800acf8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acfa:	693b      	ldr	r3, [r7, #16]
 800acfc:	e853 3f00 	ldrex	r3, [r3]
 800ad00:	60fb      	str	r3, [r7, #12]
   return(result);
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	f023 0301 	bic.w	r3, r3, #1
 800ad08:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	3308      	adds	r3, #8
 800ad10:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ad12:	61fa      	str	r2, [r7, #28]
 800ad14:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad16:	69b9      	ldr	r1, [r7, #24]
 800ad18:	69fa      	ldr	r2, [r7, #28]
 800ad1a:	e841 2300 	strex	r3, r2, [r1]
 800ad1e:	617b      	str	r3, [r7, #20]
   return(result);
 800ad20:	697b      	ldr	r3, [r7, #20]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d1e5      	bne.n	800acf2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	2220      	movs	r2, #32
 800ad2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	2200      	movs	r2, #0
 800ad32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ad36:	2303      	movs	r3, #3
 800ad38:	e012      	b.n	800ad60 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2220      	movs	r2, #32
 800ad3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2220      	movs	r2, #32
 800ad46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2200      	movs	r2, #0
 800ad54:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2200      	movs	r2, #0
 800ad5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ad5e:	2300      	movs	r3, #0
}
 800ad60:	4618      	mov	r0, r3
 800ad62:	3758      	adds	r7, #88	@ 0x58
 800ad64:	46bd      	mov	sp, r7
 800ad66:	bd80      	pop	{r7, pc}

0800ad68 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b084      	sub	sp, #16
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	60f8      	str	r0, [r7, #12]
 800ad70:	60b9      	str	r1, [r7, #8]
 800ad72:	603b      	str	r3, [r7, #0]
 800ad74:	4613      	mov	r3, r2
 800ad76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ad78:	e04f      	b.n	800ae1a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ad7a:	69bb      	ldr	r3, [r7, #24]
 800ad7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad80:	d04b      	beq.n	800ae1a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad82:	f7f9 fb53 	bl	800442c <HAL_GetTick>
 800ad86:	4602      	mov	r2, r0
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	1ad3      	subs	r3, r2, r3
 800ad8c:	69ba      	ldr	r2, [r7, #24]
 800ad8e:	429a      	cmp	r2, r3
 800ad90:	d302      	bcc.n	800ad98 <UART_WaitOnFlagUntilTimeout+0x30>
 800ad92:	69bb      	ldr	r3, [r7, #24]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d101      	bne.n	800ad9c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ad98:	2303      	movs	r3, #3
 800ad9a:	e04e      	b.n	800ae3a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	f003 0304 	and.w	r3, r3, #4
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d037      	beq.n	800ae1a <UART_WaitOnFlagUntilTimeout+0xb2>
 800adaa:	68bb      	ldr	r3, [r7, #8]
 800adac:	2b80      	cmp	r3, #128	@ 0x80
 800adae:	d034      	beq.n	800ae1a <UART_WaitOnFlagUntilTimeout+0xb2>
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	2b40      	cmp	r3, #64	@ 0x40
 800adb4:	d031      	beq.n	800ae1a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	69db      	ldr	r3, [r3, #28]
 800adbc:	f003 0308 	and.w	r3, r3, #8
 800adc0:	2b08      	cmp	r3, #8
 800adc2:	d110      	bne.n	800ade6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	2208      	movs	r2, #8
 800adca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800adcc:	68f8      	ldr	r0, [r7, #12]
 800adce:	f000 f838 	bl	800ae42 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	2208      	movs	r2, #8
 800add6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	2200      	movs	r2, #0
 800adde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800ade2:	2301      	movs	r3, #1
 800ade4:	e029      	b.n	800ae3a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	69db      	ldr	r3, [r3, #28]
 800adec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800adf0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800adf4:	d111      	bne.n	800ae1a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800adfe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ae00:	68f8      	ldr	r0, [r7, #12]
 800ae02:	f000 f81e 	bl	800ae42 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	2220      	movs	r2, #32
 800ae0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	2200      	movs	r2, #0
 800ae12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800ae16:	2303      	movs	r3, #3
 800ae18:	e00f      	b.n	800ae3a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	69da      	ldr	r2, [r3, #28]
 800ae20:	68bb      	ldr	r3, [r7, #8]
 800ae22:	4013      	ands	r3, r2
 800ae24:	68ba      	ldr	r2, [r7, #8]
 800ae26:	429a      	cmp	r2, r3
 800ae28:	bf0c      	ite	eq
 800ae2a:	2301      	moveq	r3, #1
 800ae2c:	2300      	movne	r3, #0
 800ae2e:	b2db      	uxtb	r3, r3
 800ae30:	461a      	mov	r2, r3
 800ae32:	79fb      	ldrb	r3, [r7, #7]
 800ae34:	429a      	cmp	r2, r3
 800ae36:	d0a0      	beq.n	800ad7a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ae38:	2300      	movs	r3, #0
}
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	3710      	adds	r7, #16
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	bd80      	pop	{r7, pc}

0800ae42 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ae42:	b480      	push	{r7}
 800ae44:	b095      	sub	sp, #84	@ 0x54
 800ae46:	af00      	add	r7, sp, #0
 800ae48:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae52:	e853 3f00 	ldrex	r3, [r3]
 800ae56:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ae58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae5a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ae5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	461a      	mov	r2, r3
 800ae66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ae68:	643b      	str	r3, [r7, #64]	@ 0x40
 800ae6a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae6c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ae6e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ae70:	e841 2300 	strex	r3, r2, [r1]
 800ae74:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ae76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d1e6      	bne.n	800ae4a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	3308      	adds	r3, #8
 800ae82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae84:	6a3b      	ldr	r3, [r7, #32]
 800ae86:	e853 3f00 	ldrex	r3, [r3]
 800ae8a:	61fb      	str	r3, [r7, #28]
   return(result);
 800ae8c:	69fb      	ldr	r3, [r7, #28]
 800ae8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ae92:	f023 0301 	bic.w	r3, r3, #1
 800ae96:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	3308      	adds	r3, #8
 800ae9e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aea0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800aea2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aea4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aea6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aea8:	e841 2300 	strex	r3, r2, [r1]
 800aeac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aeae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d1e3      	bne.n	800ae7c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aeb8:	2b01      	cmp	r3, #1
 800aeba:	d118      	bne.n	800aeee <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	e853 3f00 	ldrex	r3, [r3]
 800aec8:	60bb      	str	r3, [r7, #8]
   return(result);
 800aeca:	68bb      	ldr	r3, [r7, #8]
 800aecc:	f023 0310 	bic.w	r3, r3, #16
 800aed0:	647b      	str	r3, [r7, #68]	@ 0x44
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	461a      	mov	r2, r3
 800aed8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aeda:	61bb      	str	r3, [r7, #24]
 800aedc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aede:	6979      	ldr	r1, [r7, #20]
 800aee0:	69ba      	ldr	r2, [r7, #24]
 800aee2:	e841 2300 	strex	r3, r2, [r1]
 800aee6:	613b      	str	r3, [r7, #16]
   return(result);
 800aee8:	693b      	ldr	r3, [r7, #16]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d1e6      	bne.n	800aebc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	2220      	movs	r2, #32
 800aef2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	2200      	movs	r2, #0
 800aefa:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2200      	movs	r2, #0
 800af00:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800af02:	bf00      	nop
 800af04:	3754      	adds	r7, #84	@ 0x54
 800af06:	46bd      	mov	sp, r7
 800af08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0c:	4770      	bx	lr

0800af0e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800af0e:	b480      	push	{r7}
 800af10:	b085      	sub	sp, #20
 800af12:	af00      	add	r7, sp, #0
 800af14:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800af1c:	2b01      	cmp	r3, #1
 800af1e:	d101      	bne.n	800af24 <HAL_UARTEx_DisableFifoMode+0x16>
 800af20:	2302      	movs	r3, #2
 800af22:	e027      	b.n	800af74 <HAL_UARTEx_DisableFifoMode+0x66>
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2201      	movs	r2, #1
 800af28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2224      	movs	r2, #36	@ 0x24
 800af30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	681a      	ldr	r2, [r3, #0]
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	f022 0201 	bic.w	r2, r2, #1
 800af4a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800af52:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2200      	movs	r2, #0
 800af58:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	68fa      	ldr	r2, [r7, #12]
 800af60:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2220      	movs	r2, #32
 800af66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2200      	movs	r2, #0
 800af6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800af72:	2300      	movs	r3, #0
}
 800af74:	4618      	mov	r0, r3
 800af76:	3714      	adds	r7, #20
 800af78:	46bd      	mov	sp, r7
 800af7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7e:	4770      	bx	lr

0800af80 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b084      	sub	sp, #16
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
 800af88:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800af90:	2b01      	cmp	r3, #1
 800af92:	d101      	bne.n	800af98 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800af94:	2302      	movs	r3, #2
 800af96:	e02d      	b.n	800aff4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2201      	movs	r2, #1
 800af9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2224      	movs	r2, #36	@ 0x24
 800afa4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	681a      	ldr	r2, [r3, #0]
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	f022 0201 	bic.w	r2, r2, #1
 800afbe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	689b      	ldr	r3, [r3, #8]
 800afc6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	683a      	ldr	r2, [r7, #0]
 800afd0:	430a      	orrs	r2, r1
 800afd2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800afd4:	6878      	ldr	r0, [r7, #4]
 800afd6:	f000 f84f 	bl	800b078 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	68fa      	ldr	r2, [r7, #12]
 800afe0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	2220      	movs	r2, #32
 800afe6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	2200      	movs	r2, #0
 800afee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aff2:	2300      	movs	r3, #0
}
 800aff4:	4618      	mov	r0, r3
 800aff6:	3710      	adds	r7, #16
 800aff8:	46bd      	mov	sp, r7
 800affa:	bd80      	pop	{r7, pc}

0800affc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b084      	sub	sp, #16
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
 800b004:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b00c:	2b01      	cmp	r3, #1
 800b00e:	d101      	bne.n	800b014 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b010:	2302      	movs	r3, #2
 800b012:	e02d      	b.n	800b070 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2201      	movs	r2, #1
 800b018:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2224      	movs	r2, #36	@ 0x24
 800b020:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	681a      	ldr	r2, [r3, #0]
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	f022 0201 	bic.w	r2, r2, #1
 800b03a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	689b      	ldr	r3, [r3, #8]
 800b042:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	683a      	ldr	r2, [r7, #0]
 800b04c:	430a      	orrs	r2, r1
 800b04e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b050:	6878      	ldr	r0, [r7, #4]
 800b052:	f000 f811 	bl	800b078 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	68fa      	ldr	r2, [r7, #12]
 800b05c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	2220      	movs	r2, #32
 800b062:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	2200      	movs	r2, #0
 800b06a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b06e:	2300      	movs	r3, #0
}
 800b070:	4618      	mov	r0, r3
 800b072:	3710      	adds	r7, #16
 800b074:	46bd      	mov	sp, r7
 800b076:	bd80      	pop	{r7, pc}

0800b078 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b078:	b480      	push	{r7}
 800b07a:	b085      	sub	sp, #20
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b084:	2b00      	cmp	r3, #0
 800b086:	d108      	bne.n	800b09a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2201      	movs	r2, #1
 800b08c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	2201      	movs	r2, #1
 800b094:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b098:	e031      	b.n	800b0fe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b09a:	2308      	movs	r3, #8
 800b09c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b09e:	2308      	movs	r3, #8
 800b0a0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	689b      	ldr	r3, [r3, #8]
 800b0a8:	0e5b      	lsrs	r3, r3, #25
 800b0aa:	b2db      	uxtb	r3, r3
 800b0ac:	f003 0307 	and.w	r3, r3, #7
 800b0b0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	689b      	ldr	r3, [r3, #8]
 800b0b8:	0f5b      	lsrs	r3, r3, #29
 800b0ba:	b2db      	uxtb	r3, r3
 800b0bc:	f003 0307 	and.w	r3, r3, #7
 800b0c0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b0c2:	7bbb      	ldrb	r3, [r7, #14]
 800b0c4:	7b3a      	ldrb	r2, [r7, #12]
 800b0c6:	4911      	ldr	r1, [pc, #68]	@ (800b10c <UARTEx_SetNbDataToProcess+0x94>)
 800b0c8:	5c8a      	ldrb	r2, [r1, r2]
 800b0ca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b0ce:	7b3a      	ldrb	r2, [r7, #12]
 800b0d0:	490f      	ldr	r1, [pc, #60]	@ (800b110 <UARTEx_SetNbDataToProcess+0x98>)
 800b0d2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b0d4:	fb93 f3f2 	sdiv	r3, r3, r2
 800b0d8:	b29a      	uxth	r2, r3
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b0e0:	7bfb      	ldrb	r3, [r7, #15]
 800b0e2:	7b7a      	ldrb	r2, [r7, #13]
 800b0e4:	4909      	ldr	r1, [pc, #36]	@ (800b10c <UARTEx_SetNbDataToProcess+0x94>)
 800b0e6:	5c8a      	ldrb	r2, [r1, r2]
 800b0e8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b0ec:	7b7a      	ldrb	r2, [r7, #13]
 800b0ee:	4908      	ldr	r1, [pc, #32]	@ (800b110 <UARTEx_SetNbDataToProcess+0x98>)
 800b0f0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b0f2:	fb93 f3f2 	sdiv	r3, r3, r2
 800b0f6:	b29a      	uxth	r2, r3
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b0fe:	bf00      	nop
 800b100:	3714      	adds	r7, #20
 800b102:	46bd      	mov	sp, r7
 800b104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b108:	4770      	bx	lr
 800b10a:	bf00      	nop
 800b10c:	080146d0 	.word	0x080146d0
 800b110:	080146d8 	.word	0x080146d8

0800b114 <BoardInitPeriph>:
//{
//    SystemWakeupTimeCalibrated = true;
//}

void BoardInitPeriph( void )
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b082      	sub	sp, #8
 800b118:	af02      	add	r7, sp, #8
    /* Init the GPIO extender pins */
#if ( USE_POTENTIOMETER == 0 )
    GpioInit( &Led1, LED_1, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 1 );
#endif
    GpioInit( &Led2, LED_2, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 1 );
 800b11a:	2301      	movs	r3, #1
 800b11c:	9301      	str	r3, [sp, #4]
 800b11e:	2300      	movs	r3, #0
 800b120:	9300      	str	r3, [sp, #0]
 800b122:	2300      	movs	r3, #0
 800b124:	2201      	movs	r2, #1
 800b126:	2100      	movs	r1, #0
 800b128:	4812      	ldr	r0, [pc, #72]	@ (800b174 <BoardInitPeriph+0x60>)
 800b12a:	f000 fb4b 	bl	800b7c4 <GpioInit>
    GpioInit( &Led3, LED_3, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 1 );
 800b12e:	2301      	movs	r3, #1
 800b130:	9301      	str	r3, [sp, #4]
 800b132:	2300      	movs	r3, #0
 800b134:	9300      	str	r3, [sp, #0]
 800b136:	2300      	movs	r3, #0
 800b138:	2201      	movs	r2, #1
 800b13a:	2101      	movs	r1, #1
 800b13c:	480e      	ldr	r0, [pc, #56]	@ (800b178 <BoardInitPeriph+0x64>)
 800b13e:	f000 fb41 	bl	800b7c4 <GpioInit>
    GpioInit( &Led4, LED_4, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 1 );
 800b142:	2301      	movs	r3, #1
 800b144:	9301      	str	r3, [sp, #4]
 800b146:	2300      	movs	r3, #0
 800b148:	9300      	str	r3, [sp, #0]
 800b14a:	2300      	movs	r3, #0
 800b14c:	2201      	movs	r2, #1
 800b14e:	2108      	movs	r1, #8
 800b150:	480a      	ldr	r0, [pc, #40]	@ (800b17c <BoardInitPeriph+0x68>)
 800b152:	f000 fb37 	bl	800b7c4 <GpioInit>

    // Switch LED 1, 2, 3, 4 OFF
#if ( USE_POTENTIOMETER == 0 )
    GpioWrite( &Led1, 0 );
#endif
    GpioWrite( &Led2, 0 );
 800b156:	2100      	movs	r1, #0
 800b158:	4806      	ldr	r0, [pc, #24]	@ (800b174 <BoardInitPeriph+0x60>)
 800b15a:	f000 fb72 	bl	800b842 <GpioWrite>
    GpioWrite( &Led3, 0 );
 800b15e:	2100      	movs	r1, #0
 800b160:	4805      	ldr	r0, [pc, #20]	@ (800b178 <BoardInitPeriph+0x64>)
 800b162:	f000 fb6e 	bl	800b842 <GpioWrite>
    GpioWrite( &Led4, 0 );
 800b166:	2100      	movs	r1, #0
 800b168:	4804      	ldr	r0, [pc, #16]	@ (800b17c <BoardInitPeriph+0x68>)
 800b16a:	f000 fb6a 	bl	800b842 <GpioWrite>
}
 800b16e:	bf00      	nop
 800b170:	46bd      	mov	sp, r7
 800b172:	bd80      	pop	{r7, pc}
 800b174:	20000404 	.word	0x20000404
 800b178:	20000410 	.word	0x20000410
 800b17c:	2000041c 	.word	0x2000041c

0800b180 <BoardInitMcu>:

void BoardInitMcu( void )
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b082      	sub	sp, #8
 800b184:	af02      	add	r7, sp, #8
    if( McuInitialized == false )
 800b186:	4b10      	ldr	r3, [pc, #64]	@ (800b1c8 <BoardInitMcu+0x48>)
 800b188:	781b      	ldrb	r3, [r3, #0]
 800b18a:	f083 0301 	eor.w	r3, r3, #1
 800b18e:	b2db      	uxtb	r3, r3
 800b190:	2b00      	cmp	r3, #0
 800b192:	d001      	beq.n	800b198 <BoardInitMcu+0x18>
#endif
//        HAL_Init( );

//        SystemClockConfig( );

        RtcInit( );
 800b194:	f000 fb6a 	bl	800b86c <RtcInit>
//        SystemClockReConfig( );
    }

//    AdcInit( &Adc, POTI );

    SpiInit( &SX1276.Spi, RADIO_MOSI, RADIO_MISO, RADIO_SCLK, NC );
 800b198:	f04f 33ff 	mov.w	r3, #4294967295
 800b19c:	9300      	str	r3, [sp, #0]
 800b19e:	2305      	movs	r3, #5
 800b1a0:	2206      	movs	r2, #6
 800b1a2:	2107      	movs	r1, #7
 800b1a4:	4809      	ldr	r0, [pc, #36]	@ (800b1cc <BoardInitMcu+0x4c>)
 800b1a6:	f001 f82f 	bl	800c208 <SpiInit>
    SX1276IoInit( );
 800b1aa:	f001 f91f 	bl	800c3ec <SX1276IoInit>

    if( McuInitialized == false )
 800b1ae:	4b06      	ldr	r3, [pc, #24]	@ (800b1c8 <BoardInitMcu+0x48>)
 800b1b0:	781b      	ldrb	r3, [r3, #0]
 800b1b2:	f083 0301 	eor.w	r3, r3, #1
 800b1b6:	b2db      	uxtb	r3, r3
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d002      	beq.n	800b1c2 <BoardInitMcu+0x42>
    {
        McuInitialized = true;
 800b1bc:	4b02      	ldr	r3, [pc, #8]	@ (800b1c8 <BoardInitMcu+0x48>)
 800b1be:	2201      	movs	r2, #1
 800b1c0:	701a      	strb	r2, [r3, #0]
//        if( GetBoardPowerSource( ) == BATTERY_POWER )
//        {
//            CalibrateSystemWakeupTime( );
//        }
    }
}
 800b1c2:	bf00      	nop
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	bd80      	pop	{r7, pc}
 800b1c8:	20000428 	.word	0x20000428
 800b1cc:	20000648 	.word	0x20000648

0800b1d0 <DelayMs>:
{
    DelayMs( s * 1000.0f );
}

void DelayMs( uint32_t ms )
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b082      	sub	sp, #8
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
    HAL_Delay( ms );
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	f7f9 f933 	bl	8004444 <HAL_Delay>
}
 800b1de:	bf00      	nop
 800b1e0:	3708      	adds	r7, #8
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	bd80      	pop	{r7, pc}
	...

0800b1e8 <GpioMcuInit>:
#include "gpio-board.h"

static GpioIrqHandler *GpioIrq[16];

void GpioMcuInit( Gpio_t *obj, PinNames pin, PinModes mode, PinConfigs config, PinTypes type, uint32_t value )
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b08c      	sub	sp, #48	@ 0x30
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
 800b1f0:	4608      	mov	r0, r1
 800b1f2:	4611      	mov	r1, r2
 800b1f4:	461a      	mov	r2, r3
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	70fb      	strb	r3, [r7, #3]
 800b1fa:	460b      	mov	r3, r1
 800b1fc:	70bb      	strb	r3, [r7, #2]
 800b1fe:	4613      	mov	r3, r2
 800b200:	707b      	strb	r3, [r7, #1]
    GPIO_InitTypeDef GPIO_InitStructure;

    if( pin == NC )
 800b202:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b20a:	f000 80c3 	beq.w	800b394 <GpioMcuInit+0x1ac>
    {
        return;
    }
    obj->pin = pin;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	78fa      	ldrb	r2, [r7, #3]
 800b212:	701a      	strb	r2, [r3, #0]
    obj->pinIndex = ( 0x01 << ( obj->pin & 0x0F ) );
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	f993 3000 	ldrsb.w	r3, [r3]
 800b21a:	b2db      	uxtb	r3, r3
 800b21c:	f003 030f 	and.w	r3, r3, #15
 800b220:	2201      	movs	r2, #1
 800b222:	fa02 f303 	lsl.w	r3, r2, r3
 800b226:	b29a      	uxth	r2, r3
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	805a      	strh	r2, [r3, #2]

    if( ( obj->pin & 0xF0 ) == 0x00 )
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	f993 3000 	ldrsb.w	r3, [r3]
 800b232:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b236:	2b00      	cmp	r3, #0
 800b238:	d112      	bne.n	800b260 <GpioMcuInit+0x78>
    {
        obj->port = GPIOA;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	4a57      	ldr	r2, [pc, #348]	@ (800b39c <GpioMcuInit+0x1b4>)
 800b23e:	605a      	str	r2, [r3, #4]
        __HAL_RCC_GPIOA_CLK_ENABLE( );
 800b240:	4b57      	ldr	r3, [pc, #348]	@ (800b3a0 <GpioMcuInit+0x1b8>)
 800b242:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b246:	4a56      	ldr	r2, [pc, #344]	@ (800b3a0 <GpioMcuInit+0x1b8>)
 800b248:	f043 0301 	orr.w	r3, r3, #1
 800b24c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800b250:	4b53      	ldr	r3, [pc, #332]	@ (800b3a0 <GpioMcuInit+0x1b8>)
 800b252:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b256:	f003 0301 	and.w	r3, r3, #1
 800b25a:	61bb      	str	r3, [r7, #24]
 800b25c:	69bb      	ldr	r3, [r7, #24]
 800b25e:	e05f      	b.n	800b320 <GpioMcuInit+0x138>
    }
    else if( ( obj->pin & 0xF0 ) == 0x10 )
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	f993 3000 	ldrsb.w	r3, [r3]
 800b266:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b26a:	2b10      	cmp	r3, #16
 800b26c:	d112      	bne.n	800b294 <GpioMcuInit+0xac>
    {
        obj->port = GPIOB;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	4a4c      	ldr	r2, [pc, #304]	@ (800b3a4 <GpioMcuInit+0x1bc>)
 800b272:	605a      	str	r2, [r3, #4]
        __HAL_RCC_GPIOB_CLK_ENABLE( );
 800b274:	4b4a      	ldr	r3, [pc, #296]	@ (800b3a0 <GpioMcuInit+0x1b8>)
 800b276:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b27a:	4a49      	ldr	r2, [pc, #292]	@ (800b3a0 <GpioMcuInit+0x1b8>)
 800b27c:	f043 0302 	orr.w	r3, r3, #2
 800b280:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800b284:	4b46      	ldr	r3, [pc, #280]	@ (800b3a0 <GpioMcuInit+0x1b8>)
 800b286:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b28a:	f003 0302 	and.w	r3, r3, #2
 800b28e:	617b      	str	r3, [r7, #20]
 800b290:	697b      	ldr	r3, [r7, #20]
 800b292:	e045      	b.n	800b320 <GpioMcuInit+0x138>
    }
    else if( ( obj->pin & 0xF0 ) == 0x20 )
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	f993 3000 	ldrsb.w	r3, [r3]
 800b29a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b29e:	2b20      	cmp	r3, #32
 800b2a0:	d112      	bne.n	800b2c8 <GpioMcuInit+0xe0>
    {
        obj->port = GPIOC;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	4a40      	ldr	r2, [pc, #256]	@ (800b3a8 <GpioMcuInit+0x1c0>)
 800b2a6:	605a      	str	r2, [r3, #4]
        __HAL_RCC_GPIOC_CLK_ENABLE( );
 800b2a8:	4b3d      	ldr	r3, [pc, #244]	@ (800b3a0 <GpioMcuInit+0x1b8>)
 800b2aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b2ae:	4a3c      	ldr	r2, [pc, #240]	@ (800b3a0 <GpioMcuInit+0x1b8>)
 800b2b0:	f043 0304 	orr.w	r3, r3, #4
 800b2b4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800b2b8:	4b39      	ldr	r3, [pc, #228]	@ (800b3a0 <GpioMcuInit+0x1b8>)
 800b2ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b2be:	f003 0304 	and.w	r3, r3, #4
 800b2c2:	613b      	str	r3, [r7, #16]
 800b2c4:	693b      	ldr	r3, [r7, #16]
 800b2c6:	e02b      	b.n	800b320 <GpioMcuInit+0x138>
    }
    else if( ( obj->pin & 0xF0 ) == 0x30 )
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	f993 3000 	ldrsb.w	r3, [r3]
 800b2ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b2d2:	2b30      	cmp	r3, #48	@ 0x30
 800b2d4:	d112      	bne.n	800b2fc <GpioMcuInit+0x114>
    {
        obj->port = GPIOD;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	4a34      	ldr	r2, [pc, #208]	@ (800b3ac <GpioMcuInit+0x1c4>)
 800b2da:	605a      	str	r2, [r3, #4]
        __HAL_RCC_GPIOD_CLK_ENABLE( );
 800b2dc:	4b30      	ldr	r3, [pc, #192]	@ (800b3a0 <GpioMcuInit+0x1b8>)
 800b2de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b2e2:	4a2f      	ldr	r2, [pc, #188]	@ (800b3a0 <GpioMcuInit+0x1b8>)
 800b2e4:	f043 0308 	orr.w	r3, r3, #8
 800b2e8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800b2ec:	4b2c      	ldr	r3, [pc, #176]	@ (800b3a0 <GpioMcuInit+0x1b8>)
 800b2ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b2f2:	f003 0308 	and.w	r3, r3, #8
 800b2f6:	60fb      	str	r3, [r7, #12]
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	e011      	b.n	800b320 <GpioMcuInit+0x138>
    }
    else
    {
        obj->port = GPIOH;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	4a2c      	ldr	r2, [pc, #176]	@ (800b3b0 <GpioMcuInit+0x1c8>)
 800b300:	605a      	str	r2, [r3, #4]
        __HAL_RCC_GPIOH_CLK_ENABLE( );
 800b302:	4b27      	ldr	r3, [pc, #156]	@ (800b3a0 <GpioMcuInit+0x1b8>)
 800b304:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b308:	4a25      	ldr	r2, [pc, #148]	@ (800b3a0 <GpioMcuInit+0x1b8>)
 800b30a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b30e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800b312:	4b23      	ldr	r3, [pc, #140]	@ (800b3a0 <GpioMcuInit+0x1b8>)
 800b314:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b318:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b31c:	60bb      	str	r3, [r7, #8]
 800b31e:	68bb      	ldr	r3, [r7, #8]
    }

    GPIO_InitStructure.Pin =  obj->pinIndex ;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	885b      	ldrh	r3, [r3, #2]
 800b324:	61fb      	str	r3, [r7, #28]
    GPIO_InitStructure.Pull = type;
 800b326:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800b32a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 800b32c:	2302      	movs	r3, #2
 800b32e:	62bb      	str	r3, [r7, #40]	@ 0x28

    if( mode == PIN_INPUT )
 800b330:	78bb      	ldrb	r3, [r7, #2]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d102      	bne.n	800b33c <GpioMcuInit+0x154>
    {
        GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 800b336:	2300      	movs	r3, #0
 800b338:	623b      	str	r3, [r7, #32]
 800b33a:	e01b      	b.n	800b374 <GpioMcuInit+0x18c>
    }
    else if( mode == PIN_ANALOGIC )
 800b33c:	78bb      	ldrb	r3, [r7, #2]
 800b33e:	2b03      	cmp	r3, #3
 800b340:	d102      	bne.n	800b348 <GpioMcuInit+0x160>
    {
        GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
 800b342:	2303      	movs	r3, #3
 800b344:	623b      	str	r3, [r7, #32]
 800b346:	e015      	b.n	800b374 <GpioMcuInit+0x18c>
    }
    else if( mode == PIN_ALTERNATE_FCT )
 800b348:	78bb      	ldrb	r3, [r7, #2]
 800b34a:	2b02      	cmp	r3, #2
 800b34c:	d10a      	bne.n	800b364 <GpioMcuInit+0x17c>
    {
        if( config == PIN_OPEN_DRAIN )
 800b34e:	787b      	ldrb	r3, [r7, #1]
 800b350:	2b01      	cmp	r3, #1
 800b352:	d102      	bne.n	800b35a <GpioMcuInit+0x172>
        {
            GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 800b354:	2312      	movs	r3, #18
 800b356:	623b      	str	r3, [r7, #32]
 800b358:	e001      	b.n	800b35e <GpioMcuInit+0x176>
        }
        else
        {
            GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800b35a:	2302      	movs	r3, #2
 800b35c:	623b      	str	r3, [r7, #32]
        }
        GPIO_InitStructure.Alternate = value;
 800b35e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b360:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b362:	e007      	b.n	800b374 <GpioMcuInit+0x18c>
    }
    else // mode ouptut
    {
        if( config == PIN_OPEN_DRAIN )
 800b364:	787b      	ldrb	r3, [r7, #1]
 800b366:	2b01      	cmp	r3, #1
 800b368:	d102      	bne.n	800b370 <GpioMcuInit+0x188>
        {
            GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_OD;
 800b36a:	2311      	movs	r3, #17
 800b36c:	623b      	str	r3, [r7, #32]
 800b36e:	e001      	b.n	800b374 <GpioMcuInit+0x18c>
        }
        else
        {
            GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800b370:	2301      	movs	r3, #1
 800b372:	623b      	str	r3, [r7, #32]
        }
    }

    HAL_GPIO_Init( obj->port, &GPIO_InitStructure );
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	685b      	ldr	r3, [r3, #4]
 800b378:	f107 021c 	add.w	r2, r7, #28
 800b37c:	4611      	mov	r1, r2
 800b37e:	4618      	mov	r0, r3
 800b380:	f7f9 fb0a 	bl	8004998 <HAL_GPIO_Init>

    // Sets initial output value
    if( mode == PIN_OUTPUT )
 800b384:	78bb      	ldrb	r3, [r7, #2]
 800b386:	2b01      	cmp	r3, #1
 800b388:	d105      	bne.n	800b396 <GpioMcuInit+0x1ae>
    {
        GpioMcuWrite( obj, value );
 800b38a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b38c:	6878      	ldr	r0, [r7, #4]
 800b38e:	f000 f953 	bl	800b638 <GpioMcuWrite>
 800b392:	e000      	b.n	800b396 <GpioMcuInit+0x1ae>
        return;
 800b394:	bf00      	nop
    }
}
 800b396:	3730      	adds	r7, #48	@ 0x30
 800b398:	46bd      	mov	sp, r7
 800b39a:	bd80      	pop	{r7, pc}
 800b39c:	42020000 	.word	0x42020000
 800b3a0:	46020c00 	.word	0x46020c00
 800b3a4:	42020400 	.word	0x42020400
 800b3a8:	42020800 	.word	0x42020800
 800b3ac:	42020c00 	.word	0x42020c00
 800b3b0:	42021c00 	.word	0x42021c00

0800b3b4 <GpioMcuSetInterrupt>:

void GpioMcuSetInterrupt( Gpio_t *obj, IrqModes irqMode, IrqPriorities irqPriority, GpioIrqHandler *irqHandler )
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b08c      	sub	sp, #48	@ 0x30
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	60f8      	str	r0, [r7, #12]
 800b3bc:	607b      	str	r3, [r7, #4]
 800b3be:	460b      	mov	r3, r1
 800b3c0:	72fb      	strb	r3, [r7, #11]
 800b3c2:	4613      	mov	r3, r2
 800b3c4:	72bb      	strb	r3, [r7, #10]
    uint32_t priority = 0;
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    IRQn_Type IRQnb = EXTI0_IRQn;
 800b3ca:	230b      	movs	r3, #11
 800b3cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    GPIO_InitTypeDef   GPIO_InitStructure;

    if( irqHandler == NULL )
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	f000 8123 	beq.w	800b61e <GpioMcuSetInterrupt+0x26a>
    {
        return;
    }

    GPIO_InitStructure.Pin =  obj->pinIndex;
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	885b      	ldrh	r3, [r3, #2]
 800b3dc:	617b      	str	r3, [r7, #20]

    if( irqMode == IRQ_RISING_EDGE )
 800b3de:	7afb      	ldrb	r3, [r7, #11]
 800b3e0:	2b01      	cmp	r3, #1
 800b3e2:	d102      	bne.n	800b3ea <GpioMcuSetInterrupt+0x36>
    {
        GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 800b3e4:	4b90      	ldr	r3, [pc, #576]	@ (800b628 <GpioMcuSetInterrupt+0x274>)
 800b3e6:	61bb      	str	r3, [r7, #24]
 800b3e8:	e007      	b.n	800b3fa <GpioMcuSetInterrupt+0x46>
    }
    else if( irqMode == IRQ_FALLING_EDGE )
 800b3ea:	7afb      	ldrb	r3, [r7, #11]
 800b3ec:	2b02      	cmp	r3, #2
 800b3ee:	d102      	bne.n	800b3f6 <GpioMcuSetInterrupt+0x42>
    {
        GPIO_InitStructure.Mode = GPIO_MODE_IT_FALLING;
 800b3f0:	4b8e      	ldr	r3, [pc, #568]	@ (800b62c <GpioMcuSetInterrupt+0x278>)
 800b3f2:	61bb      	str	r3, [r7, #24]
 800b3f4:	e001      	b.n	800b3fa <GpioMcuSetInterrupt+0x46>
    }
    else
    {
        GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING_FALLING;
 800b3f6:	4b8e      	ldr	r3, [pc, #568]	@ (800b630 <GpioMcuSetInterrupt+0x27c>)
 800b3f8:	61bb      	str	r3, [r7, #24]
    }

    GPIO_InitStructure.Pull = GPIO_NOPULL;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 800b3fe:	2302      	movs	r3, #2
 800b400:	623b      	str	r3, [r7, #32]

    HAL_GPIO_Init( obj->port, &GPIO_InitStructure );
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	685b      	ldr	r3, [r3, #4]
 800b406:	f107 0214 	add.w	r2, r7, #20
 800b40a:	4611      	mov	r1, r2
 800b40c:	4618      	mov	r0, r3
 800b40e:	f7f9 fac3 	bl	8004998 <HAL_GPIO_Init>

    switch( irqPriority )
 800b412:	7abb      	ldrb	r3, [r7, #10]
 800b414:	2b03      	cmp	r3, #3
 800b416:	d00f      	beq.n	800b438 <GpioMcuSetInterrupt+0x84>
 800b418:	2b03      	cmp	r3, #3
 800b41a:	dc10      	bgt.n	800b43e <GpioMcuSetInterrupt+0x8a>
 800b41c:	2b01      	cmp	r3, #1
 800b41e:	dc02      	bgt.n	800b426 <GpioMcuSetInterrupt+0x72>
 800b420:	2b00      	cmp	r3, #0
 800b422:	da03      	bge.n	800b42c <GpioMcuSetInterrupt+0x78>
 800b424:	e00b      	b.n	800b43e <GpioMcuSetInterrupt+0x8a>
 800b426:	2b02      	cmp	r3, #2
 800b428:	d003      	beq.n	800b432 <GpioMcuSetInterrupt+0x7e>
 800b42a:	e008      	b.n	800b43e <GpioMcuSetInterrupt+0x8a>
    {
    case IRQ_VERY_LOW_PRIORITY:
    case IRQ_LOW_PRIORITY:
        priority = 3;
 800b42c:	2303      	movs	r3, #3
 800b42e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800b430:	e008      	b.n	800b444 <GpioMcuSetInterrupt+0x90>
    case IRQ_MEDIUM_PRIORITY:
        priority = 2;
 800b432:	2302      	movs	r3, #2
 800b434:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800b436:	e005      	b.n	800b444 <GpioMcuSetInterrupt+0x90>
    case IRQ_HIGH_PRIORITY:
        priority = 1;
 800b438:	2301      	movs	r3, #1
 800b43a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800b43c:	e002      	b.n	800b444 <GpioMcuSetInterrupt+0x90>
    case IRQ_VERY_HIGH_PRIORITY:
    default:
        priority = 0;
 800b43e:	2300      	movs	r3, #0
 800b440:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800b442:	bf00      	nop
    }

    switch( obj->pinIndex )		// PK: definicja EXTI rozszerzona do pełnych 16 przerwań
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	885b      	ldrh	r3, [r3, #2]
 800b448:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b44c:	f000 80cb 	beq.w	800b5e6 <GpioMcuSetInterrupt+0x232>
 800b450:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b454:	f300 80cb 	bgt.w	800b5ee <GpioMcuSetInterrupt+0x23a>
 800b458:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b45c:	f000 80bf 	beq.w	800b5de <GpioMcuSetInterrupt+0x22a>
 800b460:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b464:	f300 80c3 	bgt.w	800b5ee <GpioMcuSetInterrupt+0x23a>
 800b468:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b46c:	f000 80b3 	beq.w	800b5d6 <GpioMcuSetInterrupt+0x222>
 800b470:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b474:	f300 80bb 	bgt.w	800b5ee <GpioMcuSetInterrupt+0x23a>
 800b478:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b47c:	f000 80a7 	beq.w	800b5ce <GpioMcuSetInterrupt+0x21a>
 800b480:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b484:	f300 80b3 	bgt.w	800b5ee <GpioMcuSetInterrupt+0x23a>
 800b488:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b48c:	f000 809b 	beq.w	800b5c6 <GpioMcuSetInterrupt+0x212>
 800b490:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b494:	f300 80ab 	bgt.w	800b5ee <GpioMcuSetInterrupt+0x23a>
 800b498:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b49c:	f000 808f 	beq.w	800b5be <GpioMcuSetInterrupt+0x20a>
 800b4a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b4a4:	f300 80a3 	bgt.w	800b5ee <GpioMcuSetInterrupt+0x23a>
 800b4a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b4ac:	f000 8083 	beq.w	800b5b6 <GpioMcuSetInterrupt+0x202>
 800b4b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b4b4:	f300 809b 	bgt.w	800b5ee <GpioMcuSetInterrupt+0x23a>
 800b4b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b4bc:	d077      	beq.n	800b5ae <GpioMcuSetInterrupt+0x1fa>
 800b4be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b4c2:	f300 8094 	bgt.w	800b5ee <GpioMcuSetInterrupt+0x23a>
 800b4c6:	2b80      	cmp	r3, #128	@ 0x80
 800b4c8:	d06d      	beq.n	800b5a6 <GpioMcuSetInterrupt+0x1f2>
 800b4ca:	2b80      	cmp	r3, #128	@ 0x80
 800b4cc:	f300 808f 	bgt.w	800b5ee <GpioMcuSetInterrupt+0x23a>
 800b4d0:	2b20      	cmp	r3, #32
 800b4d2:	dc49      	bgt.n	800b568 <GpioMcuSetInterrupt+0x1b4>
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	f340 808a 	ble.w	800b5ee <GpioMcuSetInterrupt+0x23a>
 800b4da:	3b01      	subs	r3, #1
 800b4dc:	2b1f      	cmp	r3, #31
 800b4de:	f200 8086 	bhi.w	800b5ee <GpioMcuSetInterrupt+0x23a>
 800b4e2:	a201      	add	r2, pc, #4	@ (adr r2, 800b4e8 <GpioMcuSetInterrupt+0x134>)
 800b4e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4e8:	0800b56f 	.word	0x0800b56f
 800b4ec:	0800b577 	.word	0x0800b577
 800b4f0:	0800b5ef 	.word	0x0800b5ef
 800b4f4:	0800b57f 	.word	0x0800b57f
 800b4f8:	0800b5ef 	.word	0x0800b5ef
 800b4fc:	0800b5ef 	.word	0x0800b5ef
 800b500:	0800b5ef 	.word	0x0800b5ef
 800b504:	0800b587 	.word	0x0800b587
 800b508:	0800b5ef 	.word	0x0800b5ef
 800b50c:	0800b5ef 	.word	0x0800b5ef
 800b510:	0800b5ef 	.word	0x0800b5ef
 800b514:	0800b5ef 	.word	0x0800b5ef
 800b518:	0800b5ef 	.word	0x0800b5ef
 800b51c:	0800b5ef 	.word	0x0800b5ef
 800b520:	0800b5ef 	.word	0x0800b5ef
 800b524:	0800b58f 	.word	0x0800b58f
 800b528:	0800b5ef 	.word	0x0800b5ef
 800b52c:	0800b5ef 	.word	0x0800b5ef
 800b530:	0800b5ef 	.word	0x0800b5ef
 800b534:	0800b5ef 	.word	0x0800b5ef
 800b538:	0800b5ef 	.word	0x0800b5ef
 800b53c:	0800b5ef 	.word	0x0800b5ef
 800b540:	0800b5ef 	.word	0x0800b5ef
 800b544:	0800b5ef 	.word	0x0800b5ef
 800b548:	0800b5ef 	.word	0x0800b5ef
 800b54c:	0800b5ef 	.word	0x0800b5ef
 800b550:	0800b5ef 	.word	0x0800b5ef
 800b554:	0800b5ef 	.word	0x0800b5ef
 800b558:	0800b5ef 	.word	0x0800b5ef
 800b55c:	0800b5ef 	.word	0x0800b5ef
 800b560:	0800b5ef 	.word	0x0800b5ef
 800b564:	0800b597 	.word	0x0800b597
 800b568:	2b40      	cmp	r3, #64	@ 0x40
 800b56a:	d018      	beq.n	800b59e <GpioMcuSetInterrupt+0x1ea>
        break;
    case GPIO_PIN_15:
        IRQnb = EXTI15_IRQn;
        break;
    default:
        break;
 800b56c:	e03f      	b.n	800b5ee <GpioMcuSetInterrupt+0x23a>
        IRQnb = EXTI0_IRQn;
 800b56e:	230b      	movs	r3, #11
 800b570:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 800b574:	e03c      	b.n	800b5f0 <GpioMcuSetInterrupt+0x23c>
        IRQnb = EXTI1_IRQn;
 800b576:	230c      	movs	r3, #12
 800b578:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 800b57c:	e038      	b.n	800b5f0 <GpioMcuSetInterrupt+0x23c>
        IRQnb = EXTI2_IRQn;
 800b57e:	230d      	movs	r3, #13
 800b580:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 800b584:	e034      	b.n	800b5f0 <GpioMcuSetInterrupt+0x23c>
        IRQnb = EXTI3_IRQn;
 800b586:	230e      	movs	r3, #14
 800b588:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 800b58c:	e030      	b.n	800b5f0 <GpioMcuSetInterrupt+0x23c>
        IRQnb = EXTI4_IRQn;
 800b58e:	230f      	movs	r3, #15
 800b590:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 800b594:	e02c      	b.n	800b5f0 <GpioMcuSetInterrupt+0x23c>
        IRQnb = EXTI5_IRQn;
 800b596:	2310      	movs	r3, #16
 800b598:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 800b59c:	e028      	b.n	800b5f0 <GpioMcuSetInterrupt+0x23c>
        IRQnb = EXTI6_IRQn;
 800b59e:	2311      	movs	r3, #17
 800b5a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 800b5a4:	e024      	b.n	800b5f0 <GpioMcuSetInterrupt+0x23c>
        IRQnb = EXTI7_IRQn;
 800b5a6:	2312      	movs	r3, #18
 800b5a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 800b5ac:	e020      	b.n	800b5f0 <GpioMcuSetInterrupt+0x23c>
        IRQnb = EXTI8_IRQn;
 800b5ae:	2313      	movs	r3, #19
 800b5b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 800b5b4:	e01c      	b.n	800b5f0 <GpioMcuSetInterrupt+0x23c>
        IRQnb = EXTI9_IRQn;
 800b5b6:	2314      	movs	r3, #20
 800b5b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 800b5bc:	e018      	b.n	800b5f0 <GpioMcuSetInterrupt+0x23c>
        IRQnb = EXTI10_IRQn;
 800b5be:	2315      	movs	r3, #21
 800b5c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 800b5c4:	e014      	b.n	800b5f0 <GpioMcuSetInterrupt+0x23c>
        IRQnb = EXTI11_IRQn;
 800b5c6:	2316      	movs	r3, #22
 800b5c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 800b5cc:	e010      	b.n	800b5f0 <GpioMcuSetInterrupt+0x23c>
        IRQnb = EXTI12_IRQn;
 800b5ce:	2317      	movs	r3, #23
 800b5d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 800b5d4:	e00c      	b.n	800b5f0 <GpioMcuSetInterrupt+0x23c>
        IRQnb = EXTI13_IRQn;
 800b5d6:	2318      	movs	r3, #24
 800b5d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 800b5dc:	e008      	b.n	800b5f0 <GpioMcuSetInterrupt+0x23c>
        IRQnb = EXTI14_IRQn;
 800b5de:	2319      	movs	r3, #25
 800b5e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 800b5e4:	e004      	b.n	800b5f0 <GpioMcuSetInterrupt+0x23c>
        IRQnb = EXTI15_IRQn;
 800b5e6:	231a      	movs	r3, #26
 800b5e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 800b5ec:	e000      	b.n	800b5f0 <GpioMcuSetInterrupt+0x23c>
        break;
 800b5ee:	bf00      	nop
    }
    //watch

    GpioIrq[(obj->pin ) & 0x0F] = irqHandler;
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	f993 3000 	ldrsb.w	r3, [r3]
 800b5f6:	b2db      	uxtb	r3, r3
 800b5f8:	f003 030f 	and.w	r3, r3, #15
 800b5fc:	490d      	ldr	r1, [pc, #52]	@ (800b634 <GpioMcuSetInterrupt+0x280>)
 800b5fe:	687a      	ldr	r2, [r7, #4]
 800b600:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    HAL_NVIC_SetPriority( IRQnb , priority, 0 );
 800b604:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800b608:	2200      	movs	r2, #0
 800b60a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b60c:	4618      	mov	r0, r3
 800b60e:	f7f8 fff5 	bl	80045fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ( IRQnb );
 800b612:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800b616:	4618      	mov	r0, r3
 800b618:	f7f9 f80a 	bl	8004630 <HAL_NVIC_EnableIRQ>
 800b61c:	e000      	b.n	800b620 <GpioMcuSetInterrupt+0x26c>
        return;
 800b61e:	bf00      	nop
}
 800b620:	3730      	adds	r7, #48	@ 0x30
 800b622:	46bd      	mov	sp, r7
 800b624:	bd80      	pop	{r7, pc}
 800b626:	bf00      	nop
 800b628:	10110000 	.word	0x10110000
 800b62c:	10210000 	.word	0x10210000
 800b630:	10310000 	.word	0x10310000
 800b634:	2000042c 	.word	0x2000042c

0800b638 <GpioMcuWrite>:
    GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init( obj->port, &GPIO_InitStructure );
}

void GpioMcuWrite( Gpio_t *obj, uint32_t value )
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b082      	sub	sp, #8
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
 800b640:	6039      	str	r1, [r7, #0]
    if( ( obj == NULL ) || ( obj->port == NULL ) )
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2b00      	cmp	r3, #0
    {
        assert_param( FAIL );
    }
    // Check if pin is not connected
    if( obj->pin == NC )
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	f993 3000 	ldrsb.w	r3, [r3]
 800b64c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b650:	d009      	beq.n	800b666 <GpioMcuWrite+0x2e>
    {
        return;
    }
    HAL_GPIO_WritePin( obj->port, obj->pinIndex , ( GPIO_PinState )value );
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	6858      	ldr	r0, [r3, #4]
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	885b      	ldrh	r3, [r3, #2]
 800b65a:	683a      	ldr	r2, [r7, #0]
 800b65c:	b2d2      	uxtb	r2, r2
 800b65e:	4619      	mov	r1, r3
 800b660:	f7f9 fb8a 	bl	8004d78 <HAL_GPIO_WritePin>
 800b664:	e000      	b.n	800b668 <GpioMcuWrite+0x30>
        return;
 800b666:	bf00      	nop
}
 800b668:	3708      	adds	r7, #8
 800b66a:	46bd      	mov	sp, r7
 800b66c:	bd80      	pop	{r7, pc}

0800b66e <EXTI0_IRQHandler>:
    }
    return HAL_GPIO_ReadPin( obj->port, obj->pinIndex );
}

void EXTI0_IRQHandler( void )
{
 800b66e:	b580      	push	{r7, lr}
 800b670:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 800b672:	f000 f9d9 	bl	800ba28 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_0 );
 800b676:	2001      	movs	r0, #1
 800b678:	f7f9 fbb0 	bl	8004ddc <HAL_GPIO_EXTI_IRQHandler>
}
 800b67c:	bf00      	nop
 800b67e:	bd80      	pop	{r7, pc}

0800b680 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler( void )
{
 800b680:	b580      	push	{r7, lr}
 800b682:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 800b684:	f000 f9d0 	bl	800ba28 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_1 );
 800b688:	2002      	movs	r0, #2
 800b68a:	f7f9 fba7 	bl	8004ddc <HAL_GPIO_EXTI_IRQHandler>
}
 800b68e:	bf00      	nop
 800b690:	bd80      	pop	{r7, pc}

0800b692 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler( void )
{
 800b692:	b580      	push	{r7, lr}
 800b694:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 800b696:	f000 f9c7 	bl	800ba28 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_2 );
 800b69a:	2004      	movs	r0, #4
 800b69c:	f7f9 fb9e 	bl	8004ddc <HAL_GPIO_EXTI_IRQHandler>
}
 800b6a0:	bf00      	nop
 800b6a2:	bd80      	pop	{r7, pc}

0800b6a4 <EXTI4_IRQHandler>:
//#endif
//    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_3 );
//}

void EXTI4_IRQHandler( void )
{
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 800b6a8:	f000 f9be 	bl	800ba28 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_4 );
 800b6ac:	2010      	movs	r0, #16
 800b6ae:	f7f9 fb95 	bl	8004ddc <HAL_GPIO_EXTI_IRQHandler>
}
 800b6b2:	bf00      	nop
 800b6b4:	bd80      	pop	{r7, pc}

0800b6b6 <EXTI5_IRQHandler>:

void EXTI5_IRQHandler( void )
{
 800b6b6:	b580      	push	{r7, lr}
 800b6b8:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 800b6ba:	f000 f9b5 	bl	800ba28 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_5 );
 800b6be:	2020      	movs	r0, #32
 800b6c0:	f7f9 fb8c 	bl	8004ddc <HAL_GPIO_EXTI_IRQHandler>
}
 800b6c4:	bf00      	nop
 800b6c6:	bd80      	pop	{r7, pc}

0800b6c8 <EXTI6_IRQHandler>:

void EXTI6_IRQHandler( void )
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 800b6cc:	f000 f9ac 	bl	800ba28 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_6 );
 800b6d0:	2040      	movs	r0, #64	@ 0x40
 800b6d2:	f7f9 fb83 	bl	8004ddc <HAL_GPIO_EXTI_IRQHandler>
}
 800b6d6:	bf00      	nop
 800b6d8:	bd80      	pop	{r7, pc}

0800b6da <EXTI7_IRQHandler>:

void EXTI7_IRQHandler( void )
{
 800b6da:	b580      	push	{r7, lr}
 800b6dc:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 800b6de:	f000 f9a3 	bl	800ba28 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_7 );
 800b6e2:	2080      	movs	r0, #128	@ 0x80
 800b6e4:	f7f9 fb7a 	bl	8004ddc <HAL_GPIO_EXTI_IRQHandler>
}
 800b6e8:	bf00      	nop
 800b6ea:	bd80      	pop	{r7, pc}

0800b6ec <EXTI9_IRQHandler>:
//#endif
//    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_8 );
//}

void EXTI9_IRQHandler( void )
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 800b6f0:	f000 f99a 	bl	800ba28 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_9 );
 800b6f4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800b6f8:	f7f9 fb70 	bl	8004ddc <HAL_GPIO_EXTI_IRQHandler>
}
 800b6fc:	bf00      	nop
 800b6fe:	bd80      	pop	{r7, pc}

0800b700 <EXTI10_IRQHandler>:

void EXTI10_IRQHandler( void )
{
 800b700:	b580      	push	{r7, lr}
 800b702:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 800b704:	f000 f990 	bl	800ba28 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_10 );
 800b708:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800b70c:	f7f9 fb66 	bl	8004ddc <HAL_GPIO_EXTI_IRQHandler>
}
 800b710:	bf00      	nop
 800b712:	bd80      	pop	{r7, pc}

0800b714 <EXTI11_IRQHandler>:

void EXTI11_IRQHandler( void )
{
 800b714:	b580      	push	{r7, lr}
 800b716:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 800b718:	f000 f986 	bl	800ba28 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_11 );
 800b71c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800b720:	f7f9 fb5c 	bl	8004ddc <HAL_GPIO_EXTI_IRQHandler>
}
 800b724:	bf00      	nop
 800b726:	bd80      	pop	{r7, pc}

0800b728 <EXTI12_IRQHandler>:

void EXTI12_IRQHandler( void )
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 800b72c:	f000 f97c 	bl	800ba28 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_12 );
 800b730:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800b734:	f7f9 fb52 	bl	8004ddc <HAL_GPIO_EXTI_IRQHandler>
}
 800b738:	bf00      	nop
 800b73a:	bd80      	pop	{r7, pc}

0800b73c <EXTI13_IRQHandler>:

void EXTI13_IRQHandler( void )
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 800b740:	f000 f972 	bl	800ba28 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_13 );
 800b744:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800b748:	f7f9 fb48 	bl	8004ddc <HAL_GPIO_EXTI_IRQHandler>
}
 800b74c:	bf00      	nop
 800b74e:	bd80      	pop	{r7, pc}

0800b750 <EXTI14_IRQHandler>:

void EXTI14_IRQHandler( void )
{
 800b750:	b580      	push	{r7, lr}
 800b752:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 800b754:	f000 f968 	bl	800ba28 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_14 );
 800b758:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800b75c:	f7f9 fb3e 	bl	8004ddc <HAL_GPIO_EXTI_IRQHandler>
}
 800b760:	bf00      	nop
 800b762:	bd80      	pop	{r7, pc}

0800b764 <EXTI15_IRQHandler>:

void EXTI15_IRQHandler( void )
{
 800b764:	b580      	push	{r7, lr}
 800b766:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 800b768:	f000 f95e 	bl	800ba28 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_15 );
 800b76c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800b770:	f7f9 fb34 	bl	8004ddc <HAL_GPIO_EXTI_IRQHandler>
}
 800b774:	bf00      	nop
 800b776:	bd80      	pop	{r7, pc}

0800b778 <HAL_GPIO_EXTI_Rising_Callback>:
}
*/

//void HAL_GPIO_EXTI_Callback( uint16_t gpioPin )       // PK: dla L476
void HAL_GPIO_EXTI_Rising_Callback( uint16_t gpioPin )  // PK: dla U545
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b084      	sub	sp, #16
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	4603      	mov	r3, r0
 800b780:	80fb      	strh	r3, [r7, #6]
    uint8_t callbackIndex = 0;
 800b782:	2300      	movs	r3, #0
 800b784:	73fb      	strb	r3, [r7, #15]

    if( gpioPin > 0 )
 800b786:	88fb      	ldrh	r3, [r7, #6]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d009      	beq.n	800b7a0 <HAL_GPIO_EXTI_Rising_Callback+0x28>
    {
        while( gpioPin != 0x01 )
 800b78c:	e005      	b.n	800b79a <HAL_GPIO_EXTI_Rising_Callback+0x22>
        {
            gpioPin = gpioPin >> 1;
 800b78e:	88fb      	ldrh	r3, [r7, #6]
 800b790:	085b      	lsrs	r3, r3, #1
 800b792:	80fb      	strh	r3, [r7, #6]
            callbackIndex++;
 800b794:	7bfb      	ldrb	r3, [r7, #15]
 800b796:	3301      	adds	r3, #1
 800b798:	73fb      	strb	r3, [r7, #15]
        while( gpioPin != 0x01 )
 800b79a:	88fb      	ldrh	r3, [r7, #6]
 800b79c:	2b01      	cmp	r3, #1
 800b79e:	d1f6      	bne.n	800b78e <HAL_GPIO_EXTI_Rising_Callback+0x16>
        }
    }

    if( GpioIrq[callbackIndex] != NULL )
 800b7a0:	7bfb      	ldrb	r3, [r7, #15]
 800b7a2:	4a07      	ldr	r2, [pc, #28]	@ (800b7c0 <HAL_GPIO_EXTI_Rising_Callback+0x48>)
 800b7a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d004      	beq.n	800b7b6 <HAL_GPIO_EXTI_Rising_Callback+0x3e>
    {
        GpioIrq[callbackIndex]( );
 800b7ac:	7bfb      	ldrb	r3, [r7, #15]
 800b7ae:	4a04      	ldr	r2, [pc, #16]	@ (800b7c0 <HAL_GPIO_EXTI_Rising_Callback+0x48>)
 800b7b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b7b4:	4798      	blx	r3
    }
}
 800b7b6:	bf00      	nop
 800b7b8:	3710      	adds	r7, #16
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bd80      	pop	{r7, pc}
 800b7be:	bf00      	nop
 800b7c0:	2000042c 	.word	0x2000042c

0800b7c4 <GpioInit>:
#if defined( BOARD_IOE_EXT )
#include "gpio-ioe.h"
#endif

void GpioInit( Gpio_t *obj, PinNames pin, PinModes mode,  PinConfigs config, PinTypes type, uint32_t value )
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b084      	sub	sp, #16
 800b7c8:	af02      	add	r7, sp, #8
 800b7ca:	6078      	str	r0, [r7, #4]
 800b7cc:	4608      	mov	r0, r1
 800b7ce:	4611      	mov	r1, r2
 800b7d0:	461a      	mov	r2, r3
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	70fb      	strb	r3, [r7, #3]
 800b7d6:	460b      	mov	r3, r1
 800b7d8:	70bb      	strb	r3, [r7, #2]
 800b7da:	4613      	mov	r3, r2
 800b7dc:	707b      	strb	r3, [r7, #1]
    if( ( uint32_t )( pin >> 4 ) <= 6 )
 800b7de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b7e2:	111b      	asrs	r3, r3, #4
 800b7e4:	b25b      	sxtb	r3, r3
 800b7e6:	b2db      	uxtb	r3, r3
 800b7e8:	2b06      	cmp	r3, #6
 800b7ea:	d80b      	bhi.n	800b804 <GpioInit+0x40>
    {
        GpioMcuInit( obj, pin, mode, config, type, value );
 800b7ec:	7878      	ldrb	r0, [r7, #1]
 800b7ee:	78ba      	ldrb	r2, [r7, #2]
 800b7f0:	f997 1003 	ldrsb.w	r1, [r7, #3]
 800b7f4:	697b      	ldr	r3, [r7, #20]
 800b7f6:	9301      	str	r3, [sp, #4]
 800b7f8:	7c3b      	ldrb	r3, [r7, #16]
 800b7fa:	9300      	str	r3, [sp, #0]
 800b7fc:	4603      	mov	r3, r0
 800b7fe:	6878      	ldr	r0, [r7, #4]
 800b800:	f7ff fcf2 	bl	800b1e8 <GpioMcuInit>
#if defined( BOARD_IOE_EXT )
        // IOExt Pin
        GpioIoeInit( obj, pin, mode, config, type, value );
#endif
    }
}
 800b804:	bf00      	nop
 800b806:	3708      	adds	r7, #8
 800b808:	46bd      	mov	sp, r7
 800b80a:	bd80      	pop	{r7, pc}

0800b80c <GpioSetInterrupt>:

void GpioSetInterrupt( Gpio_t *obj, IrqModes irqMode, IrqPriorities irqPriority, GpioIrqHandler *irqHandler )
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b084      	sub	sp, #16
 800b810:	af00      	add	r7, sp, #0
 800b812:	60f8      	str	r0, [r7, #12]
 800b814:	607b      	str	r3, [r7, #4]
 800b816:	460b      	mov	r3, r1
 800b818:	72fb      	strb	r3, [r7, #11]
 800b81a:	4613      	mov	r3, r2
 800b81c:	72bb      	strb	r3, [r7, #10]
    if( ( uint32_t )( obj->pin >> 4 ) <= 6 )
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	f993 3000 	ldrsb.w	r3, [r3]
 800b824:	111b      	asrs	r3, r3, #4
 800b826:	b25b      	sxtb	r3, r3
 800b828:	b2db      	uxtb	r3, r3
 800b82a:	2b06      	cmp	r3, #6
 800b82c:	d805      	bhi.n	800b83a <GpioSetInterrupt+0x2e>
    {
        GpioMcuSetInterrupt( obj, irqMode, irqPriority, irqHandler );
 800b82e:	7aba      	ldrb	r2, [r7, #10]
 800b830:	7af9      	ldrb	r1, [r7, #11]
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	68f8      	ldr	r0, [r7, #12]
 800b836:	f7ff fdbd 	bl	800b3b4 <GpioMcuSetInterrupt>
#if defined( BOARD_IOE_EXT )
        // IOExt Pin
        GpioIoeSetInterrupt( obj, irqMode, irqPriority, irqHandler );
#endif
    }
}
 800b83a:	bf00      	nop
 800b83c:	3710      	adds	r7, #16
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}

0800b842 <GpioWrite>:
#endif
    }
}

void GpioWrite( Gpio_t *obj, uint32_t value )
{
 800b842:	b580      	push	{r7, lr}
 800b844:	b082      	sub	sp, #8
 800b846:	af00      	add	r7, sp, #0
 800b848:	6078      	str	r0, [r7, #4]
 800b84a:	6039      	str	r1, [r7, #0]
    if( ( uint32_t )( obj->pin >> 4 ) <= 6 )
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	f993 3000 	ldrsb.w	r3, [r3]
 800b852:	111b      	asrs	r3, r3, #4
 800b854:	b25b      	sxtb	r3, r3
 800b856:	b2db      	uxtb	r3, r3
 800b858:	2b06      	cmp	r3, #6
 800b85a:	d803      	bhi.n	800b864 <GpioWrite+0x22>
    {
        GpioMcuWrite( obj, value );
 800b85c:	6839      	ldr	r1, [r7, #0]
 800b85e:	6878      	ldr	r0, [r7, #4]
 800b860:	f7ff feea 	bl	800b638 <GpioMcuWrite>
#if defined( BOARD_IOE_EXT )
        // IOExt Pin
        GpioIoeWrite( obj, value );
#endif
    }
}
 800b864:	bf00      	nop
 800b866:	3708      	adds	r7, #8
 800b868:	46bd      	mov	sp, r7
 800b86a:	bd80      	pop	{r7, pc}

0800b86c <RtcInit>:
 * \param[IN] year Calendar current year
 */
static void RtcCheckCalendarRollOver( uint8_t year );

void RtcInit( void )
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b088      	sub	sp, #32
 800b870:	af00      	add	r7, sp, #0
    RtcCalendar_t rtcInit;

    if( RtcInitalized == false )
 800b872:	4b2c      	ldr	r3, [pc, #176]	@ (800b924 <RtcInit+0xb8>)
 800b874:	781b      	ldrb	r3, [r3, #0]
 800b876:	f083 0301 	eor.w	r3, r3, #1
 800b87a:	b2db      	uxtb	r3, r3
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d04d      	beq.n	800b91c <RtcInit+0xb0>
    {
        __HAL_RCC_RTC_ENABLE( );
 800b880:	4b29      	ldr	r3, [pc, #164]	@ (800b928 <RtcInit+0xbc>)
 800b882:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b886:	4a28      	ldr	r2, [pc, #160]	@ (800b928 <RtcInit+0xbc>)
 800b888:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b88c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        RtcHandle.Instance = RTC;
 800b890:	4b26      	ldr	r3, [pc, #152]	@ (800b92c <RtcInit+0xc0>)
 800b892:	4a27      	ldr	r2, [pc, #156]	@ (800b930 <RtcInit+0xc4>)
 800b894:	601a      	str	r2, [r3, #0]
        RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800b896:	4b25      	ldr	r3, [pc, #148]	@ (800b92c <RtcInit+0xc0>)
 800b898:	2200      	movs	r2, #0
 800b89a:	605a      	str	r2, [r3, #4]

        RtcHandle.Init.AsynchPrediv = 128; // 4; //128;     // changed from 3 - PK
 800b89c:	4b23      	ldr	r3, [pc, #140]	@ (800b92c <RtcInit+0xc0>)
 800b89e:	2280      	movs	r2, #128	@ 0x80
 800b8a0:	609a      	str	r2, [r3, #8]
        RtcHandle.Init.SynchPrediv = 25; //4; //256*64;      // changed from 3 - PK
 800b8a2:	4b22      	ldr	r3, [pc, #136]	@ (800b92c <RtcInit+0xc0>)
 800b8a4:	2219      	movs	r2, #25
 800b8a6:	60da      	str	r2, [r3, #12]

        RtcHandle.Init.OutPut = RTC_OUTPUT_DISABLE;
 800b8a8:	4b20      	ldr	r3, [pc, #128]	@ (800b92c <RtcInit+0xc0>)
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	611a      	str	r2, [r3, #16]
        RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800b8ae:	4b1f      	ldr	r3, [pc, #124]	@ (800b92c <RtcInit+0xc0>)
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	619a      	str	r2, [r3, #24]
        RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800b8b4:	4b1d      	ldr	r3, [pc, #116]	@ (800b92c <RtcInit+0xc0>)
 800b8b6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800b8ba:	61da      	str	r2, [r3, #28]
        HAL_RTC_Init( &RtcHandle );
 800b8bc:	481b      	ldr	r0, [pc, #108]	@ (800b92c <RtcInit+0xc0>)
 800b8be:	f7fd f9a9 	bl	8008c14 <HAL_RTC_Init>

        // Set Date: Friday 1st of January 2000
        rtcInit.CalendarDate.Year = 0;
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	727b      	strb	r3, [r7, #9]
        rtcInit.CalendarDate.Month = 1;
 800b8c6:	2301      	movs	r3, #1
 800b8c8:	71fb      	strb	r3, [r7, #7]
        rtcInit.CalendarDate.Date = 1;
 800b8ca:	2301      	movs	r3, #1
 800b8cc:	723b      	strb	r3, [r7, #8]
        rtcInit.CalendarDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 800b8ce:	2306      	movs	r3, #6
 800b8d0:	71bb      	strb	r3, [r7, #6]
        HAL_RTC_SetDate( &RtcHandle, &rtcInit.CalendarDate, RTC_FORMAT_BIN );
 800b8d2:	1d3b      	adds	r3, r7, #4
 800b8d4:	3302      	adds	r3, #2
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	4619      	mov	r1, r3
 800b8da:	4814      	ldr	r0, [pc, #80]	@ (800b92c <RtcInit+0xc0>)
 800b8dc:	f7fd fb32 	bl	8008f44 <HAL_RTC_SetDate>

        // Set Time: 00:00:00
        rtcInit.CalendarTime.Hours = 0;
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	733b      	strb	r3, [r7, #12]
        rtcInit.CalendarTime.Minutes = 0;
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	737b      	strb	r3, [r7, #13]
        rtcInit.CalendarTime.Seconds = 0;
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	73bb      	strb	r3, [r7, #14]
        rtcInit.CalendarTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	73fb      	strb	r3, [r7, #15]
        rtcInit.CalendarTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	61bb      	str	r3, [r7, #24]
        rtcInit.CalendarTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	61fb      	str	r3, [r7, #28]
        HAL_RTC_SetTime( &RtcHandle, &rtcInit.CalendarTime, RTC_FORMAT_BIN );
 800b8f8:	1d3b      	adds	r3, r7, #4
 800b8fa:	3308      	adds	r3, #8
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	4619      	mov	r1, r3
 800b900:	480a      	ldr	r0, [pc, #40]	@ (800b92c <RtcInit+0xc0>)
 800b902:	f7fd fa11 	bl	8008d28 <HAL_RTC_SetTime>

        HAL_NVIC_SetPriority( RTC_IRQn, 4, 0 );
 800b906:	2200      	movs	r2, #0
 800b908:	2104      	movs	r1, #4
 800b90a:	2002      	movs	r0, #2
 800b90c:	f7f8 fe76 	bl	80045fc <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ( RTC_IRQn );
 800b910:	2002      	movs	r0, #2
 800b912:	f7f8 fe8d 	bl	8004630 <HAL_NVIC_EnableIRQ>
        RtcInitalized = true;
 800b916:	4b03      	ldr	r3, [pc, #12]	@ (800b924 <RtcInit+0xb8>)
 800b918:	2201      	movs	r2, #1
 800b91a:	701a      	strb	r2, [r3, #0]
    }
}
 800b91c:	bf00      	nop
 800b91e:	3720      	adds	r7, #32
 800b920:	46bd      	mov	sp, r7
 800b922:	bd80      	pop	{r7, pc}
 800b924:	200004c0 	.word	0x200004c0
 800b928:	46020c00 	.word	0x46020c00
 800b92c:	20000490 	.word	0x20000490
 800b930:	46007800 	.word	0x46007800

0800b934 <RtcSetTimeout>:

void RtcSetTimeout( uint32_t timeout )
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b082      	sub	sp, #8
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
    RtcStartWakeUpAlarm( timeout );
 800b93c:	6878      	ldr	r0, [r7, #4]
 800b93e:	f000 f8e1 	bl	800bb04 <RtcStartWakeUpAlarm>
}
 800b942:	bf00      	nop
 800b944:	3708      	adds	r7, #8
 800b946:	46bd      	mov	sp, r7
 800b948:	bd80      	pop	{r7, pc}
	...

0800b94c <RtcGetAdjustedTimeoutValue>:

TimerTime_t RtcGetAdjustedTimeoutValue( uint32_t timeout )
{
 800b94c:	b480      	push	{r7}
 800b94e:	b083      	sub	sp, #12
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
    if( timeout > McuWakeUpTime )
 800b954:	4b16      	ldr	r3, [pc, #88]	@ (800b9b0 <RtcGetAdjustedTimeoutValue+0x64>)
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	687a      	ldr	r2, [r7, #4]
 800b95a:	429a      	cmp	r2, r3
 800b95c:	d90c      	bls.n	800b978 <RtcGetAdjustedTimeoutValue+0x2c>
    {   // we have waken up from a GPIO and we have lost "McuWakeUpTime" that we need to compensate on next event
        if( NonScheduledWakeUp == true )
 800b95e:	4b15      	ldr	r3, [pc, #84]	@ (800b9b4 <RtcGetAdjustedTimeoutValue+0x68>)
 800b960:	781b      	ldrb	r3, [r3, #0]
 800b962:	b2db      	uxtb	r3, r3
 800b964:	2b00      	cmp	r3, #0
 800b966:	d007      	beq.n	800b978 <RtcGetAdjustedTimeoutValue+0x2c>
        {
            NonScheduledWakeUp = false;
 800b968:	4b12      	ldr	r3, [pc, #72]	@ (800b9b4 <RtcGetAdjustedTimeoutValue+0x68>)
 800b96a:	2200      	movs	r2, #0
 800b96c:	701a      	strb	r2, [r3, #0]
            timeout -= McuWakeUpTime;
 800b96e:	4b10      	ldr	r3, [pc, #64]	@ (800b9b0 <RtcGetAdjustedTimeoutValue+0x64>)
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	687a      	ldr	r2, [r7, #4]
 800b974:	1ad3      	subs	r3, r2, r3
 800b976:	607b      	str	r3, [r7, #4]
        }
    }
    
    if( timeout > McuWakeUpTime )
 800b978:	4b0d      	ldr	r3, [pc, #52]	@ (800b9b0 <RtcGetAdjustedTimeoutValue+0x64>)
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	687a      	ldr	r2, [r7, #4]
 800b97e:	429a      	cmp	r2, r3
 800b980:	d90e      	bls.n	800b9a0 <RtcGetAdjustedTimeoutValue+0x54>
    {   // we don't go in Low Power mode for delay below 50ms (needed for LEDs)        
        if( timeout < 50 ) // 50 ms
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	2b31      	cmp	r3, #49	@ 0x31
 800b986:	d803      	bhi.n	800b990 <RtcGetAdjustedTimeoutValue+0x44>
        {
            RtcTimerEventAllowsLowPower = false;
 800b988:	4b0b      	ldr	r3, [pc, #44]	@ (800b9b8 <RtcGetAdjustedTimeoutValue+0x6c>)
 800b98a:	2200      	movs	r2, #0
 800b98c:	701a      	strb	r2, [r3, #0]
 800b98e:	e007      	b.n	800b9a0 <RtcGetAdjustedTimeoutValue+0x54>
        }
        else
        {
            RtcTimerEventAllowsLowPower = true;
 800b990:	4b09      	ldr	r3, [pc, #36]	@ (800b9b8 <RtcGetAdjustedTimeoutValue+0x6c>)
 800b992:	2201      	movs	r2, #1
 800b994:	701a      	strb	r2, [r3, #0]
            timeout -= McuWakeUpTime;
 800b996:	4b06      	ldr	r3, [pc, #24]	@ (800b9b0 <RtcGetAdjustedTimeoutValue+0x64>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	687a      	ldr	r2, [r7, #4]
 800b99c:	1ad3      	subs	r3, r2, r3
 800b99e:	607b      	str	r3, [r7, #4]
        }
    }

    return  timeout;
 800b9a0:	687b      	ldr	r3, [r7, #4]
}
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	370c      	adds	r7, #12
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ac:	4770      	bx	lr
 800b9ae:	bf00      	nop
 800b9b0:	200004c4 	.word	0x200004c4
 800b9b4:	2000046f 	.word	0x2000046f
 800b9b8:	2000048c 	.word	0x2000048c

0800b9bc <RtcGetElapsedAlarmTime>:
{
    return( RtcConvertCalendarTickToTimerTime( NULL ) );
}

TimerTime_t RtcGetElapsedAlarmTime( void )
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b082      	sub	sp, #8
 800b9c0:	af00      	add	r7, sp, #0
    TimerTime_t currentTime = 0;
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	607b      	str	r3, [r7, #4]
    TimerTime_t contextTime = 0;
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	603b      	str	r3, [r7, #0]

    currentTime = RtcConvertCalendarTickToTimerTime( NULL );
 800b9ca:	2000      	movs	r0, #0
 800b9cc:	f000 fabc 	bl	800bf48 <RtcConvertCalendarTickToTimerTime>
 800b9d0:	6078      	str	r0, [r7, #4]
    contextTime = RtcConvertCalendarTickToTimerTime( &RtcCalendarContext );
 800b9d2:	480a      	ldr	r0, [pc, #40]	@ (800b9fc <RtcGetElapsedAlarmTime+0x40>)
 800b9d4:	f000 fab8 	bl	800bf48 <RtcConvertCalendarTickToTimerTime>
 800b9d8:	6038      	str	r0, [r7, #0]

    if( currentTime < contextTime )
 800b9da:	687a      	ldr	r2, [r7, #4]
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	429a      	cmp	r2, r3
 800b9e0:	d204      	bcs.n	800b9ec <RtcGetElapsedAlarmTime+0x30>
    {
        return( currentTime + ( 0xFFFFFFFF - contextTime ) );
 800b9e2:	687a      	ldr	r2, [r7, #4]
 800b9e4:	683b      	ldr	r3, [r7, #0]
 800b9e6:	1ad3      	subs	r3, r2, r3
 800b9e8:	3b01      	subs	r3, #1
 800b9ea:	e002      	b.n	800b9f2 <RtcGetElapsedAlarmTime+0x36>
    }
    else
    {
        return( currentTime - contextTime );
 800b9ec:	687a      	ldr	r2, [r7, #4]
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	1ad3      	subs	r3, r2, r3
    }
}
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	3708      	adds	r7, #8
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	bd80      	pop	{r7, pc}
 800b9fa:	bf00      	nop
 800b9fc:	20000470 	.word	0x20000470

0800ba00 <BlockLowPowerDuringTask>:
        return( elapsedTime - eventInTime );
    }
}

void BlockLowPowerDuringTask ( bool status )
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b082      	sub	sp, #8
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	4603      	mov	r3, r0
 800ba08:	71fb      	strb	r3, [r7, #7]
    if( status == true )
 800ba0a:	79fb      	ldrb	r3, [r7, #7]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d001      	beq.n	800ba14 <BlockLowPowerDuringTask+0x14>
    {
        RtcRecoverMcuStatus( );
 800ba10:	f000 f80a 	bl	800ba28 <RtcRecoverMcuStatus>
    }
    LowPowerDisableDuringTask = status;
 800ba14:	4a03      	ldr	r2, [pc, #12]	@ (800ba24 <BlockLowPowerDuringTask+0x24>)
 800ba16:	79fb      	ldrb	r3, [r7, #7]
 800ba18:	7013      	strb	r3, [r2, #0]
}
 800ba1a:	bf00      	nop
 800ba1c:	3708      	adds	r7, #8
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	bd80      	pop	{r7, pc}
 800ba22:	bf00      	nop
 800ba24:	2000048d 	.word	0x2000048d

0800ba28 <RtcRecoverMcuStatus>:
//        HAL_PWR_EnterSTOPMode( PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI );
    }
}

void RtcRecoverMcuStatus( void )
{
 800ba28:	b480      	push	{r7}
 800ba2a:	af00      	add	r7, sp, #0
//    {
//        BoardInitMcu( );
//    }


}
 800ba2c:	bf00      	nop
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba34:	4770      	bx	lr
	...

0800ba38 <RtcComputeWakeUpTime>:

static void RtcComputeWakeUpTime( void )
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b096      	sub	sp, #88	@ 0x58
 800ba3c:	af00      	add	r7, sp, #0
    uint32_t start = 0;
 800ba3e:	2300      	movs	r3, #0
 800ba40:	657b      	str	r3, [r7, #84]	@ 0x54
    uint32_t stop = 0;
 800ba42:	2300      	movs	r3, #0
 800ba44:	653b      	str	r3, [r7, #80]	@ 0x50
    RTC_AlarmTypeDef  alarmRtc;
    RtcCalendar_t now;

    if( WakeUpTimeInitialized == false )
 800ba46:	4b2b      	ldr	r3, [pc, #172]	@ (800baf4 <RtcComputeWakeUpTime+0xbc>)
 800ba48:	781b      	ldrb	r3, [r3, #0]
 800ba4a:	f083 0301 	eor.w	r3, r3, #1
 800ba4e:	b2db      	uxtb	r3, r3
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d04b      	beq.n	800baec <RtcComputeWakeUpTime+0xb4>
    {
        now = RtcGetCalendar( );
 800ba54:	1d3b      	adds	r3, r7, #4
 800ba56:	4618      	mov	r0, r3
 800ba58:	f000 fb90 	bl	800c17c <RtcGetCalendar>
        HAL_RTC_GetAlarm( &RtcHandle, &alarmRtc, RTC_ALARM_A, RTC_FORMAT_BIN );
 800ba5c:	f107 0120 	add.w	r1, r7, #32
 800ba60:	2300      	movs	r3, #0
 800ba62:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ba66:	4824      	ldr	r0, [pc, #144]	@ (800baf8 <RtcComputeWakeUpTime+0xc0>)
 800ba68:	f7fd fc82 	bl	8009370 <HAL_RTC_GetAlarm>

        start = alarmRtc.AlarmTime.Seconds + ( SecondsInMinute * alarmRtc.AlarmTime.Minutes ) + ( SecondsInHour * alarmRtc.AlarmTime.Hours );
 800ba6c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800ba70:	461a      	mov	r2, r3
 800ba72:	233c      	movs	r3, #60	@ 0x3c
 800ba74:	f897 1021 	ldrb.w	r1, [r7, #33]	@ 0x21
 800ba78:	fb01 f303 	mul.w	r3, r1, r3
 800ba7c:	441a      	add	r2, r3
 800ba7e:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 800ba82:	f897 1020 	ldrb.w	r1, [r7, #32]
 800ba86:	fb01 f303 	mul.w	r3, r1, r3
 800ba8a:	4413      	add	r3, r2
 800ba8c:	657b      	str	r3, [r7, #84]	@ 0x54
        stop = now.CalendarTime.Seconds + ( SecondsInMinute * now.CalendarTime.Minutes ) + ( SecondsInHour * now.CalendarTime.Hours );
 800ba8e:	7bbb      	ldrb	r3, [r7, #14]
 800ba90:	461a      	mov	r2, r3
 800ba92:	233c      	movs	r3, #60	@ 0x3c
 800ba94:	7b79      	ldrb	r1, [r7, #13]
 800ba96:	fb01 f303 	mul.w	r3, r1, r3
 800ba9a:	441a      	add	r2, r3
 800ba9c:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 800baa0:	7b39      	ldrb	r1, [r7, #12]
 800baa2:	fb01 f303 	mul.w	r3, r1, r3
 800baa6:	4413      	add	r3, r2
 800baa8:	653b      	str	r3, [r7, #80]	@ 0x50

        McuWakeUpTime = ceil ( ( stop - start ) * RTC_ALARM_TICK_DURATION );
 800baaa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800baac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800baae:	1ad3      	subs	r3, r2, r3
 800bab0:	4618      	mov	r0, r3
 800bab2:	f7f6 fab9 	bl	8002028 <__aeabi_ui2d>
 800bab6:	f04f 0200 	mov.w	r2, #0
 800baba:	4b10      	ldr	r3, [pc, #64]	@ (800bafc <RtcComputeWakeUpTime+0xc4>)
 800babc:	f7f6 fb2e 	bl	800211c <__aeabi_dmul>
 800bac0:	4602      	mov	r2, r0
 800bac2:	460b      	mov	r3, r1
 800bac4:	ec43 2b17 	vmov	d7, r2, r3
 800bac8:	eeb0 0a47 	vmov.f32	s0, s14
 800bacc:	eef0 0a67 	vmov.f32	s1, s15
 800bad0:	f007 fdca 	bl	8013668 <ceil>
 800bad4:	ec53 2b10 	vmov	r2, r3, d0
 800bad8:	4610      	mov	r0, r2
 800bada:	4619      	mov	r1, r3
 800badc:	f7f6 fdf6 	bl	80026cc <__aeabi_d2uiz>
 800bae0:	4603      	mov	r3, r0
 800bae2:	4a07      	ldr	r2, [pc, #28]	@ (800bb00 <RtcComputeWakeUpTime+0xc8>)
 800bae4:	6013      	str	r3, [r2, #0]

        WakeUpTimeInitialized = true;
 800bae6:	4b03      	ldr	r3, [pc, #12]	@ (800baf4 <RtcComputeWakeUpTime+0xbc>)
 800bae8:	2201      	movs	r2, #1
 800baea:	701a      	strb	r2, [r3, #0]
    }
}
 800baec:	bf00      	nop
 800baee:	3758      	adds	r7, #88	@ 0x58
 800baf0:	46bd      	mov	sp, r7
 800baf2:	bd80      	pop	{r7, pc}
 800baf4:	200004c1 	.word	0x200004c1
 800baf8:	20000490 	.word	0x20000490
 800bafc:	3fdf4000 	.word	0x3fdf4000
 800bb00:	200004c4 	.word	0x200004c4

0800bb04 <RtcStartWakeUpAlarm>:

static void RtcStartWakeUpAlarm( uint32_t timeoutValue )
{
 800bb04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb06:	b0a3      	sub	sp, #140	@ 0x8c
 800bb08:	af06      	add	r7, sp, #24
 800bb0a:	6078      	str	r0, [r7, #4]
    RtcCalendar_t now;
    RtcCalendar_t alarmTimer;
    RTC_AlarmTypeDef alarmStructure;

    HAL_RTC_DeactivateAlarm( &RtcHandle, RTC_ALARM_A );
 800bb0c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800bb10:	4822      	ldr	r0, [pc, #136]	@ (800bb9c <RtcStartWakeUpAlarm+0x98>)
 800bb12:	f7fd fbeb 	bl	80092ec <HAL_RTC_DeactivateAlarm>
    HAL_RTCEx_DeactivateWakeUpTimer( &RtcHandle );
 800bb16:	4821      	ldr	r0, [pc, #132]	@ (800bb9c <RtcStartWakeUpAlarm+0x98>)
 800bb18:	f7fd fe02 	bl	8009720 <HAL_RTCEx_DeactivateWakeUpTimer>

    // Load the RTC calendar
    now = RtcGetCalendar( );
 800bb1c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800bb20:	4618      	mov	r0, r3
 800bb22:	f000 fb2b 	bl	800c17c <RtcGetCalendar>

    // Save the calendar into RtcCalendarContext to be able to calculate the elapsed time
    RtcCalendarContext = now;
 800bb26:	4b1e      	ldr	r3, [pc, #120]	@ (800bba0 <RtcStartWakeUpAlarm+0x9c>)
 800bb28:	461d      	mov	r5, r3
 800bb2a:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 800bb2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bb30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bb32:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800bb36:	e885 0007 	stmia.w	r5, {r0, r1, r2}

    // timeoutValue is in ms 
    alarmTimer = RtcComputeTimerTimeToAlarmTick( timeoutValue, now );
 800bb3a:	f107 0638 	add.w	r6, r7, #56	@ 0x38
 800bb3e:	466d      	mov	r5, sp
 800bb40:	f107 045c 	add.w	r4, r7, #92	@ 0x5c
 800bb44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bb46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bb48:	6823      	ldr	r3, [r4, #0]
 800bb4a:	602b      	str	r3, [r5, #0]
 800bb4c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800bb50:	cb0c      	ldmia	r3, {r2, r3}
 800bb52:	6879      	ldr	r1, [r7, #4]
 800bb54:	4630      	mov	r0, r6
 800bb56:	f000 f827 	bl	800bba8 <RtcComputeTimerTimeToAlarmTick>

    alarmStructure.Alarm = RTC_ALARM_A;
 800bb5a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bb5e:	637b      	str	r3, [r7, #52]	@ 0x34
    alarmStructure.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800bb60:	2300      	movs	r3, #0
 800bb62:	62bb      	str	r3, [r7, #40]	@ 0x28
    alarmStructure.AlarmMask = RTC_ALARMMASK_NONE;
 800bb64:	2300      	movs	r3, #0
 800bb66:	61fb      	str	r3, [r7, #28]
    alarmStructure.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800bb68:	2300      	movs	r3, #0
 800bb6a:	72fb      	strb	r3, [r7, #11]
    
    alarmStructure.AlarmTime.Seconds = alarmTimer.CalendarTime.Seconds;
 800bb6c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 800bb70:	72bb      	strb	r3, [r7, #10]
    alarmStructure.AlarmTime.Minutes = alarmTimer.CalendarTime.Minutes;
 800bb72:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800bb76:	727b      	strb	r3, [r7, #9]
    alarmStructure.AlarmTime.Hours = alarmTimer.CalendarTime.Hours;
 800bb78:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800bb7c:	723b      	strb	r3, [r7, #8]
    alarmStructure.AlarmDateWeekDay = alarmTimer.CalendarDate.Date;
 800bb7e:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800bb82:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

    if( HAL_RTC_SetAlarm_IT( &RtcHandle, &alarmStructure, RTC_FORMAT_BIN ) != HAL_OK )
 800bb86:	f107 0308 	add.w	r3, r7, #8
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	4619      	mov	r1, r3
 800bb8e:	4803      	ldr	r0, [pc, #12]	@ (800bb9c <RtcStartWakeUpAlarm+0x98>)
 800bb90:	f7fd faac 	bl	80090ec <HAL_RTC_SetAlarm_IT>
    {
        assert_param( FAIL );
    }
}
 800bb94:	bf00      	nop
 800bb96:	3774      	adds	r7, #116	@ 0x74
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb9c:	20000490 	.word	0x20000490
 800bba0:	20000470 	.word	0x20000470
 800bba4:	00000000 	.word	0x00000000

0800bba8 <RtcComputeTimerTimeToAlarmTick>:

static RtcCalendar_t RtcComputeTimerTimeToAlarmTick( TimerTime_t timeCounter, RtcCalendar_t now )
{
 800bba8:	b082      	sub	sp, #8
 800bbaa:	b5b0      	push	{r4, r5, r7, lr}
 800bbac:	b092      	sub	sp, #72	@ 0x48
 800bbae:	af00      	add	r7, sp, #0
 800bbb0:	6078      	str	r0, [r7, #4]
 800bbb2:	6039      	str	r1, [r7, #0]
 800bbb4:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800bbb8:	e881 000c 	stmia.w	r1, {r2, r3}
    RtcCalendar_t calendar = now;
 800bbbc:	f107 040c 	add.w	r4, r7, #12
 800bbc0:	f107 0558 	add.w	r5, r7, #88	@ 0x58
 800bbc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bbc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bbc8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800bbcc:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    uint16_t seconds = now.CalendarTime.Seconds;
 800bbd0:	f897 3062 	ldrb.w	r3, [r7, #98]	@ 0x62
 800bbd4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    uint16_t minutes = now.CalendarTime.Minutes;
 800bbd8:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 800bbdc:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    uint16_t hours = now.CalendarTime.Hours;
 800bbe0:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 800bbe4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    uint16_t days = now.CalendarDate.Date;
 800bbe8:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 800bbec:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    double timeoutValueTemp = 0.0;
 800bbf0:	f04f 0200 	mov.w	r2, #0
 800bbf4:	f04f 0300 	mov.w	r3, #0
 800bbf8:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    double timeoutValue = 0.0;
 800bbfc:	f04f 0200 	mov.w	r2, #0
 800bc00:	f04f 0300 	mov.w	r3, #0
 800bc04:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double error = 0.0;
 800bc08:	f04f 0200 	mov.w	r2, #0
 800bc0c:	f04f 0300 	mov.w	r3, #0
 800bc10:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    
    timeCounter = MIN( timeCounter, ( TimerTime_t )( RTC_ALARM_MAX_NUMBER_OF_DAYS * SecondsInDay * RTC_ALARM_TICK_DURATION ) );
 800bc14:	4ac4      	ldr	r2, [pc, #784]	@ (800bf28 <RtcComputeTimerTimeToAlarmTick+0x380>)
 800bc16:	4613      	mov	r3, r2
 800bc18:	00db      	lsls	r3, r3, #3
 800bc1a:	1a9b      	subs	r3, r3, r2
 800bc1c:	009b      	lsls	r3, r3, #2
 800bc1e:	4618      	mov	r0, r3
 800bc20:	f7f6 fa02 	bl	8002028 <__aeabi_ui2d>
 800bc24:	f04f 0200 	mov.w	r2, #0
 800bc28:	4bc0      	ldr	r3, [pc, #768]	@ (800bf2c <RtcComputeTimerTimeToAlarmTick+0x384>)
 800bc2a:	f7f6 fa77 	bl	800211c <__aeabi_dmul>
 800bc2e:	4602      	mov	r2, r0
 800bc30:	460b      	mov	r3, r1
 800bc32:	4610      	mov	r0, r2
 800bc34:	4619      	mov	r1, r3
 800bc36:	f7f6 fd49 	bl	80026cc <__aeabi_d2uiz>
 800bc3a:	4602      	mov	r2, r0
 800bc3c:	683b      	ldr	r3, [r7, #0]
 800bc3e:	4293      	cmp	r3, r2
 800bc40:	bf28      	it	cs
 800bc42:	4613      	movcs	r3, r2
 800bc44:	603b      	str	r3, [r7, #0]

    if( timeCounter < 1 )
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d101      	bne.n	800bc50 <RtcComputeTimerTimeToAlarmTick+0xa8>
    {
        timeCounter = 1;
 800bc4c:	2301      	movs	r3, #1
 800bc4e:	603b      	str	r3, [r7, #0]
    }

    // timeoutValue is used for complete computation
    timeoutValue = round( timeCounter * RTC_ALARM_TICK_PER_MS );
 800bc50:	6838      	ldr	r0, [r7, #0]
 800bc52:	f7f6 f9e9 	bl	8002028 <__aeabi_ui2d>
 800bc56:	a3b2      	add	r3, pc, #712	@ (adr r3, 800bf20 <RtcComputeTimerTimeToAlarmTick+0x378>)
 800bc58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc5c:	f7f6 fa5e 	bl	800211c <__aeabi_dmul>
 800bc60:	4602      	mov	r2, r0
 800bc62:	460b      	mov	r3, r1
 800bc64:	ec43 2b17 	vmov	d7, r2, r3
 800bc68:	eeb0 0a47 	vmov.f32	s0, s14
 800bc6c:	eef0 0a67 	vmov.f32	s1, s15
 800bc70:	f007 fdf6 	bl	8013860 <round>
 800bc74:	ed87 0b0e 	vstr	d0, [r7, #56]	@ 0x38

    // timeoutValueTemp is used to compensate the cumulating errors in timing far in the future
    timeoutValueTemp =  ( double )timeCounter * RTC_ALARM_TICK_PER_MS;
 800bc78:	6838      	ldr	r0, [r7, #0]
 800bc7a:	f7f6 f9d5 	bl	8002028 <__aeabi_ui2d>
 800bc7e:	a3a8      	add	r3, pc, #672	@ (adr r3, 800bf20 <RtcComputeTimerTimeToAlarmTick+0x378>)
 800bc80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc84:	f7f6 fa4a 	bl	800211c <__aeabi_dmul>
 800bc88:	4602      	mov	r2, r0
 800bc8a:	460b      	mov	r3, r1
 800bc8c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    // Compute timeoutValue error
    error = timeoutValue - timeoutValueTemp;
 800bc90:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800bc94:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800bc98:	f7f6 f888 	bl	8001dac <__aeabi_dsub>
 800bc9c:	4602      	mov	r2, r0
 800bc9e:	460b      	mov	r3, r1
 800bca0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    // Add new error value to the cumulated value in uS
    TimeoutValueError += ( error  * 1000 );
 800bca4:	4ba2      	ldr	r3, [pc, #648]	@ (800bf30 <RtcComputeTimerTimeToAlarmTick+0x388>)
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	4618      	mov	r0, r3
 800bcaa:	f7f6 f9cd 	bl	8002048 <__aeabi_i2d>
 800bcae:	4604      	mov	r4, r0
 800bcb0:	460d      	mov	r5, r1
 800bcb2:	f04f 0200 	mov.w	r2, #0
 800bcb6:	4b9f      	ldr	r3, [pc, #636]	@ (800bf34 <RtcComputeTimerTimeToAlarmTick+0x38c>)
 800bcb8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800bcbc:	f7f6 fa2e 	bl	800211c <__aeabi_dmul>
 800bcc0:	4602      	mov	r2, r0
 800bcc2:	460b      	mov	r3, r1
 800bcc4:	4620      	mov	r0, r4
 800bcc6:	4629      	mov	r1, r5
 800bcc8:	f7f6 f872 	bl	8001db0 <__adddf3>
 800bccc:	4602      	mov	r2, r0
 800bcce:	460b      	mov	r3, r1
 800bcd0:	4610      	mov	r0, r2
 800bcd2:	4619      	mov	r1, r3
 800bcd4:	f7f6 fcd2 	bl	800267c <__aeabi_d2iz>
 800bcd8:	4603      	mov	r3, r0
 800bcda:	4a95      	ldr	r2, [pc, #596]	@ (800bf30 <RtcComputeTimerTimeToAlarmTick+0x388>)
 800bcdc:	6013      	str	r3, [r2, #0]

    // Correct cumulated error if greater than ( RTC_ALARM_TICK_DURATION * 1000 )
    if( TimeoutValueError >= ( int32_t )( RTC_ALARM_TICK_DURATION * 1000 ) )
 800bcde:	4b94      	ldr	r3, [pc, #592]	@ (800bf30 <RtcComputeTimerTimeToAlarmTick+0x388>)
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	f5b3 7ff4 	cmp.w	r3, #488	@ 0x1e8
 800bce6:	db25      	blt.n	800bd34 <RtcComputeTimerTimeToAlarmTick+0x18c>
    {
        TimeoutValueError = TimeoutValueError - ( uint32_t )( RTC_ALARM_TICK_DURATION * 1000 );
 800bce8:	4b91      	ldr	r3, [pc, #580]	@ (800bf30 <RtcComputeTimerTimeToAlarmTick+0x388>)
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800bcf0:	461a      	mov	r2, r3
 800bcf2:	4b8f      	ldr	r3, [pc, #572]	@ (800bf30 <RtcComputeTimerTimeToAlarmTick+0x388>)
 800bcf4:	601a      	str	r2, [r3, #0]
        timeoutValue = timeoutValue + 1;
 800bcf6:	f04f 0200 	mov.w	r2, #0
 800bcfa:	4b8f      	ldr	r3, [pc, #572]	@ (800bf38 <RtcComputeTimerTimeToAlarmTick+0x390>)
 800bcfc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800bd00:	f7f6 f856 	bl	8001db0 <__adddf3>
 800bd04:	4602      	mov	r2, r0
 800bd06:	460b      	mov	r3, r1
 800bd08:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    }

    // Convert milliseconds to RTC format and add to now
    while( timeoutValue >= SecondsInDay )
 800bd0c:	e012      	b.n	800bd34 <RtcComputeTimerTimeToAlarmTick+0x18c>
    {
        timeoutValue -= SecondsInDay;
 800bd0e:	4b86      	ldr	r3, [pc, #536]	@ (800bf28 <RtcComputeTimerTimeToAlarmTick+0x380>)
 800bd10:	4618      	mov	r0, r3
 800bd12:	f7f6 f989 	bl	8002028 <__aeabi_ui2d>
 800bd16:	4602      	mov	r2, r0
 800bd18:	460b      	mov	r3, r1
 800bd1a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800bd1e:	f7f6 f845 	bl	8001dac <__aeabi_dsub>
 800bd22:	4602      	mov	r2, r0
 800bd24:	460b      	mov	r3, r1
 800bd26:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
        days++;
 800bd2a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800bd2e:	3301      	adds	r3, #1
 800bd30:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    while( timeoutValue >= SecondsInDay )
 800bd34:	4b7c      	ldr	r3, [pc, #496]	@ (800bf28 <RtcComputeTimerTimeToAlarmTick+0x380>)
 800bd36:	4618      	mov	r0, r3
 800bd38:	f7f6 f976 	bl	8002028 <__aeabi_ui2d>
 800bd3c:	4602      	mov	r2, r0
 800bd3e:	460b      	mov	r3, r1
 800bd40:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800bd44:	f7f6 fc70 	bl	8002628 <__aeabi_dcmpge>
 800bd48:	4603      	mov	r3, r0
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d1df      	bne.n	800bd0e <RtcComputeTimerTimeToAlarmTick+0x166>
    }

    // Calculate hours
    while( timeoutValue >= SecondsInHour )
 800bd4e:	e013      	b.n	800bd78 <RtcComputeTimerTimeToAlarmTick+0x1d0>
    {
        timeoutValue -= SecondsInHour;
 800bd50:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 800bd54:	4618      	mov	r0, r3
 800bd56:	f7f6 f977 	bl	8002048 <__aeabi_i2d>
 800bd5a:	4602      	mov	r2, r0
 800bd5c:	460b      	mov	r3, r1
 800bd5e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800bd62:	f7f6 f823 	bl	8001dac <__aeabi_dsub>
 800bd66:	4602      	mov	r2, r0
 800bd68:	460b      	mov	r3, r1
 800bd6a:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
        hours++;
 800bd6e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800bd72:	3301      	adds	r3, #1
 800bd74:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    while( timeoutValue >= SecondsInHour )
 800bd78:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	f7f6 f963 	bl	8002048 <__aeabi_i2d>
 800bd82:	4602      	mov	r2, r0
 800bd84:	460b      	mov	r3, r1
 800bd86:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800bd8a:	f7f6 fc4d 	bl	8002628 <__aeabi_dcmpge>
 800bd8e:	4603      	mov	r3, r0
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d1dd      	bne.n	800bd50 <RtcComputeTimerTimeToAlarmTick+0x1a8>
    }

    // Calculate minutes
    while( timeoutValue >= SecondsInMinute )
 800bd94:	e012      	b.n	800bdbc <RtcComputeTimerTimeToAlarmTick+0x214>
    {
        timeoutValue -= SecondsInMinute;
 800bd96:	233c      	movs	r3, #60	@ 0x3c
 800bd98:	4618      	mov	r0, r3
 800bd9a:	f7f6 f955 	bl	8002048 <__aeabi_i2d>
 800bd9e:	4602      	mov	r2, r0
 800bda0:	460b      	mov	r3, r1
 800bda2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800bda6:	f7f6 f801 	bl	8001dac <__aeabi_dsub>
 800bdaa:	4602      	mov	r2, r0
 800bdac:	460b      	mov	r3, r1
 800bdae:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
        minutes++;
 800bdb2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800bdb6:	3301      	adds	r3, #1
 800bdb8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while( timeoutValue >= SecondsInMinute )
 800bdbc:	233c      	movs	r3, #60	@ 0x3c
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	f7f6 f942 	bl	8002048 <__aeabi_i2d>
 800bdc4:	4602      	mov	r2, r0
 800bdc6:	460b      	mov	r3, r1
 800bdc8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800bdcc:	f7f6 fc2c 	bl	8002628 <__aeabi_dcmpge>
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d1df      	bne.n	800bd96 <RtcComputeTimerTimeToAlarmTick+0x1ee>
    }

    // Calculate seconds
    seconds = seconds + timeoutValue;
 800bdd6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800bdda:	4618      	mov	r0, r3
 800bddc:	f7f6 f934 	bl	8002048 <__aeabi_i2d>
 800bde0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800bde4:	f7f5 ffe4 	bl	8001db0 <__adddf3>
 800bde8:	4602      	mov	r2, r0
 800bdea:	460b      	mov	r3, r1
 800bdec:	4610      	mov	r0, r2
 800bdee:	4619      	mov	r1, r3
 800bdf0:	f7f6 fc6c 	bl	80026cc <__aeabi_d2uiz>
 800bdf4:	4603      	mov	r3, r0
 800bdf6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

    // Correct for modulo
    while( seconds >= 60 )
 800bdfa:	e009      	b.n	800be10 <RtcComputeTimerTimeToAlarmTick+0x268>
    { 
        seconds -= 60;
 800bdfc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800be00:	3b3c      	subs	r3, #60	@ 0x3c
 800be02:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
        minutes++;
 800be06:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800be0a:	3301      	adds	r3, #1
 800be0c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while( seconds >= 60 )
 800be10:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800be14:	2b3b      	cmp	r3, #59	@ 0x3b
 800be16:	d8f1      	bhi.n	800bdfc <RtcComputeTimerTimeToAlarmTick+0x254>
    }

    while( minutes >= 60 )
 800be18:	e009      	b.n	800be2e <RtcComputeTimerTimeToAlarmTick+0x286>
    {
        minutes -= 60;
 800be1a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800be1e:	3b3c      	subs	r3, #60	@ 0x3c
 800be20:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
        hours++;
 800be24:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800be28:	3301      	adds	r3, #1
 800be2a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    while( minutes >= 60 )
 800be2e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800be32:	2b3b      	cmp	r3, #59	@ 0x3b
 800be34:	d8f1      	bhi.n	800be1a <RtcComputeTimerTimeToAlarmTick+0x272>
    }

    while( hours >= HoursInDay )
 800be36:	e00b      	b.n	800be50 <RtcComputeTimerTimeToAlarmTick+0x2a8>
    {
        hours -= HoursInDay;
 800be38:	2318      	movs	r3, #24
 800be3a:	461a      	mov	r2, r3
 800be3c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800be40:	1a9b      	subs	r3, r3, r2
 800be42:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        days++;
 800be46:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800be4a:	3301      	adds	r3, #1
 800be4c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    while( hours >= HoursInDay )
 800be50:	2318      	movs	r3, #24
 800be52:	461a      	mov	r2, r3
 800be54:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800be58:	4293      	cmp	r3, r2
 800be5a:	d2ed      	bcs.n	800be38 <RtcComputeTimerTimeToAlarmTick+0x290>
    }

    if( ( now.CalendarDate.Year == 0 ) || ( ( now.CalendarDate.Year + Century ) % 4 ) == 0 )
 800be5c:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 800be60:	2b00      	cmp	r3, #0
 800be62:	d009      	beq.n	800be78 <RtcComputeTimerTimeToAlarmTick+0x2d0>
 800be64:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 800be68:	461a      	mov	r2, r3
 800be6a:	4b34      	ldr	r3, [pc, #208]	@ (800bf3c <RtcComputeTimerTimeToAlarmTick+0x394>)
 800be6c:	881b      	ldrh	r3, [r3, #0]
 800be6e:	4413      	add	r3, r2
 800be70:	f003 0303 	and.w	r3, r3, #3
 800be74:	2b00      	cmp	r3, #0
 800be76:	d118      	bne.n	800beaa <RtcComputeTimerTimeToAlarmTick+0x302>
    {
        if( days > DaysInMonthLeapYear[now.CalendarDate.Month - 1] )
 800be78:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800be7c:	3b01      	subs	r3, #1
 800be7e:	4a30      	ldr	r2, [pc, #192]	@ (800bf40 <RtcComputeTimerTimeToAlarmTick+0x398>)
 800be80:	5cd3      	ldrb	r3, [r2, r3]
 800be82:	461a      	mov	r2, r3
 800be84:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800be88:	4293      	cmp	r3, r2
 800be8a:	d926      	bls.n	800beda <RtcComputeTimerTimeToAlarmTick+0x332>
        {
            days = days % DaysInMonthLeapYear[now.CalendarDate.Month - 1];
 800be8c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800be90:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 800be94:	3a01      	subs	r2, #1
 800be96:	492a      	ldr	r1, [pc, #168]	@ (800bf40 <RtcComputeTimerTimeToAlarmTick+0x398>)
 800be98:	5c8a      	ldrb	r2, [r1, r2]
 800be9a:	fb93 f1f2 	sdiv	r1, r3, r2
 800be9e:	fb01 f202 	mul.w	r2, r1, r2
 800bea2:	1a9b      	subs	r3, r3, r2
 800bea4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
        if( days > DaysInMonthLeapYear[now.CalendarDate.Month - 1] )
 800bea8:	e017      	b.n	800beda <RtcComputeTimerTimeToAlarmTick+0x332>
        }
    }
    else
    {
        if( days > DaysInMonth[now.CalendarDate.Month - 1] )
 800beaa:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800beae:	3b01      	subs	r3, #1
 800beb0:	4a24      	ldr	r2, [pc, #144]	@ (800bf44 <RtcComputeTimerTimeToAlarmTick+0x39c>)
 800beb2:	5cd3      	ldrb	r3, [r2, r3]
 800beb4:	461a      	mov	r2, r3
 800beb6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800beba:	4293      	cmp	r3, r2
 800bebc:	d90d      	bls.n	800beda <RtcComputeTimerTimeToAlarmTick+0x332>
        {   
            days = days % DaysInMonth[now.CalendarDate.Month - 1];
 800bebe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800bec2:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 800bec6:	3a01      	subs	r2, #1
 800bec8:	491e      	ldr	r1, [pc, #120]	@ (800bf44 <RtcComputeTimerTimeToAlarmTick+0x39c>)
 800beca:	5c8a      	ldrb	r2, [r1, r2]
 800becc:	fb93 f1f2 	sdiv	r1, r3, r2
 800bed0:	fb01 f202 	mul.w	r2, r1, r2
 800bed4:	1a9b      	subs	r3, r3, r2
 800bed6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
        }
    }

    calendar.CalendarTime.Seconds = seconds;
 800beda:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800bede:	b2db      	uxtb	r3, r3
 800bee0:	75bb      	strb	r3, [r7, #22]
    calendar.CalendarTime.Minutes = minutes;
 800bee2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800bee6:	b2db      	uxtb	r3, r3
 800bee8:	757b      	strb	r3, [r7, #21]
    calendar.CalendarTime.Hours = hours;
 800beea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800beee:	b2db      	uxtb	r3, r3
 800bef0:	753b      	strb	r3, [r7, #20]
    calendar.CalendarDate.Date = days;
 800bef2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800bef6:	b2db      	uxtb	r3, r3
 800bef8:	743b      	strb	r3, [r7, #16]

    return calendar;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	461d      	mov	r5, r3
 800befe:	f107 040c 	add.w	r4, r7, #12
 800bf02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bf04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bf06:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800bf0a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800bf0e:	6878      	ldr	r0, [r7, #4]
 800bf10:	3748      	adds	r7, #72	@ 0x48
 800bf12:	46bd      	mov	sp, r7
 800bf14:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800bf18:	b002      	add	sp, #8
 800bf1a:	4770      	bx	lr
 800bf1c:	f3af 8000 	nop.w
 800bf20:	a0b5ed8d 	.word	0xa0b5ed8d
 800bf24:	3f60c6f7 	.word	0x3f60c6f7
 800bf28:	00015180 	.word	0x00015180
 800bf2c:	3fdf4000 	.word	0x3fdf4000
 800bf30:	200004c8 	.word	0x200004c8
 800bf34:	408f4000 	.word	0x408f4000
 800bf38:	3ff00000 	.word	0x3ff00000
 800bf3c:	2000046c 	.word	0x2000046c
 800bf40:	080146ec 	.word	0x080146ec
 800bf44:	080146e0 	.word	0x080146e0

0800bf48 <RtcConvertCalendarTickToTimerTime>:

    return calendar;
}

static TimerTime_t RtcConvertCalendarTickToTimerTime( RtcCalendar_t *calendar )
{
 800bf48:	b5b0      	push	{r4, r5, r7, lr}
 800bf4a:	b08e      	sub	sp, #56	@ 0x38
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
    TimerTime_t timeCounter = 0;
 800bf50:	2300      	movs	r3, #0
 800bf52:	62bb      	str	r3, [r7, #40]	@ 0x28
    RtcCalendar_t now;
    double timeCounterTemp = 0.0;
 800bf54:	f04f 0200 	mov.w	r2, #0
 800bf58:	f04f 0300 	mov.w	r3, #0
 800bf5c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    // Passing a NULL pointer will compute from "now" else,
    // compute from the given calendar value
    if( calendar == NULL )
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d105      	bne.n	800bf72 <RtcConvertCalendarTickToTimerTime+0x2a>
    {
        now = RtcGetCalendar( );
 800bf66:	f107 030c 	add.w	r3, r7, #12
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	f000 f906 	bl	800c17c <RtcGetCalendar>
 800bf70:	e009      	b.n	800bf86 <RtcConvertCalendarTickToTimerTime+0x3e>
    }
    else
    {
        now = *calendar;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	f107 040c 	add.w	r4, r7, #12
 800bf78:	461d      	mov	r5, r3
 800bf7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bf7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bf7e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800bf82:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }

    // Years (calculation valid up to year 2099)
    for( int16_t i = 0; i < ( now.CalendarDate.Year + now.CalendarCentury ); i++ )
 800bf86:	2300      	movs	r3, #0
 800bf88:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800bf8a:	e02c      	b.n	800bfe6 <RtcConvertCalendarTickToTimerTime+0x9e>
    {
        if( ( i == 0 ) || ( i % 4 ) == 0 )
 800bf8c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d005      	beq.n	800bfa0 <RtcConvertCalendarTickToTimerTime+0x58>
 800bf94:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800bf96:	f003 0303 	and.w	r3, r3, #3
 800bf9a:	b29b      	uxth	r3, r3
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d10e      	bne.n	800bfbe <RtcConvertCalendarTickToTimerTime+0x76>
        {
            timeCounterTemp += ( double )SecondsInLeapYear;
 800bfa0:	4b5d      	ldr	r3, [pc, #372]	@ (800c118 <RtcConvertCalendarTickToTimerTime+0x1d0>)
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	f7f6 f840 	bl	8002028 <__aeabi_ui2d>
 800bfa8:	4602      	mov	r2, r0
 800bfaa:	460b      	mov	r3, r1
 800bfac:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800bfb0:	f7f5 fefe 	bl	8001db0 <__adddf3>
 800bfb4:	4602      	mov	r2, r0
 800bfb6:	460b      	mov	r3, r1
 800bfb8:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 800bfbc:	e00d      	b.n	800bfda <RtcConvertCalendarTickToTimerTime+0x92>
        }
        else
        {
            timeCounterTemp += ( double )SecondsInYear;
 800bfbe:	4b57      	ldr	r3, [pc, #348]	@ (800c11c <RtcConvertCalendarTickToTimerTime+0x1d4>)
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	f7f6 f831 	bl	8002028 <__aeabi_ui2d>
 800bfc6:	4602      	mov	r2, r0
 800bfc8:	460b      	mov	r3, r1
 800bfca:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800bfce:	f7f5 feef 	bl	8001db0 <__adddf3>
 800bfd2:	4602      	mov	r2, r0
 800bfd4:	460b      	mov	r3, r1
 800bfd6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    for( int16_t i = 0; i < ( now.CalendarDate.Year + now.CalendarCentury ); i++ )
 800bfda:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 800bfde:	b29b      	uxth	r3, r3
 800bfe0:	3301      	adds	r3, #1
 800bfe2:	b29b      	uxth	r3, r3
 800bfe4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800bfe6:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	@ 0x2e
 800bfea:	7c7b      	ldrb	r3, [r7, #17]
 800bfec:	4619      	mov	r1, r3
 800bfee:	89bb      	ldrh	r3, [r7, #12]
 800bff0:	440b      	add	r3, r1
 800bff2:	429a      	cmp	r2, r3
 800bff4:	dbca      	blt.n	800bf8c <RtcConvertCalendarTickToTimerTime+0x44>
        }
    }

    // Months (calculation valid up to year 2099)*/
    if( ( now.CalendarDate.Year == 0 ) || ( ( now.CalendarDate.Year + now.CalendarCentury ) % 4 ) == 0 )
 800bff6:	7c7b      	ldrb	r3, [r7, #17]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d007      	beq.n	800c00c <RtcConvertCalendarTickToTimerTime+0xc4>
 800bffc:	7c7b      	ldrb	r3, [r7, #17]
 800bffe:	461a      	mov	r2, r3
 800c000:	89bb      	ldrh	r3, [r7, #12]
 800c002:	4413      	add	r3, r2
 800c004:	f003 0303 	and.w	r3, r3, #3
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d124      	bne.n	800c056 <RtcConvertCalendarTickToTimerTime+0x10e>
    {
        for( uint8_t i = 0; i < ( now.CalendarDate.Month - 1 ); i++ )
 800c00c:	2300      	movs	r3, #0
 800c00e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 800c012:	e019      	b.n	800c048 <RtcConvertCalendarTickToTimerTime+0x100>
        {
            timeCounterTemp += ( double )( DaysInMonthLeapYear[i] * SecondsInDay );
 800c014:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800c018:	4a41      	ldr	r2, [pc, #260]	@ (800c120 <RtcConvertCalendarTickToTimerTime+0x1d8>)
 800c01a:	5cd3      	ldrb	r3, [r2, r3]
 800c01c:	461a      	mov	r2, r3
 800c01e:	4b41      	ldr	r3, [pc, #260]	@ (800c124 <RtcConvertCalendarTickToTimerTime+0x1dc>)
 800c020:	fb02 f303 	mul.w	r3, r2, r3
 800c024:	4618      	mov	r0, r3
 800c026:	f7f5 ffff 	bl	8002028 <__aeabi_ui2d>
 800c02a:	4602      	mov	r2, r0
 800c02c:	460b      	mov	r3, r1
 800c02e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800c032:	f7f5 febd 	bl	8001db0 <__adddf3>
 800c036:	4602      	mov	r2, r0
 800c038:	460b      	mov	r3, r1
 800c03a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
        for( uint8_t i = 0; i < ( now.CalendarDate.Month - 1 ); i++ )
 800c03e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800c042:	3301      	adds	r3, #1
 800c044:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 800c048:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 800c04c:	7bfb      	ldrb	r3, [r7, #15]
 800c04e:	3b01      	subs	r3, #1
 800c050:	429a      	cmp	r2, r3
 800c052:	dbdf      	blt.n	800c014 <RtcConvertCalendarTickToTimerTime+0xcc>
 800c054:	e023      	b.n	800c09e <RtcConvertCalendarTickToTimerTime+0x156>
        }
    }
    else
    {
        for( uint8_t i = 0;  i < ( now.CalendarDate.Month - 1 ); i++ )
 800c056:	2300      	movs	r3, #0
 800c058:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 800c05c:	e019      	b.n	800c092 <RtcConvertCalendarTickToTimerTime+0x14a>
        {
            timeCounterTemp += ( double )( DaysInMonth[i] * SecondsInDay );
 800c05e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800c062:	4a31      	ldr	r2, [pc, #196]	@ (800c128 <RtcConvertCalendarTickToTimerTime+0x1e0>)
 800c064:	5cd3      	ldrb	r3, [r2, r3]
 800c066:	461a      	mov	r2, r3
 800c068:	4b2e      	ldr	r3, [pc, #184]	@ (800c124 <RtcConvertCalendarTickToTimerTime+0x1dc>)
 800c06a:	fb02 f303 	mul.w	r3, r2, r3
 800c06e:	4618      	mov	r0, r3
 800c070:	f7f5 ffda 	bl	8002028 <__aeabi_ui2d>
 800c074:	4602      	mov	r2, r0
 800c076:	460b      	mov	r3, r1
 800c078:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800c07c:	f7f5 fe98 	bl	8001db0 <__adddf3>
 800c080:	4602      	mov	r2, r0
 800c082:	460b      	mov	r3, r1
 800c084:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
        for( uint8_t i = 0;  i < ( now.CalendarDate.Month - 1 ); i++ )
 800c088:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800c08c:	3301      	adds	r3, #1
 800c08e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 800c092:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800c096:	7bfb      	ldrb	r3, [r7, #15]
 800c098:	3b01      	subs	r3, #1
 800c09a:	429a      	cmp	r2, r3
 800c09c:	dbdf      	blt.n	800c05e <RtcConvertCalendarTickToTimerTime+0x116>
        }
    }

    timeCounterTemp += ( double )( ( uint32_t )now.CalendarTime.Seconds +
 800c09e:	7dbb      	ldrb	r3, [r7, #22]
 800c0a0:	4619      	mov	r1, r3
                     ( ( uint32_t )now.CalendarTime.Minutes * SecondsInMinute ) +
                     ( ( uint32_t )now.CalendarTime.Hours * SecondsInHour ) +
 800c0a2:	7d3b      	ldrb	r3, [r7, #20]
 800c0a4:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800c0a8:	fb03 f202 	mul.w	r2, r3, r2
                     ( ( uint32_t )now.CalendarTime.Minutes * SecondsInMinute ) +
 800c0ac:	7d7b      	ldrb	r3, [r7, #21]
 800c0ae:	203c      	movs	r0, #60	@ 0x3c
 800c0b0:	fb00 f303 	mul.w	r3, r0, r3
 800c0b4:	4413      	add	r3, r2
 800c0b6:	18ca      	adds	r2, r1, r3
                     ( ( uint32_t )( now.CalendarDate.Date * SecondsInDay ) ) );
 800c0b8:	7c3b      	ldrb	r3, [r7, #16]
 800c0ba:	4619      	mov	r1, r3
 800c0bc:	4b19      	ldr	r3, [pc, #100]	@ (800c124 <RtcConvertCalendarTickToTimerTime+0x1dc>)
 800c0be:	fb01 f303 	mul.w	r3, r1, r3
                     ( ( uint32_t )now.CalendarTime.Hours * SecondsInHour ) +
 800c0c2:	4413      	add	r3, r2
    timeCounterTemp += ( double )( ( uint32_t )now.CalendarTime.Seconds +
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	f7f5 ffaf 	bl	8002028 <__aeabi_ui2d>
 800c0ca:	4602      	mov	r2, r0
 800c0cc:	460b      	mov	r3, r1
 800c0ce:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800c0d2:	f7f5 fe6d 	bl	8001db0 <__adddf3>
 800c0d6:	4602      	mov	r2, r0
 800c0d8:	460b      	mov	r3, r1
 800c0da:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    timeCounterTemp = ( double )timeCounterTemp * RTC_ALARM_TICK_DURATION;
 800c0de:	f04f 0200 	mov.w	r2, #0
 800c0e2:	4b12      	ldr	r3, [pc, #72]	@ (800c12c <RtcConvertCalendarTickToTimerTime+0x1e4>)
 800c0e4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800c0e8:	f7f6 f818 	bl	800211c <__aeabi_dmul>
 800c0ec:	4602      	mov	r2, r0
 800c0ee:	460b      	mov	r3, r1
 800c0f0:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    timeCounter = round( timeCounterTemp );
 800c0f4:	ed97 0b0c 	vldr	d0, [r7, #48]	@ 0x30
 800c0f8:	f007 fbb2 	bl	8013860 <round>
 800c0fc:	ec53 2b10 	vmov	r2, r3, d0
 800c100:	4610      	mov	r0, r2
 800c102:	4619      	mov	r1, r3
 800c104:	f7f6 fae2 	bl	80026cc <__aeabi_d2uiz>
 800c108:	4603      	mov	r3, r0
 800c10a:	62bb      	str	r3, [r7, #40]	@ 0x28
    return ( timeCounter );
 800c10c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 800c10e:	4618      	mov	r0, r3
 800c110:	3738      	adds	r7, #56	@ 0x38
 800c112:	46bd      	mov	sp, r7
 800c114:	bdb0      	pop	{r4, r5, r7, pc}
 800c116:	bf00      	nop
 800c118:	01e28500 	.word	0x01e28500
 800c11c:	01e13380 	.word	0x01e13380
 800c120:	080146ec 	.word	0x080146ec
 800c124:	00015180 	.word	0x00015180
 800c128:	080146e0 	.word	0x080146e0
 800c12c:	3fdf4000 	.word	0x3fdf4000

0800c130 <RtcCheckCalendarRollOver>:

static void RtcCheckCalendarRollOver( uint8_t year )
{
 800c130:	b480      	push	{r7}
 800c132:	b083      	sub	sp, #12
 800c134:	af00      	add	r7, sp, #0
 800c136:	4603      	mov	r3, r0
 800c138:	71fb      	strb	r3, [r7, #7]
    if( year == 99 )
 800c13a:	79fb      	ldrb	r3, [r7, #7]
 800c13c:	2b63      	cmp	r3, #99	@ 0x63
 800c13e:	d102      	bne.n	800c146 <RtcCheckCalendarRollOver+0x16>
    {
        CallendarRollOverReady = true;
 800c140:	4b0c      	ldr	r3, [pc, #48]	@ (800c174 <RtcCheckCalendarRollOver+0x44>)
 800c142:	2201      	movs	r2, #1
 800c144:	701a      	strb	r2, [r3, #0]
    }

    if( ( CallendarRollOverReady == true ) && ( ( year + Century ) == Century ) )
 800c146:	4b0b      	ldr	r3, [pc, #44]	@ (800c174 <RtcCheckCalendarRollOver+0x44>)
 800c148:	781b      	ldrb	r3, [r3, #0]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d00b      	beq.n	800c166 <RtcCheckCalendarRollOver+0x36>
 800c14e:	79fb      	ldrb	r3, [r7, #7]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d108      	bne.n	800c166 <RtcCheckCalendarRollOver+0x36>
    {   // Indicate a roll-over of the calendar
        CallendarRollOverReady = false;
 800c154:	4b07      	ldr	r3, [pc, #28]	@ (800c174 <RtcCheckCalendarRollOver+0x44>)
 800c156:	2200      	movs	r2, #0
 800c158:	701a      	strb	r2, [r3, #0]
        Century = Century + 100;
 800c15a:	4b07      	ldr	r3, [pc, #28]	@ (800c178 <RtcCheckCalendarRollOver+0x48>)
 800c15c:	881b      	ldrh	r3, [r3, #0]
 800c15e:	3364      	adds	r3, #100	@ 0x64
 800c160:	b29a      	uxth	r2, r3
 800c162:	4b05      	ldr	r3, [pc, #20]	@ (800c178 <RtcCheckCalendarRollOver+0x48>)
 800c164:	801a      	strh	r2, [r3, #0]
    }
}
 800c166:	bf00      	nop
 800c168:	370c      	adds	r7, #12
 800c16a:	46bd      	mov	sp, r7
 800c16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c170:	4770      	bx	lr
 800c172:	bf00      	nop
 800c174:	2000046e 	.word	0x2000046e
 800c178:	2000046c 	.word	0x2000046c

0800c17c <RtcGetCalendar>:

static RtcCalendar_t RtcGetCalendar( void )
{
 800c17c:	b5b0      	push	{r4, r5, r7, lr}
 800c17e:	b08a      	sub	sp, #40	@ 0x28
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
    RtcCalendar_t calendar;
    HAL_RTC_GetTime( &RtcHandle, &calendar.CalendarTime, RTC_FORMAT_BIN );
 800c184:	f107 030c 	add.w	r3, r7, #12
 800c188:	3308      	adds	r3, #8
 800c18a:	2200      	movs	r2, #0
 800c18c:	4619      	mov	r1, r3
 800c18e:	4810      	ldr	r0, [pc, #64]	@ (800c1d0 <RtcGetCalendar+0x54>)
 800c190:	f7fc fe66 	bl	8008e60 <HAL_RTC_GetTime>
    HAL_RTC_GetDate( &RtcHandle, &calendar.CalendarDate, RTC_FORMAT_BIN );
 800c194:	f107 030c 	add.w	r3, r7, #12
 800c198:	3302      	adds	r3, #2
 800c19a:	2200      	movs	r2, #0
 800c19c:	4619      	mov	r1, r3
 800c19e:	480c      	ldr	r0, [pc, #48]	@ (800c1d0 <RtcGetCalendar+0x54>)
 800c1a0:	f7fc ff56 	bl	8009050 <HAL_RTC_GetDate>
    calendar.CalendarCentury = Century;
 800c1a4:	4b0b      	ldr	r3, [pc, #44]	@ (800c1d4 <RtcGetCalendar+0x58>)
 800c1a6:	881b      	ldrh	r3, [r3, #0]
 800c1a8:	81bb      	strh	r3, [r7, #12]
    RtcCheckCalendarRollOver( calendar.CalendarDate.Year );
 800c1aa:	7c7b      	ldrb	r3, [r7, #17]
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	f7ff ffbf 	bl	800c130 <RtcCheckCalendarRollOver>
    return calendar;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	461d      	mov	r5, r3
 800c1b6:	f107 040c 	add.w	r4, r7, #12
 800c1ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c1bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c1be:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800c1c2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800c1c6:	6878      	ldr	r0, [r7, #4]
 800c1c8:	3728      	adds	r7, #40	@ 0x28
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	bdb0      	pop	{r4, r5, r7, pc}
 800c1ce:	bf00      	nop
 800c1d0:	20000490 	.word	0x20000490
 800c1d4:	2000046c 	.word	0x2000046c

0800c1d8 <RTC_IRQHandler>:
/*!
 * \brief RTC IRQ Handler of the RTC Alarm
 */
//void RTC_Alarm_IRQHandler( void )   // STM32L476
void RTC_IRQHandler( void )    // changed for STM32U5 - PK
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	af00      	add	r7, sp, #0
    HAL_RTC_AlarmIRQHandler( &RtcHandle );
 800c1dc:	4809      	ldr	r0, [pc, #36]	@ (800c204 <RTC_IRQHandler+0x2c>)
 800c1de:	f7fd f985 	bl	80094ec <HAL_RTC_AlarmIRQHandler>
    HAL_RTC_DeactivateAlarm( &RtcHandle, RTC_ALARM_A );
 800c1e2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c1e6:	4807      	ldr	r0, [pc, #28]	@ (800c204 <RTC_IRQHandler+0x2c>)
 800c1e8:	f7fd f880 	bl	80092ec <HAL_RTC_DeactivateAlarm>
    RtcRecoverMcuStatus( );
 800c1ec:	f7ff fc1c 	bl	800ba28 <RtcRecoverMcuStatus>
    RtcComputeWakeUpTime( );
 800c1f0:	f7ff fc22 	bl	800ba38 <RtcComputeWakeUpTime>
//    BlockLowPowerDuringTask( false );
    BlockLowPowerDuringTask( true );   // PK bugfix
 800c1f4:	2001      	movs	r0, #1
 800c1f6:	f7ff fc03 	bl	800ba00 <BlockLowPowerDuringTask>
//    DelayMs(10);   // BUG FIX PK
    //printf("RTC_IRQHandler\n\r");
    TimerIrqHandler( );
 800c1fa:	f000 fb33 	bl	800c864 <TimerIrqHandler>
}
 800c1fe:	bf00      	nop
 800c200:	bd80      	pop	{r7, pc}
 800c202:	bf00      	nop
 800c204:	20000490 	.word	0x20000490

0800c208 <SpiInit>:
}SPIName;

void Error_Handler(void);   // should be defined in main.c - PK

void SpiInit( Spi_t *obj, PinNames mosi, PinNames miso, PinNames sclk, PinNames nss )
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b086      	sub	sp, #24
 800c20c:	af02      	add	r7, sp, #8
 800c20e:	6078      	str	r0, [r7, #4]
 800c210:	4608      	mov	r0, r1
 800c212:	4611      	mov	r1, r2
 800c214:	461a      	mov	r2, r3
 800c216:	4603      	mov	r3, r0
 800c218:	70fb      	strb	r3, [r7, #3]
 800c21a:	460b      	mov	r3, r1
 800c21c:	70bb      	strb	r3, [r7, #2]
 800c21e:	4613      	mov	r3, r2
 800c220:	707b      	strb	r3, [r7, #1]
    __HAL_RCC_SPI1_FORCE_RESET( );
 800c222:	4b3f      	ldr	r3, [pc, #252]	@ (800c320 <SpiInit+0x118>)
 800c224:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c226:	4a3e      	ldr	r2, [pc, #248]	@ (800c320 <SpiInit+0x118>)
 800c228:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800c22c:	67d3      	str	r3, [r2, #124]	@ 0x7c
    __HAL_RCC_SPI1_RELEASE_RESET( );
 800c22e:	4b3c      	ldr	r3, [pc, #240]	@ (800c320 <SpiInit+0x118>)
 800c230:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c232:	4a3b      	ldr	r2, [pc, #236]	@ (800c320 <SpiInit+0x118>)
 800c234:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c238:	67d3      	str	r3, [r2, #124]	@ 0x7c

    __HAL_RCC_SPI1_CLK_ENABLE( );
 800c23a:	4b39      	ldr	r3, [pc, #228]	@ (800c320 <SpiInit+0x118>)
 800c23c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c240:	4a37      	ldr	r2, [pc, #220]	@ (800c320 <SpiInit+0x118>)
 800c242:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800c246:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800c24a:	4b35      	ldr	r3, [pc, #212]	@ (800c320 <SpiInit+0x118>)
 800c24c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c250:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c254:	60fb      	str	r3, [r7, #12]
 800c256:	68fb      	ldr	r3, [r7, #12]

//    obj->Spi.Instance = ( SPI_TypeDef *) SPI1_BASE;
    obj->Spi.Instance = SPI1; //( SPI_TypeDef *) SPI1_BASE;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	4a32      	ldr	r2, [pc, #200]	@ (800c324 <SpiInit+0x11c>)
 800c25c:	601a      	str	r2, [r3, #0]

    GpioInit( &obj->Mosi, mosi, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_DOWN, GPIO_AF5_SPI1 );
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 800c264:	f997 1003 	ldrsb.w	r1, [r7, #3]
 800c268:	2305      	movs	r3, #5
 800c26a:	9301      	str	r3, [sp, #4]
 800c26c:	2302      	movs	r3, #2
 800c26e:	9300      	str	r3, [sp, #0]
 800c270:	2300      	movs	r3, #0
 800c272:	2202      	movs	r2, #2
 800c274:	f7ff faa6 	bl	800b7c4 <GpioInit>
    GpioInit( &obj->Miso, miso, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_DOWN, GPIO_AF5_SPI1 );
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	f103 009c 	add.w	r0, r3, #156	@ 0x9c
 800c27e:	f997 1002 	ldrsb.w	r1, [r7, #2]
 800c282:	2305      	movs	r3, #5
 800c284:	9301      	str	r3, [sp, #4]
 800c286:	2302      	movs	r3, #2
 800c288:	9300      	str	r3, [sp, #0]
 800c28a:	2300      	movs	r3, #0
 800c28c:	2202      	movs	r2, #2
 800c28e:	f7ff fa99 	bl	800b7c4 <GpioInit>
    GpioInit( &obj->Sclk, sclk, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_DOWN, GPIO_AF5_SPI1 );
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	f103 00a8 	add.w	r0, r3, #168	@ 0xa8
 800c298:	f997 1001 	ldrsb.w	r1, [r7, #1]
 800c29c:	2305      	movs	r3, #5
 800c29e:	9301      	str	r3, [sp, #4]
 800c2a0:	2302      	movs	r3, #2
 800c2a2:	9300      	str	r3, [sp, #0]
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	2202      	movs	r2, #2
 800c2a8:	f7ff fa8c 	bl	800b7c4 <GpioInit>

    if( nss != NC )
 800c2ac:	f997 3018 	ldrsb.w	r3, [r7, #24]
 800c2b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2b4:	d00d      	beq.n	800c2d2 <SpiInit+0xca>
    {
        GpioInit( &obj->Nss, nss, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_UP, GPIO_AF5_SPI1 );
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	f103 00b4 	add.w	r0, r3, #180	@ 0xb4
 800c2bc:	f997 1018 	ldrsb.w	r1, [r7, #24]
 800c2c0:	2305      	movs	r3, #5
 800c2c2:	9301      	str	r3, [sp, #4]
 800c2c4:	2301      	movs	r3, #1
 800c2c6:	9300      	str	r3, [sp, #0]
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	2202      	movs	r2, #2
 800c2cc:	f7ff fa7a 	bl	800b7c4 <GpioInit>
 800c2d0:	e003      	b.n	800c2da <SpiInit+0xd2>
    }
    else
    {
        obj->Spi.Init.NSS = SPI_NSS_SOFT;
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800c2d8:	619a      	str	r2, [r3, #24]
    }

    if( nss == NC )
 800c2da:	f997 3018 	ldrsb.w	r3, [r7, #24]
 800c2de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2e2:	d108      	bne.n	800c2f6 <SpiInit+0xee>
    {
        SpiFormat( obj, SPI_DATASIZE_8BIT, SPI_POLARITY_LOW, SPI_PHASE_1EDGE, 0 );
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	9300      	str	r3, [sp, #0]
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	2107      	movs	r1, #7
 800c2ee:	6878      	ldr	r0, [r7, #4]
 800c2f0:	f000 f81a 	bl	800c328 <SpiFormat>
 800c2f4:	e007      	b.n	800c306 <SpiInit+0xfe>
    }
    else
    {
        SpiFormat( obj, SPI_DATASIZE_8BIT, SPI_POLARITY_LOW, SPI_PHASE_1EDGE, 1 );
 800c2f6:	2301      	movs	r3, #1
 800c2f8:	9300      	str	r3, [sp, #0]
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	2107      	movs	r1, #7
 800c300:	6878      	ldr	r0, [r7, #4]
 800c302:	f000 f811 	bl	800c328 <SpiFormat>

//    HAL_SPI_Init( &obj->Spi );

//	SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};

	if (HAL_SPI_Init(&obj->Spi) != HAL_OK)
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	4618      	mov	r0, r3
 800c30a:	f7fd fa6f 	bl	80097ec <HAL_SPI_Init>
 800c30e:	4603      	mov	r3, r0
 800c310:	2b00      	cmp	r3, #0
 800c312:	d001      	beq.n	800c318 <SpiInit+0x110>
	{
		Error_Handler();
 800c314:	f7f7 fd10 	bl	8003d38 <Error_Handler>
		{
			Error_Handler();
		}
	}
	*/
}
 800c318:	bf00      	nop
 800c31a:	3710      	adds	r7, #16
 800c31c:	46bd      	mov	sp, r7
 800c31e:	bd80      	pop	{r7, pc}
 800c320:	46020c00 	.word	0x46020c00
 800c324:	40013000 	.word	0x40013000

0800c328 <SpiFormat>:
    GpioInit( &obj->Sclk, obj->Sclk.pin, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
    GpioInit( &obj->Nss, obj->Nss.pin, PIN_OUTPUT, PIN_PUSH_PULL, PIN_PULL_UP, 1 );
}

void SpiFormat( Spi_t *obj, uint32_t bits, int8_t cpol, int8_t cpha, int8_t slave )
{
 800c328:	b480      	push	{r7}
 800c32a:	b085      	sub	sp, #20
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	60f8      	str	r0, [r7, #12]
 800c330:	60b9      	str	r1, [r7, #8]
 800c332:	4611      	mov	r1, r2
 800c334:	461a      	mov	r2, r3
 800c336:	460b      	mov	r3, r1
 800c338:	71fb      	strb	r3, [r7, #7]
 800c33a:	4613      	mov	r3, r2
 800c33c:	71bb      	strb	r3, [r7, #6]
	/* SPI1 parameter configuration*/
    if( slave == 0 )
 800c33e:	f997 3018 	ldrsb.w	r3, [r7, #24]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d104      	bne.n	800c350 <SpiFormat+0x28>
    {
        obj->Spi.Init.Mode = SPI_MODE_MASTER;
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800c34c:	605a      	str	r2, [r3, #4]
 800c34e:	e002      	b.n	800c356 <SpiFormat+0x2e>
    }
    else
    {
        obj->Spi.Init.Mode = SPI_MODE_SLAVE;
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	2200      	movs	r2, #0
 800c354:	605a      	str	r2, [r3, #4]
    }

	obj->Spi.Init.Direction = SPI_DIRECTION_2LINES;
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	2200      	movs	r2, #0
 800c35a:	609a      	str	r2, [r3, #8]
	if( bits == SPI_DATASIZE_8BIT )
 800c35c:	68bb      	ldr	r3, [r7, #8]
 800c35e:	2b07      	cmp	r3, #7
 800c360:	d103      	bne.n	800c36a <SpiFormat+0x42>
	{
		obj->Spi.Init.DataSize = SPI_DATASIZE_8BIT;
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	2207      	movs	r2, #7
 800c366:	60da      	str	r2, [r3, #12]
 800c368:	e002      	b.n	800c370 <SpiFormat+0x48>
	}
	else
	{
		obj->Spi.Init.DataSize = SPI_DATASIZE_16BIT;
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	220f      	movs	r2, #15
 800c36e:	60da      	str	r2, [r3, #12]
	}

	obj->Spi.Init.CLKPolarity = cpol;
 800c370:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	611a      	str	r2, [r3, #16]
	obj->Spi.Init.CLKPhase = cpha;
 800c378:	f997 2006 	ldrsb.w	r2, [r7, #6]
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	615a      	str	r2, [r3, #20]
	obj->Spi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 800c386:	61da      	str	r2, [r3, #28]
	obj->Spi.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	2200      	movs	r2, #0
 800c38c:	621a      	str	r2, [r3, #32]
	obj->Spi.Init.TIMode = SPI_TIMODE_DISABLE;
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	2200      	movs	r2, #0
 800c392:	625a      	str	r2, [r3, #36]	@ 0x24
	obj->Spi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	2200      	movs	r2, #0
 800c398:	629a      	str	r2, [r3, #40]	@ 0x28
	obj->Spi.Init.CRCPolynomial = 0x7;
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	2207      	movs	r2, #7
 800c39e:	62da      	str	r2, [r3, #44]	@ 0x2c
	obj->Spi.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800c3a6:	635a      	str	r2, [r3, #52]	@ 0x34
	obj->Spi.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	639a      	str	r2, [r3, #56]	@ 0x38
	obj->Spi.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	63da      	str	r2, [r3, #60]	@ 0x3c
	obj->Spi.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	649a      	str	r2, [r3, #72]	@ 0x48
	obj->Spi.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	2200      	movs	r2, #0
 800c3be:	64da      	str	r2, [r3, #76]	@ 0x4c
	obj->Spi.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	651a      	str	r2, [r3, #80]	@ 0x50
	obj->Spi.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	655a      	str	r2, [r3, #84]	@ 0x54
	obj->Spi.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	659a      	str	r2, [r3, #88]	@ 0x58
	obj->Spi.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	65da      	str	r2, [r3, #92]	@ 0x5c
	obj->Spi.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	2200      	movs	r2, #0
 800c3dc:	661a      	str	r2, [r3, #96]	@ 0x60
}
 800c3de:	bf00      	nop
 800c3e0:	3714      	adds	r7, #20
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e8:	4770      	bx	lr
	...

0800c3ec <SX1276IoInit>:
 */
Gpio_t AntRx;
Gpio_t AntTx;

void SX1276IoInit( void )
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b082      	sub	sp, #8
 800c3f0:	af02      	add	r7, sp, #8
    GpioInit( &SX1276.Spi.Nss, RADIO_NSS, PIN_OUTPUT, PIN_PUSH_PULL, PIN_PULL_UP, 1 );
 800c3f2:	2301      	movs	r3, #1
 800c3f4:	9301      	str	r3, [sp, #4]
 800c3f6:	2301      	movs	r3, #1
 800c3f8:	9300      	str	r3, [sp, #0]
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	2201      	movs	r2, #1
 800c3fe:	2129      	movs	r1, #41	@ 0x29
 800c400:	4820      	ldr	r0, [pc, #128]	@ (800c484 <SX1276IoInit+0x98>)
 800c402:	f7ff f9df 	bl	800b7c4 <GpioInit>

    GpioInit( &SX1276.DIO0, RADIO_DIO_0, PIN_INPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
 800c406:	2300      	movs	r3, #0
 800c408:	9301      	str	r3, [sp, #4]
 800c40a:	2301      	movs	r3, #1
 800c40c:	9300      	str	r3, [sp, #0]
 800c40e:	2300      	movs	r3, #0
 800c410:	2200      	movs	r2, #0
 800c412:	2112      	movs	r1, #18
 800c414:	481c      	ldr	r0, [pc, #112]	@ (800c488 <SX1276IoInit+0x9c>)
 800c416:	f7ff f9d5 	bl	800b7c4 <GpioInit>
    GpioInit( &SX1276.DIO1, RADIO_DIO_1, PIN_INPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
 800c41a:	2300      	movs	r3, #0
 800c41c:	9301      	str	r3, [sp, #4]
 800c41e:	2301      	movs	r3, #1
 800c420:	9300      	str	r3, [sp, #0]
 800c422:	2300      	movs	r3, #0
 800c424:	2200      	movs	r2, #0
 800c426:	2111      	movs	r1, #17
 800c428:	4818      	ldr	r0, [pc, #96]	@ (800c48c <SX1276IoInit+0xa0>)
 800c42a:	f7ff f9cb 	bl	800b7c4 <GpioInit>
    GpioInit( &SX1276.DIO2, RADIO_DIO_2, PIN_INPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
 800c42e:	2300      	movs	r3, #0
 800c430:	9301      	str	r3, [sp, #4]
 800c432:	2301      	movs	r3, #1
 800c434:	9300      	str	r3, [sp, #0]
 800c436:	2300      	movs	r3, #0
 800c438:	2200      	movs	r2, #0
 800c43a:	211f      	movs	r1, #31
 800c43c:	4814      	ldr	r0, [pc, #80]	@ (800c490 <SX1276IoInit+0xa4>)
 800c43e:	f7ff f9c1 	bl	800b7c4 <GpioInit>
    GpioInit( &SX1276.DIO3, RADIO_DIO_3, PIN_INPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
 800c442:	2300      	movs	r3, #0
 800c444:	9301      	str	r3, [sp, #4]
 800c446:	2301      	movs	r3, #1
 800c448:	9300      	str	r3, [sp, #0]
 800c44a:	2300      	movs	r3, #0
 800c44c:	2200      	movs	r2, #0
 800c44e:	211e      	movs	r1, #30
 800c450:	4810      	ldr	r0, [pc, #64]	@ (800c494 <SX1276IoInit+0xa8>)
 800c452:	f7ff f9b7 	bl	800b7c4 <GpioInit>
    GpioInit( &SX1276.DIO4, RADIO_DIO_4, PIN_INPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
 800c456:	2300      	movs	r3, #0
 800c458:	9301      	str	r3, [sp, #4]
 800c45a:	2301      	movs	r3, #1
 800c45c:	9300      	str	r3, [sp, #0]
 800c45e:	2300      	movs	r3, #0
 800c460:	2200      	movs	r2, #0
 800c462:	211d      	movs	r1, #29
 800c464:	480c      	ldr	r0, [pc, #48]	@ (800c498 <SX1276IoInit+0xac>)
 800c466:	f7ff f9ad 	bl	800b7c4 <GpioInit>
    GpioInit( &SX1276.DIO5, RADIO_DIO_5, PIN_INPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
 800c46a:	2300      	movs	r3, #0
 800c46c:	9301      	str	r3, [sp, #4]
 800c46e:	2301      	movs	r3, #1
 800c470:	9300      	str	r3, [sp, #0]
 800c472:	2300      	movs	r3, #0
 800c474:	2200      	movs	r2, #0
 800c476:	2118      	movs	r1, #24
 800c478:	4808      	ldr	r0, [pc, #32]	@ (800c49c <SX1276IoInit+0xb0>)
 800c47a:	f7ff f9a3 	bl	800b7c4 <GpioInit>
}
 800c47e:	bf00      	nop
 800c480:	46bd      	mov	sp, r7
 800c482:	bd80      	pop	{r7, pc}
 800c484:	200006fc 	.word	0x200006fc
 800c488:	20000600 	.word	0x20000600
 800c48c:	2000060c 	.word	0x2000060c
 800c490:	20000618 	.word	0x20000618
 800c494:	20000624 	.word	0x20000624
 800c498:	20000630 	.word	0x20000630
 800c49c:	2000063c 	.word	0x2000063c

0800c4a0 <SX1276IoIrqInit>:

void SX1276IoIrqInit( DioIrqHandler **irqHandlers )
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b082      	sub	sp, #8
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
    GpioSetInterrupt( &SX1276.DIO0, IRQ_RISING_EDGE, IRQ_HIGH_PRIORITY, irqHandlers[0] );
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	2203      	movs	r2, #3
 800c4ae:	2101      	movs	r1, #1
 800c4b0:	4817      	ldr	r0, [pc, #92]	@ (800c510 <SX1276IoIrqInit+0x70>)
 800c4b2:	f7ff f9ab 	bl	800b80c <GpioSetInterrupt>
    GpioSetInterrupt( &SX1276.DIO1, IRQ_RISING_EDGE, IRQ_HIGH_PRIORITY, irqHandlers[1] );
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	3304      	adds	r3, #4
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	2203      	movs	r2, #3
 800c4be:	2101      	movs	r1, #1
 800c4c0:	4814      	ldr	r0, [pc, #80]	@ (800c514 <SX1276IoIrqInit+0x74>)
 800c4c2:	f7ff f9a3 	bl	800b80c <GpioSetInterrupt>
    GpioSetInterrupt( &SX1276.DIO2, IRQ_RISING_EDGE, IRQ_HIGH_PRIORITY, irqHandlers[2] );
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	3308      	adds	r3, #8
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	2203      	movs	r2, #3
 800c4ce:	2101      	movs	r1, #1
 800c4d0:	4811      	ldr	r0, [pc, #68]	@ (800c518 <SX1276IoIrqInit+0x78>)
 800c4d2:	f7ff f99b 	bl	800b80c <GpioSetInterrupt>
    GpioSetInterrupt( &SX1276.DIO3, IRQ_RISING_EDGE, IRQ_HIGH_PRIORITY, irqHandlers[3] );
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	330c      	adds	r3, #12
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	2203      	movs	r2, #3
 800c4de:	2101      	movs	r1, #1
 800c4e0:	480e      	ldr	r0, [pc, #56]	@ (800c51c <SX1276IoIrqInit+0x7c>)
 800c4e2:	f7ff f993 	bl	800b80c <GpioSetInterrupt>
    GpioSetInterrupt( &SX1276.DIO4, IRQ_RISING_EDGE, IRQ_HIGH_PRIORITY, irqHandlers[4] );
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	3310      	adds	r3, #16
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	2203      	movs	r2, #3
 800c4ee:	2101      	movs	r1, #1
 800c4f0:	480b      	ldr	r0, [pc, #44]	@ (800c520 <SX1276IoIrqInit+0x80>)
 800c4f2:	f7ff f98b 	bl	800b80c <GpioSetInterrupt>
    GpioSetInterrupt( &SX1276.DIO5, IRQ_RISING_EDGE, IRQ_HIGH_PRIORITY, irqHandlers[5] );
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	3314      	adds	r3, #20
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	2203      	movs	r2, #3
 800c4fe:	2101      	movs	r1, #1
 800c500:	4808      	ldr	r0, [pc, #32]	@ (800c524 <SX1276IoIrqInit+0x84>)
 800c502:	f7ff f983 	bl	800b80c <GpioSetInterrupt>
}
 800c506:	bf00      	nop
 800c508:	3708      	adds	r7, #8
 800c50a:	46bd      	mov	sp, r7
 800c50c:	bd80      	pop	{r7, pc}
 800c50e:	bf00      	nop
 800c510:	20000600 	.word	0x20000600
 800c514:	2000060c 	.word	0x2000060c
 800c518:	20000618 	.word	0x20000618
 800c51c:	20000624 	.word	0x20000624
 800c520:	20000630 	.word	0x20000630
 800c524:	2000063c 	.word	0x2000063c

0800c528 <SX1276GetPaSelect>:
    GpioInit( &SX1276.DIO4, RADIO_DIO_4, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
    GpioInit( &SX1276.DIO5, RADIO_DIO_5, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
}

uint8_t SX1276GetPaSelect( uint32_t channel )
{
 800c528:	b480      	push	{r7}
 800c52a:	b083      	sub	sp, #12
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
    return RF_PACONFIG_PASELECT_PABOOST;
 800c530:	2380      	movs	r3, #128	@ 0x80
}
 800c532:	4618      	mov	r0, r3
 800c534:	370c      	adds	r7, #12
 800c536:	46bd      	mov	sp, r7
 800c538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53c:	4770      	bx	lr
	...

0800c540 <SX1276SetAntSwLowPower>:

void SX1276SetAntSwLowPower( bool status )
{
 800c540:	b580      	push	{r7, lr}
 800c542:	b082      	sub	sp, #8
 800c544:	af00      	add	r7, sp, #0
 800c546:	4603      	mov	r3, r0
 800c548:	71fb      	strb	r3, [r7, #7]
    if( RadioIsActive != status )
 800c54a:	4b0b      	ldr	r3, [pc, #44]	@ (800c578 <SX1276SetAntSwLowPower+0x38>)
 800c54c:	781b      	ldrb	r3, [r3, #0]
 800c54e:	79fa      	ldrb	r2, [r7, #7]
 800c550:	429a      	cmp	r2, r3
 800c552:	d00d      	beq.n	800c570 <SX1276SetAntSwLowPower+0x30>
    {
        RadioIsActive = status;
 800c554:	4a08      	ldr	r2, [pc, #32]	@ (800c578 <SX1276SetAntSwLowPower+0x38>)
 800c556:	79fb      	ldrb	r3, [r7, #7]
 800c558:	7013      	strb	r3, [r2, #0]

        if( status == false )
 800c55a:	79fb      	ldrb	r3, [r7, #7]
 800c55c:	f083 0301 	eor.w	r3, r3, #1
 800c560:	b2db      	uxtb	r3, r3
 800c562:	2b00      	cmp	r3, #0
 800c564:	d002      	beq.n	800c56c <SX1276SetAntSwLowPower+0x2c>
        {
            SX1276AntSwInit( );
 800c566:	f000 f809 	bl	800c57c <SX1276AntSwInit>
        else
        {
            SX1276AntSwDeInit( );
        }
    }
}
 800c56a:	e001      	b.n	800c570 <SX1276SetAntSwLowPower+0x30>
            SX1276AntSwDeInit( );
 800c56c:	f000 f824 	bl	800c5b8 <SX1276AntSwDeInit>
}
 800c570:	bf00      	nop
 800c572:	3708      	adds	r7, #8
 800c574:	46bd      	mov	sp, r7
 800c576:	bd80      	pop	{r7, pc}
 800c578:	200004cc 	.word	0x200004cc

0800c57c <SX1276AntSwInit>:

void SX1276AntSwInit( void )
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b082      	sub	sp, #8
 800c580:	af02      	add	r7, sp, #8
    GpioInit( &AntTx, RADIO_ANT_SWITCH_TX, PIN_OUTPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
 800c582:	2300      	movs	r3, #0
 800c584:	9301      	str	r3, [sp, #4]
 800c586:	2301      	movs	r3, #1
 800c588:	9300      	str	r3, [sp, #0]
 800c58a:	2300      	movs	r3, #0
 800c58c:	2201      	movs	r2, #1
 800c58e:	2114      	movs	r1, #20
 800c590:	4807      	ldr	r0, [pc, #28]	@ (800c5b0 <SX1276AntSwInit+0x34>)
 800c592:	f7ff f917 	bl	800b7c4 <GpioInit>
    GpioInit( &AntRx, RADIO_ANT_SWITCH_RX, PIN_OUTPUT, PIN_PUSH_PULL, PIN_PULL_UP, 1 );
 800c596:	2301      	movs	r3, #1
 800c598:	9301      	str	r3, [sp, #4]
 800c59a:	2301      	movs	r3, #1
 800c59c:	9300      	str	r3, [sp, #0]
 800c59e:	2300      	movs	r3, #0
 800c5a0:	2201      	movs	r2, #1
 800c5a2:	2115      	movs	r1, #21
 800c5a4:	4803      	ldr	r0, [pc, #12]	@ (800c5b4 <SX1276AntSwInit+0x38>)
 800c5a6:	f7ff f90d 	bl	800b7c4 <GpioInit>
}
 800c5aa:	bf00      	nop
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	bd80      	pop	{r7, pc}
 800c5b0:	200004dc 	.word	0x200004dc
 800c5b4:	200004d0 	.word	0x200004d0

0800c5b8 <SX1276AntSwDeInit>:

void SX1276AntSwDeInit( void )
{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b082      	sub	sp, #8
 800c5bc:	af02      	add	r7, sp, #8
    GpioInit( &AntTx, RADIO_ANT_SWITCH_TX, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800c5be:	2300      	movs	r3, #0
 800c5c0:	9301      	str	r3, [sp, #4]
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	9300      	str	r3, [sp, #0]
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	2203      	movs	r2, #3
 800c5ca:	2114      	movs	r1, #20
 800c5cc:	4807      	ldr	r0, [pc, #28]	@ (800c5ec <SX1276AntSwDeInit+0x34>)
 800c5ce:	f7ff f8f9 	bl	800b7c4 <GpioInit>
    GpioInit( &AntRx, RADIO_ANT_SWITCH_RX, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	9301      	str	r3, [sp, #4]
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	9300      	str	r3, [sp, #0]
 800c5da:	2300      	movs	r3, #0
 800c5dc:	2203      	movs	r2, #3
 800c5de:	2115      	movs	r1, #21
 800c5e0:	4803      	ldr	r0, [pc, #12]	@ (800c5f0 <SX1276AntSwDeInit+0x38>)
 800c5e2:	f7ff f8ef 	bl	800b7c4 <GpioInit>
}
 800c5e6:	bf00      	nop
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	bd80      	pop	{r7, pc}
 800c5ec:	200004dc 	.word	0x200004dc
 800c5f0:	200004d0 	.word	0x200004d0

0800c5f4 <SX1276SetAntSw>:

void SX1276SetAntSw( uint8_t rxTx )
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b082      	sub	sp, #8
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	4603      	mov	r3, r0
 800c5fc:	71fb      	strb	r3, [r7, #7]
    if( rxTx != 0 ) // 1: TX, 0: RX
 800c5fe:	79fb      	ldrb	r3, [r7, #7]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d008      	beq.n	800c616 <SX1276SetAntSw+0x22>
    {
        GpioWrite( &AntRx, 0 );
 800c604:	2100      	movs	r1, #0
 800c606:	480a      	ldr	r0, [pc, #40]	@ (800c630 <SX1276SetAntSw+0x3c>)
 800c608:	f7ff f91b 	bl	800b842 <GpioWrite>
        GpioWrite( &AntTx, 1 );
 800c60c:	2101      	movs	r1, #1
 800c60e:	4809      	ldr	r0, [pc, #36]	@ (800c634 <SX1276SetAntSw+0x40>)
 800c610:	f7ff f917 	bl	800b842 <GpioWrite>
    else
    {
        GpioWrite( &AntRx, 1 );
        GpioWrite( &AntTx, 0 );
    }
}
 800c614:	e007      	b.n	800c626 <SX1276SetAntSw+0x32>
        GpioWrite( &AntRx, 1 );
 800c616:	2101      	movs	r1, #1
 800c618:	4805      	ldr	r0, [pc, #20]	@ (800c630 <SX1276SetAntSw+0x3c>)
 800c61a:	f7ff f912 	bl	800b842 <GpioWrite>
        GpioWrite( &AntTx, 0 );
 800c61e:	2100      	movs	r1, #0
 800c620:	4804      	ldr	r0, [pc, #16]	@ (800c634 <SX1276SetAntSw+0x40>)
 800c622:	f7ff f90e 	bl	800b842 <GpioWrite>
}
 800c626:	bf00      	nop
 800c628:	3708      	adds	r7, #8
 800c62a:	46bd      	mov	sp, r7
 800c62c:	bd80      	pop	{r7, pc}
 800c62e:	bf00      	nop
 800c630:	200004d0 	.word	0x200004d0
 800c634:	200004dc 	.word	0x200004dc

0800c638 <SX1276CheckRfFrequency>:

bool SX1276CheckRfFrequency( uint32_t frequency )
{
 800c638:	b480      	push	{r7}
 800c63a:	b083      	sub	sp, #12
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
    // Implement check. Currently all frequencies are supported
    return true;
 800c640:	2301      	movs	r3, #1
}
 800c642:	4618      	mov	r0, r3
 800c644:	370c      	adds	r7, #12
 800c646:	46bd      	mov	sp, r7
 800c648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64c:	4770      	bx	lr

0800c64e <TimerInit>:
 * \retval value current timer value
 */
TimerTime_t TimerGetValue( void );

void TimerInit( TimerEvent_t *obj, void ( *callback )( void ) )
{
 800c64e:	b480      	push	{r7}
 800c650:	b083      	sub	sp, #12
 800c652:	af00      	add	r7, sp, #0
 800c654:	6078      	str	r0, [r7, #4]
 800c656:	6039      	str	r1, [r7, #0]
    obj->Timestamp = 0;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	2200      	movs	r2, #0
 800c65c:	601a      	str	r2, [r3, #0]
    obj->ReloadValue = 0;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	2200      	movs	r2, #0
 800c662:	605a      	str	r2, [r3, #4]
    obj->IsRunning = false;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	2200      	movs	r2, #0
 800c668:	721a      	strb	r2, [r3, #8]
    obj->Callback = callback;
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	683a      	ldr	r2, [r7, #0]
 800c66e:	60da      	str	r2, [r3, #12]
    obj->Next = NULL;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	2200      	movs	r2, #0
 800c674:	611a      	str	r2, [r3, #16]
}
 800c676:	bf00      	nop
 800c678:	370c      	adds	r7, #12
 800c67a:	46bd      	mov	sp, r7
 800c67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c680:	4770      	bx	lr
	...

0800c684 <TimerStart>:

void TimerStart( TimerEvent_t *obj )
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b084      	sub	sp, #16
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
    uint32_t elapsedTime = 0;
 800c68c:	2300      	movs	r3, #0
 800c68e:	60fb      	str	r3, [r7, #12]
    uint32_t remainingTime = 0;
 800c690:	2300      	movs	r3, #0
 800c692:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 800c694:	b672      	cpsid	i
}
 800c696:	bf00      	nop

    __disable_irq( );

    if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d005      	beq.n	800c6aa <TimerStart+0x26>
 800c69e:	6878      	ldr	r0, [r7, #4]
 800c6a0:	f000 f9d8 	bl	800ca54 <TimerExists>
 800c6a4:	4603      	mov	r3, r0
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d002      	beq.n	800c6b0 <TimerStart+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
 800c6aa:	b662      	cpsie	i
}
 800c6ac:	bf00      	nop
    {
        __enable_irq( );
        return;
 800c6ae:	e03e      	b.n	800c72e <TimerStart+0xaa>
    }

    obj->Timestamp = obj->ReloadValue;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	685a      	ldr	r2, [r3, #4]
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	601a      	str	r2, [r3, #0]
    obj->IsRunning = false;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	721a      	strb	r2, [r3, #8]

    if( TimerListHead == NULL )
 800c6be:	4b1d      	ldr	r3, [pc, #116]	@ (800c734 <TimerStart+0xb0>)
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d106      	bne.n	800c6d4 <TimerStart+0x50>
    {
        TimerInsertNewHeadTimer( obj, obj->Timestamp );
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	4619      	mov	r1, r3
 800c6cc:	6878      	ldr	r0, [r7, #4]
 800c6ce:	f000 f8a1 	bl	800c814 <TimerInsertNewHeadTimer>
 800c6d2:	e02a      	b.n	800c72a <TimerStart+0xa6>
    }
    else
    {
        if( TimerListHead->IsRunning == true )
 800c6d4:	4b17      	ldr	r3, [pc, #92]	@ (800c734 <TimerStart+0xb0>)
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	7a1b      	ldrb	r3, [r3, #8]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d013      	beq.n	800c706 <TimerStart+0x82>
        {
            elapsedTime = TimerGetValue( );
 800c6de:	f000 f9e9 	bl	800cab4 <TimerGetValue>
 800c6e2:	60f8      	str	r0, [r7, #12]
            if( elapsedTime > TimerListHead->Timestamp )
 800c6e4:	4b13      	ldr	r3, [pc, #76]	@ (800c734 <TimerStart+0xb0>)
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	68fa      	ldr	r2, [r7, #12]
 800c6ec:	429a      	cmp	r2, r3
 800c6ee:	d903      	bls.n	800c6f8 <TimerStart+0x74>
            {
                elapsedTime = TimerListHead->Timestamp; // security but should never occur
 800c6f0:	4b10      	ldr	r3, [pc, #64]	@ (800c734 <TimerStart+0xb0>)
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	60fb      	str	r3, [r7, #12]
            }
            remainingTime = TimerListHead->Timestamp - elapsedTime;
 800c6f8:	4b0e      	ldr	r3, [pc, #56]	@ (800c734 <TimerStart+0xb0>)
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	681a      	ldr	r2, [r3, #0]
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	1ad3      	subs	r3, r2, r3
 800c702:	60bb      	str	r3, [r7, #8]
 800c704:	e003      	b.n	800c70e <TimerStart+0x8a>
        }
        else
        {
            remainingTime = TimerListHead->Timestamp;
 800c706:	4b0b      	ldr	r3, [pc, #44]	@ (800c734 <TimerStart+0xb0>)
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	60bb      	str	r3, [r7, #8]
        }

        if( obj->Timestamp < remainingTime )
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	68ba      	ldr	r2, [r7, #8]
 800c714:	429a      	cmp	r2, r3
 800c716:	d904      	bls.n	800c722 <TimerStart+0x9e>
        {
            TimerInsertNewHeadTimer( obj, remainingTime );
 800c718:	68b9      	ldr	r1, [r7, #8]
 800c71a:	6878      	ldr	r0, [r7, #4]
 800c71c:	f000 f87a 	bl	800c814 <TimerInsertNewHeadTimer>
 800c720:	e003      	b.n	800c72a <TimerStart+0xa6>
        }
        else
        {
             TimerInsertTimer( obj, remainingTime );
 800c722:	68b9      	ldr	r1, [r7, #8]
 800c724:	6878      	ldr	r0, [r7, #4]
 800c726:	f000 f807 	bl	800c738 <TimerInsertTimer>
  __ASM volatile ("cpsie i" : : : "memory");
 800c72a:	b662      	cpsie	i
}
 800c72c:	bf00      	nop
        }
    }
    __enable_irq( );
}
 800c72e:	3710      	adds	r7, #16
 800c730:	46bd      	mov	sp, r7
 800c732:	bd80      	pop	{r7, pc}
 800c734:	200004ec 	.word	0x200004ec

0800c738 <TimerInsertTimer>:

static void TimerInsertTimer( TimerEvent_t *obj, uint32_t remainingTime )
{
 800c738:	b480      	push	{r7}
 800c73a:	b087      	sub	sp, #28
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
 800c740:	6039      	str	r1, [r7, #0]
    uint32_t aggregatedTimestamp = 0;      // hold the sum of timestamps
 800c742:	2300      	movs	r3, #0
 800c744:	617b      	str	r3, [r7, #20]
    uint32_t aggregatedTimestampNext = 0;  // hold the sum of timestamps up to the next event
 800c746:	2300      	movs	r3, #0
 800c748:	613b      	str	r3, [r7, #16]

    TimerEvent_t* prev = TimerListHead;
 800c74a:	4b31      	ldr	r3, [pc, #196]	@ (800c810 <TimerInsertTimer+0xd8>)
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	60fb      	str	r3, [r7, #12]
    TimerEvent_t* cur = TimerListHead->Next;
 800c750:	4b2f      	ldr	r3, [pc, #188]	@ (800c810 <TimerInsertTimer+0xd8>)
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	691b      	ldr	r3, [r3, #16]
 800c756:	60bb      	str	r3, [r7, #8]

    if( cur == NULL )
 800c758:	68bb      	ldr	r3, [r7, #8]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d10c      	bne.n	800c778 <TimerInsertTimer+0x40>
    { // obj comes just after the head
        obj->Timestamp -= remainingTime;
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	681a      	ldr	r2, [r3, #0]
 800c762:	683b      	ldr	r3, [r7, #0]
 800c764:	1ad2      	subs	r2, r2, r3
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	601a      	str	r2, [r3, #0]
        prev->Next = obj;
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	687a      	ldr	r2, [r7, #4]
 800c76e:	611a      	str	r2, [r3, #16]
        obj->Next = NULL;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	2200      	movs	r2, #0
 800c774:	611a      	str	r2, [r3, #16]
                    aggregatedTimestampNext = aggregatedTimestampNext + cur->Timestamp;
                }
            }
        }
    }
}
 800c776:	e045      	b.n	800c804 <TimerInsertTimer+0xcc>
        aggregatedTimestamp = remainingTime;
 800c778:	683b      	ldr	r3, [r7, #0]
 800c77a:	617b      	str	r3, [r7, #20]
        aggregatedTimestampNext = remainingTime + cur->Timestamp;
 800c77c:	68bb      	ldr	r3, [r7, #8]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	683a      	ldr	r2, [r7, #0]
 800c782:	4413      	add	r3, r2
 800c784:	613b      	str	r3, [r7, #16]
        while( prev != NULL )
 800c786:	e039      	b.n	800c7fc <TimerInsertTimer+0xc4>
            if( aggregatedTimestampNext > obj->Timestamp )
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	693a      	ldr	r2, [r7, #16]
 800c78e:	429a      	cmp	r2, r3
 800c790:	d916      	bls.n	800c7c0 <TimerInsertTimer+0x88>
                obj->Timestamp -= aggregatedTimestamp;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681a      	ldr	r2, [r3, #0]
 800c796:	697b      	ldr	r3, [r7, #20]
 800c798:	1ad2      	subs	r2, r2, r3
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	601a      	str	r2, [r3, #0]
                if( cur != NULL )
 800c79e:	68bb      	ldr	r3, [r7, #8]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d006      	beq.n	800c7b2 <TimerInsertTimer+0x7a>
                    cur->Timestamp -= obj->Timestamp;
 800c7a4:	68bb      	ldr	r3, [r7, #8]
 800c7a6:	681a      	ldr	r2, [r3, #0]
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	1ad2      	subs	r2, r2, r3
 800c7ae:	68bb      	ldr	r3, [r7, #8]
 800c7b0:	601a      	str	r2, [r3, #0]
                prev->Next = obj;
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	687a      	ldr	r2, [r7, #4]
 800c7b6:	611a      	str	r2, [r3, #16]
                obj->Next = cur;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	68ba      	ldr	r2, [r7, #8]
 800c7bc:	611a      	str	r2, [r3, #16]
                break;
 800c7be:	e021      	b.n	800c804 <TimerInsertTimer+0xcc>
                prev = cur;
 800c7c0:	68bb      	ldr	r3, [r7, #8]
 800c7c2:	60fb      	str	r3, [r7, #12]
                cur = cur->Next;
 800c7c4:	68bb      	ldr	r3, [r7, #8]
 800c7c6:	691b      	ldr	r3, [r3, #16]
 800c7c8:	60bb      	str	r3, [r7, #8]
                if( cur == NULL )
 800c7ca:	68bb      	ldr	r3, [r7, #8]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d10e      	bne.n	800c7ee <TimerInsertTimer+0xb6>
                    aggregatedTimestamp = aggregatedTimestampNext;
 800c7d0:	693b      	ldr	r3, [r7, #16]
 800c7d2:	617b      	str	r3, [r7, #20]
                    obj->Timestamp -= aggregatedTimestamp;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	681a      	ldr	r2, [r3, #0]
 800c7d8:	697b      	ldr	r3, [r7, #20]
 800c7da:	1ad2      	subs	r2, r2, r3
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	601a      	str	r2, [r3, #0]
                    prev->Next = obj;
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	687a      	ldr	r2, [r7, #4]
 800c7e4:	611a      	str	r2, [r3, #16]
                    obj->Next = NULL;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	611a      	str	r2, [r3, #16]
                    break;
 800c7ec:	e00a      	b.n	800c804 <TimerInsertTimer+0xcc>
                    aggregatedTimestamp = aggregatedTimestampNext;
 800c7ee:	693b      	ldr	r3, [r7, #16]
 800c7f0:	617b      	str	r3, [r7, #20]
                    aggregatedTimestampNext = aggregatedTimestampNext + cur->Timestamp;
 800c7f2:	68bb      	ldr	r3, [r7, #8]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	693a      	ldr	r2, [r7, #16]
 800c7f8:	4413      	add	r3, r2
 800c7fa:	613b      	str	r3, [r7, #16]
        while( prev != NULL )
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d1c2      	bne.n	800c788 <TimerInsertTimer+0x50>
}
 800c802:	e7ff      	b.n	800c804 <TimerInsertTimer+0xcc>
 800c804:	bf00      	nop
 800c806:	371c      	adds	r7, #28
 800c808:	46bd      	mov	sp, r7
 800c80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80e:	4770      	bx	lr
 800c810:	200004ec 	.word	0x200004ec

0800c814 <TimerInsertNewHeadTimer>:

static void TimerInsertNewHeadTimer( TimerEvent_t *obj, uint32_t remainingTime )
{
 800c814:	b580      	push	{r7, lr}
 800c816:	b084      	sub	sp, #16
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
 800c81c:	6039      	str	r1, [r7, #0]
    TimerEvent_t* cur = TimerListHead;
 800c81e:	4b10      	ldr	r3, [pc, #64]	@ (800c860 <TimerInsertNewHeadTimer+0x4c>)
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	60fb      	str	r3, [r7, #12]

    if( cur != NULL )
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d008      	beq.n	800c83c <TimerInsertNewHeadTimer+0x28>
    {
        cur->Timestamp = remainingTime - obj->Timestamp;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	683a      	ldr	r2, [r7, #0]
 800c830:	1ad2      	subs	r2, r2, r3
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	601a      	str	r2, [r3, #0]
        cur->IsRunning = false;
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	2200      	movs	r2, #0
 800c83a:	721a      	strb	r2, [r3, #8]
    }

    obj->Next = cur;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	68fa      	ldr	r2, [r7, #12]
 800c840:	611a      	str	r2, [r3, #16]
    obj->IsRunning = true;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	2201      	movs	r2, #1
 800c846:	721a      	strb	r2, [r3, #8]
    TimerListHead = obj;
 800c848:	4a05      	ldr	r2, [pc, #20]	@ (800c860 <TimerInsertNewHeadTimer+0x4c>)
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	6013      	str	r3, [r2, #0]
    TimerSetTimeout( TimerListHead );
 800c84e:	4b04      	ldr	r3, [pc, #16]	@ (800c860 <TimerInsertNewHeadTimer+0x4c>)
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	4618      	mov	r0, r3
 800c854:	f000 f936 	bl	800cac4 <TimerSetTimeout>
}
 800c858:	bf00      	nop
 800c85a:	3710      	adds	r7, #16
 800c85c:	46bd      	mov	sp, r7
 800c85e:	bd80      	pop	{r7, pc}
 800c860:	200004ec 	.word	0x200004ec

0800c864 <TimerIrqHandler>:

void TimerIrqHandler( void )
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b082      	sub	sp, #8
 800c868:	af00      	add	r7, sp, #0
    uint32_t elapsedTime = 0;
 800c86a:	2300      	movs	r3, #0
 800c86c:	607b      	str	r3, [r7, #4]

    elapsedTime = TimerGetValue( );
 800c86e:	f000 f921 	bl	800cab4 <TimerGetValue>
 800c872:	6078      	str	r0, [r7, #4]
    
    if (TimerListHead == NULL)  // PK: this is just a workaround to avoid HardFault error caused by null-pointer (it is cleared earlier for an unknown reason)
 800c874:	4b26      	ldr	r3, [pc, #152]	@ (800c910 <TimerIrqHandler+0xac>)
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d045      	beq.n	800c908 <TimerIrqHandler+0xa4>
    	return;

    if( elapsedTime >= TimerListHead->Timestamp )
 800c87c:	4b24      	ldr	r3, [pc, #144]	@ (800c910 <TimerIrqHandler+0xac>)
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	687a      	ldr	r2, [r7, #4]
 800c884:	429a      	cmp	r2, r3
 800c886:	d304      	bcc.n	800c892 <TimerIrqHandler+0x2e>
    {
        TimerListHead->Timestamp = 0;
 800c888:	4b21      	ldr	r3, [pc, #132]	@ (800c910 <TimerIrqHandler+0xac>)
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	2200      	movs	r2, #0
 800c88e:	601a      	str	r2, [r3, #0]
 800c890:	e007      	b.n	800c8a2 <TimerIrqHandler+0x3e>
    }
    else
    {
        TimerListHead->Timestamp -= elapsedTime;
 800c892:	4b1f      	ldr	r3, [pc, #124]	@ (800c910 <TimerIrqHandler+0xac>)
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	6819      	ldr	r1, [r3, #0]
 800c898:	4b1d      	ldr	r3, [pc, #116]	@ (800c910 <TimerIrqHandler+0xac>)
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	687a      	ldr	r2, [r7, #4]
 800c89e:	1a8a      	subs	r2, r1, r2
 800c8a0:	601a      	str	r2, [r3, #0]
    }

    TimerListHead->IsRunning = false;
 800c8a2:	4b1b      	ldr	r3, [pc, #108]	@ (800c910 <TimerIrqHandler+0xac>)
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	721a      	strb	r2, [r3, #8]

    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp == 0 ) )
 800c8aa:	e00e      	b.n	800c8ca <TimerIrqHandler+0x66>
    {
        TimerEvent_t* elapsedTimer = TimerListHead;
 800c8ac:	4b18      	ldr	r3, [pc, #96]	@ (800c910 <TimerIrqHandler+0xac>)
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	603b      	str	r3, [r7, #0]
        TimerListHead = TimerListHead->Next;
 800c8b2:	4b17      	ldr	r3, [pc, #92]	@ (800c910 <TimerIrqHandler+0xac>)
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	691b      	ldr	r3, [r3, #16]
 800c8b8:	4a15      	ldr	r2, [pc, #84]	@ (800c910 <TimerIrqHandler+0xac>)
 800c8ba:	6013      	str	r3, [r2, #0]

        if( elapsedTimer->Callback != NULL )
 800c8bc:	683b      	ldr	r3, [r7, #0]
 800c8be:	68db      	ldr	r3, [r3, #12]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d002      	beq.n	800c8ca <TimerIrqHandler+0x66>
        {
            elapsedTimer->Callback( );
 800c8c4:	683b      	ldr	r3, [r7, #0]
 800c8c6:	68db      	ldr	r3, [r3, #12]
 800c8c8:	4798      	blx	r3
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp == 0 ) )
 800c8ca:	4b11      	ldr	r3, [pc, #68]	@ (800c910 <TimerIrqHandler+0xac>)
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d004      	beq.n	800c8dc <TimerIrqHandler+0x78>
 800c8d2:	4b0f      	ldr	r3, [pc, #60]	@ (800c910 <TimerIrqHandler+0xac>)
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d0e7      	beq.n	800c8ac <TimerIrqHandler+0x48>
        }
    }

    // start the next TimerListHead if it exists
    if( TimerListHead != NULL )
 800c8dc:	4b0c      	ldr	r3, [pc, #48]	@ (800c910 <TimerIrqHandler+0xac>)
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d012      	beq.n	800c90a <TimerIrqHandler+0xa6>
    {
        if( TimerListHead->IsRunning != true )
 800c8e4:	4b0a      	ldr	r3, [pc, #40]	@ (800c910 <TimerIrqHandler+0xac>)
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	7a1b      	ldrb	r3, [r3, #8]
 800c8ea:	f083 0301 	eor.w	r3, r3, #1
 800c8ee:	b2db      	uxtb	r3, r3
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d00a      	beq.n	800c90a <TimerIrqHandler+0xa6>
        {
            TimerListHead->IsRunning = true;
 800c8f4:	4b06      	ldr	r3, [pc, #24]	@ (800c910 <TimerIrqHandler+0xac>)
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	2201      	movs	r2, #1
 800c8fa:	721a      	strb	r2, [r3, #8]
            TimerSetTimeout( TimerListHead );
 800c8fc:	4b04      	ldr	r3, [pc, #16]	@ (800c910 <TimerIrqHandler+0xac>)
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	4618      	mov	r0, r3
 800c902:	f000 f8df 	bl	800cac4 <TimerSetTimeout>
 800c906:	e000      	b.n	800c90a <TimerIrqHandler+0xa6>
    	return;
 800c908:	bf00      	nop
        }
    }
}
 800c90a:	3708      	adds	r7, #8
 800c90c:	46bd      	mov	sp, r7
 800c90e:	bd80      	pop	{r7, pc}
 800c910:	200004ec 	.word	0x200004ec

0800c914 <TimerStop>:

void TimerStop( TimerEvent_t *obj )
{
 800c914:	b580      	push	{r7, lr}
 800c916:	b086      	sub	sp, #24
 800c918:	af00      	add	r7, sp, #0
 800c91a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 800c91c:	b672      	cpsid	i
}
 800c91e:	bf00      	nop
    __disable_irq( );

    uint32_t elapsedTime = 0;
 800c920:	2300      	movs	r3, #0
 800c922:	617b      	str	r3, [r7, #20]
    uint32_t remainingTime = 0;
 800c924:	2300      	movs	r3, #0
 800c926:	60bb      	str	r3, [r7, #8]

    TimerEvent_t* prev = TimerListHead;
 800c928:	4b49      	ldr	r3, [pc, #292]	@ (800ca50 <TimerStop+0x13c>)
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	613b      	str	r3, [r7, #16]
    TimerEvent_t* cur = TimerListHead;
 800c92e:	4b48      	ldr	r3, [pc, #288]	@ (800ca50 <TimerStop+0x13c>)
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	60fb      	str	r3, [r7, #12]

    // List is empty or the Obj to stop does not exist
    if( ( TimerListHead == NULL ) || ( obj == NULL ) )
 800c934:	4b46      	ldr	r3, [pc, #280]	@ (800ca50 <TimerStop+0x13c>)
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d002      	beq.n	800c942 <TimerStop+0x2e>
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d102      	bne.n	800c948 <TimerStop+0x34>
  __ASM volatile ("cpsie i" : : : "memory");
 800c942:	b662      	cpsie	i
}
 800c944:	bf00      	nop
    {
        __enable_irq( );
        return;
 800c946:	e080      	b.n	800ca4a <TimerStop+0x136>
    }

    if( TimerListHead == obj ) // Stop the Head
 800c948:	4b41      	ldr	r3, [pc, #260]	@ (800ca50 <TimerStop+0x13c>)
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	687a      	ldr	r2, [r7, #4]
 800c94e:	429a      	cmp	r2, r3
 800c950:	d152      	bne.n	800c9f8 <TimerStop+0xe4>
    {
        if( TimerListHead->IsRunning == true ) // The head is already running
 800c952:	4b3f      	ldr	r3, [pc, #252]	@ (800ca50 <TimerStop+0x13c>)
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	7a1b      	ldrb	r3, [r3, #8]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d033      	beq.n	800c9c4 <TimerStop+0xb0>
        {
            elapsedTime = TimerGetValue( );
 800c95c:	f000 f8aa 	bl	800cab4 <TimerGetValue>
 800c960:	6178      	str	r0, [r7, #20]
            if( elapsedTime > obj->Timestamp )
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	697a      	ldr	r2, [r7, #20]
 800c968:	429a      	cmp	r2, r3
 800c96a:	d902      	bls.n	800c972 <TimerStop+0x5e>
            {
                elapsedTime = obj->Timestamp;
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	617b      	str	r3, [r7, #20]
            }

            remainingTime = obj->Timestamp - elapsedTime;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	681a      	ldr	r2, [r3, #0]
 800c976:	697b      	ldr	r3, [r7, #20]
 800c978:	1ad3      	subs	r3, r2, r3
 800c97a:	60bb      	str	r3, [r7, #8]

            if( TimerListHead->Next != NULL )
 800c97c:	4b34      	ldr	r3, [pc, #208]	@ (800ca50 <TimerStop+0x13c>)
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	691b      	ldr	r3, [r3, #16]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d01a      	beq.n	800c9bc <TimerStop+0xa8>
            {
                TimerListHead->IsRunning = false;
 800c986:	4b32      	ldr	r3, [pc, #200]	@ (800ca50 <TimerStop+0x13c>)
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	2200      	movs	r2, #0
 800c98c:	721a      	strb	r2, [r3, #8]
                TimerListHead = TimerListHead->Next;
 800c98e:	4b30      	ldr	r3, [pc, #192]	@ (800ca50 <TimerStop+0x13c>)
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	691b      	ldr	r3, [r3, #16]
 800c994:	4a2e      	ldr	r2, [pc, #184]	@ (800ca50 <TimerStop+0x13c>)
 800c996:	6013      	str	r3, [r2, #0]
                TimerListHead->Timestamp += remainingTime;
 800c998:	4b2d      	ldr	r3, [pc, #180]	@ (800ca50 <TimerStop+0x13c>)
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	6819      	ldr	r1, [r3, #0]
 800c99e:	4b2c      	ldr	r3, [pc, #176]	@ (800ca50 <TimerStop+0x13c>)
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	68ba      	ldr	r2, [r7, #8]
 800c9a4:	440a      	add	r2, r1
 800c9a6:	601a      	str	r2, [r3, #0]
                TimerListHead->IsRunning = true;
 800c9a8:	4b29      	ldr	r3, [pc, #164]	@ (800ca50 <TimerStop+0x13c>)
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	2201      	movs	r2, #1
 800c9ae:	721a      	strb	r2, [r3, #8]
                TimerSetTimeout( TimerListHead );
 800c9b0:	4b27      	ldr	r3, [pc, #156]	@ (800ca50 <TimerStop+0x13c>)
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	f000 f885 	bl	800cac4 <TimerSetTimeout>
 800c9ba:	e044      	b.n	800ca46 <TimerStop+0x132>
            }
            else
            {
                TimerListHead = NULL;
 800c9bc:	4b24      	ldr	r3, [pc, #144]	@ (800ca50 <TimerStop+0x13c>)
 800c9be:	2200      	movs	r2, #0
 800c9c0:	601a      	str	r2, [r3, #0]
 800c9c2:	e040      	b.n	800ca46 <TimerStop+0x132>
            }
        }
        else // Stop the head before it is started
        {
            if( TimerListHead->Next != NULL )
 800c9c4:	4b22      	ldr	r3, [pc, #136]	@ (800ca50 <TimerStop+0x13c>)
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	691b      	ldr	r3, [r3, #16]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d010      	beq.n	800c9f0 <TimerStop+0xdc>
            {
                remainingTime = obj->Timestamp;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	60bb      	str	r3, [r7, #8]
                TimerListHead = TimerListHead->Next;
 800c9d4:	4b1e      	ldr	r3, [pc, #120]	@ (800ca50 <TimerStop+0x13c>)
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	691b      	ldr	r3, [r3, #16]
 800c9da:	4a1d      	ldr	r2, [pc, #116]	@ (800ca50 <TimerStop+0x13c>)
 800c9dc:	6013      	str	r3, [r2, #0]
                TimerListHead->Timestamp += remainingTime;
 800c9de:	4b1c      	ldr	r3, [pc, #112]	@ (800ca50 <TimerStop+0x13c>)
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	6819      	ldr	r1, [r3, #0]
 800c9e4:	4b1a      	ldr	r3, [pc, #104]	@ (800ca50 <TimerStop+0x13c>)
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	68ba      	ldr	r2, [r7, #8]
 800c9ea:	440a      	add	r2, r1
 800c9ec:	601a      	str	r2, [r3, #0]
 800c9ee:	e02a      	b.n	800ca46 <TimerStop+0x132>
            }
            else
            {
                TimerListHead = NULL;
 800c9f0:	4b17      	ldr	r3, [pc, #92]	@ (800ca50 <TimerStop+0x13c>)
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	601a      	str	r2, [r3, #0]
 800c9f6:	e026      	b.n	800ca46 <TimerStop+0x132>
            }
        }
    }
    else // Stop an object within the list
    {
        remainingTime = obj->Timestamp;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	60bb      	str	r3, [r7, #8]

        while( cur != NULL )
 800c9fe:	e01f      	b.n	800ca40 <TimerStop+0x12c>
        {
            if( cur == obj )
 800ca00:	68fa      	ldr	r2, [r7, #12]
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	429a      	cmp	r2, r3
 800ca06:	d116      	bne.n	800ca36 <TimerStop+0x122>
            {
                if( cur->Next != NULL )
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	691b      	ldr	r3, [r3, #16]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d00c      	beq.n	800ca2a <TimerStop+0x116>
                {
                    cur = cur->Next;
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	691b      	ldr	r3, [r3, #16]
 800ca14:	60fb      	str	r3, [r7, #12]
                    prev->Next = cur;
 800ca16:	693b      	ldr	r3, [r7, #16]
 800ca18:	68fa      	ldr	r2, [r7, #12]
 800ca1a:	611a      	str	r2, [r3, #16]
                    cur->Timestamp += remainingTime;
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	681a      	ldr	r2, [r3, #0]
 800ca20:	68bb      	ldr	r3, [r7, #8]
 800ca22:	441a      	add	r2, r3
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	601a      	str	r2, [r3, #0]
                else
                {
                    cur = NULL;
                    prev->Next = cur;
                }
                break;
 800ca28:	e00d      	b.n	800ca46 <TimerStop+0x132>
                    cur = NULL;
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	60fb      	str	r3, [r7, #12]
                    prev->Next = cur;
 800ca2e:	693b      	ldr	r3, [r7, #16]
 800ca30:	68fa      	ldr	r2, [r7, #12]
 800ca32:	611a      	str	r2, [r3, #16]
                break;
 800ca34:	e007      	b.n	800ca46 <TimerStop+0x132>
            }
            else
            {
                prev = cur;
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	613b      	str	r3, [r7, #16]
                cur = cur->Next;
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	691b      	ldr	r3, [r3, #16]
 800ca3e:	60fb      	str	r3, [r7, #12]
        while( cur != NULL )
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d1dc      	bne.n	800ca00 <TimerStop+0xec>
  __ASM volatile ("cpsie i" : : : "memory");
 800ca46:	b662      	cpsie	i
}
 800ca48:	bf00      	nop
            }
        }
    }
    __enable_irq( );
}
 800ca4a:	3718      	adds	r7, #24
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	bd80      	pop	{r7, pc}
 800ca50:	200004ec 	.word	0x200004ec

0800ca54 <TimerExists>:

static bool TimerExists( TimerEvent_t *obj )
{
 800ca54:	b480      	push	{r7}
 800ca56:	b085      	sub	sp, #20
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
    TimerEvent_t* cur = TimerListHead;
 800ca5c:	4b0b      	ldr	r3, [pc, #44]	@ (800ca8c <TimerExists+0x38>)
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	60fb      	str	r3, [r7, #12]

    while( cur != NULL )
 800ca62:	e008      	b.n	800ca76 <TimerExists+0x22>
    {
        if( cur == obj )
 800ca64:	68fa      	ldr	r2, [r7, #12]
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	429a      	cmp	r2, r3
 800ca6a:	d101      	bne.n	800ca70 <TimerExists+0x1c>
        {
            return true;
 800ca6c:	2301      	movs	r3, #1
 800ca6e:	e006      	b.n	800ca7e <TimerExists+0x2a>
        }
        cur = cur->Next;
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	691b      	ldr	r3, [r3, #16]
 800ca74:	60fb      	str	r3, [r7, #12]
    while( cur != NULL )
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d1f3      	bne.n	800ca64 <TimerExists+0x10>
    }
    return false;
 800ca7c:	2300      	movs	r3, #0
}
 800ca7e:	4618      	mov	r0, r3
 800ca80:	3714      	adds	r7, #20
 800ca82:	46bd      	mov	sp, r7
 800ca84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca88:	4770      	bx	lr
 800ca8a:	bf00      	nop
 800ca8c:	200004ec 	.word	0x200004ec

0800ca90 <TimerSetValue>:
    TimerStop( obj );
    TimerStart( obj );
}

void TimerSetValue( TimerEvent_t *obj, uint32_t value )
{
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b082      	sub	sp, #8
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]
 800ca98:	6039      	str	r1, [r7, #0]
    TimerStop( obj );
 800ca9a:	6878      	ldr	r0, [r7, #4]
 800ca9c:	f7ff ff3a 	bl	800c914 <TimerStop>
    obj->Timestamp = value;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	683a      	ldr	r2, [r7, #0]
 800caa4:	601a      	str	r2, [r3, #0]
    obj->ReloadValue = value;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	683a      	ldr	r2, [r7, #0]
 800caaa:	605a      	str	r2, [r3, #4]
}
 800caac:	bf00      	nop
 800caae:	3708      	adds	r7, #8
 800cab0:	46bd      	mov	sp, r7
 800cab2:	bd80      	pop	{r7, pc}

0800cab4 <TimerGetValue>:

TimerTime_t TimerGetValue( void )
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	af00      	add	r7, sp, #0
    return RtcGetElapsedAlarmTime( );
 800cab8:	f7fe ff80 	bl	800b9bc <RtcGetElapsedAlarmTime>
 800cabc:	4603      	mov	r3, r0
}
 800cabe:	4618      	mov	r0, r3
 800cac0:	bd80      	pop	{r7, pc}
	...

0800cac4 <TimerSetTimeout>:
{
    return RtcComputeFutureEventTime( eventInFuture );
}

static void TimerSetTimeout( TimerEvent_t *obj )
{
 800cac4:	b580      	push	{r7, lr}
 800cac6:	b082      	sub	sp, #8
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]
    HasLoopedThroughMain = 0;
 800cacc:	4b09      	ldr	r3, [pc, #36]	@ (800caf4 <TimerSetTimeout+0x30>)
 800cace:	2200      	movs	r2, #0
 800cad0:	701a      	strb	r2, [r3, #0]
    obj->Timestamp = RtcGetAdjustedTimeoutValue( obj->Timestamp ); 
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	4618      	mov	r0, r3
 800cad8:	f7fe ff38 	bl	800b94c <RtcGetAdjustedTimeoutValue>
 800cadc:	4602      	mov	r2, r0
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	601a      	str	r2, [r3, #0]
    RtcSetTimeout( obj->Timestamp );
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	4618      	mov	r0, r3
 800cae8:	f7fe ff24 	bl	800b934 <RtcSetTimeout>
}
 800caec:	bf00      	nop
 800caee:	3708      	adds	r7, #8
 800caf0:	46bd      	mov	sp, r7
 800caf2:	bd80      	pop	{r7, pc}
 800caf4:	200004e8 	.word	0x200004e8

0800caf8 <memcpy1>:
{
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
}

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 800caf8:	b480      	push	{r7}
 800cafa:	b085      	sub	sp, #20
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	60f8      	str	r0, [r7, #12]
 800cb00:	60b9      	str	r1, [r7, #8]
 800cb02:	4613      	mov	r3, r2
 800cb04:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 800cb06:	e007      	b.n	800cb18 <memcpy1+0x20>
    {
        *dst++ = *src++;
 800cb08:	68ba      	ldr	r2, [r7, #8]
 800cb0a:	1c53      	adds	r3, r2, #1
 800cb0c:	60bb      	str	r3, [r7, #8]
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	1c59      	adds	r1, r3, #1
 800cb12:	60f9      	str	r1, [r7, #12]
 800cb14:	7812      	ldrb	r2, [r2, #0]
 800cb16:	701a      	strb	r2, [r3, #0]
    while( size-- )
 800cb18:	88fb      	ldrh	r3, [r7, #6]
 800cb1a:	1e5a      	subs	r2, r3, #1
 800cb1c:	80fa      	strh	r2, [r7, #6]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d1f2      	bne.n	800cb08 <memcpy1+0x10>
    }
}
 800cb22:	bf00      	nop
 800cb24:	bf00      	nop
 800cb26:	3714      	adds	r7, #20
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2e:	4770      	bx	lr

0800cb30 <SX1276Init>:
/*
 * Radio driver functions implementation
 */

void SX1276Init( RadioEvents_t *events )
{
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b084      	sub	sp, #16
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	6078      	str	r0, [r7, #4]
    uint8_t i;

    RadioEvents = events;
 800cb38:	4a24      	ldr	r2, [pc, #144]	@ (800cbcc <SX1276Init+0x9c>)
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	6013      	str	r3, [r2, #0]

    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 800cb3e:	4924      	ldr	r1, [pc, #144]	@ (800cbd0 <SX1276Init+0xa0>)
 800cb40:	4824      	ldr	r0, [pc, #144]	@ (800cbd4 <SX1276Init+0xa4>)
 800cb42:	f7ff fd84 	bl	800c64e <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 800cb46:	4922      	ldr	r1, [pc, #136]	@ (800cbd0 <SX1276Init+0xa0>)
 800cb48:	4823      	ldr	r0, [pc, #140]	@ (800cbd8 <SX1276Init+0xa8>)
 800cb4a:	f7ff fd80 	bl	800c64e <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 800cb4e:	4920      	ldr	r1, [pc, #128]	@ (800cbd0 <SX1276Init+0xa0>)
 800cb50:	4822      	ldr	r0, [pc, #136]	@ (800cbdc <SX1276Init+0xac>)
 800cb52:	f7ff fd7c 	bl	800c64e <TimerInit>

    SX1276Reset( );
 800cb56:	f001 fb75 	bl	800e244 <SX1276Reset>

    RxChainCalibration( );
 800cb5a:	f000 f8e5 	bl	800cd28 <RxChainCalibration>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 800cb5e:	2000      	movs	r0, #0
 800cb60:	f001 fb92 	bl	800e288 <SX1276SetOpMode>

    SX1276IoIrqInit( DioIrq );
 800cb64:	481e      	ldr	r0, [pc, #120]	@ (800cbe0 <SX1276Init+0xb0>)
 800cb66:	f7ff fc9b 	bl	800c4a0 <SX1276IoIrqInit>

    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	73fb      	strb	r3, [r7, #15]
 800cb6e:	e01f      	b.n	800cbb0 <SX1276Init+0x80>
    {
        SX1276SetModem( RadioRegsInit[i].Modem );
 800cb70:	7bfa      	ldrb	r2, [r7, #15]
 800cb72:	491c      	ldr	r1, [pc, #112]	@ (800cbe4 <SX1276Init+0xb4>)
 800cb74:	4613      	mov	r3, r2
 800cb76:	005b      	lsls	r3, r3, #1
 800cb78:	4413      	add	r3, r2
 800cb7a:	440b      	add	r3, r1
 800cb7c:	781b      	ldrb	r3, [r3, #0]
 800cb7e:	4618      	mov	r0, r3
 800cb80:	f001 fbb0 	bl	800e2e4 <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 800cb84:	7bfa      	ldrb	r2, [r7, #15]
 800cb86:	4917      	ldr	r1, [pc, #92]	@ (800cbe4 <SX1276Init+0xb4>)
 800cb88:	4613      	mov	r3, r2
 800cb8a:	005b      	lsls	r3, r3, #1
 800cb8c:	4413      	add	r3, r2
 800cb8e:	440b      	add	r3, r1
 800cb90:	3301      	adds	r3, #1
 800cb92:	7818      	ldrb	r0, [r3, #0]
 800cb94:	7bfa      	ldrb	r2, [r7, #15]
 800cb96:	4913      	ldr	r1, [pc, #76]	@ (800cbe4 <SX1276Init+0xb4>)
 800cb98:	4613      	mov	r3, r2
 800cb9a:	005b      	lsls	r3, r3, #1
 800cb9c:	4413      	add	r3, r2
 800cb9e:	440b      	add	r3, r1
 800cba0:	3302      	adds	r3, #2
 800cba2:	781b      	ldrb	r3, [r3, #0]
 800cba4:	4619      	mov	r1, r3
 800cba6:	f001 fbdf 	bl	800e368 <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800cbaa:	7bfb      	ldrb	r3, [r7, #15]
 800cbac:	3301      	adds	r3, #1
 800cbae:	73fb      	strb	r3, [r7, #15]
 800cbb0:	7bfb      	ldrb	r3, [r7, #15]
 800cbb2:	2b10      	cmp	r3, #16
 800cbb4:	d9dc      	bls.n	800cb70 <SX1276Init+0x40>
    }

    SX1276SetModem( MODEM_FSK );
 800cbb6:	2000      	movs	r0, #0
 800cbb8:	f001 fb94 	bl	800e2e4 <SX1276SetModem>

    SX1276.Settings.State = RF_IDLE;
 800cbbc:	4b0a      	ldr	r3, [pc, #40]	@ (800cbe8 <SX1276Init+0xb8>)
 800cbbe:	2200      	movs	r2, #0
 800cbc0:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
}
 800cbc4:	bf00      	nop
 800cbc6:	3710      	adds	r7, #16
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	bd80      	pop	{r7, pc}
 800cbcc:	200004f0 	.word	0x200004f0
 800cbd0:	0800e519 	.word	0x0800e519
 800cbd4:	20000764 	.word	0x20000764
 800cbd8:	20000778 	.word	0x20000778
 800cbdc:	2000078c 	.word	0x2000078c
 800cbe0:	20000018 	.word	0x20000018
 800cbe4:	0801474c 	.word	0x0801474c
 800cbe8:	200005f4 	.word	0x200005f4

0800cbec <SX1276GetStatus>:

RadioState_t SX1276GetStatus( void )
{
 800cbec:	b480      	push	{r7}
 800cbee:	af00      	add	r7, sp, #0
    return SX1276.Settings.State;
 800cbf0:	4b03      	ldr	r3, [pc, #12]	@ (800cc00 <SX1276GetStatus+0x14>)
 800cbf2:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
}
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbfe:	4770      	bx	lr
 800cc00:	200005f4 	.word	0x200005f4
 800cc04:	00000000 	.word	0x00000000

0800cc08 <SX1276SetChannel>:

void SX1276SetChannel( uint32_t freq )
{
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	b082      	sub	sp, #8
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	6078      	str	r0, [r7, #4]
    SX1276.Settings.Channel = freq;
 800cc10:	4a17      	ldr	r2, [pc, #92]	@ (800cc70 <SX1276SetChannel+0x68>)
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	f8c2 3118 	str.w	r3, [r2, #280]	@ 0x118
    freq = ( uint32_t )( ( double )freq / ( double )FREQ_STEP );
 800cc18:	6878      	ldr	r0, [r7, #4]
 800cc1a:	f7f5 fa05 	bl	8002028 <__aeabi_ui2d>
 800cc1e:	a312      	add	r3, pc, #72	@ (adr r3, 800cc68 <SX1276SetChannel+0x60>)
 800cc20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc24:	f7f5 fba4 	bl	8002370 <__aeabi_ddiv>
 800cc28:	4602      	mov	r2, r0
 800cc2a:	460b      	mov	r3, r1
 800cc2c:	4610      	mov	r0, r2
 800cc2e:	4619      	mov	r1, r3
 800cc30:	f7f5 fd4c 	bl	80026cc <__aeabi_d2uiz>
 800cc34:	4603      	mov	r3, r0
 800cc36:	607b      	str	r3, [r7, #4]
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( freq >> 16 ) & 0xFF ) );
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	0c1b      	lsrs	r3, r3, #16
 800cc3c:	b2db      	uxtb	r3, r3
 800cc3e:	4619      	mov	r1, r3
 800cc40:	2006      	movs	r0, #6
 800cc42:	f001 fb91 	bl	800e368 <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( freq >> 8 ) & 0xFF ) );
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	0a1b      	lsrs	r3, r3, #8
 800cc4a:	b2db      	uxtb	r3, r3
 800cc4c:	4619      	mov	r1, r3
 800cc4e:	2007      	movs	r0, #7
 800cc50:	f001 fb8a 	bl	800e368 <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( freq & 0xFF ) );
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	b2db      	uxtb	r3, r3
 800cc58:	4619      	mov	r1, r3
 800cc5a:	2008      	movs	r0, #8
 800cc5c:	f001 fb84 	bl	800e368 <SX1276Write>
}
 800cc60:	bf00      	nop
 800cc62:	3708      	adds	r7, #8
 800cc64:	46bd      	mov	sp, r7
 800cc66:	bd80      	pop	{r7, pc}
 800cc68:	00000000 	.word	0x00000000
 800cc6c:	404e8480 	.word	0x404e8480
 800cc70:	200005f4 	.word	0x200005f4

0800cc74 <SX1276IsChannelFree>:

bool SX1276IsChannelFree( RadioModems_t modem, uint32_t freq, int16_t rssiThresh )
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b084      	sub	sp, #16
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	4603      	mov	r3, r0
 800cc7c:	6039      	str	r1, [r7, #0]
 800cc7e:	71fb      	strb	r3, [r7, #7]
 800cc80:	4613      	mov	r3, r2
 800cc82:	80bb      	strh	r3, [r7, #4]
    int16_t rssi = 0;
 800cc84:	2300      	movs	r3, #0
 800cc86:	81fb      	strh	r3, [r7, #14]

    SX1276SetModem( modem );
 800cc88:	79fb      	ldrb	r3, [r7, #7]
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	f001 fb2a 	bl	800e2e4 <SX1276SetModem>

    SX1276SetChannel( freq );
 800cc90:	6838      	ldr	r0, [r7, #0]
 800cc92:	f7ff ffb9 	bl	800cc08 <SX1276SetChannel>

    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 800cc96:	2005      	movs	r0, #5
 800cc98:	f001 faf6 	bl	800e288 <SX1276SetOpMode>

    DelayMs( 1 );
 800cc9c:	2001      	movs	r0, #1
 800cc9e:	f7fe fa97 	bl	800b1d0 <DelayMs>

    rssi = SX1276ReadRssi( modem );
 800cca2:	79fb      	ldrb	r3, [r7, #7]
 800cca4:	4618      	mov	r0, r3
 800cca6:	f001 fa91 	bl	800e1cc <SX1276ReadRssi>
 800ccaa:	4603      	mov	r3, r0
 800ccac:	81fb      	strh	r3, [r7, #14]

    SX1276SetSleep( );
 800ccae:	f000 ff6b 	bl	800db88 <SX1276SetSleep>

    if( rssi > rssiThresh )
 800ccb2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800ccb6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800ccba:	429a      	cmp	r2, r3
 800ccbc:	dd01      	ble.n	800ccc2 <SX1276IsChannelFree+0x4e>
    {
        return false;
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	e000      	b.n	800ccc4 <SX1276IsChannelFree+0x50>
    }
    return true;
 800ccc2:	2301      	movs	r3, #1
}
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	3710      	adds	r7, #16
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	bd80      	pop	{r7, pc}

0800cccc <SX1276Random>:

uint32_t SX1276Random( void )
{
 800cccc:	b580      	push	{r7, lr}
 800ccce:	b082      	sub	sp, #8
 800ccd0:	af00      	add	r7, sp, #0
    uint8_t i;
    uint32_t rnd = 0;
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	603b      	str	r3, [r7, #0]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    SX1276SetModem( MODEM_LORA );
 800ccd6:	2001      	movs	r0, #1
 800ccd8:	f001 fb04 	bl	800e2e4 <SX1276SetModem>

    // Disable LoRa modem interrupts
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800ccdc:	21ff      	movs	r1, #255	@ 0xff
 800ccde:	2011      	movs	r0, #17
 800cce0:	f001 fb42 	bl	800e368 <SX1276Write>
                  RFLR_IRQFLAGS_CADDONE |
                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                  RFLR_IRQFLAGS_CADDETECTED );

    // Set radio in continuous reception
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 800cce4:	2005      	movs	r0, #5
 800cce6:	f001 facf 	bl	800e288 <SX1276SetOpMode>

    for( i = 0; i < 32; i++ )
 800ccea:	2300      	movs	r3, #0
 800ccec:	71fb      	strb	r3, [r7, #7]
 800ccee:	e011      	b.n	800cd14 <SX1276Random+0x48>
    {
        DelayMs( 1 );
 800ccf0:	2001      	movs	r0, #1
 800ccf2:	f7fe fa6d 	bl	800b1d0 <DelayMs>
        // Unfiltered RSSI value reading. Only takes the LSB value
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 800ccf6:	202c      	movs	r0, #44	@ 0x2c
 800ccf8:	f001 fb48 	bl	800e38c <SX1276Read>
 800ccfc:	4603      	mov	r3, r0
 800ccfe:	f003 0201 	and.w	r2, r3, #1
 800cd02:	79fb      	ldrb	r3, [r7, #7]
 800cd04:	fa02 f303 	lsl.w	r3, r2, r3
 800cd08:	683a      	ldr	r2, [r7, #0]
 800cd0a:	4313      	orrs	r3, r2
 800cd0c:	603b      	str	r3, [r7, #0]
    for( i = 0; i < 32; i++ )
 800cd0e:	79fb      	ldrb	r3, [r7, #7]
 800cd10:	3301      	adds	r3, #1
 800cd12:	71fb      	strb	r3, [r7, #7]
 800cd14:	79fb      	ldrb	r3, [r7, #7]
 800cd16:	2b1f      	cmp	r3, #31
 800cd18:	d9ea      	bls.n	800ccf0 <SX1276Random+0x24>
    }

    SX1276SetSleep( );
 800cd1a:	f000 ff35 	bl	800db88 <SX1276SetSleep>

    return rnd;
 800cd1e:	683b      	ldr	r3, [r7, #0]
}
 800cd20:	4618      	mov	r0, r3
 800cd22:	3708      	adds	r7, #8
 800cd24:	46bd      	mov	sp, r7
 800cd26:	bd80      	pop	{r7, pc}

0800cd28 <RxChainCalibration>:
 * Performs the Rx chain calibration for LF and HF bands
 * \remark Must be called just after the reset so all registers are at their
 *         default values
 */
static void RxChainCalibration( void )
{
 800cd28:	b590      	push	{r4, r7, lr}
 800cd2a:	b083      	sub	sp, #12
 800cd2c:	af00      	add	r7, sp, #0
    uint8_t regPaConfigInitVal;
    uint32_t initialFreq;

    // Save context
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 800cd2e:	2009      	movs	r0, #9
 800cd30:	f001 fb2c 	bl	800e38c <SX1276Read>
 800cd34:	4603      	mov	r3, r0
 800cd36:	71fb      	strb	r3, [r7, #7]
    initialFreq = ( double )( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800cd38:	2006      	movs	r0, #6
 800cd3a:	f001 fb27 	bl	800e38c <SX1276Read>
 800cd3e:	4603      	mov	r3, r0
 800cd40:	041c      	lsls	r4, r3, #16
                              ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 800cd42:	2007      	movs	r0, #7
 800cd44:	f001 fb22 	bl	800e38c <SX1276Read>
 800cd48:	4603      	mov	r3, r0
 800cd4a:	021b      	lsls	r3, r3, #8
    initialFreq = ( double )( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800cd4c:	431c      	orrs	r4, r3
                              ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) ) * ( double )FREQ_STEP;
 800cd4e:	2008      	movs	r0, #8
 800cd50:	f001 fb1c 	bl	800e38c <SX1276Read>
 800cd54:	4603      	mov	r3, r0
                              ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 800cd56:	4323      	orrs	r3, r4
    initialFreq = ( double )( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800cd58:	4618      	mov	r0, r3
 800cd5a:	f7f5 f965 	bl	8002028 <__aeabi_ui2d>
                              ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) ) * ( double )FREQ_STEP;
 800cd5e:	a325      	add	r3, pc, #148	@ (adr r3, 800cdf4 <RxChainCalibration+0xcc>)
 800cd60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd64:	f7f5 f9da 	bl	800211c <__aeabi_dmul>
 800cd68:	4602      	mov	r2, r0
 800cd6a:	460b      	mov	r3, r1
    initialFreq = ( double )( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800cd6c:	4610      	mov	r0, r2
 800cd6e:	4619      	mov	r1, r3
 800cd70:	f7f5 fcac 	bl	80026cc <__aeabi_d2uiz>
 800cd74:	4603      	mov	r3, r0
 800cd76:	603b      	str	r3, [r7, #0]

    // Cut the PA just in case, RFO output, power = -1 dBm
    SX1276Write( REG_PACONFIG, 0x00 );
 800cd78:	2100      	movs	r1, #0
 800cd7a:	2009      	movs	r0, #9
 800cd7c:	f001 faf4 	bl	800e368 <SX1276Write>

    // Launch Rx chain calibration for LF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 800cd80:	203b      	movs	r0, #59	@ 0x3b
 800cd82:	f001 fb03 	bl	800e38c <SX1276Read>
 800cd86:	4603      	mov	r3, r0
 800cd88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cd8c:	b2db      	uxtb	r3, r3
 800cd8e:	4619      	mov	r1, r3
 800cd90:	203b      	movs	r0, #59	@ 0x3b
 800cd92:	f001 fae9 	bl	800e368 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 800cd96:	bf00      	nop
 800cd98:	203b      	movs	r0, #59	@ 0x3b
 800cd9a:	f001 faf7 	bl	800e38c <SX1276Read>
 800cd9e:	4603      	mov	r3, r0
 800cda0:	f003 0320 	and.w	r3, r3, #32
 800cda4:	2b20      	cmp	r3, #32
 800cda6:	d0f7      	beq.n	800cd98 <RxChainCalibration+0x70>
    {
    }

    // Sets a Frequency in HF band
    SX1276SetChannel( 868000000 );
 800cda8:	4811      	ldr	r0, [pc, #68]	@ (800cdf0 <RxChainCalibration+0xc8>)
 800cdaa:	f7ff ff2d 	bl	800cc08 <SX1276SetChannel>

    // Launch Rx chain calibration for HF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 800cdae:	203b      	movs	r0, #59	@ 0x3b
 800cdb0:	f001 faec 	bl	800e38c <SX1276Read>
 800cdb4:	4603      	mov	r3, r0
 800cdb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cdba:	b2db      	uxtb	r3, r3
 800cdbc:	4619      	mov	r1, r3
 800cdbe:	203b      	movs	r0, #59	@ 0x3b
 800cdc0:	f001 fad2 	bl	800e368 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 800cdc4:	bf00      	nop
 800cdc6:	203b      	movs	r0, #59	@ 0x3b
 800cdc8:	f001 fae0 	bl	800e38c <SX1276Read>
 800cdcc:	4603      	mov	r3, r0
 800cdce:	f003 0320 	and.w	r3, r3, #32
 800cdd2:	2b20      	cmp	r3, #32
 800cdd4:	d0f7      	beq.n	800cdc6 <RxChainCalibration+0x9e>
    {
    }

    // Restore context
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 800cdd6:	79fb      	ldrb	r3, [r7, #7]
 800cdd8:	4619      	mov	r1, r3
 800cdda:	2009      	movs	r0, #9
 800cddc:	f001 fac4 	bl	800e368 <SX1276Write>
    SX1276SetChannel( initialFreq );
 800cde0:	6838      	ldr	r0, [r7, #0]
 800cde2:	f7ff ff11 	bl	800cc08 <SX1276SetChannel>
}
 800cde6:	bf00      	nop
 800cde8:	370c      	adds	r7, #12
 800cdea:	46bd      	mov	sp, r7
 800cdec:	bd90      	pop	{r4, r7, pc}
 800cdee:	bf00      	nop
 800cdf0:	33bca100 	.word	0x33bca100
 800cdf4:	00000000 	.word	0x00000000
 800cdf8:	404e8480 	.word	0x404e8480

0800cdfc <GetFskBandwidthRegValue>:
 *
 * \param [IN] bandwidth Bandwidth value in Hz
 * \retval regValue Bandwidth register value.
 */
static uint8_t GetFskBandwidthRegValue( uint32_t bandwidth )
{
 800cdfc:	b480      	push	{r7}
 800cdfe:	b085      	sub	sp, #20
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 800ce04:	2300      	movs	r3, #0
 800ce06:	73fb      	strb	r3, [r7, #15]
 800ce08:	e017      	b.n	800ce3a <GetFskBandwidthRegValue+0x3e>
    {
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
 800ce0a:	7bfb      	ldrb	r3, [r7, #15]
 800ce0c:	4a10      	ldr	r2, [pc, #64]	@ (800ce50 <GetFskBandwidthRegValue+0x54>)
 800ce0e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ce12:	687a      	ldr	r2, [r7, #4]
 800ce14:	429a      	cmp	r2, r3
 800ce16:	d30d      	bcc.n	800ce34 <GetFskBandwidthRegValue+0x38>
 800ce18:	7bfb      	ldrb	r3, [r7, #15]
 800ce1a:	3301      	adds	r3, #1
 800ce1c:	4a0c      	ldr	r2, [pc, #48]	@ (800ce50 <GetFskBandwidthRegValue+0x54>)
 800ce1e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ce22:	687a      	ldr	r2, [r7, #4]
 800ce24:	429a      	cmp	r2, r3
 800ce26:	d205      	bcs.n	800ce34 <GetFskBandwidthRegValue+0x38>
        {
            return FskBandwidths[i].RegValue;
 800ce28:	7bfb      	ldrb	r3, [r7, #15]
 800ce2a:	4a09      	ldr	r2, [pc, #36]	@ (800ce50 <GetFskBandwidthRegValue+0x54>)
 800ce2c:	00db      	lsls	r3, r3, #3
 800ce2e:	4413      	add	r3, r2
 800ce30:	791b      	ldrb	r3, [r3, #4]
 800ce32:	e007      	b.n	800ce44 <GetFskBandwidthRegValue+0x48>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 800ce34:	7bfb      	ldrb	r3, [r7, #15]
 800ce36:	3301      	adds	r3, #1
 800ce38:	73fb      	strb	r3, [r7, #15]
 800ce3a:	7bfb      	ldrb	r3, [r7, #15]
 800ce3c:	2b14      	cmp	r3, #20
 800ce3e:	d9e4      	bls.n	800ce0a <GetFskBandwidthRegValue+0xe>
        }
    }
    // ERROR: Value not found
    while( 1 );
 800ce40:	bf00      	nop
 800ce42:	e7fd      	b.n	800ce40 <GetFskBandwidthRegValue+0x44>
}
 800ce44:	4618      	mov	r0, r3
 800ce46:	3714      	adds	r7, #20
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4e:	4770      	bx	lr
 800ce50:	08014780 	.word	0x08014780
 800ce54:	00000000 	.word	0x00000000

0800ce58 <SX1276SetRxConfig>:
                         uint32_t bandwidthAfc, uint16_t preambleLen,
                         uint16_t symbTimeout, bool fixLen,
                         uint8_t payloadLen,
                         bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                         bool iqInverted, bool rxContinuous )
{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b084      	sub	sp, #16
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	60b9      	str	r1, [r7, #8]
 800ce60:	607a      	str	r2, [r7, #4]
 800ce62:	461a      	mov	r2, r3
 800ce64:	4603      	mov	r3, r0
 800ce66:	73fb      	strb	r3, [r7, #15]
 800ce68:	4613      	mov	r3, r2
 800ce6a:	73bb      	strb	r3, [r7, #14]
    SX1276SetModem( modem );
 800ce6c:	7bfb      	ldrb	r3, [r7, #15]
 800ce6e:	4618      	mov	r0, r3
 800ce70:	f001 fa38 	bl	800e2e4 <SX1276SetModem>

    switch( modem )
 800ce74:	7bfb      	ldrb	r3, [r7, #15]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d003      	beq.n	800ce82 <SX1276SetRxConfig+0x2a>
 800ce7a:	2b01      	cmp	r3, #1
 800ce7c:	f000 8095 	beq.w	800cfaa <SX1276SetRxConfig+0x152>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 800ce80:	e1c5      	b.n	800d20e <SX1276SetRxConfig+0x3b6>
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 800ce82:	4a79      	ldr	r2, [pc, #484]	@ (800d068 <SX1276SetRxConfig+0x210>)
 800ce84:	68bb      	ldr	r3, [r7, #8]
 800ce86:	f8c2 3124 	str.w	r3, [r2, #292]	@ 0x124
            SX1276.Settings.Fsk.Datarate = datarate;
 800ce8a:	4a77      	ldr	r2, [pc, #476]	@ (800d068 <SX1276SetRxConfig+0x210>)
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 800ce92:	4a75      	ldr	r2, [pc, #468]	@ (800d068 <SX1276SetRxConfig+0x210>)
 800ce94:	69bb      	ldr	r3, [r7, #24]
 800ce96:	f8c2 3128 	str.w	r3, [r2, #296]	@ 0x128
            SX1276.Settings.Fsk.FixLen = fixLen;
 800ce9a:	4a73      	ldr	r2, [pc, #460]	@ (800d068 <SX1276SetRxConfig+0x210>)
 800ce9c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800cea0:	f882 3132 	strb.w	r3, [r2, #306]	@ 0x132
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 800cea4:	4a70      	ldr	r2, [pc, #448]	@ (800d068 <SX1276SetRxConfig+0x210>)
 800cea6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ceaa:	f882 3133 	strb.w	r3, [r2, #307]	@ 0x133
            SX1276.Settings.Fsk.CrcOn = crcOn;
 800ceae:	4a6e      	ldr	r2, [pc, #440]	@ (800d068 <SX1276SetRxConfig+0x210>)
 800ceb0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800ceb4:	f882 3134 	strb.w	r3, [r2, #308]	@ 0x134
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 800ceb8:	4a6b      	ldr	r2, [pc, #428]	@ (800d068 <SX1276SetRxConfig+0x210>)
 800ceba:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800cebe:	f882 3135 	strb.w	r3, [r2, #309]	@ 0x135
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 800cec2:	4a69      	ldr	r2, [pc, #420]	@ (800d068 <SX1276SetRxConfig+0x210>)
 800cec4:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800cec8:	f882 3136 	strb.w	r3, [r2, #310]	@ 0x136
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 800cecc:	4a66      	ldr	r2, [pc, #408]	@ (800d068 <SX1276SetRxConfig+0x210>)
 800cece:	8bbb      	ldrh	r3, [r7, #28]
 800ced0:	f8a2 3130 	strh.w	r3, [r2, #304]	@ 0x130
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 800ced4:	6878      	ldr	r0, [r7, #4]
 800ced6:	f7f5 f8a7 	bl	8002028 <__aeabi_ui2d>
 800ceda:	4602      	mov	r2, r0
 800cedc:	460b      	mov	r3, r1
 800cede:	a160      	add	r1, pc, #384	@ (adr r1, 800d060 <SX1276SetRxConfig+0x208>)
 800cee0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cee4:	f7f5 fa44 	bl	8002370 <__aeabi_ddiv>
 800cee8:	4602      	mov	r2, r0
 800ceea:	460b      	mov	r3, r1
 800ceec:	4610      	mov	r0, r2
 800ceee:	4619      	mov	r1, r3
 800cef0:	f7f5 fbec 	bl	80026cc <__aeabi_d2uiz>
 800cef4:	4603      	mov	r3, r0
 800cef6:	b29b      	uxth	r3, r3
 800cef8:	607b      	str	r3, [r7, #4]
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	0a1b      	lsrs	r3, r3, #8
 800cefe:	b2db      	uxtb	r3, r3
 800cf00:	4619      	mov	r1, r3
 800cf02:	2002      	movs	r0, #2
 800cf04:	f001 fa30 	bl	800e368 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	b2db      	uxtb	r3, r3
 800cf0c:	4619      	mov	r1, r3
 800cf0e:	2003      	movs	r0, #3
 800cf10:	f001 fa2a 	bl	800e368 <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 800cf14:	68b8      	ldr	r0, [r7, #8]
 800cf16:	f7ff ff71 	bl	800cdfc <GetFskBandwidthRegValue>
 800cf1a:	4603      	mov	r3, r0
 800cf1c:	4619      	mov	r1, r3
 800cf1e:	2012      	movs	r0, #18
 800cf20:	f001 fa22 	bl	800e368 <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 800cf24:	69b8      	ldr	r0, [r7, #24]
 800cf26:	f7ff ff69 	bl	800cdfc <GetFskBandwidthRegValue>
 800cf2a:	4603      	mov	r3, r0
 800cf2c:	4619      	mov	r1, r3
 800cf2e:	2013      	movs	r0, #19
 800cf30:	f001 fa1a 	bl	800e368 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 800cf34:	8bbb      	ldrh	r3, [r7, #28]
 800cf36:	0a1b      	lsrs	r3, r3, #8
 800cf38:	b29b      	uxth	r3, r3
 800cf3a:	b2db      	uxtb	r3, r3
 800cf3c:	4619      	mov	r1, r3
 800cf3e:	2025      	movs	r0, #37	@ 0x25
 800cf40:	f001 fa12 	bl	800e368 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 800cf44:	8bbb      	ldrh	r3, [r7, #28]
 800cf46:	b2db      	uxtb	r3, r3
 800cf48:	4619      	mov	r1, r3
 800cf4a:	2026      	movs	r0, #38	@ 0x26
 800cf4c:	f001 fa0c 	bl	800e368 <SX1276Write>
            if( fixLen == 1 )
 800cf50:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d006      	beq.n	800cf66 <SX1276SetRxConfig+0x10e>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 800cf58:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800cf5c:	4619      	mov	r1, r3
 800cf5e:	2032      	movs	r0, #50	@ 0x32
 800cf60:	f001 fa02 	bl	800e368 <SX1276Write>
 800cf64:	e003      	b.n	800cf6e <SX1276SetRxConfig+0x116>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 800cf66:	21ff      	movs	r1, #255	@ 0xff
 800cf68:	2032      	movs	r0, #50	@ 0x32
 800cf6a:	f001 f9fd 	bl	800e368 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 800cf6e:	2030      	movs	r0, #48	@ 0x30
 800cf70:	f001 fa0c 	bl	800e38c <SX1276Read>
 800cf74:	4603      	mov	r3, r0
 800cf76:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 800cf78:	f003 036f 	and.w	r3, r3, #111	@ 0x6f
 800cf7c:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 800cf7e:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800cf82:	2a00      	cmp	r2, #0
 800cf84:	d001      	beq.n	800cf8a <SX1276SetRxConfig+0x132>
 800cf86:	2200      	movs	r2, #0
 800cf88:	e001      	b.n	800cf8e <SX1276SetRxConfig+0x136>
 800cf8a:	f06f 027f 	mvn.w	r2, #127	@ 0x7f
 800cf8e:	4313      	orrs	r3, r2
 800cf90:	b25a      	sxtb	r2, r3
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 800cf92:	f997 302c 	ldrsb.w	r3, [r7, #44]	@ 0x2c
 800cf96:	011b      	lsls	r3, r3, #4
 800cf98:	b25b      	sxtb	r3, r3
 800cf9a:	4313      	orrs	r3, r2
 800cf9c:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 800cf9e:	b2db      	uxtb	r3, r3
 800cfa0:	4619      	mov	r1, r3
 800cfa2:	2030      	movs	r0, #48	@ 0x30
 800cfa4:	f001 f9e0 	bl	800e368 <SX1276Write>
        break;
 800cfa8:	e131      	b.n	800d20e <SX1276SetRxConfig+0x3b6>
            if( bandwidth > 2 )
 800cfaa:	68bb      	ldr	r3, [r7, #8]
 800cfac:	2b02      	cmp	r3, #2
 800cfae:	d901      	bls.n	800cfb4 <SX1276SetRxConfig+0x15c>
                while( 1 );
 800cfb0:	bf00      	nop
 800cfb2:	e7fd      	b.n	800cfb0 <SX1276SetRxConfig+0x158>
            bandwidth += 7;
 800cfb4:	68bb      	ldr	r3, [r7, #8]
 800cfb6:	3307      	adds	r3, #7
 800cfb8:	60bb      	str	r3, [r7, #8]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 800cfba:	4a2b      	ldr	r2, [pc, #172]	@ (800d068 <SX1276SetRxConfig+0x210>)
 800cfbc:	68bb      	ldr	r3, [r7, #8]
 800cfbe:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
            SX1276.Settings.LoRa.Datarate = datarate;
 800cfc2:	4a29      	ldr	r2, [pc, #164]	@ (800d068 <SX1276SetRxConfig+0x210>)
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
            SX1276.Settings.LoRa.Coderate = coderate;
 800cfca:	4a27      	ldr	r2, [pc, #156]	@ (800d068 <SX1276SetRxConfig+0x210>)
 800cfcc:	7bbb      	ldrb	r3, [r7, #14]
 800cfce:	f882 3159 	strb.w	r3, [r2, #345]	@ 0x159
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 800cfd2:	4a25      	ldr	r2, [pc, #148]	@ (800d068 <SX1276SetRxConfig+0x210>)
 800cfd4:	8bbb      	ldrh	r3, [r7, #28]
 800cfd6:	f8a2 315a 	strh.w	r3, [r2, #346]	@ 0x15a
            SX1276.Settings.LoRa.FixLen = fixLen;
 800cfda:	4a23      	ldr	r2, [pc, #140]	@ (800d068 <SX1276SetRxConfig+0x210>)
 800cfdc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800cfe0:	f882 315c 	strb.w	r3, [r2, #348]	@ 0x15c
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 800cfe4:	4a20      	ldr	r2, [pc, #128]	@ (800d068 <SX1276SetRxConfig+0x210>)
 800cfe6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800cfea:	f882 315d 	strb.w	r3, [r2, #349]	@ 0x15d
            SX1276.Settings.LoRa.CrcOn = crcOn;
 800cfee:	4a1e      	ldr	r2, [pc, #120]	@ (800d068 <SX1276SetRxConfig+0x210>)
 800cff0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800cff4:	f882 315e 	strb.w	r3, [r2, #350]	@ 0x15e
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 800cff8:	4a1b      	ldr	r2, [pc, #108]	@ (800d068 <SX1276SetRxConfig+0x210>)
 800cffa:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800cffe:	f882 315f 	strb.w	r3, [r2, #351]	@ 0x15f
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 800d002:	4a19      	ldr	r2, [pc, #100]	@ (800d068 <SX1276SetRxConfig+0x210>)
 800d004:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800d008:	f882 3160 	strb.w	r3, [r2, #352]	@ 0x160
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 800d00c:	4a16      	ldr	r2, [pc, #88]	@ (800d068 <SX1276SetRxConfig+0x210>)
 800d00e:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800d012:	f882 3161 	strb.w	r3, [r2, #353]	@ 0x161
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 800d016:	4a14      	ldr	r2, [pc, #80]	@ (800d068 <SX1276SetRxConfig+0x210>)
 800d018:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800d01c:	f882 3162 	strb.w	r3, [r2, #354]	@ 0x162
            if( datarate > 12 )
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	2b0c      	cmp	r3, #12
 800d024:	d902      	bls.n	800d02c <SX1276SetRxConfig+0x1d4>
                datarate = 12;
 800d026:	230c      	movs	r3, #12
 800d028:	607b      	str	r3, [r7, #4]
 800d02a:	e004      	b.n	800d036 <SX1276SetRxConfig+0x1de>
            else if( datarate < 6 )
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	2b05      	cmp	r3, #5
 800d030:	d801      	bhi.n	800d036 <SX1276SetRxConfig+0x1de>
                datarate = 6;
 800d032:	2306      	movs	r3, #6
 800d034:	607b      	str	r3, [r7, #4]
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800d036:	68bb      	ldr	r3, [r7, #8]
 800d038:	2b07      	cmp	r3, #7
 800d03a:	d105      	bne.n	800d048 <SX1276SetRxConfig+0x1f0>
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	2b0b      	cmp	r3, #11
 800d040:	d008      	beq.n	800d054 <SX1276SetRxConfig+0x1fc>
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	2b0c      	cmp	r3, #12
 800d046:	d005      	beq.n	800d054 <SX1276SetRxConfig+0x1fc>
 800d048:	68bb      	ldr	r3, [r7, #8]
 800d04a:	2b08      	cmp	r3, #8
 800d04c:	d10e      	bne.n	800d06c <SX1276SetRxConfig+0x214>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	2b0c      	cmp	r3, #12
 800d052:	d10b      	bne.n	800d06c <SX1276SetRxConfig+0x214>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 800d054:	4b04      	ldr	r3, [pc, #16]	@ (800d068 <SX1276SetRxConfig+0x210>)
 800d056:	2201      	movs	r2, #1
 800d058:	f883 2158 	strb.w	r2, [r3, #344]	@ 0x158
 800d05c:	e00a      	b.n	800d074 <SX1276SetRxConfig+0x21c>
 800d05e:	bf00      	nop
 800d060:	00000000 	.word	0x00000000
 800d064:	417e8480 	.word	0x417e8480
 800d068:	200005f4 	.word	0x200005f4
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 800d06c:	4b6a      	ldr	r3, [pc, #424]	@ (800d218 <SX1276SetRxConfig+0x3c0>)
 800d06e:	2200      	movs	r2, #0
 800d070:	f883 2158 	strb.w	r2, [r3, #344]	@ 0x158
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 800d074:	201d      	movs	r0, #29
 800d076:	f001 f989 	bl	800e38c <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800d07a:	68bb      	ldr	r3, [r7, #8]
 800d07c:	b2db      	uxtb	r3, r3
 800d07e:	011b      	lsls	r3, r3, #4
 800d080:	b2da      	uxtb	r2, r3
 800d082:	7bbb      	ldrb	r3, [r7, #14]
 800d084:	005b      	lsls	r3, r3, #1
 800d086:	b2db      	uxtb	r3, r3
 800d088:	4313      	orrs	r3, r2
 800d08a:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 800d08c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800d090:	4313      	orrs	r3, r2
 800d092:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 800d094:	4619      	mov	r1, r3
 800d096:	201d      	movs	r0, #29
 800d098:	f001 f966 	bl	800e368 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 800d09c:	201e      	movs	r0, #30
 800d09e:	f001 f975 	bl	800e38c <SX1276Read>
 800d0a2:	4603      	mov	r3, r0
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 800d0a4:	f003 0308 	and.w	r3, r3, #8
 800d0a8:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	b2db      	uxtb	r3, r3
 800d0ae:	011b      	lsls	r3, r3, #4
 800d0b0:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) |
 800d0b2:	4313      	orrs	r3, r2
 800d0b4:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 800d0b6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800d0ba:	009b      	lsls	r3, r3, #2
 800d0bc:	b2db      	uxtb	r3, r3
 800d0be:	4313      	orrs	r3, r2
 800d0c0:	b2da      	uxtb	r2, r3
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 800d0c2:	8c3b      	ldrh	r3, [r7, #32]
 800d0c4:	0a1b      	lsrs	r3, r3, #8
 800d0c6:	b29b      	uxth	r3, r3
 800d0c8:	b2db      	uxtb	r3, r3
 800d0ca:	f003 0303 	and.w	r3, r3, #3
 800d0ce:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 800d0d0:	4313      	orrs	r3, r2
 800d0d2:	b2db      	uxtb	r3, r3
 800d0d4:	4619      	mov	r1, r3
 800d0d6:	201e      	movs	r0, #30
 800d0d8:	f001 f946 	bl	800e368 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 800d0dc:	2026      	movs	r0, #38	@ 0x26
 800d0de:	f001 f955 	bl	800e38c <SX1276Read>
 800d0e2:	4603      	mov	r3, r0
 800d0e4:	b25b      	sxtb	r3, r3
 800d0e6:	f023 0308 	bic.w	r3, r3, #8
 800d0ea:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 800d0ec:	4b4a      	ldr	r3, [pc, #296]	@ (800d218 <SX1276SetRxConfig+0x3c0>)
 800d0ee:	f893 3158 	ldrb.w	r3, [r3, #344]	@ 0x158
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 800d0f2:	b25b      	sxtb	r3, r3
 800d0f4:	00db      	lsls	r3, r3, #3
 800d0f6:	b25b      	sxtb	r3, r3
 800d0f8:	4313      	orrs	r3, r2
 800d0fa:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 800d0fc:	b2db      	uxtb	r3, r3
 800d0fe:	4619      	mov	r1, r3
 800d100:	2026      	movs	r0, #38	@ 0x26
 800d102:	f001 f931 	bl	800e368 <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 800d106:	8c3b      	ldrh	r3, [r7, #32]
 800d108:	b2db      	uxtb	r3, r3
 800d10a:	4619      	mov	r1, r3
 800d10c:	201f      	movs	r0, #31
 800d10e:	f001 f92b 	bl	800e368 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 800d112:	8bbb      	ldrh	r3, [r7, #28]
 800d114:	0a1b      	lsrs	r3, r3, #8
 800d116:	b29b      	uxth	r3, r3
 800d118:	b2db      	uxtb	r3, r3
 800d11a:	4619      	mov	r1, r3
 800d11c:	2020      	movs	r0, #32
 800d11e:	f001 f923 	bl	800e368 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 800d122:	8bbb      	ldrh	r3, [r7, #28]
 800d124:	b2db      	uxtb	r3, r3
 800d126:	4619      	mov	r1, r3
 800d128:	2021      	movs	r0, #33	@ 0x21
 800d12a:	f001 f91d 	bl	800e368 <SX1276Write>
            if( fixLen == 1 )
 800d12e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d132:	2b00      	cmp	r3, #0
 800d134:	d005      	beq.n	800d142 <SX1276SetRxConfig+0x2ea>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 800d136:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d13a:	4619      	mov	r1, r3
 800d13c:	2022      	movs	r0, #34	@ 0x22
 800d13e:	f001 f913 	bl	800e368 <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800d142:	4b35      	ldr	r3, [pc, #212]	@ (800d218 <SX1276SetRxConfig+0x3c0>)
 800d144:	f893 315f 	ldrb.w	r3, [r3, #351]	@ 0x15f
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d011      	beq.n	800d170 <SX1276SetRxConfig+0x318>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 800d14c:	2044      	movs	r0, #68	@ 0x44
 800d14e:	f001 f91d 	bl	800e38c <SX1276Read>
 800d152:	4603      	mov	r3, r0
 800d154:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d158:	b2db      	uxtb	r3, r3
 800d15a:	4619      	mov	r1, r3
 800d15c:	2044      	movs	r0, #68	@ 0x44
 800d15e:	f001 f903 	bl	800e368 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 800d162:	4b2d      	ldr	r3, [pc, #180]	@ (800d218 <SX1276SetRxConfig+0x3c0>)
 800d164:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 800d168:	4619      	mov	r1, r3
 800d16a:	2024      	movs	r0, #36	@ 0x24
 800d16c:	f001 f8fc 	bl	800e368 <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 800d170:	68bb      	ldr	r3, [r7, #8]
 800d172:	2b09      	cmp	r3, #9
 800d174:	d10e      	bne.n	800d194 <SX1276SetRxConfig+0x33c>
 800d176:	4b28      	ldr	r3, [pc, #160]	@ (800d218 <SX1276SetRxConfig+0x3c0>)
 800d178:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800d17c:	4a27      	ldr	r2, [pc, #156]	@ (800d21c <SX1276SetRxConfig+0x3c4>)
 800d17e:	4293      	cmp	r3, r2
 800d180:	d908      	bls.n	800d194 <SX1276SetRxConfig+0x33c>
                SX1276Write( REG_LR_TEST36, 0x02 );
 800d182:	2102      	movs	r1, #2
 800d184:	2036      	movs	r0, #54	@ 0x36
 800d186:	f001 f8ef 	bl	800e368 <SX1276Write>
                SX1276Write( REG_LR_TEST3A, 0x64 );
 800d18a:	2164      	movs	r1, #100	@ 0x64
 800d18c:	203a      	movs	r0, #58	@ 0x3a
 800d18e:	f001 f8eb 	bl	800e368 <SX1276Write>
 800d192:	e00f      	b.n	800d1b4 <SX1276SetRxConfig+0x35c>
            else if( bandwidth == 9 )
 800d194:	68bb      	ldr	r3, [r7, #8]
 800d196:	2b09      	cmp	r3, #9
 800d198:	d108      	bne.n	800d1ac <SX1276SetRxConfig+0x354>
                SX1276Write( REG_LR_TEST36, 0x02 );
 800d19a:	2102      	movs	r1, #2
 800d19c:	2036      	movs	r0, #54	@ 0x36
 800d19e:	f001 f8e3 	bl	800e368 <SX1276Write>
                SX1276Write( REG_LR_TEST3A, 0x7F );
 800d1a2:	217f      	movs	r1, #127	@ 0x7f
 800d1a4:	203a      	movs	r0, #58	@ 0x3a
 800d1a6:	f001 f8df 	bl	800e368 <SX1276Write>
 800d1aa:	e003      	b.n	800d1b4 <SX1276SetRxConfig+0x35c>
                SX1276Write( REG_LR_TEST36, 0x03 );
 800d1ac:	2103      	movs	r1, #3
 800d1ae:	2036      	movs	r0, #54	@ 0x36
 800d1b0:	f001 f8da 	bl	800e368 <SX1276Write>
            if( datarate == 6 )
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	2b06      	cmp	r3, #6
 800d1b8:	d114      	bne.n	800d1e4 <SX1276SetRxConfig+0x38c>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800d1ba:	2031      	movs	r0, #49	@ 0x31
 800d1bc:	f001 f8e6 	bl	800e38c <SX1276Read>
 800d1c0:	4603      	mov	r3, r0
 800d1c2:	b25b      	sxtb	r3, r3
 800d1c4:	f023 0307 	bic.w	r3, r3, #7
 800d1c8:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 800d1ca:	f043 0305 	orr.w	r3, r3, #5
 800d1ce:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800d1d0:	b2db      	uxtb	r3, r3
 800d1d2:	4619      	mov	r1, r3
 800d1d4:	2031      	movs	r0, #49	@ 0x31
 800d1d6:	f001 f8c7 	bl	800e368 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800d1da:	210c      	movs	r1, #12
 800d1dc:	2037      	movs	r0, #55	@ 0x37
 800d1de:	f001 f8c3 	bl	800e368 <SX1276Write>
        break;
 800d1e2:	e013      	b.n	800d20c <SX1276SetRxConfig+0x3b4>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800d1e4:	2031      	movs	r0, #49	@ 0x31
 800d1e6:	f001 f8d1 	bl	800e38c <SX1276Read>
 800d1ea:	4603      	mov	r3, r0
 800d1ec:	b25b      	sxtb	r3, r3
 800d1ee:	f023 0307 	bic.w	r3, r3, #7
 800d1f2:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 800d1f4:	f043 0303 	orr.w	r3, r3, #3
 800d1f8:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800d1fa:	b2db      	uxtb	r3, r3
 800d1fc:	4619      	mov	r1, r3
 800d1fe:	2031      	movs	r0, #49	@ 0x31
 800d200:	f001 f8b2 	bl	800e368 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800d204:	210a      	movs	r1, #10
 800d206:	2037      	movs	r0, #55	@ 0x37
 800d208:	f001 f8ae 	bl	800e368 <SX1276Write>
        break;
 800d20c:	bf00      	nop
}
 800d20e:	bf00      	nop
 800d210:	3710      	adds	r7, #16
 800d212:	46bd      	mov	sp, r7
 800d214:	bd80      	pop	{r7, pc}
 800d216:	bf00      	nop
 800d218:	200005f4 	.word	0x200005f4
 800d21c:	1f4add40 	.word	0x1f4add40

0800d220 <SX1276SetTxConfig>:
void SX1276SetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                        uint32_t bandwidth, uint32_t datarate,
                        uint8_t coderate, uint16_t preambleLen,
                        bool fixLen, bool crcOn, bool freqHopOn,
                        uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 800d220:	b590      	push	{r4, r7, lr}
 800d222:	b087      	sub	sp, #28
 800d224:	af00      	add	r7, sp, #0
 800d226:	60ba      	str	r2, [r7, #8]
 800d228:	607b      	str	r3, [r7, #4]
 800d22a:	4603      	mov	r3, r0
 800d22c:	73fb      	strb	r3, [r7, #15]
 800d22e:	460b      	mov	r3, r1
 800d230:	73bb      	strb	r3, [r7, #14]
    uint8_t paConfig = 0;
 800d232:	2300      	movs	r3, #0
 800d234:	75fb      	strb	r3, [r7, #23]
    uint8_t paDac = 0;
 800d236:	2300      	movs	r3, #0
 800d238:	75bb      	strb	r3, [r7, #22]

    SX1276SetModem( modem );
 800d23a:	7bfb      	ldrb	r3, [r7, #15]
 800d23c:	4618      	mov	r0, r3
 800d23e:	f001 f851 	bl	800e2e4 <SX1276SetModem>

    paConfig = SX1276Read( REG_PACONFIG );
 800d242:	2009      	movs	r0, #9
 800d244:	f001 f8a2 	bl	800e38c <SX1276Read>
 800d248:	4603      	mov	r3, r0
 800d24a:	75fb      	strb	r3, [r7, #23]
    paDac = SX1276Read( REG_PADAC );
 800d24c:	204d      	movs	r0, #77	@ 0x4d
 800d24e:	f001 f89d 	bl	800e38c <SX1276Read>
 800d252:	4603      	mov	r3, r0
 800d254:	75bb      	strb	r3, [r7, #22]

    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | SX1276GetPaSelect( SX1276.Settings.Channel );
 800d256:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d25a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d25e:	b25c      	sxtb	r4, r3
 800d260:	4bb3      	ldr	r3, [pc, #716]	@ (800d530 <SX1276SetTxConfig+0x310>)
 800d262:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800d266:	4618      	mov	r0, r3
 800d268:	f7ff f95e 	bl	800c528 <SX1276GetPaSelect>
 800d26c:	4603      	mov	r3, r0
 800d26e:	b25b      	sxtb	r3, r3
 800d270:	4323      	orrs	r3, r4
 800d272:	b25b      	sxtb	r3, r3
 800d274:	75fb      	strb	r3, [r7, #23]
    paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK ) | 0x70;
 800d276:	7dfb      	ldrb	r3, [r7, #23]
 800d278:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 800d27c:	75fb      	strb	r3, [r7, #23]

    if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 800d27e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d282:	2b00      	cmp	r3, #0
 800d284:	da4e      	bge.n	800d324 <SX1276SetTxConfig+0x104>
    {
        if( power > 17 )
 800d286:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d28a:	2b11      	cmp	r3, #17
 800d28c:	dd04      	ble.n	800d298 <SX1276SetTxConfig+0x78>
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 800d28e:	7dbb      	ldrb	r3, [r7, #22]
 800d290:	f043 0307 	orr.w	r3, r3, #7
 800d294:	75bb      	strb	r3, [r7, #22]
 800d296:	e008      	b.n	800d2aa <SX1276SetTxConfig+0x8a>
        }
        else
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 800d298:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800d29c:	f023 0307 	bic.w	r3, r3, #7
 800d2a0:	b25b      	sxtb	r3, r3
 800d2a2:	f043 0304 	orr.w	r3, r3, #4
 800d2a6:	b25b      	sxtb	r3, r3
 800d2a8:	75bb      	strb	r3, [r7, #22]
        }
        if( ( paDac & RF_PADAC_20DBM_ON ) == RF_PADAC_20DBM_ON )
 800d2aa:	7dbb      	ldrb	r3, [r7, #22]
 800d2ac:	f003 0307 	and.w	r3, r3, #7
 800d2b0:	2b07      	cmp	r3, #7
 800d2b2:	d11b      	bne.n	800d2ec <SX1276SetTxConfig+0xcc>
        {
            if( power < 5 )
 800d2b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d2b8:	2b04      	cmp	r3, #4
 800d2ba:	dc01      	bgt.n	800d2c0 <SX1276SetTxConfig+0xa0>
            {
                power = 5;
 800d2bc:	2305      	movs	r3, #5
 800d2be:	73bb      	strb	r3, [r7, #14]
            }
            if( power > 20 )
 800d2c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d2c4:	2b14      	cmp	r3, #20
 800d2c6:	dd01      	ble.n	800d2cc <SX1276SetTxConfig+0xac>
            {
                power = 20;
 800d2c8:	2314      	movs	r3, #20
 800d2ca:	73bb      	strb	r3, [r7, #14]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 800d2cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d2d0:	f023 030f 	bic.w	r3, r3, #15
 800d2d4:	b25a      	sxtb	r2, r3
 800d2d6:	7bbb      	ldrb	r3, [r7, #14]
 800d2d8:	3b05      	subs	r3, #5
 800d2da:	b2db      	uxtb	r3, r3
 800d2dc:	b25b      	sxtb	r3, r3
 800d2de:	f003 030f 	and.w	r3, r3, #15
 800d2e2:	b25b      	sxtb	r3, r3
 800d2e4:	4313      	orrs	r3, r2
 800d2e6:	b25b      	sxtb	r3, r3
 800d2e8:	75fb      	strb	r3, [r7, #23]
 800d2ea:	e037      	b.n	800d35c <SX1276SetTxConfig+0x13c>
        }
        else
        {
            if( power < 2 )
 800d2ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d2f0:	2b01      	cmp	r3, #1
 800d2f2:	dc01      	bgt.n	800d2f8 <SX1276SetTxConfig+0xd8>
            {
                power = 2;
 800d2f4:	2302      	movs	r3, #2
 800d2f6:	73bb      	strb	r3, [r7, #14]
            }
            if( power > 17 )
 800d2f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d2fc:	2b11      	cmp	r3, #17
 800d2fe:	dd01      	ble.n	800d304 <SX1276SetTxConfig+0xe4>
            {
                power = 17;
 800d300:	2311      	movs	r3, #17
 800d302:	73bb      	strb	r3, [r7, #14]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 800d304:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d308:	f023 030f 	bic.w	r3, r3, #15
 800d30c:	b25a      	sxtb	r2, r3
 800d30e:	7bbb      	ldrb	r3, [r7, #14]
 800d310:	3b02      	subs	r3, #2
 800d312:	b2db      	uxtb	r3, r3
 800d314:	b25b      	sxtb	r3, r3
 800d316:	f003 030f 	and.w	r3, r3, #15
 800d31a:	b25b      	sxtb	r3, r3
 800d31c:	4313      	orrs	r3, r2
 800d31e:	b25b      	sxtb	r3, r3
 800d320:	75fb      	strb	r3, [r7, #23]
 800d322:	e01b      	b.n	800d35c <SX1276SetTxConfig+0x13c>
        }
    }
    else
    {
        if( power < -1 )
 800d324:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d32c:	da01      	bge.n	800d332 <SX1276SetTxConfig+0x112>
        {
            power = -1;
 800d32e:	23ff      	movs	r3, #255	@ 0xff
 800d330:	73bb      	strb	r3, [r7, #14]
        }
        if( power > 14 )
 800d332:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d336:	2b0e      	cmp	r3, #14
 800d338:	dd01      	ble.n	800d33e <SX1276SetTxConfig+0x11e>
        {
            power = 14;
 800d33a:	230e      	movs	r3, #14
 800d33c:	73bb      	strb	r3, [r7, #14]
        }
        paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power + 1 ) & 0x0F );
 800d33e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d342:	f023 030f 	bic.w	r3, r3, #15
 800d346:	b25a      	sxtb	r2, r3
 800d348:	7bbb      	ldrb	r3, [r7, #14]
 800d34a:	3301      	adds	r3, #1
 800d34c:	b2db      	uxtb	r3, r3
 800d34e:	b25b      	sxtb	r3, r3
 800d350:	f003 030f 	and.w	r3, r3, #15
 800d354:	b25b      	sxtb	r3, r3
 800d356:	4313      	orrs	r3, r2
 800d358:	b25b      	sxtb	r3, r3
 800d35a:	75fb      	strb	r3, [r7, #23]
    }
    SX1276Write( REG_PACONFIG, paConfig );
 800d35c:	7dfb      	ldrb	r3, [r7, #23]
 800d35e:	4619      	mov	r1, r3
 800d360:	2009      	movs	r0, #9
 800d362:	f001 f801 	bl	800e368 <SX1276Write>
    SX1276Write( REG_PADAC, paDac );
 800d366:	7dbb      	ldrb	r3, [r7, #22]
 800d368:	4619      	mov	r1, r3
 800d36a:	204d      	movs	r0, #77	@ 0x4d
 800d36c:	f000 fffc 	bl	800e368 <SX1276Write>

    switch( modem )
 800d370:	7bfb      	ldrb	r3, [r7, #15]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d003      	beq.n	800d37e <SX1276SetTxConfig+0x15e>
 800d376:	2b01      	cmp	r3, #1
 800d378:	f000 8092 	beq.w	800d4a0 <SX1276SetTxConfig+0x280>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 800d37c:	e18a      	b.n	800d694 <SX1276SetTxConfig+0x474>
            SX1276.Settings.Fsk.Power = power;
 800d37e:	4a6c      	ldr	r2, [pc, #432]	@ (800d530 <SX1276SetTxConfig+0x310>)
 800d380:	7bbb      	ldrb	r3, [r7, #14]
 800d382:	f882 311c 	strb.w	r3, [r2, #284]	@ 0x11c
            SX1276.Settings.Fsk.Fdev = fdev;
 800d386:	4a6a      	ldr	r2, [pc, #424]	@ (800d530 <SX1276SetTxConfig+0x310>)
 800d388:	68bb      	ldr	r3, [r7, #8]
 800d38a:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 800d38e:	4a68      	ldr	r2, [pc, #416]	@ (800d530 <SX1276SetTxConfig+0x310>)
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	f8c2 3124 	str.w	r3, [r2, #292]	@ 0x124
            SX1276.Settings.Fsk.Datarate = datarate;
 800d396:	4a66      	ldr	r2, [pc, #408]	@ (800d530 <SX1276SetTxConfig+0x310>)
 800d398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d39a:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 800d39e:	4a64      	ldr	r2, [pc, #400]	@ (800d530 <SX1276SetTxConfig+0x310>)
 800d3a0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800d3a2:	f8a2 3130 	strh.w	r3, [r2, #304]	@ 0x130
            SX1276.Settings.Fsk.FixLen = fixLen;
 800d3a6:	4a62      	ldr	r2, [pc, #392]	@ (800d530 <SX1276SetTxConfig+0x310>)
 800d3a8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800d3ac:	f882 3132 	strb.w	r3, [r2, #306]	@ 0x132
            SX1276.Settings.Fsk.CrcOn = crcOn;
 800d3b0:	4a5f      	ldr	r2, [pc, #380]	@ (800d530 <SX1276SetTxConfig+0x310>)
 800d3b2:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800d3b6:	f882 3134 	strb.w	r3, [r2, #308]	@ 0x134
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 800d3ba:	4a5d      	ldr	r2, [pc, #372]	@ (800d530 <SX1276SetTxConfig+0x310>)
 800d3bc:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800d3c0:	f882 3135 	strb.w	r3, [r2, #309]	@ 0x135
            SX1276.Settings.Fsk.TxTimeout = timeout;
 800d3c4:	4a5a      	ldr	r2, [pc, #360]	@ (800d530 <SX1276SetTxConfig+0x310>)
 800d3c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d3c8:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
 800d3cc:	68b8      	ldr	r0, [r7, #8]
 800d3ce:	f7f4 fe2b 	bl	8002028 <__aeabi_ui2d>
 800d3d2:	a353      	add	r3, pc, #332	@ (adr r3, 800d520 <SX1276SetTxConfig+0x300>)
 800d3d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3d8:	f7f4 ffca 	bl	8002370 <__aeabi_ddiv>
 800d3dc:	4602      	mov	r2, r0
 800d3de:	460b      	mov	r3, r1
 800d3e0:	4610      	mov	r0, r2
 800d3e2:	4619      	mov	r1, r3
 800d3e4:	f7f5 f972 	bl	80026cc <__aeabi_d2uiz>
 800d3e8:	4603      	mov	r3, r0
 800d3ea:	b29b      	uxth	r3, r3
 800d3ec:	60bb      	str	r3, [r7, #8]
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdev >> 8 ) );
 800d3ee:	68bb      	ldr	r3, [r7, #8]
 800d3f0:	0a1b      	lsrs	r3, r3, #8
 800d3f2:	b2db      	uxtb	r3, r3
 800d3f4:	4619      	mov	r1, r3
 800d3f6:	2004      	movs	r0, #4
 800d3f8:	f000 ffb6 	bl	800e368 <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdev & 0xFF ) );
 800d3fc:	68bb      	ldr	r3, [r7, #8]
 800d3fe:	b2db      	uxtb	r3, r3
 800d400:	4619      	mov	r1, r3
 800d402:	2005      	movs	r0, #5
 800d404:	f000 ffb0 	bl	800e368 <SX1276Write>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 800d408:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d40a:	f7f4 fe0d 	bl	8002028 <__aeabi_ui2d>
 800d40e:	4602      	mov	r2, r0
 800d410:	460b      	mov	r3, r1
 800d412:	a145      	add	r1, pc, #276	@ (adr r1, 800d528 <SX1276SetTxConfig+0x308>)
 800d414:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d418:	f7f4 ffaa 	bl	8002370 <__aeabi_ddiv>
 800d41c:	4602      	mov	r2, r0
 800d41e:	460b      	mov	r3, r1
 800d420:	4610      	mov	r0, r2
 800d422:	4619      	mov	r1, r3
 800d424:	f7f5 f952 	bl	80026cc <__aeabi_d2uiz>
 800d428:	4603      	mov	r3, r0
 800d42a:	b29b      	uxth	r3, r3
 800d42c:	62bb      	str	r3, [r7, #40]	@ 0x28
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 800d42e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d430:	0a1b      	lsrs	r3, r3, #8
 800d432:	b2db      	uxtb	r3, r3
 800d434:	4619      	mov	r1, r3
 800d436:	2002      	movs	r0, #2
 800d438:	f000 ff96 	bl	800e368 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 800d43c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d43e:	b2db      	uxtb	r3, r3
 800d440:	4619      	mov	r1, r3
 800d442:	2003      	movs	r0, #3
 800d444:	f000 ff90 	bl	800e368 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 800d448:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800d44a:	0a1b      	lsrs	r3, r3, #8
 800d44c:	b29b      	uxth	r3, r3
 800d44e:	b2db      	uxtb	r3, r3
 800d450:	4619      	mov	r1, r3
 800d452:	2025      	movs	r0, #37	@ 0x25
 800d454:	f000 ff88 	bl	800e368 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 800d458:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800d45a:	b2db      	uxtb	r3, r3
 800d45c:	4619      	mov	r1, r3
 800d45e:	2026      	movs	r0, #38	@ 0x26
 800d460:	f000 ff82 	bl	800e368 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 800d464:	2030      	movs	r0, #48	@ 0x30
 800d466:	f000 ff91 	bl	800e38c <SX1276Read>
 800d46a:	4603      	mov	r3, r0
 800d46c:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 800d46e:	f003 036f 	and.w	r3, r3, #111	@ 0x6f
 800d472:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 800d474:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 800d478:	2a00      	cmp	r2, #0
 800d47a:	d001      	beq.n	800d480 <SX1276SetTxConfig+0x260>
 800d47c:	2200      	movs	r2, #0
 800d47e:	e001      	b.n	800d484 <SX1276SetTxConfig+0x264>
 800d480:	f06f 027f 	mvn.w	r2, #127	@ 0x7f
 800d484:	4313      	orrs	r3, r2
 800d486:	b25a      	sxtb	r2, r3
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 800d488:	f997 3038 	ldrsb.w	r3, [r7, #56]	@ 0x38
 800d48c:	011b      	lsls	r3, r3, #4
 800d48e:	b25b      	sxtb	r3, r3
 800d490:	4313      	orrs	r3, r2
 800d492:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 800d494:	b2db      	uxtb	r3, r3
 800d496:	4619      	mov	r1, r3
 800d498:	2030      	movs	r0, #48	@ 0x30
 800d49a:	f000 ff65 	bl	800e368 <SX1276Write>
        break;
 800d49e:	e0f9      	b.n	800d694 <SX1276SetTxConfig+0x474>
            SX1276.Settings.LoRa.Power = power;
 800d4a0:	4a23      	ldr	r2, [pc, #140]	@ (800d530 <SX1276SetTxConfig+0x310>)
 800d4a2:	7bbb      	ldrb	r3, [r7, #14]
 800d4a4:	f882 314c 	strb.w	r3, [r2, #332]	@ 0x14c
            if( bandwidth > 2 )
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	2b02      	cmp	r3, #2
 800d4ac:	d901      	bls.n	800d4b2 <SX1276SetTxConfig+0x292>
                while( 1 );
 800d4ae:	bf00      	nop
 800d4b0:	e7fd      	b.n	800d4ae <SX1276SetTxConfig+0x28e>
            bandwidth += 7;
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	3307      	adds	r3, #7
 800d4b6:	607b      	str	r3, [r7, #4]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 800d4b8:	4a1d      	ldr	r2, [pc, #116]	@ (800d530 <SX1276SetTxConfig+0x310>)
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
            SX1276.Settings.LoRa.Datarate = datarate;
 800d4c0:	4a1b      	ldr	r2, [pc, #108]	@ (800d530 <SX1276SetTxConfig+0x310>)
 800d4c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4c4:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
            SX1276.Settings.LoRa.Coderate = coderate;
 800d4c8:	4a19      	ldr	r2, [pc, #100]	@ (800d530 <SX1276SetTxConfig+0x310>)
 800d4ca:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800d4ce:	f882 3159 	strb.w	r3, [r2, #345]	@ 0x159
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 800d4d2:	4a17      	ldr	r2, [pc, #92]	@ (800d530 <SX1276SetTxConfig+0x310>)
 800d4d4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800d4d6:	f8a2 315a 	strh.w	r3, [r2, #346]	@ 0x15a
            SX1276.Settings.LoRa.FixLen = fixLen;
 800d4da:	4a15      	ldr	r2, [pc, #84]	@ (800d530 <SX1276SetTxConfig+0x310>)
 800d4dc:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800d4e0:	f882 315c 	strb.w	r3, [r2, #348]	@ 0x15c
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 800d4e4:	4a12      	ldr	r2, [pc, #72]	@ (800d530 <SX1276SetTxConfig+0x310>)
 800d4e6:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800d4ea:	f882 315f 	strb.w	r3, [r2, #351]	@ 0x15f
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 800d4ee:	4a10      	ldr	r2, [pc, #64]	@ (800d530 <SX1276SetTxConfig+0x310>)
 800d4f0:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800d4f4:	f882 3160 	strb.w	r3, [r2, #352]	@ 0x160
            SX1276.Settings.LoRa.CrcOn = crcOn;
 800d4f8:	4a0d      	ldr	r2, [pc, #52]	@ (800d530 <SX1276SetTxConfig+0x310>)
 800d4fa:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800d4fe:	f882 315e 	strb.w	r3, [r2, #350]	@ 0x15e
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 800d502:	4a0b      	ldr	r2, [pc, #44]	@ (800d530 <SX1276SetTxConfig+0x310>)
 800d504:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800d508:	f882 3161 	strb.w	r3, [r2, #353]	@ 0x161
            SX1276.Settings.LoRa.TxTimeout = timeout;
 800d50c:	4a08      	ldr	r2, [pc, #32]	@ (800d530 <SX1276SetTxConfig+0x310>)
 800d50e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d510:	f8c2 3164 	str.w	r3, [r2, #356]	@ 0x164
            if( datarate > 12 )
 800d514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d516:	2b0c      	cmp	r3, #12
 800d518:	d90c      	bls.n	800d534 <SX1276SetTxConfig+0x314>
                datarate = 12;
 800d51a:	230c      	movs	r3, #12
 800d51c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d51e:	e00e      	b.n	800d53e <SX1276SetTxConfig+0x31e>
 800d520:	00000000 	.word	0x00000000
 800d524:	404e8480 	.word	0x404e8480
 800d528:	00000000 	.word	0x00000000
 800d52c:	417e8480 	.word	0x417e8480
 800d530:	200005f4 	.word	0x200005f4
            else if( datarate < 6 )
 800d534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d536:	2b05      	cmp	r3, #5
 800d538:	d801      	bhi.n	800d53e <SX1276SetTxConfig+0x31e>
                datarate = 6;
 800d53a:	2306      	movs	r3, #6
 800d53c:	62bb      	str	r3, [r7, #40]	@ 0x28
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	2b07      	cmp	r3, #7
 800d542:	d105      	bne.n	800d550 <SX1276SetTxConfig+0x330>
 800d544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d546:	2b0b      	cmp	r3, #11
 800d548:	d008      	beq.n	800d55c <SX1276SetTxConfig+0x33c>
 800d54a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d54c:	2b0c      	cmp	r3, #12
 800d54e:	d005      	beq.n	800d55c <SX1276SetTxConfig+0x33c>
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	2b08      	cmp	r3, #8
 800d554:	d107      	bne.n	800d566 <SX1276SetTxConfig+0x346>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 800d556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d558:	2b0c      	cmp	r3, #12
 800d55a:	d104      	bne.n	800d566 <SX1276SetTxConfig+0x346>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 800d55c:	4b4f      	ldr	r3, [pc, #316]	@ (800d69c <SX1276SetTxConfig+0x47c>)
 800d55e:	2201      	movs	r2, #1
 800d560:	f883 2158 	strb.w	r2, [r3, #344]	@ 0x158
 800d564:	e003      	b.n	800d56e <SX1276SetTxConfig+0x34e>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 800d566:	4b4d      	ldr	r3, [pc, #308]	@ (800d69c <SX1276SetTxConfig+0x47c>)
 800d568:	2200      	movs	r2, #0
 800d56a:	f883 2158 	strb.w	r2, [r3, #344]	@ 0x158
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800d56e:	4b4b      	ldr	r3, [pc, #300]	@ (800d69c <SX1276SetTxConfig+0x47c>)
 800d570:	f893 315f 	ldrb.w	r3, [r3, #351]	@ 0x15f
 800d574:	2b00      	cmp	r3, #0
 800d576:	d011      	beq.n	800d59c <SX1276SetTxConfig+0x37c>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 800d578:	2044      	movs	r0, #68	@ 0x44
 800d57a:	f000 ff07 	bl	800e38c <SX1276Read>
 800d57e:	4603      	mov	r3, r0
 800d580:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d584:	b2db      	uxtb	r3, r3
 800d586:	4619      	mov	r1, r3
 800d588:	2044      	movs	r0, #68	@ 0x44
 800d58a:	f000 feed 	bl	800e368 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 800d58e:	4b43      	ldr	r3, [pc, #268]	@ (800d69c <SX1276SetTxConfig+0x47c>)
 800d590:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 800d594:	4619      	mov	r1, r3
 800d596:	2024      	movs	r0, #36	@ 0x24
 800d598:	f000 fee6 	bl	800e368 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 800d59c:	201d      	movs	r0, #29
 800d59e:	f000 fef5 	bl	800e38c <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	b2db      	uxtb	r3, r3
 800d5a6:	011b      	lsls	r3, r3, #4
 800d5a8:	b2da      	uxtb	r2, r3
 800d5aa:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800d5ae:	005b      	lsls	r3, r3, #1
 800d5b0:	b2db      	uxtb	r3, r3
 800d5b2:	4313      	orrs	r3, r2
 800d5b4:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 800d5b6:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800d5ba:	4313      	orrs	r3, r2
 800d5bc:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 800d5be:	4619      	mov	r1, r3
 800d5c0:	201d      	movs	r0, #29
 800d5c2:	f000 fed1 	bl	800e368 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 800d5c6:	201e      	movs	r0, #30
 800d5c8:	f000 fee0 	bl	800e38c <SX1276Read>
 800d5cc:	4603      	mov	r3, r0
                           RFLR_MODEMCONFIG2_SF_MASK &
 800d5ce:	f003 030b 	and.w	r3, r3, #11
 800d5d2:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 800d5d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5d6:	b2db      	uxtb	r3, r3
 800d5d8:	011b      	lsls	r3, r3, #4
 800d5da:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK ) |
 800d5dc:	4313      	orrs	r3, r2
 800d5de:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 800d5e0:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800d5e4:	009b      	lsls	r3, r3, #2
 800d5e6:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 800d5e8:	4313      	orrs	r3, r2
 800d5ea:	b2db      	uxtb	r3, r3
 800d5ec:	4619      	mov	r1, r3
 800d5ee:	201e      	movs	r0, #30
 800d5f0:	f000 feba 	bl	800e368 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 800d5f4:	2026      	movs	r0, #38	@ 0x26
 800d5f6:	f000 fec9 	bl	800e38c <SX1276Read>
 800d5fa:	4603      	mov	r3, r0
 800d5fc:	b25b      	sxtb	r3, r3
 800d5fe:	f023 0308 	bic.w	r3, r3, #8
 800d602:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 800d604:	4b25      	ldr	r3, [pc, #148]	@ (800d69c <SX1276SetTxConfig+0x47c>)
 800d606:	f893 3158 	ldrb.w	r3, [r3, #344]	@ 0x158
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 800d60a:	b25b      	sxtb	r3, r3
 800d60c:	00db      	lsls	r3, r3, #3
 800d60e:	b25b      	sxtb	r3, r3
 800d610:	4313      	orrs	r3, r2
 800d612:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 800d614:	b2db      	uxtb	r3, r3
 800d616:	4619      	mov	r1, r3
 800d618:	2026      	movs	r0, #38	@ 0x26
 800d61a:	f000 fea5 	bl	800e368 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 800d61e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800d620:	0a1b      	lsrs	r3, r3, #8
 800d622:	b29b      	uxth	r3, r3
 800d624:	b2db      	uxtb	r3, r3
 800d626:	4619      	mov	r1, r3
 800d628:	2020      	movs	r0, #32
 800d62a:	f000 fe9d 	bl	800e368 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 800d62e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800d630:	b2db      	uxtb	r3, r3
 800d632:	4619      	mov	r1, r3
 800d634:	2021      	movs	r0, #33	@ 0x21
 800d636:	f000 fe97 	bl	800e368 <SX1276Write>
            if( datarate == 6 )
 800d63a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d63c:	2b06      	cmp	r3, #6
 800d63e:	d114      	bne.n	800d66a <SX1276SetTxConfig+0x44a>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800d640:	2031      	movs	r0, #49	@ 0x31
 800d642:	f000 fea3 	bl	800e38c <SX1276Read>
 800d646:	4603      	mov	r3, r0
 800d648:	b25b      	sxtb	r3, r3
 800d64a:	f023 0307 	bic.w	r3, r3, #7
 800d64e:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 800d650:	f043 0305 	orr.w	r3, r3, #5
 800d654:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800d656:	b2db      	uxtb	r3, r3
 800d658:	4619      	mov	r1, r3
 800d65a:	2031      	movs	r0, #49	@ 0x31
 800d65c:	f000 fe84 	bl	800e368 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800d660:	210c      	movs	r1, #12
 800d662:	2037      	movs	r0, #55	@ 0x37
 800d664:	f000 fe80 	bl	800e368 <SX1276Write>
        break;
 800d668:	e013      	b.n	800d692 <SX1276SetTxConfig+0x472>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800d66a:	2031      	movs	r0, #49	@ 0x31
 800d66c:	f000 fe8e 	bl	800e38c <SX1276Read>
 800d670:	4603      	mov	r3, r0
 800d672:	b25b      	sxtb	r3, r3
 800d674:	f023 0307 	bic.w	r3, r3, #7
 800d678:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 800d67a:	f043 0303 	orr.w	r3, r3, #3
 800d67e:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800d680:	b2db      	uxtb	r3, r3
 800d682:	4619      	mov	r1, r3
 800d684:	2031      	movs	r0, #49	@ 0x31
 800d686:	f000 fe6f 	bl	800e368 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800d68a:	210a      	movs	r1, #10
 800d68c:	2037      	movs	r0, #55	@ 0x37
 800d68e:	f000 fe6b 	bl	800e368 <SX1276Write>
        break;
 800d692:	bf00      	nop
}
 800d694:	bf00      	nop
 800d696:	371c      	adds	r7, #28
 800d698:	46bd      	mov	sp, r7
 800d69a:	bd90      	pop	{r4, r7, pc}
 800d69c:	200005f4 	.word	0x200005f4

0800d6a0 <SX1276GetTimeOnAir>:

uint32_t SX1276GetTimeOnAir( RadioModems_t modem, uint8_t pktLen )
{
 800d6a0:	b5b0      	push	{r4, r5, r7, lr}
 800d6a2:	b094      	sub	sp, #80	@ 0x50
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	4603      	mov	r3, r0
 800d6a8:	460a      	mov	r2, r1
 800d6aa:	71fb      	strb	r3, [r7, #7]
 800d6ac:	4613      	mov	r3, r2
 800d6ae:	71bb      	strb	r3, [r7, #6]
    uint32_t airTime = 0;
 800d6b0:	2300      	movs	r3, #0
 800d6b2:	64fb      	str	r3, [r7, #76]	@ 0x4c

    switch( modem )
 800d6b4:	79fb      	ldrb	r3, [r7, #7]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d003      	beq.n	800d6c2 <SX1276GetTimeOnAir+0x22>
 800d6ba:	2b01      	cmp	r3, #1
 800d6bc:	f000 8092 	beq.w	800d7e4 <SX1276GetTimeOnAir+0x144>
 800d6c0:	e1a0      	b.n	800da04 <SX1276GetTimeOnAir+0x364>
    {
    case MODEM_FSK:
        {
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 800d6c2:	4ba9      	ldr	r3, [pc, #676]	@ (800d968 <SX1276GetTimeOnAir+0x2c8>)
 800d6c4:	f8b3 3130 	ldrh.w	r3, [r3, #304]	@ 0x130
 800d6c8:	461c      	mov	r4, r3
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 800d6ca:	2027      	movs	r0, #39	@ 0x27
 800d6cc:	f000 fe5e 	bl	800e38c <SX1276Read>
 800d6d0:	4603      	mov	r3, r0
 800d6d2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800d6d6:	3301      	adds	r3, #1
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 800d6d8:	4423      	add	r3, r4
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 800d6da:	4618      	mov	r0, r3
 800d6dc:	f7f4 fcb4 	bl	8002048 <__aeabi_i2d>
 800d6e0:	4602      	mov	r2, r0
 800d6e2:	460b      	mov	r3, r1
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 800d6e4:	49a0      	ldr	r1, [pc, #640]	@ (800d968 <SX1276GetTimeOnAir+0x2c8>)
 800d6e6:	f891 1132 	ldrb.w	r1, [r1, #306]	@ 0x132
 800d6ea:	2900      	cmp	r1, #0
 800d6ec:	d004      	beq.n	800d6f8 <SX1276GetTimeOnAir+0x58>
 800d6ee:	f04f 0000 	mov.w	r0, #0
 800d6f2:	f04f 0100 	mov.w	r1, #0
 800d6f6:	e002      	b.n	800d6fe <SX1276GetTimeOnAir+0x5e>
 800d6f8:	f04f 0000 	mov.w	r0, #0
 800d6fc:	499b      	ldr	r1, [pc, #620]	@ (800d96c <SX1276GetTimeOnAir+0x2cc>)
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 800d6fe:	f7f4 fb57 	bl	8001db0 <__adddf3>
 800d702:	4602      	mov	r2, r0
 800d704:	460b      	mov	r3, r1
 800d706:	4614      	mov	r4, r2
 800d708:	461d      	mov	r5, r3
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 800d70a:	2030      	movs	r0, #48	@ 0x30
 800d70c:	f000 fe3e 	bl	800e38c <SX1276Read>
 800d710:	4603      	mov	r3, r0
 800d712:	f023 03f9 	bic.w	r3, r3, #249	@ 0xf9
 800d716:	2b00      	cmp	r3, #0
 800d718:	d003      	beq.n	800d722 <SX1276GetTimeOnAir+0x82>
 800d71a:	f04f 0000 	mov.w	r0, #0
 800d71e:	4993      	ldr	r1, [pc, #588]	@ (800d96c <SX1276GetTimeOnAir+0x2cc>)
 800d720:	e003      	b.n	800d72a <SX1276GetTimeOnAir+0x8a>
 800d722:	f04f 0000 	mov.w	r0, #0
 800d726:	f04f 0100 	mov.w	r1, #0
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 800d72a:	4622      	mov	r2, r4
 800d72c:	462b      	mov	r3, r5
 800d72e:	f7f4 fb3f 	bl	8001db0 <__adddf3>
 800d732:	4602      	mov	r2, r0
 800d734:	460b      	mov	r3, r1
 800d736:	4614      	mov	r4, r2
 800d738:	461d      	mov	r5, r3
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 800d73a:	79bb      	ldrb	r3, [r7, #6]
 800d73c:	4618      	mov	r0, r3
 800d73e:	f7f4 fc83 	bl	8002048 <__aeabi_i2d>
 800d742:	4602      	mov	r2, r0
 800d744:	460b      	mov	r3, r1
 800d746:	4620      	mov	r0, r4
 800d748:	4629      	mov	r1, r5
 800d74a:	f7f4 fb31 	bl	8001db0 <__adddf3>
 800d74e:	4602      	mov	r2, r0
 800d750:	460b      	mov	r3, r1
 800d752:	4614      	mov	r4, r2
 800d754:	461d      	mov	r5, r3
                                     pktLen +
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 800d756:	4b84      	ldr	r3, [pc, #528]	@ (800d968 <SX1276GetTimeOnAir+0x2c8>)
 800d758:	f893 3134 	ldrb.w	r3, [r3, #308]	@ 0x134
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d004      	beq.n	800d76a <SX1276GetTimeOnAir+0xca>
 800d760:	f04f 0000 	mov.w	r0, #0
 800d764:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800d768:	e003      	b.n	800d772 <SX1276GetTimeOnAir+0xd2>
 800d76a:	f04f 0000 	mov.w	r0, #0
 800d76e:	f04f 0100 	mov.w	r1, #0
                                     pktLen +
 800d772:	4622      	mov	r2, r4
 800d774:	462b      	mov	r3, r5
 800d776:	f7f4 fb1b 	bl	8001db0 <__adddf3>
 800d77a:	4602      	mov	r2, r0
 800d77c:	460b      	mov	r3, r1
 800d77e:	4610      	mov	r0, r2
 800d780:	4619      	mov	r1, r3
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 800d782:	f04f 0200 	mov.w	r2, #0
 800d786:	4b7a      	ldr	r3, [pc, #488]	@ (800d970 <SX1276GetTimeOnAir+0x2d0>)
 800d788:	f7f4 fcc8 	bl	800211c <__aeabi_dmul>
 800d78c:	4602      	mov	r2, r0
 800d78e:	460b      	mov	r3, r1
 800d790:	4614      	mov	r4, r2
 800d792:	461d      	mov	r5, r3
                                     SX1276.Settings.Fsk.Datarate ) * /* 1e6 */  1e3  );     // FIX by PK
 800d794:	4b74      	ldr	r3, [pc, #464]	@ (800d968 <SX1276GetTimeOnAir+0x2c8>)
 800d796:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 800d79a:	4618      	mov	r0, r3
 800d79c:	f7f4 fc44 	bl	8002028 <__aeabi_ui2d>
 800d7a0:	4602      	mov	r2, r0
 800d7a2:	460b      	mov	r3, r1
 800d7a4:	4620      	mov	r0, r4
 800d7a6:	4629      	mov	r1, r5
 800d7a8:	f7f4 fde2 	bl	8002370 <__aeabi_ddiv>
 800d7ac:	4602      	mov	r2, r0
 800d7ae:	460b      	mov	r3, r1
 800d7b0:	4610      	mov	r0, r2
 800d7b2:	4619      	mov	r1, r3
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 800d7b4:	f04f 0200 	mov.w	r2, #0
 800d7b8:	4b6e      	ldr	r3, [pc, #440]	@ (800d974 <SX1276GetTimeOnAir+0x2d4>)
 800d7ba:	f7f4 fcaf 	bl	800211c <__aeabi_dmul>
 800d7be:	4602      	mov	r2, r0
 800d7c0:	460b      	mov	r3, r1
 800d7c2:	ec43 2b17 	vmov	d7, r2, r3
 800d7c6:	eeb0 0a47 	vmov.f32	s0, s14
 800d7ca:	eef0 0a67 	vmov.f32	s1, s15
 800d7ce:	f006 f847 	bl	8013860 <round>
 800d7d2:	ec53 2b10 	vmov	r2, r3, d0
 800d7d6:	4610      	mov	r0, r2
 800d7d8:	4619      	mov	r1, r3
 800d7da:	f7f4 ff77 	bl	80026cc <__aeabi_d2uiz>
 800d7de:	4603      	mov	r3, r0
 800d7e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
        }
        break;
 800d7e2:	e10f      	b.n	800da04 <SX1276GetTimeOnAir+0x364>
    case MODEM_LORA:
        {
            double bw = 0.0;
 800d7e4:	f04f 0200 	mov.w	r2, #0
 800d7e8:	f04f 0300 	mov.w	r3, #0
 800d7ec:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
            // REMARK: When using LoRa modem only bandwidths 125, 250 and 500 kHz are supported
            switch( SX1276.Settings.LoRa.Bandwidth )
 800d7f0:	4b5d      	ldr	r3, [pc, #372]	@ (800d968 <SX1276GetTimeOnAir+0x2c8>)
 800d7f2:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800d7f6:	2b09      	cmp	r3, #9
 800d7f8:	d012      	beq.n	800d820 <SX1276GetTimeOnAir+0x180>
 800d7fa:	2b09      	cmp	r3, #9
 800d7fc:	d816      	bhi.n	800d82c <SX1276GetTimeOnAir+0x18c>
 800d7fe:	2b07      	cmp	r3, #7
 800d800:	d002      	beq.n	800d808 <SX1276GetTimeOnAir+0x168>
 800d802:	2b08      	cmp	r3, #8
 800d804:	d006      	beq.n	800d814 <SX1276GetTimeOnAir+0x174>
 800d806:	e011      	b.n	800d82c <SX1276GetTimeOnAir+0x18c>
            //    break;
            //case 6: // 62.5 kHz
            //    bw = 625e2;
            //    break;
            case 7: // 125 kHz
                bw = 125e3;
 800d808:	a351      	add	r3, pc, #324	@ (adr r3, 800d950 <SX1276GetTimeOnAir+0x2b0>)
 800d80a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d80e:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
                break;
 800d812:	e00b      	b.n	800d82c <SX1276GetTimeOnAir+0x18c>
            case 8: // 250 kHz
                bw = 250e3;
 800d814:	a350      	add	r3, pc, #320	@ (adr r3, 800d958 <SX1276GetTimeOnAir+0x2b8>)
 800d816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d81a:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
                break;
 800d81e:	e005      	b.n	800d82c <SX1276GetTimeOnAir+0x18c>
            case 9: // 500 kHz
                bw = 500e3;
 800d820:	a34f      	add	r3, pc, #316	@ (adr r3, 800d960 <SX1276GetTimeOnAir+0x2c0>)
 800d822:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d826:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
                break;
 800d82a:	bf00      	nop
            }

            // Symbol rate : time for one symbol (secs)
            double rs = bw / ( 1 << SX1276.Settings.LoRa.Datarate );
 800d82c:	4b4e      	ldr	r3, [pc, #312]	@ (800d968 <SX1276GetTimeOnAir+0x2c8>)
 800d82e:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800d832:	2201      	movs	r2, #1
 800d834:	fa02 f303 	lsl.w	r3, r2, r3
 800d838:	4618      	mov	r0, r3
 800d83a:	f7f4 fc05 	bl	8002048 <__aeabi_i2d>
 800d83e:	4602      	mov	r2, r0
 800d840:	460b      	mov	r3, r1
 800d842:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800d846:	f7f4 fd93 	bl	8002370 <__aeabi_ddiv>
 800d84a:	4602      	mov	r2, r0
 800d84c:	460b      	mov	r3, r1
 800d84e:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
            double ts = 1 / rs;
 800d852:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800d856:	f04f 0000 	mov.w	r0, #0
 800d85a:	4944      	ldr	r1, [pc, #272]	@ (800d96c <SX1276GetTimeOnAir+0x2cc>)
 800d85c:	f7f4 fd88 	bl	8002370 <__aeabi_ddiv>
 800d860:	4602      	mov	r2, r0
 800d862:	460b      	mov	r3, r1
 800d864:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
            // time of preamble
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
 800d868:	4b3f      	ldr	r3, [pc, #252]	@ (800d968 <SX1276GetTimeOnAir+0x2c8>)
 800d86a:	f8b3 315a 	ldrh.w	r3, [r3, #346]	@ 0x15a
 800d86e:	4618      	mov	r0, r3
 800d870:	f7f4 fbea 	bl	8002048 <__aeabi_i2d>
 800d874:	f04f 0200 	mov.w	r2, #0
 800d878:	4b3f      	ldr	r3, [pc, #252]	@ (800d978 <SX1276GetTimeOnAir+0x2d8>)
 800d87a:	f7f4 fa99 	bl	8001db0 <__adddf3>
 800d87e:	4602      	mov	r2, r0
 800d880:	460b      	mov	r3, r1
 800d882:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800d886:	f7f4 fc49 	bl	800211c <__aeabi_dmul>
 800d88a:	4602      	mov	r2, r0
 800d88c:	460b      	mov	r3, r1
 800d88e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
            // Symbol length of payload and time
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 800d892:	79bb      	ldrb	r3, [r7, #6]
 800d894:	00db      	lsls	r3, r3, #3
 800d896:	461a      	mov	r2, r3
 800d898:	4b33      	ldr	r3, [pc, #204]	@ (800d968 <SX1276GetTimeOnAir+0x2c8>)
 800d89a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800d89e:	009b      	lsls	r3, r3, #2
 800d8a0:	1ad3      	subs	r3, r2, r3
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 800d8a2:	4a31      	ldr	r2, [pc, #196]	@ (800d968 <SX1276GetTimeOnAir+0x2c8>)
 800d8a4:	f892 215e 	ldrb.w	r2, [r2, #350]	@ 0x15e
 800d8a8:	0112      	lsls	r2, r2, #4
 800d8aa:	441a      	add	r2, r3
                                 ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
 800d8ac:	4b2e      	ldr	r3, [pc, #184]	@ (800d968 <SX1276GetTimeOnAir+0x2c8>)
 800d8ae:	f893 315c 	ldrb.w	r3, [r3, #348]	@ 0x15c
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d001      	beq.n	800d8ba <SX1276GetTimeOnAir+0x21a>
 800d8b6:	2314      	movs	r3, #20
 800d8b8:	e000      	b.n	800d8bc <SX1276GetTimeOnAir+0x21c>
 800d8ba:	2300      	movs	r3, #0
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 800d8bc:	1ad3      	subs	r3, r2, r3
 800d8be:	331c      	adds	r3, #28
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 800d8c0:	4618      	mov	r0, r3
 800d8c2:	f7f4 fbb1 	bl	8002028 <__aeabi_ui2d>
 800d8c6:	4604      	mov	r4, r0
 800d8c8:	460d      	mov	r5, r1
                                 ( double )( 4 * SX1276.Settings.LoRa.Datarate -
 800d8ca:	4b27      	ldr	r3, [pc, #156]	@ (800d968 <SX1276GetTimeOnAir+0x2c8>)
 800d8cc:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800d8d0:	009a      	lsls	r2, r3, #2
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) *
 800d8d2:	4b25      	ldr	r3, [pc, #148]	@ (800d968 <SX1276GetTimeOnAir+0x2c8>)
 800d8d4:	f893 3158 	ldrb.w	r3, [r3, #344]	@ 0x158
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d001      	beq.n	800d8e0 <SX1276GetTimeOnAir+0x240>
 800d8dc:	2302      	movs	r3, #2
 800d8de:	e000      	b.n	800d8e2 <SX1276GetTimeOnAir+0x242>
 800d8e0:	2300      	movs	r3, #0
                                 ( double )( 4 * SX1276.Settings.LoRa.Datarate -
 800d8e2:	1ad3      	subs	r3, r2, r3
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	f7f4 fb9f 	bl	8002028 <__aeabi_ui2d>
 800d8ea:	4602      	mov	r2, r0
 800d8ec:	460b      	mov	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 800d8ee:	4620      	mov	r0, r4
 800d8f0:	4629      	mov	r1, r5
 800d8f2:	f7f4 fd3d 	bl	8002370 <__aeabi_ddiv>
 800d8f6:	4602      	mov	r2, r0
 800d8f8:	460b      	mov	r3, r1
 800d8fa:	ec43 2b17 	vmov	d7, r2, r3
 800d8fe:	eeb0 0a47 	vmov.f32	s0, s14
 800d902:	eef0 0a67 	vmov.f32	s1, s15
 800d906:	f005 feaf 	bl	8013668 <ceil>
 800d90a:	ec55 4b10 	vmov	r4, r5, d0
                                 ( SX1276.Settings.LoRa.Coderate + 4 );
 800d90e:	4b16      	ldr	r3, [pc, #88]	@ (800d968 <SX1276GetTimeOnAir+0x2c8>)
 800d910:	f893 3159 	ldrb.w	r3, [r3, #345]	@ 0x159
 800d914:	3304      	adds	r3, #4
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) *
 800d916:	4618      	mov	r0, r3
 800d918:	f7f4 fb96 	bl	8002048 <__aeabi_i2d>
 800d91c:	4602      	mov	r2, r0
 800d91e:	460b      	mov	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 800d920:	4620      	mov	r0, r4
 800d922:	4629      	mov	r1, r5
 800d924:	f7f4 fbfa 	bl	800211c <__aeabi_dmul>
 800d928:	4602      	mov	r2, r0
 800d92a:	460b      	mov	r3, r1
 800d92c:	e9c7 2308 	strd	r2, r3, [r7, #32]
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 800d930:	f04f 0200 	mov.w	r2, #0
 800d934:	f04f 0300 	mov.w	r3, #0
 800d938:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d93c:	f7f4 fe7e 	bl	800263c <__aeabi_dcmpgt>
 800d940:	4603      	mov	r3, r0
 800d942:	2b00      	cmp	r3, #0
 800d944:	d01a      	beq.n	800d97c <SX1276GetTimeOnAir+0x2dc>
 800d946:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d94a:	e01b      	b.n	800d984 <SX1276GetTimeOnAir+0x2e4>
 800d94c:	f3af 8000 	nop.w
 800d950:	00000000 	.word	0x00000000
 800d954:	40fe8480 	.word	0x40fe8480
 800d958:	00000000 	.word	0x00000000
 800d95c:	410e8480 	.word	0x410e8480
 800d960:	00000000 	.word	0x00000000
 800d964:	411e8480 	.word	0x411e8480
 800d968:	200005f4 	.word	0x200005f4
 800d96c:	3ff00000 	.word	0x3ff00000
 800d970:	40200000 	.word	0x40200000
 800d974:	408f4000 	.word	0x408f4000
 800d978:	40110000 	.word	0x40110000
 800d97c:	f04f 0000 	mov.w	r0, #0
 800d980:	f04f 0100 	mov.w	r1, #0
 800d984:	f04f 0200 	mov.w	r2, #0
 800d988:	4b23      	ldr	r3, [pc, #140]	@ (800da18 <SX1276GetTimeOnAir+0x378>)
 800d98a:	f7f4 fa11 	bl	8001db0 <__adddf3>
 800d98e:	4602      	mov	r2, r0
 800d990:	460b      	mov	r3, r1
 800d992:	e9c7 2306 	strd	r2, r3, [r7, #24]
            double tPayload = nPayload * ts;
 800d996:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800d99a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800d99e:	f7f4 fbbd 	bl	800211c <__aeabi_dmul>
 800d9a2:	4602      	mov	r2, r0
 800d9a4:	460b      	mov	r3, r1
 800d9a6:	e9c7 2304 	strd	r2, r3, [r7, #16]
            // Time on air
            double tOnAir = tPreamble + tPayload;
 800d9aa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d9ae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800d9b2:	f7f4 f9fd 	bl	8001db0 <__adddf3>
 800d9b6:	4602      	mov	r2, r0
 800d9b8:	460b      	mov	r3, r1
 800d9ba:	e9c7 2302 	strd	r2, r3, [r7, #8]
            // return us secs
            airTime = floor( tOnAir * 1e3 + 0.999 );
 800d9be:	f04f 0200 	mov.w	r2, #0
 800d9c2:	4b16      	ldr	r3, [pc, #88]	@ (800da1c <SX1276GetTimeOnAir+0x37c>)
 800d9c4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d9c8:	f7f4 fba8 	bl	800211c <__aeabi_dmul>
 800d9cc:	4602      	mov	r2, r0
 800d9ce:	460b      	mov	r3, r1
 800d9d0:	4610      	mov	r0, r2
 800d9d2:	4619      	mov	r1, r3
 800d9d4:	a30e      	add	r3, pc, #56	@ (adr r3, 800da10 <SX1276GetTimeOnAir+0x370>)
 800d9d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9da:	f7f4 f9e9 	bl	8001db0 <__adddf3>
 800d9de:	4602      	mov	r2, r0
 800d9e0:	460b      	mov	r3, r1
 800d9e2:	ec43 2b17 	vmov	d7, r2, r3
 800d9e6:	eeb0 0a47 	vmov.f32	s0, s14
 800d9ea:	eef0 0a67 	vmov.f32	s1, s15
 800d9ee:	f005 feb7 	bl	8013760 <floor>
 800d9f2:	ec53 2b10 	vmov	r2, r3, d0
 800d9f6:	4610      	mov	r0, r2
 800d9f8:	4619      	mov	r1, r3
 800d9fa:	f7f4 fe67 	bl	80026cc <__aeabi_d2uiz>
 800d9fe:	4603      	mov	r3, r0
 800da00:	64fb      	str	r3, [r7, #76]	@ 0x4c
        }
        break;
 800da02:	bf00      	nop
    }
    return airTime;
 800da04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800da06:	4618      	mov	r0, r3
 800da08:	3750      	adds	r7, #80	@ 0x50
 800da0a:	46bd      	mov	sp, r7
 800da0c:	bdb0      	pop	{r4, r5, r7, pc}
 800da0e:	bf00      	nop
 800da10:	d916872b 	.word	0xd916872b
 800da14:	3feff7ce 	.word	0x3feff7ce
 800da18:	40200000 	.word	0x40200000
 800da1c:	408f4000 	.word	0x408f4000

0800da20 <SX1276Send>:

void SX1276Send( uint8_t *buffer, uint8_t size )
{
 800da20:	b580      	push	{r7, lr}
 800da22:	b084      	sub	sp, #16
 800da24:	af00      	add	r7, sp, #0
 800da26:	6078      	str	r0, [r7, #4]
 800da28:	460b      	mov	r3, r1
 800da2a:	70fb      	strb	r3, [r7, #3]
    uint32_t txTimeout = 0;
 800da2c:	2300      	movs	r3, #0
 800da2e:	60fb      	str	r3, [r7, #12]

    switch( SX1276.Settings.Modem )
 800da30:	4b53      	ldr	r3, [pc, #332]	@ (800db80 <SX1276Send+0x160>)
 800da32:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 800da36:	2b00      	cmp	r3, #0
 800da38:	d002      	beq.n	800da40 <SX1276Send+0x20>
 800da3a:	2b01      	cmp	r3, #1
 800da3c:	d048      	beq.n	800dad0 <SX1276Send+0xb0>
 800da3e:	e098      	b.n	800db72 <SX1276Send+0x152>
    {
    case MODEM_FSK:
        {
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800da40:	4b4f      	ldr	r3, [pc, #316]	@ (800db80 <SX1276Send+0x160>)
 800da42:	2200      	movs	r2, #0
 800da44:	f8a3 2148 	strh.w	r2, [r3, #328]	@ 0x148
            SX1276.Settings.FskPacketHandler.Size = size;
 800da48:	78fb      	ldrb	r3, [r7, #3]
 800da4a:	461a      	mov	r2, r3
 800da4c:	4b4c      	ldr	r3, [pc, #304]	@ (800db80 <SX1276Send+0x160>)
 800da4e:	f8a3 2146 	strh.w	r2, [r3, #326]	@ 0x146

            if( SX1276.Settings.Fsk.FixLen == false )
 800da52:	4b4b      	ldr	r3, [pc, #300]	@ (800db80 <SX1276Send+0x160>)
 800da54:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 800da58:	f083 0301 	eor.w	r3, r3, #1
 800da5c:	b2db      	uxtb	r3, r3
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d005      	beq.n	800da6e <SX1276Send+0x4e>
            {
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
 800da62:	1cfb      	adds	r3, r7, #3
 800da64:	2101      	movs	r1, #1
 800da66:	4618      	mov	r0, r3
 800da68:	f000 fd08 	bl	800e47c <SX1276WriteFifo>
 800da6c:	e004      	b.n	800da78 <SX1276Send+0x58>
            }
            else
            {
                SX1276Write( REG_PAYLOADLENGTH, size );
 800da6e:	78fb      	ldrb	r3, [r7, #3]
 800da70:	4619      	mov	r1, r3
 800da72:	2032      	movs	r0, #50	@ 0x32
 800da74:	f000 fc78 	bl	800e368 <SX1276Write>
            }

            if( ( size > 0 ) && ( size <= 64 ) )
 800da78:	78fb      	ldrb	r3, [r7, #3]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d007      	beq.n	800da8e <SX1276Send+0x6e>
 800da7e:	78fb      	ldrb	r3, [r7, #3]
 800da80:	2b40      	cmp	r3, #64	@ 0x40
 800da82:	d804      	bhi.n	800da8e <SX1276Send+0x6e>
            {
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 800da84:	78fa      	ldrb	r2, [r7, #3]
 800da86:	4b3e      	ldr	r3, [pc, #248]	@ (800db80 <SX1276Send+0x160>)
 800da88:	f883 214b 	strb.w	r2, [r3, #331]	@ 0x14b
 800da8c:	e009      	b.n	800daa2 <SX1276Send+0x82>
            }
            else
            {
                memcpy1( RxTxBuffer, buffer, size );
 800da8e:	78fb      	ldrb	r3, [r7, #3]
 800da90:	461a      	mov	r2, r3
 800da92:	6879      	ldr	r1, [r7, #4]
 800da94:	483b      	ldr	r0, [pc, #236]	@ (800db84 <SX1276Send+0x164>)
 800da96:	f7ff f82f 	bl	800caf8 <memcpy1>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 800da9a:	4b39      	ldr	r3, [pc, #228]	@ (800db80 <SX1276Send+0x160>)
 800da9c:	2220      	movs	r2, #32
 800da9e:	f883 214b 	strb.w	r2, [r3, #331]	@ 0x14b
            }

            // Write payload buffer
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 800daa2:	4b37      	ldr	r3, [pc, #220]	@ (800db80 <SX1276Send+0x160>)
 800daa4:	f893 314b 	ldrb.w	r3, [r3, #331]	@ 0x14b
 800daa8:	4619      	mov	r1, r3
 800daaa:	6878      	ldr	r0, [r7, #4]
 800daac:	f000 fce6 	bl	800e47c <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 800dab0:	4b33      	ldr	r3, [pc, #204]	@ (800db80 <SX1276Send+0x160>)
 800dab2:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 800dab6:	4a32      	ldr	r2, [pc, #200]	@ (800db80 <SX1276Send+0x160>)
 800dab8:	f892 214b 	ldrb.w	r2, [r2, #331]	@ 0x14b
 800dabc:	4413      	add	r3, r2
 800dabe:	b29a      	uxth	r2, r3
 800dac0:	4b2f      	ldr	r3, [pc, #188]	@ (800db80 <SX1276Send+0x160>)
 800dac2:	f8a3 2148 	strh.w	r2, [r3, #328]	@ 0x148
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 800dac6:	4b2e      	ldr	r3, [pc, #184]	@ (800db80 <SX1276Send+0x160>)
 800dac8:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800dacc:	60fb      	str	r3, [r7, #12]
        }
        break;
 800dace:	e050      	b.n	800db72 <SX1276Send+0x152>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 800dad0:	4b2b      	ldr	r3, [pc, #172]	@ (800db80 <SX1276Send+0x160>)
 800dad2:	f893 3161 	ldrb.w	r3, [r3, #353]	@ 0x161
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d00f      	beq.n	800dafa <SX1276Send+0xda>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 800dada:	2033      	movs	r0, #51	@ 0x33
 800dadc:	f000 fc56 	bl	800e38c <SX1276Read>
 800dae0:	4603      	mov	r3, r0
 800dae2:	f023 0341 	bic.w	r3, r3, #65	@ 0x41
 800dae6:	b2db      	uxtb	r3, r3
 800dae8:	4619      	mov	r1, r3
 800daea:	2033      	movs	r0, #51	@ 0x33
 800daec:	f000 fc3c 	bl	800e368 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 800daf0:	2119      	movs	r1, #25
 800daf2:	203b      	movs	r0, #59	@ 0x3b
 800daf4:	f000 fc38 	bl	800e368 <SX1276Write>
 800daf8:	e013      	b.n	800db22 <SX1276Send+0x102>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 800dafa:	2033      	movs	r0, #51	@ 0x33
 800dafc:	f000 fc46 	bl	800e38c <SX1276Read>
 800db00:	4603      	mov	r3, r0
 800db02:	b25b      	sxtb	r3, r3
 800db04:	f023 0341 	bic.w	r3, r3, #65	@ 0x41
 800db08:	b25b      	sxtb	r3, r3
 800db0a:	f043 0301 	orr.w	r3, r3, #1
 800db0e:	b25b      	sxtb	r3, r3
 800db10:	b2db      	uxtb	r3, r3
 800db12:	4619      	mov	r1, r3
 800db14:	2033      	movs	r0, #51	@ 0x33
 800db16:	f000 fc27 	bl	800e368 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 800db1a:	211d      	movs	r1, #29
 800db1c:	203b      	movs	r0, #59	@ 0x3b
 800db1e:	f000 fc23 	bl	800e368 <SX1276Write>
            }

            SX1276.Settings.LoRaPacketHandler.Size = size;
 800db22:	78fa      	ldrb	r2, [r7, #3]
 800db24:	4b16      	ldr	r3, [pc, #88]	@ (800db80 <SX1276Send+0x160>)
 800db26:	f883 216c 	strb.w	r2, [r3, #364]	@ 0x16c

            // Initializes the payload size
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 800db2a:	78fb      	ldrb	r3, [r7, #3]
 800db2c:	4619      	mov	r1, r3
 800db2e:	2022      	movs	r0, #34	@ 0x22
 800db30:	f000 fc1a 	bl	800e368 <SX1276Write>

            // Full buffer used for Tx
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 800db34:	2100      	movs	r1, #0
 800db36:	200e      	movs	r0, #14
 800db38:	f000 fc16 	bl	800e368 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 800db3c:	2100      	movs	r1, #0
 800db3e:	200d      	movs	r0, #13
 800db40:	f000 fc12 	bl	800e368 <SX1276Write>

            // FIFO operations can not take place in Sleep mode
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 800db44:	2001      	movs	r0, #1
 800db46:	f000 fc21 	bl	800e38c <SX1276Read>
 800db4a:	4603      	mov	r3, r0
 800db4c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800db50:	2b00      	cmp	r3, #0
 800db52:	d104      	bne.n	800db5e <SX1276Send+0x13e>
            {
                SX1276SetStby( );
 800db54:	f000 f830 	bl	800dbb8 <SX1276SetStby>
                DelayMs( 1 );
 800db58:	2001      	movs	r0, #1
 800db5a:	f7fd fb39 	bl	800b1d0 <DelayMs>
            }
            // Write payload buffer
            SX1276WriteFifo( buffer, size );
 800db5e:	78fb      	ldrb	r3, [r7, #3]
 800db60:	4619      	mov	r1, r3
 800db62:	6878      	ldr	r0, [r7, #4]
 800db64:	f000 fc8a 	bl	800e47c <SX1276WriteFifo>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 800db68:	4b05      	ldr	r3, [pc, #20]	@ (800db80 <SX1276Send+0x160>)
 800db6a:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 800db6e:	60fb      	str	r3, [r7, #12]
        }
        break;
 800db70:	bf00      	nop
    }

    SX1276SetTx( txTimeout );
 800db72:	68f8      	ldr	r0, [r7, #12]
 800db74:	f000 fa8c 	bl	800e090 <SX1276SetTx>
}
 800db78:	bf00      	nop
 800db7a:	3710      	adds	r7, #16
 800db7c:	46bd      	mov	sp, r7
 800db7e:	bd80      	pop	{r7, pc}
 800db80:	200005f4 	.word	0x200005f4
 800db84:	200004f4 	.word	0x200004f4

0800db88 <SX1276SetSleep>:

void SX1276SetSleep( void )
{
 800db88:	b580      	push	{r7, lr}
 800db8a:	af00      	add	r7, sp, #0
    TimerStop( &RxTimeoutTimer );
 800db8c:	4807      	ldr	r0, [pc, #28]	@ (800dbac <SX1276SetSleep+0x24>)
 800db8e:	f7fe fec1 	bl	800c914 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 800db92:	4807      	ldr	r0, [pc, #28]	@ (800dbb0 <SX1276SetSleep+0x28>)
 800db94:	f7fe febe 	bl	800c914 <TimerStop>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 800db98:	2000      	movs	r0, #0
 800db9a:	f000 fb75 	bl	800e288 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 800db9e:	4b05      	ldr	r3, [pc, #20]	@ (800dbb4 <SX1276SetSleep+0x2c>)
 800dba0:	2200      	movs	r2, #0
 800dba2:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
}
 800dba6:	bf00      	nop
 800dba8:	bd80      	pop	{r7, pc}
 800dbaa:	bf00      	nop
 800dbac:	20000778 	.word	0x20000778
 800dbb0:	20000764 	.word	0x20000764
 800dbb4:	200005f4 	.word	0x200005f4

0800dbb8 <SX1276SetStby>:

void SX1276SetStby( void )
{
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	af00      	add	r7, sp, #0
    TimerStop( &RxTimeoutTimer );
 800dbbc:	4807      	ldr	r0, [pc, #28]	@ (800dbdc <SX1276SetStby+0x24>)
 800dbbe:	f7fe fea9 	bl	800c914 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 800dbc2:	4807      	ldr	r0, [pc, #28]	@ (800dbe0 <SX1276SetStby+0x28>)
 800dbc4:	f7fe fea6 	bl	800c914 <TimerStop>

    SX1276SetOpMode( RF_OPMODE_STANDBY );
 800dbc8:	2001      	movs	r0, #1
 800dbca:	f000 fb5d 	bl	800e288 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 800dbce:	4b05      	ldr	r3, [pc, #20]	@ (800dbe4 <SX1276SetStby+0x2c>)
 800dbd0:	2200      	movs	r2, #0
 800dbd2:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
}
 800dbd6:	bf00      	nop
 800dbd8:	bd80      	pop	{r7, pc}
 800dbda:	bf00      	nop
 800dbdc:	20000778 	.word	0x20000778
 800dbe0:	20000764 	.word	0x20000764
 800dbe4:	200005f4 	.word	0x200005f4

0800dbe8 <SX1276SetRx>:

void SX1276SetRx( uint32_t timeout )
{
 800dbe8:	b5b0      	push	{r4, r5, r7, lr}
 800dbea:	b084      	sub	sp, #16
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
    bool rxContinuous = false;
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	73fb      	strb	r3, [r7, #15]

    switch( SX1276.Settings.Modem )
 800dbf4:	4bc4      	ldr	r3, [pc, #784]	@ (800df08 <SX1276SetRx+0x320>)
 800dbf6:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d002      	beq.n	800dc04 <SX1276SetRx+0x1c>
 800dbfe:	2b01      	cmp	r3, #1
 800dc00:	d03e      	beq.n	800dc80 <SX1276SetRx+0x98>
 800dc02:	e19b      	b.n	800df3c <SX1276SetRx+0x354>
    {
    case MODEM_FSK:
        {
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 800dc04:	4bc0      	ldr	r3, [pc, #768]	@ (800df08 <SX1276SetRx+0x320>)
 800dc06:	f893 3136 	ldrb.w	r3, [r3, #310]	@ 0x136
 800dc0a:	73fb      	strb	r3, [r7, #15]
            // DIO1=FifoLevel
            // DIO2=SyncAddr
            // DIO3=FifoEmpty
            // DIO4=Preamble
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800dc0c:	2040      	movs	r0, #64	@ 0x40
 800dc0e:	f000 fbbd 	bl	800e38c <SX1276Read>
 800dc12:	4603      	mov	r3, r0
 800dc14:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
                                                                            RF_DIOMAPPING1_DIO0_00 |
 800dc16:	f003 0303 	and.w	r3, r3, #3
 800dc1a:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_00 |
 800dc1c:	f043 030c 	orr.w	r3, r3, #12
 800dc20:	b25b      	sxtb	r3, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800dc22:	b2db      	uxtb	r3, r3
 800dc24:	4619      	mov	r1, r3
 800dc26:	2040      	movs	r0, #64	@ 0x40
 800dc28:	f000 fb9e 	bl	800e368 <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO2_11 );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 800dc2c:	2041      	movs	r0, #65	@ 0x41
 800dc2e:	f000 fbad 	bl	800e38c <SX1276Read>
 800dc32:	4603      	mov	r3, r0
 800dc34:	f063 033e 	orn	r3, r3, #62	@ 0x3e
 800dc38:	b2db      	uxtb	r3, r3
 800dc3a:	4619      	mov	r1, r3
 800dc3c:	2041      	movs	r0, #65	@ 0x41
 800dc3e:	f000 fb93 	bl	800e368 <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) |
                                                                            RF_DIOMAPPING2_DIO4_11 |
                                                                            RF_DIOMAPPING2_MAP_PREAMBLEDETECT );

            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 800dc42:	2035      	movs	r0, #53	@ 0x35
 800dc44:	f000 fba2 	bl	800e38c <SX1276Read>
 800dc48:	4603      	mov	r3, r0
 800dc4a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800dc4e:	b2da      	uxtb	r2, r3
 800dc50:	4bad      	ldr	r3, [pc, #692]	@ (800df08 <SX1276SetRx+0x320>)
 800dc52:	f883 214a 	strb.w	r2, [r3, #330]	@ 0x14a

            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 800dc56:	211e      	movs	r1, #30
 800dc58:	200d      	movs	r0, #13
 800dc5a:	f000 fb85 	bl	800e368 <SX1276Write>

            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800dc5e:	4baa      	ldr	r3, [pc, #680]	@ (800df08 <SX1276SetRx+0x320>)
 800dc60:	2200      	movs	r2, #0
 800dc62:	f883 213c 	strb.w	r2, [r3, #316]	@ 0x13c
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 800dc66:	4ba8      	ldr	r3, [pc, #672]	@ (800df08 <SX1276SetRx+0x320>)
 800dc68:	2200      	movs	r2, #0
 800dc6a:	f883 213d 	strb.w	r2, [r3, #317]	@ 0x13d
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800dc6e:	4ba6      	ldr	r3, [pc, #664]	@ (800df08 <SX1276SetRx+0x320>)
 800dc70:	2200      	movs	r2, #0
 800dc72:	f8a3 2148 	strh.w	r2, [r3, #328]	@ 0x148
            SX1276.Settings.FskPacketHandler.Size = 0;
 800dc76:	4ba4      	ldr	r3, [pc, #656]	@ (800df08 <SX1276SetRx+0x320>)
 800dc78:	2200      	movs	r2, #0
 800dc7a:	f8a3 2146 	strh.w	r2, [r3, #326]	@ 0x146
        }
        break;
 800dc7e:	e15d      	b.n	800df3c <SX1276SetRx+0x354>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 800dc80:	4ba1      	ldr	r3, [pc, #644]	@ (800df08 <SX1276SetRx+0x320>)
 800dc82:	f893 3161 	ldrb.w	r3, [r3, #353]	@ 0x161
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d00f      	beq.n	800dcaa <SX1276SetRx+0xc2>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 800dc8a:	2033      	movs	r0, #51	@ 0x33
 800dc8c:	f000 fb7e 	bl	800e38c <SX1276Read>
 800dc90:	4603      	mov	r3, r0
 800dc92:	f043 0341 	orr.w	r3, r3, #65	@ 0x41
 800dc96:	b2db      	uxtb	r3, r3
 800dc98:	4619      	mov	r1, r3
 800dc9a:	2033      	movs	r0, #51	@ 0x33
 800dc9c:	f000 fb64 	bl	800e368 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 800dca0:	2119      	movs	r1, #25
 800dca2:	203b      	movs	r0, #59	@ 0x3b
 800dca4:	f000 fb60 	bl	800e368 <SX1276Write>
 800dca8:	e013      	b.n	800dcd2 <SX1276SetRx+0xea>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 800dcaa:	2033      	movs	r0, #51	@ 0x33
 800dcac:	f000 fb6e 	bl	800e38c <SX1276Read>
 800dcb0:	4603      	mov	r3, r0
 800dcb2:	b25b      	sxtb	r3, r3
 800dcb4:	f023 0341 	bic.w	r3, r3, #65	@ 0x41
 800dcb8:	b25b      	sxtb	r3, r3
 800dcba:	f043 0301 	orr.w	r3, r3, #1
 800dcbe:	b25b      	sxtb	r3, r3
 800dcc0:	b2db      	uxtb	r3, r3
 800dcc2:	4619      	mov	r1, r3
 800dcc4:	2033      	movs	r0, #51	@ 0x33
 800dcc6:	f000 fb4f 	bl	800e368 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 800dcca:	211d      	movs	r1, #29
 800dccc:	203b      	movs	r0, #59	@ 0x3b
 800dcce:	f000 fb4b 	bl	800e368 <SX1276Write>
            }

            // ERRATA 2.3 - Receiver Spurious Reception of a LoRa Signal
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 800dcd2:	4b8d      	ldr	r3, [pc, #564]	@ (800df08 <SX1276SetRx+0x320>)
 800dcd4:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800dcd8:	2b08      	cmp	r3, #8
 800dcda:	f200 80d6 	bhi.w	800de8a <SX1276SetRx+0x2a2>
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 800dcde:	2031      	movs	r0, #49	@ 0x31
 800dce0:	f000 fb54 	bl	800e38c <SX1276Read>
 800dce4:	4603      	mov	r3, r0
 800dce6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dcea:	b2db      	uxtb	r3, r3
 800dcec:	4619      	mov	r1, r3
 800dcee:	2031      	movs	r0, #49	@ 0x31
 800dcf0:	f000 fb3a 	bl	800e368 <SX1276Write>
                SX1276Write( REG_LR_TEST30, 0x00 );
 800dcf4:	2100      	movs	r1, #0
 800dcf6:	2030      	movs	r0, #48	@ 0x30
 800dcf8:	f000 fb36 	bl	800e368 <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 800dcfc:	4b82      	ldr	r3, [pc, #520]	@ (800df08 <SX1276SetRx+0x320>)
 800dcfe:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800dd02:	2b08      	cmp	r3, #8
 800dd04:	f200 80cc 	bhi.w	800dea0 <SX1276SetRx+0x2b8>
 800dd08:	a201      	add	r2, pc, #4	@ (adr r2, 800dd10 <SX1276SetRx+0x128>)
 800dd0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd0e:	bf00      	nop
 800dd10:	0800dd35 	.word	0x0800dd35
 800dd14:	0800dd69 	.word	0x0800dd69
 800dd18:	0800dd9d 	.word	0x0800dd9d
 800dd1c:	0800ddd1 	.word	0x0800ddd1
 800dd20:	0800de05 	.word	0x0800de05
 800dd24:	0800de39 	.word	0x0800de39
 800dd28:	0800de6d 	.word	0x0800de6d
 800dd2c:	0800de77 	.word	0x0800de77
 800dd30:	0800de81 	.word	0x0800de81
                {
                case 0: // 7.8 kHz
                    SX1276Write( REG_LR_TEST2F, 0x48 );
 800dd34:	2148      	movs	r1, #72	@ 0x48
 800dd36:	202f      	movs	r0, #47	@ 0x2f
 800dd38:	f000 fb16 	bl	800e368 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7.81e3 );
 800dd3c:	4b72      	ldr	r3, [pc, #456]	@ (800df08 <SX1276SetRx+0x320>)
 800dd3e:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800dd42:	4618      	mov	r0, r3
 800dd44:	f7f4 f970 	bl	8002028 <__aeabi_ui2d>
 800dd48:	a363      	add	r3, pc, #396	@ (adr r3, 800ded8 <SX1276SetRx+0x2f0>)
 800dd4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd4e:	f7f4 f82f 	bl	8001db0 <__adddf3>
 800dd52:	4602      	mov	r2, r0
 800dd54:	460b      	mov	r3, r1
 800dd56:	4610      	mov	r0, r2
 800dd58:	4619      	mov	r1, r3
 800dd5a:	f7f4 fcb7 	bl	80026cc <__aeabi_d2uiz>
 800dd5e:	4603      	mov	r3, r0
 800dd60:	4618      	mov	r0, r3
 800dd62:	f7fe ff51 	bl	800cc08 <SX1276SetChannel>
                    break;
 800dd66:	e09b      	b.n	800dea0 <SX1276SetRx+0x2b8>
                case 1: // 10.4 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 800dd68:	2144      	movs	r1, #68	@ 0x44
 800dd6a:	202f      	movs	r0, #47	@ 0x2f
 800dd6c:	f000 fafc 	bl	800e368 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10.42e3 );
 800dd70:	4b65      	ldr	r3, [pc, #404]	@ (800df08 <SX1276SetRx+0x320>)
 800dd72:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800dd76:	4618      	mov	r0, r3
 800dd78:	f7f4 f956 	bl	8002028 <__aeabi_ui2d>
 800dd7c:	a358      	add	r3, pc, #352	@ (adr r3, 800dee0 <SX1276SetRx+0x2f8>)
 800dd7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd82:	f7f4 f815 	bl	8001db0 <__adddf3>
 800dd86:	4602      	mov	r2, r0
 800dd88:	460b      	mov	r3, r1
 800dd8a:	4610      	mov	r0, r2
 800dd8c:	4619      	mov	r1, r3
 800dd8e:	f7f4 fc9d 	bl	80026cc <__aeabi_d2uiz>
 800dd92:	4603      	mov	r3, r0
 800dd94:	4618      	mov	r0, r3
 800dd96:	f7fe ff37 	bl	800cc08 <SX1276SetChannel>
                    break;
 800dd9a:	e081      	b.n	800dea0 <SX1276SetRx+0x2b8>
                case 2: // 15.6 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 800dd9c:	2144      	movs	r1, #68	@ 0x44
 800dd9e:	202f      	movs	r0, #47	@ 0x2f
 800dda0:	f000 fae2 	bl	800e368 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15.62e3 );
 800dda4:	4b58      	ldr	r3, [pc, #352]	@ (800df08 <SX1276SetRx+0x320>)
 800dda6:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800ddaa:	4618      	mov	r0, r3
 800ddac:	f7f4 f93c 	bl	8002028 <__aeabi_ui2d>
 800ddb0:	a34d      	add	r3, pc, #308	@ (adr r3, 800dee8 <SX1276SetRx+0x300>)
 800ddb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddb6:	f7f3 fffb 	bl	8001db0 <__adddf3>
 800ddba:	4602      	mov	r2, r0
 800ddbc:	460b      	mov	r3, r1
 800ddbe:	4610      	mov	r0, r2
 800ddc0:	4619      	mov	r1, r3
 800ddc2:	f7f4 fc83 	bl	80026cc <__aeabi_d2uiz>
 800ddc6:	4603      	mov	r3, r0
 800ddc8:	4618      	mov	r0, r3
 800ddca:	f7fe ff1d 	bl	800cc08 <SX1276SetChannel>
                    break;
 800ddce:	e067      	b.n	800dea0 <SX1276SetRx+0x2b8>
                case 3: // 20.8 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 800ddd0:	2144      	movs	r1, #68	@ 0x44
 800ddd2:	202f      	movs	r0, #47	@ 0x2f
 800ddd4:	f000 fac8 	bl	800e368 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20.83e3 );
 800ddd8:	4b4b      	ldr	r3, [pc, #300]	@ (800df08 <SX1276SetRx+0x320>)
 800ddda:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800ddde:	4618      	mov	r0, r3
 800dde0:	f7f4 f922 	bl	8002028 <__aeabi_ui2d>
 800dde4:	a342      	add	r3, pc, #264	@ (adr r3, 800def0 <SX1276SetRx+0x308>)
 800dde6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddea:	f7f3 ffe1 	bl	8001db0 <__adddf3>
 800ddee:	4602      	mov	r2, r0
 800ddf0:	460b      	mov	r3, r1
 800ddf2:	4610      	mov	r0, r2
 800ddf4:	4619      	mov	r1, r3
 800ddf6:	f7f4 fc69 	bl	80026cc <__aeabi_d2uiz>
 800ddfa:	4603      	mov	r3, r0
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	f7fe ff03 	bl	800cc08 <SX1276SetChannel>
                    break;
 800de02:	e04d      	b.n	800dea0 <SX1276SetRx+0x2b8>
                case 4: // 31.2 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 800de04:	2144      	movs	r1, #68	@ 0x44
 800de06:	202f      	movs	r0, #47	@ 0x2f
 800de08:	f000 faae 	bl	800e368 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31.25e3 );
 800de0c:	4b3e      	ldr	r3, [pc, #248]	@ (800df08 <SX1276SetRx+0x320>)
 800de0e:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800de12:	4618      	mov	r0, r3
 800de14:	f7f4 f908 	bl	8002028 <__aeabi_ui2d>
 800de18:	a337      	add	r3, pc, #220	@ (adr r3, 800def8 <SX1276SetRx+0x310>)
 800de1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de1e:	f7f3 ffc7 	bl	8001db0 <__adddf3>
 800de22:	4602      	mov	r2, r0
 800de24:	460b      	mov	r3, r1
 800de26:	4610      	mov	r0, r2
 800de28:	4619      	mov	r1, r3
 800de2a:	f7f4 fc4f 	bl	80026cc <__aeabi_d2uiz>
 800de2e:	4603      	mov	r3, r0
 800de30:	4618      	mov	r0, r3
 800de32:	f7fe fee9 	bl	800cc08 <SX1276SetChannel>
                    break;
 800de36:	e033      	b.n	800dea0 <SX1276SetRx+0x2b8>
                case 5: // 41.4 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 800de38:	2144      	movs	r1, #68	@ 0x44
 800de3a:	202f      	movs	r0, #47	@ 0x2f
 800de3c:	f000 fa94 	bl	800e368 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41.67e3 );
 800de40:	4b31      	ldr	r3, [pc, #196]	@ (800df08 <SX1276SetRx+0x320>)
 800de42:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800de46:	4618      	mov	r0, r3
 800de48:	f7f4 f8ee 	bl	8002028 <__aeabi_ui2d>
 800de4c:	a32c      	add	r3, pc, #176	@ (adr r3, 800df00 <SX1276SetRx+0x318>)
 800de4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de52:	f7f3 ffad 	bl	8001db0 <__adddf3>
 800de56:	4602      	mov	r2, r0
 800de58:	460b      	mov	r3, r1
 800de5a:	4610      	mov	r0, r2
 800de5c:	4619      	mov	r1, r3
 800de5e:	f7f4 fc35 	bl	80026cc <__aeabi_d2uiz>
 800de62:	4603      	mov	r3, r0
 800de64:	4618      	mov	r0, r3
 800de66:	f7fe fecf 	bl	800cc08 <SX1276SetChannel>
                    break;
 800de6a:	e019      	b.n	800dea0 <SX1276SetRx+0x2b8>
                case 6: // 62.5 kHz
                    SX1276Write( REG_LR_TEST2F, 0x40 );
 800de6c:	2140      	movs	r1, #64	@ 0x40
 800de6e:	202f      	movs	r0, #47	@ 0x2f
 800de70:	f000 fa7a 	bl	800e368 <SX1276Write>
                    break;
 800de74:	e014      	b.n	800dea0 <SX1276SetRx+0x2b8>
                case 7: // 125 kHz
                    SX1276Write( REG_LR_TEST2F, 0x40 );
 800de76:	2140      	movs	r1, #64	@ 0x40
 800de78:	202f      	movs	r0, #47	@ 0x2f
 800de7a:	f000 fa75 	bl	800e368 <SX1276Write>
                    break;
 800de7e:	e00f      	b.n	800dea0 <SX1276SetRx+0x2b8>
                case 8: // 250 kHz
                    SX1276Write( REG_LR_TEST2F, 0x40 );
 800de80:	2140      	movs	r1, #64	@ 0x40
 800de82:	202f      	movs	r0, #47	@ 0x2f
 800de84:	f000 fa70 	bl	800e368 <SX1276Write>
                    break;
 800de88:	e00a      	b.n	800dea0 <SX1276SetRx+0x2b8>
                }
            }
            else
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 800de8a:	2031      	movs	r0, #49	@ 0x31
 800de8c:	f000 fa7e 	bl	800e38c <SX1276Read>
 800de90:	4603      	mov	r3, r0
 800de92:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800de96:	b2db      	uxtb	r3, r3
 800de98:	4619      	mov	r1, r3
 800de9a:	2031      	movs	r0, #49	@ 0x31
 800de9c:	f000 fa64 	bl	800e368 <SX1276Write>
            }

            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 800dea0:	4b19      	ldr	r3, [pc, #100]	@ (800df08 <SX1276SetRx+0x320>)
 800dea2:	f893 3162 	ldrb.w	r3, [r3, #354]	@ 0x162
 800dea6:	73fb      	strb	r3, [r7, #15]

            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800dea8:	4b17      	ldr	r3, [pc, #92]	@ (800df08 <SX1276SetRx+0x320>)
 800deaa:	f893 315f 	ldrb.w	r3, [r3, #351]	@ 0x15f
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d02c      	beq.n	800df0c <SX1276SetRx+0x324>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 800deb2:	211d      	movs	r1, #29
 800deb4:	2011      	movs	r0, #17
 800deb6:	f000 fa57 	bl	800e368 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 800deba:	2040      	movs	r0, #64	@ 0x40
 800debc:	f000 fa66 	bl	800e38c <SX1276Read>
 800dec0:	4603      	mov	r3, r0
 800dec2:	f003 0333 	and.w	r3, r3, #51	@ 0x33
 800dec6:	b2db      	uxtb	r3, r3
 800dec8:	4619      	mov	r1, r3
 800deca:	2040      	movs	r0, #64	@ 0x40
 800decc:	f000 fa4c 	bl	800e368 <SX1276Write>
 800ded0:	e02b      	b.n	800df2a <SX1276SetRx+0x342>
 800ded2:	bf00      	nop
 800ded4:	f3af 8000 	nop.w
 800ded8:	00000000 	.word	0x00000000
 800dedc:	40be8200 	.word	0x40be8200
 800dee0:	00000000 	.word	0x00000000
 800dee4:	40c45a00 	.word	0x40c45a00
 800dee8:	00000000 	.word	0x00000000
 800deec:	40ce8200 	.word	0x40ce8200
 800def0:	00000000 	.word	0x00000000
 800def4:	40d45780 	.word	0x40d45780
 800def8:	00000000 	.word	0x00000000
 800defc:	40de8480 	.word	0x40de8480
 800df00:	00000000 	.word	0x00000000
 800df04:	40e458c0 	.word	0x40e458c0
 800df08:	200005f4 	.word	0x200005f4
            }
            else
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 800df0c:	211f      	movs	r1, #31
 800df0e:	2011      	movs	r0, #17
 800df10:	f000 fa2a 	bl	800e368 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 800df14:	2040      	movs	r0, #64	@ 0x40
 800df16:	f000 fa39 	bl	800e38c <SX1276Read>
 800df1a:	4603      	mov	r3, r0
 800df1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800df20:	b2db      	uxtb	r3, r3
 800df22:	4619      	mov	r1, r3
 800df24:	2040      	movs	r0, #64	@ 0x40
 800df26:	f000 fa1f 	bl	800e368 <SX1276Write>
            }
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 800df2a:	2100      	movs	r1, #0
 800df2c:	200f      	movs	r0, #15
 800df2e:	f000 fa1b 	bl	800e368 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 800df32:	2100      	movs	r1, #0
 800df34:	200d      	movs	r0, #13
 800df36:	f000 fa17 	bl	800e368 <SX1276Write>
        }
        break;
 800df3a:	bf00      	nop
    }

    memset( RxTxBuffer, 0, ( size_t )RX_BUFFER_SIZE );
 800df3c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800df40:	2100      	movs	r1, #0
 800df42:	484a      	ldr	r0, [pc, #296]	@ (800e06c <SX1276SetRx+0x484>)
 800df44:	f002 f824 	bl	800ff90 <memset>

    SX1276.Settings.State = RF_RX_RUNNING;
 800df48:	4b49      	ldr	r3, [pc, #292]	@ (800e070 <SX1276SetRx+0x488>)
 800df4a:	2201      	movs	r2, #1
 800df4c:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
    if( timeout != 0 )
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	2b00      	cmp	r3, #0
 800df54:	d006      	beq.n	800df64 <SX1276SetRx+0x37c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 800df56:	6879      	ldr	r1, [r7, #4]
 800df58:	4846      	ldr	r0, [pc, #280]	@ (800e074 <SX1276SetRx+0x48c>)
 800df5a:	f7fe fd99 	bl	800ca90 <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 800df5e:	4845      	ldr	r0, [pc, #276]	@ (800e074 <SX1276SetRx+0x48c>)
 800df60:	f7fe fb90 	bl	800c684 <TimerStart>
    }

    if( SX1276.Settings.Modem == MODEM_FSK )
 800df64:	4b42      	ldr	r3, [pc, #264]	@ (800e070 <SX1276SetRx+0x488>)
 800df66:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d16f      	bne.n	800e04e <SX1276SetRx+0x466>
    {
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
 800df6e:	2005      	movs	r0, #5
 800df70:	f000 f98a 	bl	800e288 <SX1276SetOpMode>

        if( rxContinuous == false )
 800df74:	7bfb      	ldrb	r3, [r7, #15]
 800df76:	f083 0301 	eor.w	r3, r3, #1
 800df7a:	b2db      	uxtb	r3, r3
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d070      	beq.n	800e062 <SX1276SetRx+0x47a>
        {
            TimerSetValue( &RxTimeoutSyncWord, ceil( ( 8.0 * ( SX1276.Settings.Fsk.PreambleLen +
 800df80:	4b3b      	ldr	r3, [pc, #236]	@ (800e070 <SX1276SetRx+0x488>)
 800df82:	f8b3 3130 	ldrh.w	r3, [r3, #304]	@ 0x130
 800df86:	4618      	mov	r0, r3
 800df88:	f7f4 f85e 	bl	8002048 <__aeabi_i2d>
 800df8c:	4604      	mov	r4, r0
 800df8e:	460d      	mov	r5, r1
                                                             ( ( SX1276Read( REG_SYNCCONFIG ) &
 800df90:	2027      	movs	r0, #39	@ 0x27
 800df92:	f000 f9fb 	bl	800e38c <SX1276Read>
 800df96:	4603      	mov	r3, r0
 800df98:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
                                                                ~RF_SYNCCONFIG_SYNCSIZE_MASK ) +
 800df9c:	4618      	mov	r0, r3
 800df9e:	f7f4 f853 	bl	8002048 <__aeabi_i2d>
 800dfa2:	f04f 0200 	mov.w	r2, #0
 800dfa6:	4b34      	ldr	r3, [pc, #208]	@ (800e078 <SX1276SetRx+0x490>)
 800dfa8:	f7f3 ff02 	bl	8001db0 <__adddf3>
 800dfac:	4602      	mov	r2, r0
 800dfae:	460b      	mov	r3, r1
            TimerSetValue( &RxTimeoutSyncWord, ceil( ( 8.0 * ( SX1276.Settings.Fsk.PreambleLen +
 800dfb0:	4620      	mov	r0, r4
 800dfb2:	4629      	mov	r1, r5
 800dfb4:	f7f3 fefc 	bl	8001db0 <__adddf3>
 800dfb8:	4602      	mov	r2, r0
 800dfba:	460b      	mov	r3, r1
 800dfbc:	4610      	mov	r0, r2
 800dfbe:	4619      	mov	r1, r3
                                                                1.0 ) + 10.0 ) /
 800dfc0:	f04f 0200 	mov.w	r2, #0
 800dfc4:	4b2d      	ldr	r3, [pc, #180]	@ (800e07c <SX1276SetRx+0x494>)
 800dfc6:	f7f3 fef3 	bl	8001db0 <__adddf3>
 800dfca:	4602      	mov	r2, r0
 800dfcc:	460b      	mov	r3, r1
 800dfce:	4610      	mov	r0, r2
 800dfd0:	4619      	mov	r1, r3
            TimerSetValue( &RxTimeoutSyncWord, ceil( ( 8.0 * ( SX1276.Settings.Fsk.PreambleLen +
 800dfd2:	f04f 0200 	mov.w	r2, #0
 800dfd6:	4b2a      	ldr	r3, [pc, #168]	@ (800e080 <SX1276SetRx+0x498>)
 800dfd8:	f7f4 f8a0 	bl	800211c <__aeabi_dmul>
 800dfdc:	4602      	mov	r2, r0
 800dfde:	460b      	mov	r3, r1
 800dfe0:	4614      	mov	r4, r2
 800dfe2:	461d      	mov	r5, r3
                                                             ( double )SX1276.Settings.Fsk.Datarate ) * 1e3 ) + 4 );
 800dfe4:	4b22      	ldr	r3, [pc, #136]	@ (800e070 <SX1276SetRx+0x488>)
 800dfe6:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 800dfea:	4618      	mov	r0, r3
 800dfec:	f7f4 f81c 	bl	8002028 <__aeabi_ui2d>
 800dff0:	4602      	mov	r2, r0
 800dff2:	460b      	mov	r3, r1
                                                                1.0 ) + 10.0 ) /
 800dff4:	4620      	mov	r0, r4
 800dff6:	4629      	mov	r1, r5
 800dff8:	f7f4 f9ba 	bl	8002370 <__aeabi_ddiv>
 800dffc:	4602      	mov	r2, r0
 800dffe:	460b      	mov	r3, r1
 800e000:	4610      	mov	r0, r2
 800e002:	4619      	mov	r1, r3
            TimerSetValue( &RxTimeoutSyncWord, ceil( ( 8.0 * ( SX1276.Settings.Fsk.PreambleLen +
 800e004:	f04f 0200 	mov.w	r2, #0
 800e008:	4b1e      	ldr	r3, [pc, #120]	@ (800e084 <SX1276SetRx+0x49c>)
 800e00a:	f7f4 f887 	bl	800211c <__aeabi_dmul>
 800e00e:	4602      	mov	r2, r0
 800e010:	460b      	mov	r3, r1
 800e012:	ec43 2b17 	vmov	d7, r2, r3
 800e016:	eeb0 0a47 	vmov.f32	s0, s14
 800e01a:	eef0 0a67 	vmov.f32	s1, s15
 800e01e:	f005 fb23 	bl	8013668 <ceil>
 800e022:	ec51 0b10 	vmov	r0, r1, d0
                                                             ( double )SX1276.Settings.Fsk.Datarate ) * 1e3 ) + 4 );
 800e026:	f04f 0200 	mov.w	r2, #0
 800e02a:	4b17      	ldr	r3, [pc, #92]	@ (800e088 <SX1276SetRx+0x4a0>)
 800e02c:	f7f3 fec0 	bl	8001db0 <__adddf3>
 800e030:	4602      	mov	r2, r0
 800e032:	460b      	mov	r3, r1
            TimerSetValue( &RxTimeoutSyncWord, ceil( ( 8.0 * ( SX1276.Settings.Fsk.PreambleLen +
 800e034:	4610      	mov	r0, r2
 800e036:	4619      	mov	r1, r3
 800e038:	f7f4 fb48 	bl	80026cc <__aeabi_d2uiz>
 800e03c:	4603      	mov	r3, r0
 800e03e:	4619      	mov	r1, r3
 800e040:	4812      	ldr	r0, [pc, #72]	@ (800e08c <SX1276SetRx+0x4a4>)
 800e042:	f7fe fd25 	bl	800ca90 <TimerSetValue>
            TimerStart( &RxTimeoutSyncWord );
 800e046:	4811      	ldr	r0, [pc, #68]	@ (800e08c <SX1276SetRx+0x4a4>)
 800e048:	f7fe fb1c 	bl	800c684 <TimerStart>
        else
        {
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
        }
    }
}
 800e04c:	e009      	b.n	800e062 <SX1276SetRx+0x47a>
        if( rxContinuous == true )
 800e04e:	7bfb      	ldrb	r3, [r7, #15]
 800e050:	2b00      	cmp	r3, #0
 800e052:	d003      	beq.n	800e05c <SX1276SetRx+0x474>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 800e054:	2005      	movs	r0, #5
 800e056:	f000 f917 	bl	800e288 <SX1276SetOpMode>
}
 800e05a:	e002      	b.n	800e062 <SX1276SetRx+0x47a>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 800e05c:	2006      	movs	r0, #6
 800e05e:	f000 f913 	bl	800e288 <SX1276SetOpMode>
}
 800e062:	bf00      	nop
 800e064:	3710      	adds	r7, #16
 800e066:	46bd      	mov	sp, r7
 800e068:	bdb0      	pop	{r4, r5, r7, pc}
 800e06a:	bf00      	nop
 800e06c:	200004f4 	.word	0x200004f4
 800e070:	200005f4 	.word	0x200005f4
 800e074:	20000778 	.word	0x20000778
 800e078:	3ff00000 	.word	0x3ff00000
 800e07c:	40240000 	.word	0x40240000
 800e080:	40200000 	.word	0x40200000
 800e084:	408f4000 	.word	0x408f4000
 800e088:	40100000 	.word	0x40100000
 800e08c:	2000078c 	.word	0x2000078c

0800e090 <SX1276SetTx>:

void SX1276SetTx( uint32_t timeout )
{
 800e090:	b580      	push	{r7, lr}
 800e092:	b082      	sub	sp, #8
 800e094:	af00      	add	r7, sp, #0
 800e096:	6078      	str	r0, [r7, #4]
    TimerSetValue( &TxTimeoutTimer, timeout );
 800e098:	6879      	ldr	r1, [r7, #4]
 800e09a:	4837      	ldr	r0, [pc, #220]	@ (800e178 <SX1276SetTx+0xe8>)
 800e09c:	f7fe fcf8 	bl	800ca90 <TimerSetValue>

    switch( SX1276.Settings.Modem )
 800e0a0:	4b36      	ldr	r3, [pc, #216]	@ (800e17c <SX1276SetTx+0xec>)
 800e0a2:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d002      	beq.n	800e0b0 <SX1276SetTx+0x20>
 800e0aa:	2b01      	cmp	r3, #1
 800e0ac:	d026      	beq.n	800e0fc <SX1276SetTx+0x6c>
 800e0ae:	e054      	b.n	800e15a <SX1276SetTx+0xca>
            // DIO1=FifoEmpty
            // DIO2=FifoFull
            // DIO3=FifoEmpty
            // DIO4=LowBat
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800e0b0:	2040      	movs	r0, #64	@ 0x40
 800e0b2:	f000 f96b 	bl	800e38c <SX1276Read>
 800e0b6:	4603      	mov	r3, r0
 800e0b8:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
 800e0ba:	f003 0303 	and.w	r3, r3, #3
 800e0be:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
 800e0c0:	f043 0310 	orr.w	r3, r3, #16
 800e0c4:	b25b      	sxtb	r3, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800e0c6:	b2db      	uxtb	r3, r3
 800e0c8:	4619      	mov	r1, r3
 800e0ca:	2040      	movs	r0, #64	@ 0x40
 800e0cc:	f000 f94c 	bl	800e368 <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO1_01 );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 800e0d0:	2041      	movs	r0, #65	@ 0x41
 800e0d2:	f000 f95b 	bl	800e38c <SX1276Read>
 800e0d6:	4603      	mov	r3, r0
 800e0d8:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800e0dc:	b2db      	uxtb	r3, r3
 800e0de:	4619      	mov	r1, r3
 800e0e0:	2041      	movs	r0, #65	@ 0x41
 800e0e2:	f000 f941 	bl	800e368 <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) );
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 800e0e6:	2035      	movs	r0, #53	@ 0x35
 800e0e8:	f000 f950 	bl	800e38c <SX1276Read>
 800e0ec:	4603      	mov	r3, r0
 800e0ee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e0f2:	b2da      	uxtb	r2, r3
 800e0f4:	4b21      	ldr	r3, [pc, #132]	@ (800e17c <SX1276SetTx+0xec>)
 800e0f6:	f883 214a 	strb.w	r2, [r3, #330]	@ 0x14a
        }
        break;
 800e0fa:	e02e      	b.n	800e15a <SX1276SetTx+0xca>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800e0fc:	4b1f      	ldr	r3, [pc, #124]	@ (800e17c <SX1276SetTx+0xec>)
 800e0fe:	f893 315f 	ldrb.w	r3, [r3, #351]	@ 0x15f
 800e102:	2b00      	cmp	r3, #0
 800e104:	d014      	beq.n	800e130 <SX1276SetTx+0xa0>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800e106:	21f5      	movs	r1, #245	@ 0xf5
 800e108:	2011      	movs	r0, #17
 800e10a:	f000 f92d 	bl	800e368 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=TxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 800e10e:	2040      	movs	r0, #64	@ 0x40
 800e110:	f000 f93c 	bl	800e38c <SX1276Read>
 800e114:	4603      	mov	r3, r0
 800e116:	b25b      	sxtb	r3, r3
 800e118:	f003 0333 	and.w	r3, r3, #51	@ 0x33
 800e11c:	b25b      	sxtb	r3, r3
 800e11e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e122:	b25b      	sxtb	r3, r3
 800e124:	b2db      	uxtb	r3, r3
 800e126:	4619      	mov	r1, r3
 800e128:	2040      	movs	r0, #64	@ 0x40
 800e12a:	f000 f91d 	bl	800e368 <SX1276Write>

                // DIO0=TxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
            }
        }
        break;
 800e12e:	e013      	b.n	800e158 <SX1276SetTx+0xc8>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800e130:	21f7      	movs	r1, #247	@ 0xf7
 800e132:	2011      	movs	r0, #17
 800e134:	f000 f918 	bl	800e368 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 800e138:	2040      	movs	r0, #64	@ 0x40
 800e13a:	f000 f927 	bl	800e38c <SX1276Read>
 800e13e:	4603      	mov	r3, r0
 800e140:	b25b      	sxtb	r3, r3
 800e142:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e146:	b25b      	sxtb	r3, r3
 800e148:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e14c:	b25b      	sxtb	r3, r3
 800e14e:	b2db      	uxtb	r3, r3
 800e150:	4619      	mov	r1, r3
 800e152:	2040      	movs	r0, #64	@ 0x40
 800e154:	f000 f908 	bl	800e368 <SX1276Write>
        break;
 800e158:	bf00      	nop
    }

    SX1276.Settings.State = RF_TX_RUNNING;
 800e15a:	4b08      	ldr	r3, [pc, #32]	@ (800e17c <SX1276SetTx+0xec>)
 800e15c:	2202      	movs	r2, #2
 800e15e:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
    TimerStart( &TxTimeoutTimer );
 800e162:	4805      	ldr	r0, [pc, #20]	@ (800e178 <SX1276SetTx+0xe8>)
 800e164:	f7fe fa8e 	bl	800c684 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 800e168:	2003      	movs	r0, #3
 800e16a:	f000 f88d 	bl	800e288 <SX1276SetOpMode>
}
 800e16e:	bf00      	nop
 800e170:	3708      	adds	r7, #8
 800e172:	46bd      	mov	sp, r7
 800e174:	bd80      	pop	{r7, pc}
 800e176:	bf00      	nop
 800e178:	20000764 	.word	0x20000764
 800e17c:	200005f4 	.word	0x200005f4

0800e180 <SX1276StartCad>:

void SX1276StartCad( void )
{
 800e180:	b580      	push	{r7, lr}
 800e182:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 800e184:	4b10      	ldr	r3, [pc, #64]	@ (800e1c8 <SX1276StartCad+0x48>)
 800e186:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d019      	beq.n	800e1c2 <SX1276StartCad+0x42>
 800e18e:	2b01      	cmp	r3, #1
 800e190:	d000      	beq.n	800e194 <SX1276StartCad+0x14>
            SX1276.Settings.State = RF_CAD;
            SX1276SetOpMode( RFLR_OPMODE_CAD );
        }
        break;
    default:
        break;
 800e192:	e017      	b.n	800e1c4 <SX1276StartCad+0x44>
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800e194:	21fa      	movs	r1, #250	@ 0xfa
 800e196:	2011      	movs	r0, #17
 800e198:	f000 f8e6 	bl	800e368 <SX1276Write>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 800e19c:	2040      	movs	r0, #64	@ 0x40
 800e19e:	f000 f8f5 	bl	800e38c <SX1276Read>
 800e1a2:	4603      	mov	r3, r0
 800e1a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e1a8:	b2db      	uxtb	r3, r3
 800e1aa:	4619      	mov	r1, r3
 800e1ac:	2040      	movs	r0, #64	@ 0x40
 800e1ae:	f000 f8db 	bl	800e368 <SX1276Write>
            SX1276.Settings.State = RF_CAD;
 800e1b2:	4b05      	ldr	r3, [pc, #20]	@ (800e1c8 <SX1276StartCad+0x48>)
 800e1b4:	2203      	movs	r2, #3
 800e1b6:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 800e1ba:	2007      	movs	r0, #7
 800e1bc:	f000 f864 	bl	800e288 <SX1276SetOpMode>
        break;
 800e1c0:	e000      	b.n	800e1c4 <SX1276StartCad+0x44>
        break;
 800e1c2:	bf00      	nop
    }
}
 800e1c4:	bf00      	nop
 800e1c6:	bd80      	pop	{r7, pc}
 800e1c8:	200005f4 	.word	0x200005f4

0800e1cc <SX1276ReadRssi>:

int16_t SX1276ReadRssi( RadioModems_t modem )
{
 800e1cc:	b580      	push	{r7, lr}
 800e1ce:	b084      	sub	sp, #16
 800e1d0:	af00      	add	r7, sp, #0
 800e1d2:	4603      	mov	r3, r0
 800e1d4:	71fb      	strb	r3, [r7, #7]
    int16_t rssi = 0;
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	81fb      	strh	r3, [r7, #14]

    switch( modem )
 800e1da:	79fb      	ldrb	r3, [r7, #7]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d002      	beq.n	800e1e6 <SX1276ReadRssi+0x1a>
 800e1e0:	2b01      	cmp	r3, #1
 800e1e2:	d00a      	beq.n	800e1fa <SX1276ReadRssi+0x2e>
 800e1e4:	e01f      	b.n	800e226 <SX1276ReadRssi+0x5a>
    {
    case MODEM_FSK:
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 800e1e6:	2011      	movs	r0, #17
 800e1e8:	f000 f8d0 	bl	800e38c <SX1276Read>
 800e1ec:	4603      	mov	r3, r0
 800e1ee:	085b      	lsrs	r3, r3, #1
 800e1f0:	b2db      	uxtb	r3, r3
 800e1f2:	425b      	negs	r3, r3
 800e1f4:	b29b      	uxth	r3, r3
 800e1f6:	81fb      	strh	r3, [r7, #14]
        break;
 800e1f8:	e019      	b.n	800e22e <SX1276ReadRssi+0x62>
    case MODEM_LORA:
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800e1fa:	4b10      	ldr	r3, [pc, #64]	@ (800e23c <SX1276ReadRssi+0x70>)
 800e1fc:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800e200:	4a0f      	ldr	r2, [pc, #60]	@ (800e240 <SX1276ReadRssi+0x74>)
 800e202:	4293      	cmp	r3, r2
 800e204:	d907      	bls.n	800e216 <SX1276ReadRssi+0x4a>
        {
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 800e206:	201b      	movs	r0, #27
 800e208:	f000 f8c0 	bl	800e38c <SX1276Read>
 800e20c:	4603      	mov	r3, r0
 800e20e:	3b9d      	subs	r3, #157	@ 0x9d
 800e210:	b29b      	uxth	r3, r3
 800e212:	81fb      	strh	r3, [r7, #14]
        }
        else
        {
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
        }
        break;
 800e214:	e00b      	b.n	800e22e <SX1276ReadRssi+0x62>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 800e216:	201b      	movs	r0, #27
 800e218:	f000 f8b8 	bl	800e38c <SX1276Read>
 800e21c:	4603      	mov	r3, r0
 800e21e:	3ba4      	subs	r3, #164	@ 0xa4
 800e220:	b29b      	uxth	r3, r3
 800e222:	81fb      	strh	r3, [r7, #14]
        break;
 800e224:	e003      	b.n	800e22e <SX1276ReadRssi+0x62>
    default:
        rssi = -1;
 800e226:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e22a:	81fb      	strh	r3, [r7, #14]
        break;
 800e22c:	bf00      	nop
    }
    return rssi;
 800e22e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800e232:	4618      	mov	r0, r3
 800e234:	3710      	adds	r7, #16
 800e236:	46bd      	mov	sp, r7
 800e238:	bd80      	pop	{r7, pc}
 800e23a:	bf00      	nop
 800e23c:	200005f4 	.word	0x200005f4
 800e240:	1f4add40 	.word	0x1f4add40

0800e244 <SX1276Reset>:

void SX1276Reset( void )
{
 800e244:	b580      	push	{r7, lr}
 800e246:	b082      	sub	sp, #8
 800e248:	af02      	add	r7, sp, #8
    // Set RESET pin to 0
    GpioInit( &SX1276.Reset, RADIO_RESET, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800e24a:	2300      	movs	r3, #0
 800e24c:	9301      	str	r3, [sp, #4]
 800e24e:	2300      	movs	r3, #0
 800e250:	9300      	str	r3, [sp, #0]
 800e252:	2300      	movs	r3, #0
 800e254:	2201      	movs	r2, #1
 800e256:	210b      	movs	r1, #11
 800e258:	480a      	ldr	r0, [pc, #40]	@ (800e284 <SX1276Reset+0x40>)
 800e25a:	f7fd fab3 	bl	800b7c4 <GpioInit>

    // Wait 1 ms
    DelayMs( 1 );
 800e25e:	2001      	movs	r0, #1
 800e260:	f7fc ffb6 	bl	800b1d0 <DelayMs>

    // Configure RESET as input
    GpioInit( &SX1276.Reset, RADIO_RESET, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 1 );
 800e264:	2301      	movs	r3, #1
 800e266:	9301      	str	r3, [sp, #4]
 800e268:	2300      	movs	r3, #0
 800e26a:	9300      	str	r3, [sp, #0]
 800e26c:	2300      	movs	r3, #0
 800e26e:	2200      	movs	r2, #0
 800e270:	210b      	movs	r1, #11
 800e272:	4804      	ldr	r0, [pc, #16]	@ (800e284 <SX1276Reset+0x40>)
 800e274:	f7fd faa6 	bl	800b7c4 <GpioInit>

    // Wait 6 ms
    DelayMs( 6 );
 800e278:	2006      	movs	r0, #6
 800e27a:	f7fc ffa9 	bl	800b1d0 <DelayMs>
}
 800e27e:	bf00      	nop
 800e280:	46bd      	mov	sp, r7
 800e282:	bd80      	pop	{r7, pc}
 800e284:	200005f4 	.word	0x200005f4

0800e288 <SX1276SetOpMode>:

void SX1276SetOpMode( uint8_t opMode )
{
 800e288:	b580      	push	{r7, lr}
 800e28a:	b082      	sub	sp, #8
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	4603      	mov	r3, r0
 800e290:	71fb      	strb	r3, [r7, #7]
    if( opMode == RF_OPMODE_SLEEP )
 800e292:	79fb      	ldrb	r3, [r7, #7]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d103      	bne.n	800e2a0 <SX1276SetOpMode+0x18>
    {
        SX1276SetAntSwLowPower( true );
 800e298:	2001      	movs	r0, #1
 800e29a:	f7fe f951 	bl	800c540 <SX1276SetAntSwLowPower>
 800e29e:	e00c      	b.n	800e2ba <SX1276SetOpMode+0x32>
    }
    else
    {
        SX1276SetAntSwLowPower( false );
 800e2a0:	2000      	movs	r0, #0
 800e2a2:	f7fe f94d 	bl	800c540 <SX1276SetAntSwLowPower>
        if( opMode == RF_OPMODE_TRANSMITTER )
 800e2a6:	79fb      	ldrb	r3, [r7, #7]
 800e2a8:	2b03      	cmp	r3, #3
 800e2aa:	d103      	bne.n	800e2b4 <SX1276SetOpMode+0x2c>
        {
            SX1276SetAntSw( 1 );
 800e2ac:	2001      	movs	r0, #1
 800e2ae:	f7fe f9a1 	bl	800c5f4 <SX1276SetAntSw>
 800e2b2:	e002      	b.n	800e2ba <SX1276SetOpMode+0x32>
        }
        else
        {
            SX1276SetAntSw( 0 );
 800e2b4:	2000      	movs	r0, #0
 800e2b6:	f7fe f99d 	bl	800c5f4 <SX1276SetAntSw>
        }
    }
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 800e2ba:	2001      	movs	r0, #1
 800e2bc:	f000 f866 	bl	800e38c <SX1276Read>
 800e2c0:	4603      	mov	r3, r0
 800e2c2:	b25b      	sxtb	r3, r3
 800e2c4:	f023 0307 	bic.w	r3, r3, #7
 800e2c8:	b25a      	sxtb	r2, r3
 800e2ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e2ce:	4313      	orrs	r3, r2
 800e2d0:	b25b      	sxtb	r3, r3
 800e2d2:	b2db      	uxtb	r3, r3
 800e2d4:	4619      	mov	r1, r3
 800e2d6:	2001      	movs	r0, #1
 800e2d8:	f000 f846 	bl	800e368 <SX1276Write>
}
 800e2dc:	bf00      	nop
 800e2de:	3708      	adds	r7, #8
 800e2e0:	46bd      	mov	sp, r7
 800e2e2:	bd80      	pop	{r7, pc}

0800e2e4 <SX1276SetModem>:

void SX1276SetModem( RadioModems_t modem )
{
 800e2e4:	b580      	push	{r7, lr}
 800e2e6:	b082      	sub	sp, #8
 800e2e8:	af00      	add	r7, sp, #0
 800e2ea:	4603      	mov	r3, r0
 800e2ec:	71fb      	strb	r3, [r7, #7]
/*    if( SX1276.Settings.Modem == modem )
    {
        return;
    }
PKDEBUG */
    SX1276.Settings.Modem = modem;
 800e2ee:	4a1d      	ldr	r2, [pc, #116]	@ (800e364 <SX1276SetModem+0x80>)
 800e2f0:	79fb      	ldrb	r3, [r7, #7]
 800e2f2:	f882 3115 	strb.w	r3, [r2, #277]	@ 0x115
    switch( SX1276.Settings.Modem )
 800e2f6:	4b1b      	ldr	r3, [pc, #108]	@ (800e364 <SX1276SetModem+0x80>)
 800e2f8:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 800e2fc:	2b01      	cmp	r3, #1
 800e2fe:	d016      	beq.n	800e32e <SX1276SetModem+0x4a>
    {
    default:
    case MODEM_FSK:
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 800e300:	2000      	movs	r0, #0
 800e302:	f7ff ffc1 	bl	800e288 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 800e306:	2001      	movs	r0, #1
 800e308:	f000 f840 	bl	800e38c <SX1276Read>
 800e30c:	4603      	mov	r3, r0
 800e30e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e312:	b2db      	uxtb	r3, r3
 800e314:	4619      	mov	r1, r3
 800e316:	2001      	movs	r0, #1
 800e318:	f000 f826 	bl	800e368 <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 800e31c:	2100      	movs	r1, #0
 800e31e:	2040      	movs	r0, #64	@ 0x40
 800e320:	f000 f822 	bl	800e368 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 800e324:	2130      	movs	r1, #48	@ 0x30
 800e326:	2041      	movs	r0, #65	@ 0x41
 800e328:	f000 f81e 	bl	800e368 <SX1276Write>
        break;
 800e32c:	e016      	b.n	800e35c <SX1276SetModem+0x78>
    case MODEM_LORA:
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 800e32e:	2000      	movs	r0, #0
 800e330:	f7ff ffaa 	bl	800e288 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 800e334:	2001      	movs	r0, #1
 800e336:	f000 f829 	bl	800e38c <SX1276Read>
 800e33a:	4603      	mov	r3, r0
 800e33c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800e340:	b2db      	uxtb	r3, r3
 800e342:	4619      	mov	r1, r3
 800e344:	2001      	movs	r0, #1
 800e346:	f000 f80f 	bl	800e368 <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 800e34a:	2100      	movs	r1, #0
 800e34c:	2040      	movs	r0, #64	@ 0x40
 800e34e:	f000 f80b 	bl	800e368 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 800e352:	2100      	movs	r1, #0
 800e354:	2041      	movs	r0, #65	@ 0x41
 800e356:	f000 f807 	bl	800e368 <SX1276Write>
        break;
 800e35a:	bf00      	nop
    }
}
 800e35c:	bf00      	nop
 800e35e:	3708      	adds	r7, #8
 800e360:	46bd      	mov	sp, r7
 800e362:	bd80      	pop	{r7, pc}
 800e364:	200005f4 	.word	0x200005f4

0800e368 <SX1276Write>:

void SX1276Write( uint8_t addr, uint8_t data )
{
 800e368:	b580      	push	{r7, lr}
 800e36a:	b082      	sub	sp, #8
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	4603      	mov	r3, r0
 800e370:	460a      	mov	r2, r1
 800e372:	71fb      	strb	r3, [r7, #7]
 800e374:	4613      	mov	r3, r2
 800e376:	71bb      	strb	r3, [r7, #6]
    SX1276WriteBuffer( addr, &data, 1 );
 800e378:	1db9      	adds	r1, r7, #6
 800e37a:	79fb      	ldrb	r3, [r7, #7]
 800e37c:	2201      	movs	r2, #1
 800e37e:	4618      	mov	r0, r3
 800e380:	f000 f816 	bl	800e3b0 <SX1276WriteBuffer>
}
 800e384:	bf00      	nop
 800e386:	3708      	adds	r7, #8
 800e388:	46bd      	mov	sp, r7
 800e38a:	bd80      	pop	{r7, pc}

0800e38c <SX1276Read>:

uint8_t SX1276Read( uint8_t addr )
{
 800e38c:	b580      	push	{r7, lr}
 800e38e:	b084      	sub	sp, #16
 800e390:	af00      	add	r7, sp, #0
 800e392:	4603      	mov	r3, r0
 800e394:	71fb      	strb	r3, [r7, #7]
    uint8_t data;
    SX1276ReadBuffer( addr, &data, 1 );
 800e396:	f107 010f 	add.w	r1, r7, #15
 800e39a:	79fb      	ldrb	r3, [r7, #7]
 800e39c:	2201      	movs	r2, #1
 800e39e:	4618      	mov	r0, r3
 800e3a0:	f000 f832 	bl	800e408 <SX1276ReadBuffer>
    return data;
 800e3a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	3710      	adds	r7, #16
 800e3aa:	46bd      	mov	sp, r7
 800e3ac:	bd80      	pop	{r7, pc}
	...

0800e3b0 <SX1276WriteBuffer>:

void SX1276WriteBuffer( uint8_t addr, uint8_t *buffer, uint8_t size )
{
 800e3b0:	b580      	push	{r7, lr}
 800e3b2:	b082      	sub	sp, #8
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	4603      	mov	r3, r0
 800e3b8:	6039      	str	r1, [r7, #0]
 800e3ba:	71fb      	strb	r3, [r7, #7]
 800e3bc:	4613      	mov	r3, r2
 800e3be:	71bb      	strb	r3, [r7, #6]
//    uint8_t i;

    //NSS = 0;
    GpioWrite( &SX1276.Spi.Nss, 0 );
 800e3c0:	2100      	movs	r1, #0
 800e3c2:	480f      	ldr	r0, [pc, #60]	@ (800e400 <SX1276WriteBuffer+0x50>)
 800e3c4:	f7fd fa3d 	bl	800b842 <GpioWrite>
/*    SpiInOut( &SX1276.Spi, addr | 0x80 );
    for( i = 0; i < size; i++ )
    {
        SpiInOut( &SX1276.Spi, buffer[i] );
    }    */
    addr |= 0x80;
 800e3c8:	79fb      	ldrb	r3, [r7, #7]
 800e3ca:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800e3ce:	b2db      	uxtb	r3, r3
 800e3d0:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit( &SX1276.Spi.Spi, &addr, 1, HAL_MAX_DELAY);
 800e3d2:	1df9      	adds	r1, r7, #7
 800e3d4:	f04f 33ff 	mov.w	r3, #4294967295
 800e3d8:	2201      	movs	r2, #1
 800e3da:	480a      	ldr	r0, [pc, #40]	@ (800e404 <SX1276WriteBuffer+0x54>)
 800e3dc:	f7fb fb1c 	bl	8009a18 <HAL_SPI_Transmit>
    HAL_SPI_Transmit( &SX1276.Spi.Spi, buffer, size, HAL_MAX_DELAY);
 800e3e0:	79bb      	ldrb	r3, [r7, #6]
 800e3e2:	b29a      	uxth	r2, r3
 800e3e4:	f04f 33ff 	mov.w	r3, #4294967295
 800e3e8:	6839      	ldr	r1, [r7, #0]
 800e3ea:	4806      	ldr	r0, [pc, #24]	@ (800e404 <SX1276WriteBuffer+0x54>)
 800e3ec:	f7fb fb14 	bl	8009a18 <HAL_SPI_Transmit>

    //NSS = 1;
    GpioWrite( &SX1276.Spi.Nss, 1 );
 800e3f0:	2101      	movs	r1, #1
 800e3f2:	4803      	ldr	r0, [pc, #12]	@ (800e400 <SX1276WriteBuffer+0x50>)
 800e3f4:	f7fd fa25 	bl	800b842 <GpioWrite>
}
 800e3f8:	bf00      	nop
 800e3fa:	3708      	adds	r7, #8
 800e3fc:	46bd      	mov	sp, r7
 800e3fe:	bd80      	pop	{r7, pc}
 800e400:	200006fc 	.word	0x200006fc
 800e404:	20000648 	.word	0x20000648

0800e408 <SX1276ReadBuffer>:

void SX1276ReadBuffer( uint8_t addr, uint8_t *buffer, uint8_t size )
{
 800e408:	b580      	push	{r7, lr}
 800e40a:	b082      	sub	sp, #8
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	4603      	mov	r3, r0
 800e410:	6039      	str	r1, [r7, #0]
 800e412:	71fb      	strb	r3, [r7, #7]
 800e414:	4613      	mov	r3, r2
 800e416:	71bb      	strb	r3, [r7, #6]
//    uint8_t i;

    //NSS = 0;
    GpioWrite( &SX1276.Spi.Nss, 0 );
 800e418:	2100      	movs	r1, #0
 800e41a:	4816      	ldr	r0, [pc, #88]	@ (800e474 <SX1276ReadBuffer+0x6c>)
 800e41c:	f7fd fa11 	bl	800b842 <GpioWrite>

//    SpiInOut( &SX1276.Spi, addr & 0x7F );
    addr &= 0x7f;
 800e420:	79fb      	ldrb	r3, [r7, #7]
 800e422:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e426:	b2db      	uxtb	r3, r3
 800e428:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit( &SX1276.Spi.Spi, &addr, 1, HAL_MAX_DELAY);
 800e42a:	1df9      	adds	r1, r7, #7
 800e42c:	f04f 33ff 	mov.w	r3, #4294967295
 800e430:	2201      	movs	r2, #1
 800e432:	4811      	ldr	r0, [pc, #68]	@ (800e478 <SX1276ReadBuffer+0x70>)
 800e434:	f7fb faf0 	bl	8009a18 <HAL_SPI_Transmit>
    while(HAL_SPI_GetState(&SX1276.Spi.Spi) != HAL_SPI_STATE_READY);
 800e438:	bf00      	nop
 800e43a:	480f      	ldr	r0, [pc, #60]	@ (800e478 <SX1276ReadBuffer+0x70>)
 800e43c:	f7fb ff9a 	bl	800a374 <HAL_SPI_GetState>
 800e440:	4603      	mov	r3, r0
 800e442:	2b01      	cmp	r3, #1
 800e444:	d1f9      	bne.n	800e43a <SX1276ReadBuffer+0x32>
    HAL_SPI_Receive( &SX1276.Spi.Spi, buffer, size, HAL_MAX_DELAY);
 800e446:	79bb      	ldrb	r3, [r7, #6]
 800e448:	b29a      	uxth	r2, r3
 800e44a:	f04f 33ff 	mov.w	r3, #4294967295
 800e44e:	6839      	ldr	r1, [r7, #0]
 800e450:	4809      	ldr	r0, [pc, #36]	@ (800e478 <SX1276ReadBuffer+0x70>)
 800e452:	f7fb fcf5 	bl	8009e40 <HAL_SPI_Receive>
    while(HAL_SPI_GetState(&SX1276.Spi.Spi) != HAL_SPI_STATE_READY);
 800e456:	bf00      	nop
 800e458:	4807      	ldr	r0, [pc, #28]	@ (800e478 <SX1276ReadBuffer+0x70>)
 800e45a:	f7fb ff8b 	bl	800a374 <HAL_SPI_GetState>
 800e45e:	4603      	mov	r3, r0
 800e460:	2b01      	cmp	r3, #1
 800e462:	d1f9      	bne.n	800e458 <SX1276ReadBuffer+0x50>
//    {
//        buffer[i] = SpiInOut( &SX1276.Spi, 0 );
//    }

    //NSS = 1;
    GpioWrite( &SX1276.Spi.Nss, 1 );
 800e464:	2101      	movs	r1, #1
 800e466:	4803      	ldr	r0, [pc, #12]	@ (800e474 <SX1276ReadBuffer+0x6c>)
 800e468:	f7fd f9eb 	bl	800b842 <GpioWrite>
}
 800e46c:	bf00      	nop
 800e46e:	3708      	adds	r7, #8
 800e470:	46bd      	mov	sp, r7
 800e472:	bd80      	pop	{r7, pc}
 800e474:	200006fc 	.word	0x200006fc
 800e478:	20000648 	.word	0x20000648

0800e47c <SX1276WriteFifo>:

void SX1276WriteFifo( uint8_t *buffer, uint8_t size )
{
 800e47c:	b580      	push	{r7, lr}
 800e47e:	b082      	sub	sp, #8
 800e480:	af00      	add	r7, sp, #0
 800e482:	6078      	str	r0, [r7, #4]
 800e484:	460b      	mov	r3, r1
 800e486:	70fb      	strb	r3, [r7, #3]
    SX1276WriteBuffer( 0, buffer, size );
 800e488:	78fb      	ldrb	r3, [r7, #3]
 800e48a:	461a      	mov	r2, r3
 800e48c:	6879      	ldr	r1, [r7, #4]
 800e48e:	2000      	movs	r0, #0
 800e490:	f7ff ff8e 	bl	800e3b0 <SX1276WriteBuffer>
}
 800e494:	bf00      	nop
 800e496:	3708      	adds	r7, #8
 800e498:	46bd      	mov	sp, r7
 800e49a:	bd80      	pop	{r7, pc}

0800e49c <SX1276ReadFifo>:

void SX1276ReadFifo( uint8_t *buffer, uint8_t size )
{
 800e49c:	b580      	push	{r7, lr}
 800e49e:	b082      	sub	sp, #8
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	6078      	str	r0, [r7, #4]
 800e4a4:	460b      	mov	r3, r1
 800e4a6:	70fb      	strb	r3, [r7, #3]
    SX1276ReadBuffer( 0, buffer, size );
 800e4a8:	78fb      	ldrb	r3, [r7, #3]
 800e4aa:	461a      	mov	r2, r3
 800e4ac:	6879      	ldr	r1, [r7, #4]
 800e4ae:	2000      	movs	r0, #0
 800e4b0:	f7ff ffaa 	bl	800e408 <SX1276ReadBuffer>
}
 800e4b4:	bf00      	nop
 800e4b6:	3708      	adds	r7, #8
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	bd80      	pop	{r7, pc}

0800e4bc <SX1276SetMaxPayloadLength>:

void SX1276SetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 800e4bc:	b580      	push	{r7, lr}
 800e4be:	b082      	sub	sp, #8
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	4603      	mov	r3, r0
 800e4c4:	460a      	mov	r2, r1
 800e4c6:	71fb      	strb	r3, [r7, #7]
 800e4c8:	4613      	mov	r3, r2
 800e4ca:	71bb      	strb	r3, [r7, #6]
    SX1276SetModem( modem );
 800e4cc:	79fb      	ldrb	r3, [r7, #7]
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	f7ff ff08 	bl	800e2e4 <SX1276SetModem>

    switch( modem )
 800e4d4:	79fb      	ldrb	r3, [r7, #7]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d002      	beq.n	800e4e0 <SX1276SetMaxPayloadLength+0x24>
 800e4da:	2b01      	cmp	r3, #1
 800e4dc:	d00e      	beq.n	800e4fc <SX1276SetMaxPayloadLength+0x40>
        break;
    case MODEM_LORA:
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
        break;
    }
}
 800e4de:	e014      	b.n	800e50a <SX1276SetMaxPayloadLength+0x4e>
        if( SX1276.Settings.Fsk.FixLen == false )
 800e4e0:	4b0c      	ldr	r3, [pc, #48]	@ (800e514 <SX1276SetMaxPayloadLength+0x58>)
 800e4e2:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 800e4e6:	f083 0301 	eor.w	r3, r3, #1
 800e4ea:	b2db      	uxtb	r3, r3
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d00b      	beq.n	800e508 <SX1276SetMaxPayloadLength+0x4c>
            SX1276Write( REG_PAYLOADLENGTH, max );
 800e4f0:	79bb      	ldrb	r3, [r7, #6]
 800e4f2:	4619      	mov	r1, r3
 800e4f4:	2032      	movs	r0, #50	@ 0x32
 800e4f6:	f7ff ff37 	bl	800e368 <SX1276Write>
        break;
 800e4fa:	e005      	b.n	800e508 <SX1276SetMaxPayloadLength+0x4c>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 800e4fc:	79bb      	ldrb	r3, [r7, #6]
 800e4fe:	4619      	mov	r1, r3
 800e500:	2023      	movs	r0, #35	@ 0x23
 800e502:	f7ff ff31 	bl	800e368 <SX1276Write>
        break;
 800e506:	e000      	b.n	800e50a <SX1276SetMaxPayloadLength+0x4e>
        break;
 800e508:	bf00      	nop
}
 800e50a:	bf00      	nop
 800e50c:	3708      	adds	r7, #8
 800e50e:	46bd      	mov	sp, r7
 800e510:	bd80      	pop	{r7, pc}
 800e512:	bf00      	nop
 800e514:	200005f4 	.word	0x200005f4

0800e518 <SX1276OnTimeoutIrq>:

void SX1276OnTimeoutIrq( void )
{
 800e518:	b580      	push	{r7, lr}
 800e51a:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.State )
 800e51c:	4b32      	ldr	r3, [pc, #200]	@ (800e5e8 <SX1276OnTimeoutIrq+0xd0>)
 800e51e:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 800e522:	2b01      	cmp	r3, #1
 800e524:	d002      	beq.n	800e52c <SX1276OnTimeoutIrq+0x14>
 800e526:	2b02      	cmp	r3, #2
 800e528:	d046      	beq.n	800e5b8 <SX1276OnTimeoutIrq+0xa0>
        {
            RadioEvents->TxTimeout( );
        }
        break;
    default:
        break;
 800e52a:	e05a      	b.n	800e5e2 <SX1276OnTimeoutIrq+0xca>
        if( SX1276.Settings.Modem == MODEM_FSK )
 800e52c:	4b2e      	ldr	r3, [pc, #184]	@ (800e5e8 <SX1276OnTimeoutIrq+0xd0>)
 800e52e:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 800e532:	2b00      	cmp	r3, #0
 800e534:	d132      	bne.n	800e59c <SX1276OnTimeoutIrq+0x84>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800e536:	4b2c      	ldr	r3, [pc, #176]	@ (800e5e8 <SX1276OnTimeoutIrq+0xd0>)
 800e538:	2200      	movs	r2, #0
 800e53a:	f883 213c 	strb.w	r2, [r3, #316]	@ 0x13c
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 800e53e:	4b2a      	ldr	r3, [pc, #168]	@ (800e5e8 <SX1276OnTimeoutIrq+0xd0>)
 800e540:	2200      	movs	r2, #0
 800e542:	f883 213d 	strb.w	r2, [r3, #317]	@ 0x13d
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800e546:	4b28      	ldr	r3, [pc, #160]	@ (800e5e8 <SX1276OnTimeoutIrq+0xd0>)
 800e548:	2200      	movs	r2, #0
 800e54a:	f8a3 2148 	strh.w	r2, [r3, #328]	@ 0x148
            SX1276.Settings.FskPacketHandler.Size = 0;
 800e54e:	4b26      	ldr	r3, [pc, #152]	@ (800e5e8 <SX1276OnTimeoutIrq+0xd0>)
 800e550:	2200      	movs	r2, #0
 800e552:	f8a3 2146 	strh.w	r2, [r3, #326]	@ 0x146
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 800e556:	210b      	movs	r1, #11
 800e558:	203e      	movs	r0, #62	@ 0x3e
 800e55a:	f7ff ff05 	bl	800e368 <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 800e55e:	2110      	movs	r1, #16
 800e560:	203f      	movs	r0, #63	@ 0x3f
 800e562:	f7ff ff01 	bl	800e368 <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 800e566:	4b20      	ldr	r3, [pc, #128]	@ (800e5e8 <SX1276OnTimeoutIrq+0xd0>)
 800e568:	f893 3136 	ldrb.w	r3, [r3, #310]	@ 0x136
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d00e      	beq.n	800e58e <SX1276OnTimeoutIrq+0x76>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 800e570:	200d      	movs	r0, #13
 800e572:	f7ff ff0b 	bl	800e38c <SX1276Read>
 800e576:	4603      	mov	r3, r0
 800e578:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e57c:	b2db      	uxtb	r3, r3
 800e57e:	4619      	mov	r1, r3
 800e580:	200d      	movs	r0, #13
 800e582:	f7ff fef1 	bl	800e368 <SX1276Write>
                TimerStart( &RxTimeoutSyncWord );
 800e586:	4819      	ldr	r0, [pc, #100]	@ (800e5ec <SX1276OnTimeoutIrq+0xd4>)
 800e588:	f7fe f87c 	bl	800c684 <TimerStart>
 800e58c:	e006      	b.n	800e59c <SX1276OnTimeoutIrq+0x84>
                SX1276.Settings.State = RF_IDLE;
 800e58e:	4b16      	ldr	r3, [pc, #88]	@ (800e5e8 <SX1276OnTimeoutIrq+0xd0>)
 800e590:	2200      	movs	r2, #0
 800e592:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
                TimerStop( &RxTimeoutSyncWord );
 800e596:	4815      	ldr	r0, [pc, #84]	@ (800e5ec <SX1276OnTimeoutIrq+0xd4>)
 800e598:	f7fe f9bc 	bl	800c914 <TimerStop>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800e59c:	4b14      	ldr	r3, [pc, #80]	@ (800e5f0 <SX1276OnTimeoutIrq+0xd8>)
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d01b      	beq.n	800e5dc <SX1276OnTimeoutIrq+0xc4>
 800e5a4:	4b12      	ldr	r3, [pc, #72]	@ (800e5f0 <SX1276OnTimeoutIrq+0xd8>)
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	68db      	ldr	r3, [r3, #12]
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d016      	beq.n	800e5dc <SX1276OnTimeoutIrq+0xc4>
            RadioEvents->RxTimeout( );
 800e5ae:	4b10      	ldr	r3, [pc, #64]	@ (800e5f0 <SX1276OnTimeoutIrq+0xd8>)
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	68db      	ldr	r3, [r3, #12]
 800e5b4:	4798      	blx	r3
        break;
 800e5b6:	e011      	b.n	800e5dc <SX1276OnTimeoutIrq+0xc4>
        SX1276.Settings.State = RF_IDLE;
 800e5b8:	4b0b      	ldr	r3, [pc, #44]	@ (800e5e8 <SX1276OnTimeoutIrq+0xd0>)
 800e5ba:	2200      	movs	r2, #0
 800e5bc:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800e5c0:	4b0b      	ldr	r3, [pc, #44]	@ (800e5f0 <SX1276OnTimeoutIrq+0xd8>)
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d00b      	beq.n	800e5e0 <SX1276OnTimeoutIrq+0xc8>
 800e5c8:	4b09      	ldr	r3, [pc, #36]	@ (800e5f0 <SX1276OnTimeoutIrq+0xd8>)
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	685b      	ldr	r3, [r3, #4]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d006      	beq.n	800e5e0 <SX1276OnTimeoutIrq+0xc8>
            RadioEvents->TxTimeout( );
 800e5d2:	4b07      	ldr	r3, [pc, #28]	@ (800e5f0 <SX1276OnTimeoutIrq+0xd8>)
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	685b      	ldr	r3, [r3, #4]
 800e5d8:	4798      	blx	r3
        break;
 800e5da:	e001      	b.n	800e5e0 <SX1276OnTimeoutIrq+0xc8>
        break;
 800e5dc:	bf00      	nop
 800e5de:	e000      	b.n	800e5e2 <SX1276OnTimeoutIrq+0xca>
        break;
 800e5e0:	bf00      	nop
    }
}
 800e5e2:	bf00      	nop
 800e5e4:	bd80      	pop	{r7, pc}
 800e5e6:	bf00      	nop
 800e5e8:	200005f4 	.word	0x200005f4
 800e5ec:	2000078c 	.word	0x2000078c
 800e5f0:	200004f0 	.word	0x200004f0

0800e5f4 <SX1276OnDio0Irq>:

void SX1276OnDio0Irq( void )
{
 800e5f4:	b590      	push	{r4, r7, lr}
 800e5f6:	b083      	sub	sp, #12
 800e5f8:	af00      	add	r7, sp, #0
    volatile uint8_t irqFlags = 0;
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	70fb      	strb	r3, [r7, #3]

    switch( SX1276.Settings.State )
 800e5fe:	4ba7      	ldr	r3, [pc, #668]	@ (800e89c <SX1276OnDio0Irq+0x2a8>)
 800e600:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 800e604:	2b01      	cmp	r3, #1
 800e606:	d003      	beq.n	800e610 <SX1276OnDio0Irq+0x1c>
 800e608:	2b02      	cmp	r3, #2
 800e60a:	f000 81f0 	beq.w	800e9ee <SX1276OnDio0Irq+0x3fa>
                }
                break;
            }
            break;
        default:
            break;
 800e60e:	e20d      	b.n	800ea2c <SX1276OnDio0Irq+0x438>
            switch( SX1276.Settings.Modem )
 800e610:	4ba2      	ldr	r3, [pc, #648]	@ (800e89c <SX1276OnDio0Irq+0x2a8>)
 800e612:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 800e616:	2b00      	cmp	r3, #0
 800e618:	d003      	beq.n	800e622 <SX1276OnDio0Irq+0x2e>
 800e61a:	2b01      	cmp	r3, #1
 800e61c:	f000 80ef 	beq.w	800e7fe <SX1276OnDio0Irq+0x20a>
                break;
 800e620:	e1e4      	b.n	800e9ec <SX1276OnDio0Irq+0x3f8>
                if( SX1276.Settings.Fsk.CrcOn == true )
 800e622:	4b9e      	ldr	r3, [pc, #632]	@ (800e89c <SX1276OnDio0Irq+0x2a8>)
 800e624:	f893 3134 	ldrb.w	r3, [r3, #308]	@ 0x134
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d051      	beq.n	800e6d0 <SX1276OnDio0Irq+0xdc>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 800e62c:	203f      	movs	r0, #63	@ 0x3f
 800e62e:	f7ff fead 	bl	800e38c <SX1276Read>
 800e632:	4603      	mov	r3, r0
 800e634:	70fb      	strb	r3, [r7, #3]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 800e636:	78fb      	ldrb	r3, [r7, #3]
 800e638:	b2db      	uxtb	r3, r3
 800e63a:	f003 0302 	and.w	r3, r3, #2
 800e63e:	2b02      	cmp	r3, #2
 800e640:	d046      	beq.n	800e6d0 <SX1276OnDio0Irq+0xdc>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 800e642:	210b      	movs	r1, #11
 800e644:	203e      	movs	r0, #62	@ 0x3e
 800e646:	f7ff fe8f 	bl	800e368 <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 800e64a:	2110      	movs	r1, #16
 800e64c:	203f      	movs	r0, #63	@ 0x3f
 800e64e:	f7ff fe8b 	bl	800e368 <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 800e652:	4893      	ldr	r0, [pc, #588]	@ (800e8a0 <SX1276OnDio0Irq+0x2ac>)
 800e654:	f7fe f95e 	bl	800c914 <TimerStop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 800e658:	4b90      	ldr	r3, [pc, #576]	@ (800e89c <SX1276OnDio0Irq+0x2a8>)
 800e65a:	f893 3136 	ldrb.w	r3, [r3, #310]	@ 0x136
 800e65e:	f083 0301 	eor.w	r3, r3, #1
 800e662:	b2db      	uxtb	r3, r3
 800e664:	2b00      	cmp	r3, #0
 800e666:	d007      	beq.n	800e678 <SX1276OnDio0Irq+0x84>
                            TimerStop( &RxTimeoutSyncWord );
 800e668:	488e      	ldr	r0, [pc, #568]	@ (800e8a4 <SX1276OnDio0Irq+0x2b0>)
 800e66a:	f7fe f953 	bl	800c914 <TimerStop>
                            SX1276.Settings.State = RF_IDLE;
 800e66e:	4b8b      	ldr	r3, [pc, #556]	@ (800e89c <SX1276OnDio0Irq+0x2a8>)
 800e670:	2200      	movs	r2, #0
 800e672:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
 800e676:	e00d      	b.n	800e694 <SX1276OnDio0Irq+0xa0>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 800e678:	200d      	movs	r0, #13
 800e67a:	f7ff fe87 	bl	800e38c <SX1276Read>
 800e67e:	4603      	mov	r3, r0
 800e680:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e684:	b2db      	uxtb	r3, r3
 800e686:	4619      	mov	r1, r3
 800e688:	200d      	movs	r0, #13
 800e68a:	f7ff fe6d 	bl	800e368 <SX1276Write>
                            TimerStart( &RxTimeoutSyncWord );
 800e68e:	4885      	ldr	r0, [pc, #532]	@ (800e8a4 <SX1276OnDio0Irq+0x2b0>)
 800e690:	f7fd fff8 	bl	800c684 <TimerStart>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 800e694:	4b84      	ldr	r3, [pc, #528]	@ (800e8a8 <SX1276OnDio0Irq+0x2b4>)
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d008      	beq.n	800e6ae <SX1276OnDio0Irq+0xba>
 800e69c:	4b82      	ldr	r3, [pc, #520]	@ (800e8a8 <SX1276OnDio0Irq+0x2b4>)
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	691b      	ldr	r3, [r3, #16]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d003      	beq.n	800e6ae <SX1276OnDio0Irq+0xba>
                            RadioEvents->RxError( );
 800e6a6:	4b80      	ldr	r3, [pc, #512]	@ (800e8a8 <SX1276OnDio0Irq+0x2b4>)
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	691b      	ldr	r3, [r3, #16]
 800e6ac:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800e6ae:	4b7b      	ldr	r3, [pc, #492]	@ (800e89c <SX1276OnDio0Irq+0x2a8>)
 800e6b0:	2200      	movs	r2, #0
 800e6b2:	f883 213c 	strb.w	r2, [r3, #316]	@ 0x13c
                        SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 800e6b6:	4b79      	ldr	r3, [pc, #484]	@ (800e89c <SX1276OnDio0Irq+0x2a8>)
 800e6b8:	2200      	movs	r2, #0
 800e6ba:	f883 213d 	strb.w	r2, [r3, #317]	@ 0x13d
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800e6be:	4b77      	ldr	r3, [pc, #476]	@ (800e89c <SX1276OnDio0Irq+0x2a8>)
 800e6c0:	2200      	movs	r2, #0
 800e6c2:	f8a3 2148 	strh.w	r2, [r3, #328]	@ 0x148
                        SX1276.Settings.FskPacketHandler.Size = 0;
 800e6c6:	4b75      	ldr	r3, [pc, #468]	@ (800e89c <SX1276OnDio0Irq+0x2a8>)
 800e6c8:	2200      	movs	r2, #0
 800e6ca:	f8a3 2146 	strh.w	r2, [r3, #326]	@ 0x146
                        break;
 800e6ce:	e18d      	b.n	800e9ec <SX1276OnDio0Irq+0x3f8>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 800e6d0:	4b72      	ldr	r3, [pc, #456]	@ (800e89c <SX1276OnDio0Irq+0x2a8>)
 800e6d2:	f8b3 3146 	ldrh.w	r3, [r3, #326]	@ 0x146
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d133      	bne.n	800e742 <SX1276OnDio0Irq+0x14e>
 800e6da:	4b70      	ldr	r3, [pc, #448]	@ (800e89c <SX1276OnDio0Irq+0x2a8>)
 800e6dc:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d12e      	bne.n	800e742 <SX1276OnDio0Irq+0x14e>
                    if( SX1276.Settings.Fsk.FixLen == false )
 800e6e4:	4b6d      	ldr	r3, [pc, #436]	@ (800e89c <SX1276OnDio0Irq+0x2a8>)
 800e6e6:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 800e6ea:	f083 0301 	eor.w	r3, r3, #1
 800e6ee:	b2db      	uxtb	r3, r3
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d004      	beq.n	800e6fe <SX1276OnDio0Irq+0x10a>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 800e6f4:	2101      	movs	r1, #1
 800e6f6:	486d      	ldr	r0, [pc, #436]	@ (800e8ac <SX1276OnDio0Irq+0x2b8>)
 800e6f8:	f7ff fed0 	bl	800e49c <SX1276ReadFifo>
 800e6fc:	e007      	b.n	800e70e <SX1276OnDio0Irq+0x11a>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 800e6fe:	2032      	movs	r0, #50	@ 0x32
 800e700:	f7ff fe44 	bl	800e38c <SX1276Read>
 800e704:	4603      	mov	r3, r0
 800e706:	461a      	mov	r2, r3
 800e708:	4b64      	ldr	r3, [pc, #400]	@ (800e89c <SX1276OnDio0Irq+0x2a8>)
 800e70a:	f8a3 2146 	strh.w	r2, [r3, #326]	@ 0x146
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800e70e:	4b63      	ldr	r3, [pc, #396]	@ (800e89c <SX1276OnDio0Irq+0x2a8>)
 800e710:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 800e714:	461a      	mov	r2, r3
 800e716:	4b66      	ldr	r3, [pc, #408]	@ (800e8b0 <SX1276OnDio0Irq+0x2bc>)
 800e718:	18d0      	adds	r0, r2, r3
 800e71a:	4b60      	ldr	r3, [pc, #384]	@ (800e89c <SX1276OnDio0Irq+0x2a8>)
 800e71c:	f8b3 3146 	ldrh.w	r3, [r3, #326]	@ 0x146
 800e720:	b2da      	uxtb	r2, r3
 800e722:	4b5e      	ldr	r3, [pc, #376]	@ (800e89c <SX1276OnDio0Irq+0x2a8>)
 800e724:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 800e728:	b2db      	uxtb	r3, r3
 800e72a:	1ad3      	subs	r3, r2, r3
 800e72c:	b2db      	uxtb	r3, r3
 800e72e:	4619      	mov	r1, r3
 800e730:	f7ff feb4 	bl	800e49c <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800e734:	4b59      	ldr	r3, [pc, #356]	@ (800e89c <SX1276OnDio0Irq+0x2a8>)
 800e736:	f8b3 2146 	ldrh.w	r2, [r3, #326]	@ 0x146
 800e73a:	4b58      	ldr	r3, [pc, #352]	@ (800e89c <SX1276OnDio0Irq+0x2a8>)
 800e73c:	f8a3 2148 	strh.w	r2, [r3, #328]	@ 0x148
 800e740:	e018      	b.n	800e774 <SX1276OnDio0Irq+0x180>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800e742:	4b56      	ldr	r3, [pc, #344]	@ (800e89c <SX1276OnDio0Irq+0x2a8>)
 800e744:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 800e748:	461a      	mov	r2, r3
 800e74a:	4b59      	ldr	r3, [pc, #356]	@ (800e8b0 <SX1276OnDio0Irq+0x2bc>)
 800e74c:	18d0      	adds	r0, r2, r3
 800e74e:	4b53      	ldr	r3, [pc, #332]	@ (800e89c <SX1276OnDio0Irq+0x2a8>)
 800e750:	f8b3 3146 	ldrh.w	r3, [r3, #326]	@ 0x146
 800e754:	b2da      	uxtb	r2, r3
 800e756:	4b51      	ldr	r3, [pc, #324]	@ (800e89c <SX1276OnDio0Irq+0x2a8>)
 800e758:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 800e75c:	b2db      	uxtb	r3, r3
 800e75e:	1ad3      	subs	r3, r2, r3
 800e760:	b2db      	uxtb	r3, r3
 800e762:	4619      	mov	r1, r3
 800e764:	f7ff fe9a 	bl	800e49c <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800e768:	4b4c      	ldr	r3, [pc, #304]	@ (800e89c <SX1276OnDio0Irq+0x2a8>)
 800e76a:	f8b3 2146 	ldrh.w	r2, [r3, #326]	@ 0x146
 800e76e:	4b4b      	ldr	r3, [pc, #300]	@ (800e89c <SX1276OnDio0Irq+0x2a8>)
 800e770:	f8a3 2148 	strh.w	r2, [r3, #328]	@ 0x148
                if( SX1276.Settings.Fsk.RxContinuous == false )
 800e774:	4b49      	ldr	r3, [pc, #292]	@ (800e89c <SX1276OnDio0Irq+0x2a8>)
 800e776:	f893 3136 	ldrb.w	r3, [r3, #310]	@ 0x136
 800e77a:	f083 0301 	eor.w	r3, r3, #1
 800e77e:	b2db      	uxtb	r3, r3
 800e780:	2b00      	cmp	r3, #0
 800e782:	d007      	beq.n	800e794 <SX1276OnDio0Irq+0x1a0>
                    SX1276.Settings.State = RF_IDLE;
 800e784:	4b45      	ldr	r3, [pc, #276]	@ (800e89c <SX1276OnDio0Irq+0x2a8>)
 800e786:	2200      	movs	r2, #0
 800e788:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
                    TimerStart( &RxTimeoutSyncWord );
 800e78c:	4845      	ldr	r0, [pc, #276]	@ (800e8a4 <SX1276OnDio0Irq+0x2b0>)
 800e78e:	f7fd ff79 	bl	800c684 <TimerStart>
 800e792:	e00a      	b.n	800e7aa <SX1276OnDio0Irq+0x1b6>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 800e794:	200d      	movs	r0, #13
 800e796:	f7ff fdf9 	bl	800e38c <SX1276Read>
 800e79a:	4603      	mov	r3, r0
 800e79c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e7a0:	b2db      	uxtb	r3, r3
 800e7a2:	4619      	mov	r1, r3
 800e7a4:	200d      	movs	r0, #13
 800e7a6:	f7ff fddf 	bl	800e368 <SX1276Write>
                TimerStop( &RxTimeoutTimer );
 800e7aa:	483d      	ldr	r0, [pc, #244]	@ (800e8a0 <SX1276OnDio0Irq+0x2ac>)
 800e7ac:	f7fe f8b2 	bl	800c914 <TimerStop>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800e7b0:	4b3d      	ldr	r3, [pc, #244]	@ (800e8a8 <SX1276OnDio0Irq+0x2b4>)
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d011      	beq.n	800e7dc <SX1276OnDio0Irq+0x1e8>
 800e7b8:	4b3b      	ldr	r3, [pc, #236]	@ (800e8a8 <SX1276OnDio0Irq+0x2b4>)
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	689b      	ldr	r3, [r3, #8]
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d00c      	beq.n	800e7dc <SX1276OnDio0Irq+0x1e8>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 800e7c2:	4b39      	ldr	r3, [pc, #228]	@ (800e8a8 <SX1276OnDio0Irq+0x2b4>)
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	689c      	ldr	r4, [r3, #8]
 800e7c8:	4b34      	ldr	r3, [pc, #208]	@ (800e89c <SX1276OnDio0Irq+0x2a8>)
 800e7ca:	f8b3 1146 	ldrh.w	r1, [r3, #326]	@ 0x146
 800e7ce:	4b33      	ldr	r3, [pc, #204]	@ (800e89c <SX1276OnDio0Irq+0x2a8>)
 800e7d0:	f993 313e 	ldrsb.w	r3, [r3, #318]	@ 0x13e
 800e7d4:	461a      	mov	r2, r3
 800e7d6:	2300      	movs	r3, #0
 800e7d8:	4835      	ldr	r0, [pc, #212]	@ (800e8b0 <SX1276OnDio0Irq+0x2bc>)
 800e7da:	47a0      	blx	r4
                SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800e7dc:	4b2f      	ldr	r3, [pc, #188]	@ (800e89c <SX1276OnDio0Irq+0x2a8>)
 800e7de:	2200      	movs	r2, #0
 800e7e0:	f883 213c 	strb.w	r2, [r3, #316]	@ 0x13c
                SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 800e7e4:	4b2d      	ldr	r3, [pc, #180]	@ (800e89c <SX1276OnDio0Irq+0x2a8>)
 800e7e6:	2200      	movs	r2, #0
 800e7e8:	f883 213d 	strb.w	r2, [r3, #317]	@ 0x13d
                SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800e7ec:	4b2b      	ldr	r3, [pc, #172]	@ (800e89c <SX1276OnDio0Irq+0x2a8>)
 800e7ee:	2200      	movs	r2, #0
 800e7f0:	f8a3 2148 	strh.w	r2, [r3, #328]	@ 0x148
                SX1276.Settings.FskPacketHandler.Size = 0;
 800e7f4:	4b29      	ldr	r3, [pc, #164]	@ (800e89c <SX1276OnDio0Irq+0x2a8>)
 800e7f6:	2200      	movs	r2, #0
 800e7f8:	f8a3 2146 	strh.w	r2, [r3, #326]	@ 0x146
                break;
 800e7fc:	e0f6      	b.n	800e9ec <SX1276OnDio0Irq+0x3f8>
                    int8_t snr = 0;
 800e7fe:	2300      	movs	r3, #0
 800e800:	71fb      	strb	r3, [r7, #7]
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 800e802:	2140      	movs	r1, #64	@ 0x40
 800e804:	2012      	movs	r0, #18
 800e806:	f7ff fdaf 	bl	800e368 <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 800e80a:	2012      	movs	r0, #18
 800e80c:	f7ff fdbe 	bl	800e38c <SX1276Read>
 800e810:	4603      	mov	r3, r0
 800e812:	70fb      	strb	r3, [r7, #3]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 800e814:	78fb      	ldrb	r3, [r7, #3]
 800e816:	b2db      	uxtb	r3, r3
 800e818:	f003 0320 	and.w	r3, r3, #32
 800e81c:	2b20      	cmp	r3, #32
 800e81e:	d122      	bne.n	800e866 <SX1276OnDio0Irq+0x272>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 800e820:	2120      	movs	r1, #32
 800e822:	2012      	movs	r0, #18
 800e824:	f7ff fda0 	bl	800e368 <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 800e828:	4b1c      	ldr	r3, [pc, #112]	@ (800e89c <SX1276OnDio0Irq+0x2a8>)
 800e82a:	f893 3162 	ldrb.w	r3, [r3, #354]	@ 0x162
 800e82e:	f083 0301 	eor.w	r3, r3, #1
 800e832:	b2db      	uxtb	r3, r3
 800e834:	2b00      	cmp	r3, #0
 800e836:	d003      	beq.n	800e840 <SX1276OnDio0Irq+0x24c>
                            SX1276.Settings.State = RF_IDLE;
 800e838:	4b18      	ldr	r3, [pc, #96]	@ (800e89c <SX1276OnDio0Irq+0x2a8>)
 800e83a:	2200      	movs	r2, #0
 800e83c:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
                        TimerStop( &RxTimeoutTimer );
 800e840:	4817      	ldr	r0, [pc, #92]	@ (800e8a0 <SX1276OnDio0Irq+0x2ac>)
 800e842:	f7fe f867 	bl	800c914 <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 800e846:	4b18      	ldr	r3, [pc, #96]	@ (800e8a8 <SX1276OnDio0Irq+0x2b4>)
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	f000 80cb 	beq.w	800e9e6 <SX1276OnDio0Irq+0x3f2>
 800e850:	4b15      	ldr	r3, [pc, #84]	@ (800e8a8 <SX1276OnDio0Irq+0x2b4>)
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	691b      	ldr	r3, [r3, #16]
 800e856:	2b00      	cmp	r3, #0
 800e858:	f000 80c5 	beq.w	800e9e6 <SX1276OnDio0Irq+0x3f2>
                            RadioEvents->RxError( );
 800e85c:	4b12      	ldr	r3, [pc, #72]	@ (800e8a8 <SX1276OnDio0Irq+0x2b4>)
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	691b      	ldr	r3, [r3, #16]
 800e862:	4798      	blx	r3
                        break;
 800e864:	e0bf      	b.n	800e9e6 <SX1276OnDio0Irq+0x3f2>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = SX1276Read( REG_LR_PKTSNRVALUE );
 800e866:	2019      	movs	r0, #25
 800e868:	f7ff fd90 	bl	800e38c <SX1276Read>
 800e86c:	4603      	mov	r3, r0
 800e86e:	b25a      	sxtb	r2, r3
 800e870:	4b0a      	ldr	r3, [pc, #40]	@ (800e89c <SX1276OnDio0Irq+0x2a8>)
 800e872:	f883 2168 	strb.w	r2, [r3, #360]	@ 0x168
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue & 0x80 ) // The SNR sign bit is 1
 800e876:	4b09      	ldr	r3, [pc, #36]	@ (800e89c <SX1276OnDio0Irq+0x2a8>)
 800e878:	f993 3168 	ldrsb.w	r3, [r3, #360]	@ 0x168
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	da19      	bge.n	800e8b4 <SX1276OnDio0Irq+0x2c0>
                        snr = ( ( ~SX1276.Settings.LoRaPacketHandler.SnrValue + 1 ) & 0xFF ) >> 2;
 800e880:	4b06      	ldr	r3, [pc, #24]	@ (800e89c <SX1276OnDio0Irq+0x2a8>)
 800e882:	f993 3168 	ldrsb.w	r3, [r3, #360]	@ 0x168
 800e886:	425b      	negs	r3, r3
 800e888:	109b      	asrs	r3, r3, #2
 800e88a:	b25b      	sxtb	r3, r3
 800e88c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e890:	71fb      	strb	r3, [r7, #7]
                        snr = -snr;
 800e892:	79fb      	ldrb	r3, [r7, #7]
 800e894:	425b      	negs	r3, r3
 800e896:	b2db      	uxtb	r3, r3
 800e898:	71fb      	strb	r3, [r7, #7]
 800e89a:	e013      	b.n	800e8c4 <SX1276OnDio0Irq+0x2d0>
 800e89c:	200005f4 	.word	0x200005f4
 800e8a0:	20000778 	.word	0x20000778
 800e8a4:	2000078c 	.word	0x2000078c
 800e8a8:	200004f0 	.word	0x200004f0
 800e8ac:	2000073a 	.word	0x2000073a
 800e8b0:	200004f4 	.word	0x200004f4
                        snr = ( SX1276.Settings.LoRaPacketHandler.SnrValue & 0xFF ) >> 2;
 800e8b4:	4b5f      	ldr	r3, [pc, #380]	@ (800ea34 <SX1276OnDio0Irq+0x440>)
 800e8b6:	f993 3168 	ldrsb.w	r3, [r3, #360]	@ 0x168
 800e8ba:	109b      	asrs	r3, r3, #2
 800e8bc:	b25b      	sxtb	r3, r3
 800e8be:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e8c2:	71fb      	strb	r3, [r7, #7]
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 800e8c4:	201a      	movs	r0, #26
 800e8c6:	f7ff fd61 	bl	800e38c <SX1276Read>
 800e8ca:	4603      	mov	r3, r0
 800e8cc:	80bb      	strh	r3, [r7, #4]
                    if( snr < 0 )
 800e8ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	da2d      	bge.n	800e932 <SX1276OnDio0Irq+0x33e>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800e8d6:	4b57      	ldr	r3, [pc, #348]	@ (800ea34 <SX1276OnDio0Irq+0x440>)
 800e8d8:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800e8dc:	4a56      	ldr	r2, [pc, #344]	@ (800ea38 <SX1276OnDio0Irq+0x444>)
 800e8de:	4293      	cmp	r3, r2
 800e8e0:	d913      	bls.n	800e90a <SX1276OnDio0Irq+0x316>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 800e8e2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800e8e6:	111b      	asrs	r3, r3, #4
 800e8e8:	b21b      	sxth	r3, r3
 800e8ea:	b29a      	uxth	r2, r3
 800e8ec:	88bb      	ldrh	r3, [r7, #4]
 800e8ee:	4413      	add	r3, r2
 800e8f0:	b29a      	uxth	r2, r3
 800e8f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e8f6:	b29b      	uxth	r3, r3
 800e8f8:	4413      	add	r3, r2
 800e8fa:	b29b      	uxth	r3, r3
 800e8fc:	3b9d      	subs	r3, #157	@ 0x9d
 800e8fe:	b29b      	uxth	r3, r3
 800e900:	b21a      	sxth	r2, r3
 800e902:	4b4c      	ldr	r3, [pc, #304]	@ (800ea34 <SX1276OnDio0Irq+0x440>)
 800e904:	f8a3 216a 	strh.w	r2, [r3, #362]	@ 0x16a
 800e908:	e036      	b.n	800e978 <SX1276OnDio0Irq+0x384>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 800e90a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800e90e:	111b      	asrs	r3, r3, #4
 800e910:	b21b      	sxth	r3, r3
 800e912:	b29a      	uxth	r2, r3
 800e914:	88bb      	ldrh	r3, [r7, #4]
 800e916:	4413      	add	r3, r2
 800e918:	b29a      	uxth	r2, r3
 800e91a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e91e:	b29b      	uxth	r3, r3
 800e920:	4413      	add	r3, r2
 800e922:	b29b      	uxth	r3, r3
 800e924:	3ba4      	subs	r3, #164	@ 0xa4
 800e926:	b29b      	uxth	r3, r3
 800e928:	b21a      	sxth	r2, r3
 800e92a:	4b42      	ldr	r3, [pc, #264]	@ (800ea34 <SX1276OnDio0Irq+0x440>)
 800e92c:	f8a3 216a 	strh.w	r2, [r3, #362]	@ 0x16a
 800e930:	e022      	b.n	800e978 <SX1276OnDio0Irq+0x384>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800e932:	4b40      	ldr	r3, [pc, #256]	@ (800ea34 <SX1276OnDio0Irq+0x440>)
 800e934:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800e938:	4a3f      	ldr	r2, [pc, #252]	@ (800ea38 <SX1276OnDio0Irq+0x444>)
 800e93a:	4293      	cmp	r3, r2
 800e93c:	d90e      	bls.n	800e95c <SX1276OnDio0Irq+0x368>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 800e93e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800e942:	111b      	asrs	r3, r3, #4
 800e944:	b21b      	sxth	r3, r3
 800e946:	b29a      	uxth	r2, r3
 800e948:	88bb      	ldrh	r3, [r7, #4]
 800e94a:	4413      	add	r3, r2
 800e94c:	b29b      	uxth	r3, r3
 800e94e:	3b9d      	subs	r3, #157	@ 0x9d
 800e950:	b29b      	uxth	r3, r3
 800e952:	b21a      	sxth	r2, r3
 800e954:	4b37      	ldr	r3, [pc, #220]	@ (800ea34 <SX1276OnDio0Irq+0x440>)
 800e956:	f8a3 216a 	strh.w	r2, [r3, #362]	@ 0x16a
 800e95a:	e00d      	b.n	800e978 <SX1276OnDio0Irq+0x384>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 800e95c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800e960:	111b      	asrs	r3, r3, #4
 800e962:	b21b      	sxth	r3, r3
 800e964:	b29a      	uxth	r2, r3
 800e966:	88bb      	ldrh	r3, [r7, #4]
 800e968:	4413      	add	r3, r2
 800e96a:	b29b      	uxth	r3, r3
 800e96c:	3ba4      	subs	r3, #164	@ 0xa4
 800e96e:	b29b      	uxth	r3, r3
 800e970:	b21a      	sxth	r2, r3
 800e972:	4b30      	ldr	r3, [pc, #192]	@ (800ea34 <SX1276OnDio0Irq+0x440>)
 800e974:	f8a3 216a 	strh.w	r2, [r3, #362]	@ 0x16a
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 800e978:	2013      	movs	r0, #19
 800e97a:	f7ff fd07 	bl	800e38c <SX1276Read>
 800e97e:	4603      	mov	r3, r0
 800e980:	461a      	mov	r2, r3
 800e982:	4b2c      	ldr	r3, [pc, #176]	@ (800ea34 <SX1276OnDio0Irq+0x440>)
 800e984:	f883 216c 	strb.w	r2, [r3, #364]	@ 0x16c
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
 800e988:	4b2a      	ldr	r3, [pc, #168]	@ (800ea34 <SX1276OnDio0Irq+0x440>)
 800e98a:	f893 316c 	ldrb.w	r3, [r3, #364]	@ 0x16c
 800e98e:	4619      	mov	r1, r3
 800e990:	482a      	ldr	r0, [pc, #168]	@ (800ea3c <SX1276OnDio0Irq+0x448>)
 800e992:	f7ff fd83 	bl	800e49c <SX1276ReadFifo>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 800e996:	4b27      	ldr	r3, [pc, #156]	@ (800ea34 <SX1276OnDio0Irq+0x440>)
 800e998:	f893 3162 	ldrb.w	r3, [r3, #354]	@ 0x162
 800e99c:	f083 0301 	eor.w	r3, r3, #1
 800e9a0:	b2db      	uxtb	r3, r3
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d003      	beq.n	800e9ae <SX1276OnDio0Irq+0x3ba>
                        SX1276.Settings.State = RF_IDLE;
 800e9a6:	4b23      	ldr	r3, [pc, #140]	@ (800ea34 <SX1276OnDio0Irq+0x440>)
 800e9a8:	2200      	movs	r2, #0
 800e9aa:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
                    TimerStop( &RxTimeoutTimer );
 800e9ae:	4824      	ldr	r0, [pc, #144]	@ (800ea40 <SX1276OnDio0Irq+0x44c>)
 800e9b0:	f7fd ffb0 	bl	800c914 <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800e9b4:	4b23      	ldr	r3, [pc, #140]	@ (800ea44 <SX1276OnDio0Irq+0x450>)
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d016      	beq.n	800e9ea <SX1276OnDio0Irq+0x3f6>
 800e9bc:	4b21      	ldr	r3, [pc, #132]	@ (800ea44 <SX1276OnDio0Irq+0x450>)
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	689b      	ldr	r3, [r3, #8]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d011      	beq.n	800e9ea <SX1276OnDio0Irq+0x3f6>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 800e9c6:	4b1f      	ldr	r3, [pc, #124]	@ (800ea44 <SX1276OnDio0Irq+0x450>)
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	689c      	ldr	r4, [r3, #8]
 800e9cc:	4b19      	ldr	r3, [pc, #100]	@ (800ea34 <SX1276OnDio0Irq+0x440>)
 800e9ce:	f893 316c 	ldrb.w	r3, [r3, #364]	@ 0x16c
 800e9d2:	4619      	mov	r1, r3
 800e9d4:	4b17      	ldr	r3, [pc, #92]	@ (800ea34 <SX1276OnDio0Irq+0x440>)
 800e9d6:	f9b3 216a 	ldrsh.w	r2, [r3, #362]	@ 0x16a
 800e9da:	4b16      	ldr	r3, [pc, #88]	@ (800ea34 <SX1276OnDio0Irq+0x440>)
 800e9dc:	f993 3168 	ldrsb.w	r3, [r3, #360]	@ 0x168
 800e9e0:	4816      	ldr	r0, [pc, #88]	@ (800ea3c <SX1276OnDio0Irq+0x448>)
 800e9e2:	47a0      	blx	r4
                break;
 800e9e4:	e001      	b.n	800e9ea <SX1276OnDio0Irq+0x3f6>
                        break;
 800e9e6:	bf00      	nop
 800e9e8:	e020      	b.n	800ea2c <SX1276OnDio0Irq+0x438>
                break;
 800e9ea:	bf00      	nop
            break;
 800e9ec:	e01e      	b.n	800ea2c <SX1276OnDio0Irq+0x438>
            TimerStop( &TxTimeoutTimer );
 800e9ee:	4816      	ldr	r0, [pc, #88]	@ (800ea48 <SX1276OnDio0Irq+0x454>)
 800e9f0:	f7fd ff90 	bl	800c914 <TimerStop>
            switch( SX1276.Settings.Modem )
 800e9f4:	4b0f      	ldr	r3, [pc, #60]	@ (800ea34 <SX1276OnDio0Irq+0x440>)
 800e9f6:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 800e9fa:	2b01      	cmp	r3, #1
 800e9fc:	d103      	bne.n	800ea06 <SX1276OnDio0Irq+0x412>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 800e9fe:	2108      	movs	r1, #8
 800ea00:	2012      	movs	r0, #18
 800ea02:	f7ff fcb1 	bl	800e368 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 800ea06:	4b0b      	ldr	r3, [pc, #44]	@ (800ea34 <SX1276OnDio0Irq+0x440>)
 800ea08:	2200      	movs	r2, #0
 800ea0a:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800ea0e:	4b0d      	ldr	r3, [pc, #52]	@ (800ea44 <SX1276OnDio0Irq+0x450>)
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d008      	beq.n	800ea28 <SX1276OnDio0Irq+0x434>
 800ea16:	4b0b      	ldr	r3, [pc, #44]	@ (800ea44 <SX1276OnDio0Irq+0x450>)
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d003      	beq.n	800ea28 <SX1276OnDio0Irq+0x434>
                    RadioEvents->TxDone( );
 800ea20:	4b08      	ldr	r3, [pc, #32]	@ (800ea44 <SX1276OnDio0Irq+0x450>)
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	4798      	blx	r3
                break;
 800ea28:	bf00      	nop
            break;
 800ea2a:	bf00      	nop
    }
}
 800ea2c:	bf00      	nop
 800ea2e:	370c      	adds	r7, #12
 800ea30:	46bd      	mov	sp, r7
 800ea32:	bd90      	pop	{r4, r7, pc}
 800ea34:	200005f4 	.word	0x200005f4
 800ea38:	1f4add40 	.word	0x1f4add40
 800ea3c:	200004f4 	.word	0x200004f4
 800ea40:	20000778 	.word	0x20000778
 800ea44:	200004f0 	.word	0x200004f0
 800ea48:	20000764 	.word	0x20000764

0800ea4c <SX1276OnDio1Irq>:

void SX1276OnDio1Irq( void )
{
 800ea4c:	b580      	push	{r7, lr}
 800ea4e:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.State )
 800ea50:	4b6a      	ldr	r3, [pc, #424]	@ (800ebfc <SX1276OnDio1Irq+0x1b0>)
 800ea52:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 800ea56:	2b01      	cmp	r3, #1
 800ea58:	d003      	beq.n	800ea62 <SX1276OnDio1Irq+0x16>
 800ea5a:	2b02      	cmp	r3, #2
 800ea5c:	f000 8082 	beq.w	800eb64 <SX1276OnDio1Irq+0x118>
            default:
                break;
            }
            break;
        default:
            break;
 800ea60:	e0ca      	b.n	800ebf8 <SX1276OnDio1Irq+0x1ac>
            switch( SX1276.Settings.Modem )
 800ea62:	4b66      	ldr	r3, [pc, #408]	@ (800ebfc <SX1276OnDio1Irq+0x1b0>)
 800ea64:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d002      	beq.n	800ea72 <SX1276OnDio1Irq+0x26>
 800ea6c:	2b01      	cmp	r3, #1
 800ea6e:	d05f      	beq.n	800eb30 <SX1276OnDio1Irq+0xe4>
                break;
 800ea70:	e077      	b.n	800eb62 <SX1276OnDio1Irq+0x116>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 800ea72:	4b62      	ldr	r3, [pc, #392]	@ (800ebfc <SX1276OnDio1Irq+0x1b0>)
 800ea74:	f8b3 3146 	ldrh.w	r3, [r3, #326]	@ 0x146
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d119      	bne.n	800eab0 <SX1276OnDio1Irq+0x64>
 800ea7c:	4b5f      	ldr	r3, [pc, #380]	@ (800ebfc <SX1276OnDio1Irq+0x1b0>)
 800ea7e:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d114      	bne.n	800eab0 <SX1276OnDio1Irq+0x64>
                    if( SX1276.Settings.Fsk.FixLen == false )
 800ea86:	4b5d      	ldr	r3, [pc, #372]	@ (800ebfc <SX1276OnDio1Irq+0x1b0>)
 800ea88:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 800ea8c:	f083 0301 	eor.w	r3, r3, #1
 800ea90:	b2db      	uxtb	r3, r3
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d004      	beq.n	800eaa0 <SX1276OnDio1Irq+0x54>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 800ea96:	2101      	movs	r1, #1
 800ea98:	4859      	ldr	r0, [pc, #356]	@ (800ec00 <SX1276OnDio1Irq+0x1b4>)
 800ea9a:	f7ff fcff 	bl	800e49c <SX1276ReadFifo>
 800ea9e:	e007      	b.n	800eab0 <SX1276OnDio1Irq+0x64>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 800eaa0:	2032      	movs	r0, #50	@ 0x32
 800eaa2:	f7ff fc73 	bl	800e38c <SX1276Read>
 800eaa6:	4603      	mov	r3, r0
 800eaa8:	461a      	mov	r2, r3
 800eaaa:	4b54      	ldr	r3, [pc, #336]	@ (800ebfc <SX1276OnDio1Irq+0x1b0>)
 800eaac:	f8a3 2146 	strh.w	r2, [r3, #326]	@ 0x146
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.FifoThresh )
 800eab0:	4b52      	ldr	r3, [pc, #328]	@ (800ebfc <SX1276OnDio1Irq+0x1b0>)
 800eab2:	f8b3 3146 	ldrh.w	r3, [r3, #326]	@ 0x146
 800eab6:	461a      	mov	r2, r3
 800eab8:	4b50      	ldr	r3, [pc, #320]	@ (800ebfc <SX1276OnDio1Irq+0x1b0>)
 800eaba:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 800eabe:	1ad3      	subs	r3, r2, r3
 800eac0:	4a4e      	ldr	r2, [pc, #312]	@ (800ebfc <SX1276OnDio1Irq+0x1b0>)
 800eac2:	f892 214a 	ldrb.w	r2, [r2, #330]	@ 0x14a
 800eac6:	4293      	cmp	r3, r2
 800eac8:	dd18      	ble.n	800eafc <SX1276OnDio1Irq+0xb0>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh );
 800eaca:	4b4c      	ldr	r3, [pc, #304]	@ (800ebfc <SX1276OnDio1Irq+0x1b0>)
 800eacc:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 800ead0:	461a      	mov	r2, r3
 800ead2:	4b4c      	ldr	r3, [pc, #304]	@ (800ec04 <SX1276OnDio1Irq+0x1b8>)
 800ead4:	4413      	add	r3, r2
 800ead6:	4a49      	ldr	r2, [pc, #292]	@ (800ebfc <SX1276OnDio1Irq+0x1b0>)
 800ead8:	f892 214a 	ldrb.w	r2, [r2, #330]	@ 0x14a
 800eadc:	4611      	mov	r1, r2
 800eade:	4618      	mov	r0, r3
 800eae0:	f7ff fcdc 	bl	800e49c <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh;
 800eae4:	4b45      	ldr	r3, [pc, #276]	@ (800ebfc <SX1276OnDio1Irq+0x1b0>)
 800eae6:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 800eaea:	4a44      	ldr	r2, [pc, #272]	@ (800ebfc <SX1276OnDio1Irq+0x1b0>)
 800eaec:	f892 214a 	ldrb.w	r2, [r2, #330]	@ 0x14a
 800eaf0:	4413      	add	r3, r2
 800eaf2:	b29a      	uxth	r2, r3
 800eaf4:	4b41      	ldr	r3, [pc, #260]	@ (800ebfc <SX1276OnDio1Irq+0x1b0>)
 800eaf6:	f8a3 2148 	strh.w	r2, [r3, #328]	@ 0x148
                break;
 800eafa:	e032      	b.n	800eb62 <SX1276OnDio1Irq+0x116>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800eafc:	4b3f      	ldr	r3, [pc, #252]	@ (800ebfc <SX1276OnDio1Irq+0x1b0>)
 800eafe:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 800eb02:	461a      	mov	r2, r3
 800eb04:	4b3f      	ldr	r3, [pc, #252]	@ (800ec04 <SX1276OnDio1Irq+0x1b8>)
 800eb06:	18d0      	adds	r0, r2, r3
 800eb08:	4b3c      	ldr	r3, [pc, #240]	@ (800ebfc <SX1276OnDio1Irq+0x1b0>)
 800eb0a:	f8b3 3146 	ldrh.w	r3, [r3, #326]	@ 0x146
 800eb0e:	b2da      	uxtb	r2, r3
 800eb10:	4b3a      	ldr	r3, [pc, #232]	@ (800ebfc <SX1276OnDio1Irq+0x1b0>)
 800eb12:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 800eb16:	b2db      	uxtb	r3, r3
 800eb18:	1ad3      	subs	r3, r2, r3
 800eb1a:	b2db      	uxtb	r3, r3
 800eb1c:	4619      	mov	r1, r3
 800eb1e:	f7ff fcbd 	bl	800e49c <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800eb22:	4b36      	ldr	r3, [pc, #216]	@ (800ebfc <SX1276OnDio1Irq+0x1b0>)
 800eb24:	f8b3 2146 	ldrh.w	r2, [r3, #326]	@ 0x146
 800eb28:	4b34      	ldr	r3, [pc, #208]	@ (800ebfc <SX1276OnDio1Irq+0x1b0>)
 800eb2a:	f8a3 2148 	strh.w	r2, [r3, #328]	@ 0x148
                break;
 800eb2e:	e018      	b.n	800eb62 <SX1276OnDio1Irq+0x116>
                TimerStop( &RxTimeoutTimer );
 800eb30:	4835      	ldr	r0, [pc, #212]	@ (800ec08 <SX1276OnDio1Irq+0x1bc>)
 800eb32:	f7fd feef 	bl	800c914 <TimerStop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 800eb36:	2180      	movs	r1, #128	@ 0x80
 800eb38:	2012      	movs	r0, #18
 800eb3a:	f7ff fc15 	bl	800e368 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 800eb3e:	4b2f      	ldr	r3, [pc, #188]	@ (800ebfc <SX1276OnDio1Irq+0x1b0>)
 800eb40:	2200      	movs	r2, #0
 800eb42:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800eb46:	4b31      	ldr	r3, [pc, #196]	@ (800ec0c <SX1276OnDio1Irq+0x1c0>)
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d008      	beq.n	800eb60 <SX1276OnDio1Irq+0x114>
 800eb4e:	4b2f      	ldr	r3, [pc, #188]	@ (800ec0c <SX1276OnDio1Irq+0x1c0>)
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	68db      	ldr	r3, [r3, #12]
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d003      	beq.n	800eb60 <SX1276OnDio1Irq+0x114>
                    RadioEvents->RxTimeout( );
 800eb58:	4b2c      	ldr	r3, [pc, #176]	@ (800ec0c <SX1276OnDio1Irq+0x1c0>)
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	68db      	ldr	r3, [r3, #12]
 800eb5e:	4798      	blx	r3
                break;
 800eb60:	bf00      	nop
            break;
 800eb62:	e049      	b.n	800ebf8 <SX1276OnDio1Irq+0x1ac>
            switch( SX1276.Settings.Modem )
 800eb64:	4b25      	ldr	r3, [pc, #148]	@ (800ebfc <SX1276OnDio1Irq+0x1b0>)
 800eb66:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d002      	beq.n	800eb74 <SX1276OnDio1Irq+0x128>
 800eb6e:	2b01      	cmp	r3, #1
 800eb70:	d040      	beq.n	800ebf4 <SX1276OnDio1Irq+0x1a8>
                break;
 800eb72:	e040      	b.n	800ebf6 <SX1276OnDio1Irq+0x1aa>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 800eb74:	4b21      	ldr	r3, [pc, #132]	@ (800ebfc <SX1276OnDio1Irq+0x1b0>)
 800eb76:	f8b3 3146 	ldrh.w	r3, [r3, #326]	@ 0x146
 800eb7a:	461a      	mov	r2, r3
 800eb7c:	4b1f      	ldr	r3, [pc, #124]	@ (800ebfc <SX1276OnDio1Irq+0x1b0>)
 800eb7e:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 800eb82:	1ad3      	subs	r3, r2, r3
 800eb84:	4a1d      	ldr	r2, [pc, #116]	@ (800ebfc <SX1276OnDio1Irq+0x1b0>)
 800eb86:	f892 214b 	ldrb.w	r2, [r2, #331]	@ 0x14b
 800eb8a:	4293      	cmp	r3, r2
 800eb8c:	dd18      	ble.n	800ebc0 <SX1276OnDio1Irq+0x174>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 800eb8e:	4b1b      	ldr	r3, [pc, #108]	@ (800ebfc <SX1276OnDio1Irq+0x1b0>)
 800eb90:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 800eb94:	461a      	mov	r2, r3
 800eb96:	4b1b      	ldr	r3, [pc, #108]	@ (800ec04 <SX1276OnDio1Irq+0x1b8>)
 800eb98:	4413      	add	r3, r2
 800eb9a:	4a18      	ldr	r2, [pc, #96]	@ (800ebfc <SX1276OnDio1Irq+0x1b0>)
 800eb9c:	f892 214b 	ldrb.w	r2, [r2, #331]	@ 0x14b
 800eba0:	4611      	mov	r1, r2
 800eba2:	4618      	mov	r0, r3
 800eba4:	f7ff fc6a 	bl	800e47c <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 800eba8:	4b14      	ldr	r3, [pc, #80]	@ (800ebfc <SX1276OnDio1Irq+0x1b0>)
 800ebaa:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 800ebae:	4a13      	ldr	r2, [pc, #76]	@ (800ebfc <SX1276OnDio1Irq+0x1b0>)
 800ebb0:	f892 214b 	ldrb.w	r2, [r2, #331]	@ 0x14b
 800ebb4:	4413      	add	r3, r2
 800ebb6:	b29a      	uxth	r2, r3
 800ebb8:	4b10      	ldr	r3, [pc, #64]	@ (800ebfc <SX1276OnDio1Irq+0x1b0>)
 800ebba:	f8a3 2148 	strh.w	r2, [r3, #328]	@ 0x148
                break;
 800ebbe:	e01a      	b.n	800ebf6 <SX1276OnDio1Irq+0x1aa>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800ebc0:	4b0e      	ldr	r3, [pc, #56]	@ (800ebfc <SX1276OnDio1Irq+0x1b0>)
 800ebc2:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 800ebc6:	461a      	mov	r2, r3
 800ebc8:	4b0e      	ldr	r3, [pc, #56]	@ (800ec04 <SX1276OnDio1Irq+0x1b8>)
 800ebca:	18d0      	adds	r0, r2, r3
 800ebcc:	4b0b      	ldr	r3, [pc, #44]	@ (800ebfc <SX1276OnDio1Irq+0x1b0>)
 800ebce:	f8b3 3146 	ldrh.w	r3, [r3, #326]	@ 0x146
 800ebd2:	b2da      	uxtb	r2, r3
 800ebd4:	4b09      	ldr	r3, [pc, #36]	@ (800ebfc <SX1276OnDio1Irq+0x1b0>)
 800ebd6:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 800ebda:	b2db      	uxtb	r3, r3
 800ebdc:	1ad3      	subs	r3, r2, r3
 800ebde:	b2db      	uxtb	r3, r3
 800ebe0:	4619      	mov	r1, r3
 800ebe2:	f7ff fc4b 	bl	800e47c <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 800ebe6:	4b05      	ldr	r3, [pc, #20]	@ (800ebfc <SX1276OnDio1Irq+0x1b0>)
 800ebe8:	f8b3 2146 	ldrh.w	r2, [r3, #326]	@ 0x146
 800ebec:	4b03      	ldr	r3, [pc, #12]	@ (800ebfc <SX1276OnDio1Irq+0x1b0>)
 800ebee:	f8a3 2148 	strh.w	r2, [r3, #328]	@ 0x148
                break;
 800ebf2:	e000      	b.n	800ebf6 <SX1276OnDio1Irq+0x1aa>
                break;
 800ebf4:	bf00      	nop
            break;
 800ebf6:	bf00      	nop
    }
}
 800ebf8:	bf00      	nop
 800ebfa:	bd80      	pop	{r7, pc}
 800ebfc:	200005f4 	.word	0x200005f4
 800ec00:	2000073a 	.word	0x2000073a
 800ec04:	200004f4 	.word	0x200004f4
 800ec08:	20000778 	.word	0x20000778
 800ec0c:	200004f0 	.word	0x200004f0

0800ec10 <SX1276OnDio2Irq>:

void SX1276OnDio2Irq( void )
{
 800ec10:	b598      	push	{r3, r4, r7, lr}
 800ec12:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.State )
 800ec14:	4b5a      	ldr	r3, [pc, #360]	@ (800ed80 <SX1276OnDio2Irq+0x170>)
 800ec16:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 800ec1a:	2b01      	cmp	r3, #1
 800ec1c:	d002      	beq.n	800ec24 <SX1276OnDio2Irq+0x14>
 800ec1e:	2b02      	cmp	r3, #2
 800ec20:	d07b      	beq.n	800ed1a <SX1276OnDio2Irq+0x10a>
            default:
                break;
            }
            break;
        default:
            break;
 800ec22:	e0a5      	b.n	800ed70 <SX1276OnDio2Irq+0x160>
            switch( SX1276.Settings.Modem )
 800ec24:	4b56      	ldr	r3, [pc, #344]	@ (800ed80 <SX1276OnDio2Irq+0x170>)
 800ec26:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d002      	beq.n	800ec34 <SX1276OnDio2Irq+0x24>
 800ec2e:	2b01      	cmp	r3, #1
 800ec30:	d050      	beq.n	800ecd4 <SX1276OnDio2Irq+0xc4>
                break;
 800ec32:	e071      	b.n	800ed18 <SX1276OnDio2Irq+0x108>
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected == true ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == false ) )
 800ec34:	4b52      	ldr	r3, [pc, #328]	@ (800ed80 <SX1276OnDio2Irq+0x170>)
 800ec36:	f893 313c 	ldrb.w	r3, [r3, #316]	@ 0x13c
 800ec3a:	2b01      	cmp	r3, #1
 800ec3c:	d169      	bne.n	800ed12 <SX1276OnDio2Irq+0x102>
 800ec3e:	4b50      	ldr	r3, [pc, #320]	@ (800ed80 <SX1276OnDio2Irq+0x170>)
 800ec40:	f893 313d 	ldrb.w	r3, [r3, #317]	@ 0x13d
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d164      	bne.n	800ed12 <SX1276OnDio2Irq+0x102>
                    TimerStop( &RxTimeoutSyncWord );
 800ec48:	484e      	ldr	r0, [pc, #312]	@ (800ed84 <SX1276OnDio2Irq+0x174>)
 800ec4a:	f7fd fe63 	bl	800c914 <TimerStop>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 800ec4e:	4b4c      	ldr	r3, [pc, #304]	@ (800ed80 <SX1276OnDio2Irq+0x170>)
 800ec50:	2201      	movs	r2, #1
 800ec52:	f883 213d 	strb.w	r2, [r3, #317]	@ 0x13d
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 800ec56:	2011      	movs	r0, #17
 800ec58:	f7ff fb98 	bl	800e38c <SX1276Read>
 800ec5c:	4603      	mov	r3, r0
 800ec5e:	085b      	lsrs	r3, r3, #1
 800ec60:	b2db      	uxtb	r3, r3
 800ec62:	425b      	negs	r3, r3
 800ec64:	b2db      	uxtb	r3, r3
 800ec66:	b25a      	sxtb	r2, r3
 800ec68:	4b45      	ldr	r3, [pc, #276]	@ (800ed80 <SX1276OnDio2Irq+0x170>)
 800ec6a:	f883 213e 	strb.w	r2, [r3, #318]	@ 0x13e
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )( double )( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 800ec6e:	201b      	movs	r0, #27
 800ec70:	f7ff fb8c 	bl	800e38c <SX1276Read>
 800ec74:	4603      	mov	r3, r0
 800ec76:	021c      	lsls	r4, r3, #8
                                                                           ( uint16_t )SX1276Read( REG_AFCLSB ) ) *
 800ec78:	201c      	movs	r0, #28
 800ec7a:	f7ff fb87 	bl	800e38c <SX1276Read>
 800ec7e:	4603      	mov	r3, r0
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )( double )( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 800ec80:	4323      	orrs	r3, r4
 800ec82:	4618      	mov	r0, r3
 800ec84:	f7f3 f9e0 	bl	8002048 <__aeabi_i2d>
 800ec88:	4602      	mov	r2, r0
 800ec8a:	460b      	mov	r3, r1
 800ec8c:	4610      	mov	r0, r2
 800ec8e:	4619      	mov	r1, r3
 800ec90:	f7f3 fcf4 	bl	800267c <__aeabi_d2iz>
 800ec94:	4603      	mov	r3, r0
                                                                           ( uint16_t )SX1276Read( REG_AFCLSB ) ) *
 800ec96:	4618      	mov	r0, r3
 800ec98:	f7f3 f9d6 	bl	8002048 <__aeabi_i2d>
 800ec9c:	a336      	add	r3, pc, #216	@ (adr r3, 800ed78 <SX1276OnDio2Irq+0x168>)
 800ec9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eca2:	f7f3 fa3b 	bl	800211c <__aeabi_dmul>
 800eca6:	4602      	mov	r2, r0
 800eca8:	460b      	mov	r3, r1
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )( double )( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 800ecaa:	4610      	mov	r0, r2
 800ecac:	4619      	mov	r1, r3
 800ecae:	f7f3 fce5 	bl	800267c <__aeabi_d2iz>
 800ecb2:	4603      	mov	r3, r0
 800ecb4:	4a32      	ldr	r2, [pc, #200]	@ (800ed80 <SX1276OnDio2Irq+0x170>)
 800ecb6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 800ecba:	200c      	movs	r0, #12
 800ecbc:	f7ff fb66 	bl	800e38c <SX1276Read>
 800ecc0:	4603      	mov	r3, r0
 800ecc2:	095b      	lsrs	r3, r3, #5
 800ecc4:	b2db      	uxtb	r3, r3
 800ecc6:	f003 0307 	and.w	r3, r3, #7
 800ecca:	b2da      	uxtb	r2, r3
 800eccc:	4b2c      	ldr	r3, [pc, #176]	@ (800ed80 <SX1276OnDio2Irq+0x170>)
 800ecce:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
                break;
 800ecd2:	e01e      	b.n	800ed12 <SX1276OnDio2Irq+0x102>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 800ecd4:	4b2a      	ldr	r3, [pc, #168]	@ (800ed80 <SX1276OnDio2Irq+0x170>)
 800ecd6:	f893 315f 	ldrb.w	r3, [r3, #351]	@ 0x15f
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d01b      	beq.n	800ed16 <SX1276OnDio2Irq+0x106>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 800ecde:	2102      	movs	r1, #2
 800ece0:	2012      	movs	r0, #18
 800ece2:	f7ff fb41 	bl	800e368 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 800ece6:	4b28      	ldr	r3, [pc, #160]	@ (800ed88 <SX1276OnDio2Irq+0x178>)
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d013      	beq.n	800ed16 <SX1276OnDio2Irq+0x106>
 800ecee:	4b26      	ldr	r3, [pc, #152]	@ (800ed88 <SX1276OnDio2Irq+0x178>)
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	695b      	ldr	r3, [r3, #20]
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d00e      	beq.n	800ed16 <SX1276OnDio2Irq+0x106>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 800ecf8:	4b23      	ldr	r3, [pc, #140]	@ (800ed88 <SX1276OnDio2Irq+0x178>)
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	695c      	ldr	r4, [r3, #20]
 800ecfe:	201c      	movs	r0, #28
 800ed00:	f7ff fb44 	bl	800e38c <SX1276Read>
 800ed04:	4603      	mov	r3, r0
 800ed06:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ed0a:	b2db      	uxtb	r3, r3
 800ed0c:	4618      	mov	r0, r3
 800ed0e:	47a0      	blx	r4
                break;
 800ed10:	e001      	b.n	800ed16 <SX1276OnDio2Irq+0x106>
                break;
 800ed12:	bf00      	nop
 800ed14:	e02c      	b.n	800ed70 <SX1276OnDio2Irq+0x160>
                break;
 800ed16:	bf00      	nop
            break;
 800ed18:	e02a      	b.n	800ed70 <SX1276OnDio2Irq+0x160>
            switch( SX1276.Settings.Modem )
 800ed1a:	4b19      	ldr	r3, [pc, #100]	@ (800ed80 <SX1276OnDio2Irq+0x170>)
 800ed1c:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d021      	beq.n	800ed68 <SX1276OnDio2Irq+0x158>
 800ed24:	2b01      	cmp	r3, #1
 800ed26:	d000      	beq.n	800ed2a <SX1276OnDio2Irq+0x11a>
                break;
 800ed28:	e021      	b.n	800ed6e <SX1276OnDio2Irq+0x15e>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 800ed2a:	4b15      	ldr	r3, [pc, #84]	@ (800ed80 <SX1276OnDio2Irq+0x170>)
 800ed2c:	f893 315f 	ldrb.w	r3, [r3, #351]	@ 0x15f
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d01b      	beq.n	800ed6c <SX1276OnDio2Irq+0x15c>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 800ed34:	2102      	movs	r1, #2
 800ed36:	2012      	movs	r0, #18
 800ed38:	f7ff fb16 	bl	800e368 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 800ed3c:	4b12      	ldr	r3, [pc, #72]	@ (800ed88 <SX1276OnDio2Irq+0x178>)
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d013      	beq.n	800ed6c <SX1276OnDio2Irq+0x15c>
 800ed44:	4b10      	ldr	r3, [pc, #64]	@ (800ed88 <SX1276OnDio2Irq+0x178>)
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	695b      	ldr	r3, [r3, #20]
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d00e      	beq.n	800ed6c <SX1276OnDio2Irq+0x15c>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 800ed4e:	4b0e      	ldr	r3, [pc, #56]	@ (800ed88 <SX1276OnDio2Irq+0x178>)
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	695c      	ldr	r4, [r3, #20]
 800ed54:	201c      	movs	r0, #28
 800ed56:	f7ff fb19 	bl	800e38c <SX1276Read>
 800ed5a:	4603      	mov	r3, r0
 800ed5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ed60:	b2db      	uxtb	r3, r3
 800ed62:	4618      	mov	r0, r3
 800ed64:	47a0      	blx	r4
                break;
 800ed66:	e001      	b.n	800ed6c <SX1276OnDio2Irq+0x15c>
                break;
 800ed68:	bf00      	nop
 800ed6a:	e000      	b.n	800ed6e <SX1276OnDio2Irq+0x15e>
                break;
 800ed6c:	bf00      	nop
            break;
 800ed6e:	bf00      	nop
    }
}
 800ed70:	bf00      	nop
 800ed72:	bd98      	pop	{r3, r4, r7, pc}
 800ed74:	f3af 8000 	nop.w
 800ed78:	00000000 	.word	0x00000000
 800ed7c:	404e8480 	.word	0x404e8480
 800ed80:	200005f4 	.word	0x200005f4
 800ed84:	2000078c 	.word	0x2000078c
 800ed88:	200004f0 	.word	0x200004f0

0800ed8c <SX1276OnDio3Irq>:

void SX1276OnDio3Irq( void )
{
 800ed8c:	b580      	push	{r7, lr}
 800ed8e:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 800ed90:	4b1d      	ldr	r3, [pc, #116]	@ (800ee08 <SX1276OnDio3Irq+0x7c>)
 800ed92:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d030      	beq.n	800edfc <SX1276OnDio3Irq+0x70>
 800ed9a:	2b01      	cmp	r3, #1
 800ed9c:	d000      	beq.n	800eda0 <SX1276OnDio3Irq+0x14>
                RadioEvents->CadDone( false );
            }
        }
        break;
    default:
        break;
 800ed9e:	e030      	b.n	800ee02 <SX1276OnDio3Irq+0x76>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 800eda0:	2012      	movs	r0, #18
 800eda2:	f7ff faf3 	bl	800e38c <SX1276Read>
 800eda6:	4603      	mov	r3, r0
 800eda8:	f003 0301 	and.w	r3, r3, #1
 800edac:	2b01      	cmp	r3, #1
 800edae:	d112      	bne.n	800edd6 <SX1276OnDio3Irq+0x4a>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 800edb0:	2105      	movs	r1, #5
 800edb2:	2012      	movs	r0, #18
 800edb4:	f7ff fad8 	bl	800e368 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800edb8:	4b14      	ldr	r3, [pc, #80]	@ (800ee0c <SX1276OnDio3Irq+0x80>)
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d01f      	beq.n	800ee00 <SX1276OnDio3Irq+0x74>
 800edc0:	4b12      	ldr	r3, [pc, #72]	@ (800ee0c <SX1276OnDio3Irq+0x80>)
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	699b      	ldr	r3, [r3, #24]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d01a      	beq.n	800ee00 <SX1276OnDio3Irq+0x74>
                RadioEvents->CadDone( true );
 800edca:	4b10      	ldr	r3, [pc, #64]	@ (800ee0c <SX1276OnDio3Irq+0x80>)
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	699b      	ldr	r3, [r3, #24]
 800edd0:	2001      	movs	r0, #1
 800edd2:	4798      	blx	r3
        break;
 800edd4:	e014      	b.n	800ee00 <SX1276OnDio3Irq+0x74>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 800edd6:	2104      	movs	r1, #4
 800edd8:	2012      	movs	r0, #18
 800edda:	f7ff fac5 	bl	800e368 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800edde:	4b0b      	ldr	r3, [pc, #44]	@ (800ee0c <SX1276OnDio3Irq+0x80>)
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d00c      	beq.n	800ee00 <SX1276OnDio3Irq+0x74>
 800ede6:	4b09      	ldr	r3, [pc, #36]	@ (800ee0c <SX1276OnDio3Irq+0x80>)
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	699b      	ldr	r3, [r3, #24]
 800edec:	2b00      	cmp	r3, #0
 800edee:	d007      	beq.n	800ee00 <SX1276OnDio3Irq+0x74>
                RadioEvents->CadDone( false );
 800edf0:	4b06      	ldr	r3, [pc, #24]	@ (800ee0c <SX1276OnDio3Irq+0x80>)
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	699b      	ldr	r3, [r3, #24]
 800edf6:	2000      	movs	r0, #0
 800edf8:	4798      	blx	r3
        break;
 800edfa:	e001      	b.n	800ee00 <SX1276OnDio3Irq+0x74>
        break;
 800edfc:	bf00      	nop
 800edfe:	e000      	b.n	800ee02 <SX1276OnDio3Irq+0x76>
        break;
 800ee00:	bf00      	nop
    }
}
 800ee02:	bf00      	nop
 800ee04:	bd80      	pop	{r7, pc}
 800ee06:	bf00      	nop
 800ee08:	200005f4 	.word	0x200005f4
 800ee0c:	200004f0 	.word	0x200004f0

0800ee10 <SX1276OnDio4Irq>:

void SX1276OnDio4Irq( void )
{
 800ee10:	b480      	push	{r7}
 800ee12:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 800ee14:	4b0c      	ldr	r3, [pc, #48]	@ (800ee48 <SX1276OnDio4Irq+0x38>)
 800ee16:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d002      	beq.n	800ee24 <SX1276OnDio4Irq+0x14>
 800ee1e:	2b01      	cmp	r3, #1
 800ee20:	d00a      	beq.n	800ee38 <SX1276OnDio4Irq+0x28>
        }
        break;
    case MODEM_LORA:
        break;
    default:
        break;
 800ee22:	e00c      	b.n	800ee3e <SX1276OnDio4Irq+0x2e>
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 800ee24:	4b08      	ldr	r3, [pc, #32]	@ (800ee48 <SX1276OnDio4Irq+0x38>)
 800ee26:	f893 313c 	ldrb.w	r3, [r3, #316]	@ 0x13c
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d106      	bne.n	800ee3c <SX1276OnDio4Irq+0x2c>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 800ee2e:	4b06      	ldr	r3, [pc, #24]	@ (800ee48 <SX1276OnDio4Irq+0x38>)
 800ee30:	2201      	movs	r2, #1
 800ee32:	f883 213c 	strb.w	r2, [r3, #316]	@ 0x13c
        break;
 800ee36:	e001      	b.n	800ee3c <SX1276OnDio4Irq+0x2c>
        break;
 800ee38:	bf00      	nop
 800ee3a:	e000      	b.n	800ee3e <SX1276OnDio4Irq+0x2e>
        break;
 800ee3c:	bf00      	nop
    }
}
 800ee3e:	bf00      	nop
 800ee40:	46bd      	mov	sp, r7
 800ee42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee46:	4770      	bx	lr
 800ee48:	200005f4 	.word	0x200005f4

0800ee4c <__cvt>:
 800ee4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ee50:	ec57 6b10 	vmov	r6, r7, d0
 800ee54:	2f00      	cmp	r7, #0
 800ee56:	460c      	mov	r4, r1
 800ee58:	4619      	mov	r1, r3
 800ee5a:	463b      	mov	r3, r7
 800ee5c:	bfb4      	ite	lt
 800ee5e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800ee62:	2300      	movge	r3, #0
 800ee64:	4691      	mov	r9, r2
 800ee66:	bfbf      	itttt	lt
 800ee68:	4632      	movlt	r2, r6
 800ee6a:	461f      	movlt	r7, r3
 800ee6c:	232d      	movlt	r3, #45	@ 0x2d
 800ee6e:	4616      	movlt	r6, r2
 800ee70:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800ee74:	700b      	strb	r3, [r1, #0]
 800ee76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ee78:	f023 0820 	bic.w	r8, r3, #32
 800ee7c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ee80:	d005      	beq.n	800ee8e <__cvt+0x42>
 800ee82:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800ee86:	d100      	bne.n	800ee8a <__cvt+0x3e>
 800ee88:	3401      	adds	r4, #1
 800ee8a:	2102      	movs	r1, #2
 800ee8c:	e000      	b.n	800ee90 <__cvt+0x44>
 800ee8e:	2103      	movs	r1, #3
 800ee90:	ab03      	add	r3, sp, #12
 800ee92:	4622      	mov	r2, r4
 800ee94:	9301      	str	r3, [sp, #4]
 800ee96:	ab02      	add	r3, sp, #8
 800ee98:	ec47 6b10 	vmov	d0, r6, r7
 800ee9c:	9300      	str	r3, [sp, #0]
 800ee9e:	4653      	mov	r3, sl
 800eea0:	f001 f9aa 	bl	80101f8 <_dtoa_r>
 800eea4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800eea8:	4605      	mov	r5, r0
 800eeaa:	d119      	bne.n	800eee0 <__cvt+0x94>
 800eeac:	f019 0f01 	tst.w	r9, #1
 800eeb0:	d00e      	beq.n	800eed0 <__cvt+0x84>
 800eeb2:	eb00 0904 	add.w	r9, r0, r4
 800eeb6:	2200      	movs	r2, #0
 800eeb8:	2300      	movs	r3, #0
 800eeba:	4630      	mov	r0, r6
 800eebc:	4639      	mov	r1, r7
 800eebe:	f7f3 fb95 	bl	80025ec <__aeabi_dcmpeq>
 800eec2:	b108      	cbz	r0, 800eec8 <__cvt+0x7c>
 800eec4:	f8cd 900c 	str.w	r9, [sp, #12]
 800eec8:	2230      	movs	r2, #48	@ 0x30
 800eeca:	9b03      	ldr	r3, [sp, #12]
 800eecc:	454b      	cmp	r3, r9
 800eece:	d31e      	bcc.n	800ef0e <__cvt+0xc2>
 800eed0:	9b03      	ldr	r3, [sp, #12]
 800eed2:	4628      	mov	r0, r5
 800eed4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800eed6:	1b5b      	subs	r3, r3, r5
 800eed8:	6013      	str	r3, [r2, #0]
 800eeda:	b004      	add	sp, #16
 800eedc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eee0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800eee4:	eb00 0904 	add.w	r9, r0, r4
 800eee8:	d1e5      	bne.n	800eeb6 <__cvt+0x6a>
 800eeea:	7803      	ldrb	r3, [r0, #0]
 800eeec:	2b30      	cmp	r3, #48	@ 0x30
 800eeee:	d10a      	bne.n	800ef06 <__cvt+0xba>
 800eef0:	2200      	movs	r2, #0
 800eef2:	2300      	movs	r3, #0
 800eef4:	4630      	mov	r0, r6
 800eef6:	4639      	mov	r1, r7
 800eef8:	f7f3 fb78 	bl	80025ec <__aeabi_dcmpeq>
 800eefc:	b918      	cbnz	r0, 800ef06 <__cvt+0xba>
 800eefe:	f1c4 0401 	rsb	r4, r4, #1
 800ef02:	f8ca 4000 	str.w	r4, [sl]
 800ef06:	f8da 3000 	ldr.w	r3, [sl]
 800ef0a:	4499      	add	r9, r3
 800ef0c:	e7d3      	b.n	800eeb6 <__cvt+0x6a>
 800ef0e:	1c59      	adds	r1, r3, #1
 800ef10:	9103      	str	r1, [sp, #12]
 800ef12:	701a      	strb	r2, [r3, #0]
 800ef14:	e7d9      	b.n	800eeca <__cvt+0x7e>

0800ef16 <__exponent>:
 800ef16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ef18:	2900      	cmp	r1, #0
 800ef1a:	7002      	strb	r2, [r0, #0]
 800ef1c:	bfba      	itte	lt
 800ef1e:	4249      	neglt	r1, r1
 800ef20:	232d      	movlt	r3, #45	@ 0x2d
 800ef22:	232b      	movge	r3, #43	@ 0x2b
 800ef24:	2909      	cmp	r1, #9
 800ef26:	7043      	strb	r3, [r0, #1]
 800ef28:	dd28      	ble.n	800ef7c <__exponent+0x66>
 800ef2a:	f10d 0307 	add.w	r3, sp, #7
 800ef2e:	270a      	movs	r7, #10
 800ef30:	461d      	mov	r5, r3
 800ef32:	461a      	mov	r2, r3
 800ef34:	3b01      	subs	r3, #1
 800ef36:	fbb1 f6f7 	udiv	r6, r1, r7
 800ef3a:	fb07 1416 	mls	r4, r7, r6, r1
 800ef3e:	3430      	adds	r4, #48	@ 0x30
 800ef40:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ef44:	460c      	mov	r4, r1
 800ef46:	4631      	mov	r1, r6
 800ef48:	2c63      	cmp	r4, #99	@ 0x63
 800ef4a:	dcf2      	bgt.n	800ef32 <__exponent+0x1c>
 800ef4c:	3130      	adds	r1, #48	@ 0x30
 800ef4e:	1e94      	subs	r4, r2, #2
 800ef50:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ef54:	1c41      	adds	r1, r0, #1
 800ef56:	4623      	mov	r3, r4
 800ef58:	42ab      	cmp	r3, r5
 800ef5a:	d30a      	bcc.n	800ef72 <__exponent+0x5c>
 800ef5c:	f10d 0309 	add.w	r3, sp, #9
 800ef60:	1a9b      	subs	r3, r3, r2
 800ef62:	42ac      	cmp	r4, r5
 800ef64:	bf88      	it	hi
 800ef66:	2300      	movhi	r3, #0
 800ef68:	3302      	adds	r3, #2
 800ef6a:	4403      	add	r3, r0
 800ef6c:	1a18      	subs	r0, r3, r0
 800ef6e:	b003      	add	sp, #12
 800ef70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef72:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ef76:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ef7a:	e7ed      	b.n	800ef58 <__exponent+0x42>
 800ef7c:	2330      	movs	r3, #48	@ 0x30
 800ef7e:	3130      	adds	r1, #48	@ 0x30
 800ef80:	7083      	strb	r3, [r0, #2]
 800ef82:	1d03      	adds	r3, r0, #4
 800ef84:	70c1      	strb	r1, [r0, #3]
 800ef86:	e7f1      	b.n	800ef6c <__exponent+0x56>

0800ef88 <_printf_float>:
 800ef88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef8c:	b08d      	sub	sp, #52	@ 0x34
 800ef8e:	460c      	mov	r4, r1
 800ef90:	4616      	mov	r6, r2
 800ef92:	461f      	mov	r7, r3
 800ef94:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ef98:	4605      	mov	r5, r0
 800ef9a:	f001 f801 	bl	800ffa0 <_localeconv_r>
 800ef9e:	6803      	ldr	r3, [r0, #0]
 800efa0:	4618      	mov	r0, r3
 800efa2:	9304      	str	r3, [sp, #16]
 800efa4:	f7f2 fea9 	bl	8001cfa <strlen>
 800efa8:	2300      	movs	r3, #0
 800efaa:	9005      	str	r0, [sp, #20]
 800efac:	930a      	str	r3, [sp, #40]	@ 0x28
 800efae:	f8d8 3000 	ldr.w	r3, [r8]
 800efb2:	f894 a018 	ldrb.w	sl, [r4, #24]
 800efb6:	3307      	adds	r3, #7
 800efb8:	f8d4 b000 	ldr.w	fp, [r4]
 800efbc:	f023 0307 	bic.w	r3, r3, #7
 800efc0:	f103 0208 	add.w	r2, r3, #8
 800efc4:	f8c8 2000 	str.w	r2, [r8]
 800efc8:	f04f 32ff 	mov.w	r2, #4294967295
 800efcc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800efd0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800efd4:	f8cd 8018 	str.w	r8, [sp, #24]
 800efd8:	9307      	str	r3, [sp, #28]
 800efda:	4b9d      	ldr	r3, [pc, #628]	@ (800f250 <_printf_float+0x2c8>)
 800efdc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800efe0:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800efe4:	f7f3 fb34 	bl	8002650 <__aeabi_dcmpun>
 800efe8:	bb70      	cbnz	r0, 800f048 <_printf_float+0xc0>
 800efea:	f04f 32ff 	mov.w	r2, #4294967295
 800efee:	4b98      	ldr	r3, [pc, #608]	@ (800f250 <_printf_float+0x2c8>)
 800eff0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eff4:	f7f3 fb0e 	bl	8002614 <__aeabi_dcmple>
 800eff8:	bb30      	cbnz	r0, 800f048 <_printf_float+0xc0>
 800effa:	2200      	movs	r2, #0
 800effc:	2300      	movs	r3, #0
 800effe:	4640      	mov	r0, r8
 800f000:	4649      	mov	r1, r9
 800f002:	f7f3 fafd 	bl	8002600 <__aeabi_dcmplt>
 800f006:	b110      	cbz	r0, 800f00e <_printf_float+0x86>
 800f008:	232d      	movs	r3, #45	@ 0x2d
 800f00a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f00e:	4a91      	ldr	r2, [pc, #580]	@ (800f254 <_printf_float+0x2cc>)
 800f010:	4b91      	ldr	r3, [pc, #580]	@ (800f258 <_printf_float+0x2d0>)
 800f012:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f016:	bf8c      	ite	hi
 800f018:	4690      	movhi	r8, r2
 800f01a:	4698      	movls	r8, r3
 800f01c:	2303      	movs	r3, #3
 800f01e:	f04f 0900 	mov.w	r9, #0
 800f022:	6123      	str	r3, [r4, #16]
 800f024:	f02b 0304 	bic.w	r3, fp, #4
 800f028:	6023      	str	r3, [r4, #0]
 800f02a:	4633      	mov	r3, r6
 800f02c:	aa0b      	add	r2, sp, #44	@ 0x2c
 800f02e:	4621      	mov	r1, r4
 800f030:	4628      	mov	r0, r5
 800f032:	9700      	str	r7, [sp, #0]
 800f034:	f000 f9d2 	bl	800f3dc <_printf_common>
 800f038:	3001      	adds	r0, #1
 800f03a:	f040 808d 	bne.w	800f158 <_printf_float+0x1d0>
 800f03e:	f04f 30ff 	mov.w	r0, #4294967295
 800f042:	b00d      	add	sp, #52	@ 0x34
 800f044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f048:	4642      	mov	r2, r8
 800f04a:	464b      	mov	r3, r9
 800f04c:	4640      	mov	r0, r8
 800f04e:	4649      	mov	r1, r9
 800f050:	f7f3 fafe 	bl	8002650 <__aeabi_dcmpun>
 800f054:	b140      	cbz	r0, 800f068 <_printf_float+0xe0>
 800f056:	464b      	mov	r3, r9
 800f058:	4a80      	ldr	r2, [pc, #512]	@ (800f25c <_printf_float+0x2d4>)
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	bfbc      	itt	lt
 800f05e:	232d      	movlt	r3, #45	@ 0x2d
 800f060:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800f064:	4b7e      	ldr	r3, [pc, #504]	@ (800f260 <_printf_float+0x2d8>)
 800f066:	e7d4      	b.n	800f012 <_printf_float+0x8a>
 800f068:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800f06c:	6863      	ldr	r3, [r4, #4]
 800f06e:	9206      	str	r2, [sp, #24]
 800f070:	1c5a      	adds	r2, r3, #1
 800f072:	d13b      	bne.n	800f0ec <_printf_float+0x164>
 800f074:	2306      	movs	r3, #6
 800f076:	6063      	str	r3, [r4, #4]
 800f078:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800f07c:	2300      	movs	r3, #0
 800f07e:	4628      	mov	r0, r5
 800f080:	6022      	str	r2, [r4, #0]
 800f082:	9303      	str	r3, [sp, #12]
 800f084:	ab0a      	add	r3, sp, #40	@ 0x28
 800f086:	e9cd a301 	strd	sl, r3, [sp, #4]
 800f08a:	ab09      	add	r3, sp, #36	@ 0x24
 800f08c:	ec49 8b10 	vmov	d0, r8, r9
 800f090:	9300      	str	r3, [sp, #0]
 800f092:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800f096:	6861      	ldr	r1, [r4, #4]
 800f098:	f7ff fed8 	bl	800ee4c <__cvt>
 800f09c:	9b06      	ldr	r3, [sp, #24]
 800f09e:	4680      	mov	r8, r0
 800f0a0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f0a2:	2b47      	cmp	r3, #71	@ 0x47
 800f0a4:	d129      	bne.n	800f0fa <_printf_float+0x172>
 800f0a6:	1cc8      	adds	r0, r1, #3
 800f0a8:	db02      	blt.n	800f0b0 <_printf_float+0x128>
 800f0aa:	6863      	ldr	r3, [r4, #4]
 800f0ac:	4299      	cmp	r1, r3
 800f0ae:	dd41      	ble.n	800f134 <_printf_float+0x1ac>
 800f0b0:	f1aa 0a02 	sub.w	sl, sl, #2
 800f0b4:	fa5f fa8a 	uxtb.w	sl, sl
 800f0b8:	3901      	subs	r1, #1
 800f0ba:	4652      	mov	r2, sl
 800f0bc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800f0c0:	9109      	str	r1, [sp, #36]	@ 0x24
 800f0c2:	f7ff ff28 	bl	800ef16 <__exponent>
 800f0c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f0c8:	4681      	mov	r9, r0
 800f0ca:	1813      	adds	r3, r2, r0
 800f0cc:	2a01      	cmp	r2, #1
 800f0ce:	6123      	str	r3, [r4, #16]
 800f0d0:	dc02      	bgt.n	800f0d8 <_printf_float+0x150>
 800f0d2:	6822      	ldr	r2, [r4, #0]
 800f0d4:	07d2      	lsls	r2, r2, #31
 800f0d6:	d501      	bpl.n	800f0dc <_printf_float+0x154>
 800f0d8:	3301      	adds	r3, #1
 800f0da:	6123      	str	r3, [r4, #16]
 800f0dc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d0a2      	beq.n	800f02a <_printf_float+0xa2>
 800f0e4:	232d      	movs	r3, #45	@ 0x2d
 800f0e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f0ea:	e79e      	b.n	800f02a <_printf_float+0xa2>
 800f0ec:	9a06      	ldr	r2, [sp, #24]
 800f0ee:	2a47      	cmp	r2, #71	@ 0x47
 800f0f0:	d1c2      	bne.n	800f078 <_printf_float+0xf0>
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d1c0      	bne.n	800f078 <_printf_float+0xf0>
 800f0f6:	2301      	movs	r3, #1
 800f0f8:	e7bd      	b.n	800f076 <_printf_float+0xee>
 800f0fa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f0fe:	d9db      	bls.n	800f0b8 <_printf_float+0x130>
 800f100:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800f104:	d118      	bne.n	800f138 <_printf_float+0x1b0>
 800f106:	2900      	cmp	r1, #0
 800f108:	6863      	ldr	r3, [r4, #4]
 800f10a:	dd0b      	ble.n	800f124 <_printf_float+0x19c>
 800f10c:	6121      	str	r1, [r4, #16]
 800f10e:	b913      	cbnz	r3, 800f116 <_printf_float+0x18e>
 800f110:	6822      	ldr	r2, [r4, #0]
 800f112:	07d0      	lsls	r0, r2, #31
 800f114:	d502      	bpl.n	800f11c <_printf_float+0x194>
 800f116:	3301      	adds	r3, #1
 800f118:	440b      	add	r3, r1
 800f11a:	6123      	str	r3, [r4, #16]
 800f11c:	f04f 0900 	mov.w	r9, #0
 800f120:	65a1      	str	r1, [r4, #88]	@ 0x58
 800f122:	e7db      	b.n	800f0dc <_printf_float+0x154>
 800f124:	b913      	cbnz	r3, 800f12c <_printf_float+0x1a4>
 800f126:	6822      	ldr	r2, [r4, #0]
 800f128:	07d2      	lsls	r2, r2, #31
 800f12a:	d501      	bpl.n	800f130 <_printf_float+0x1a8>
 800f12c:	3302      	adds	r3, #2
 800f12e:	e7f4      	b.n	800f11a <_printf_float+0x192>
 800f130:	2301      	movs	r3, #1
 800f132:	e7f2      	b.n	800f11a <_printf_float+0x192>
 800f134:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800f138:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f13a:	4299      	cmp	r1, r3
 800f13c:	db05      	blt.n	800f14a <_printf_float+0x1c2>
 800f13e:	6823      	ldr	r3, [r4, #0]
 800f140:	6121      	str	r1, [r4, #16]
 800f142:	07d8      	lsls	r0, r3, #31
 800f144:	d5ea      	bpl.n	800f11c <_printf_float+0x194>
 800f146:	1c4b      	adds	r3, r1, #1
 800f148:	e7e7      	b.n	800f11a <_printf_float+0x192>
 800f14a:	2900      	cmp	r1, #0
 800f14c:	bfd4      	ite	le
 800f14e:	f1c1 0202 	rsble	r2, r1, #2
 800f152:	2201      	movgt	r2, #1
 800f154:	4413      	add	r3, r2
 800f156:	e7e0      	b.n	800f11a <_printf_float+0x192>
 800f158:	6823      	ldr	r3, [r4, #0]
 800f15a:	055a      	lsls	r2, r3, #21
 800f15c:	d407      	bmi.n	800f16e <_printf_float+0x1e6>
 800f15e:	6923      	ldr	r3, [r4, #16]
 800f160:	4642      	mov	r2, r8
 800f162:	4631      	mov	r1, r6
 800f164:	4628      	mov	r0, r5
 800f166:	47b8      	blx	r7
 800f168:	3001      	adds	r0, #1
 800f16a:	d12b      	bne.n	800f1c4 <_printf_float+0x23c>
 800f16c:	e767      	b.n	800f03e <_printf_float+0xb6>
 800f16e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f172:	f240 80dd 	bls.w	800f330 <_printf_float+0x3a8>
 800f176:	2200      	movs	r2, #0
 800f178:	2300      	movs	r3, #0
 800f17a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f17e:	f7f3 fa35 	bl	80025ec <__aeabi_dcmpeq>
 800f182:	2800      	cmp	r0, #0
 800f184:	d033      	beq.n	800f1ee <_printf_float+0x266>
 800f186:	2301      	movs	r3, #1
 800f188:	4a36      	ldr	r2, [pc, #216]	@ (800f264 <_printf_float+0x2dc>)
 800f18a:	4631      	mov	r1, r6
 800f18c:	4628      	mov	r0, r5
 800f18e:	47b8      	blx	r7
 800f190:	3001      	adds	r0, #1
 800f192:	f43f af54 	beq.w	800f03e <_printf_float+0xb6>
 800f196:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800f19a:	4543      	cmp	r3, r8
 800f19c:	db02      	blt.n	800f1a4 <_printf_float+0x21c>
 800f19e:	6823      	ldr	r3, [r4, #0]
 800f1a0:	07d8      	lsls	r0, r3, #31
 800f1a2:	d50f      	bpl.n	800f1c4 <_printf_float+0x23c>
 800f1a4:	4631      	mov	r1, r6
 800f1a6:	4628      	mov	r0, r5
 800f1a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f1ac:	47b8      	blx	r7
 800f1ae:	3001      	adds	r0, #1
 800f1b0:	f43f af45 	beq.w	800f03e <_printf_float+0xb6>
 800f1b4:	f04f 0900 	mov.w	r9, #0
 800f1b8:	f108 38ff 	add.w	r8, r8, #4294967295
 800f1bc:	f104 0a1a 	add.w	sl, r4, #26
 800f1c0:	45c8      	cmp	r8, r9
 800f1c2:	dc09      	bgt.n	800f1d8 <_printf_float+0x250>
 800f1c4:	6823      	ldr	r3, [r4, #0]
 800f1c6:	079b      	lsls	r3, r3, #30
 800f1c8:	f100 8103 	bmi.w	800f3d2 <_printf_float+0x44a>
 800f1cc:	68e0      	ldr	r0, [r4, #12]
 800f1ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f1d0:	4298      	cmp	r0, r3
 800f1d2:	bfb8      	it	lt
 800f1d4:	4618      	movlt	r0, r3
 800f1d6:	e734      	b.n	800f042 <_printf_float+0xba>
 800f1d8:	2301      	movs	r3, #1
 800f1da:	4652      	mov	r2, sl
 800f1dc:	4631      	mov	r1, r6
 800f1de:	4628      	mov	r0, r5
 800f1e0:	47b8      	blx	r7
 800f1e2:	3001      	adds	r0, #1
 800f1e4:	f43f af2b 	beq.w	800f03e <_printf_float+0xb6>
 800f1e8:	f109 0901 	add.w	r9, r9, #1
 800f1ec:	e7e8      	b.n	800f1c0 <_printf_float+0x238>
 800f1ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	dc39      	bgt.n	800f268 <_printf_float+0x2e0>
 800f1f4:	2301      	movs	r3, #1
 800f1f6:	4a1b      	ldr	r2, [pc, #108]	@ (800f264 <_printf_float+0x2dc>)
 800f1f8:	4631      	mov	r1, r6
 800f1fa:	4628      	mov	r0, r5
 800f1fc:	47b8      	blx	r7
 800f1fe:	3001      	adds	r0, #1
 800f200:	f43f af1d 	beq.w	800f03e <_printf_float+0xb6>
 800f204:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800f208:	ea59 0303 	orrs.w	r3, r9, r3
 800f20c:	d102      	bne.n	800f214 <_printf_float+0x28c>
 800f20e:	6823      	ldr	r3, [r4, #0]
 800f210:	07d9      	lsls	r1, r3, #31
 800f212:	d5d7      	bpl.n	800f1c4 <_printf_float+0x23c>
 800f214:	4631      	mov	r1, r6
 800f216:	4628      	mov	r0, r5
 800f218:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f21c:	47b8      	blx	r7
 800f21e:	3001      	adds	r0, #1
 800f220:	f43f af0d 	beq.w	800f03e <_printf_float+0xb6>
 800f224:	f04f 0a00 	mov.w	sl, #0
 800f228:	f104 0b1a 	add.w	fp, r4, #26
 800f22c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f22e:	425b      	negs	r3, r3
 800f230:	4553      	cmp	r3, sl
 800f232:	dc01      	bgt.n	800f238 <_printf_float+0x2b0>
 800f234:	464b      	mov	r3, r9
 800f236:	e793      	b.n	800f160 <_printf_float+0x1d8>
 800f238:	2301      	movs	r3, #1
 800f23a:	465a      	mov	r2, fp
 800f23c:	4631      	mov	r1, r6
 800f23e:	4628      	mov	r0, r5
 800f240:	47b8      	blx	r7
 800f242:	3001      	adds	r0, #1
 800f244:	f43f aefb 	beq.w	800f03e <_printf_float+0xb6>
 800f248:	f10a 0a01 	add.w	sl, sl, #1
 800f24c:	e7ee      	b.n	800f22c <_printf_float+0x2a4>
 800f24e:	bf00      	nop
 800f250:	7fefffff 	.word	0x7fefffff
 800f254:	08014834 	.word	0x08014834
 800f258:	08014830 	.word	0x08014830
 800f25c:	0801483c 	.word	0x0801483c
 800f260:	08014838 	.word	0x08014838
 800f264:	08014840 	.word	0x08014840
 800f268:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f26a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f26e:	4553      	cmp	r3, sl
 800f270:	bfa8      	it	ge
 800f272:	4653      	movge	r3, sl
 800f274:	2b00      	cmp	r3, #0
 800f276:	4699      	mov	r9, r3
 800f278:	dc36      	bgt.n	800f2e8 <_printf_float+0x360>
 800f27a:	f04f 0b00 	mov.w	fp, #0
 800f27e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f282:	f104 021a 	add.w	r2, r4, #26
 800f286:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f288:	9306      	str	r3, [sp, #24]
 800f28a:	eba3 0309 	sub.w	r3, r3, r9
 800f28e:	455b      	cmp	r3, fp
 800f290:	dc31      	bgt.n	800f2f6 <_printf_float+0x36e>
 800f292:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f294:	459a      	cmp	sl, r3
 800f296:	dc3a      	bgt.n	800f30e <_printf_float+0x386>
 800f298:	6823      	ldr	r3, [r4, #0]
 800f29a:	07da      	lsls	r2, r3, #31
 800f29c:	d437      	bmi.n	800f30e <_printf_float+0x386>
 800f29e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f2a0:	ebaa 0903 	sub.w	r9, sl, r3
 800f2a4:	9b06      	ldr	r3, [sp, #24]
 800f2a6:	ebaa 0303 	sub.w	r3, sl, r3
 800f2aa:	4599      	cmp	r9, r3
 800f2ac:	bfa8      	it	ge
 800f2ae:	4699      	movge	r9, r3
 800f2b0:	f1b9 0f00 	cmp.w	r9, #0
 800f2b4:	dc33      	bgt.n	800f31e <_printf_float+0x396>
 800f2b6:	f04f 0800 	mov.w	r8, #0
 800f2ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f2be:	f104 0b1a 	add.w	fp, r4, #26
 800f2c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f2c4:	ebaa 0303 	sub.w	r3, sl, r3
 800f2c8:	eba3 0309 	sub.w	r3, r3, r9
 800f2cc:	4543      	cmp	r3, r8
 800f2ce:	f77f af79 	ble.w	800f1c4 <_printf_float+0x23c>
 800f2d2:	2301      	movs	r3, #1
 800f2d4:	465a      	mov	r2, fp
 800f2d6:	4631      	mov	r1, r6
 800f2d8:	4628      	mov	r0, r5
 800f2da:	47b8      	blx	r7
 800f2dc:	3001      	adds	r0, #1
 800f2de:	f43f aeae 	beq.w	800f03e <_printf_float+0xb6>
 800f2e2:	f108 0801 	add.w	r8, r8, #1
 800f2e6:	e7ec      	b.n	800f2c2 <_printf_float+0x33a>
 800f2e8:	4642      	mov	r2, r8
 800f2ea:	4631      	mov	r1, r6
 800f2ec:	4628      	mov	r0, r5
 800f2ee:	47b8      	blx	r7
 800f2f0:	3001      	adds	r0, #1
 800f2f2:	d1c2      	bne.n	800f27a <_printf_float+0x2f2>
 800f2f4:	e6a3      	b.n	800f03e <_printf_float+0xb6>
 800f2f6:	2301      	movs	r3, #1
 800f2f8:	4631      	mov	r1, r6
 800f2fa:	4628      	mov	r0, r5
 800f2fc:	9206      	str	r2, [sp, #24]
 800f2fe:	47b8      	blx	r7
 800f300:	3001      	adds	r0, #1
 800f302:	f43f ae9c 	beq.w	800f03e <_printf_float+0xb6>
 800f306:	f10b 0b01 	add.w	fp, fp, #1
 800f30a:	9a06      	ldr	r2, [sp, #24]
 800f30c:	e7bb      	b.n	800f286 <_printf_float+0x2fe>
 800f30e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f312:	4631      	mov	r1, r6
 800f314:	4628      	mov	r0, r5
 800f316:	47b8      	blx	r7
 800f318:	3001      	adds	r0, #1
 800f31a:	d1c0      	bne.n	800f29e <_printf_float+0x316>
 800f31c:	e68f      	b.n	800f03e <_printf_float+0xb6>
 800f31e:	9a06      	ldr	r2, [sp, #24]
 800f320:	464b      	mov	r3, r9
 800f322:	4631      	mov	r1, r6
 800f324:	4628      	mov	r0, r5
 800f326:	4442      	add	r2, r8
 800f328:	47b8      	blx	r7
 800f32a:	3001      	adds	r0, #1
 800f32c:	d1c3      	bne.n	800f2b6 <_printf_float+0x32e>
 800f32e:	e686      	b.n	800f03e <_printf_float+0xb6>
 800f330:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f334:	f1ba 0f01 	cmp.w	sl, #1
 800f338:	dc01      	bgt.n	800f33e <_printf_float+0x3b6>
 800f33a:	07db      	lsls	r3, r3, #31
 800f33c:	d536      	bpl.n	800f3ac <_printf_float+0x424>
 800f33e:	2301      	movs	r3, #1
 800f340:	4642      	mov	r2, r8
 800f342:	4631      	mov	r1, r6
 800f344:	4628      	mov	r0, r5
 800f346:	47b8      	blx	r7
 800f348:	3001      	adds	r0, #1
 800f34a:	f43f ae78 	beq.w	800f03e <_printf_float+0xb6>
 800f34e:	4631      	mov	r1, r6
 800f350:	4628      	mov	r0, r5
 800f352:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f356:	47b8      	blx	r7
 800f358:	3001      	adds	r0, #1
 800f35a:	f43f ae70 	beq.w	800f03e <_printf_float+0xb6>
 800f35e:	2200      	movs	r2, #0
 800f360:	2300      	movs	r3, #0
 800f362:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f366:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f36a:	f7f3 f93f 	bl	80025ec <__aeabi_dcmpeq>
 800f36e:	b9c0      	cbnz	r0, 800f3a2 <_printf_float+0x41a>
 800f370:	4653      	mov	r3, sl
 800f372:	f108 0201 	add.w	r2, r8, #1
 800f376:	4631      	mov	r1, r6
 800f378:	4628      	mov	r0, r5
 800f37a:	47b8      	blx	r7
 800f37c:	3001      	adds	r0, #1
 800f37e:	d10c      	bne.n	800f39a <_printf_float+0x412>
 800f380:	e65d      	b.n	800f03e <_printf_float+0xb6>
 800f382:	2301      	movs	r3, #1
 800f384:	465a      	mov	r2, fp
 800f386:	4631      	mov	r1, r6
 800f388:	4628      	mov	r0, r5
 800f38a:	47b8      	blx	r7
 800f38c:	3001      	adds	r0, #1
 800f38e:	f43f ae56 	beq.w	800f03e <_printf_float+0xb6>
 800f392:	f108 0801 	add.w	r8, r8, #1
 800f396:	45d0      	cmp	r8, sl
 800f398:	dbf3      	blt.n	800f382 <_printf_float+0x3fa>
 800f39a:	464b      	mov	r3, r9
 800f39c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800f3a0:	e6df      	b.n	800f162 <_printf_float+0x1da>
 800f3a2:	f04f 0800 	mov.w	r8, #0
 800f3a6:	f104 0b1a 	add.w	fp, r4, #26
 800f3aa:	e7f4      	b.n	800f396 <_printf_float+0x40e>
 800f3ac:	2301      	movs	r3, #1
 800f3ae:	4642      	mov	r2, r8
 800f3b0:	e7e1      	b.n	800f376 <_printf_float+0x3ee>
 800f3b2:	2301      	movs	r3, #1
 800f3b4:	464a      	mov	r2, r9
 800f3b6:	4631      	mov	r1, r6
 800f3b8:	4628      	mov	r0, r5
 800f3ba:	47b8      	blx	r7
 800f3bc:	3001      	adds	r0, #1
 800f3be:	f43f ae3e 	beq.w	800f03e <_printf_float+0xb6>
 800f3c2:	f108 0801 	add.w	r8, r8, #1
 800f3c6:	68e3      	ldr	r3, [r4, #12]
 800f3c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f3ca:	1a5b      	subs	r3, r3, r1
 800f3cc:	4543      	cmp	r3, r8
 800f3ce:	dcf0      	bgt.n	800f3b2 <_printf_float+0x42a>
 800f3d0:	e6fc      	b.n	800f1cc <_printf_float+0x244>
 800f3d2:	f04f 0800 	mov.w	r8, #0
 800f3d6:	f104 0919 	add.w	r9, r4, #25
 800f3da:	e7f4      	b.n	800f3c6 <_printf_float+0x43e>

0800f3dc <_printf_common>:
 800f3dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f3e0:	4616      	mov	r6, r2
 800f3e2:	4698      	mov	r8, r3
 800f3e4:	688a      	ldr	r2, [r1, #8]
 800f3e6:	4607      	mov	r7, r0
 800f3e8:	690b      	ldr	r3, [r1, #16]
 800f3ea:	460c      	mov	r4, r1
 800f3ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f3f0:	4293      	cmp	r3, r2
 800f3f2:	bfb8      	it	lt
 800f3f4:	4613      	movlt	r3, r2
 800f3f6:	6033      	str	r3, [r6, #0]
 800f3f8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f3fc:	b10a      	cbz	r2, 800f402 <_printf_common+0x26>
 800f3fe:	3301      	adds	r3, #1
 800f400:	6033      	str	r3, [r6, #0]
 800f402:	6823      	ldr	r3, [r4, #0]
 800f404:	0699      	lsls	r1, r3, #26
 800f406:	bf42      	ittt	mi
 800f408:	6833      	ldrmi	r3, [r6, #0]
 800f40a:	3302      	addmi	r3, #2
 800f40c:	6033      	strmi	r3, [r6, #0]
 800f40e:	6825      	ldr	r5, [r4, #0]
 800f410:	f015 0506 	ands.w	r5, r5, #6
 800f414:	d106      	bne.n	800f424 <_printf_common+0x48>
 800f416:	f104 0a19 	add.w	sl, r4, #25
 800f41a:	68e3      	ldr	r3, [r4, #12]
 800f41c:	6832      	ldr	r2, [r6, #0]
 800f41e:	1a9b      	subs	r3, r3, r2
 800f420:	42ab      	cmp	r3, r5
 800f422:	dc2b      	bgt.n	800f47c <_printf_common+0xa0>
 800f424:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f428:	6822      	ldr	r2, [r4, #0]
 800f42a:	3b00      	subs	r3, #0
 800f42c:	bf18      	it	ne
 800f42e:	2301      	movne	r3, #1
 800f430:	0692      	lsls	r2, r2, #26
 800f432:	d430      	bmi.n	800f496 <_printf_common+0xba>
 800f434:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f438:	4641      	mov	r1, r8
 800f43a:	4638      	mov	r0, r7
 800f43c:	47c8      	blx	r9
 800f43e:	3001      	adds	r0, #1
 800f440:	d023      	beq.n	800f48a <_printf_common+0xae>
 800f442:	6823      	ldr	r3, [r4, #0]
 800f444:	341a      	adds	r4, #26
 800f446:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800f44a:	f003 0306 	and.w	r3, r3, #6
 800f44e:	2b04      	cmp	r3, #4
 800f450:	bf0a      	itet	eq
 800f452:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800f456:	2500      	movne	r5, #0
 800f458:	6833      	ldreq	r3, [r6, #0]
 800f45a:	f04f 0600 	mov.w	r6, #0
 800f45e:	bf08      	it	eq
 800f460:	1aed      	subeq	r5, r5, r3
 800f462:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800f466:	bf08      	it	eq
 800f468:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f46c:	4293      	cmp	r3, r2
 800f46e:	bfc4      	itt	gt
 800f470:	1a9b      	subgt	r3, r3, r2
 800f472:	18ed      	addgt	r5, r5, r3
 800f474:	42b5      	cmp	r5, r6
 800f476:	d11a      	bne.n	800f4ae <_printf_common+0xd2>
 800f478:	2000      	movs	r0, #0
 800f47a:	e008      	b.n	800f48e <_printf_common+0xb2>
 800f47c:	2301      	movs	r3, #1
 800f47e:	4652      	mov	r2, sl
 800f480:	4641      	mov	r1, r8
 800f482:	4638      	mov	r0, r7
 800f484:	47c8      	blx	r9
 800f486:	3001      	adds	r0, #1
 800f488:	d103      	bne.n	800f492 <_printf_common+0xb6>
 800f48a:	f04f 30ff 	mov.w	r0, #4294967295
 800f48e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f492:	3501      	adds	r5, #1
 800f494:	e7c1      	b.n	800f41a <_printf_common+0x3e>
 800f496:	18e1      	adds	r1, r4, r3
 800f498:	1c5a      	adds	r2, r3, #1
 800f49a:	2030      	movs	r0, #48	@ 0x30
 800f49c:	3302      	adds	r3, #2
 800f49e:	4422      	add	r2, r4
 800f4a0:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f4a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f4a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f4ac:	e7c2      	b.n	800f434 <_printf_common+0x58>
 800f4ae:	2301      	movs	r3, #1
 800f4b0:	4622      	mov	r2, r4
 800f4b2:	4641      	mov	r1, r8
 800f4b4:	4638      	mov	r0, r7
 800f4b6:	47c8      	blx	r9
 800f4b8:	3001      	adds	r0, #1
 800f4ba:	d0e6      	beq.n	800f48a <_printf_common+0xae>
 800f4bc:	3601      	adds	r6, #1
 800f4be:	e7d9      	b.n	800f474 <_printf_common+0x98>

0800f4c0 <_printf_i>:
 800f4c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f4c4:	7e0f      	ldrb	r7, [r1, #24]
 800f4c6:	4691      	mov	r9, r2
 800f4c8:	4680      	mov	r8, r0
 800f4ca:	460c      	mov	r4, r1
 800f4cc:	2f78      	cmp	r7, #120	@ 0x78
 800f4ce:	469a      	mov	sl, r3
 800f4d0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f4d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f4d6:	d807      	bhi.n	800f4e8 <_printf_i+0x28>
 800f4d8:	2f62      	cmp	r7, #98	@ 0x62
 800f4da:	d80a      	bhi.n	800f4f2 <_printf_i+0x32>
 800f4dc:	2f00      	cmp	r7, #0
 800f4de:	f000 80d1 	beq.w	800f684 <_printf_i+0x1c4>
 800f4e2:	2f58      	cmp	r7, #88	@ 0x58
 800f4e4:	f000 80b8 	beq.w	800f658 <_printf_i+0x198>
 800f4e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f4ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f4f0:	e03a      	b.n	800f568 <_printf_i+0xa8>
 800f4f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f4f6:	2b15      	cmp	r3, #21
 800f4f8:	d8f6      	bhi.n	800f4e8 <_printf_i+0x28>
 800f4fa:	a101      	add	r1, pc, #4	@ (adr r1, 800f500 <_printf_i+0x40>)
 800f4fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f500:	0800f559 	.word	0x0800f559
 800f504:	0800f56d 	.word	0x0800f56d
 800f508:	0800f4e9 	.word	0x0800f4e9
 800f50c:	0800f4e9 	.word	0x0800f4e9
 800f510:	0800f4e9 	.word	0x0800f4e9
 800f514:	0800f4e9 	.word	0x0800f4e9
 800f518:	0800f56d 	.word	0x0800f56d
 800f51c:	0800f4e9 	.word	0x0800f4e9
 800f520:	0800f4e9 	.word	0x0800f4e9
 800f524:	0800f4e9 	.word	0x0800f4e9
 800f528:	0800f4e9 	.word	0x0800f4e9
 800f52c:	0800f66b 	.word	0x0800f66b
 800f530:	0800f597 	.word	0x0800f597
 800f534:	0800f625 	.word	0x0800f625
 800f538:	0800f4e9 	.word	0x0800f4e9
 800f53c:	0800f4e9 	.word	0x0800f4e9
 800f540:	0800f68d 	.word	0x0800f68d
 800f544:	0800f4e9 	.word	0x0800f4e9
 800f548:	0800f597 	.word	0x0800f597
 800f54c:	0800f4e9 	.word	0x0800f4e9
 800f550:	0800f4e9 	.word	0x0800f4e9
 800f554:	0800f62d 	.word	0x0800f62d
 800f558:	6833      	ldr	r3, [r6, #0]
 800f55a:	1d1a      	adds	r2, r3, #4
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	6032      	str	r2, [r6, #0]
 800f560:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f564:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f568:	2301      	movs	r3, #1
 800f56a:	e09c      	b.n	800f6a6 <_printf_i+0x1e6>
 800f56c:	6833      	ldr	r3, [r6, #0]
 800f56e:	6820      	ldr	r0, [r4, #0]
 800f570:	1d19      	adds	r1, r3, #4
 800f572:	6031      	str	r1, [r6, #0]
 800f574:	0606      	lsls	r6, r0, #24
 800f576:	d501      	bpl.n	800f57c <_printf_i+0xbc>
 800f578:	681d      	ldr	r5, [r3, #0]
 800f57a:	e003      	b.n	800f584 <_printf_i+0xc4>
 800f57c:	0645      	lsls	r5, r0, #25
 800f57e:	d5fb      	bpl.n	800f578 <_printf_i+0xb8>
 800f580:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f584:	2d00      	cmp	r5, #0
 800f586:	da03      	bge.n	800f590 <_printf_i+0xd0>
 800f588:	232d      	movs	r3, #45	@ 0x2d
 800f58a:	426d      	negs	r5, r5
 800f58c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f590:	4858      	ldr	r0, [pc, #352]	@ (800f6f4 <_printf_i+0x234>)
 800f592:	230a      	movs	r3, #10
 800f594:	e011      	b.n	800f5ba <_printf_i+0xfa>
 800f596:	6821      	ldr	r1, [r4, #0]
 800f598:	6833      	ldr	r3, [r6, #0]
 800f59a:	0608      	lsls	r0, r1, #24
 800f59c:	f853 5b04 	ldr.w	r5, [r3], #4
 800f5a0:	d402      	bmi.n	800f5a8 <_printf_i+0xe8>
 800f5a2:	0649      	lsls	r1, r1, #25
 800f5a4:	bf48      	it	mi
 800f5a6:	b2ad      	uxthmi	r5, r5
 800f5a8:	2f6f      	cmp	r7, #111	@ 0x6f
 800f5aa:	6033      	str	r3, [r6, #0]
 800f5ac:	4851      	ldr	r0, [pc, #324]	@ (800f6f4 <_printf_i+0x234>)
 800f5ae:	bf14      	ite	ne
 800f5b0:	230a      	movne	r3, #10
 800f5b2:	2308      	moveq	r3, #8
 800f5b4:	2100      	movs	r1, #0
 800f5b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f5ba:	6866      	ldr	r6, [r4, #4]
 800f5bc:	2e00      	cmp	r6, #0
 800f5be:	60a6      	str	r6, [r4, #8]
 800f5c0:	db05      	blt.n	800f5ce <_printf_i+0x10e>
 800f5c2:	6821      	ldr	r1, [r4, #0]
 800f5c4:	432e      	orrs	r6, r5
 800f5c6:	f021 0104 	bic.w	r1, r1, #4
 800f5ca:	6021      	str	r1, [r4, #0]
 800f5cc:	d04b      	beq.n	800f666 <_printf_i+0x1a6>
 800f5ce:	4616      	mov	r6, r2
 800f5d0:	fbb5 f1f3 	udiv	r1, r5, r3
 800f5d4:	fb03 5711 	mls	r7, r3, r1, r5
 800f5d8:	5dc7      	ldrb	r7, [r0, r7]
 800f5da:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f5de:	462f      	mov	r7, r5
 800f5e0:	460d      	mov	r5, r1
 800f5e2:	42bb      	cmp	r3, r7
 800f5e4:	d9f4      	bls.n	800f5d0 <_printf_i+0x110>
 800f5e6:	2b08      	cmp	r3, #8
 800f5e8:	d10b      	bne.n	800f602 <_printf_i+0x142>
 800f5ea:	6823      	ldr	r3, [r4, #0]
 800f5ec:	07df      	lsls	r7, r3, #31
 800f5ee:	d508      	bpl.n	800f602 <_printf_i+0x142>
 800f5f0:	6923      	ldr	r3, [r4, #16]
 800f5f2:	6861      	ldr	r1, [r4, #4]
 800f5f4:	4299      	cmp	r1, r3
 800f5f6:	bfde      	ittt	le
 800f5f8:	2330      	movle	r3, #48	@ 0x30
 800f5fa:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f5fe:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f602:	1b92      	subs	r2, r2, r6
 800f604:	6122      	str	r2, [r4, #16]
 800f606:	464b      	mov	r3, r9
 800f608:	aa03      	add	r2, sp, #12
 800f60a:	4621      	mov	r1, r4
 800f60c:	4640      	mov	r0, r8
 800f60e:	f8cd a000 	str.w	sl, [sp]
 800f612:	f7ff fee3 	bl	800f3dc <_printf_common>
 800f616:	3001      	adds	r0, #1
 800f618:	d14a      	bne.n	800f6b0 <_printf_i+0x1f0>
 800f61a:	f04f 30ff 	mov.w	r0, #4294967295
 800f61e:	b004      	add	sp, #16
 800f620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f624:	6823      	ldr	r3, [r4, #0]
 800f626:	f043 0320 	orr.w	r3, r3, #32
 800f62a:	6023      	str	r3, [r4, #0]
 800f62c:	2778      	movs	r7, #120	@ 0x78
 800f62e:	4832      	ldr	r0, [pc, #200]	@ (800f6f8 <_printf_i+0x238>)
 800f630:	6823      	ldr	r3, [r4, #0]
 800f632:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f636:	061f      	lsls	r7, r3, #24
 800f638:	6831      	ldr	r1, [r6, #0]
 800f63a:	f851 5b04 	ldr.w	r5, [r1], #4
 800f63e:	d402      	bmi.n	800f646 <_printf_i+0x186>
 800f640:	065f      	lsls	r7, r3, #25
 800f642:	bf48      	it	mi
 800f644:	b2ad      	uxthmi	r5, r5
 800f646:	6031      	str	r1, [r6, #0]
 800f648:	07d9      	lsls	r1, r3, #31
 800f64a:	bf44      	itt	mi
 800f64c:	f043 0320 	orrmi.w	r3, r3, #32
 800f650:	6023      	strmi	r3, [r4, #0]
 800f652:	b11d      	cbz	r5, 800f65c <_printf_i+0x19c>
 800f654:	2310      	movs	r3, #16
 800f656:	e7ad      	b.n	800f5b4 <_printf_i+0xf4>
 800f658:	4826      	ldr	r0, [pc, #152]	@ (800f6f4 <_printf_i+0x234>)
 800f65a:	e7e9      	b.n	800f630 <_printf_i+0x170>
 800f65c:	6823      	ldr	r3, [r4, #0]
 800f65e:	f023 0320 	bic.w	r3, r3, #32
 800f662:	6023      	str	r3, [r4, #0]
 800f664:	e7f6      	b.n	800f654 <_printf_i+0x194>
 800f666:	4616      	mov	r6, r2
 800f668:	e7bd      	b.n	800f5e6 <_printf_i+0x126>
 800f66a:	6833      	ldr	r3, [r6, #0]
 800f66c:	6825      	ldr	r5, [r4, #0]
 800f66e:	1d18      	adds	r0, r3, #4
 800f670:	6961      	ldr	r1, [r4, #20]
 800f672:	6030      	str	r0, [r6, #0]
 800f674:	062e      	lsls	r6, r5, #24
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	d501      	bpl.n	800f67e <_printf_i+0x1be>
 800f67a:	6019      	str	r1, [r3, #0]
 800f67c:	e002      	b.n	800f684 <_printf_i+0x1c4>
 800f67e:	0668      	lsls	r0, r5, #25
 800f680:	d5fb      	bpl.n	800f67a <_printf_i+0x1ba>
 800f682:	8019      	strh	r1, [r3, #0]
 800f684:	2300      	movs	r3, #0
 800f686:	4616      	mov	r6, r2
 800f688:	6123      	str	r3, [r4, #16]
 800f68a:	e7bc      	b.n	800f606 <_printf_i+0x146>
 800f68c:	6833      	ldr	r3, [r6, #0]
 800f68e:	2100      	movs	r1, #0
 800f690:	1d1a      	adds	r2, r3, #4
 800f692:	6032      	str	r2, [r6, #0]
 800f694:	681e      	ldr	r6, [r3, #0]
 800f696:	6862      	ldr	r2, [r4, #4]
 800f698:	4630      	mov	r0, r6
 800f69a:	f000 fcfd 	bl	8010098 <memchr>
 800f69e:	b108      	cbz	r0, 800f6a4 <_printf_i+0x1e4>
 800f6a0:	1b80      	subs	r0, r0, r6
 800f6a2:	6060      	str	r0, [r4, #4]
 800f6a4:	6863      	ldr	r3, [r4, #4]
 800f6a6:	6123      	str	r3, [r4, #16]
 800f6a8:	2300      	movs	r3, #0
 800f6aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f6ae:	e7aa      	b.n	800f606 <_printf_i+0x146>
 800f6b0:	6923      	ldr	r3, [r4, #16]
 800f6b2:	4632      	mov	r2, r6
 800f6b4:	4649      	mov	r1, r9
 800f6b6:	4640      	mov	r0, r8
 800f6b8:	47d0      	blx	sl
 800f6ba:	3001      	adds	r0, #1
 800f6bc:	d0ad      	beq.n	800f61a <_printf_i+0x15a>
 800f6be:	6823      	ldr	r3, [r4, #0]
 800f6c0:	079b      	lsls	r3, r3, #30
 800f6c2:	d413      	bmi.n	800f6ec <_printf_i+0x22c>
 800f6c4:	68e0      	ldr	r0, [r4, #12]
 800f6c6:	9b03      	ldr	r3, [sp, #12]
 800f6c8:	4298      	cmp	r0, r3
 800f6ca:	bfb8      	it	lt
 800f6cc:	4618      	movlt	r0, r3
 800f6ce:	e7a6      	b.n	800f61e <_printf_i+0x15e>
 800f6d0:	2301      	movs	r3, #1
 800f6d2:	4632      	mov	r2, r6
 800f6d4:	4649      	mov	r1, r9
 800f6d6:	4640      	mov	r0, r8
 800f6d8:	47d0      	blx	sl
 800f6da:	3001      	adds	r0, #1
 800f6dc:	d09d      	beq.n	800f61a <_printf_i+0x15a>
 800f6de:	3501      	adds	r5, #1
 800f6e0:	68e3      	ldr	r3, [r4, #12]
 800f6e2:	9903      	ldr	r1, [sp, #12]
 800f6e4:	1a5b      	subs	r3, r3, r1
 800f6e6:	42ab      	cmp	r3, r5
 800f6e8:	dcf2      	bgt.n	800f6d0 <_printf_i+0x210>
 800f6ea:	e7eb      	b.n	800f6c4 <_printf_i+0x204>
 800f6ec:	2500      	movs	r5, #0
 800f6ee:	f104 0619 	add.w	r6, r4, #25
 800f6f2:	e7f5      	b.n	800f6e0 <_printf_i+0x220>
 800f6f4:	08014842 	.word	0x08014842
 800f6f8:	08014853 	.word	0x08014853

0800f6fc <_scanf_float>:
 800f6fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f700:	b087      	sub	sp, #28
 800f702:	4691      	mov	r9, r2
 800f704:	4680      	mov	r8, r0
 800f706:	460c      	mov	r4, r1
 800f708:	9303      	str	r3, [sp, #12]
 800f70a:	688b      	ldr	r3, [r1, #8]
 800f70c:	1e5a      	subs	r2, r3, #1
 800f70e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800f712:	460a      	mov	r2, r1
 800f714:	bf89      	itett	hi
 800f716:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800f71a:	f04f 0b00 	movls.w	fp, #0
 800f71e:	eb03 0b05 	addhi.w	fp, r3, r5
 800f722:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800f726:	f04f 0500 	mov.w	r5, #0
 800f72a:	bf88      	it	hi
 800f72c:	608b      	strhi	r3, [r1, #8]
 800f72e:	680b      	ldr	r3, [r1, #0]
 800f730:	46aa      	mov	sl, r5
 800f732:	462f      	mov	r7, r5
 800f734:	9502      	str	r5, [sp, #8]
 800f736:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800f73a:	f842 3b1c 	str.w	r3, [r2], #28
 800f73e:	4616      	mov	r6, r2
 800f740:	9201      	str	r2, [sp, #4]
 800f742:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f746:	68a2      	ldr	r2, [r4, #8]
 800f748:	b15a      	cbz	r2, 800f762 <_scanf_float+0x66>
 800f74a:	f8d9 3000 	ldr.w	r3, [r9]
 800f74e:	781b      	ldrb	r3, [r3, #0]
 800f750:	2b4e      	cmp	r3, #78	@ 0x4e
 800f752:	d863      	bhi.n	800f81c <_scanf_float+0x120>
 800f754:	2b40      	cmp	r3, #64	@ 0x40
 800f756:	d83b      	bhi.n	800f7d0 <_scanf_float+0xd4>
 800f758:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800f75c:	b2c8      	uxtb	r0, r1
 800f75e:	280e      	cmp	r0, #14
 800f760:	d939      	bls.n	800f7d6 <_scanf_float+0xda>
 800f762:	b11f      	cbz	r7, 800f76c <_scanf_float+0x70>
 800f764:	6823      	ldr	r3, [r4, #0]
 800f766:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f76a:	6023      	str	r3, [r4, #0]
 800f76c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f770:	f1ba 0f01 	cmp.w	sl, #1
 800f774:	f200 8115 	bhi.w	800f9a2 <_scanf_float+0x2a6>
 800f778:	9b01      	ldr	r3, [sp, #4]
 800f77a:	429e      	cmp	r6, r3
 800f77c:	f200 8106 	bhi.w	800f98c <_scanf_float+0x290>
 800f780:	2001      	movs	r0, #1
 800f782:	b007      	add	sp, #28
 800f784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f788:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800f78c:	2a0d      	cmp	r2, #13
 800f78e:	d8e8      	bhi.n	800f762 <_scanf_float+0x66>
 800f790:	a101      	add	r1, pc, #4	@ (adr r1, 800f798 <_scanf_float+0x9c>)
 800f792:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f796:	bf00      	nop
 800f798:	0800f8e1 	.word	0x0800f8e1
 800f79c:	0800f763 	.word	0x0800f763
 800f7a0:	0800f763 	.word	0x0800f763
 800f7a4:	0800f763 	.word	0x0800f763
 800f7a8:	0800f93d 	.word	0x0800f93d
 800f7ac:	0800f917 	.word	0x0800f917
 800f7b0:	0800f763 	.word	0x0800f763
 800f7b4:	0800f763 	.word	0x0800f763
 800f7b8:	0800f8ef 	.word	0x0800f8ef
 800f7bc:	0800f763 	.word	0x0800f763
 800f7c0:	0800f763 	.word	0x0800f763
 800f7c4:	0800f763 	.word	0x0800f763
 800f7c8:	0800f763 	.word	0x0800f763
 800f7cc:	0800f8ab 	.word	0x0800f8ab
 800f7d0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800f7d4:	e7da      	b.n	800f78c <_scanf_float+0x90>
 800f7d6:	290e      	cmp	r1, #14
 800f7d8:	d8c3      	bhi.n	800f762 <_scanf_float+0x66>
 800f7da:	a001      	add	r0, pc, #4	@ (adr r0, 800f7e0 <_scanf_float+0xe4>)
 800f7dc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f7e0:	0800f89b 	.word	0x0800f89b
 800f7e4:	0800f763 	.word	0x0800f763
 800f7e8:	0800f89b 	.word	0x0800f89b
 800f7ec:	0800f92b 	.word	0x0800f92b
 800f7f0:	0800f763 	.word	0x0800f763
 800f7f4:	0800f83d 	.word	0x0800f83d
 800f7f8:	0800f881 	.word	0x0800f881
 800f7fc:	0800f881 	.word	0x0800f881
 800f800:	0800f881 	.word	0x0800f881
 800f804:	0800f881 	.word	0x0800f881
 800f808:	0800f881 	.word	0x0800f881
 800f80c:	0800f881 	.word	0x0800f881
 800f810:	0800f881 	.word	0x0800f881
 800f814:	0800f881 	.word	0x0800f881
 800f818:	0800f881 	.word	0x0800f881
 800f81c:	2b6e      	cmp	r3, #110	@ 0x6e
 800f81e:	d809      	bhi.n	800f834 <_scanf_float+0x138>
 800f820:	2b60      	cmp	r3, #96	@ 0x60
 800f822:	d8b1      	bhi.n	800f788 <_scanf_float+0x8c>
 800f824:	2b54      	cmp	r3, #84	@ 0x54
 800f826:	d07b      	beq.n	800f920 <_scanf_float+0x224>
 800f828:	2b59      	cmp	r3, #89	@ 0x59
 800f82a:	d19a      	bne.n	800f762 <_scanf_float+0x66>
 800f82c:	2d07      	cmp	r5, #7
 800f82e:	d198      	bne.n	800f762 <_scanf_float+0x66>
 800f830:	2508      	movs	r5, #8
 800f832:	e02f      	b.n	800f894 <_scanf_float+0x198>
 800f834:	2b74      	cmp	r3, #116	@ 0x74
 800f836:	d073      	beq.n	800f920 <_scanf_float+0x224>
 800f838:	2b79      	cmp	r3, #121	@ 0x79
 800f83a:	e7f6      	b.n	800f82a <_scanf_float+0x12e>
 800f83c:	6821      	ldr	r1, [r4, #0]
 800f83e:	05c8      	lsls	r0, r1, #23
 800f840:	d51e      	bpl.n	800f880 <_scanf_float+0x184>
 800f842:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800f846:	3701      	adds	r7, #1
 800f848:	6021      	str	r1, [r4, #0]
 800f84a:	f1bb 0f00 	cmp.w	fp, #0
 800f84e:	d003      	beq.n	800f858 <_scanf_float+0x15c>
 800f850:	3201      	adds	r2, #1
 800f852:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f856:	60a2      	str	r2, [r4, #8]
 800f858:	68a3      	ldr	r3, [r4, #8]
 800f85a:	3b01      	subs	r3, #1
 800f85c:	60a3      	str	r3, [r4, #8]
 800f85e:	6923      	ldr	r3, [r4, #16]
 800f860:	3301      	adds	r3, #1
 800f862:	6123      	str	r3, [r4, #16]
 800f864:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800f868:	3b01      	subs	r3, #1
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	f8c9 3004 	str.w	r3, [r9, #4]
 800f870:	f340 8083 	ble.w	800f97a <_scanf_float+0x27e>
 800f874:	f8d9 3000 	ldr.w	r3, [r9]
 800f878:	3301      	adds	r3, #1
 800f87a:	f8c9 3000 	str.w	r3, [r9]
 800f87e:	e762      	b.n	800f746 <_scanf_float+0x4a>
 800f880:	eb1a 0105 	adds.w	r1, sl, r5
 800f884:	f47f af6d 	bne.w	800f762 <_scanf_float+0x66>
 800f888:	6822      	ldr	r2, [r4, #0]
 800f88a:	460d      	mov	r5, r1
 800f88c:	468a      	mov	sl, r1
 800f88e:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800f892:	6022      	str	r2, [r4, #0]
 800f894:	f806 3b01 	strb.w	r3, [r6], #1
 800f898:	e7de      	b.n	800f858 <_scanf_float+0x15c>
 800f89a:	6822      	ldr	r2, [r4, #0]
 800f89c:	0610      	lsls	r0, r2, #24
 800f89e:	f57f af60 	bpl.w	800f762 <_scanf_float+0x66>
 800f8a2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800f8a6:	6022      	str	r2, [r4, #0]
 800f8a8:	e7f4      	b.n	800f894 <_scanf_float+0x198>
 800f8aa:	f1ba 0f00 	cmp.w	sl, #0
 800f8ae:	d10c      	bne.n	800f8ca <_scanf_float+0x1ce>
 800f8b0:	b977      	cbnz	r7, 800f8d0 <_scanf_float+0x1d4>
 800f8b2:	6822      	ldr	r2, [r4, #0]
 800f8b4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f8b8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f8bc:	d108      	bne.n	800f8d0 <_scanf_float+0x1d4>
 800f8be:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f8c2:	f04f 0a01 	mov.w	sl, #1
 800f8c6:	6022      	str	r2, [r4, #0]
 800f8c8:	e7e4      	b.n	800f894 <_scanf_float+0x198>
 800f8ca:	f1ba 0f02 	cmp.w	sl, #2
 800f8ce:	d051      	beq.n	800f974 <_scanf_float+0x278>
 800f8d0:	2d01      	cmp	r5, #1
 800f8d2:	d002      	beq.n	800f8da <_scanf_float+0x1de>
 800f8d4:	2d04      	cmp	r5, #4
 800f8d6:	f47f af44 	bne.w	800f762 <_scanf_float+0x66>
 800f8da:	3501      	adds	r5, #1
 800f8dc:	b2ed      	uxtb	r5, r5
 800f8de:	e7d9      	b.n	800f894 <_scanf_float+0x198>
 800f8e0:	f1ba 0f01 	cmp.w	sl, #1
 800f8e4:	f47f af3d 	bne.w	800f762 <_scanf_float+0x66>
 800f8e8:	f04f 0a02 	mov.w	sl, #2
 800f8ec:	e7d2      	b.n	800f894 <_scanf_float+0x198>
 800f8ee:	b975      	cbnz	r5, 800f90e <_scanf_float+0x212>
 800f8f0:	2f00      	cmp	r7, #0
 800f8f2:	f47f af37 	bne.w	800f764 <_scanf_float+0x68>
 800f8f6:	6822      	ldr	r2, [r4, #0]
 800f8f8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f8fc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f900:	f040 8103 	bne.w	800fb0a <_scanf_float+0x40e>
 800f904:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f908:	2501      	movs	r5, #1
 800f90a:	6022      	str	r2, [r4, #0]
 800f90c:	e7c2      	b.n	800f894 <_scanf_float+0x198>
 800f90e:	2d03      	cmp	r5, #3
 800f910:	d0e3      	beq.n	800f8da <_scanf_float+0x1de>
 800f912:	2d05      	cmp	r5, #5
 800f914:	e7df      	b.n	800f8d6 <_scanf_float+0x1da>
 800f916:	2d02      	cmp	r5, #2
 800f918:	f47f af23 	bne.w	800f762 <_scanf_float+0x66>
 800f91c:	2503      	movs	r5, #3
 800f91e:	e7b9      	b.n	800f894 <_scanf_float+0x198>
 800f920:	2d06      	cmp	r5, #6
 800f922:	f47f af1e 	bne.w	800f762 <_scanf_float+0x66>
 800f926:	2507      	movs	r5, #7
 800f928:	e7b4      	b.n	800f894 <_scanf_float+0x198>
 800f92a:	6822      	ldr	r2, [r4, #0]
 800f92c:	0591      	lsls	r1, r2, #22
 800f92e:	f57f af18 	bpl.w	800f762 <_scanf_float+0x66>
 800f932:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800f936:	9702      	str	r7, [sp, #8]
 800f938:	6022      	str	r2, [r4, #0]
 800f93a:	e7ab      	b.n	800f894 <_scanf_float+0x198>
 800f93c:	6822      	ldr	r2, [r4, #0]
 800f93e:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800f942:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800f946:	d005      	beq.n	800f954 <_scanf_float+0x258>
 800f948:	0550      	lsls	r0, r2, #21
 800f94a:	f57f af0a 	bpl.w	800f762 <_scanf_float+0x66>
 800f94e:	2f00      	cmp	r7, #0
 800f950:	f000 80db 	beq.w	800fb0a <_scanf_float+0x40e>
 800f954:	0591      	lsls	r1, r2, #22
 800f956:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f95a:	bf58      	it	pl
 800f95c:	9902      	ldrpl	r1, [sp, #8]
 800f95e:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800f962:	bf58      	it	pl
 800f964:	1a79      	subpl	r1, r7, r1
 800f966:	6022      	str	r2, [r4, #0]
 800f968:	f04f 0700 	mov.w	r7, #0
 800f96c:	bf58      	it	pl
 800f96e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f972:	e78f      	b.n	800f894 <_scanf_float+0x198>
 800f974:	f04f 0a03 	mov.w	sl, #3
 800f978:	e78c      	b.n	800f894 <_scanf_float+0x198>
 800f97a:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f97e:	4649      	mov	r1, r9
 800f980:	4640      	mov	r0, r8
 800f982:	4798      	blx	r3
 800f984:	2800      	cmp	r0, #0
 800f986:	f43f aede 	beq.w	800f746 <_scanf_float+0x4a>
 800f98a:	e6ea      	b.n	800f762 <_scanf_float+0x66>
 800f98c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f990:	464a      	mov	r2, r9
 800f992:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f996:	4640      	mov	r0, r8
 800f998:	4798      	blx	r3
 800f99a:	6923      	ldr	r3, [r4, #16]
 800f99c:	3b01      	subs	r3, #1
 800f99e:	6123      	str	r3, [r4, #16]
 800f9a0:	e6ea      	b.n	800f778 <_scanf_float+0x7c>
 800f9a2:	1e6b      	subs	r3, r5, #1
 800f9a4:	2b06      	cmp	r3, #6
 800f9a6:	d824      	bhi.n	800f9f2 <_scanf_float+0x2f6>
 800f9a8:	2d02      	cmp	r5, #2
 800f9aa:	d836      	bhi.n	800fa1a <_scanf_float+0x31e>
 800f9ac:	9b01      	ldr	r3, [sp, #4]
 800f9ae:	429e      	cmp	r6, r3
 800f9b0:	f67f aee6 	bls.w	800f780 <_scanf_float+0x84>
 800f9b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f9b8:	464a      	mov	r2, r9
 800f9ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f9be:	4640      	mov	r0, r8
 800f9c0:	4798      	blx	r3
 800f9c2:	6923      	ldr	r3, [r4, #16]
 800f9c4:	3b01      	subs	r3, #1
 800f9c6:	6123      	str	r3, [r4, #16]
 800f9c8:	e7f0      	b.n	800f9ac <_scanf_float+0x2b0>
 800f9ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f9ce:	464a      	mov	r2, r9
 800f9d0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800f9d4:	4640      	mov	r0, r8
 800f9d6:	4798      	blx	r3
 800f9d8:	6923      	ldr	r3, [r4, #16]
 800f9da:	3b01      	subs	r3, #1
 800f9dc:	6123      	str	r3, [r4, #16]
 800f9de:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f9e2:	fa5f fa8a 	uxtb.w	sl, sl
 800f9e6:	f1ba 0f02 	cmp.w	sl, #2
 800f9ea:	d1ee      	bne.n	800f9ca <_scanf_float+0x2ce>
 800f9ec:	3d03      	subs	r5, #3
 800f9ee:	b2ed      	uxtb	r5, r5
 800f9f0:	1b76      	subs	r6, r6, r5
 800f9f2:	6823      	ldr	r3, [r4, #0]
 800f9f4:	05da      	lsls	r2, r3, #23
 800f9f6:	d52f      	bpl.n	800fa58 <_scanf_float+0x35c>
 800f9f8:	055b      	lsls	r3, r3, #21
 800f9fa:	d511      	bpl.n	800fa20 <_scanf_float+0x324>
 800f9fc:	9b01      	ldr	r3, [sp, #4]
 800f9fe:	429e      	cmp	r6, r3
 800fa00:	f67f aebe 	bls.w	800f780 <_scanf_float+0x84>
 800fa04:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fa08:	464a      	mov	r2, r9
 800fa0a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fa0e:	4640      	mov	r0, r8
 800fa10:	4798      	blx	r3
 800fa12:	6923      	ldr	r3, [r4, #16]
 800fa14:	3b01      	subs	r3, #1
 800fa16:	6123      	str	r3, [r4, #16]
 800fa18:	e7f0      	b.n	800f9fc <_scanf_float+0x300>
 800fa1a:	46aa      	mov	sl, r5
 800fa1c:	46b3      	mov	fp, r6
 800fa1e:	e7de      	b.n	800f9de <_scanf_float+0x2e2>
 800fa20:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800fa24:	1e75      	subs	r5, r6, #1
 800fa26:	6923      	ldr	r3, [r4, #16]
 800fa28:	2965      	cmp	r1, #101	@ 0x65
 800fa2a:	f103 33ff 	add.w	r3, r3, #4294967295
 800fa2e:	6123      	str	r3, [r4, #16]
 800fa30:	d00c      	beq.n	800fa4c <_scanf_float+0x350>
 800fa32:	2945      	cmp	r1, #69	@ 0x45
 800fa34:	d00a      	beq.n	800fa4c <_scanf_float+0x350>
 800fa36:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fa3a:	464a      	mov	r2, r9
 800fa3c:	4640      	mov	r0, r8
 800fa3e:	1eb5      	subs	r5, r6, #2
 800fa40:	4798      	blx	r3
 800fa42:	6923      	ldr	r3, [r4, #16]
 800fa44:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800fa48:	3b01      	subs	r3, #1
 800fa4a:	6123      	str	r3, [r4, #16]
 800fa4c:	462e      	mov	r6, r5
 800fa4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fa52:	464a      	mov	r2, r9
 800fa54:	4640      	mov	r0, r8
 800fa56:	4798      	blx	r3
 800fa58:	6822      	ldr	r2, [r4, #0]
 800fa5a:	f012 0210 	ands.w	r2, r2, #16
 800fa5e:	d001      	beq.n	800fa64 <_scanf_float+0x368>
 800fa60:	2000      	movs	r0, #0
 800fa62:	e68e      	b.n	800f782 <_scanf_float+0x86>
 800fa64:	7032      	strb	r2, [r6, #0]
 800fa66:	6823      	ldr	r3, [r4, #0]
 800fa68:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800fa6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fa70:	d125      	bne.n	800fabe <_scanf_float+0x3c2>
 800fa72:	9b02      	ldr	r3, [sp, #8]
 800fa74:	429f      	cmp	r7, r3
 800fa76:	d00a      	beq.n	800fa8e <_scanf_float+0x392>
 800fa78:	1bda      	subs	r2, r3, r7
 800fa7a:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800fa7e:	4924      	ldr	r1, [pc, #144]	@ (800fb10 <_scanf_float+0x414>)
 800fa80:	429e      	cmp	r6, r3
 800fa82:	bf28      	it	cs
 800fa84:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800fa88:	4630      	mov	r0, r6
 800fa8a:	f000 f977 	bl	800fd7c <siprintf>
 800fa8e:	2200      	movs	r2, #0
 800fa90:	9901      	ldr	r1, [sp, #4]
 800fa92:	4640      	mov	r0, r8
 800fa94:	f002 fd3c 	bl	8012510 <_strtod_r>
 800fa98:	6821      	ldr	r1, [r4, #0]
 800fa9a:	9b03      	ldr	r3, [sp, #12]
 800fa9c:	f011 0f02 	tst.w	r1, #2
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	ec57 6b10 	vmov	r6, r7, d0
 800faa6:	f103 0204 	add.w	r2, r3, #4
 800faaa:	d015      	beq.n	800fad8 <_scanf_float+0x3dc>
 800faac:	9903      	ldr	r1, [sp, #12]
 800faae:	600a      	str	r2, [r1, #0]
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	e9c3 6700 	strd	r6, r7, [r3]
 800fab6:	68e3      	ldr	r3, [r4, #12]
 800fab8:	3301      	adds	r3, #1
 800faba:	60e3      	str	r3, [r4, #12]
 800fabc:	e7d0      	b.n	800fa60 <_scanf_float+0x364>
 800fabe:	9b04      	ldr	r3, [sp, #16]
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d0e4      	beq.n	800fa8e <_scanf_float+0x392>
 800fac4:	9905      	ldr	r1, [sp, #20]
 800fac6:	230a      	movs	r3, #10
 800fac8:	4640      	mov	r0, r8
 800faca:	3101      	adds	r1, #1
 800facc:	f002 fda0 	bl	8012610 <_strtol_r>
 800fad0:	9b04      	ldr	r3, [sp, #16]
 800fad2:	9e05      	ldr	r6, [sp, #20]
 800fad4:	1ac2      	subs	r2, r0, r3
 800fad6:	e7d0      	b.n	800fa7a <_scanf_float+0x37e>
 800fad8:	f011 0f04 	tst.w	r1, #4
 800fadc:	9903      	ldr	r1, [sp, #12]
 800fade:	600a      	str	r2, [r1, #0]
 800fae0:	d1e6      	bne.n	800fab0 <_scanf_float+0x3b4>
 800fae2:	681d      	ldr	r5, [r3, #0]
 800fae4:	4632      	mov	r2, r6
 800fae6:	463b      	mov	r3, r7
 800fae8:	4630      	mov	r0, r6
 800faea:	4639      	mov	r1, r7
 800faec:	f7f2 fdb0 	bl	8002650 <__aeabi_dcmpun>
 800faf0:	b128      	cbz	r0, 800fafe <_scanf_float+0x402>
 800faf2:	4808      	ldr	r0, [pc, #32]	@ (800fb14 <_scanf_float+0x418>)
 800faf4:	f000 faec 	bl	80100d0 <nanf>
 800faf8:	ed85 0a00 	vstr	s0, [r5]
 800fafc:	e7db      	b.n	800fab6 <_scanf_float+0x3ba>
 800fafe:	4630      	mov	r0, r6
 800fb00:	4639      	mov	r1, r7
 800fb02:	f7f2 fe03 	bl	800270c <__aeabi_d2f>
 800fb06:	6028      	str	r0, [r5, #0]
 800fb08:	e7d5      	b.n	800fab6 <_scanf_float+0x3ba>
 800fb0a:	2700      	movs	r7, #0
 800fb0c:	e62e      	b.n	800f76c <_scanf_float+0x70>
 800fb0e:	bf00      	nop
 800fb10:	08014864 	.word	0x08014864
 800fb14:	080149a5 	.word	0x080149a5

0800fb18 <std>:
 800fb18:	2300      	movs	r3, #0
 800fb1a:	b510      	push	{r4, lr}
 800fb1c:	4604      	mov	r4, r0
 800fb1e:	6083      	str	r3, [r0, #8]
 800fb20:	8181      	strh	r1, [r0, #12]
 800fb22:	4619      	mov	r1, r3
 800fb24:	6643      	str	r3, [r0, #100]	@ 0x64
 800fb26:	81c2      	strh	r2, [r0, #14]
 800fb28:	2208      	movs	r2, #8
 800fb2a:	6183      	str	r3, [r0, #24]
 800fb2c:	e9c0 3300 	strd	r3, r3, [r0]
 800fb30:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fb34:	305c      	adds	r0, #92	@ 0x5c
 800fb36:	f000 fa2b 	bl	800ff90 <memset>
 800fb3a:	4b0d      	ldr	r3, [pc, #52]	@ (800fb70 <std+0x58>)
 800fb3c:	6224      	str	r4, [r4, #32]
 800fb3e:	6263      	str	r3, [r4, #36]	@ 0x24
 800fb40:	4b0c      	ldr	r3, [pc, #48]	@ (800fb74 <std+0x5c>)
 800fb42:	62a3      	str	r3, [r4, #40]	@ 0x28
 800fb44:	4b0c      	ldr	r3, [pc, #48]	@ (800fb78 <std+0x60>)
 800fb46:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800fb48:	4b0c      	ldr	r3, [pc, #48]	@ (800fb7c <std+0x64>)
 800fb4a:	6323      	str	r3, [r4, #48]	@ 0x30
 800fb4c:	4b0c      	ldr	r3, [pc, #48]	@ (800fb80 <std+0x68>)
 800fb4e:	429c      	cmp	r4, r3
 800fb50:	d006      	beq.n	800fb60 <std+0x48>
 800fb52:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800fb56:	4294      	cmp	r4, r2
 800fb58:	d002      	beq.n	800fb60 <std+0x48>
 800fb5a:	33d0      	adds	r3, #208	@ 0xd0
 800fb5c:	429c      	cmp	r4, r3
 800fb5e:	d105      	bne.n	800fb6c <std+0x54>
 800fb60:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800fb64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fb68:	f000 ba8e 	b.w	8010088 <__retarget_lock_init_recursive>
 800fb6c:	bd10      	pop	{r4, pc}
 800fb6e:	bf00      	nop
 800fb70:	0800fdc1 	.word	0x0800fdc1
 800fb74:	0800fde3 	.word	0x0800fde3
 800fb78:	0800fe1b 	.word	0x0800fe1b
 800fb7c:	0800fe3f 	.word	0x0800fe3f
 800fb80:	200007a0 	.word	0x200007a0

0800fb84 <stdio_exit_handler>:
 800fb84:	4a02      	ldr	r2, [pc, #8]	@ (800fb90 <stdio_exit_handler+0xc>)
 800fb86:	4903      	ldr	r1, [pc, #12]	@ (800fb94 <stdio_exit_handler+0x10>)
 800fb88:	4803      	ldr	r0, [pc, #12]	@ (800fb98 <stdio_exit_handler+0x14>)
 800fb8a:	f000 b869 	b.w	800fc60 <_fwalk_sglue>
 800fb8e:	bf00      	nop
 800fb90:	20000030 	.word	0x20000030
 800fb94:	08012c51 	.word	0x08012c51
 800fb98:	20000040 	.word	0x20000040

0800fb9c <cleanup_stdio>:
 800fb9c:	6841      	ldr	r1, [r0, #4]
 800fb9e:	4b0c      	ldr	r3, [pc, #48]	@ (800fbd0 <cleanup_stdio+0x34>)
 800fba0:	4299      	cmp	r1, r3
 800fba2:	b510      	push	{r4, lr}
 800fba4:	4604      	mov	r4, r0
 800fba6:	d001      	beq.n	800fbac <cleanup_stdio+0x10>
 800fba8:	f003 f852 	bl	8012c50 <_fflush_r>
 800fbac:	68a1      	ldr	r1, [r4, #8]
 800fbae:	4b09      	ldr	r3, [pc, #36]	@ (800fbd4 <cleanup_stdio+0x38>)
 800fbb0:	4299      	cmp	r1, r3
 800fbb2:	d002      	beq.n	800fbba <cleanup_stdio+0x1e>
 800fbb4:	4620      	mov	r0, r4
 800fbb6:	f003 f84b 	bl	8012c50 <_fflush_r>
 800fbba:	68e1      	ldr	r1, [r4, #12]
 800fbbc:	4b06      	ldr	r3, [pc, #24]	@ (800fbd8 <cleanup_stdio+0x3c>)
 800fbbe:	4299      	cmp	r1, r3
 800fbc0:	d004      	beq.n	800fbcc <cleanup_stdio+0x30>
 800fbc2:	4620      	mov	r0, r4
 800fbc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fbc8:	f003 b842 	b.w	8012c50 <_fflush_r>
 800fbcc:	bd10      	pop	{r4, pc}
 800fbce:	bf00      	nop
 800fbd0:	200007a0 	.word	0x200007a0
 800fbd4:	20000808 	.word	0x20000808
 800fbd8:	20000870 	.word	0x20000870

0800fbdc <global_stdio_init.part.0>:
 800fbdc:	b510      	push	{r4, lr}
 800fbde:	4b0b      	ldr	r3, [pc, #44]	@ (800fc0c <global_stdio_init.part.0+0x30>)
 800fbe0:	2104      	movs	r1, #4
 800fbe2:	4c0b      	ldr	r4, [pc, #44]	@ (800fc10 <global_stdio_init.part.0+0x34>)
 800fbe4:	4a0b      	ldr	r2, [pc, #44]	@ (800fc14 <global_stdio_init.part.0+0x38>)
 800fbe6:	4620      	mov	r0, r4
 800fbe8:	601a      	str	r2, [r3, #0]
 800fbea:	2200      	movs	r2, #0
 800fbec:	f7ff ff94 	bl	800fb18 <std>
 800fbf0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800fbf4:	2201      	movs	r2, #1
 800fbf6:	2109      	movs	r1, #9
 800fbf8:	f7ff ff8e 	bl	800fb18 <std>
 800fbfc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800fc00:	2202      	movs	r2, #2
 800fc02:	2112      	movs	r1, #18
 800fc04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fc08:	f7ff bf86 	b.w	800fb18 <std>
 800fc0c:	200008d8 	.word	0x200008d8
 800fc10:	200007a0 	.word	0x200007a0
 800fc14:	0800fb85 	.word	0x0800fb85

0800fc18 <__sfp_lock_acquire>:
 800fc18:	4801      	ldr	r0, [pc, #4]	@ (800fc20 <__sfp_lock_acquire+0x8>)
 800fc1a:	f000 ba36 	b.w	801008a <__retarget_lock_acquire_recursive>
 800fc1e:	bf00      	nop
 800fc20:	200008e1 	.word	0x200008e1

0800fc24 <__sfp_lock_release>:
 800fc24:	4801      	ldr	r0, [pc, #4]	@ (800fc2c <__sfp_lock_release+0x8>)
 800fc26:	f000 ba31 	b.w	801008c <__retarget_lock_release_recursive>
 800fc2a:	bf00      	nop
 800fc2c:	200008e1 	.word	0x200008e1

0800fc30 <__sinit>:
 800fc30:	b510      	push	{r4, lr}
 800fc32:	4604      	mov	r4, r0
 800fc34:	f7ff fff0 	bl	800fc18 <__sfp_lock_acquire>
 800fc38:	6a23      	ldr	r3, [r4, #32]
 800fc3a:	b11b      	cbz	r3, 800fc44 <__sinit+0x14>
 800fc3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fc40:	f7ff bff0 	b.w	800fc24 <__sfp_lock_release>
 800fc44:	4b04      	ldr	r3, [pc, #16]	@ (800fc58 <__sinit+0x28>)
 800fc46:	6223      	str	r3, [r4, #32]
 800fc48:	4b04      	ldr	r3, [pc, #16]	@ (800fc5c <__sinit+0x2c>)
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d1f5      	bne.n	800fc3c <__sinit+0xc>
 800fc50:	f7ff ffc4 	bl	800fbdc <global_stdio_init.part.0>
 800fc54:	e7f2      	b.n	800fc3c <__sinit+0xc>
 800fc56:	bf00      	nop
 800fc58:	0800fb9d 	.word	0x0800fb9d
 800fc5c:	200008d8 	.word	0x200008d8

0800fc60 <_fwalk_sglue>:
 800fc60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fc64:	4607      	mov	r7, r0
 800fc66:	4688      	mov	r8, r1
 800fc68:	4614      	mov	r4, r2
 800fc6a:	2600      	movs	r6, #0
 800fc6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fc70:	f1b9 0901 	subs.w	r9, r9, #1
 800fc74:	d505      	bpl.n	800fc82 <_fwalk_sglue+0x22>
 800fc76:	6824      	ldr	r4, [r4, #0]
 800fc78:	2c00      	cmp	r4, #0
 800fc7a:	d1f7      	bne.n	800fc6c <_fwalk_sglue+0xc>
 800fc7c:	4630      	mov	r0, r6
 800fc7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc82:	89ab      	ldrh	r3, [r5, #12]
 800fc84:	2b01      	cmp	r3, #1
 800fc86:	d907      	bls.n	800fc98 <_fwalk_sglue+0x38>
 800fc88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fc8c:	3301      	adds	r3, #1
 800fc8e:	d003      	beq.n	800fc98 <_fwalk_sglue+0x38>
 800fc90:	4629      	mov	r1, r5
 800fc92:	4638      	mov	r0, r7
 800fc94:	47c0      	blx	r8
 800fc96:	4306      	orrs	r6, r0
 800fc98:	3568      	adds	r5, #104	@ 0x68
 800fc9a:	e7e9      	b.n	800fc70 <_fwalk_sglue+0x10>

0800fc9c <iprintf>:
 800fc9c:	b40f      	push	{r0, r1, r2, r3}
 800fc9e:	b507      	push	{r0, r1, r2, lr}
 800fca0:	4906      	ldr	r1, [pc, #24]	@ (800fcbc <iprintf+0x20>)
 800fca2:	ab04      	add	r3, sp, #16
 800fca4:	6808      	ldr	r0, [r1, #0]
 800fca6:	f853 2b04 	ldr.w	r2, [r3], #4
 800fcaa:	6881      	ldr	r1, [r0, #8]
 800fcac:	9301      	str	r3, [sp, #4]
 800fcae:	f002 fe33 	bl	8012918 <_vfiprintf_r>
 800fcb2:	b003      	add	sp, #12
 800fcb4:	f85d eb04 	ldr.w	lr, [sp], #4
 800fcb8:	b004      	add	sp, #16
 800fcba:	4770      	bx	lr
 800fcbc:	2000003c 	.word	0x2000003c

0800fcc0 <_puts_r>:
 800fcc0:	6a03      	ldr	r3, [r0, #32]
 800fcc2:	b570      	push	{r4, r5, r6, lr}
 800fcc4:	4605      	mov	r5, r0
 800fcc6:	460e      	mov	r6, r1
 800fcc8:	6884      	ldr	r4, [r0, #8]
 800fcca:	b90b      	cbnz	r3, 800fcd0 <_puts_r+0x10>
 800fccc:	f7ff ffb0 	bl	800fc30 <__sinit>
 800fcd0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fcd2:	07db      	lsls	r3, r3, #31
 800fcd4:	d405      	bmi.n	800fce2 <_puts_r+0x22>
 800fcd6:	89a3      	ldrh	r3, [r4, #12]
 800fcd8:	0598      	lsls	r0, r3, #22
 800fcda:	d402      	bmi.n	800fce2 <_puts_r+0x22>
 800fcdc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fcde:	f000 f9d4 	bl	801008a <__retarget_lock_acquire_recursive>
 800fce2:	89a3      	ldrh	r3, [r4, #12]
 800fce4:	0719      	lsls	r1, r3, #28
 800fce6:	d502      	bpl.n	800fcee <_puts_r+0x2e>
 800fce8:	6923      	ldr	r3, [r4, #16]
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d135      	bne.n	800fd5a <_puts_r+0x9a>
 800fcee:	4621      	mov	r1, r4
 800fcf0:	4628      	mov	r0, r5
 800fcf2:	f000 f8e7 	bl	800fec4 <__swsetup_r>
 800fcf6:	b380      	cbz	r0, 800fd5a <_puts_r+0x9a>
 800fcf8:	f04f 35ff 	mov.w	r5, #4294967295
 800fcfc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fcfe:	07da      	lsls	r2, r3, #31
 800fd00:	d405      	bmi.n	800fd0e <_puts_r+0x4e>
 800fd02:	89a3      	ldrh	r3, [r4, #12]
 800fd04:	059b      	lsls	r3, r3, #22
 800fd06:	d402      	bmi.n	800fd0e <_puts_r+0x4e>
 800fd08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fd0a:	f000 f9bf 	bl	801008c <__retarget_lock_release_recursive>
 800fd0e:	4628      	mov	r0, r5
 800fd10:	bd70      	pop	{r4, r5, r6, pc}
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	da04      	bge.n	800fd20 <_puts_r+0x60>
 800fd16:	69a2      	ldr	r2, [r4, #24]
 800fd18:	429a      	cmp	r2, r3
 800fd1a:	dc17      	bgt.n	800fd4c <_puts_r+0x8c>
 800fd1c:	290a      	cmp	r1, #10
 800fd1e:	d015      	beq.n	800fd4c <_puts_r+0x8c>
 800fd20:	6823      	ldr	r3, [r4, #0]
 800fd22:	1c5a      	adds	r2, r3, #1
 800fd24:	6022      	str	r2, [r4, #0]
 800fd26:	7019      	strb	r1, [r3, #0]
 800fd28:	68a3      	ldr	r3, [r4, #8]
 800fd2a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800fd2e:	3b01      	subs	r3, #1
 800fd30:	60a3      	str	r3, [r4, #8]
 800fd32:	2900      	cmp	r1, #0
 800fd34:	d1ed      	bne.n	800fd12 <_puts_r+0x52>
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	da11      	bge.n	800fd5e <_puts_r+0x9e>
 800fd3a:	4622      	mov	r2, r4
 800fd3c:	210a      	movs	r1, #10
 800fd3e:	4628      	mov	r0, r5
 800fd40:	f000 f881 	bl	800fe46 <__swbuf_r>
 800fd44:	3001      	adds	r0, #1
 800fd46:	d0d7      	beq.n	800fcf8 <_puts_r+0x38>
 800fd48:	250a      	movs	r5, #10
 800fd4a:	e7d7      	b.n	800fcfc <_puts_r+0x3c>
 800fd4c:	4622      	mov	r2, r4
 800fd4e:	4628      	mov	r0, r5
 800fd50:	f000 f879 	bl	800fe46 <__swbuf_r>
 800fd54:	3001      	adds	r0, #1
 800fd56:	d1e7      	bne.n	800fd28 <_puts_r+0x68>
 800fd58:	e7ce      	b.n	800fcf8 <_puts_r+0x38>
 800fd5a:	3e01      	subs	r6, #1
 800fd5c:	e7e4      	b.n	800fd28 <_puts_r+0x68>
 800fd5e:	6823      	ldr	r3, [r4, #0]
 800fd60:	1c5a      	adds	r2, r3, #1
 800fd62:	6022      	str	r2, [r4, #0]
 800fd64:	220a      	movs	r2, #10
 800fd66:	701a      	strb	r2, [r3, #0]
 800fd68:	e7ee      	b.n	800fd48 <_puts_r+0x88>
	...

0800fd6c <puts>:
 800fd6c:	4b02      	ldr	r3, [pc, #8]	@ (800fd78 <puts+0xc>)
 800fd6e:	4601      	mov	r1, r0
 800fd70:	6818      	ldr	r0, [r3, #0]
 800fd72:	f7ff bfa5 	b.w	800fcc0 <_puts_r>
 800fd76:	bf00      	nop
 800fd78:	2000003c 	.word	0x2000003c

0800fd7c <siprintf>:
 800fd7c:	b40e      	push	{r1, r2, r3}
 800fd7e:	b510      	push	{r4, lr}
 800fd80:	b09d      	sub	sp, #116	@ 0x74
 800fd82:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800fd86:	2400      	movs	r4, #0
 800fd88:	ab1f      	add	r3, sp, #124	@ 0x7c
 800fd8a:	9002      	str	r0, [sp, #8]
 800fd8c:	9006      	str	r0, [sp, #24]
 800fd8e:	9107      	str	r1, [sp, #28]
 800fd90:	9104      	str	r1, [sp, #16]
 800fd92:	4809      	ldr	r0, [pc, #36]	@ (800fdb8 <siprintf+0x3c>)
 800fd94:	4909      	ldr	r1, [pc, #36]	@ (800fdbc <siprintf+0x40>)
 800fd96:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd9a:	9105      	str	r1, [sp, #20]
 800fd9c:	a902      	add	r1, sp, #8
 800fd9e:	6800      	ldr	r0, [r0, #0]
 800fda0:	9301      	str	r3, [sp, #4]
 800fda2:	941b      	str	r4, [sp, #108]	@ 0x6c
 800fda4:	f002 fc92 	bl	80126cc <_svfiprintf_r>
 800fda8:	9b02      	ldr	r3, [sp, #8]
 800fdaa:	701c      	strb	r4, [r3, #0]
 800fdac:	b01d      	add	sp, #116	@ 0x74
 800fdae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fdb2:	b003      	add	sp, #12
 800fdb4:	4770      	bx	lr
 800fdb6:	bf00      	nop
 800fdb8:	2000003c 	.word	0x2000003c
 800fdbc:	ffff0208 	.word	0xffff0208

0800fdc0 <__sread>:
 800fdc0:	b510      	push	{r4, lr}
 800fdc2:	460c      	mov	r4, r1
 800fdc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fdc8:	f000 f910 	bl	800ffec <_read_r>
 800fdcc:	2800      	cmp	r0, #0
 800fdce:	bfab      	itete	ge
 800fdd0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800fdd2:	89a3      	ldrhlt	r3, [r4, #12]
 800fdd4:	181b      	addge	r3, r3, r0
 800fdd6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800fdda:	bfac      	ite	ge
 800fddc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800fdde:	81a3      	strhlt	r3, [r4, #12]
 800fde0:	bd10      	pop	{r4, pc}

0800fde2 <__swrite>:
 800fde2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fde6:	461f      	mov	r7, r3
 800fde8:	898b      	ldrh	r3, [r1, #12]
 800fdea:	4605      	mov	r5, r0
 800fdec:	460c      	mov	r4, r1
 800fdee:	05db      	lsls	r3, r3, #23
 800fdf0:	4616      	mov	r6, r2
 800fdf2:	d505      	bpl.n	800fe00 <__swrite+0x1e>
 800fdf4:	2302      	movs	r3, #2
 800fdf6:	2200      	movs	r2, #0
 800fdf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fdfc:	f000 f8e4 	bl	800ffc8 <_lseek_r>
 800fe00:	89a3      	ldrh	r3, [r4, #12]
 800fe02:	4632      	mov	r2, r6
 800fe04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fe08:	4628      	mov	r0, r5
 800fe0a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fe0e:	81a3      	strh	r3, [r4, #12]
 800fe10:	463b      	mov	r3, r7
 800fe12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fe16:	f000 b8fb 	b.w	8010010 <_write_r>

0800fe1a <__sseek>:
 800fe1a:	b510      	push	{r4, lr}
 800fe1c:	460c      	mov	r4, r1
 800fe1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe22:	f000 f8d1 	bl	800ffc8 <_lseek_r>
 800fe26:	1c43      	adds	r3, r0, #1
 800fe28:	89a3      	ldrh	r3, [r4, #12]
 800fe2a:	bf15      	itete	ne
 800fe2c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800fe2e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800fe32:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800fe36:	81a3      	strheq	r3, [r4, #12]
 800fe38:	bf18      	it	ne
 800fe3a:	81a3      	strhne	r3, [r4, #12]
 800fe3c:	bd10      	pop	{r4, pc}

0800fe3e <__sclose>:
 800fe3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe42:	f000 b8b1 	b.w	800ffa8 <_close_r>

0800fe46 <__swbuf_r>:
 800fe46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe48:	460e      	mov	r6, r1
 800fe4a:	4614      	mov	r4, r2
 800fe4c:	4605      	mov	r5, r0
 800fe4e:	b118      	cbz	r0, 800fe58 <__swbuf_r+0x12>
 800fe50:	6a03      	ldr	r3, [r0, #32]
 800fe52:	b90b      	cbnz	r3, 800fe58 <__swbuf_r+0x12>
 800fe54:	f7ff feec 	bl	800fc30 <__sinit>
 800fe58:	69a3      	ldr	r3, [r4, #24]
 800fe5a:	60a3      	str	r3, [r4, #8]
 800fe5c:	89a3      	ldrh	r3, [r4, #12]
 800fe5e:	071a      	lsls	r2, r3, #28
 800fe60:	d501      	bpl.n	800fe66 <__swbuf_r+0x20>
 800fe62:	6923      	ldr	r3, [r4, #16]
 800fe64:	b943      	cbnz	r3, 800fe78 <__swbuf_r+0x32>
 800fe66:	4621      	mov	r1, r4
 800fe68:	4628      	mov	r0, r5
 800fe6a:	f000 f82b 	bl	800fec4 <__swsetup_r>
 800fe6e:	b118      	cbz	r0, 800fe78 <__swbuf_r+0x32>
 800fe70:	f04f 37ff 	mov.w	r7, #4294967295
 800fe74:	4638      	mov	r0, r7
 800fe76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe78:	6823      	ldr	r3, [r4, #0]
 800fe7a:	b2f6      	uxtb	r6, r6
 800fe7c:	6922      	ldr	r2, [r4, #16]
 800fe7e:	4637      	mov	r7, r6
 800fe80:	1a98      	subs	r0, r3, r2
 800fe82:	6963      	ldr	r3, [r4, #20]
 800fe84:	4283      	cmp	r3, r0
 800fe86:	dc05      	bgt.n	800fe94 <__swbuf_r+0x4e>
 800fe88:	4621      	mov	r1, r4
 800fe8a:	4628      	mov	r0, r5
 800fe8c:	f002 fee0 	bl	8012c50 <_fflush_r>
 800fe90:	2800      	cmp	r0, #0
 800fe92:	d1ed      	bne.n	800fe70 <__swbuf_r+0x2a>
 800fe94:	68a3      	ldr	r3, [r4, #8]
 800fe96:	3b01      	subs	r3, #1
 800fe98:	60a3      	str	r3, [r4, #8]
 800fe9a:	6823      	ldr	r3, [r4, #0]
 800fe9c:	1c5a      	adds	r2, r3, #1
 800fe9e:	6022      	str	r2, [r4, #0]
 800fea0:	701e      	strb	r6, [r3, #0]
 800fea2:	1c43      	adds	r3, r0, #1
 800fea4:	6962      	ldr	r2, [r4, #20]
 800fea6:	429a      	cmp	r2, r3
 800fea8:	d004      	beq.n	800feb4 <__swbuf_r+0x6e>
 800feaa:	89a3      	ldrh	r3, [r4, #12]
 800feac:	07db      	lsls	r3, r3, #31
 800feae:	d5e1      	bpl.n	800fe74 <__swbuf_r+0x2e>
 800feb0:	2e0a      	cmp	r6, #10
 800feb2:	d1df      	bne.n	800fe74 <__swbuf_r+0x2e>
 800feb4:	4621      	mov	r1, r4
 800feb6:	4628      	mov	r0, r5
 800feb8:	f002 feca 	bl	8012c50 <_fflush_r>
 800febc:	2800      	cmp	r0, #0
 800febe:	d0d9      	beq.n	800fe74 <__swbuf_r+0x2e>
 800fec0:	e7d6      	b.n	800fe70 <__swbuf_r+0x2a>
	...

0800fec4 <__swsetup_r>:
 800fec4:	b538      	push	{r3, r4, r5, lr}
 800fec6:	4b29      	ldr	r3, [pc, #164]	@ (800ff6c <__swsetup_r+0xa8>)
 800fec8:	4605      	mov	r5, r0
 800feca:	460c      	mov	r4, r1
 800fecc:	6818      	ldr	r0, [r3, #0]
 800fece:	b118      	cbz	r0, 800fed8 <__swsetup_r+0x14>
 800fed0:	6a03      	ldr	r3, [r0, #32]
 800fed2:	b90b      	cbnz	r3, 800fed8 <__swsetup_r+0x14>
 800fed4:	f7ff feac 	bl	800fc30 <__sinit>
 800fed8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fedc:	0719      	lsls	r1, r3, #28
 800fede:	d422      	bmi.n	800ff26 <__swsetup_r+0x62>
 800fee0:	06da      	lsls	r2, r3, #27
 800fee2:	d407      	bmi.n	800fef4 <__swsetup_r+0x30>
 800fee4:	2209      	movs	r2, #9
 800fee6:	602a      	str	r2, [r5, #0]
 800fee8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800feec:	f04f 30ff 	mov.w	r0, #4294967295
 800fef0:	81a3      	strh	r3, [r4, #12]
 800fef2:	e033      	b.n	800ff5c <__swsetup_r+0x98>
 800fef4:	0758      	lsls	r0, r3, #29
 800fef6:	d512      	bpl.n	800ff1e <__swsetup_r+0x5a>
 800fef8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fefa:	b141      	cbz	r1, 800ff0e <__swsetup_r+0x4a>
 800fefc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ff00:	4299      	cmp	r1, r3
 800ff02:	d002      	beq.n	800ff0a <__swsetup_r+0x46>
 800ff04:	4628      	mov	r0, r5
 800ff06:	f000 ff49 	bl	8010d9c <_free_r>
 800ff0a:	2300      	movs	r3, #0
 800ff0c:	6363      	str	r3, [r4, #52]	@ 0x34
 800ff0e:	89a3      	ldrh	r3, [r4, #12]
 800ff10:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ff14:	81a3      	strh	r3, [r4, #12]
 800ff16:	2300      	movs	r3, #0
 800ff18:	6063      	str	r3, [r4, #4]
 800ff1a:	6923      	ldr	r3, [r4, #16]
 800ff1c:	6023      	str	r3, [r4, #0]
 800ff1e:	89a3      	ldrh	r3, [r4, #12]
 800ff20:	f043 0308 	orr.w	r3, r3, #8
 800ff24:	81a3      	strh	r3, [r4, #12]
 800ff26:	6923      	ldr	r3, [r4, #16]
 800ff28:	b94b      	cbnz	r3, 800ff3e <__swsetup_r+0x7a>
 800ff2a:	89a3      	ldrh	r3, [r4, #12]
 800ff2c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ff30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ff34:	d003      	beq.n	800ff3e <__swsetup_r+0x7a>
 800ff36:	4621      	mov	r1, r4
 800ff38:	4628      	mov	r0, r5
 800ff3a:	f002 fed6 	bl	8012cea <__smakebuf_r>
 800ff3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff42:	f013 0201 	ands.w	r2, r3, #1
 800ff46:	d00a      	beq.n	800ff5e <__swsetup_r+0x9a>
 800ff48:	2200      	movs	r2, #0
 800ff4a:	60a2      	str	r2, [r4, #8]
 800ff4c:	6962      	ldr	r2, [r4, #20]
 800ff4e:	4252      	negs	r2, r2
 800ff50:	61a2      	str	r2, [r4, #24]
 800ff52:	6922      	ldr	r2, [r4, #16]
 800ff54:	b942      	cbnz	r2, 800ff68 <__swsetup_r+0xa4>
 800ff56:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ff5a:	d1c5      	bne.n	800fee8 <__swsetup_r+0x24>
 800ff5c:	bd38      	pop	{r3, r4, r5, pc}
 800ff5e:	0799      	lsls	r1, r3, #30
 800ff60:	bf58      	it	pl
 800ff62:	6962      	ldrpl	r2, [r4, #20]
 800ff64:	60a2      	str	r2, [r4, #8]
 800ff66:	e7f4      	b.n	800ff52 <__swsetup_r+0x8e>
 800ff68:	2000      	movs	r0, #0
 800ff6a:	e7f7      	b.n	800ff5c <__swsetup_r+0x98>
 800ff6c:	2000003c 	.word	0x2000003c

0800ff70 <memcmp>:
 800ff70:	3901      	subs	r1, #1
 800ff72:	4402      	add	r2, r0
 800ff74:	b510      	push	{r4, lr}
 800ff76:	4290      	cmp	r0, r2
 800ff78:	d101      	bne.n	800ff7e <memcmp+0xe>
 800ff7a:	2000      	movs	r0, #0
 800ff7c:	e005      	b.n	800ff8a <memcmp+0x1a>
 800ff7e:	7803      	ldrb	r3, [r0, #0]
 800ff80:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ff84:	42a3      	cmp	r3, r4
 800ff86:	d001      	beq.n	800ff8c <memcmp+0x1c>
 800ff88:	1b18      	subs	r0, r3, r4
 800ff8a:	bd10      	pop	{r4, pc}
 800ff8c:	3001      	adds	r0, #1
 800ff8e:	e7f2      	b.n	800ff76 <memcmp+0x6>

0800ff90 <memset>:
 800ff90:	4402      	add	r2, r0
 800ff92:	4603      	mov	r3, r0
 800ff94:	4293      	cmp	r3, r2
 800ff96:	d100      	bne.n	800ff9a <memset+0xa>
 800ff98:	4770      	bx	lr
 800ff9a:	f803 1b01 	strb.w	r1, [r3], #1
 800ff9e:	e7f9      	b.n	800ff94 <memset+0x4>

0800ffa0 <_localeconv_r>:
 800ffa0:	4800      	ldr	r0, [pc, #0]	@ (800ffa4 <_localeconv_r+0x4>)
 800ffa2:	4770      	bx	lr
 800ffa4:	2000017c 	.word	0x2000017c

0800ffa8 <_close_r>:
 800ffa8:	b538      	push	{r3, r4, r5, lr}
 800ffaa:	2300      	movs	r3, #0
 800ffac:	4d05      	ldr	r5, [pc, #20]	@ (800ffc4 <_close_r+0x1c>)
 800ffae:	4604      	mov	r4, r0
 800ffb0:	4608      	mov	r0, r1
 800ffb2:	602b      	str	r3, [r5, #0]
 800ffb4:	f7f4 f8b3 	bl	800411e <_close>
 800ffb8:	1c43      	adds	r3, r0, #1
 800ffba:	d102      	bne.n	800ffc2 <_close_r+0x1a>
 800ffbc:	682b      	ldr	r3, [r5, #0]
 800ffbe:	b103      	cbz	r3, 800ffc2 <_close_r+0x1a>
 800ffc0:	6023      	str	r3, [r4, #0]
 800ffc2:	bd38      	pop	{r3, r4, r5, pc}
 800ffc4:	200008dc 	.word	0x200008dc

0800ffc8 <_lseek_r>:
 800ffc8:	b538      	push	{r3, r4, r5, lr}
 800ffca:	4604      	mov	r4, r0
 800ffcc:	4d06      	ldr	r5, [pc, #24]	@ (800ffe8 <_lseek_r+0x20>)
 800ffce:	4608      	mov	r0, r1
 800ffd0:	4611      	mov	r1, r2
 800ffd2:	2200      	movs	r2, #0
 800ffd4:	602a      	str	r2, [r5, #0]
 800ffd6:	461a      	mov	r2, r3
 800ffd8:	f7f4 f8c8 	bl	800416c <_lseek>
 800ffdc:	1c43      	adds	r3, r0, #1
 800ffde:	d102      	bne.n	800ffe6 <_lseek_r+0x1e>
 800ffe0:	682b      	ldr	r3, [r5, #0]
 800ffe2:	b103      	cbz	r3, 800ffe6 <_lseek_r+0x1e>
 800ffe4:	6023      	str	r3, [r4, #0]
 800ffe6:	bd38      	pop	{r3, r4, r5, pc}
 800ffe8:	200008dc 	.word	0x200008dc

0800ffec <_read_r>:
 800ffec:	b538      	push	{r3, r4, r5, lr}
 800ffee:	4604      	mov	r4, r0
 800fff0:	4d06      	ldr	r5, [pc, #24]	@ (801000c <_read_r+0x20>)
 800fff2:	4608      	mov	r0, r1
 800fff4:	4611      	mov	r1, r2
 800fff6:	2200      	movs	r2, #0
 800fff8:	602a      	str	r2, [r5, #0]
 800fffa:	461a      	mov	r2, r3
 800fffc:	f7f4 f856 	bl	80040ac <_read>
 8010000:	1c43      	adds	r3, r0, #1
 8010002:	d102      	bne.n	801000a <_read_r+0x1e>
 8010004:	682b      	ldr	r3, [r5, #0]
 8010006:	b103      	cbz	r3, 801000a <_read_r+0x1e>
 8010008:	6023      	str	r3, [r4, #0]
 801000a:	bd38      	pop	{r3, r4, r5, pc}
 801000c:	200008dc 	.word	0x200008dc

08010010 <_write_r>:
 8010010:	b538      	push	{r3, r4, r5, lr}
 8010012:	4604      	mov	r4, r0
 8010014:	4d06      	ldr	r5, [pc, #24]	@ (8010030 <_write_r+0x20>)
 8010016:	4608      	mov	r0, r1
 8010018:	4611      	mov	r1, r2
 801001a:	2200      	movs	r2, #0
 801001c:	602a      	str	r2, [r5, #0]
 801001e:	461a      	mov	r2, r3
 8010020:	f7f4 f861 	bl	80040e6 <_write>
 8010024:	1c43      	adds	r3, r0, #1
 8010026:	d102      	bne.n	801002e <_write_r+0x1e>
 8010028:	682b      	ldr	r3, [r5, #0]
 801002a:	b103      	cbz	r3, 801002e <_write_r+0x1e>
 801002c:	6023      	str	r3, [r4, #0]
 801002e:	bd38      	pop	{r3, r4, r5, pc}
 8010030:	200008dc 	.word	0x200008dc

08010034 <__errno>:
 8010034:	4b01      	ldr	r3, [pc, #4]	@ (801003c <__errno+0x8>)
 8010036:	6818      	ldr	r0, [r3, #0]
 8010038:	4770      	bx	lr
 801003a:	bf00      	nop
 801003c:	2000003c 	.word	0x2000003c

08010040 <__libc_init_array>:
 8010040:	b570      	push	{r4, r5, r6, lr}
 8010042:	4d0d      	ldr	r5, [pc, #52]	@ (8010078 <__libc_init_array+0x38>)
 8010044:	2600      	movs	r6, #0
 8010046:	4c0d      	ldr	r4, [pc, #52]	@ (801007c <__libc_init_array+0x3c>)
 8010048:	1b64      	subs	r4, r4, r5
 801004a:	10a4      	asrs	r4, r4, #2
 801004c:	42a6      	cmp	r6, r4
 801004e:	d109      	bne.n	8010064 <__libc_init_array+0x24>
 8010050:	4d0b      	ldr	r5, [pc, #44]	@ (8010080 <__libc_init_array+0x40>)
 8010052:	2600      	movs	r6, #0
 8010054:	4c0b      	ldr	r4, [pc, #44]	@ (8010084 <__libc_init_array+0x44>)
 8010056:	f003 fc49 	bl	80138ec <_init>
 801005a:	1b64      	subs	r4, r4, r5
 801005c:	10a4      	asrs	r4, r4, #2
 801005e:	42a6      	cmp	r6, r4
 8010060:	d105      	bne.n	801006e <__libc_init_array+0x2e>
 8010062:	bd70      	pop	{r4, r5, r6, pc}
 8010064:	f855 3b04 	ldr.w	r3, [r5], #4
 8010068:	3601      	adds	r6, #1
 801006a:	4798      	blx	r3
 801006c:	e7ee      	b.n	801004c <__libc_init_array+0xc>
 801006e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010072:	3601      	adds	r6, #1
 8010074:	4798      	blx	r3
 8010076:	e7f2      	b.n	801005e <__libc_init_array+0x1e>
 8010078:	08015164 	.word	0x08015164
 801007c:	08015164 	.word	0x08015164
 8010080:	08015164 	.word	0x08015164
 8010084:	08015168 	.word	0x08015168

08010088 <__retarget_lock_init_recursive>:
 8010088:	4770      	bx	lr

0801008a <__retarget_lock_acquire_recursive>:
 801008a:	4770      	bx	lr

0801008c <__retarget_lock_release_recursive>:
 801008c:	4770      	bx	lr

0801008e <__aeabi_memcpy>:
 801008e:	f000 b811 	b.w	80100b4 <memcpy>

08010092 <__aeabi_memclr>:
 8010092:	2200      	movs	r2, #0
 8010094:	f7f1 be39 	b.w	8001d0a <__aeabi_memset>

08010098 <memchr>:
 8010098:	b2c9      	uxtb	r1, r1
 801009a:	4603      	mov	r3, r0
 801009c:	4402      	add	r2, r0
 801009e:	b510      	push	{r4, lr}
 80100a0:	4293      	cmp	r3, r2
 80100a2:	4618      	mov	r0, r3
 80100a4:	d101      	bne.n	80100aa <memchr+0x12>
 80100a6:	2000      	movs	r0, #0
 80100a8:	e003      	b.n	80100b2 <memchr+0x1a>
 80100aa:	7804      	ldrb	r4, [r0, #0]
 80100ac:	3301      	adds	r3, #1
 80100ae:	428c      	cmp	r4, r1
 80100b0:	d1f6      	bne.n	80100a0 <memchr+0x8>
 80100b2:	bd10      	pop	{r4, pc}

080100b4 <memcpy>:
 80100b4:	440a      	add	r2, r1
 80100b6:	1e43      	subs	r3, r0, #1
 80100b8:	4291      	cmp	r1, r2
 80100ba:	d100      	bne.n	80100be <memcpy+0xa>
 80100bc:	4770      	bx	lr
 80100be:	b510      	push	{r4, lr}
 80100c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80100c4:	4291      	cmp	r1, r2
 80100c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80100ca:	d1f9      	bne.n	80100c0 <memcpy+0xc>
 80100cc:	bd10      	pop	{r4, pc}
	...

080100d0 <nanf>:
 80100d0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80100d8 <nanf+0x8>
 80100d4:	4770      	bx	lr
 80100d6:	bf00      	nop
 80100d8:	7fc00000 	.word	0x7fc00000

080100dc <quorem>:
 80100dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100e0:	6903      	ldr	r3, [r0, #16]
 80100e2:	4607      	mov	r7, r0
 80100e4:	690c      	ldr	r4, [r1, #16]
 80100e6:	42a3      	cmp	r3, r4
 80100e8:	f2c0 8083 	blt.w	80101f2 <quorem+0x116>
 80100ec:	3c01      	subs	r4, #1
 80100ee:	f100 0514 	add.w	r5, r0, #20
 80100f2:	f101 0814 	add.w	r8, r1, #20
 80100f6:	00a3      	lsls	r3, r4, #2
 80100f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80100fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010100:	9300      	str	r3, [sp, #0]
 8010102:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010106:	9301      	str	r3, [sp, #4]
 8010108:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801010c:	3301      	adds	r3, #1
 801010e:	429a      	cmp	r2, r3
 8010110:	fbb2 f6f3 	udiv	r6, r2, r3
 8010114:	d331      	bcc.n	801017a <quorem+0x9e>
 8010116:	f04f 0a00 	mov.w	sl, #0
 801011a:	46c4      	mov	ip, r8
 801011c:	46ae      	mov	lr, r5
 801011e:	46d3      	mov	fp, sl
 8010120:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010124:	b298      	uxth	r0, r3
 8010126:	45e1      	cmp	r9, ip
 8010128:	ea4f 4313 	mov.w	r3, r3, lsr #16
 801012c:	fb06 a000 	mla	r0, r6, r0, sl
 8010130:	ea4f 4210 	mov.w	r2, r0, lsr #16
 8010134:	b280      	uxth	r0, r0
 8010136:	fb06 2303 	mla	r3, r6, r3, r2
 801013a:	f8de 2000 	ldr.w	r2, [lr]
 801013e:	b292      	uxth	r2, r2
 8010140:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010144:	eba2 0200 	sub.w	r2, r2, r0
 8010148:	b29b      	uxth	r3, r3
 801014a:	f8de 0000 	ldr.w	r0, [lr]
 801014e:	445a      	add	r2, fp
 8010150:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8010154:	b292      	uxth	r2, r2
 8010156:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801015a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801015e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8010162:	f84e 2b04 	str.w	r2, [lr], #4
 8010166:	d2db      	bcs.n	8010120 <quorem+0x44>
 8010168:	9b00      	ldr	r3, [sp, #0]
 801016a:	58eb      	ldr	r3, [r5, r3]
 801016c:	b92b      	cbnz	r3, 801017a <quorem+0x9e>
 801016e:	9b01      	ldr	r3, [sp, #4]
 8010170:	3b04      	subs	r3, #4
 8010172:	429d      	cmp	r5, r3
 8010174:	461a      	mov	r2, r3
 8010176:	d330      	bcc.n	80101da <quorem+0xfe>
 8010178:	613c      	str	r4, [r7, #16]
 801017a:	4638      	mov	r0, r7
 801017c:	f001 f9ce 	bl	801151c <__mcmp>
 8010180:	2800      	cmp	r0, #0
 8010182:	db26      	blt.n	80101d2 <quorem+0xf6>
 8010184:	4629      	mov	r1, r5
 8010186:	2000      	movs	r0, #0
 8010188:	f858 2b04 	ldr.w	r2, [r8], #4
 801018c:	f8d1 c000 	ldr.w	ip, [r1]
 8010190:	fa1f fe82 	uxth.w	lr, r2
 8010194:	45c1      	cmp	r9, r8
 8010196:	fa1f f38c 	uxth.w	r3, ip
 801019a:	ea4f 4212 	mov.w	r2, r2, lsr #16
 801019e:	eba3 030e 	sub.w	r3, r3, lr
 80101a2:	4403      	add	r3, r0
 80101a4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80101a8:	b29b      	uxth	r3, r3
 80101aa:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80101ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80101b2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80101b6:	f841 3b04 	str.w	r3, [r1], #4
 80101ba:	d2e5      	bcs.n	8010188 <quorem+0xac>
 80101bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80101c0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80101c4:	b922      	cbnz	r2, 80101d0 <quorem+0xf4>
 80101c6:	3b04      	subs	r3, #4
 80101c8:	429d      	cmp	r5, r3
 80101ca:	461a      	mov	r2, r3
 80101cc:	d30b      	bcc.n	80101e6 <quorem+0x10a>
 80101ce:	613c      	str	r4, [r7, #16]
 80101d0:	3601      	adds	r6, #1
 80101d2:	4630      	mov	r0, r6
 80101d4:	b003      	add	sp, #12
 80101d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101da:	6812      	ldr	r2, [r2, #0]
 80101dc:	3b04      	subs	r3, #4
 80101de:	2a00      	cmp	r2, #0
 80101e0:	d1ca      	bne.n	8010178 <quorem+0x9c>
 80101e2:	3c01      	subs	r4, #1
 80101e4:	e7c5      	b.n	8010172 <quorem+0x96>
 80101e6:	6812      	ldr	r2, [r2, #0]
 80101e8:	3b04      	subs	r3, #4
 80101ea:	2a00      	cmp	r2, #0
 80101ec:	d1ef      	bne.n	80101ce <quorem+0xf2>
 80101ee:	3c01      	subs	r4, #1
 80101f0:	e7ea      	b.n	80101c8 <quorem+0xec>
 80101f2:	2000      	movs	r0, #0
 80101f4:	e7ee      	b.n	80101d4 <quorem+0xf8>
	...

080101f8 <_dtoa_r>:
 80101f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101fc:	69c7      	ldr	r7, [r0, #28]
 80101fe:	b097      	sub	sp, #92	@ 0x5c
 8010200:	4681      	mov	r9, r0
 8010202:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8010204:	9107      	str	r1, [sp, #28]
 8010206:	920c      	str	r2, [sp, #48]	@ 0x30
 8010208:	9311      	str	r3, [sp, #68]	@ 0x44
 801020a:	ec55 4b10 	vmov	r4, r5, d0
 801020e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8010212:	b97f      	cbnz	r7, 8010234 <_dtoa_r+0x3c>
 8010214:	2010      	movs	r0, #16
 8010216:	f000 fe0b 	bl	8010e30 <malloc>
 801021a:	4602      	mov	r2, r0
 801021c:	f8c9 001c 	str.w	r0, [r9, #28]
 8010220:	b920      	cbnz	r0, 801022c <_dtoa_r+0x34>
 8010222:	4ba9      	ldr	r3, [pc, #676]	@ (80104c8 <_dtoa_r+0x2d0>)
 8010224:	21ef      	movs	r1, #239	@ 0xef
 8010226:	48a9      	ldr	r0, [pc, #676]	@ (80104cc <_dtoa_r+0x2d4>)
 8010228:	f002 fe02 	bl	8012e30 <__assert_func>
 801022c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010230:	6007      	str	r7, [r0, #0]
 8010232:	60c7      	str	r7, [r0, #12]
 8010234:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010238:	6819      	ldr	r1, [r3, #0]
 801023a:	b159      	cbz	r1, 8010254 <_dtoa_r+0x5c>
 801023c:	685a      	ldr	r2, [r3, #4]
 801023e:	2301      	movs	r3, #1
 8010240:	4648      	mov	r0, r9
 8010242:	4093      	lsls	r3, r2
 8010244:	604a      	str	r2, [r1, #4]
 8010246:	608b      	str	r3, [r1, #8]
 8010248:	f000 fee8 	bl	801101c <_Bfree>
 801024c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010250:	2200      	movs	r2, #0
 8010252:	601a      	str	r2, [r3, #0]
 8010254:	1e2b      	subs	r3, r5, #0
 8010256:	bfb7      	itett	lt
 8010258:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801025c:	2300      	movge	r3, #0
 801025e:	2201      	movlt	r2, #1
 8010260:	9305      	strlt	r3, [sp, #20]
 8010262:	bfa8      	it	ge
 8010264:	6033      	strge	r3, [r6, #0]
 8010266:	9f05      	ldr	r7, [sp, #20]
 8010268:	4b99      	ldr	r3, [pc, #612]	@ (80104d0 <_dtoa_r+0x2d8>)
 801026a:	bfb8      	it	lt
 801026c:	6032      	strlt	r2, [r6, #0]
 801026e:	43bb      	bics	r3, r7
 8010270:	d112      	bne.n	8010298 <_dtoa_r+0xa0>
 8010272:	f242 730f 	movw	r3, #9999	@ 0x270f
 8010276:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010278:	6013      	str	r3, [r2, #0]
 801027a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801027e:	4323      	orrs	r3, r4
 8010280:	f000 855a 	beq.w	8010d38 <_dtoa_r+0xb40>
 8010284:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010286:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80104e4 <_dtoa_r+0x2ec>
 801028a:	2b00      	cmp	r3, #0
 801028c:	f000 855c 	beq.w	8010d48 <_dtoa_r+0xb50>
 8010290:	f10a 0303 	add.w	r3, sl, #3
 8010294:	f000 bd56 	b.w	8010d44 <_dtoa_r+0xb4c>
 8010298:	ed9d 7b04 	vldr	d7, [sp, #16]
 801029c:	2200      	movs	r2, #0
 801029e:	2300      	movs	r3, #0
 80102a0:	ec51 0b17 	vmov	r0, r1, d7
 80102a4:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80102a8:	f7f2 f9a0 	bl	80025ec <__aeabi_dcmpeq>
 80102ac:	4680      	mov	r8, r0
 80102ae:	b158      	cbz	r0, 80102c8 <_dtoa_r+0xd0>
 80102b0:	2301      	movs	r3, #1
 80102b2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80102b4:	6013      	str	r3, [r2, #0]
 80102b6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80102b8:	b113      	cbz	r3, 80102c0 <_dtoa_r+0xc8>
 80102ba:	4b86      	ldr	r3, [pc, #536]	@ (80104d4 <_dtoa_r+0x2dc>)
 80102bc:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80102be:	6013      	str	r3, [r2, #0]
 80102c0:	f8df a224 	ldr.w	sl, [pc, #548]	@ 80104e8 <_dtoa_r+0x2f0>
 80102c4:	f000 bd40 	b.w	8010d48 <_dtoa_r+0xb50>
 80102c8:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80102cc:	aa14      	add	r2, sp, #80	@ 0x50
 80102ce:	a915      	add	r1, sp, #84	@ 0x54
 80102d0:	4648      	mov	r0, r9
 80102d2:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80102d6:	f001 fa49 	bl	801176c <__d2b>
 80102da:	9002      	str	r0, [sp, #8]
 80102dc:	2e00      	cmp	r6, #0
 80102de:	d076      	beq.n	80103ce <_dtoa_r+0x1d6>
 80102e0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80102e2:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80102e6:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80102ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80102ee:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80102f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80102f6:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80102fa:	4619      	mov	r1, r3
 80102fc:	2200      	movs	r2, #0
 80102fe:	4b76      	ldr	r3, [pc, #472]	@ (80104d8 <_dtoa_r+0x2e0>)
 8010300:	f7f1 fd54 	bl	8001dac <__aeabi_dsub>
 8010304:	a36a      	add	r3, pc, #424	@ (adr r3, 80104b0 <_dtoa_r+0x2b8>)
 8010306:	e9d3 2300 	ldrd	r2, r3, [r3]
 801030a:	f7f1 ff07 	bl	800211c <__aeabi_dmul>
 801030e:	a36a      	add	r3, pc, #424	@ (adr r3, 80104b8 <_dtoa_r+0x2c0>)
 8010310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010314:	f7f1 fd4c 	bl	8001db0 <__adddf3>
 8010318:	4604      	mov	r4, r0
 801031a:	460d      	mov	r5, r1
 801031c:	4630      	mov	r0, r6
 801031e:	f7f1 fe93 	bl	8002048 <__aeabi_i2d>
 8010322:	a367      	add	r3, pc, #412	@ (adr r3, 80104c0 <_dtoa_r+0x2c8>)
 8010324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010328:	f7f1 fef8 	bl	800211c <__aeabi_dmul>
 801032c:	4602      	mov	r2, r0
 801032e:	460b      	mov	r3, r1
 8010330:	4620      	mov	r0, r4
 8010332:	4629      	mov	r1, r5
 8010334:	f7f1 fd3c 	bl	8001db0 <__adddf3>
 8010338:	4604      	mov	r4, r0
 801033a:	460d      	mov	r5, r1
 801033c:	f7f2 f99e 	bl	800267c <__aeabi_d2iz>
 8010340:	2200      	movs	r2, #0
 8010342:	4607      	mov	r7, r0
 8010344:	2300      	movs	r3, #0
 8010346:	4620      	mov	r0, r4
 8010348:	4629      	mov	r1, r5
 801034a:	f7f2 f959 	bl	8002600 <__aeabi_dcmplt>
 801034e:	b140      	cbz	r0, 8010362 <_dtoa_r+0x16a>
 8010350:	4638      	mov	r0, r7
 8010352:	f7f1 fe79 	bl	8002048 <__aeabi_i2d>
 8010356:	4622      	mov	r2, r4
 8010358:	462b      	mov	r3, r5
 801035a:	f7f2 f947 	bl	80025ec <__aeabi_dcmpeq>
 801035e:	b900      	cbnz	r0, 8010362 <_dtoa_r+0x16a>
 8010360:	3f01      	subs	r7, #1
 8010362:	2f16      	cmp	r7, #22
 8010364:	d852      	bhi.n	801040c <_dtoa_r+0x214>
 8010366:	4b5d      	ldr	r3, [pc, #372]	@ (80104dc <_dtoa_r+0x2e4>)
 8010368:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801036c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010374:	f7f2 f944 	bl	8002600 <__aeabi_dcmplt>
 8010378:	2800      	cmp	r0, #0
 801037a:	d049      	beq.n	8010410 <_dtoa_r+0x218>
 801037c:	3f01      	subs	r7, #1
 801037e:	2300      	movs	r3, #0
 8010380:	9310      	str	r3, [sp, #64]	@ 0x40
 8010382:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010384:	1b9b      	subs	r3, r3, r6
 8010386:	1e5a      	subs	r2, r3, #1
 8010388:	bf4c      	ite	mi
 801038a:	f1c3 0301 	rsbmi	r3, r3, #1
 801038e:	2300      	movpl	r3, #0
 8010390:	9206      	str	r2, [sp, #24]
 8010392:	bf45      	ittet	mi
 8010394:	9300      	strmi	r3, [sp, #0]
 8010396:	2300      	movmi	r3, #0
 8010398:	9300      	strpl	r3, [sp, #0]
 801039a:	9306      	strmi	r3, [sp, #24]
 801039c:	2f00      	cmp	r7, #0
 801039e:	db39      	blt.n	8010414 <_dtoa_r+0x21c>
 80103a0:	9b06      	ldr	r3, [sp, #24]
 80103a2:	970d      	str	r7, [sp, #52]	@ 0x34
 80103a4:	443b      	add	r3, r7
 80103a6:	9306      	str	r3, [sp, #24]
 80103a8:	2300      	movs	r3, #0
 80103aa:	9308      	str	r3, [sp, #32]
 80103ac:	9b07      	ldr	r3, [sp, #28]
 80103ae:	2b09      	cmp	r3, #9
 80103b0:	d863      	bhi.n	801047a <_dtoa_r+0x282>
 80103b2:	2b05      	cmp	r3, #5
 80103b4:	bfc5      	ittet	gt
 80103b6:	3b04      	subgt	r3, #4
 80103b8:	2400      	movgt	r4, #0
 80103ba:	2401      	movle	r4, #1
 80103bc:	9307      	strgt	r3, [sp, #28]
 80103be:	9b07      	ldr	r3, [sp, #28]
 80103c0:	3b02      	subs	r3, #2
 80103c2:	2b03      	cmp	r3, #3
 80103c4:	d865      	bhi.n	8010492 <_dtoa_r+0x29a>
 80103c6:	e8df f003 	tbb	[pc, r3]
 80103ca:	5654      	.short	0x5654
 80103cc:	2d39      	.short	0x2d39
 80103ce:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80103d2:	441e      	add	r6, r3
 80103d4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80103d8:	2b20      	cmp	r3, #32
 80103da:	bfc9      	itett	gt
 80103dc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80103e0:	f1c3 0320 	rsble	r3, r3, #32
 80103e4:	409f      	lslgt	r7, r3
 80103e6:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80103ea:	bfd8      	it	le
 80103ec:	fa04 f003 	lslle.w	r0, r4, r3
 80103f0:	f106 36ff 	add.w	r6, r6, #4294967295
 80103f4:	bfc4      	itt	gt
 80103f6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80103fa:	ea47 0003 	orrgt.w	r0, r7, r3
 80103fe:	f7f1 fe13 	bl	8002028 <__aeabi_ui2d>
 8010402:	2201      	movs	r2, #1
 8010404:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8010408:	9212      	str	r2, [sp, #72]	@ 0x48
 801040a:	e776      	b.n	80102fa <_dtoa_r+0x102>
 801040c:	2301      	movs	r3, #1
 801040e:	e7b7      	b.n	8010380 <_dtoa_r+0x188>
 8010410:	9010      	str	r0, [sp, #64]	@ 0x40
 8010412:	e7b6      	b.n	8010382 <_dtoa_r+0x18a>
 8010414:	9b00      	ldr	r3, [sp, #0]
 8010416:	1bdb      	subs	r3, r3, r7
 8010418:	9300      	str	r3, [sp, #0]
 801041a:	427b      	negs	r3, r7
 801041c:	9308      	str	r3, [sp, #32]
 801041e:	2300      	movs	r3, #0
 8010420:	930d      	str	r3, [sp, #52]	@ 0x34
 8010422:	e7c3      	b.n	80103ac <_dtoa_r+0x1b4>
 8010424:	2301      	movs	r3, #1
 8010426:	9309      	str	r3, [sp, #36]	@ 0x24
 8010428:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801042a:	eb07 0b03 	add.w	fp, r7, r3
 801042e:	f10b 0301 	add.w	r3, fp, #1
 8010432:	2b01      	cmp	r3, #1
 8010434:	9303      	str	r3, [sp, #12]
 8010436:	bfb8      	it	lt
 8010438:	2301      	movlt	r3, #1
 801043a:	e006      	b.n	801044a <_dtoa_r+0x252>
 801043c:	2301      	movs	r3, #1
 801043e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010440:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010442:	2b00      	cmp	r3, #0
 8010444:	dd28      	ble.n	8010498 <_dtoa_r+0x2a0>
 8010446:	469b      	mov	fp, r3
 8010448:	9303      	str	r3, [sp, #12]
 801044a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 801044e:	2100      	movs	r1, #0
 8010450:	2204      	movs	r2, #4
 8010452:	f102 0514 	add.w	r5, r2, #20
 8010456:	429d      	cmp	r5, r3
 8010458:	d926      	bls.n	80104a8 <_dtoa_r+0x2b0>
 801045a:	6041      	str	r1, [r0, #4]
 801045c:	4648      	mov	r0, r9
 801045e:	f000 fd9d 	bl	8010f9c <_Balloc>
 8010462:	4682      	mov	sl, r0
 8010464:	2800      	cmp	r0, #0
 8010466:	d141      	bne.n	80104ec <_dtoa_r+0x2f4>
 8010468:	4b1d      	ldr	r3, [pc, #116]	@ (80104e0 <_dtoa_r+0x2e8>)
 801046a:	4602      	mov	r2, r0
 801046c:	f240 11af 	movw	r1, #431	@ 0x1af
 8010470:	e6d9      	b.n	8010226 <_dtoa_r+0x2e>
 8010472:	2300      	movs	r3, #0
 8010474:	e7e3      	b.n	801043e <_dtoa_r+0x246>
 8010476:	2300      	movs	r3, #0
 8010478:	e7d5      	b.n	8010426 <_dtoa_r+0x22e>
 801047a:	2401      	movs	r4, #1
 801047c:	2300      	movs	r3, #0
 801047e:	9409      	str	r4, [sp, #36]	@ 0x24
 8010480:	9307      	str	r3, [sp, #28]
 8010482:	f04f 3bff 	mov.w	fp, #4294967295
 8010486:	2200      	movs	r2, #0
 8010488:	2312      	movs	r3, #18
 801048a:	f8cd b00c 	str.w	fp, [sp, #12]
 801048e:	920c      	str	r2, [sp, #48]	@ 0x30
 8010490:	e7db      	b.n	801044a <_dtoa_r+0x252>
 8010492:	2301      	movs	r3, #1
 8010494:	9309      	str	r3, [sp, #36]	@ 0x24
 8010496:	e7f4      	b.n	8010482 <_dtoa_r+0x28a>
 8010498:	f04f 0b01 	mov.w	fp, #1
 801049c:	465b      	mov	r3, fp
 801049e:	f8cd b00c 	str.w	fp, [sp, #12]
 80104a2:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80104a6:	e7d0      	b.n	801044a <_dtoa_r+0x252>
 80104a8:	3101      	adds	r1, #1
 80104aa:	0052      	lsls	r2, r2, #1
 80104ac:	e7d1      	b.n	8010452 <_dtoa_r+0x25a>
 80104ae:	bf00      	nop
 80104b0:	636f4361 	.word	0x636f4361
 80104b4:	3fd287a7 	.word	0x3fd287a7
 80104b8:	8b60c8b3 	.word	0x8b60c8b3
 80104bc:	3fc68a28 	.word	0x3fc68a28
 80104c0:	509f79fb 	.word	0x509f79fb
 80104c4:	3fd34413 	.word	0x3fd34413
 80104c8:	08014876 	.word	0x08014876
 80104cc:	0801488d 	.word	0x0801488d
 80104d0:	7ff00000 	.word	0x7ff00000
 80104d4:	08014841 	.word	0x08014841
 80104d8:	3ff80000 	.word	0x3ff80000
 80104dc:	08014a40 	.word	0x08014a40
 80104e0:	080148e5 	.word	0x080148e5
 80104e4:	08014872 	.word	0x08014872
 80104e8:	08014840 	.word	0x08014840
 80104ec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80104f0:	6018      	str	r0, [r3, #0]
 80104f2:	9b03      	ldr	r3, [sp, #12]
 80104f4:	2b0e      	cmp	r3, #14
 80104f6:	f200 80a1 	bhi.w	801063c <_dtoa_r+0x444>
 80104fa:	2c00      	cmp	r4, #0
 80104fc:	f000 809e 	beq.w	801063c <_dtoa_r+0x444>
 8010500:	2f00      	cmp	r7, #0
 8010502:	dd33      	ble.n	801056c <_dtoa_r+0x374>
 8010504:	f007 020f 	and.w	r2, r7, #15
 8010508:	4b9b      	ldr	r3, [pc, #620]	@ (8010778 <_dtoa_r+0x580>)
 801050a:	05f8      	lsls	r0, r7, #23
 801050c:	ea4f 1427 	mov.w	r4, r7, asr #4
 8010510:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010514:	ed93 7b00 	vldr	d7, [r3]
 8010518:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 801051c:	d516      	bpl.n	801054c <_dtoa_r+0x354>
 801051e:	4b97      	ldr	r3, [pc, #604]	@ (801077c <_dtoa_r+0x584>)
 8010520:	f004 040f 	and.w	r4, r4, #15
 8010524:	2603      	movs	r6, #3
 8010526:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801052a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801052e:	f7f1 ff1f 	bl	8002370 <__aeabi_ddiv>
 8010532:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010536:	4d91      	ldr	r5, [pc, #580]	@ (801077c <_dtoa_r+0x584>)
 8010538:	b954      	cbnz	r4, 8010550 <_dtoa_r+0x358>
 801053a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801053e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010542:	f7f1 ff15 	bl	8002370 <__aeabi_ddiv>
 8010546:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801054a:	e028      	b.n	801059e <_dtoa_r+0x3a6>
 801054c:	2602      	movs	r6, #2
 801054e:	e7f2      	b.n	8010536 <_dtoa_r+0x33e>
 8010550:	07e1      	lsls	r1, r4, #31
 8010552:	d508      	bpl.n	8010566 <_dtoa_r+0x36e>
 8010554:	3601      	adds	r6, #1
 8010556:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801055a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801055e:	f7f1 fddd 	bl	800211c <__aeabi_dmul>
 8010562:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010566:	1064      	asrs	r4, r4, #1
 8010568:	3508      	adds	r5, #8
 801056a:	e7e5      	b.n	8010538 <_dtoa_r+0x340>
 801056c:	f000 80af 	beq.w	80106ce <_dtoa_r+0x4d6>
 8010570:	427c      	negs	r4, r7
 8010572:	4b81      	ldr	r3, [pc, #516]	@ (8010778 <_dtoa_r+0x580>)
 8010574:	4d81      	ldr	r5, [pc, #516]	@ (801077c <_dtoa_r+0x584>)
 8010576:	2602      	movs	r6, #2
 8010578:	f004 020f 	and.w	r2, r4, #15
 801057c:	1124      	asrs	r4, r4, #4
 801057e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010582:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010586:	e9d3 2300 	ldrd	r2, r3, [r3]
 801058a:	f7f1 fdc7 	bl	800211c <__aeabi_dmul>
 801058e:	2300      	movs	r3, #0
 8010590:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010594:	2c00      	cmp	r4, #0
 8010596:	f040 808f 	bne.w	80106b8 <_dtoa_r+0x4c0>
 801059a:	2b00      	cmp	r3, #0
 801059c:	d1d3      	bne.n	8010546 <_dtoa_r+0x34e>
 801059e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80105a0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	f000 8094 	beq.w	80106d2 <_dtoa_r+0x4da>
 80105aa:	2200      	movs	r2, #0
 80105ac:	4b74      	ldr	r3, [pc, #464]	@ (8010780 <_dtoa_r+0x588>)
 80105ae:	4620      	mov	r0, r4
 80105b0:	4629      	mov	r1, r5
 80105b2:	f7f2 f825 	bl	8002600 <__aeabi_dcmplt>
 80105b6:	2800      	cmp	r0, #0
 80105b8:	f000 808b 	beq.w	80106d2 <_dtoa_r+0x4da>
 80105bc:	9b03      	ldr	r3, [sp, #12]
 80105be:	2b00      	cmp	r3, #0
 80105c0:	f000 8087 	beq.w	80106d2 <_dtoa_r+0x4da>
 80105c4:	f1bb 0f00 	cmp.w	fp, #0
 80105c8:	dd34      	ble.n	8010634 <_dtoa_r+0x43c>
 80105ca:	4620      	mov	r0, r4
 80105cc:	f107 38ff 	add.w	r8, r7, #4294967295
 80105d0:	3601      	adds	r6, #1
 80105d2:	465c      	mov	r4, fp
 80105d4:	2200      	movs	r2, #0
 80105d6:	4b6b      	ldr	r3, [pc, #428]	@ (8010784 <_dtoa_r+0x58c>)
 80105d8:	4629      	mov	r1, r5
 80105da:	f7f1 fd9f 	bl	800211c <__aeabi_dmul>
 80105de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80105e2:	4630      	mov	r0, r6
 80105e4:	f7f1 fd30 	bl	8002048 <__aeabi_i2d>
 80105e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80105ec:	f7f1 fd96 	bl	800211c <__aeabi_dmul>
 80105f0:	2200      	movs	r2, #0
 80105f2:	4b65      	ldr	r3, [pc, #404]	@ (8010788 <_dtoa_r+0x590>)
 80105f4:	f7f1 fbdc 	bl	8001db0 <__adddf3>
 80105f8:	4605      	mov	r5, r0
 80105fa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80105fe:	2c00      	cmp	r4, #0
 8010600:	d16a      	bne.n	80106d8 <_dtoa_r+0x4e0>
 8010602:	2200      	movs	r2, #0
 8010604:	4b61      	ldr	r3, [pc, #388]	@ (801078c <_dtoa_r+0x594>)
 8010606:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801060a:	f7f1 fbcf 	bl	8001dac <__aeabi_dsub>
 801060e:	4602      	mov	r2, r0
 8010610:	460b      	mov	r3, r1
 8010612:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010616:	462a      	mov	r2, r5
 8010618:	4633      	mov	r3, r6
 801061a:	f7f2 f80f 	bl	800263c <__aeabi_dcmpgt>
 801061e:	2800      	cmp	r0, #0
 8010620:	f040 8298 	bne.w	8010b54 <_dtoa_r+0x95c>
 8010624:	462a      	mov	r2, r5
 8010626:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801062a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801062e:	f7f1 ffe7 	bl	8002600 <__aeabi_dcmplt>
 8010632:	bb38      	cbnz	r0, 8010684 <_dtoa_r+0x48c>
 8010634:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8010638:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801063c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801063e:	2b00      	cmp	r3, #0
 8010640:	f2c0 8157 	blt.w	80108f2 <_dtoa_r+0x6fa>
 8010644:	2f0e      	cmp	r7, #14
 8010646:	f300 8154 	bgt.w	80108f2 <_dtoa_r+0x6fa>
 801064a:	4b4b      	ldr	r3, [pc, #300]	@ (8010778 <_dtoa_r+0x580>)
 801064c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010650:	ed93 7b00 	vldr	d7, [r3]
 8010654:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010656:	2b00      	cmp	r3, #0
 8010658:	ed8d 7b00 	vstr	d7, [sp]
 801065c:	f280 80e5 	bge.w	801082a <_dtoa_r+0x632>
 8010660:	9b03      	ldr	r3, [sp, #12]
 8010662:	2b00      	cmp	r3, #0
 8010664:	f300 80e1 	bgt.w	801082a <_dtoa_r+0x632>
 8010668:	d10c      	bne.n	8010684 <_dtoa_r+0x48c>
 801066a:	2200      	movs	r2, #0
 801066c:	4b47      	ldr	r3, [pc, #284]	@ (801078c <_dtoa_r+0x594>)
 801066e:	ec51 0b17 	vmov	r0, r1, d7
 8010672:	f7f1 fd53 	bl	800211c <__aeabi_dmul>
 8010676:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801067a:	f7f1 ffd5 	bl	8002628 <__aeabi_dcmpge>
 801067e:	2800      	cmp	r0, #0
 8010680:	f000 8266 	beq.w	8010b50 <_dtoa_r+0x958>
 8010684:	2400      	movs	r4, #0
 8010686:	4625      	mov	r5, r4
 8010688:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801068a:	4656      	mov	r6, sl
 801068c:	ea6f 0803 	mvn.w	r8, r3
 8010690:	2700      	movs	r7, #0
 8010692:	4621      	mov	r1, r4
 8010694:	4648      	mov	r0, r9
 8010696:	f000 fcc1 	bl	801101c <_Bfree>
 801069a:	2d00      	cmp	r5, #0
 801069c:	f000 80bd 	beq.w	801081a <_dtoa_r+0x622>
 80106a0:	b12f      	cbz	r7, 80106ae <_dtoa_r+0x4b6>
 80106a2:	42af      	cmp	r7, r5
 80106a4:	d003      	beq.n	80106ae <_dtoa_r+0x4b6>
 80106a6:	4639      	mov	r1, r7
 80106a8:	4648      	mov	r0, r9
 80106aa:	f000 fcb7 	bl	801101c <_Bfree>
 80106ae:	4629      	mov	r1, r5
 80106b0:	4648      	mov	r0, r9
 80106b2:	f000 fcb3 	bl	801101c <_Bfree>
 80106b6:	e0b0      	b.n	801081a <_dtoa_r+0x622>
 80106b8:	07e2      	lsls	r2, r4, #31
 80106ba:	d505      	bpl.n	80106c8 <_dtoa_r+0x4d0>
 80106bc:	3601      	adds	r6, #1
 80106be:	e9d5 2300 	ldrd	r2, r3, [r5]
 80106c2:	f7f1 fd2b 	bl	800211c <__aeabi_dmul>
 80106c6:	2301      	movs	r3, #1
 80106c8:	1064      	asrs	r4, r4, #1
 80106ca:	3508      	adds	r5, #8
 80106cc:	e762      	b.n	8010594 <_dtoa_r+0x39c>
 80106ce:	2602      	movs	r6, #2
 80106d0:	e765      	b.n	801059e <_dtoa_r+0x3a6>
 80106d2:	46b8      	mov	r8, r7
 80106d4:	9c03      	ldr	r4, [sp, #12]
 80106d6:	e784      	b.n	80105e2 <_dtoa_r+0x3ea>
 80106d8:	4b27      	ldr	r3, [pc, #156]	@ (8010778 <_dtoa_r+0x580>)
 80106da:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80106dc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80106e0:	4454      	add	r4, sl
 80106e2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80106e6:	2900      	cmp	r1, #0
 80106e8:	d054      	beq.n	8010794 <_dtoa_r+0x59c>
 80106ea:	2000      	movs	r0, #0
 80106ec:	4928      	ldr	r1, [pc, #160]	@ (8010790 <_dtoa_r+0x598>)
 80106ee:	f7f1 fe3f 	bl	8002370 <__aeabi_ddiv>
 80106f2:	4633      	mov	r3, r6
 80106f4:	4656      	mov	r6, sl
 80106f6:	462a      	mov	r2, r5
 80106f8:	f7f1 fb58 	bl	8001dac <__aeabi_dsub>
 80106fc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010700:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010704:	f7f1 ffba 	bl	800267c <__aeabi_d2iz>
 8010708:	4605      	mov	r5, r0
 801070a:	f7f1 fc9d 	bl	8002048 <__aeabi_i2d>
 801070e:	4602      	mov	r2, r0
 8010710:	460b      	mov	r3, r1
 8010712:	3530      	adds	r5, #48	@ 0x30
 8010714:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010718:	f7f1 fb48 	bl	8001dac <__aeabi_dsub>
 801071c:	4602      	mov	r2, r0
 801071e:	460b      	mov	r3, r1
 8010720:	f806 5b01 	strb.w	r5, [r6], #1
 8010724:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010728:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801072c:	f7f1 ff68 	bl	8002600 <__aeabi_dcmplt>
 8010730:	2800      	cmp	r0, #0
 8010732:	d172      	bne.n	801081a <_dtoa_r+0x622>
 8010734:	2000      	movs	r0, #0
 8010736:	4912      	ldr	r1, [pc, #72]	@ (8010780 <_dtoa_r+0x588>)
 8010738:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801073c:	f7f1 fb36 	bl	8001dac <__aeabi_dsub>
 8010740:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010744:	f7f1 ff5c 	bl	8002600 <__aeabi_dcmplt>
 8010748:	2800      	cmp	r0, #0
 801074a:	f040 80b4 	bne.w	80108b6 <_dtoa_r+0x6be>
 801074e:	42a6      	cmp	r6, r4
 8010750:	f43f af70 	beq.w	8010634 <_dtoa_r+0x43c>
 8010754:	2200      	movs	r2, #0
 8010756:	4b0b      	ldr	r3, [pc, #44]	@ (8010784 <_dtoa_r+0x58c>)
 8010758:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801075c:	f7f1 fcde 	bl	800211c <__aeabi_dmul>
 8010760:	2200      	movs	r2, #0
 8010762:	4b08      	ldr	r3, [pc, #32]	@ (8010784 <_dtoa_r+0x58c>)
 8010764:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010768:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801076c:	f7f1 fcd6 	bl	800211c <__aeabi_dmul>
 8010770:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010774:	e7c4      	b.n	8010700 <_dtoa_r+0x508>
 8010776:	bf00      	nop
 8010778:	08014a40 	.word	0x08014a40
 801077c:	08014a18 	.word	0x08014a18
 8010780:	3ff00000 	.word	0x3ff00000
 8010784:	40240000 	.word	0x40240000
 8010788:	401c0000 	.word	0x401c0000
 801078c:	40140000 	.word	0x40140000
 8010790:	3fe00000 	.word	0x3fe00000
 8010794:	4631      	mov	r1, r6
 8010796:	4656      	mov	r6, sl
 8010798:	4628      	mov	r0, r5
 801079a:	f7f1 fcbf 	bl	800211c <__aeabi_dmul>
 801079e:	9413      	str	r4, [sp, #76]	@ 0x4c
 80107a0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80107a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80107a8:	f7f1 ff68 	bl	800267c <__aeabi_d2iz>
 80107ac:	4605      	mov	r5, r0
 80107ae:	f7f1 fc4b 	bl	8002048 <__aeabi_i2d>
 80107b2:	4602      	mov	r2, r0
 80107b4:	3530      	adds	r5, #48	@ 0x30
 80107b6:	460b      	mov	r3, r1
 80107b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80107bc:	f7f1 faf6 	bl	8001dac <__aeabi_dsub>
 80107c0:	f806 5b01 	strb.w	r5, [r6], #1
 80107c4:	4602      	mov	r2, r0
 80107c6:	460b      	mov	r3, r1
 80107c8:	42a6      	cmp	r6, r4
 80107ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80107ce:	f04f 0200 	mov.w	r2, #0
 80107d2:	d124      	bne.n	801081e <_dtoa_r+0x626>
 80107d4:	4baf      	ldr	r3, [pc, #700]	@ (8010a94 <_dtoa_r+0x89c>)
 80107d6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80107da:	f7f1 fae9 	bl	8001db0 <__adddf3>
 80107de:	4602      	mov	r2, r0
 80107e0:	460b      	mov	r3, r1
 80107e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80107e6:	f7f1 ff29 	bl	800263c <__aeabi_dcmpgt>
 80107ea:	2800      	cmp	r0, #0
 80107ec:	d163      	bne.n	80108b6 <_dtoa_r+0x6be>
 80107ee:	2000      	movs	r0, #0
 80107f0:	49a8      	ldr	r1, [pc, #672]	@ (8010a94 <_dtoa_r+0x89c>)
 80107f2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80107f6:	f7f1 fad9 	bl	8001dac <__aeabi_dsub>
 80107fa:	4602      	mov	r2, r0
 80107fc:	460b      	mov	r3, r1
 80107fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010802:	f7f1 fefd 	bl	8002600 <__aeabi_dcmplt>
 8010806:	2800      	cmp	r0, #0
 8010808:	f43f af14 	beq.w	8010634 <_dtoa_r+0x43c>
 801080c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801080e:	1e73      	subs	r3, r6, #1
 8010810:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010812:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010816:	2b30      	cmp	r3, #48	@ 0x30
 8010818:	d0f8      	beq.n	801080c <_dtoa_r+0x614>
 801081a:	4647      	mov	r7, r8
 801081c:	e03b      	b.n	8010896 <_dtoa_r+0x69e>
 801081e:	4b9e      	ldr	r3, [pc, #632]	@ (8010a98 <_dtoa_r+0x8a0>)
 8010820:	f7f1 fc7c 	bl	800211c <__aeabi_dmul>
 8010824:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010828:	e7bc      	b.n	80107a4 <_dtoa_r+0x5ac>
 801082a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801082e:	4656      	mov	r6, sl
 8010830:	4620      	mov	r0, r4
 8010832:	4629      	mov	r1, r5
 8010834:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010838:	f7f1 fd9a 	bl	8002370 <__aeabi_ddiv>
 801083c:	f7f1 ff1e 	bl	800267c <__aeabi_d2iz>
 8010840:	4680      	mov	r8, r0
 8010842:	f7f1 fc01 	bl	8002048 <__aeabi_i2d>
 8010846:	e9dd 2300 	ldrd	r2, r3, [sp]
 801084a:	f7f1 fc67 	bl	800211c <__aeabi_dmul>
 801084e:	4602      	mov	r2, r0
 8010850:	4620      	mov	r0, r4
 8010852:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8010856:	460b      	mov	r3, r1
 8010858:	4629      	mov	r1, r5
 801085a:	f7f1 faa7 	bl	8001dac <__aeabi_dsub>
 801085e:	9d03      	ldr	r5, [sp, #12]
 8010860:	f806 4b01 	strb.w	r4, [r6], #1
 8010864:	eba6 040a 	sub.w	r4, r6, sl
 8010868:	4602      	mov	r2, r0
 801086a:	460b      	mov	r3, r1
 801086c:	42a5      	cmp	r5, r4
 801086e:	d133      	bne.n	80108d8 <_dtoa_r+0x6e0>
 8010870:	f7f1 fa9e 	bl	8001db0 <__adddf3>
 8010874:	4604      	mov	r4, r0
 8010876:	460d      	mov	r5, r1
 8010878:	e9dd 2300 	ldrd	r2, r3, [sp]
 801087c:	f7f1 fede 	bl	800263c <__aeabi_dcmpgt>
 8010880:	b9c0      	cbnz	r0, 80108b4 <_dtoa_r+0x6bc>
 8010882:	4620      	mov	r0, r4
 8010884:	4629      	mov	r1, r5
 8010886:	e9dd 2300 	ldrd	r2, r3, [sp]
 801088a:	f7f1 feaf 	bl	80025ec <__aeabi_dcmpeq>
 801088e:	b110      	cbz	r0, 8010896 <_dtoa_r+0x69e>
 8010890:	f018 0f01 	tst.w	r8, #1
 8010894:	d10e      	bne.n	80108b4 <_dtoa_r+0x6bc>
 8010896:	9902      	ldr	r1, [sp, #8]
 8010898:	4648      	mov	r0, r9
 801089a:	f000 fbbf 	bl	801101c <_Bfree>
 801089e:	2300      	movs	r3, #0
 80108a0:	3701      	adds	r7, #1
 80108a2:	7033      	strb	r3, [r6, #0]
 80108a4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80108a6:	601f      	str	r7, [r3, #0]
 80108a8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	f000 824c 	beq.w	8010d48 <_dtoa_r+0xb50>
 80108b0:	601e      	str	r6, [r3, #0]
 80108b2:	e249      	b.n	8010d48 <_dtoa_r+0xb50>
 80108b4:	46b8      	mov	r8, r7
 80108b6:	4633      	mov	r3, r6
 80108b8:	461e      	mov	r6, r3
 80108ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80108be:	2a39      	cmp	r2, #57	@ 0x39
 80108c0:	d106      	bne.n	80108d0 <_dtoa_r+0x6d8>
 80108c2:	459a      	cmp	sl, r3
 80108c4:	d1f8      	bne.n	80108b8 <_dtoa_r+0x6c0>
 80108c6:	2230      	movs	r2, #48	@ 0x30
 80108c8:	f108 0801 	add.w	r8, r8, #1
 80108cc:	f88a 2000 	strb.w	r2, [sl]
 80108d0:	781a      	ldrb	r2, [r3, #0]
 80108d2:	3201      	adds	r2, #1
 80108d4:	701a      	strb	r2, [r3, #0]
 80108d6:	e7a0      	b.n	801081a <_dtoa_r+0x622>
 80108d8:	2200      	movs	r2, #0
 80108da:	4b6f      	ldr	r3, [pc, #444]	@ (8010a98 <_dtoa_r+0x8a0>)
 80108dc:	f7f1 fc1e 	bl	800211c <__aeabi_dmul>
 80108e0:	2200      	movs	r2, #0
 80108e2:	2300      	movs	r3, #0
 80108e4:	4604      	mov	r4, r0
 80108e6:	460d      	mov	r5, r1
 80108e8:	f7f1 fe80 	bl	80025ec <__aeabi_dcmpeq>
 80108ec:	2800      	cmp	r0, #0
 80108ee:	d09f      	beq.n	8010830 <_dtoa_r+0x638>
 80108f0:	e7d1      	b.n	8010896 <_dtoa_r+0x69e>
 80108f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80108f4:	2a00      	cmp	r2, #0
 80108f6:	f000 80ea 	beq.w	8010ace <_dtoa_r+0x8d6>
 80108fa:	9a07      	ldr	r2, [sp, #28]
 80108fc:	2a01      	cmp	r2, #1
 80108fe:	f300 80cd 	bgt.w	8010a9c <_dtoa_r+0x8a4>
 8010902:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8010904:	2a00      	cmp	r2, #0
 8010906:	f000 80c1 	beq.w	8010a8c <_dtoa_r+0x894>
 801090a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801090e:	9c08      	ldr	r4, [sp, #32]
 8010910:	9e00      	ldr	r6, [sp, #0]
 8010912:	9a00      	ldr	r2, [sp, #0]
 8010914:	2101      	movs	r1, #1
 8010916:	4648      	mov	r0, r9
 8010918:	441a      	add	r2, r3
 801091a:	9200      	str	r2, [sp, #0]
 801091c:	9a06      	ldr	r2, [sp, #24]
 801091e:	441a      	add	r2, r3
 8010920:	9206      	str	r2, [sp, #24]
 8010922:	f000 fc7b 	bl	801121c <__i2b>
 8010926:	4605      	mov	r5, r0
 8010928:	b166      	cbz	r6, 8010944 <_dtoa_r+0x74c>
 801092a:	9b06      	ldr	r3, [sp, #24]
 801092c:	2b00      	cmp	r3, #0
 801092e:	dd09      	ble.n	8010944 <_dtoa_r+0x74c>
 8010930:	42b3      	cmp	r3, r6
 8010932:	9a00      	ldr	r2, [sp, #0]
 8010934:	bfa8      	it	ge
 8010936:	4633      	movge	r3, r6
 8010938:	1ad2      	subs	r2, r2, r3
 801093a:	1af6      	subs	r6, r6, r3
 801093c:	9200      	str	r2, [sp, #0]
 801093e:	9a06      	ldr	r2, [sp, #24]
 8010940:	1ad3      	subs	r3, r2, r3
 8010942:	9306      	str	r3, [sp, #24]
 8010944:	9b08      	ldr	r3, [sp, #32]
 8010946:	b30b      	cbz	r3, 801098c <_dtoa_r+0x794>
 8010948:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801094a:	2b00      	cmp	r3, #0
 801094c:	f000 80c6 	beq.w	8010adc <_dtoa_r+0x8e4>
 8010950:	2c00      	cmp	r4, #0
 8010952:	f000 80c0 	beq.w	8010ad6 <_dtoa_r+0x8de>
 8010956:	4629      	mov	r1, r5
 8010958:	4622      	mov	r2, r4
 801095a:	4648      	mov	r0, r9
 801095c:	f000 fd18 	bl	8011390 <__pow5mult>
 8010960:	9a02      	ldr	r2, [sp, #8]
 8010962:	4601      	mov	r1, r0
 8010964:	4605      	mov	r5, r0
 8010966:	4648      	mov	r0, r9
 8010968:	f000 fc6e 	bl	8011248 <__multiply>
 801096c:	9902      	ldr	r1, [sp, #8]
 801096e:	4680      	mov	r8, r0
 8010970:	4648      	mov	r0, r9
 8010972:	f000 fb53 	bl	801101c <_Bfree>
 8010976:	9b08      	ldr	r3, [sp, #32]
 8010978:	1b1b      	subs	r3, r3, r4
 801097a:	9308      	str	r3, [sp, #32]
 801097c:	f000 80b1 	beq.w	8010ae2 <_dtoa_r+0x8ea>
 8010980:	9a08      	ldr	r2, [sp, #32]
 8010982:	4641      	mov	r1, r8
 8010984:	4648      	mov	r0, r9
 8010986:	f000 fd03 	bl	8011390 <__pow5mult>
 801098a:	9002      	str	r0, [sp, #8]
 801098c:	2101      	movs	r1, #1
 801098e:	4648      	mov	r0, r9
 8010990:	f000 fc44 	bl	801121c <__i2b>
 8010994:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010996:	4604      	mov	r4, r0
 8010998:	2b00      	cmp	r3, #0
 801099a:	f000 81d9 	beq.w	8010d50 <_dtoa_r+0xb58>
 801099e:	461a      	mov	r2, r3
 80109a0:	4601      	mov	r1, r0
 80109a2:	4648      	mov	r0, r9
 80109a4:	f000 fcf4 	bl	8011390 <__pow5mult>
 80109a8:	9b07      	ldr	r3, [sp, #28]
 80109aa:	4604      	mov	r4, r0
 80109ac:	2b01      	cmp	r3, #1
 80109ae:	f300 809f 	bgt.w	8010af0 <_dtoa_r+0x8f8>
 80109b2:	9b04      	ldr	r3, [sp, #16]
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	f040 8097 	bne.w	8010ae8 <_dtoa_r+0x8f0>
 80109ba:	9b05      	ldr	r3, [sp, #20]
 80109bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	f040 8093 	bne.w	8010aec <_dtoa_r+0x8f4>
 80109c6:	9b05      	ldr	r3, [sp, #20]
 80109c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80109cc:	0d1b      	lsrs	r3, r3, #20
 80109ce:	051b      	lsls	r3, r3, #20
 80109d0:	b133      	cbz	r3, 80109e0 <_dtoa_r+0x7e8>
 80109d2:	9b00      	ldr	r3, [sp, #0]
 80109d4:	3301      	adds	r3, #1
 80109d6:	9300      	str	r3, [sp, #0]
 80109d8:	9b06      	ldr	r3, [sp, #24]
 80109da:	3301      	adds	r3, #1
 80109dc:	9306      	str	r3, [sp, #24]
 80109de:	2301      	movs	r3, #1
 80109e0:	9308      	str	r3, [sp, #32]
 80109e2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	f000 81b9 	beq.w	8010d5c <_dtoa_r+0xb64>
 80109ea:	6923      	ldr	r3, [r4, #16]
 80109ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80109f0:	6918      	ldr	r0, [r3, #16]
 80109f2:	f000 fbc7 	bl	8011184 <__hi0bits>
 80109f6:	f1c0 0020 	rsb	r0, r0, #32
 80109fa:	9b06      	ldr	r3, [sp, #24]
 80109fc:	4418      	add	r0, r3
 80109fe:	f010 001f 	ands.w	r0, r0, #31
 8010a02:	f000 8082 	beq.w	8010b0a <_dtoa_r+0x912>
 8010a06:	f1c0 0320 	rsb	r3, r0, #32
 8010a0a:	2b04      	cmp	r3, #4
 8010a0c:	dd73      	ble.n	8010af6 <_dtoa_r+0x8fe>
 8010a0e:	f1c0 001c 	rsb	r0, r0, #28
 8010a12:	9b00      	ldr	r3, [sp, #0]
 8010a14:	4403      	add	r3, r0
 8010a16:	4406      	add	r6, r0
 8010a18:	9300      	str	r3, [sp, #0]
 8010a1a:	9b06      	ldr	r3, [sp, #24]
 8010a1c:	4403      	add	r3, r0
 8010a1e:	9306      	str	r3, [sp, #24]
 8010a20:	9b00      	ldr	r3, [sp, #0]
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	dd05      	ble.n	8010a32 <_dtoa_r+0x83a>
 8010a26:	461a      	mov	r2, r3
 8010a28:	9902      	ldr	r1, [sp, #8]
 8010a2a:	4648      	mov	r0, r9
 8010a2c:	f000 fd0a 	bl	8011444 <__lshift>
 8010a30:	9002      	str	r0, [sp, #8]
 8010a32:	9b06      	ldr	r3, [sp, #24]
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	dd05      	ble.n	8010a44 <_dtoa_r+0x84c>
 8010a38:	4621      	mov	r1, r4
 8010a3a:	461a      	mov	r2, r3
 8010a3c:	4648      	mov	r0, r9
 8010a3e:	f000 fd01 	bl	8011444 <__lshift>
 8010a42:	4604      	mov	r4, r0
 8010a44:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d061      	beq.n	8010b0e <_dtoa_r+0x916>
 8010a4a:	4621      	mov	r1, r4
 8010a4c:	9802      	ldr	r0, [sp, #8]
 8010a4e:	f000 fd65 	bl	801151c <__mcmp>
 8010a52:	2800      	cmp	r0, #0
 8010a54:	da5b      	bge.n	8010b0e <_dtoa_r+0x916>
 8010a56:	2300      	movs	r3, #0
 8010a58:	220a      	movs	r2, #10
 8010a5a:	9902      	ldr	r1, [sp, #8]
 8010a5c:	4648      	mov	r0, r9
 8010a5e:	f000 faff 	bl	8011060 <__multadd>
 8010a62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010a64:	f107 38ff 	add.w	r8, r7, #4294967295
 8010a68:	9002      	str	r0, [sp, #8]
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	f000 8178 	beq.w	8010d60 <_dtoa_r+0xb68>
 8010a70:	4629      	mov	r1, r5
 8010a72:	2300      	movs	r3, #0
 8010a74:	220a      	movs	r2, #10
 8010a76:	4648      	mov	r0, r9
 8010a78:	f000 faf2 	bl	8011060 <__multadd>
 8010a7c:	f1bb 0f00 	cmp.w	fp, #0
 8010a80:	4605      	mov	r5, r0
 8010a82:	dc6f      	bgt.n	8010b64 <_dtoa_r+0x96c>
 8010a84:	9b07      	ldr	r3, [sp, #28]
 8010a86:	2b02      	cmp	r3, #2
 8010a88:	dc49      	bgt.n	8010b1e <_dtoa_r+0x926>
 8010a8a:	e06b      	b.n	8010b64 <_dtoa_r+0x96c>
 8010a8c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010a8e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8010a92:	e73c      	b.n	801090e <_dtoa_r+0x716>
 8010a94:	3fe00000 	.word	0x3fe00000
 8010a98:	40240000 	.word	0x40240000
 8010a9c:	9b03      	ldr	r3, [sp, #12]
 8010a9e:	1e5c      	subs	r4, r3, #1
 8010aa0:	9b08      	ldr	r3, [sp, #32]
 8010aa2:	42a3      	cmp	r3, r4
 8010aa4:	db09      	blt.n	8010aba <_dtoa_r+0x8c2>
 8010aa6:	1b1c      	subs	r4, r3, r4
 8010aa8:	9b03      	ldr	r3, [sp, #12]
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	f6bf af30 	bge.w	8010910 <_dtoa_r+0x718>
 8010ab0:	9b00      	ldr	r3, [sp, #0]
 8010ab2:	9a03      	ldr	r2, [sp, #12]
 8010ab4:	1a9e      	subs	r6, r3, r2
 8010ab6:	2300      	movs	r3, #0
 8010ab8:	e72b      	b.n	8010912 <_dtoa_r+0x71a>
 8010aba:	9b08      	ldr	r3, [sp, #32]
 8010abc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010abe:	1ae3      	subs	r3, r4, r3
 8010ac0:	9408      	str	r4, [sp, #32]
 8010ac2:	9e00      	ldr	r6, [sp, #0]
 8010ac4:	2400      	movs	r4, #0
 8010ac6:	441a      	add	r2, r3
 8010ac8:	9b03      	ldr	r3, [sp, #12]
 8010aca:	920d      	str	r2, [sp, #52]	@ 0x34
 8010acc:	e721      	b.n	8010912 <_dtoa_r+0x71a>
 8010ace:	9c08      	ldr	r4, [sp, #32]
 8010ad0:	9e00      	ldr	r6, [sp, #0]
 8010ad2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8010ad4:	e728      	b.n	8010928 <_dtoa_r+0x730>
 8010ad6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8010ada:	e751      	b.n	8010980 <_dtoa_r+0x788>
 8010adc:	9a08      	ldr	r2, [sp, #32]
 8010ade:	9902      	ldr	r1, [sp, #8]
 8010ae0:	e750      	b.n	8010984 <_dtoa_r+0x78c>
 8010ae2:	f8cd 8008 	str.w	r8, [sp, #8]
 8010ae6:	e751      	b.n	801098c <_dtoa_r+0x794>
 8010ae8:	2300      	movs	r3, #0
 8010aea:	e779      	b.n	80109e0 <_dtoa_r+0x7e8>
 8010aec:	9b04      	ldr	r3, [sp, #16]
 8010aee:	e777      	b.n	80109e0 <_dtoa_r+0x7e8>
 8010af0:	2300      	movs	r3, #0
 8010af2:	9308      	str	r3, [sp, #32]
 8010af4:	e779      	b.n	80109ea <_dtoa_r+0x7f2>
 8010af6:	d093      	beq.n	8010a20 <_dtoa_r+0x828>
 8010af8:	331c      	adds	r3, #28
 8010afa:	9a00      	ldr	r2, [sp, #0]
 8010afc:	441a      	add	r2, r3
 8010afe:	441e      	add	r6, r3
 8010b00:	9200      	str	r2, [sp, #0]
 8010b02:	9a06      	ldr	r2, [sp, #24]
 8010b04:	441a      	add	r2, r3
 8010b06:	9206      	str	r2, [sp, #24]
 8010b08:	e78a      	b.n	8010a20 <_dtoa_r+0x828>
 8010b0a:	4603      	mov	r3, r0
 8010b0c:	e7f4      	b.n	8010af8 <_dtoa_r+0x900>
 8010b0e:	9b03      	ldr	r3, [sp, #12]
 8010b10:	46b8      	mov	r8, r7
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	dc20      	bgt.n	8010b58 <_dtoa_r+0x960>
 8010b16:	469b      	mov	fp, r3
 8010b18:	9b07      	ldr	r3, [sp, #28]
 8010b1a:	2b02      	cmp	r3, #2
 8010b1c:	dd1e      	ble.n	8010b5c <_dtoa_r+0x964>
 8010b1e:	f1bb 0f00 	cmp.w	fp, #0
 8010b22:	f47f adb1 	bne.w	8010688 <_dtoa_r+0x490>
 8010b26:	4621      	mov	r1, r4
 8010b28:	465b      	mov	r3, fp
 8010b2a:	2205      	movs	r2, #5
 8010b2c:	4648      	mov	r0, r9
 8010b2e:	f000 fa97 	bl	8011060 <__multadd>
 8010b32:	4601      	mov	r1, r0
 8010b34:	4604      	mov	r4, r0
 8010b36:	9802      	ldr	r0, [sp, #8]
 8010b38:	f000 fcf0 	bl	801151c <__mcmp>
 8010b3c:	2800      	cmp	r0, #0
 8010b3e:	f77f ada3 	ble.w	8010688 <_dtoa_r+0x490>
 8010b42:	4656      	mov	r6, sl
 8010b44:	2331      	movs	r3, #49	@ 0x31
 8010b46:	f108 0801 	add.w	r8, r8, #1
 8010b4a:	f806 3b01 	strb.w	r3, [r6], #1
 8010b4e:	e59f      	b.n	8010690 <_dtoa_r+0x498>
 8010b50:	46b8      	mov	r8, r7
 8010b52:	9c03      	ldr	r4, [sp, #12]
 8010b54:	4625      	mov	r5, r4
 8010b56:	e7f4      	b.n	8010b42 <_dtoa_r+0x94a>
 8010b58:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8010b5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	f000 8102 	beq.w	8010d68 <_dtoa_r+0xb70>
 8010b64:	2e00      	cmp	r6, #0
 8010b66:	dd05      	ble.n	8010b74 <_dtoa_r+0x97c>
 8010b68:	4629      	mov	r1, r5
 8010b6a:	4632      	mov	r2, r6
 8010b6c:	4648      	mov	r0, r9
 8010b6e:	f000 fc69 	bl	8011444 <__lshift>
 8010b72:	4605      	mov	r5, r0
 8010b74:	9b08      	ldr	r3, [sp, #32]
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d05c      	beq.n	8010c34 <_dtoa_r+0xa3c>
 8010b7a:	6869      	ldr	r1, [r5, #4]
 8010b7c:	4648      	mov	r0, r9
 8010b7e:	f000 fa0d 	bl	8010f9c <_Balloc>
 8010b82:	4606      	mov	r6, r0
 8010b84:	b928      	cbnz	r0, 8010b92 <_dtoa_r+0x99a>
 8010b86:	4b83      	ldr	r3, [pc, #524]	@ (8010d94 <_dtoa_r+0xb9c>)
 8010b88:	4602      	mov	r2, r0
 8010b8a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010b8e:	f7ff bb4a 	b.w	8010226 <_dtoa_r+0x2e>
 8010b92:	692a      	ldr	r2, [r5, #16]
 8010b94:	f105 010c 	add.w	r1, r5, #12
 8010b98:	300c      	adds	r0, #12
 8010b9a:	3202      	adds	r2, #2
 8010b9c:	0092      	lsls	r2, r2, #2
 8010b9e:	f7ff fa89 	bl	80100b4 <memcpy>
 8010ba2:	2201      	movs	r2, #1
 8010ba4:	4631      	mov	r1, r6
 8010ba6:	4648      	mov	r0, r9
 8010ba8:	f000 fc4c 	bl	8011444 <__lshift>
 8010bac:	f10a 0301 	add.w	r3, sl, #1
 8010bb0:	462f      	mov	r7, r5
 8010bb2:	4605      	mov	r5, r0
 8010bb4:	9300      	str	r3, [sp, #0]
 8010bb6:	eb0a 030b 	add.w	r3, sl, fp
 8010bba:	9308      	str	r3, [sp, #32]
 8010bbc:	9b04      	ldr	r3, [sp, #16]
 8010bbe:	f003 0301 	and.w	r3, r3, #1
 8010bc2:	9306      	str	r3, [sp, #24]
 8010bc4:	9b00      	ldr	r3, [sp, #0]
 8010bc6:	4621      	mov	r1, r4
 8010bc8:	9802      	ldr	r0, [sp, #8]
 8010bca:	f103 3bff 	add.w	fp, r3, #4294967295
 8010bce:	f7ff fa85 	bl	80100dc <quorem>
 8010bd2:	4603      	mov	r3, r0
 8010bd4:	4639      	mov	r1, r7
 8010bd6:	9003      	str	r0, [sp, #12]
 8010bd8:	3330      	adds	r3, #48	@ 0x30
 8010bda:	9802      	ldr	r0, [sp, #8]
 8010bdc:	9309      	str	r3, [sp, #36]	@ 0x24
 8010bde:	f000 fc9d 	bl	801151c <__mcmp>
 8010be2:	462a      	mov	r2, r5
 8010be4:	9004      	str	r0, [sp, #16]
 8010be6:	4621      	mov	r1, r4
 8010be8:	4648      	mov	r0, r9
 8010bea:	f000 fcb3 	bl	8011554 <__mdiff>
 8010bee:	68c2      	ldr	r2, [r0, #12]
 8010bf0:	4606      	mov	r6, r0
 8010bf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010bf4:	bb02      	cbnz	r2, 8010c38 <_dtoa_r+0xa40>
 8010bf6:	4601      	mov	r1, r0
 8010bf8:	9802      	ldr	r0, [sp, #8]
 8010bfa:	f000 fc8f 	bl	801151c <__mcmp>
 8010bfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c00:	4602      	mov	r2, r0
 8010c02:	4631      	mov	r1, r6
 8010c04:	4648      	mov	r0, r9
 8010c06:	920c      	str	r2, [sp, #48]	@ 0x30
 8010c08:	9309      	str	r3, [sp, #36]	@ 0x24
 8010c0a:	f000 fa07 	bl	801101c <_Bfree>
 8010c0e:	9b07      	ldr	r3, [sp, #28]
 8010c10:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8010c12:	9e00      	ldr	r6, [sp, #0]
 8010c14:	ea42 0103 	orr.w	r1, r2, r3
 8010c18:	9b06      	ldr	r3, [sp, #24]
 8010c1a:	4319      	orrs	r1, r3
 8010c1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c1e:	d10d      	bne.n	8010c3c <_dtoa_r+0xa44>
 8010c20:	2b39      	cmp	r3, #57	@ 0x39
 8010c22:	d027      	beq.n	8010c74 <_dtoa_r+0xa7c>
 8010c24:	9a04      	ldr	r2, [sp, #16]
 8010c26:	2a00      	cmp	r2, #0
 8010c28:	dd01      	ble.n	8010c2e <_dtoa_r+0xa36>
 8010c2a:	9b03      	ldr	r3, [sp, #12]
 8010c2c:	3331      	adds	r3, #49	@ 0x31
 8010c2e:	f88b 3000 	strb.w	r3, [fp]
 8010c32:	e52e      	b.n	8010692 <_dtoa_r+0x49a>
 8010c34:	4628      	mov	r0, r5
 8010c36:	e7b9      	b.n	8010bac <_dtoa_r+0x9b4>
 8010c38:	2201      	movs	r2, #1
 8010c3a:	e7e2      	b.n	8010c02 <_dtoa_r+0xa0a>
 8010c3c:	9904      	ldr	r1, [sp, #16]
 8010c3e:	2900      	cmp	r1, #0
 8010c40:	db04      	blt.n	8010c4c <_dtoa_r+0xa54>
 8010c42:	9807      	ldr	r0, [sp, #28]
 8010c44:	4301      	orrs	r1, r0
 8010c46:	9806      	ldr	r0, [sp, #24]
 8010c48:	4301      	orrs	r1, r0
 8010c4a:	d120      	bne.n	8010c8e <_dtoa_r+0xa96>
 8010c4c:	2a00      	cmp	r2, #0
 8010c4e:	ddee      	ble.n	8010c2e <_dtoa_r+0xa36>
 8010c50:	2201      	movs	r2, #1
 8010c52:	9902      	ldr	r1, [sp, #8]
 8010c54:	4648      	mov	r0, r9
 8010c56:	9300      	str	r3, [sp, #0]
 8010c58:	f000 fbf4 	bl	8011444 <__lshift>
 8010c5c:	4621      	mov	r1, r4
 8010c5e:	9002      	str	r0, [sp, #8]
 8010c60:	f000 fc5c 	bl	801151c <__mcmp>
 8010c64:	2800      	cmp	r0, #0
 8010c66:	9b00      	ldr	r3, [sp, #0]
 8010c68:	dc02      	bgt.n	8010c70 <_dtoa_r+0xa78>
 8010c6a:	d1e0      	bne.n	8010c2e <_dtoa_r+0xa36>
 8010c6c:	07da      	lsls	r2, r3, #31
 8010c6e:	d5de      	bpl.n	8010c2e <_dtoa_r+0xa36>
 8010c70:	2b39      	cmp	r3, #57	@ 0x39
 8010c72:	d1da      	bne.n	8010c2a <_dtoa_r+0xa32>
 8010c74:	2339      	movs	r3, #57	@ 0x39
 8010c76:	f88b 3000 	strb.w	r3, [fp]
 8010c7a:	4633      	mov	r3, r6
 8010c7c:	461e      	mov	r6, r3
 8010c7e:	3b01      	subs	r3, #1
 8010c80:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010c84:	2a39      	cmp	r2, #57	@ 0x39
 8010c86:	d04f      	beq.n	8010d28 <_dtoa_r+0xb30>
 8010c88:	3201      	adds	r2, #1
 8010c8a:	701a      	strb	r2, [r3, #0]
 8010c8c:	e501      	b.n	8010692 <_dtoa_r+0x49a>
 8010c8e:	2a00      	cmp	r2, #0
 8010c90:	dd03      	ble.n	8010c9a <_dtoa_r+0xaa2>
 8010c92:	2b39      	cmp	r3, #57	@ 0x39
 8010c94:	d0ee      	beq.n	8010c74 <_dtoa_r+0xa7c>
 8010c96:	3301      	adds	r3, #1
 8010c98:	e7c9      	b.n	8010c2e <_dtoa_r+0xa36>
 8010c9a:	9a00      	ldr	r2, [sp, #0]
 8010c9c:	9908      	ldr	r1, [sp, #32]
 8010c9e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8010ca2:	428a      	cmp	r2, r1
 8010ca4:	d029      	beq.n	8010cfa <_dtoa_r+0xb02>
 8010ca6:	2300      	movs	r3, #0
 8010ca8:	220a      	movs	r2, #10
 8010caa:	9902      	ldr	r1, [sp, #8]
 8010cac:	4648      	mov	r0, r9
 8010cae:	f000 f9d7 	bl	8011060 <__multadd>
 8010cb2:	42af      	cmp	r7, r5
 8010cb4:	9002      	str	r0, [sp, #8]
 8010cb6:	f04f 0300 	mov.w	r3, #0
 8010cba:	f04f 020a 	mov.w	r2, #10
 8010cbe:	4639      	mov	r1, r7
 8010cc0:	4648      	mov	r0, r9
 8010cc2:	d107      	bne.n	8010cd4 <_dtoa_r+0xadc>
 8010cc4:	f000 f9cc 	bl	8011060 <__multadd>
 8010cc8:	4607      	mov	r7, r0
 8010cca:	4605      	mov	r5, r0
 8010ccc:	9b00      	ldr	r3, [sp, #0]
 8010cce:	3301      	adds	r3, #1
 8010cd0:	9300      	str	r3, [sp, #0]
 8010cd2:	e777      	b.n	8010bc4 <_dtoa_r+0x9cc>
 8010cd4:	f000 f9c4 	bl	8011060 <__multadd>
 8010cd8:	4629      	mov	r1, r5
 8010cda:	4607      	mov	r7, r0
 8010cdc:	2300      	movs	r3, #0
 8010cde:	220a      	movs	r2, #10
 8010ce0:	4648      	mov	r0, r9
 8010ce2:	f000 f9bd 	bl	8011060 <__multadd>
 8010ce6:	4605      	mov	r5, r0
 8010ce8:	e7f0      	b.n	8010ccc <_dtoa_r+0xad4>
 8010cea:	f1bb 0f00 	cmp.w	fp, #0
 8010cee:	f04f 0700 	mov.w	r7, #0
 8010cf2:	bfcc      	ite	gt
 8010cf4:	465e      	movgt	r6, fp
 8010cf6:	2601      	movle	r6, #1
 8010cf8:	4456      	add	r6, sl
 8010cfa:	2201      	movs	r2, #1
 8010cfc:	9902      	ldr	r1, [sp, #8]
 8010cfe:	4648      	mov	r0, r9
 8010d00:	9300      	str	r3, [sp, #0]
 8010d02:	f000 fb9f 	bl	8011444 <__lshift>
 8010d06:	4621      	mov	r1, r4
 8010d08:	9002      	str	r0, [sp, #8]
 8010d0a:	f000 fc07 	bl	801151c <__mcmp>
 8010d0e:	2800      	cmp	r0, #0
 8010d10:	dcb3      	bgt.n	8010c7a <_dtoa_r+0xa82>
 8010d12:	d102      	bne.n	8010d1a <_dtoa_r+0xb22>
 8010d14:	9b00      	ldr	r3, [sp, #0]
 8010d16:	07db      	lsls	r3, r3, #31
 8010d18:	d4af      	bmi.n	8010c7a <_dtoa_r+0xa82>
 8010d1a:	4633      	mov	r3, r6
 8010d1c:	461e      	mov	r6, r3
 8010d1e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010d22:	2a30      	cmp	r2, #48	@ 0x30
 8010d24:	d0fa      	beq.n	8010d1c <_dtoa_r+0xb24>
 8010d26:	e4b4      	b.n	8010692 <_dtoa_r+0x49a>
 8010d28:	459a      	cmp	sl, r3
 8010d2a:	d1a7      	bne.n	8010c7c <_dtoa_r+0xa84>
 8010d2c:	2331      	movs	r3, #49	@ 0x31
 8010d2e:	f108 0801 	add.w	r8, r8, #1
 8010d32:	f88a 3000 	strb.w	r3, [sl]
 8010d36:	e4ac      	b.n	8010692 <_dtoa_r+0x49a>
 8010d38:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010d3a:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8010d98 <_dtoa_r+0xba0>
 8010d3e:	b11b      	cbz	r3, 8010d48 <_dtoa_r+0xb50>
 8010d40:	f10a 0308 	add.w	r3, sl, #8
 8010d44:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8010d46:	6013      	str	r3, [r2, #0]
 8010d48:	4650      	mov	r0, sl
 8010d4a:	b017      	add	sp, #92	@ 0x5c
 8010d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d50:	9b07      	ldr	r3, [sp, #28]
 8010d52:	2b01      	cmp	r3, #1
 8010d54:	f77f ae2d 	ble.w	80109b2 <_dtoa_r+0x7ba>
 8010d58:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010d5a:	9308      	str	r3, [sp, #32]
 8010d5c:	2001      	movs	r0, #1
 8010d5e:	e64c      	b.n	80109fa <_dtoa_r+0x802>
 8010d60:	f1bb 0f00 	cmp.w	fp, #0
 8010d64:	f77f aed8 	ble.w	8010b18 <_dtoa_r+0x920>
 8010d68:	4656      	mov	r6, sl
 8010d6a:	4621      	mov	r1, r4
 8010d6c:	9802      	ldr	r0, [sp, #8]
 8010d6e:	f7ff f9b5 	bl	80100dc <quorem>
 8010d72:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8010d76:	f806 3b01 	strb.w	r3, [r6], #1
 8010d7a:	eba6 020a 	sub.w	r2, r6, sl
 8010d7e:	4593      	cmp	fp, r2
 8010d80:	ddb3      	ble.n	8010cea <_dtoa_r+0xaf2>
 8010d82:	2300      	movs	r3, #0
 8010d84:	220a      	movs	r2, #10
 8010d86:	9902      	ldr	r1, [sp, #8]
 8010d88:	4648      	mov	r0, r9
 8010d8a:	f000 f969 	bl	8011060 <__multadd>
 8010d8e:	9002      	str	r0, [sp, #8]
 8010d90:	e7eb      	b.n	8010d6a <_dtoa_r+0xb72>
 8010d92:	bf00      	nop
 8010d94:	080148e5 	.word	0x080148e5
 8010d98:	08014869 	.word	0x08014869

08010d9c <_free_r>:
 8010d9c:	b538      	push	{r3, r4, r5, lr}
 8010d9e:	4605      	mov	r5, r0
 8010da0:	2900      	cmp	r1, #0
 8010da2:	d041      	beq.n	8010e28 <_free_r+0x8c>
 8010da4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010da8:	1f0c      	subs	r4, r1, #4
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	bfb8      	it	lt
 8010dae:	18e4      	addlt	r4, r4, r3
 8010db0:	f000 f8e8 	bl	8010f84 <__malloc_lock>
 8010db4:	4a1d      	ldr	r2, [pc, #116]	@ (8010e2c <_free_r+0x90>)
 8010db6:	6813      	ldr	r3, [r2, #0]
 8010db8:	b933      	cbnz	r3, 8010dc8 <_free_r+0x2c>
 8010dba:	6063      	str	r3, [r4, #4]
 8010dbc:	6014      	str	r4, [r2, #0]
 8010dbe:	4628      	mov	r0, r5
 8010dc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010dc4:	f000 b8e4 	b.w	8010f90 <__malloc_unlock>
 8010dc8:	42a3      	cmp	r3, r4
 8010dca:	d908      	bls.n	8010dde <_free_r+0x42>
 8010dcc:	6820      	ldr	r0, [r4, #0]
 8010dce:	1821      	adds	r1, r4, r0
 8010dd0:	428b      	cmp	r3, r1
 8010dd2:	bf01      	itttt	eq
 8010dd4:	6819      	ldreq	r1, [r3, #0]
 8010dd6:	685b      	ldreq	r3, [r3, #4]
 8010dd8:	1809      	addeq	r1, r1, r0
 8010dda:	6021      	streq	r1, [r4, #0]
 8010ddc:	e7ed      	b.n	8010dba <_free_r+0x1e>
 8010dde:	461a      	mov	r2, r3
 8010de0:	685b      	ldr	r3, [r3, #4]
 8010de2:	b10b      	cbz	r3, 8010de8 <_free_r+0x4c>
 8010de4:	42a3      	cmp	r3, r4
 8010de6:	d9fa      	bls.n	8010dde <_free_r+0x42>
 8010de8:	6811      	ldr	r1, [r2, #0]
 8010dea:	1850      	adds	r0, r2, r1
 8010dec:	42a0      	cmp	r0, r4
 8010dee:	d10b      	bne.n	8010e08 <_free_r+0x6c>
 8010df0:	6820      	ldr	r0, [r4, #0]
 8010df2:	4401      	add	r1, r0
 8010df4:	1850      	adds	r0, r2, r1
 8010df6:	6011      	str	r1, [r2, #0]
 8010df8:	4283      	cmp	r3, r0
 8010dfa:	d1e0      	bne.n	8010dbe <_free_r+0x22>
 8010dfc:	6818      	ldr	r0, [r3, #0]
 8010dfe:	685b      	ldr	r3, [r3, #4]
 8010e00:	4408      	add	r0, r1
 8010e02:	6053      	str	r3, [r2, #4]
 8010e04:	6010      	str	r0, [r2, #0]
 8010e06:	e7da      	b.n	8010dbe <_free_r+0x22>
 8010e08:	d902      	bls.n	8010e10 <_free_r+0x74>
 8010e0a:	230c      	movs	r3, #12
 8010e0c:	602b      	str	r3, [r5, #0]
 8010e0e:	e7d6      	b.n	8010dbe <_free_r+0x22>
 8010e10:	6820      	ldr	r0, [r4, #0]
 8010e12:	1821      	adds	r1, r4, r0
 8010e14:	428b      	cmp	r3, r1
 8010e16:	bf02      	ittt	eq
 8010e18:	6819      	ldreq	r1, [r3, #0]
 8010e1a:	685b      	ldreq	r3, [r3, #4]
 8010e1c:	1809      	addeq	r1, r1, r0
 8010e1e:	6063      	str	r3, [r4, #4]
 8010e20:	bf08      	it	eq
 8010e22:	6021      	streq	r1, [r4, #0]
 8010e24:	6054      	str	r4, [r2, #4]
 8010e26:	e7ca      	b.n	8010dbe <_free_r+0x22>
 8010e28:	bd38      	pop	{r3, r4, r5, pc}
 8010e2a:	bf00      	nop
 8010e2c:	200008e8 	.word	0x200008e8

08010e30 <malloc>:
 8010e30:	4b02      	ldr	r3, [pc, #8]	@ (8010e3c <malloc+0xc>)
 8010e32:	4601      	mov	r1, r0
 8010e34:	6818      	ldr	r0, [r3, #0]
 8010e36:	f000 b825 	b.w	8010e84 <_malloc_r>
 8010e3a:	bf00      	nop
 8010e3c:	2000003c 	.word	0x2000003c

08010e40 <sbrk_aligned>:
 8010e40:	b570      	push	{r4, r5, r6, lr}
 8010e42:	4e0f      	ldr	r6, [pc, #60]	@ (8010e80 <sbrk_aligned+0x40>)
 8010e44:	460c      	mov	r4, r1
 8010e46:	4605      	mov	r5, r0
 8010e48:	6831      	ldr	r1, [r6, #0]
 8010e4a:	b911      	cbnz	r1, 8010e52 <sbrk_aligned+0x12>
 8010e4c:	f001 ffd8 	bl	8012e00 <_sbrk_r>
 8010e50:	6030      	str	r0, [r6, #0]
 8010e52:	4621      	mov	r1, r4
 8010e54:	4628      	mov	r0, r5
 8010e56:	f001 ffd3 	bl	8012e00 <_sbrk_r>
 8010e5a:	1c43      	adds	r3, r0, #1
 8010e5c:	d103      	bne.n	8010e66 <sbrk_aligned+0x26>
 8010e5e:	f04f 34ff 	mov.w	r4, #4294967295
 8010e62:	4620      	mov	r0, r4
 8010e64:	bd70      	pop	{r4, r5, r6, pc}
 8010e66:	1cc4      	adds	r4, r0, #3
 8010e68:	f024 0403 	bic.w	r4, r4, #3
 8010e6c:	42a0      	cmp	r0, r4
 8010e6e:	d0f8      	beq.n	8010e62 <sbrk_aligned+0x22>
 8010e70:	1a21      	subs	r1, r4, r0
 8010e72:	4628      	mov	r0, r5
 8010e74:	f001 ffc4 	bl	8012e00 <_sbrk_r>
 8010e78:	3001      	adds	r0, #1
 8010e7a:	d1f2      	bne.n	8010e62 <sbrk_aligned+0x22>
 8010e7c:	e7ef      	b.n	8010e5e <sbrk_aligned+0x1e>
 8010e7e:	bf00      	nop
 8010e80:	200008e4 	.word	0x200008e4

08010e84 <_malloc_r>:
 8010e84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010e88:	1ccd      	adds	r5, r1, #3
 8010e8a:	4606      	mov	r6, r0
 8010e8c:	f025 0503 	bic.w	r5, r5, #3
 8010e90:	3508      	adds	r5, #8
 8010e92:	2d0c      	cmp	r5, #12
 8010e94:	bf38      	it	cc
 8010e96:	250c      	movcc	r5, #12
 8010e98:	2d00      	cmp	r5, #0
 8010e9a:	db01      	blt.n	8010ea0 <_malloc_r+0x1c>
 8010e9c:	42a9      	cmp	r1, r5
 8010e9e:	d904      	bls.n	8010eaa <_malloc_r+0x26>
 8010ea0:	230c      	movs	r3, #12
 8010ea2:	6033      	str	r3, [r6, #0]
 8010ea4:	2000      	movs	r0, #0
 8010ea6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010eaa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010f80 <_malloc_r+0xfc>
 8010eae:	f000 f869 	bl	8010f84 <__malloc_lock>
 8010eb2:	f8d8 3000 	ldr.w	r3, [r8]
 8010eb6:	461c      	mov	r4, r3
 8010eb8:	bb44      	cbnz	r4, 8010f0c <_malloc_r+0x88>
 8010eba:	4629      	mov	r1, r5
 8010ebc:	4630      	mov	r0, r6
 8010ebe:	f7ff ffbf 	bl	8010e40 <sbrk_aligned>
 8010ec2:	1c43      	adds	r3, r0, #1
 8010ec4:	4604      	mov	r4, r0
 8010ec6:	d158      	bne.n	8010f7a <_malloc_r+0xf6>
 8010ec8:	f8d8 4000 	ldr.w	r4, [r8]
 8010ecc:	4627      	mov	r7, r4
 8010ece:	2f00      	cmp	r7, #0
 8010ed0:	d143      	bne.n	8010f5a <_malloc_r+0xd6>
 8010ed2:	2c00      	cmp	r4, #0
 8010ed4:	d04b      	beq.n	8010f6e <_malloc_r+0xea>
 8010ed6:	6823      	ldr	r3, [r4, #0]
 8010ed8:	4639      	mov	r1, r7
 8010eda:	4630      	mov	r0, r6
 8010edc:	eb04 0903 	add.w	r9, r4, r3
 8010ee0:	f001 ff8e 	bl	8012e00 <_sbrk_r>
 8010ee4:	4581      	cmp	r9, r0
 8010ee6:	d142      	bne.n	8010f6e <_malloc_r+0xea>
 8010ee8:	6821      	ldr	r1, [r4, #0]
 8010eea:	4630      	mov	r0, r6
 8010eec:	1a6d      	subs	r5, r5, r1
 8010eee:	4629      	mov	r1, r5
 8010ef0:	f7ff ffa6 	bl	8010e40 <sbrk_aligned>
 8010ef4:	3001      	adds	r0, #1
 8010ef6:	d03a      	beq.n	8010f6e <_malloc_r+0xea>
 8010ef8:	6823      	ldr	r3, [r4, #0]
 8010efa:	442b      	add	r3, r5
 8010efc:	6023      	str	r3, [r4, #0]
 8010efe:	f8d8 3000 	ldr.w	r3, [r8]
 8010f02:	685a      	ldr	r2, [r3, #4]
 8010f04:	bb62      	cbnz	r2, 8010f60 <_malloc_r+0xdc>
 8010f06:	f8c8 7000 	str.w	r7, [r8]
 8010f0a:	e00f      	b.n	8010f2c <_malloc_r+0xa8>
 8010f0c:	6822      	ldr	r2, [r4, #0]
 8010f0e:	1b52      	subs	r2, r2, r5
 8010f10:	d420      	bmi.n	8010f54 <_malloc_r+0xd0>
 8010f12:	2a0b      	cmp	r2, #11
 8010f14:	d917      	bls.n	8010f46 <_malloc_r+0xc2>
 8010f16:	1961      	adds	r1, r4, r5
 8010f18:	42a3      	cmp	r3, r4
 8010f1a:	6025      	str	r5, [r4, #0]
 8010f1c:	bf18      	it	ne
 8010f1e:	6059      	strne	r1, [r3, #4]
 8010f20:	6863      	ldr	r3, [r4, #4]
 8010f22:	bf08      	it	eq
 8010f24:	f8c8 1000 	streq.w	r1, [r8]
 8010f28:	5162      	str	r2, [r4, r5]
 8010f2a:	604b      	str	r3, [r1, #4]
 8010f2c:	4630      	mov	r0, r6
 8010f2e:	f000 f82f 	bl	8010f90 <__malloc_unlock>
 8010f32:	f104 000b 	add.w	r0, r4, #11
 8010f36:	1d23      	adds	r3, r4, #4
 8010f38:	f020 0007 	bic.w	r0, r0, #7
 8010f3c:	1ac2      	subs	r2, r0, r3
 8010f3e:	bf1c      	itt	ne
 8010f40:	1a1b      	subne	r3, r3, r0
 8010f42:	50a3      	strne	r3, [r4, r2]
 8010f44:	e7af      	b.n	8010ea6 <_malloc_r+0x22>
 8010f46:	6862      	ldr	r2, [r4, #4]
 8010f48:	42a3      	cmp	r3, r4
 8010f4a:	bf0c      	ite	eq
 8010f4c:	f8c8 2000 	streq.w	r2, [r8]
 8010f50:	605a      	strne	r2, [r3, #4]
 8010f52:	e7eb      	b.n	8010f2c <_malloc_r+0xa8>
 8010f54:	4623      	mov	r3, r4
 8010f56:	6864      	ldr	r4, [r4, #4]
 8010f58:	e7ae      	b.n	8010eb8 <_malloc_r+0x34>
 8010f5a:	463c      	mov	r4, r7
 8010f5c:	687f      	ldr	r7, [r7, #4]
 8010f5e:	e7b6      	b.n	8010ece <_malloc_r+0x4a>
 8010f60:	461a      	mov	r2, r3
 8010f62:	685b      	ldr	r3, [r3, #4]
 8010f64:	42a3      	cmp	r3, r4
 8010f66:	d1fb      	bne.n	8010f60 <_malloc_r+0xdc>
 8010f68:	2300      	movs	r3, #0
 8010f6a:	6053      	str	r3, [r2, #4]
 8010f6c:	e7de      	b.n	8010f2c <_malloc_r+0xa8>
 8010f6e:	230c      	movs	r3, #12
 8010f70:	4630      	mov	r0, r6
 8010f72:	6033      	str	r3, [r6, #0]
 8010f74:	f000 f80c 	bl	8010f90 <__malloc_unlock>
 8010f78:	e794      	b.n	8010ea4 <_malloc_r+0x20>
 8010f7a:	6005      	str	r5, [r0, #0]
 8010f7c:	e7d6      	b.n	8010f2c <_malloc_r+0xa8>
 8010f7e:	bf00      	nop
 8010f80:	200008e8 	.word	0x200008e8

08010f84 <__malloc_lock>:
 8010f84:	4801      	ldr	r0, [pc, #4]	@ (8010f8c <__malloc_lock+0x8>)
 8010f86:	f7ff b880 	b.w	801008a <__retarget_lock_acquire_recursive>
 8010f8a:	bf00      	nop
 8010f8c:	200008e0 	.word	0x200008e0

08010f90 <__malloc_unlock>:
 8010f90:	4801      	ldr	r0, [pc, #4]	@ (8010f98 <__malloc_unlock+0x8>)
 8010f92:	f7ff b87b 	b.w	801008c <__retarget_lock_release_recursive>
 8010f96:	bf00      	nop
 8010f98:	200008e0 	.word	0x200008e0

08010f9c <_Balloc>:
 8010f9c:	b570      	push	{r4, r5, r6, lr}
 8010f9e:	69c6      	ldr	r6, [r0, #28]
 8010fa0:	4604      	mov	r4, r0
 8010fa2:	460d      	mov	r5, r1
 8010fa4:	b976      	cbnz	r6, 8010fc4 <_Balloc+0x28>
 8010fa6:	2010      	movs	r0, #16
 8010fa8:	f7ff ff42 	bl	8010e30 <malloc>
 8010fac:	4602      	mov	r2, r0
 8010fae:	61e0      	str	r0, [r4, #28]
 8010fb0:	b920      	cbnz	r0, 8010fbc <_Balloc+0x20>
 8010fb2:	4b18      	ldr	r3, [pc, #96]	@ (8011014 <_Balloc+0x78>)
 8010fb4:	216b      	movs	r1, #107	@ 0x6b
 8010fb6:	4818      	ldr	r0, [pc, #96]	@ (8011018 <_Balloc+0x7c>)
 8010fb8:	f001 ff3a 	bl	8012e30 <__assert_func>
 8010fbc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010fc0:	6006      	str	r6, [r0, #0]
 8010fc2:	60c6      	str	r6, [r0, #12]
 8010fc4:	69e6      	ldr	r6, [r4, #28]
 8010fc6:	68f3      	ldr	r3, [r6, #12]
 8010fc8:	b183      	cbz	r3, 8010fec <_Balloc+0x50>
 8010fca:	69e3      	ldr	r3, [r4, #28]
 8010fcc:	68db      	ldr	r3, [r3, #12]
 8010fce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010fd2:	b9b8      	cbnz	r0, 8011004 <_Balloc+0x68>
 8010fd4:	2101      	movs	r1, #1
 8010fd6:	4620      	mov	r0, r4
 8010fd8:	fa01 f605 	lsl.w	r6, r1, r5
 8010fdc:	1d72      	adds	r2, r6, #5
 8010fde:	0092      	lsls	r2, r2, #2
 8010fe0:	f001 ff44 	bl	8012e6c <_calloc_r>
 8010fe4:	b160      	cbz	r0, 8011000 <_Balloc+0x64>
 8010fe6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010fea:	e00e      	b.n	801100a <_Balloc+0x6e>
 8010fec:	2221      	movs	r2, #33	@ 0x21
 8010fee:	2104      	movs	r1, #4
 8010ff0:	4620      	mov	r0, r4
 8010ff2:	f001 ff3b 	bl	8012e6c <_calloc_r>
 8010ff6:	69e3      	ldr	r3, [r4, #28]
 8010ff8:	60f0      	str	r0, [r6, #12]
 8010ffa:	68db      	ldr	r3, [r3, #12]
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d1e4      	bne.n	8010fca <_Balloc+0x2e>
 8011000:	2000      	movs	r0, #0
 8011002:	bd70      	pop	{r4, r5, r6, pc}
 8011004:	6802      	ldr	r2, [r0, #0]
 8011006:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801100a:	2300      	movs	r3, #0
 801100c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011010:	e7f7      	b.n	8011002 <_Balloc+0x66>
 8011012:	bf00      	nop
 8011014:	08014876 	.word	0x08014876
 8011018:	080148f6 	.word	0x080148f6

0801101c <_Bfree>:
 801101c:	b570      	push	{r4, r5, r6, lr}
 801101e:	69c6      	ldr	r6, [r0, #28]
 8011020:	4605      	mov	r5, r0
 8011022:	460c      	mov	r4, r1
 8011024:	b976      	cbnz	r6, 8011044 <_Bfree+0x28>
 8011026:	2010      	movs	r0, #16
 8011028:	f7ff ff02 	bl	8010e30 <malloc>
 801102c:	4602      	mov	r2, r0
 801102e:	61e8      	str	r0, [r5, #28]
 8011030:	b920      	cbnz	r0, 801103c <_Bfree+0x20>
 8011032:	4b09      	ldr	r3, [pc, #36]	@ (8011058 <_Bfree+0x3c>)
 8011034:	218f      	movs	r1, #143	@ 0x8f
 8011036:	4809      	ldr	r0, [pc, #36]	@ (801105c <_Bfree+0x40>)
 8011038:	f001 fefa 	bl	8012e30 <__assert_func>
 801103c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011040:	6006      	str	r6, [r0, #0]
 8011042:	60c6      	str	r6, [r0, #12]
 8011044:	b13c      	cbz	r4, 8011056 <_Bfree+0x3a>
 8011046:	69eb      	ldr	r3, [r5, #28]
 8011048:	6862      	ldr	r2, [r4, #4]
 801104a:	68db      	ldr	r3, [r3, #12]
 801104c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011050:	6021      	str	r1, [r4, #0]
 8011052:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011056:	bd70      	pop	{r4, r5, r6, pc}
 8011058:	08014876 	.word	0x08014876
 801105c:	080148f6 	.word	0x080148f6

08011060 <__multadd>:
 8011060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011064:	f101 0c14 	add.w	ip, r1, #20
 8011068:	4607      	mov	r7, r0
 801106a:	460c      	mov	r4, r1
 801106c:	461e      	mov	r6, r3
 801106e:	690d      	ldr	r5, [r1, #16]
 8011070:	2000      	movs	r0, #0
 8011072:	f8dc 3000 	ldr.w	r3, [ip]
 8011076:	3001      	adds	r0, #1
 8011078:	b299      	uxth	r1, r3
 801107a:	4285      	cmp	r5, r0
 801107c:	fb02 6101 	mla	r1, r2, r1, r6
 8011080:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011084:	ea4f 4311 	mov.w	r3, r1, lsr #16
 8011088:	b289      	uxth	r1, r1
 801108a:	fb02 3306 	mla	r3, r2, r6, r3
 801108e:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011092:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011096:	f84c 1b04 	str.w	r1, [ip], #4
 801109a:	dcea      	bgt.n	8011072 <__multadd+0x12>
 801109c:	b30e      	cbz	r6, 80110e2 <__multadd+0x82>
 801109e:	68a3      	ldr	r3, [r4, #8]
 80110a0:	42ab      	cmp	r3, r5
 80110a2:	dc19      	bgt.n	80110d8 <__multadd+0x78>
 80110a4:	6861      	ldr	r1, [r4, #4]
 80110a6:	4638      	mov	r0, r7
 80110a8:	3101      	adds	r1, #1
 80110aa:	f7ff ff77 	bl	8010f9c <_Balloc>
 80110ae:	4680      	mov	r8, r0
 80110b0:	b928      	cbnz	r0, 80110be <__multadd+0x5e>
 80110b2:	4602      	mov	r2, r0
 80110b4:	4b0c      	ldr	r3, [pc, #48]	@ (80110e8 <__multadd+0x88>)
 80110b6:	21ba      	movs	r1, #186	@ 0xba
 80110b8:	480c      	ldr	r0, [pc, #48]	@ (80110ec <__multadd+0x8c>)
 80110ba:	f001 feb9 	bl	8012e30 <__assert_func>
 80110be:	6922      	ldr	r2, [r4, #16]
 80110c0:	f104 010c 	add.w	r1, r4, #12
 80110c4:	300c      	adds	r0, #12
 80110c6:	3202      	adds	r2, #2
 80110c8:	0092      	lsls	r2, r2, #2
 80110ca:	f7fe fff3 	bl	80100b4 <memcpy>
 80110ce:	4621      	mov	r1, r4
 80110d0:	4644      	mov	r4, r8
 80110d2:	4638      	mov	r0, r7
 80110d4:	f7ff ffa2 	bl	801101c <_Bfree>
 80110d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80110dc:	3501      	adds	r5, #1
 80110de:	615e      	str	r6, [r3, #20]
 80110e0:	6125      	str	r5, [r4, #16]
 80110e2:	4620      	mov	r0, r4
 80110e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110e8:	080148e5 	.word	0x080148e5
 80110ec:	080148f6 	.word	0x080148f6

080110f0 <__s2b>:
 80110f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80110f4:	4615      	mov	r5, r2
 80110f6:	461f      	mov	r7, r3
 80110f8:	2209      	movs	r2, #9
 80110fa:	3308      	adds	r3, #8
 80110fc:	460c      	mov	r4, r1
 80110fe:	4606      	mov	r6, r0
 8011100:	2100      	movs	r1, #0
 8011102:	fb93 f3f2 	sdiv	r3, r3, r2
 8011106:	2201      	movs	r2, #1
 8011108:	429a      	cmp	r2, r3
 801110a:	db09      	blt.n	8011120 <__s2b+0x30>
 801110c:	4630      	mov	r0, r6
 801110e:	f7ff ff45 	bl	8010f9c <_Balloc>
 8011112:	b940      	cbnz	r0, 8011126 <__s2b+0x36>
 8011114:	4602      	mov	r2, r0
 8011116:	4b19      	ldr	r3, [pc, #100]	@ (801117c <__s2b+0x8c>)
 8011118:	21d3      	movs	r1, #211	@ 0xd3
 801111a:	4819      	ldr	r0, [pc, #100]	@ (8011180 <__s2b+0x90>)
 801111c:	f001 fe88 	bl	8012e30 <__assert_func>
 8011120:	0052      	lsls	r2, r2, #1
 8011122:	3101      	adds	r1, #1
 8011124:	e7f0      	b.n	8011108 <__s2b+0x18>
 8011126:	9b08      	ldr	r3, [sp, #32]
 8011128:	2d09      	cmp	r5, #9
 801112a:	6143      	str	r3, [r0, #20]
 801112c:	f04f 0301 	mov.w	r3, #1
 8011130:	6103      	str	r3, [r0, #16]
 8011132:	dd16      	ble.n	8011162 <__s2b+0x72>
 8011134:	f104 0909 	add.w	r9, r4, #9
 8011138:	442c      	add	r4, r5
 801113a:	46c8      	mov	r8, r9
 801113c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011140:	4601      	mov	r1, r0
 8011142:	220a      	movs	r2, #10
 8011144:	4630      	mov	r0, r6
 8011146:	3b30      	subs	r3, #48	@ 0x30
 8011148:	f7ff ff8a 	bl	8011060 <__multadd>
 801114c:	45a0      	cmp	r8, r4
 801114e:	d1f5      	bne.n	801113c <__s2b+0x4c>
 8011150:	f1a5 0408 	sub.w	r4, r5, #8
 8011154:	444c      	add	r4, r9
 8011156:	1b2d      	subs	r5, r5, r4
 8011158:	1963      	adds	r3, r4, r5
 801115a:	42bb      	cmp	r3, r7
 801115c:	db04      	blt.n	8011168 <__s2b+0x78>
 801115e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011162:	340a      	adds	r4, #10
 8011164:	2509      	movs	r5, #9
 8011166:	e7f6      	b.n	8011156 <__s2b+0x66>
 8011168:	f814 3b01 	ldrb.w	r3, [r4], #1
 801116c:	4601      	mov	r1, r0
 801116e:	220a      	movs	r2, #10
 8011170:	4630      	mov	r0, r6
 8011172:	3b30      	subs	r3, #48	@ 0x30
 8011174:	f7ff ff74 	bl	8011060 <__multadd>
 8011178:	e7ee      	b.n	8011158 <__s2b+0x68>
 801117a:	bf00      	nop
 801117c:	080148e5 	.word	0x080148e5
 8011180:	080148f6 	.word	0x080148f6

08011184 <__hi0bits>:
 8011184:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011188:	4603      	mov	r3, r0
 801118a:	bf36      	itet	cc
 801118c:	0403      	lslcc	r3, r0, #16
 801118e:	2000      	movcs	r0, #0
 8011190:	2010      	movcc	r0, #16
 8011192:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011196:	bf3c      	itt	cc
 8011198:	021b      	lslcc	r3, r3, #8
 801119a:	3008      	addcc	r0, #8
 801119c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80111a0:	bf3c      	itt	cc
 80111a2:	011b      	lslcc	r3, r3, #4
 80111a4:	3004      	addcc	r0, #4
 80111a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80111aa:	bf3c      	itt	cc
 80111ac:	009b      	lslcc	r3, r3, #2
 80111ae:	3002      	addcc	r0, #2
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	db05      	blt.n	80111c0 <__hi0bits+0x3c>
 80111b4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80111b8:	f100 0001 	add.w	r0, r0, #1
 80111bc:	bf08      	it	eq
 80111be:	2020      	moveq	r0, #32
 80111c0:	4770      	bx	lr

080111c2 <__lo0bits>:
 80111c2:	6803      	ldr	r3, [r0, #0]
 80111c4:	4602      	mov	r2, r0
 80111c6:	f013 0007 	ands.w	r0, r3, #7
 80111ca:	d00b      	beq.n	80111e4 <__lo0bits+0x22>
 80111cc:	07d9      	lsls	r1, r3, #31
 80111ce:	d421      	bmi.n	8011214 <__lo0bits+0x52>
 80111d0:	0798      	lsls	r0, r3, #30
 80111d2:	bf47      	ittee	mi
 80111d4:	085b      	lsrmi	r3, r3, #1
 80111d6:	2001      	movmi	r0, #1
 80111d8:	089b      	lsrpl	r3, r3, #2
 80111da:	2002      	movpl	r0, #2
 80111dc:	bf4c      	ite	mi
 80111de:	6013      	strmi	r3, [r2, #0]
 80111e0:	6013      	strpl	r3, [r2, #0]
 80111e2:	4770      	bx	lr
 80111e4:	b299      	uxth	r1, r3
 80111e6:	b909      	cbnz	r1, 80111ec <__lo0bits+0x2a>
 80111e8:	0c1b      	lsrs	r3, r3, #16
 80111ea:	2010      	movs	r0, #16
 80111ec:	b2d9      	uxtb	r1, r3
 80111ee:	b909      	cbnz	r1, 80111f4 <__lo0bits+0x32>
 80111f0:	3008      	adds	r0, #8
 80111f2:	0a1b      	lsrs	r3, r3, #8
 80111f4:	0719      	lsls	r1, r3, #28
 80111f6:	bf04      	itt	eq
 80111f8:	091b      	lsreq	r3, r3, #4
 80111fa:	3004      	addeq	r0, #4
 80111fc:	0799      	lsls	r1, r3, #30
 80111fe:	bf04      	itt	eq
 8011200:	089b      	lsreq	r3, r3, #2
 8011202:	3002      	addeq	r0, #2
 8011204:	07d9      	lsls	r1, r3, #31
 8011206:	d403      	bmi.n	8011210 <__lo0bits+0x4e>
 8011208:	085b      	lsrs	r3, r3, #1
 801120a:	f100 0001 	add.w	r0, r0, #1
 801120e:	d003      	beq.n	8011218 <__lo0bits+0x56>
 8011210:	6013      	str	r3, [r2, #0]
 8011212:	4770      	bx	lr
 8011214:	2000      	movs	r0, #0
 8011216:	4770      	bx	lr
 8011218:	2020      	movs	r0, #32
 801121a:	4770      	bx	lr

0801121c <__i2b>:
 801121c:	b510      	push	{r4, lr}
 801121e:	460c      	mov	r4, r1
 8011220:	2101      	movs	r1, #1
 8011222:	f7ff febb 	bl	8010f9c <_Balloc>
 8011226:	4602      	mov	r2, r0
 8011228:	b928      	cbnz	r0, 8011236 <__i2b+0x1a>
 801122a:	4b05      	ldr	r3, [pc, #20]	@ (8011240 <__i2b+0x24>)
 801122c:	f240 1145 	movw	r1, #325	@ 0x145
 8011230:	4804      	ldr	r0, [pc, #16]	@ (8011244 <__i2b+0x28>)
 8011232:	f001 fdfd 	bl	8012e30 <__assert_func>
 8011236:	2301      	movs	r3, #1
 8011238:	6144      	str	r4, [r0, #20]
 801123a:	6103      	str	r3, [r0, #16]
 801123c:	bd10      	pop	{r4, pc}
 801123e:	bf00      	nop
 8011240:	080148e5 	.word	0x080148e5
 8011244:	080148f6 	.word	0x080148f6

08011248 <__multiply>:
 8011248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801124c:	4617      	mov	r7, r2
 801124e:	690a      	ldr	r2, [r1, #16]
 8011250:	4689      	mov	r9, r1
 8011252:	b085      	sub	sp, #20
 8011254:	693b      	ldr	r3, [r7, #16]
 8011256:	429a      	cmp	r2, r3
 8011258:	bfa2      	ittt	ge
 801125a:	463b      	movge	r3, r7
 801125c:	460f      	movge	r7, r1
 801125e:	4699      	movge	r9, r3
 8011260:	693d      	ldr	r5, [r7, #16]
 8011262:	68bb      	ldr	r3, [r7, #8]
 8011264:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011268:	6879      	ldr	r1, [r7, #4]
 801126a:	eb05 060a 	add.w	r6, r5, sl
 801126e:	42b3      	cmp	r3, r6
 8011270:	bfb8      	it	lt
 8011272:	3101      	addlt	r1, #1
 8011274:	f7ff fe92 	bl	8010f9c <_Balloc>
 8011278:	b930      	cbnz	r0, 8011288 <__multiply+0x40>
 801127a:	4602      	mov	r2, r0
 801127c:	4b42      	ldr	r3, [pc, #264]	@ (8011388 <__multiply+0x140>)
 801127e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8011282:	4842      	ldr	r0, [pc, #264]	@ (801138c <__multiply+0x144>)
 8011284:	f001 fdd4 	bl	8012e30 <__assert_func>
 8011288:	f100 0414 	add.w	r4, r0, #20
 801128c:	2200      	movs	r2, #0
 801128e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8011292:	4623      	mov	r3, r4
 8011294:	4573      	cmp	r3, lr
 8011296:	d320      	bcc.n	80112da <__multiply+0x92>
 8011298:	f107 0814 	add.w	r8, r7, #20
 801129c:	f109 0114 	add.w	r1, r9, #20
 80112a0:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80112a4:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80112a8:	9302      	str	r3, [sp, #8]
 80112aa:	1beb      	subs	r3, r5, r7
 80112ac:	3715      	adds	r7, #21
 80112ae:	3b15      	subs	r3, #21
 80112b0:	f023 0303 	bic.w	r3, r3, #3
 80112b4:	3304      	adds	r3, #4
 80112b6:	42bd      	cmp	r5, r7
 80112b8:	bf38      	it	cc
 80112ba:	2304      	movcc	r3, #4
 80112bc:	9301      	str	r3, [sp, #4]
 80112be:	9b02      	ldr	r3, [sp, #8]
 80112c0:	9103      	str	r1, [sp, #12]
 80112c2:	428b      	cmp	r3, r1
 80112c4:	d80c      	bhi.n	80112e0 <__multiply+0x98>
 80112c6:	2e00      	cmp	r6, #0
 80112c8:	dd03      	ble.n	80112d2 <__multiply+0x8a>
 80112ca:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d057      	beq.n	8011382 <__multiply+0x13a>
 80112d2:	6106      	str	r6, [r0, #16]
 80112d4:	b005      	add	sp, #20
 80112d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112da:	f843 2b04 	str.w	r2, [r3], #4
 80112de:	e7d9      	b.n	8011294 <__multiply+0x4c>
 80112e0:	f8b1 a000 	ldrh.w	sl, [r1]
 80112e4:	f1ba 0f00 	cmp.w	sl, #0
 80112e8:	d021      	beq.n	801132e <__multiply+0xe6>
 80112ea:	46c4      	mov	ip, r8
 80112ec:	46a1      	mov	r9, r4
 80112ee:	2700      	movs	r7, #0
 80112f0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80112f4:	f8d9 3000 	ldr.w	r3, [r9]
 80112f8:	fa1f fb82 	uxth.w	fp, r2
 80112fc:	4565      	cmp	r5, ip
 80112fe:	b29b      	uxth	r3, r3
 8011300:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8011304:	fb0a 330b 	mla	r3, sl, fp, r3
 8011308:	443b      	add	r3, r7
 801130a:	f8d9 7000 	ldr.w	r7, [r9]
 801130e:	ea4f 4717 	mov.w	r7, r7, lsr #16
 8011312:	fb0a 7202 	mla	r2, sl, r2, r7
 8011316:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801131a:	b29b      	uxth	r3, r3
 801131c:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8011320:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011324:	f849 3b04 	str.w	r3, [r9], #4
 8011328:	d8e2      	bhi.n	80112f0 <__multiply+0xa8>
 801132a:	9b01      	ldr	r3, [sp, #4]
 801132c:	50e7      	str	r7, [r4, r3]
 801132e:	9b03      	ldr	r3, [sp, #12]
 8011330:	3104      	adds	r1, #4
 8011332:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011336:	f1b9 0f00 	cmp.w	r9, #0
 801133a:	d020      	beq.n	801137e <__multiply+0x136>
 801133c:	6823      	ldr	r3, [r4, #0]
 801133e:	4647      	mov	r7, r8
 8011340:	46a4      	mov	ip, r4
 8011342:	f04f 0a00 	mov.w	sl, #0
 8011346:	f8b7 b000 	ldrh.w	fp, [r7]
 801134a:	b29b      	uxth	r3, r3
 801134c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8011350:	fb09 220b 	mla	r2, r9, fp, r2
 8011354:	4452      	add	r2, sl
 8011356:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801135a:	f84c 3b04 	str.w	r3, [ip], #4
 801135e:	f857 3b04 	ldr.w	r3, [r7], #4
 8011362:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011366:	f8bc 3000 	ldrh.w	r3, [ip]
 801136a:	42bd      	cmp	r5, r7
 801136c:	fb09 330a 	mla	r3, r9, sl, r3
 8011370:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8011374:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011378:	d8e5      	bhi.n	8011346 <__multiply+0xfe>
 801137a:	9a01      	ldr	r2, [sp, #4]
 801137c:	50a3      	str	r3, [r4, r2]
 801137e:	3404      	adds	r4, #4
 8011380:	e79d      	b.n	80112be <__multiply+0x76>
 8011382:	3e01      	subs	r6, #1
 8011384:	e79f      	b.n	80112c6 <__multiply+0x7e>
 8011386:	bf00      	nop
 8011388:	080148e5 	.word	0x080148e5
 801138c:	080148f6 	.word	0x080148f6

08011390 <__pow5mult>:
 8011390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011394:	4615      	mov	r5, r2
 8011396:	f012 0203 	ands.w	r2, r2, #3
 801139a:	4607      	mov	r7, r0
 801139c:	460e      	mov	r6, r1
 801139e:	d007      	beq.n	80113b0 <__pow5mult+0x20>
 80113a0:	3a01      	subs	r2, #1
 80113a2:	4c25      	ldr	r4, [pc, #148]	@ (8011438 <__pow5mult+0xa8>)
 80113a4:	2300      	movs	r3, #0
 80113a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80113aa:	f7ff fe59 	bl	8011060 <__multadd>
 80113ae:	4606      	mov	r6, r0
 80113b0:	10ad      	asrs	r5, r5, #2
 80113b2:	d03d      	beq.n	8011430 <__pow5mult+0xa0>
 80113b4:	69fc      	ldr	r4, [r7, #28]
 80113b6:	b97c      	cbnz	r4, 80113d8 <__pow5mult+0x48>
 80113b8:	2010      	movs	r0, #16
 80113ba:	f7ff fd39 	bl	8010e30 <malloc>
 80113be:	4602      	mov	r2, r0
 80113c0:	61f8      	str	r0, [r7, #28]
 80113c2:	b928      	cbnz	r0, 80113d0 <__pow5mult+0x40>
 80113c4:	4b1d      	ldr	r3, [pc, #116]	@ (801143c <__pow5mult+0xac>)
 80113c6:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80113ca:	481d      	ldr	r0, [pc, #116]	@ (8011440 <__pow5mult+0xb0>)
 80113cc:	f001 fd30 	bl	8012e30 <__assert_func>
 80113d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80113d4:	6004      	str	r4, [r0, #0]
 80113d6:	60c4      	str	r4, [r0, #12]
 80113d8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80113dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80113e0:	b94c      	cbnz	r4, 80113f6 <__pow5mult+0x66>
 80113e2:	f240 2171 	movw	r1, #625	@ 0x271
 80113e6:	4638      	mov	r0, r7
 80113e8:	f7ff ff18 	bl	801121c <__i2b>
 80113ec:	2300      	movs	r3, #0
 80113ee:	4604      	mov	r4, r0
 80113f0:	f8c8 0008 	str.w	r0, [r8, #8]
 80113f4:	6003      	str	r3, [r0, #0]
 80113f6:	f04f 0900 	mov.w	r9, #0
 80113fa:	07eb      	lsls	r3, r5, #31
 80113fc:	d50a      	bpl.n	8011414 <__pow5mult+0x84>
 80113fe:	4631      	mov	r1, r6
 8011400:	4622      	mov	r2, r4
 8011402:	4638      	mov	r0, r7
 8011404:	f7ff ff20 	bl	8011248 <__multiply>
 8011408:	4680      	mov	r8, r0
 801140a:	4631      	mov	r1, r6
 801140c:	4638      	mov	r0, r7
 801140e:	4646      	mov	r6, r8
 8011410:	f7ff fe04 	bl	801101c <_Bfree>
 8011414:	106d      	asrs	r5, r5, #1
 8011416:	d00b      	beq.n	8011430 <__pow5mult+0xa0>
 8011418:	6820      	ldr	r0, [r4, #0]
 801141a:	b938      	cbnz	r0, 801142c <__pow5mult+0x9c>
 801141c:	4622      	mov	r2, r4
 801141e:	4621      	mov	r1, r4
 8011420:	4638      	mov	r0, r7
 8011422:	f7ff ff11 	bl	8011248 <__multiply>
 8011426:	6020      	str	r0, [r4, #0]
 8011428:	f8c0 9000 	str.w	r9, [r0]
 801142c:	4604      	mov	r4, r0
 801142e:	e7e4      	b.n	80113fa <__pow5mult+0x6a>
 8011430:	4630      	mov	r0, r6
 8011432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011436:	bf00      	nop
 8011438:	08014a08 	.word	0x08014a08
 801143c:	08014876 	.word	0x08014876
 8011440:	080148f6 	.word	0x080148f6

08011444 <__lshift>:
 8011444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011448:	460c      	mov	r4, r1
 801144a:	4607      	mov	r7, r0
 801144c:	4691      	mov	r9, r2
 801144e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011452:	6923      	ldr	r3, [r4, #16]
 8011454:	6849      	ldr	r1, [r1, #4]
 8011456:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801145a:	68a3      	ldr	r3, [r4, #8]
 801145c:	f108 0601 	add.w	r6, r8, #1
 8011460:	42b3      	cmp	r3, r6
 8011462:	db0b      	blt.n	801147c <__lshift+0x38>
 8011464:	4638      	mov	r0, r7
 8011466:	f7ff fd99 	bl	8010f9c <_Balloc>
 801146a:	4605      	mov	r5, r0
 801146c:	b948      	cbnz	r0, 8011482 <__lshift+0x3e>
 801146e:	4602      	mov	r2, r0
 8011470:	4b28      	ldr	r3, [pc, #160]	@ (8011514 <__lshift+0xd0>)
 8011472:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011476:	4828      	ldr	r0, [pc, #160]	@ (8011518 <__lshift+0xd4>)
 8011478:	f001 fcda 	bl	8012e30 <__assert_func>
 801147c:	3101      	adds	r1, #1
 801147e:	005b      	lsls	r3, r3, #1
 8011480:	e7ee      	b.n	8011460 <__lshift+0x1c>
 8011482:	2300      	movs	r3, #0
 8011484:	f100 0114 	add.w	r1, r0, #20
 8011488:	f100 0210 	add.w	r2, r0, #16
 801148c:	4618      	mov	r0, r3
 801148e:	4553      	cmp	r3, sl
 8011490:	db33      	blt.n	80114fa <__lshift+0xb6>
 8011492:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011496:	f104 0314 	add.w	r3, r4, #20
 801149a:	6920      	ldr	r0, [r4, #16]
 801149c:	f019 091f 	ands.w	r9, r9, #31
 80114a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80114a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80114a8:	d02b      	beq.n	8011502 <__lshift+0xbe>
 80114aa:	f1c9 0e20 	rsb	lr, r9, #32
 80114ae:	468a      	mov	sl, r1
 80114b0:	2200      	movs	r2, #0
 80114b2:	6818      	ldr	r0, [r3, #0]
 80114b4:	fa00 f009 	lsl.w	r0, r0, r9
 80114b8:	4310      	orrs	r0, r2
 80114ba:	f84a 0b04 	str.w	r0, [sl], #4
 80114be:	f853 2b04 	ldr.w	r2, [r3], #4
 80114c2:	459c      	cmp	ip, r3
 80114c4:	fa22 f20e 	lsr.w	r2, r2, lr
 80114c8:	d8f3      	bhi.n	80114b2 <__lshift+0x6e>
 80114ca:	ebac 0304 	sub.w	r3, ip, r4
 80114ce:	f104 0015 	add.w	r0, r4, #21
 80114d2:	3b15      	subs	r3, #21
 80114d4:	f023 0303 	bic.w	r3, r3, #3
 80114d8:	3304      	adds	r3, #4
 80114da:	4560      	cmp	r0, ip
 80114dc:	bf88      	it	hi
 80114de:	2304      	movhi	r3, #4
 80114e0:	50ca      	str	r2, [r1, r3]
 80114e2:	b10a      	cbz	r2, 80114e8 <__lshift+0xa4>
 80114e4:	f108 0602 	add.w	r6, r8, #2
 80114e8:	3e01      	subs	r6, #1
 80114ea:	4638      	mov	r0, r7
 80114ec:	4621      	mov	r1, r4
 80114ee:	612e      	str	r6, [r5, #16]
 80114f0:	f7ff fd94 	bl	801101c <_Bfree>
 80114f4:	4628      	mov	r0, r5
 80114f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80114fa:	3301      	adds	r3, #1
 80114fc:	f842 0f04 	str.w	r0, [r2, #4]!
 8011500:	e7c5      	b.n	801148e <__lshift+0x4a>
 8011502:	3904      	subs	r1, #4
 8011504:	f853 2b04 	ldr.w	r2, [r3], #4
 8011508:	459c      	cmp	ip, r3
 801150a:	f841 2f04 	str.w	r2, [r1, #4]!
 801150e:	d8f9      	bhi.n	8011504 <__lshift+0xc0>
 8011510:	e7ea      	b.n	80114e8 <__lshift+0xa4>
 8011512:	bf00      	nop
 8011514:	080148e5 	.word	0x080148e5
 8011518:	080148f6 	.word	0x080148f6

0801151c <__mcmp>:
 801151c:	4603      	mov	r3, r0
 801151e:	690a      	ldr	r2, [r1, #16]
 8011520:	6900      	ldr	r0, [r0, #16]
 8011522:	1a80      	subs	r0, r0, r2
 8011524:	b530      	push	{r4, r5, lr}
 8011526:	d10e      	bne.n	8011546 <__mcmp+0x2a>
 8011528:	3314      	adds	r3, #20
 801152a:	3114      	adds	r1, #20
 801152c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011530:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011534:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011538:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801153c:	4295      	cmp	r5, r2
 801153e:	d003      	beq.n	8011548 <__mcmp+0x2c>
 8011540:	d205      	bcs.n	801154e <__mcmp+0x32>
 8011542:	f04f 30ff 	mov.w	r0, #4294967295
 8011546:	bd30      	pop	{r4, r5, pc}
 8011548:	42a3      	cmp	r3, r4
 801154a:	d3f3      	bcc.n	8011534 <__mcmp+0x18>
 801154c:	e7fb      	b.n	8011546 <__mcmp+0x2a>
 801154e:	2001      	movs	r0, #1
 8011550:	e7f9      	b.n	8011546 <__mcmp+0x2a>
	...

08011554 <__mdiff>:
 8011554:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011558:	4689      	mov	r9, r1
 801155a:	4606      	mov	r6, r0
 801155c:	4611      	mov	r1, r2
 801155e:	4614      	mov	r4, r2
 8011560:	4648      	mov	r0, r9
 8011562:	f7ff ffdb 	bl	801151c <__mcmp>
 8011566:	1e05      	subs	r5, r0, #0
 8011568:	d112      	bne.n	8011590 <__mdiff+0x3c>
 801156a:	4629      	mov	r1, r5
 801156c:	4630      	mov	r0, r6
 801156e:	f7ff fd15 	bl	8010f9c <_Balloc>
 8011572:	4602      	mov	r2, r0
 8011574:	b928      	cbnz	r0, 8011582 <__mdiff+0x2e>
 8011576:	4b41      	ldr	r3, [pc, #260]	@ (801167c <__mdiff+0x128>)
 8011578:	f240 2137 	movw	r1, #567	@ 0x237
 801157c:	4840      	ldr	r0, [pc, #256]	@ (8011680 <__mdiff+0x12c>)
 801157e:	f001 fc57 	bl	8012e30 <__assert_func>
 8011582:	2301      	movs	r3, #1
 8011584:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011588:	4610      	mov	r0, r2
 801158a:	b003      	add	sp, #12
 801158c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011590:	bfbc      	itt	lt
 8011592:	464b      	movlt	r3, r9
 8011594:	46a1      	movlt	r9, r4
 8011596:	4630      	mov	r0, r6
 8011598:	bfb8      	it	lt
 801159a:	2501      	movlt	r5, #1
 801159c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80115a0:	bfb4      	ite	lt
 80115a2:	461c      	movlt	r4, r3
 80115a4:	2500      	movge	r5, #0
 80115a6:	f7ff fcf9 	bl	8010f9c <_Balloc>
 80115aa:	4602      	mov	r2, r0
 80115ac:	b918      	cbnz	r0, 80115b6 <__mdiff+0x62>
 80115ae:	4b33      	ldr	r3, [pc, #204]	@ (801167c <__mdiff+0x128>)
 80115b0:	f240 2145 	movw	r1, #581	@ 0x245
 80115b4:	e7e2      	b.n	801157c <__mdiff+0x28>
 80115b6:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80115ba:	f104 0e14 	add.w	lr, r4, #20
 80115be:	6926      	ldr	r6, [r4, #16]
 80115c0:	f100 0b14 	add.w	fp, r0, #20
 80115c4:	60c5      	str	r5, [r0, #12]
 80115c6:	f109 0514 	add.w	r5, r9, #20
 80115ca:	f109 0310 	add.w	r3, r9, #16
 80115ce:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80115d2:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80115d6:	46d9      	mov	r9, fp
 80115d8:	f04f 0c00 	mov.w	ip, #0
 80115dc:	9301      	str	r3, [sp, #4]
 80115de:	9b01      	ldr	r3, [sp, #4]
 80115e0:	f85e 0b04 	ldr.w	r0, [lr], #4
 80115e4:	f853 af04 	ldr.w	sl, [r3, #4]!
 80115e8:	4576      	cmp	r6, lr
 80115ea:	9301      	str	r3, [sp, #4]
 80115ec:	fa1f f38a 	uxth.w	r3, sl
 80115f0:	4619      	mov	r1, r3
 80115f2:	b283      	uxth	r3, r0
 80115f4:	ea4f 4010 	mov.w	r0, r0, lsr #16
 80115f8:	eba1 0303 	sub.w	r3, r1, r3
 80115fc:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8011600:	4463      	add	r3, ip
 8011602:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8011606:	b29b      	uxth	r3, r3
 8011608:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801160c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011610:	f849 3b04 	str.w	r3, [r9], #4
 8011614:	d8e3      	bhi.n	80115de <__mdiff+0x8a>
 8011616:	1b33      	subs	r3, r6, r4
 8011618:	3415      	adds	r4, #21
 801161a:	3b15      	subs	r3, #21
 801161c:	f023 0303 	bic.w	r3, r3, #3
 8011620:	3304      	adds	r3, #4
 8011622:	42a6      	cmp	r6, r4
 8011624:	bf38      	it	cc
 8011626:	2304      	movcc	r3, #4
 8011628:	441d      	add	r5, r3
 801162a:	445b      	add	r3, fp
 801162c:	462c      	mov	r4, r5
 801162e:	461e      	mov	r6, r3
 8011630:	4544      	cmp	r4, r8
 8011632:	d30e      	bcc.n	8011652 <__mdiff+0xfe>
 8011634:	f108 0103 	add.w	r1, r8, #3
 8011638:	1b49      	subs	r1, r1, r5
 801163a:	3d03      	subs	r5, #3
 801163c:	f021 0103 	bic.w	r1, r1, #3
 8011640:	45a8      	cmp	r8, r5
 8011642:	bf38      	it	cc
 8011644:	2100      	movcc	r1, #0
 8011646:	440b      	add	r3, r1
 8011648:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801164c:	b199      	cbz	r1, 8011676 <__mdiff+0x122>
 801164e:	6117      	str	r7, [r2, #16]
 8011650:	e79a      	b.n	8011588 <__mdiff+0x34>
 8011652:	f854 1b04 	ldr.w	r1, [r4], #4
 8011656:	46e6      	mov	lr, ip
 8011658:	fa1f fc81 	uxth.w	ip, r1
 801165c:	0c08      	lsrs	r0, r1, #16
 801165e:	4471      	add	r1, lr
 8011660:	44f4      	add	ip, lr
 8011662:	b289      	uxth	r1, r1
 8011664:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8011668:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801166c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011670:	f846 1b04 	str.w	r1, [r6], #4
 8011674:	e7dc      	b.n	8011630 <__mdiff+0xdc>
 8011676:	3f01      	subs	r7, #1
 8011678:	e7e6      	b.n	8011648 <__mdiff+0xf4>
 801167a:	bf00      	nop
 801167c:	080148e5 	.word	0x080148e5
 8011680:	080148f6 	.word	0x080148f6

08011684 <__ulp>:
 8011684:	b082      	sub	sp, #8
 8011686:	4b11      	ldr	r3, [pc, #68]	@ (80116cc <__ulp+0x48>)
 8011688:	ed8d 0b00 	vstr	d0, [sp]
 801168c:	9a01      	ldr	r2, [sp, #4]
 801168e:	4013      	ands	r3, r2
 8011690:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8011694:	2b00      	cmp	r3, #0
 8011696:	dc08      	bgt.n	80116aa <__ulp+0x26>
 8011698:	425b      	negs	r3, r3
 801169a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801169e:	ea4f 5223 	mov.w	r2, r3, asr #20
 80116a2:	da04      	bge.n	80116ae <__ulp+0x2a>
 80116a4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80116a8:	4113      	asrs	r3, r2
 80116aa:	2200      	movs	r2, #0
 80116ac:	e008      	b.n	80116c0 <__ulp+0x3c>
 80116ae:	f1a2 0314 	sub.w	r3, r2, #20
 80116b2:	2b1e      	cmp	r3, #30
 80116b4:	bfd6      	itet	le
 80116b6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80116ba:	2201      	movgt	r2, #1
 80116bc:	40da      	lsrle	r2, r3
 80116be:	2300      	movs	r3, #0
 80116c0:	4619      	mov	r1, r3
 80116c2:	4610      	mov	r0, r2
 80116c4:	ec41 0b10 	vmov	d0, r0, r1
 80116c8:	b002      	add	sp, #8
 80116ca:	4770      	bx	lr
 80116cc:	7ff00000 	.word	0x7ff00000

080116d0 <__b2d>:
 80116d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116d4:	6906      	ldr	r6, [r0, #16]
 80116d6:	f100 0814 	add.w	r8, r0, #20
 80116da:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80116de:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80116e2:	1f37      	subs	r7, r6, #4
 80116e4:	4610      	mov	r0, r2
 80116e6:	f7ff fd4d 	bl	8011184 <__hi0bits>
 80116ea:	f1c0 0320 	rsb	r3, r0, #32
 80116ee:	280a      	cmp	r0, #10
 80116f0:	600b      	str	r3, [r1, #0]
 80116f2:	491d      	ldr	r1, [pc, #116]	@ (8011768 <__b2d+0x98>)
 80116f4:	dc16      	bgt.n	8011724 <__b2d+0x54>
 80116f6:	f1c0 0c0b 	rsb	ip, r0, #11
 80116fa:	45b8      	cmp	r8, r7
 80116fc:	f100 0015 	add.w	r0, r0, #21
 8011700:	fa22 f30c 	lsr.w	r3, r2, ip
 8011704:	fa02 f000 	lsl.w	r0, r2, r0
 8011708:	ea43 0501 	orr.w	r5, r3, r1
 801170c:	bf34      	ite	cc
 801170e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011712:	2300      	movcs	r3, #0
 8011714:	fa23 f30c 	lsr.w	r3, r3, ip
 8011718:	4303      	orrs	r3, r0
 801171a:	461c      	mov	r4, r3
 801171c:	ec45 4b10 	vmov	d0, r4, r5
 8011720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011724:	45b8      	cmp	r8, r7
 8011726:	bf3a      	itte	cc
 8011728:	f1a6 0708 	subcc.w	r7, r6, #8
 801172c:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011730:	2300      	movcs	r3, #0
 8011732:	380b      	subs	r0, #11
 8011734:	d014      	beq.n	8011760 <__b2d+0x90>
 8011736:	f1c0 0120 	rsb	r1, r0, #32
 801173a:	4082      	lsls	r2, r0
 801173c:	4547      	cmp	r7, r8
 801173e:	fa23 f401 	lsr.w	r4, r3, r1
 8011742:	fa03 f300 	lsl.w	r3, r3, r0
 8011746:	ea42 0204 	orr.w	r2, r2, r4
 801174a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801174e:	bf8c      	ite	hi
 8011750:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8011754:	2200      	movls	r2, #0
 8011756:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801175a:	40ca      	lsrs	r2, r1
 801175c:	4313      	orrs	r3, r2
 801175e:	e7dc      	b.n	801171a <__b2d+0x4a>
 8011760:	ea42 0501 	orr.w	r5, r2, r1
 8011764:	e7d9      	b.n	801171a <__b2d+0x4a>
 8011766:	bf00      	nop
 8011768:	3ff00000 	.word	0x3ff00000

0801176c <__d2b>:
 801176c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011770:	460f      	mov	r7, r1
 8011772:	2101      	movs	r1, #1
 8011774:	4616      	mov	r6, r2
 8011776:	ec59 8b10 	vmov	r8, r9, d0
 801177a:	f7ff fc0f 	bl	8010f9c <_Balloc>
 801177e:	4604      	mov	r4, r0
 8011780:	b930      	cbnz	r0, 8011790 <__d2b+0x24>
 8011782:	4602      	mov	r2, r0
 8011784:	4b23      	ldr	r3, [pc, #140]	@ (8011814 <__d2b+0xa8>)
 8011786:	f240 310f 	movw	r1, #783	@ 0x30f
 801178a:	4823      	ldr	r0, [pc, #140]	@ (8011818 <__d2b+0xac>)
 801178c:	f001 fb50 	bl	8012e30 <__assert_func>
 8011790:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011794:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011798:	b10d      	cbz	r5, 801179e <__d2b+0x32>
 801179a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801179e:	9301      	str	r3, [sp, #4]
 80117a0:	f1b8 0300 	subs.w	r3, r8, #0
 80117a4:	d023      	beq.n	80117ee <__d2b+0x82>
 80117a6:	4668      	mov	r0, sp
 80117a8:	9300      	str	r3, [sp, #0]
 80117aa:	f7ff fd0a 	bl	80111c2 <__lo0bits>
 80117ae:	e9dd 1200 	ldrd	r1, r2, [sp]
 80117b2:	b1d0      	cbz	r0, 80117ea <__d2b+0x7e>
 80117b4:	f1c0 0320 	rsb	r3, r0, #32
 80117b8:	fa02 f303 	lsl.w	r3, r2, r3
 80117bc:	40c2      	lsrs	r2, r0
 80117be:	430b      	orrs	r3, r1
 80117c0:	9201      	str	r2, [sp, #4]
 80117c2:	6163      	str	r3, [r4, #20]
 80117c4:	9b01      	ldr	r3, [sp, #4]
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	61a3      	str	r3, [r4, #24]
 80117ca:	bf0c      	ite	eq
 80117cc:	2201      	moveq	r2, #1
 80117ce:	2202      	movne	r2, #2
 80117d0:	6122      	str	r2, [r4, #16]
 80117d2:	b1a5      	cbz	r5, 80117fe <__d2b+0x92>
 80117d4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80117d8:	4405      	add	r5, r0
 80117da:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80117de:	603d      	str	r5, [r7, #0]
 80117e0:	6030      	str	r0, [r6, #0]
 80117e2:	4620      	mov	r0, r4
 80117e4:	b003      	add	sp, #12
 80117e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80117ea:	6161      	str	r1, [r4, #20]
 80117ec:	e7ea      	b.n	80117c4 <__d2b+0x58>
 80117ee:	a801      	add	r0, sp, #4
 80117f0:	f7ff fce7 	bl	80111c2 <__lo0bits>
 80117f4:	9b01      	ldr	r3, [sp, #4]
 80117f6:	3020      	adds	r0, #32
 80117f8:	2201      	movs	r2, #1
 80117fa:	6163      	str	r3, [r4, #20]
 80117fc:	e7e8      	b.n	80117d0 <__d2b+0x64>
 80117fe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8011802:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011806:	6038      	str	r0, [r7, #0]
 8011808:	6918      	ldr	r0, [r3, #16]
 801180a:	f7ff fcbb 	bl	8011184 <__hi0bits>
 801180e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011812:	e7e5      	b.n	80117e0 <__d2b+0x74>
 8011814:	080148e5 	.word	0x080148e5
 8011818:	080148f6 	.word	0x080148f6

0801181c <__ratio>:
 801181c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011820:	b085      	sub	sp, #20
 8011822:	e9cd 1000 	strd	r1, r0, [sp]
 8011826:	a902      	add	r1, sp, #8
 8011828:	f7ff ff52 	bl	80116d0 <__b2d>
 801182c:	a903      	add	r1, sp, #12
 801182e:	9800      	ldr	r0, [sp, #0]
 8011830:	ec55 4b10 	vmov	r4, r5, d0
 8011834:	f7ff ff4c 	bl	80116d0 <__b2d>
 8011838:	9b01      	ldr	r3, [sp, #4]
 801183a:	462f      	mov	r7, r5
 801183c:	4620      	mov	r0, r4
 801183e:	6919      	ldr	r1, [r3, #16]
 8011840:	9b00      	ldr	r3, [sp, #0]
 8011842:	691b      	ldr	r3, [r3, #16]
 8011844:	1ac9      	subs	r1, r1, r3
 8011846:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801184a:	ec5b ab10 	vmov	sl, fp, d0
 801184e:	1a9b      	subs	r3, r3, r2
 8011850:	46d9      	mov	r9, fp
 8011852:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8011856:	2b00      	cmp	r3, #0
 8011858:	bfcd      	iteet	gt
 801185a:	462a      	movgt	r2, r5
 801185c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011860:	465a      	movle	r2, fp
 8011862:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011866:	bfd8      	it	le
 8011868:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801186c:	4652      	mov	r2, sl
 801186e:	4639      	mov	r1, r7
 8011870:	464b      	mov	r3, r9
 8011872:	f7f0 fd7d 	bl	8002370 <__aeabi_ddiv>
 8011876:	ec41 0b10 	vmov	d0, r0, r1
 801187a:	b005      	add	sp, #20
 801187c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011880 <__copybits>:
 8011880:	3901      	subs	r1, #1
 8011882:	f102 0314 	add.w	r3, r2, #20
 8011886:	1149      	asrs	r1, r1, #5
 8011888:	b570      	push	{r4, r5, r6, lr}
 801188a:	3101      	adds	r1, #1
 801188c:	6914      	ldr	r4, [r2, #16]
 801188e:	1f05      	subs	r5, r0, #4
 8011890:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011894:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011898:	42a3      	cmp	r3, r4
 801189a:	d30c      	bcc.n	80118b6 <__copybits+0x36>
 801189c:	1aa3      	subs	r3, r4, r2
 801189e:	3211      	adds	r2, #17
 80118a0:	3b11      	subs	r3, #17
 80118a2:	f023 0303 	bic.w	r3, r3, #3
 80118a6:	42a2      	cmp	r2, r4
 80118a8:	bf88      	it	hi
 80118aa:	2300      	movhi	r3, #0
 80118ac:	4418      	add	r0, r3
 80118ae:	2300      	movs	r3, #0
 80118b0:	4288      	cmp	r0, r1
 80118b2:	d305      	bcc.n	80118c0 <__copybits+0x40>
 80118b4:	bd70      	pop	{r4, r5, r6, pc}
 80118b6:	f853 6b04 	ldr.w	r6, [r3], #4
 80118ba:	f845 6f04 	str.w	r6, [r5, #4]!
 80118be:	e7eb      	b.n	8011898 <__copybits+0x18>
 80118c0:	f840 3b04 	str.w	r3, [r0], #4
 80118c4:	e7f4      	b.n	80118b0 <__copybits+0x30>

080118c6 <__any_on>:
 80118c6:	f100 0214 	add.w	r2, r0, #20
 80118ca:	114b      	asrs	r3, r1, #5
 80118cc:	6900      	ldr	r0, [r0, #16]
 80118ce:	4298      	cmp	r0, r3
 80118d0:	b510      	push	{r4, lr}
 80118d2:	db11      	blt.n	80118f8 <__any_on+0x32>
 80118d4:	dd0a      	ble.n	80118ec <__any_on+0x26>
 80118d6:	f011 011f 	ands.w	r1, r1, #31
 80118da:	d007      	beq.n	80118ec <__any_on+0x26>
 80118dc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80118e0:	fa24 f001 	lsr.w	r0, r4, r1
 80118e4:	fa00 f101 	lsl.w	r1, r0, r1
 80118e8:	428c      	cmp	r4, r1
 80118ea:	d10b      	bne.n	8011904 <__any_on+0x3e>
 80118ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80118f0:	4293      	cmp	r3, r2
 80118f2:	d803      	bhi.n	80118fc <__any_on+0x36>
 80118f4:	2000      	movs	r0, #0
 80118f6:	bd10      	pop	{r4, pc}
 80118f8:	4603      	mov	r3, r0
 80118fa:	e7f7      	b.n	80118ec <__any_on+0x26>
 80118fc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011900:	2900      	cmp	r1, #0
 8011902:	d0f5      	beq.n	80118f0 <__any_on+0x2a>
 8011904:	2001      	movs	r0, #1
 8011906:	e7f6      	b.n	80118f6 <__any_on+0x30>

08011908 <sulp>:
 8011908:	b570      	push	{r4, r5, r6, lr}
 801190a:	4604      	mov	r4, r0
 801190c:	460d      	mov	r5, r1
 801190e:	4616      	mov	r6, r2
 8011910:	ec45 4b10 	vmov	d0, r4, r5
 8011914:	f7ff feb6 	bl	8011684 <__ulp>
 8011918:	ec51 0b10 	vmov	r0, r1, d0
 801191c:	b17e      	cbz	r6, 801193e <sulp+0x36>
 801191e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8011922:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8011926:	2b00      	cmp	r3, #0
 8011928:	dd09      	ble.n	801193e <sulp+0x36>
 801192a:	051b      	lsls	r3, r3, #20
 801192c:	2400      	movs	r4, #0
 801192e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8011932:	4622      	mov	r2, r4
 8011934:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8011938:	462b      	mov	r3, r5
 801193a:	f7f0 fbef 	bl	800211c <__aeabi_dmul>
 801193e:	ec41 0b10 	vmov	d0, r0, r1
 8011942:	bd70      	pop	{r4, r5, r6, pc}
 8011944:	0000      	movs	r0, r0
	...

08011948 <_strtod_l>:
 8011948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801194c:	b09f      	sub	sp, #124	@ 0x7c
 801194e:	460c      	mov	r4, r1
 8011950:	f04f 0a00 	mov.w	sl, #0
 8011954:	f04f 0b00 	mov.w	fp, #0
 8011958:	9217      	str	r2, [sp, #92]	@ 0x5c
 801195a:	2200      	movs	r2, #0
 801195c:	9005      	str	r0, [sp, #20]
 801195e:	921a      	str	r2, [sp, #104]	@ 0x68
 8011960:	460a      	mov	r2, r1
 8011962:	9219      	str	r2, [sp, #100]	@ 0x64
 8011964:	7811      	ldrb	r1, [r2, #0]
 8011966:	292b      	cmp	r1, #43	@ 0x2b
 8011968:	d04a      	beq.n	8011a00 <_strtod_l+0xb8>
 801196a:	d838      	bhi.n	80119de <_strtod_l+0x96>
 801196c:	290d      	cmp	r1, #13
 801196e:	d832      	bhi.n	80119d6 <_strtod_l+0x8e>
 8011970:	2908      	cmp	r1, #8
 8011972:	d832      	bhi.n	80119da <_strtod_l+0x92>
 8011974:	2900      	cmp	r1, #0
 8011976:	d03b      	beq.n	80119f0 <_strtod_l+0xa8>
 8011978:	2200      	movs	r2, #0
 801197a:	920e      	str	r2, [sp, #56]	@ 0x38
 801197c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 801197e:	782a      	ldrb	r2, [r5, #0]
 8011980:	2a30      	cmp	r2, #48	@ 0x30
 8011982:	f040 80b2 	bne.w	8011aea <_strtod_l+0x1a2>
 8011986:	786a      	ldrb	r2, [r5, #1]
 8011988:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801198c:	2a58      	cmp	r2, #88	@ 0x58
 801198e:	d16e      	bne.n	8011a6e <_strtod_l+0x126>
 8011990:	9302      	str	r3, [sp, #8]
 8011992:	a919      	add	r1, sp, #100	@ 0x64
 8011994:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011996:	4a90      	ldr	r2, [pc, #576]	@ (8011bd8 <_strtod_l+0x290>)
 8011998:	9301      	str	r3, [sp, #4]
 801199a:	ab1a      	add	r3, sp, #104	@ 0x68
 801199c:	9805      	ldr	r0, [sp, #20]
 801199e:	9300      	str	r3, [sp, #0]
 80119a0:	ab1b      	add	r3, sp, #108	@ 0x6c
 80119a2:	f001 fadd 	bl	8012f60 <__gethex>
 80119a6:	f010 060f 	ands.w	r6, r0, #15
 80119aa:	4604      	mov	r4, r0
 80119ac:	d005      	beq.n	80119ba <_strtod_l+0x72>
 80119ae:	2e06      	cmp	r6, #6
 80119b0:	d128      	bne.n	8011a04 <_strtod_l+0xbc>
 80119b2:	3501      	adds	r5, #1
 80119b4:	2300      	movs	r3, #0
 80119b6:	9519      	str	r5, [sp, #100]	@ 0x64
 80119b8:	930e      	str	r3, [sp, #56]	@ 0x38
 80119ba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80119bc:	2b00      	cmp	r3, #0
 80119be:	f040 858e 	bne.w	80124de <_strtod_l+0xb96>
 80119c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80119c4:	b1cb      	cbz	r3, 80119fa <_strtod_l+0xb2>
 80119c6:	4652      	mov	r2, sl
 80119c8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80119cc:	ec43 2b10 	vmov	d0, r2, r3
 80119d0:	b01f      	add	sp, #124	@ 0x7c
 80119d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119d6:	2920      	cmp	r1, #32
 80119d8:	d1ce      	bne.n	8011978 <_strtod_l+0x30>
 80119da:	3201      	adds	r2, #1
 80119dc:	e7c1      	b.n	8011962 <_strtod_l+0x1a>
 80119de:	292d      	cmp	r1, #45	@ 0x2d
 80119e0:	d1ca      	bne.n	8011978 <_strtod_l+0x30>
 80119e2:	2101      	movs	r1, #1
 80119e4:	910e      	str	r1, [sp, #56]	@ 0x38
 80119e6:	1c51      	adds	r1, r2, #1
 80119e8:	9119      	str	r1, [sp, #100]	@ 0x64
 80119ea:	7852      	ldrb	r2, [r2, #1]
 80119ec:	2a00      	cmp	r2, #0
 80119ee:	d1c5      	bne.n	801197c <_strtod_l+0x34>
 80119f0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80119f2:	9419      	str	r4, [sp, #100]	@ 0x64
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	f040 8570 	bne.w	80124da <_strtod_l+0xb92>
 80119fa:	4652      	mov	r2, sl
 80119fc:	465b      	mov	r3, fp
 80119fe:	e7e5      	b.n	80119cc <_strtod_l+0x84>
 8011a00:	2100      	movs	r1, #0
 8011a02:	e7ef      	b.n	80119e4 <_strtod_l+0x9c>
 8011a04:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8011a06:	b13a      	cbz	r2, 8011a18 <_strtod_l+0xd0>
 8011a08:	2135      	movs	r1, #53	@ 0x35
 8011a0a:	a81c      	add	r0, sp, #112	@ 0x70
 8011a0c:	f7ff ff38 	bl	8011880 <__copybits>
 8011a10:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011a12:	9805      	ldr	r0, [sp, #20]
 8011a14:	f7ff fb02 	bl	801101c <_Bfree>
 8011a18:	3e01      	subs	r6, #1
 8011a1a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8011a1c:	2e04      	cmp	r6, #4
 8011a1e:	d806      	bhi.n	8011a2e <_strtod_l+0xe6>
 8011a20:	e8df f006 	tbb	[pc, r6]
 8011a24:	201d0314 	.word	0x201d0314
 8011a28:	14          	.byte	0x14
 8011a29:	00          	.byte	0x00
 8011a2a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8011a2e:	05e1      	lsls	r1, r4, #23
 8011a30:	bf48      	it	mi
 8011a32:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8011a36:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011a3a:	0d1b      	lsrs	r3, r3, #20
 8011a3c:	051b      	lsls	r3, r3, #20
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d1bb      	bne.n	80119ba <_strtod_l+0x72>
 8011a42:	f7fe faf7 	bl	8010034 <__errno>
 8011a46:	2322      	movs	r3, #34	@ 0x22
 8011a48:	6003      	str	r3, [r0, #0]
 8011a4a:	e7b6      	b.n	80119ba <_strtod_l+0x72>
 8011a4c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8011a50:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8011a54:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8011a58:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8011a5c:	e7e7      	b.n	8011a2e <_strtod_l+0xe6>
 8011a5e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8011be0 <_strtod_l+0x298>
 8011a62:	e7e4      	b.n	8011a2e <_strtod_l+0xe6>
 8011a64:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8011a68:	f04f 3aff 	mov.w	sl, #4294967295
 8011a6c:	e7df      	b.n	8011a2e <_strtod_l+0xe6>
 8011a6e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011a70:	1c5a      	adds	r2, r3, #1
 8011a72:	9219      	str	r2, [sp, #100]	@ 0x64
 8011a74:	785b      	ldrb	r3, [r3, #1]
 8011a76:	2b30      	cmp	r3, #48	@ 0x30
 8011a78:	d0f9      	beq.n	8011a6e <_strtod_l+0x126>
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d09d      	beq.n	80119ba <_strtod_l+0x72>
 8011a7e:	2301      	movs	r3, #1
 8011a80:	2700      	movs	r7, #0
 8011a82:	9308      	str	r3, [sp, #32]
 8011a84:	220a      	movs	r2, #10
 8011a86:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011a88:	46b9      	mov	r9, r7
 8011a8a:	970b      	str	r7, [sp, #44]	@ 0x2c
 8011a8c:	930c      	str	r3, [sp, #48]	@ 0x30
 8011a8e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8011a90:	7805      	ldrb	r5, [r0, #0]
 8011a92:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8011a96:	b2d9      	uxtb	r1, r3
 8011a98:	2909      	cmp	r1, #9
 8011a9a:	d928      	bls.n	8011aee <_strtod_l+0x1a6>
 8011a9c:	2201      	movs	r2, #1
 8011a9e:	494f      	ldr	r1, [pc, #316]	@ (8011bdc <_strtod_l+0x294>)
 8011aa0:	f001 f979 	bl	8012d96 <strncmp>
 8011aa4:	2800      	cmp	r0, #0
 8011aa6:	d032      	beq.n	8011b0e <_strtod_l+0x1c6>
 8011aa8:	2000      	movs	r0, #0
 8011aaa:	462a      	mov	r2, r5
 8011aac:	464d      	mov	r5, r9
 8011aae:	4603      	mov	r3, r0
 8011ab0:	900a      	str	r0, [sp, #40]	@ 0x28
 8011ab2:	2a65      	cmp	r2, #101	@ 0x65
 8011ab4:	d001      	beq.n	8011aba <_strtod_l+0x172>
 8011ab6:	2a45      	cmp	r2, #69	@ 0x45
 8011ab8:	d114      	bne.n	8011ae4 <_strtod_l+0x19c>
 8011aba:	b91d      	cbnz	r5, 8011ac4 <_strtod_l+0x17c>
 8011abc:	9a08      	ldr	r2, [sp, #32]
 8011abe:	4302      	orrs	r2, r0
 8011ac0:	d096      	beq.n	80119f0 <_strtod_l+0xa8>
 8011ac2:	2500      	movs	r5, #0
 8011ac4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8011ac6:	1c62      	adds	r2, r4, #1
 8011ac8:	9219      	str	r2, [sp, #100]	@ 0x64
 8011aca:	7862      	ldrb	r2, [r4, #1]
 8011acc:	2a2b      	cmp	r2, #43	@ 0x2b
 8011ace:	d079      	beq.n	8011bc4 <_strtod_l+0x27c>
 8011ad0:	2a2d      	cmp	r2, #45	@ 0x2d
 8011ad2:	d07d      	beq.n	8011bd0 <_strtod_l+0x288>
 8011ad4:	f04f 0c00 	mov.w	ip, #0
 8011ad8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8011adc:	2909      	cmp	r1, #9
 8011ade:	f240 8085 	bls.w	8011bec <_strtod_l+0x2a4>
 8011ae2:	9419      	str	r4, [sp, #100]	@ 0x64
 8011ae4:	f04f 0800 	mov.w	r8, #0
 8011ae8:	e0a5      	b.n	8011c36 <_strtod_l+0x2ee>
 8011aea:	2300      	movs	r3, #0
 8011aec:	e7c8      	b.n	8011a80 <_strtod_l+0x138>
 8011aee:	f1b9 0f08 	cmp.w	r9, #8
 8011af2:	f100 0001 	add.w	r0, r0, #1
 8011af6:	f109 0901 	add.w	r9, r9, #1
 8011afa:	bfd4      	ite	le
 8011afc:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8011afe:	fb02 3707 	mlagt	r7, r2, r7, r3
 8011b02:	9019      	str	r0, [sp, #100]	@ 0x64
 8011b04:	bfdc      	itt	le
 8011b06:	fb02 3301 	mlale	r3, r2, r1, r3
 8011b0a:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8011b0c:	e7bf      	b.n	8011a8e <_strtod_l+0x146>
 8011b0e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011b10:	1c5a      	adds	r2, r3, #1
 8011b12:	9219      	str	r2, [sp, #100]	@ 0x64
 8011b14:	785a      	ldrb	r2, [r3, #1]
 8011b16:	f1b9 0f00 	cmp.w	r9, #0
 8011b1a:	d03a      	beq.n	8011b92 <_strtod_l+0x24a>
 8011b1c:	464d      	mov	r5, r9
 8011b1e:	900a      	str	r0, [sp, #40]	@ 0x28
 8011b20:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8011b24:	2b09      	cmp	r3, #9
 8011b26:	d912      	bls.n	8011b4e <_strtod_l+0x206>
 8011b28:	2301      	movs	r3, #1
 8011b2a:	e7c2      	b.n	8011ab2 <_strtod_l+0x16a>
 8011b2c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011b2e:	3001      	adds	r0, #1
 8011b30:	1c5a      	adds	r2, r3, #1
 8011b32:	9219      	str	r2, [sp, #100]	@ 0x64
 8011b34:	785a      	ldrb	r2, [r3, #1]
 8011b36:	2a30      	cmp	r2, #48	@ 0x30
 8011b38:	d0f8      	beq.n	8011b2c <_strtod_l+0x1e4>
 8011b3a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8011b3e:	2b08      	cmp	r3, #8
 8011b40:	f200 84d2 	bhi.w	80124e8 <_strtod_l+0xba0>
 8011b44:	900a      	str	r0, [sp, #40]	@ 0x28
 8011b46:	2000      	movs	r0, #0
 8011b48:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011b4a:	4605      	mov	r5, r0
 8011b4c:	930c      	str	r3, [sp, #48]	@ 0x30
 8011b4e:	3a30      	subs	r2, #48	@ 0x30
 8011b50:	f100 0301 	add.w	r3, r0, #1
 8011b54:	d017      	beq.n	8011b86 <_strtod_l+0x23e>
 8011b56:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011b58:	462e      	mov	r6, r5
 8011b5a:	f04f 0e0a 	mov.w	lr, #10
 8011b5e:	4419      	add	r1, r3
 8011b60:	910a      	str	r1, [sp, #40]	@ 0x28
 8011b62:	1c71      	adds	r1, r6, #1
 8011b64:	eba1 0c05 	sub.w	ip, r1, r5
 8011b68:	4563      	cmp	r3, ip
 8011b6a:	dc14      	bgt.n	8011b96 <_strtod_l+0x24e>
 8011b6c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8011b70:	182b      	adds	r3, r5, r0
 8011b72:	3501      	adds	r5, #1
 8011b74:	2b08      	cmp	r3, #8
 8011b76:	4405      	add	r5, r0
 8011b78:	dc1a      	bgt.n	8011bb0 <_strtod_l+0x268>
 8011b7a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011b7c:	230a      	movs	r3, #10
 8011b7e:	fb03 2301 	mla	r3, r3, r1, r2
 8011b82:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011b84:	2300      	movs	r3, #0
 8011b86:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011b88:	4618      	mov	r0, r3
 8011b8a:	1c51      	adds	r1, r2, #1
 8011b8c:	9119      	str	r1, [sp, #100]	@ 0x64
 8011b8e:	7852      	ldrb	r2, [r2, #1]
 8011b90:	e7c6      	b.n	8011b20 <_strtod_l+0x1d8>
 8011b92:	4648      	mov	r0, r9
 8011b94:	e7cf      	b.n	8011b36 <_strtod_l+0x1ee>
 8011b96:	2e08      	cmp	r6, #8
 8011b98:	dc05      	bgt.n	8011ba6 <_strtod_l+0x25e>
 8011b9a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8011b9c:	fb0e f606 	mul.w	r6, lr, r6
 8011ba0:	960b      	str	r6, [sp, #44]	@ 0x2c
 8011ba2:	460e      	mov	r6, r1
 8011ba4:	e7dd      	b.n	8011b62 <_strtod_l+0x21a>
 8011ba6:	2910      	cmp	r1, #16
 8011ba8:	bfd8      	it	le
 8011baa:	fb0e f707 	mulle.w	r7, lr, r7
 8011bae:	e7f8      	b.n	8011ba2 <_strtod_l+0x25a>
 8011bb0:	2b0f      	cmp	r3, #15
 8011bb2:	bfdc      	itt	le
 8011bb4:	230a      	movle	r3, #10
 8011bb6:	fb03 2707 	mlale	r7, r3, r7, r2
 8011bba:	e7e3      	b.n	8011b84 <_strtod_l+0x23c>
 8011bbc:	2300      	movs	r3, #0
 8011bbe:	930a      	str	r3, [sp, #40]	@ 0x28
 8011bc0:	2301      	movs	r3, #1
 8011bc2:	e77b      	b.n	8011abc <_strtod_l+0x174>
 8011bc4:	f04f 0c00 	mov.w	ip, #0
 8011bc8:	1ca2      	adds	r2, r4, #2
 8011bca:	9219      	str	r2, [sp, #100]	@ 0x64
 8011bcc:	78a2      	ldrb	r2, [r4, #2]
 8011bce:	e783      	b.n	8011ad8 <_strtod_l+0x190>
 8011bd0:	f04f 0c01 	mov.w	ip, #1
 8011bd4:	e7f8      	b.n	8011bc8 <_strtod_l+0x280>
 8011bd6:	bf00      	nop
 8011bd8:	08014b1c 	.word	0x08014b1c
 8011bdc:	0801494f 	.word	0x0801494f
 8011be0:	7ff00000 	.word	0x7ff00000
 8011be4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011be6:	1c51      	adds	r1, r2, #1
 8011be8:	9119      	str	r1, [sp, #100]	@ 0x64
 8011bea:	7852      	ldrb	r2, [r2, #1]
 8011bec:	2a30      	cmp	r2, #48	@ 0x30
 8011bee:	d0f9      	beq.n	8011be4 <_strtod_l+0x29c>
 8011bf0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8011bf4:	2908      	cmp	r1, #8
 8011bf6:	f63f af75 	bhi.w	8011ae4 <_strtod_l+0x19c>
 8011bfa:	3a30      	subs	r2, #48	@ 0x30
 8011bfc:	f04f 080a 	mov.w	r8, #10
 8011c00:	9209      	str	r2, [sp, #36]	@ 0x24
 8011c02:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011c04:	920f      	str	r2, [sp, #60]	@ 0x3c
 8011c06:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011c08:	1c56      	adds	r6, r2, #1
 8011c0a:	9619      	str	r6, [sp, #100]	@ 0x64
 8011c0c:	7852      	ldrb	r2, [r2, #1]
 8011c0e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8011c12:	f1be 0f09 	cmp.w	lr, #9
 8011c16:	d939      	bls.n	8011c8c <_strtod_l+0x344>
 8011c18:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8011c1a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8011c1e:	1a76      	subs	r6, r6, r1
 8011c20:	2e08      	cmp	r6, #8
 8011c22:	dc03      	bgt.n	8011c2c <_strtod_l+0x2e4>
 8011c24:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011c26:	4588      	cmp	r8, r1
 8011c28:	bfa8      	it	ge
 8011c2a:	4688      	movge	r8, r1
 8011c2c:	f1bc 0f00 	cmp.w	ip, #0
 8011c30:	d001      	beq.n	8011c36 <_strtod_l+0x2ee>
 8011c32:	f1c8 0800 	rsb	r8, r8, #0
 8011c36:	2d00      	cmp	r5, #0
 8011c38:	d14e      	bne.n	8011cd8 <_strtod_l+0x390>
 8011c3a:	9908      	ldr	r1, [sp, #32]
 8011c3c:	4308      	orrs	r0, r1
 8011c3e:	f47f aebc 	bne.w	80119ba <_strtod_l+0x72>
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	f47f aed4 	bne.w	80119f0 <_strtod_l+0xa8>
 8011c48:	2a69      	cmp	r2, #105	@ 0x69
 8011c4a:	d028      	beq.n	8011c9e <_strtod_l+0x356>
 8011c4c:	dc25      	bgt.n	8011c9a <_strtod_l+0x352>
 8011c4e:	2a49      	cmp	r2, #73	@ 0x49
 8011c50:	d025      	beq.n	8011c9e <_strtod_l+0x356>
 8011c52:	2a4e      	cmp	r2, #78	@ 0x4e
 8011c54:	f47f aecc 	bne.w	80119f0 <_strtod_l+0xa8>
 8011c58:	499a      	ldr	r1, [pc, #616]	@ (8011ec4 <_strtod_l+0x57c>)
 8011c5a:	a819      	add	r0, sp, #100	@ 0x64
 8011c5c:	f001 fba0 	bl	80133a0 <__match>
 8011c60:	2800      	cmp	r0, #0
 8011c62:	f43f aec5 	beq.w	80119f0 <_strtod_l+0xa8>
 8011c66:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011c68:	781b      	ldrb	r3, [r3, #0]
 8011c6a:	2b28      	cmp	r3, #40	@ 0x28
 8011c6c:	d12e      	bne.n	8011ccc <_strtod_l+0x384>
 8011c6e:	aa1c      	add	r2, sp, #112	@ 0x70
 8011c70:	4995      	ldr	r1, [pc, #596]	@ (8011ec8 <_strtod_l+0x580>)
 8011c72:	a819      	add	r0, sp, #100	@ 0x64
 8011c74:	f001 fba8 	bl	80133c8 <__hexnan>
 8011c78:	2805      	cmp	r0, #5
 8011c7a:	d127      	bne.n	8011ccc <_strtod_l+0x384>
 8011c7c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011c7e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8011c82:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8011c86:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8011c8a:	e696      	b.n	80119ba <_strtod_l+0x72>
 8011c8c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011c8e:	fb08 2101 	mla	r1, r8, r1, r2
 8011c92:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8011c96:	9209      	str	r2, [sp, #36]	@ 0x24
 8011c98:	e7b5      	b.n	8011c06 <_strtod_l+0x2be>
 8011c9a:	2a6e      	cmp	r2, #110	@ 0x6e
 8011c9c:	e7da      	b.n	8011c54 <_strtod_l+0x30c>
 8011c9e:	498b      	ldr	r1, [pc, #556]	@ (8011ecc <_strtod_l+0x584>)
 8011ca0:	a819      	add	r0, sp, #100	@ 0x64
 8011ca2:	f001 fb7d 	bl	80133a0 <__match>
 8011ca6:	2800      	cmp	r0, #0
 8011ca8:	f43f aea2 	beq.w	80119f0 <_strtod_l+0xa8>
 8011cac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011cae:	a819      	add	r0, sp, #100	@ 0x64
 8011cb0:	4987      	ldr	r1, [pc, #540]	@ (8011ed0 <_strtod_l+0x588>)
 8011cb2:	3b01      	subs	r3, #1
 8011cb4:	9319      	str	r3, [sp, #100]	@ 0x64
 8011cb6:	f001 fb73 	bl	80133a0 <__match>
 8011cba:	b910      	cbnz	r0, 8011cc2 <_strtod_l+0x37a>
 8011cbc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011cbe:	3301      	adds	r3, #1
 8011cc0:	9319      	str	r3, [sp, #100]	@ 0x64
 8011cc2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8011ee0 <_strtod_l+0x598>
 8011cc6:	f04f 0a00 	mov.w	sl, #0
 8011cca:	e676      	b.n	80119ba <_strtod_l+0x72>
 8011ccc:	4881      	ldr	r0, [pc, #516]	@ (8011ed4 <_strtod_l+0x58c>)
 8011cce:	f001 f8a7 	bl	8012e20 <nan>
 8011cd2:	ec5b ab10 	vmov	sl, fp, d0
 8011cd6:	e670      	b.n	80119ba <_strtod_l+0x72>
 8011cd8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011cda:	f1b9 0f00 	cmp.w	r9, #0
 8011cde:	bf08      	it	eq
 8011ce0:	46a9      	moveq	r9, r5
 8011ce2:	2d10      	cmp	r5, #16
 8011ce4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8011ce6:	eba8 0303 	sub.w	r3, r8, r3
 8011cea:	462c      	mov	r4, r5
 8011cec:	bfa8      	it	ge
 8011cee:	2410      	movge	r4, #16
 8011cf0:	9309      	str	r3, [sp, #36]	@ 0x24
 8011cf2:	f7f0 f999 	bl	8002028 <__aeabi_ui2d>
 8011cf6:	2d09      	cmp	r5, #9
 8011cf8:	4682      	mov	sl, r0
 8011cfa:	468b      	mov	fp, r1
 8011cfc:	dc13      	bgt.n	8011d26 <_strtod_l+0x3de>
 8011cfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	f43f ae5a 	beq.w	80119ba <_strtod_l+0x72>
 8011d06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011d08:	dd78      	ble.n	8011dfc <_strtod_l+0x4b4>
 8011d0a:	2b16      	cmp	r3, #22
 8011d0c:	dc5f      	bgt.n	8011dce <_strtod_l+0x486>
 8011d0e:	4972      	ldr	r1, [pc, #456]	@ (8011ed8 <_strtod_l+0x590>)
 8011d10:	4652      	mov	r2, sl
 8011d12:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011d16:	465b      	mov	r3, fp
 8011d18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011d1c:	f7f0 f9fe 	bl	800211c <__aeabi_dmul>
 8011d20:	4682      	mov	sl, r0
 8011d22:	468b      	mov	fp, r1
 8011d24:	e649      	b.n	80119ba <_strtod_l+0x72>
 8011d26:	4b6c      	ldr	r3, [pc, #432]	@ (8011ed8 <_strtod_l+0x590>)
 8011d28:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011d2c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8011d30:	f7f0 f9f4 	bl	800211c <__aeabi_dmul>
 8011d34:	4682      	mov	sl, r0
 8011d36:	468b      	mov	fp, r1
 8011d38:	4638      	mov	r0, r7
 8011d3a:	f7f0 f975 	bl	8002028 <__aeabi_ui2d>
 8011d3e:	4602      	mov	r2, r0
 8011d40:	460b      	mov	r3, r1
 8011d42:	4650      	mov	r0, sl
 8011d44:	4659      	mov	r1, fp
 8011d46:	f7f0 f833 	bl	8001db0 <__adddf3>
 8011d4a:	2d0f      	cmp	r5, #15
 8011d4c:	4682      	mov	sl, r0
 8011d4e:	468b      	mov	fp, r1
 8011d50:	ddd5      	ble.n	8011cfe <_strtod_l+0x3b6>
 8011d52:	1b2c      	subs	r4, r5, r4
 8011d54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011d56:	441c      	add	r4, r3
 8011d58:	2c00      	cmp	r4, #0
 8011d5a:	f340 8093 	ble.w	8011e84 <_strtod_l+0x53c>
 8011d5e:	f014 030f 	ands.w	r3, r4, #15
 8011d62:	d00a      	beq.n	8011d7a <_strtod_l+0x432>
 8011d64:	495c      	ldr	r1, [pc, #368]	@ (8011ed8 <_strtod_l+0x590>)
 8011d66:	4652      	mov	r2, sl
 8011d68:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011d6c:	465b      	mov	r3, fp
 8011d6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011d72:	f7f0 f9d3 	bl	800211c <__aeabi_dmul>
 8011d76:	4682      	mov	sl, r0
 8011d78:	468b      	mov	fp, r1
 8011d7a:	f034 040f 	bics.w	r4, r4, #15
 8011d7e:	d073      	beq.n	8011e68 <_strtod_l+0x520>
 8011d80:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8011d84:	dd49      	ble.n	8011e1a <_strtod_l+0x4d2>
 8011d86:	2400      	movs	r4, #0
 8011d88:	46a0      	mov	r8, r4
 8011d8a:	46a1      	mov	r9, r4
 8011d8c:	940b      	str	r4, [sp, #44]	@ 0x2c
 8011d8e:	2322      	movs	r3, #34	@ 0x22
 8011d90:	9a05      	ldr	r2, [sp, #20]
 8011d92:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8011ee0 <_strtod_l+0x598>
 8011d96:	f04f 0a00 	mov.w	sl, #0
 8011d9a:	6013      	str	r3, [r2, #0]
 8011d9c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	f43f ae0b 	beq.w	80119ba <_strtod_l+0x72>
 8011da4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011da6:	9805      	ldr	r0, [sp, #20]
 8011da8:	f7ff f938 	bl	801101c <_Bfree>
 8011dac:	4649      	mov	r1, r9
 8011dae:	9805      	ldr	r0, [sp, #20]
 8011db0:	f7ff f934 	bl	801101c <_Bfree>
 8011db4:	4641      	mov	r1, r8
 8011db6:	9805      	ldr	r0, [sp, #20]
 8011db8:	f7ff f930 	bl	801101c <_Bfree>
 8011dbc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011dbe:	9805      	ldr	r0, [sp, #20]
 8011dc0:	f7ff f92c 	bl	801101c <_Bfree>
 8011dc4:	4621      	mov	r1, r4
 8011dc6:	9805      	ldr	r0, [sp, #20]
 8011dc8:	f7ff f928 	bl	801101c <_Bfree>
 8011dcc:	e5f5      	b.n	80119ba <_strtod_l+0x72>
 8011dce:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8011dd2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011dd4:	4293      	cmp	r3, r2
 8011dd6:	dbbc      	blt.n	8011d52 <_strtod_l+0x40a>
 8011dd8:	f1c5 050f 	rsb	r5, r5, #15
 8011ddc:	4c3e      	ldr	r4, [pc, #248]	@ (8011ed8 <_strtod_l+0x590>)
 8011dde:	4652      	mov	r2, sl
 8011de0:	465b      	mov	r3, fp
 8011de2:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8011de6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011dea:	f7f0 f997 	bl	800211c <__aeabi_dmul>
 8011dee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011df0:	1b5d      	subs	r5, r3, r5
 8011df2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8011df6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8011dfa:	e78f      	b.n	8011d1c <_strtod_l+0x3d4>
 8011dfc:	3316      	adds	r3, #22
 8011dfe:	dba8      	blt.n	8011d52 <_strtod_l+0x40a>
 8011e00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011e02:	4650      	mov	r0, sl
 8011e04:	4659      	mov	r1, fp
 8011e06:	eba3 0808 	sub.w	r8, r3, r8
 8011e0a:	4b33      	ldr	r3, [pc, #204]	@ (8011ed8 <_strtod_l+0x590>)
 8011e0c:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8011e10:	e9d8 2300 	ldrd	r2, r3, [r8]
 8011e14:	f7f0 faac 	bl	8002370 <__aeabi_ddiv>
 8011e18:	e782      	b.n	8011d20 <_strtod_l+0x3d8>
 8011e1a:	2300      	movs	r3, #0
 8011e1c:	1124      	asrs	r4, r4, #4
 8011e1e:	4650      	mov	r0, sl
 8011e20:	4659      	mov	r1, fp
 8011e22:	4f2e      	ldr	r7, [pc, #184]	@ (8011edc <_strtod_l+0x594>)
 8011e24:	461e      	mov	r6, r3
 8011e26:	2c01      	cmp	r4, #1
 8011e28:	dc21      	bgt.n	8011e6e <_strtod_l+0x526>
 8011e2a:	b10b      	cbz	r3, 8011e30 <_strtod_l+0x4e8>
 8011e2c:	4682      	mov	sl, r0
 8011e2e:	468b      	mov	fp, r1
 8011e30:	492a      	ldr	r1, [pc, #168]	@ (8011edc <_strtod_l+0x594>)
 8011e32:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8011e36:	4652      	mov	r2, sl
 8011e38:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8011e3c:	465b      	mov	r3, fp
 8011e3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011e42:	f7f0 f96b 	bl	800211c <__aeabi_dmul>
 8011e46:	4b26      	ldr	r3, [pc, #152]	@ (8011ee0 <_strtod_l+0x598>)
 8011e48:	460a      	mov	r2, r1
 8011e4a:	4682      	mov	sl, r0
 8011e4c:	400b      	ands	r3, r1
 8011e4e:	4925      	ldr	r1, [pc, #148]	@ (8011ee4 <_strtod_l+0x59c>)
 8011e50:	428b      	cmp	r3, r1
 8011e52:	d898      	bhi.n	8011d86 <_strtod_l+0x43e>
 8011e54:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8011e58:	428b      	cmp	r3, r1
 8011e5a:	bf86      	itte	hi
 8011e5c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8011ee8 <_strtod_l+0x5a0>
 8011e60:	f04f 3aff 	movhi.w	sl, #4294967295
 8011e64:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8011e68:	2300      	movs	r3, #0
 8011e6a:	9308      	str	r3, [sp, #32]
 8011e6c:	e076      	b.n	8011f5c <_strtod_l+0x614>
 8011e6e:	07e2      	lsls	r2, r4, #31
 8011e70:	d504      	bpl.n	8011e7c <_strtod_l+0x534>
 8011e72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011e76:	f7f0 f951 	bl	800211c <__aeabi_dmul>
 8011e7a:	2301      	movs	r3, #1
 8011e7c:	3601      	adds	r6, #1
 8011e7e:	1064      	asrs	r4, r4, #1
 8011e80:	3708      	adds	r7, #8
 8011e82:	e7d0      	b.n	8011e26 <_strtod_l+0x4de>
 8011e84:	d0f0      	beq.n	8011e68 <_strtod_l+0x520>
 8011e86:	4264      	negs	r4, r4
 8011e88:	f014 020f 	ands.w	r2, r4, #15
 8011e8c:	d00a      	beq.n	8011ea4 <_strtod_l+0x55c>
 8011e8e:	4b12      	ldr	r3, [pc, #72]	@ (8011ed8 <_strtod_l+0x590>)
 8011e90:	4650      	mov	r0, sl
 8011e92:	4659      	mov	r1, fp
 8011e94:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e9c:	f7f0 fa68 	bl	8002370 <__aeabi_ddiv>
 8011ea0:	4682      	mov	sl, r0
 8011ea2:	468b      	mov	fp, r1
 8011ea4:	1124      	asrs	r4, r4, #4
 8011ea6:	d0df      	beq.n	8011e68 <_strtod_l+0x520>
 8011ea8:	2c1f      	cmp	r4, #31
 8011eaa:	dd1f      	ble.n	8011eec <_strtod_l+0x5a4>
 8011eac:	2400      	movs	r4, #0
 8011eae:	46a0      	mov	r8, r4
 8011eb0:	46a1      	mov	r9, r4
 8011eb2:	940b      	str	r4, [sp, #44]	@ 0x2c
 8011eb4:	2322      	movs	r3, #34	@ 0x22
 8011eb6:	9a05      	ldr	r2, [sp, #20]
 8011eb8:	f04f 0a00 	mov.w	sl, #0
 8011ebc:	f04f 0b00 	mov.w	fp, #0
 8011ec0:	6013      	str	r3, [r2, #0]
 8011ec2:	e76b      	b.n	8011d9c <_strtod_l+0x454>
 8011ec4:	0801483d 	.word	0x0801483d
 8011ec8:	08014b08 	.word	0x08014b08
 8011ecc:	08014835 	.word	0x08014835
 8011ed0:	0801486c 	.word	0x0801486c
 8011ed4:	080149a5 	.word	0x080149a5
 8011ed8:	08014a40 	.word	0x08014a40
 8011edc:	08014a18 	.word	0x08014a18
 8011ee0:	7ff00000 	.word	0x7ff00000
 8011ee4:	7ca00000 	.word	0x7ca00000
 8011ee8:	7fefffff 	.word	0x7fefffff
 8011eec:	f014 0310 	ands.w	r3, r4, #16
 8011ef0:	4650      	mov	r0, sl
 8011ef2:	4659      	mov	r1, fp
 8011ef4:	4ea9      	ldr	r6, [pc, #676]	@ (801219c <_strtod_l+0x854>)
 8011ef6:	bf18      	it	ne
 8011ef8:	236a      	movne	r3, #106	@ 0x6a
 8011efa:	9308      	str	r3, [sp, #32]
 8011efc:	2300      	movs	r3, #0
 8011efe:	07e7      	lsls	r7, r4, #31
 8011f00:	d504      	bpl.n	8011f0c <_strtod_l+0x5c4>
 8011f02:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011f06:	f7f0 f909 	bl	800211c <__aeabi_dmul>
 8011f0a:	2301      	movs	r3, #1
 8011f0c:	1064      	asrs	r4, r4, #1
 8011f0e:	f106 0608 	add.w	r6, r6, #8
 8011f12:	d1f4      	bne.n	8011efe <_strtod_l+0x5b6>
 8011f14:	b10b      	cbz	r3, 8011f1a <_strtod_l+0x5d2>
 8011f16:	4682      	mov	sl, r0
 8011f18:	468b      	mov	fp, r1
 8011f1a:	9b08      	ldr	r3, [sp, #32]
 8011f1c:	b1b3      	cbz	r3, 8011f4c <_strtod_l+0x604>
 8011f1e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8011f22:	4659      	mov	r1, fp
 8011f24:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	dd0f      	ble.n	8011f4c <_strtod_l+0x604>
 8011f2c:	2b1f      	cmp	r3, #31
 8011f2e:	dd56      	ble.n	8011fde <_strtod_l+0x696>
 8011f30:	2b34      	cmp	r3, #52	@ 0x34
 8011f32:	f04f 0a00 	mov.w	sl, #0
 8011f36:	bfdb      	ittet	le
 8011f38:	f04f 33ff 	movle.w	r3, #4294967295
 8011f3c:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8011f40:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8011f44:	4093      	lslle	r3, r2
 8011f46:	bfd8      	it	le
 8011f48:	ea03 0b01 	andle.w	fp, r3, r1
 8011f4c:	2200      	movs	r2, #0
 8011f4e:	2300      	movs	r3, #0
 8011f50:	4650      	mov	r0, sl
 8011f52:	4659      	mov	r1, fp
 8011f54:	f7f0 fb4a 	bl	80025ec <__aeabi_dcmpeq>
 8011f58:	2800      	cmp	r0, #0
 8011f5a:	d1a7      	bne.n	8011eac <_strtod_l+0x564>
 8011f5c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011f5e:	464a      	mov	r2, r9
 8011f60:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011f62:	9300      	str	r3, [sp, #0]
 8011f64:	462b      	mov	r3, r5
 8011f66:	9805      	ldr	r0, [sp, #20]
 8011f68:	f7ff f8c2 	bl	80110f0 <__s2b>
 8011f6c:	900b      	str	r0, [sp, #44]	@ 0x2c
 8011f6e:	2800      	cmp	r0, #0
 8011f70:	f43f af09 	beq.w	8011d86 <_strtod_l+0x43e>
 8011f74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011f76:	2400      	movs	r4, #0
 8011f78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011f7a:	2a00      	cmp	r2, #0
 8011f7c:	eba3 0308 	sub.w	r3, r3, r8
 8011f80:	46a0      	mov	r8, r4
 8011f82:	bfa8      	it	ge
 8011f84:	2300      	movge	r3, #0
 8011f86:	9312      	str	r3, [sp, #72]	@ 0x48
 8011f88:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8011f8c:	9316      	str	r3, [sp, #88]	@ 0x58
 8011f8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011f90:	9805      	ldr	r0, [sp, #20]
 8011f92:	6859      	ldr	r1, [r3, #4]
 8011f94:	f7ff f802 	bl	8010f9c <_Balloc>
 8011f98:	4681      	mov	r9, r0
 8011f9a:	2800      	cmp	r0, #0
 8011f9c:	f43f aef7 	beq.w	8011d8e <_strtod_l+0x446>
 8011fa0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011fa2:	300c      	adds	r0, #12
 8011fa4:	691a      	ldr	r2, [r3, #16]
 8011fa6:	f103 010c 	add.w	r1, r3, #12
 8011faa:	3202      	adds	r2, #2
 8011fac:	0092      	lsls	r2, r2, #2
 8011fae:	f7fe f881 	bl	80100b4 <memcpy>
 8011fb2:	aa1c      	add	r2, sp, #112	@ 0x70
 8011fb4:	a91b      	add	r1, sp, #108	@ 0x6c
 8011fb6:	9805      	ldr	r0, [sp, #20]
 8011fb8:	ec4b ab10 	vmov	d0, sl, fp
 8011fbc:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8011fc0:	f7ff fbd4 	bl	801176c <__d2b>
 8011fc4:	901a      	str	r0, [sp, #104]	@ 0x68
 8011fc6:	2800      	cmp	r0, #0
 8011fc8:	f43f aee1 	beq.w	8011d8e <_strtod_l+0x446>
 8011fcc:	2101      	movs	r1, #1
 8011fce:	9805      	ldr	r0, [sp, #20]
 8011fd0:	f7ff f924 	bl	801121c <__i2b>
 8011fd4:	4680      	mov	r8, r0
 8011fd6:	b948      	cbnz	r0, 8011fec <_strtod_l+0x6a4>
 8011fd8:	f04f 0800 	mov.w	r8, #0
 8011fdc:	e6d7      	b.n	8011d8e <_strtod_l+0x446>
 8011fde:	f04f 32ff 	mov.w	r2, #4294967295
 8011fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8011fe6:	ea03 0a0a 	and.w	sl, r3, sl
 8011fea:	e7af      	b.n	8011f4c <_strtod_l+0x604>
 8011fec:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8011fee:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8011ff0:	2d00      	cmp	r5, #0
 8011ff2:	bfa9      	itett	ge
 8011ff4:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8011ff6:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8011ff8:	18ef      	addge	r7, r5, r3
 8011ffa:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8011ffc:	bfb8      	it	lt
 8011ffe:	1b5e      	sublt	r6, r3, r5
 8012000:	9b08      	ldr	r3, [sp, #32]
 8012002:	bfb8      	it	lt
 8012004:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8012006:	1aed      	subs	r5, r5, r3
 8012008:	4b65      	ldr	r3, [pc, #404]	@ (80121a0 <_strtod_l+0x858>)
 801200a:	4415      	add	r5, r2
 801200c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8012010:	3d01      	subs	r5, #1
 8012012:	429d      	cmp	r5, r3
 8012014:	da4f      	bge.n	80120b6 <_strtod_l+0x76e>
 8012016:	1b5b      	subs	r3, r3, r5
 8012018:	2101      	movs	r1, #1
 801201a:	2b1f      	cmp	r3, #31
 801201c:	eba2 0203 	sub.w	r2, r2, r3
 8012020:	dc3d      	bgt.n	801209e <_strtod_l+0x756>
 8012022:	fa01 f303 	lsl.w	r3, r1, r3
 8012026:	9313      	str	r3, [sp, #76]	@ 0x4c
 8012028:	2300      	movs	r3, #0
 801202a:	9310      	str	r3, [sp, #64]	@ 0x40
 801202c:	18bd      	adds	r5, r7, r2
 801202e:	9b08      	ldr	r3, [sp, #32]
 8012030:	4416      	add	r6, r2
 8012032:	42af      	cmp	r7, r5
 8012034:	441e      	add	r6, r3
 8012036:	463b      	mov	r3, r7
 8012038:	bfa8      	it	ge
 801203a:	462b      	movge	r3, r5
 801203c:	42b3      	cmp	r3, r6
 801203e:	bfa8      	it	ge
 8012040:	4633      	movge	r3, r6
 8012042:	2b00      	cmp	r3, #0
 8012044:	bfc2      	ittt	gt
 8012046:	1aed      	subgt	r5, r5, r3
 8012048:	1af6      	subgt	r6, r6, r3
 801204a:	1aff      	subgt	r7, r7, r3
 801204c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801204e:	2b00      	cmp	r3, #0
 8012050:	dd16      	ble.n	8012080 <_strtod_l+0x738>
 8012052:	4641      	mov	r1, r8
 8012054:	461a      	mov	r2, r3
 8012056:	9805      	ldr	r0, [sp, #20]
 8012058:	f7ff f99a 	bl	8011390 <__pow5mult>
 801205c:	4680      	mov	r8, r0
 801205e:	2800      	cmp	r0, #0
 8012060:	d0ba      	beq.n	8011fd8 <_strtod_l+0x690>
 8012062:	4601      	mov	r1, r0
 8012064:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8012066:	9805      	ldr	r0, [sp, #20]
 8012068:	f7ff f8ee 	bl	8011248 <__multiply>
 801206c:	900a      	str	r0, [sp, #40]	@ 0x28
 801206e:	2800      	cmp	r0, #0
 8012070:	f43f ae8d 	beq.w	8011d8e <_strtod_l+0x446>
 8012074:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012076:	9805      	ldr	r0, [sp, #20]
 8012078:	f7fe ffd0 	bl	801101c <_Bfree>
 801207c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801207e:	931a      	str	r3, [sp, #104]	@ 0x68
 8012080:	2d00      	cmp	r5, #0
 8012082:	dc1d      	bgt.n	80120c0 <_strtod_l+0x778>
 8012084:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012086:	2b00      	cmp	r3, #0
 8012088:	dd23      	ble.n	80120d2 <_strtod_l+0x78a>
 801208a:	4649      	mov	r1, r9
 801208c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801208e:	9805      	ldr	r0, [sp, #20]
 8012090:	f7ff f97e 	bl	8011390 <__pow5mult>
 8012094:	4681      	mov	r9, r0
 8012096:	b9e0      	cbnz	r0, 80120d2 <_strtod_l+0x78a>
 8012098:	f04f 0900 	mov.w	r9, #0
 801209c:	e677      	b.n	8011d8e <_strtod_l+0x446>
 801209e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80120a2:	9113      	str	r1, [sp, #76]	@ 0x4c
 80120a4:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80120a8:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80120ac:	35e2      	adds	r5, #226	@ 0xe2
 80120ae:	fa01 f305 	lsl.w	r3, r1, r5
 80120b2:	9310      	str	r3, [sp, #64]	@ 0x40
 80120b4:	e7ba      	b.n	801202c <_strtod_l+0x6e4>
 80120b6:	2300      	movs	r3, #0
 80120b8:	9310      	str	r3, [sp, #64]	@ 0x40
 80120ba:	2301      	movs	r3, #1
 80120bc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80120be:	e7b5      	b.n	801202c <_strtod_l+0x6e4>
 80120c0:	462a      	mov	r2, r5
 80120c2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80120c4:	9805      	ldr	r0, [sp, #20]
 80120c6:	f7ff f9bd 	bl	8011444 <__lshift>
 80120ca:	901a      	str	r0, [sp, #104]	@ 0x68
 80120cc:	2800      	cmp	r0, #0
 80120ce:	d1d9      	bne.n	8012084 <_strtod_l+0x73c>
 80120d0:	e65d      	b.n	8011d8e <_strtod_l+0x446>
 80120d2:	2e00      	cmp	r6, #0
 80120d4:	dd07      	ble.n	80120e6 <_strtod_l+0x79e>
 80120d6:	4649      	mov	r1, r9
 80120d8:	4632      	mov	r2, r6
 80120da:	9805      	ldr	r0, [sp, #20]
 80120dc:	f7ff f9b2 	bl	8011444 <__lshift>
 80120e0:	4681      	mov	r9, r0
 80120e2:	2800      	cmp	r0, #0
 80120e4:	d0d8      	beq.n	8012098 <_strtod_l+0x750>
 80120e6:	2f00      	cmp	r7, #0
 80120e8:	dd08      	ble.n	80120fc <_strtod_l+0x7b4>
 80120ea:	4641      	mov	r1, r8
 80120ec:	463a      	mov	r2, r7
 80120ee:	9805      	ldr	r0, [sp, #20]
 80120f0:	f7ff f9a8 	bl	8011444 <__lshift>
 80120f4:	4680      	mov	r8, r0
 80120f6:	2800      	cmp	r0, #0
 80120f8:	f43f ae49 	beq.w	8011d8e <_strtod_l+0x446>
 80120fc:	464a      	mov	r2, r9
 80120fe:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012100:	9805      	ldr	r0, [sp, #20]
 8012102:	f7ff fa27 	bl	8011554 <__mdiff>
 8012106:	4604      	mov	r4, r0
 8012108:	2800      	cmp	r0, #0
 801210a:	f43f ae40 	beq.w	8011d8e <_strtod_l+0x446>
 801210e:	68c3      	ldr	r3, [r0, #12]
 8012110:	4641      	mov	r1, r8
 8012112:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012114:	2300      	movs	r3, #0
 8012116:	60c3      	str	r3, [r0, #12]
 8012118:	f7ff fa00 	bl	801151c <__mcmp>
 801211c:	2800      	cmp	r0, #0
 801211e:	da45      	bge.n	80121ac <_strtod_l+0x864>
 8012120:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012122:	ea53 030a 	orrs.w	r3, r3, sl
 8012126:	d16b      	bne.n	8012200 <_strtod_l+0x8b8>
 8012128:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801212c:	2b00      	cmp	r3, #0
 801212e:	d167      	bne.n	8012200 <_strtod_l+0x8b8>
 8012130:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012134:	0d1b      	lsrs	r3, r3, #20
 8012136:	051b      	lsls	r3, r3, #20
 8012138:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801213c:	d960      	bls.n	8012200 <_strtod_l+0x8b8>
 801213e:	6963      	ldr	r3, [r4, #20]
 8012140:	b913      	cbnz	r3, 8012148 <_strtod_l+0x800>
 8012142:	6923      	ldr	r3, [r4, #16]
 8012144:	2b01      	cmp	r3, #1
 8012146:	dd5b      	ble.n	8012200 <_strtod_l+0x8b8>
 8012148:	4621      	mov	r1, r4
 801214a:	2201      	movs	r2, #1
 801214c:	9805      	ldr	r0, [sp, #20]
 801214e:	f7ff f979 	bl	8011444 <__lshift>
 8012152:	4641      	mov	r1, r8
 8012154:	4604      	mov	r4, r0
 8012156:	f7ff f9e1 	bl	801151c <__mcmp>
 801215a:	2800      	cmp	r0, #0
 801215c:	dd50      	ble.n	8012200 <_strtod_l+0x8b8>
 801215e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012162:	9a08      	ldr	r2, [sp, #32]
 8012164:	0d1b      	lsrs	r3, r3, #20
 8012166:	051b      	lsls	r3, r3, #20
 8012168:	2a00      	cmp	r2, #0
 801216a:	d06a      	beq.n	8012242 <_strtod_l+0x8fa>
 801216c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8012170:	d867      	bhi.n	8012242 <_strtod_l+0x8fa>
 8012172:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8012176:	f67f ae9d 	bls.w	8011eb4 <_strtod_l+0x56c>
 801217a:	4b0a      	ldr	r3, [pc, #40]	@ (80121a4 <_strtod_l+0x85c>)
 801217c:	4650      	mov	r0, sl
 801217e:	4659      	mov	r1, fp
 8012180:	2200      	movs	r2, #0
 8012182:	f7ef ffcb 	bl	800211c <__aeabi_dmul>
 8012186:	4b08      	ldr	r3, [pc, #32]	@ (80121a8 <_strtod_l+0x860>)
 8012188:	4682      	mov	sl, r0
 801218a:	468b      	mov	fp, r1
 801218c:	400b      	ands	r3, r1
 801218e:	2b00      	cmp	r3, #0
 8012190:	f47f ae08 	bne.w	8011da4 <_strtod_l+0x45c>
 8012194:	2322      	movs	r3, #34	@ 0x22
 8012196:	9a05      	ldr	r2, [sp, #20]
 8012198:	6013      	str	r3, [r2, #0]
 801219a:	e603      	b.n	8011da4 <_strtod_l+0x45c>
 801219c:	08014b30 	.word	0x08014b30
 80121a0:	fffffc02 	.word	0xfffffc02
 80121a4:	39500000 	.word	0x39500000
 80121a8:	7ff00000 	.word	0x7ff00000
 80121ac:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80121b0:	d165      	bne.n	801227e <_strtod_l+0x936>
 80121b2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80121b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80121b8:	b35a      	cbz	r2, 8012212 <_strtod_l+0x8ca>
 80121ba:	4a9f      	ldr	r2, [pc, #636]	@ (8012438 <_strtod_l+0xaf0>)
 80121bc:	4293      	cmp	r3, r2
 80121be:	d12b      	bne.n	8012218 <_strtod_l+0x8d0>
 80121c0:	9b08      	ldr	r3, [sp, #32]
 80121c2:	4651      	mov	r1, sl
 80121c4:	b303      	cbz	r3, 8012208 <_strtod_l+0x8c0>
 80121c6:	465a      	mov	r2, fp
 80121c8:	4b9c      	ldr	r3, [pc, #624]	@ (801243c <_strtod_l+0xaf4>)
 80121ca:	4013      	ands	r3, r2
 80121cc:	f04f 32ff 	mov.w	r2, #4294967295
 80121d0:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80121d4:	d81b      	bhi.n	801220e <_strtod_l+0x8c6>
 80121d6:	0d1b      	lsrs	r3, r3, #20
 80121d8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80121dc:	fa02 f303 	lsl.w	r3, r2, r3
 80121e0:	4299      	cmp	r1, r3
 80121e2:	d119      	bne.n	8012218 <_strtod_l+0x8d0>
 80121e4:	4b96      	ldr	r3, [pc, #600]	@ (8012440 <_strtod_l+0xaf8>)
 80121e6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80121e8:	429a      	cmp	r2, r3
 80121ea:	d102      	bne.n	80121f2 <_strtod_l+0x8aa>
 80121ec:	3101      	adds	r1, #1
 80121ee:	f43f adce 	beq.w	8011d8e <_strtod_l+0x446>
 80121f2:	4b92      	ldr	r3, [pc, #584]	@ (801243c <_strtod_l+0xaf4>)
 80121f4:	f04f 0a00 	mov.w	sl, #0
 80121f8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80121fa:	401a      	ands	r2, r3
 80121fc:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8012200:	9b08      	ldr	r3, [sp, #32]
 8012202:	2b00      	cmp	r3, #0
 8012204:	d1b9      	bne.n	801217a <_strtod_l+0x832>
 8012206:	e5cd      	b.n	8011da4 <_strtod_l+0x45c>
 8012208:	f04f 33ff 	mov.w	r3, #4294967295
 801220c:	e7e8      	b.n	80121e0 <_strtod_l+0x898>
 801220e:	4613      	mov	r3, r2
 8012210:	e7e6      	b.n	80121e0 <_strtod_l+0x898>
 8012212:	ea53 030a 	orrs.w	r3, r3, sl
 8012216:	d0a2      	beq.n	801215e <_strtod_l+0x816>
 8012218:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801221a:	b1db      	cbz	r3, 8012254 <_strtod_l+0x90c>
 801221c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801221e:	4213      	tst	r3, r2
 8012220:	d0ee      	beq.n	8012200 <_strtod_l+0x8b8>
 8012222:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012224:	4650      	mov	r0, sl
 8012226:	9a08      	ldr	r2, [sp, #32]
 8012228:	4659      	mov	r1, fp
 801222a:	b1bb      	cbz	r3, 801225c <_strtod_l+0x914>
 801222c:	f7ff fb6c 	bl	8011908 <sulp>
 8012230:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012234:	ec53 2b10 	vmov	r2, r3, d0
 8012238:	f7ef fdba 	bl	8001db0 <__adddf3>
 801223c:	4682      	mov	sl, r0
 801223e:	468b      	mov	fp, r1
 8012240:	e7de      	b.n	8012200 <_strtod_l+0x8b8>
 8012242:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8012246:	f04f 3aff 	mov.w	sl, #4294967295
 801224a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801224e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8012252:	e7d5      	b.n	8012200 <_strtod_l+0x8b8>
 8012254:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8012256:	ea13 0f0a 	tst.w	r3, sl
 801225a:	e7e1      	b.n	8012220 <_strtod_l+0x8d8>
 801225c:	f7ff fb54 	bl	8011908 <sulp>
 8012260:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012264:	ec53 2b10 	vmov	r2, r3, d0
 8012268:	f7ef fda0 	bl	8001dac <__aeabi_dsub>
 801226c:	2200      	movs	r2, #0
 801226e:	2300      	movs	r3, #0
 8012270:	4682      	mov	sl, r0
 8012272:	468b      	mov	fp, r1
 8012274:	f7f0 f9ba 	bl	80025ec <__aeabi_dcmpeq>
 8012278:	2800      	cmp	r0, #0
 801227a:	d0c1      	beq.n	8012200 <_strtod_l+0x8b8>
 801227c:	e61a      	b.n	8011eb4 <_strtod_l+0x56c>
 801227e:	4641      	mov	r1, r8
 8012280:	4620      	mov	r0, r4
 8012282:	f7ff facb 	bl	801181c <__ratio>
 8012286:	2200      	movs	r2, #0
 8012288:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801228c:	ec57 6b10 	vmov	r6, r7, d0
 8012290:	4630      	mov	r0, r6
 8012292:	4639      	mov	r1, r7
 8012294:	f7f0 f9be 	bl	8002614 <__aeabi_dcmple>
 8012298:	2800      	cmp	r0, #0
 801229a:	d06f      	beq.n	801237c <_strtod_l+0xa34>
 801229c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d17a      	bne.n	8012398 <_strtod_l+0xa50>
 80122a2:	f1ba 0f00 	cmp.w	sl, #0
 80122a6:	d158      	bne.n	801235a <_strtod_l+0xa12>
 80122a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80122aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	d15a      	bne.n	8012368 <_strtod_l+0xa20>
 80122b2:	2200      	movs	r2, #0
 80122b4:	4b63      	ldr	r3, [pc, #396]	@ (8012444 <_strtod_l+0xafc>)
 80122b6:	4630      	mov	r0, r6
 80122b8:	4639      	mov	r1, r7
 80122ba:	f7f0 f9a1 	bl	8002600 <__aeabi_dcmplt>
 80122be:	2800      	cmp	r0, #0
 80122c0:	d159      	bne.n	8012376 <_strtod_l+0xa2e>
 80122c2:	4630      	mov	r0, r6
 80122c4:	4639      	mov	r1, r7
 80122c6:	2200      	movs	r2, #0
 80122c8:	4b5f      	ldr	r3, [pc, #380]	@ (8012448 <_strtod_l+0xb00>)
 80122ca:	f7ef ff27 	bl	800211c <__aeabi_dmul>
 80122ce:	4606      	mov	r6, r0
 80122d0:	460f      	mov	r7, r1
 80122d2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80122d6:	9606      	str	r6, [sp, #24]
 80122d8:	9307      	str	r3, [sp, #28]
 80122da:	4d58      	ldr	r5, [pc, #352]	@ (801243c <_strtod_l+0xaf4>)
 80122dc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80122e0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80122e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80122e6:	401d      	ands	r5, r3
 80122e8:	4b58      	ldr	r3, [pc, #352]	@ (801244c <_strtod_l+0xb04>)
 80122ea:	429d      	cmp	r5, r3
 80122ec:	f040 80b2 	bne.w	8012454 <_strtod_l+0xb0c>
 80122f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80122f2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80122f6:	ec4b ab10 	vmov	d0, sl, fp
 80122fa:	f7ff f9c3 	bl	8011684 <__ulp>
 80122fe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012302:	ec51 0b10 	vmov	r0, r1, d0
 8012306:	f7ef ff09 	bl	800211c <__aeabi_dmul>
 801230a:	4652      	mov	r2, sl
 801230c:	465b      	mov	r3, fp
 801230e:	f7ef fd4f 	bl	8001db0 <__adddf3>
 8012312:	460b      	mov	r3, r1
 8012314:	4949      	ldr	r1, [pc, #292]	@ (801243c <_strtod_l+0xaf4>)
 8012316:	4682      	mov	sl, r0
 8012318:	4a4d      	ldr	r2, [pc, #308]	@ (8012450 <_strtod_l+0xb08>)
 801231a:	4019      	ands	r1, r3
 801231c:	4291      	cmp	r1, r2
 801231e:	d942      	bls.n	80123a6 <_strtod_l+0xa5e>
 8012320:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012322:	4b47      	ldr	r3, [pc, #284]	@ (8012440 <_strtod_l+0xaf8>)
 8012324:	429a      	cmp	r2, r3
 8012326:	d103      	bne.n	8012330 <_strtod_l+0x9e8>
 8012328:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801232a:	3301      	adds	r3, #1
 801232c:	f43f ad2f 	beq.w	8011d8e <_strtod_l+0x446>
 8012330:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8012440 <_strtod_l+0xaf8>
 8012334:	f04f 3aff 	mov.w	sl, #4294967295
 8012338:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801233a:	9805      	ldr	r0, [sp, #20]
 801233c:	f7fe fe6e 	bl	801101c <_Bfree>
 8012340:	4649      	mov	r1, r9
 8012342:	9805      	ldr	r0, [sp, #20]
 8012344:	f7fe fe6a 	bl	801101c <_Bfree>
 8012348:	4641      	mov	r1, r8
 801234a:	9805      	ldr	r0, [sp, #20]
 801234c:	f7fe fe66 	bl	801101c <_Bfree>
 8012350:	4621      	mov	r1, r4
 8012352:	9805      	ldr	r0, [sp, #20]
 8012354:	f7fe fe62 	bl	801101c <_Bfree>
 8012358:	e619      	b.n	8011f8e <_strtod_l+0x646>
 801235a:	f1ba 0f01 	cmp.w	sl, #1
 801235e:	d103      	bne.n	8012368 <_strtod_l+0xa20>
 8012360:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012362:	2b00      	cmp	r3, #0
 8012364:	f43f ada6 	beq.w	8011eb4 <_strtod_l+0x56c>
 8012368:	2600      	movs	r6, #0
 801236a:	4f36      	ldr	r7, [pc, #216]	@ (8012444 <_strtod_l+0xafc>)
 801236c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8012418 <_strtod_l+0xad0>
 8012370:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012374:	e7b1      	b.n	80122da <_strtod_l+0x992>
 8012376:	2600      	movs	r6, #0
 8012378:	4f33      	ldr	r7, [pc, #204]	@ (8012448 <_strtod_l+0xb00>)
 801237a:	e7aa      	b.n	80122d2 <_strtod_l+0x98a>
 801237c:	4b32      	ldr	r3, [pc, #200]	@ (8012448 <_strtod_l+0xb00>)
 801237e:	4630      	mov	r0, r6
 8012380:	4639      	mov	r1, r7
 8012382:	2200      	movs	r2, #0
 8012384:	f7ef feca 	bl	800211c <__aeabi_dmul>
 8012388:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801238a:	4606      	mov	r6, r0
 801238c:	460f      	mov	r7, r1
 801238e:	2b00      	cmp	r3, #0
 8012390:	d09f      	beq.n	80122d2 <_strtod_l+0x98a>
 8012392:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8012396:	e7a0      	b.n	80122da <_strtod_l+0x992>
 8012398:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8012420 <_strtod_l+0xad8>
 801239c:	ec57 6b17 	vmov	r6, r7, d7
 80123a0:	ed8d 7b06 	vstr	d7, [sp, #24]
 80123a4:	e799      	b.n	80122da <_strtod_l+0x992>
 80123a6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80123aa:	9b08      	ldr	r3, [sp, #32]
 80123ac:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d1c1      	bne.n	8012338 <_strtod_l+0x9f0>
 80123b4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80123b8:	0d1b      	lsrs	r3, r3, #20
 80123ba:	051b      	lsls	r3, r3, #20
 80123bc:	429d      	cmp	r5, r3
 80123be:	d1bb      	bne.n	8012338 <_strtod_l+0x9f0>
 80123c0:	4630      	mov	r0, r6
 80123c2:	4639      	mov	r1, r7
 80123c4:	f7f0 fa0a 	bl	80027dc <__aeabi_d2lz>
 80123c8:	f7ef fe7a 	bl	80020c0 <__aeabi_l2d>
 80123cc:	4602      	mov	r2, r0
 80123ce:	460b      	mov	r3, r1
 80123d0:	4630      	mov	r0, r6
 80123d2:	4639      	mov	r1, r7
 80123d4:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80123d8:	f7ef fce8 	bl	8001dac <__aeabi_dsub>
 80123dc:	460b      	mov	r3, r1
 80123de:	4602      	mov	r2, r0
 80123e0:	ea46 060a 	orr.w	r6, r6, sl
 80123e4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80123e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80123ea:	431e      	orrs	r6, r3
 80123ec:	d06f      	beq.n	80124ce <_strtod_l+0xb86>
 80123ee:	a30e      	add	r3, pc, #56	@ (adr r3, 8012428 <_strtod_l+0xae0>)
 80123f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123f4:	f7f0 f904 	bl	8002600 <__aeabi_dcmplt>
 80123f8:	2800      	cmp	r0, #0
 80123fa:	f47f acd3 	bne.w	8011da4 <_strtod_l+0x45c>
 80123fe:	a30c      	add	r3, pc, #48	@ (adr r3, 8012430 <_strtod_l+0xae8>)
 8012400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012404:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012408:	f7f0 f918 	bl	800263c <__aeabi_dcmpgt>
 801240c:	2800      	cmp	r0, #0
 801240e:	d093      	beq.n	8012338 <_strtod_l+0x9f0>
 8012410:	e4c8      	b.n	8011da4 <_strtod_l+0x45c>
 8012412:	bf00      	nop
 8012414:	f3af 8000 	nop.w
 8012418:	00000000 	.word	0x00000000
 801241c:	bff00000 	.word	0xbff00000
 8012420:	00000000 	.word	0x00000000
 8012424:	3ff00000 	.word	0x3ff00000
 8012428:	94a03595 	.word	0x94a03595
 801242c:	3fdfffff 	.word	0x3fdfffff
 8012430:	35afe535 	.word	0x35afe535
 8012434:	3fe00000 	.word	0x3fe00000
 8012438:	000fffff 	.word	0x000fffff
 801243c:	7ff00000 	.word	0x7ff00000
 8012440:	7fefffff 	.word	0x7fefffff
 8012444:	3ff00000 	.word	0x3ff00000
 8012448:	3fe00000 	.word	0x3fe00000
 801244c:	7fe00000 	.word	0x7fe00000
 8012450:	7c9fffff 	.word	0x7c9fffff
 8012454:	9b08      	ldr	r3, [sp, #32]
 8012456:	b323      	cbz	r3, 80124a2 <_strtod_l+0xb5a>
 8012458:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 801245c:	d821      	bhi.n	80124a2 <_strtod_l+0xb5a>
 801245e:	4630      	mov	r0, r6
 8012460:	4639      	mov	r1, r7
 8012462:	a327      	add	r3, pc, #156	@ (adr r3, 8012500 <_strtod_l+0xbb8>)
 8012464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012468:	f7f0 f8d4 	bl	8002614 <__aeabi_dcmple>
 801246c:	b1a0      	cbz	r0, 8012498 <_strtod_l+0xb50>
 801246e:	4639      	mov	r1, r7
 8012470:	4630      	mov	r0, r6
 8012472:	f7f0 f92b 	bl	80026cc <__aeabi_d2uiz>
 8012476:	2801      	cmp	r0, #1
 8012478:	bf38      	it	cc
 801247a:	2001      	movcc	r0, #1
 801247c:	f7ef fdd4 	bl	8002028 <__aeabi_ui2d>
 8012480:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012482:	4606      	mov	r6, r0
 8012484:	460f      	mov	r7, r1
 8012486:	b9fb      	cbnz	r3, 80124c8 <_strtod_l+0xb80>
 8012488:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801248c:	9014      	str	r0, [sp, #80]	@ 0x50
 801248e:	9315      	str	r3, [sp, #84]	@ 0x54
 8012490:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8012494:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8012498:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801249a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 801249e:	1b5b      	subs	r3, r3, r5
 80124a0:	9311      	str	r3, [sp, #68]	@ 0x44
 80124a2:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80124a6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80124aa:	f7ff f8eb 	bl	8011684 <__ulp>
 80124ae:	4650      	mov	r0, sl
 80124b0:	4659      	mov	r1, fp
 80124b2:	ec53 2b10 	vmov	r2, r3, d0
 80124b6:	f7ef fe31 	bl	800211c <__aeabi_dmul>
 80124ba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80124be:	f7ef fc77 	bl	8001db0 <__adddf3>
 80124c2:	4682      	mov	sl, r0
 80124c4:	468b      	mov	fp, r1
 80124c6:	e770      	b.n	80123aa <_strtod_l+0xa62>
 80124c8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80124cc:	e7e0      	b.n	8012490 <_strtod_l+0xb48>
 80124ce:	a30e      	add	r3, pc, #56	@ (adr r3, 8012508 <_strtod_l+0xbc0>)
 80124d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124d4:	f7f0 f894 	bl	8002600 <__aeabi_dcmplt>
 80124d8:	e798      	b.n	801240c <_strtod_l+0xac4>
 80124da:	2300      	movs	r3, #0
 80124dc:	930e      	str	r3, [sp, #56]	@ 0x38
 80124de:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80124e0:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80124e2:	6013      	str	r3, [r2, #0]
 80124e4:	f7ff ba6d 	b.w	80119c2 <_strtod_l+0x7a>
 80124e8:	2a65      	cmp	r2, #101	@ 0x65
 80124ea:	f43f ab67 	beq.w	8011bbc <_strtod_l+0x274>
 80124ee:	2a45      	cmp	r2, #69	@ 0x45
 80124f0:	f43f ab64 	beq.w	8011bbc <_strtod_l+0x274>
 80124f4:	2301      	movs	r3, #1
 80124f6:	f7ff bba0 	b.w	8011c3a <_strtod_l+0x2f2>
 80124fa:	bf00      	nop
 80124fc:	f3af 8000 	nop.w
 8012500:	ffc00000 	.word	0xffc00000
 8012504:	41dfffff 	.word	0x41dfffff
 8012508:	94a03595 	.word	0x94a03595
 801250c:	3fcfffff 	.word	0x3fcfffff

08012510 <_strtod_r>:
 8012510:	4b01      	ldr	r3, [pc, #4]	@ (8012518 <_strtod_r+0x8>)
 8012512:	f7ff ba19 	b.w	8011948 <_strtod_l>
 8012516:	bf00      	nop
 8012518:	2000008c 	.word	0x2000008c

0801251c <_strtol_l.isra.0>:
 801251c:	2b24      	cmp	r3, #36	@ 0x24
 801251e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012522:	4686      	mov	lr, r0
 8012524:	4690      	mov	r8, r2
 8012526:	d801      	bhi.n	801252c <_strtol_l.isra.0+0x10>
 8012528:	2b01      	cmp	r3, #1
 801252a:	d106      	bne.n	801253a <_strtol_l.isra.0+0x1e>
 801252c:	f7fd fd82 	bl	8010034 <__errno>
 8012530:	2316      	movs	r3, #22
 8012532:	6003      	str	r3, [r0, #0]
 8012534:	2000      	movs	r0, #0
 8012536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801253a:	460d      	mov	r5, r1
 801253c:	4833      	ldr	r0, [pc, #204]	@ (801260c <_strtol_l.isra.0+0xf0>)
 801253e:	462a      	mov	r2, r5
 8012540:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012544:	5d06      	ldrb	r6, [r0, r4]
 8012546:	f016 0608 	ands.w	r6, r6, #8
 801254a:	d1f8      	bne.n	801253e <_strtol_l.isra.0+0x22>
 801254c:	2c2d      	cmp	r4, #45	@ 0x2d
 801254e:	d110      	bne.n	8012572 <_strtol_l.isra.0+0x56>
 8012550:	782c      	ldrb	r4, [r5, #0]
 8012552:	2601      	movs	r6, #1
 8012554:	1c95      	adds	r5, r2, #2
 8012556:	f033 0210 	bics.w	r2, r3, #16
 801255a:	d115      	bne.n	8012588 <_strtol_l.isra.0+0x6c>
 801255c:	2c30      	cmp	r4, #48	@ 0x30
 801255e:	d10d      	bne.n	801257c <_strtol_l.isra.0+0x60>
 8012560:	782a      	ldrb	r2, [r5, #0]
 8012562:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8012566:	2a58      	cmp	r2, #88	@ 0x58
 8012568:	d108      	bne.n	801257c <_strtol_l.isra.0+0x60>
 801256a:	786c      	ldrb	r4, [r5, #1]
 801256c:	3502      	adds	r5, #2
 801256e:	2310      	movs	r3, #16
 8012570:	e00a      	b.n	8012588 <_strtol_l.isra.0+0x6c>
 8012572:	2c2b      	cmp	r4, #43	@ 0x2b
 8012574:	bf04      	itt	eq
 8012576:	782c      	ldrbeq	r4, [r5, #0]
 8012578:	1c95      	addeq	r5, r2, #2
 801257a:	e7ec      	b.n	8012556 <_strtol_l.isra.0+0x3a>
 801257c:	2b00      	cmp	r3, #0
 801257e:	d1f6      	bne.n	801256e <_strtol_l.isra.0+0x52>
 8012580:	2c30      	cmp	r4, #48	@ 0x30
 8012582:	bf14      	ite	ne
 8012584:	230a      	movne	r3, #10
 8012586:	2308      	moveq	r3, #8
 8012588:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801258c:	2200      	movs	r2, #0
 801258e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8012592:	4610      	mov	r0, r2
 8012594:	fbbc f9f3 	udiv	r9, ip, r3
 8012598:	fb03 ca19 	mls	sl, r3, r9, ip
 801259c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80125a0:	2f09      	cmp	r7, #9
 80125a2:	d80f      	bhi.n	80125c4 <_strtol_l.isra.0+0xa8>
 80125a4:	463c      	mov	r4, r7
 80125a6:	42a3      	cmp	r3, r4
 80125a8:	dd1b      	ble.n	80125e2 <_strtol_l.isra.0+0xc6>
 80125aa:	1c57      	adds	r7, r2, #1
 80125ac:	d007      	beq.n	80125be <_strtol_l.isra.0+0xa2>
 80125ae:	4581      	cmp	r9, r0
 80125b0:	d314      	bcc.n	80125dc <_strtol_l.isra.0+0xc0>
 80125b2:	d101      	bne.n	80125b8 <_strtol_l.isra.0+0x9c>
 80125b4:	45a2      	cmp	sl, r4
 80125b6:	db11      	blt.n	80125dc <_strtol_l.isra.0+0xc0>
 80125b8:	fb00 4003 	mla	r0, r0, r3, r4
 80125bc:	2201      	movs	r2, #1
 80125be:	f815 4b01 	ldrb.w	r4, [r5], #1
 80125c2:	e7eb      	b.n	801259c <_strtol_l.isra.0+0x80>
 80125c4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80125c8:	2f19      	cmp	r7, #25
 80125ca:	d801      	bhi.n	80125d0 <_strtol_l.isra.0+0xb4>
 80125cc:	3c37      	subs	r4, #55	@ 0x37
 80125ce:	e7ea      	b.n	80125a6 <_strtol_l.isra.0+0x8a>
 80125d0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80125d4:	2f19      	cmp	r7, #25
 80125d6:	d804      	bhi.n	80125e2 <_strtol_l.isra.0+0xc6>
 80125d8:	3c57      	subs	r4, #87	@ 0x57
 80125da:	e7e4      	b.n	80125a6 <_strtol_l.isra.0+0x8a>
 80125dc:	f04f 32ff 	mov.w	r2, #4294967295
 80125e0:	e7ed      	b.n	80125be <_strtol_l.isra.0+0xa2>
 80125e2:	1c53      	adds	r3, r2, #1
 80125e4:	d108      	bne.n	80125f8 <_strtol_l.isra.0+0xdc>
 80125e6:	2322      	movs	r3, #34	@ 0x22
 80125e8:	4660      	mov	r0, ip
 80125ea:	f8ce 3000 	str.w	r3, [lr]
 80125ee:	f1b8 0f00 	cmp.w	r8, #0
 80125f2:	d0a0      	beq.n	8012536 <_strtol_l.isra.0+0x1a>
 80125f4:	1e69      	subs	r1, r5, #1
 80125f6:	e006      	b.n	8012606 <_strtol_l.isra.0+0xea>
 80125f8:	b106      	cbz	r6, 80125fc <_strtol_l.isra.0+0xe0>
 80125fa:	4240      	negs	r0, r0
 80125fc:	f1b8 0f00 	cmp.w	r8, #0
 8012600:	d099      	beq.n	8012536 <_strtol_l.isra.0+0x1a>
 8012602:	2a00      	cmp	r2, #0
 8012604:	d1f6      	bne.n	80125f4 <_strtol_l.isra.0+0xd8>
 8012606:	f8c8 1000 	str.w	r1, [r8]
 801260a:	e794      	b.n	8012536 <_strtol_l.isra.0+0x1a>
 801260c:	08014b59 	.word	0x08014b59

08012610 <_strtol_r>:
 8012610:	f7ff bf84 	b.w	801251c <_strtol_l.isra.0>

08012614 <__ssputs_r>:
 8012614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012618:	461f      	mov	r7, r3
 801261a:	688e      	ldr	r6, [r1, #8]
 801261c:	4682      	mov	sl, r0
 801261e:	460c      	mov	r4, r1
 8012620:	42be      	cmp	r6, r7
 8012622:	4690      	mov	r8, r2
 8012624:	680b      	ldr	r3, [r1, #0]
 8012626:	d82d      	bhi.n	8012684 <__ssputs_r+0x70>
 8012628:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801262c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012630:	d026      	beq.n	8012680 <__ssputs_r+0x6c>
 8012632:	6965      	ldr	r5, [r4, #20]
 8012634:	6909      	ldr	r1, [r1, #16]
 8012636:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801263a:	eba3 0901 	sub.w	r9, r3, r1
 801263e:	1c7b      	adds	r3, r7, #1
 8012640:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012644:	444b      	add	r3, r9
 8012646:	106d      	asrs	r5, r5, #1
 8012648:	429d      	cmp	r5, r3
 801264a:	bf38      	it	cc
 801264c:	461d      	movcc	r5, r3
 801264e:	0553      	lsls	r3, r2, #21
 8012650:	d527      	bpl.n	80126a2 <__ssputs_r+0x8e>
 8012652:	4629      	mov	r1, r5
 8012654:	f7fe fc16 	bl	8010e84 <_malloc_r>
 8012658:	4606      	mov	r6, r0
 801265a:	b360      	cbz	r0, 80126b6 <__ssputs_r+0xa2>
 801265c:	464a      	mov	r2, r9
 801265e:	6921      	ldr	r1, [r4, #16]
 8012660:	f7fd fd28 	bl	80100b4 <memcpy>
 8012664:	89a3      	ldrh	r3, [r4, #12]
 8012666:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801266a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801266e:	81a3      	strh	r3, [r4, #12]
 8012670:	6126      	str	r6, [r4, #16]
 8012672:	444e      	add	r6, r9
 8012674:	6165      	str	r5, [r4, #20]
 8012676:	eba5 0509 	sub.w	r5, r5, r9
 801267a:	6026      	str	r6, [r4, #0]
 801267c:	463e      	mov	r6, r7
 801267e:	60a5      	str	r5, [r4, #8]
 8012680:	42be      	cmp	r6, r7
 8012682:	d900      	bls.n	8012686 <__ssputs_r+0x72>
 8012684:	463e      	mov	r6, r7
 8012686:	4632      	mov	r2, r6
 8012688:	4641      	mov	r1, r8
 801268a:	6820      	ldr	r0, [r4, #0]
 801268c:	f000 fb69 	bl	8012d62 <memmove>
 8012690:	68a3      	ldr	r3, [r4, #8]
 8012692:	2000      	movs	r0, #0
 8012694:	1b9b      	subs	r3, r3, r6
 8012696:	60a3      	str	r3, [r4, #8]
 8012698:	6823      	ldr	r3, [r4, #0]
 801269a:	4433      	add	r3, r6
 801269c:	6023      	str	r3, [r4, #0]
 801269e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80126a2:	462a      	mov	r2, r5
 80126a4:	f000 ff3d 	bl	8013522 <_realloc_r>
 80126a8:	4606      	mov	r6, r0
 80126aa:	2800      	cmp	r0, #0
 80126ac:	d1e0      	bne.n	8012670 <__ssputs_r+0x5c>
 80126ae:	6921      	ldr	r1, [r4, #16]
 80126b0:	4650      	mov	r0, sl
 80126b2:	f7fe fb73 	bl	8010d9c <_free_r>
 80126b6:	230c      	movs	r3, #12
 80126b8:	f04f 30ff 	mov.w	r0, #4294967295
 80126bc:	f8ca 3000 	str.w	r3, [sl]
 80126c0:	89a3      	ldrh	r3, [r4, #12]
 80126c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80126c6:	81a3      	strh	r3, [r4, #12]
 80126c8:	e7e9      	b.n	801269e <__ssputs_r+0x8a>
	...

080126cc <_svfiprintf_r>:
 80126cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126d0:	4698      	mov	r8, r3
 80126d2:	898b      	ldrh	r3, [r1, #12]
 80126d4:	b09d      	sub	sp, #116	@ 0x74
 80126d6:	4607      	mov	r7, r0
 80126d8:	061b      	lsls	r3, r3, #24
 80126da:	460d      	mov	r5, r1
 80126dc:	4614      	mov	r4, r2
 80126de:	d510      	bpl.n	8012702 <_svfiprintf_r+0x36>
 80126e0:	690b      	ldr	r3, [r1, #16]
 80126e2:	b973      	cbnz	r3, 8012702 <_svfiprintf_r+0x36>
 80126e4:	2140      	movs	r1, #64	@ 0x40
 80126e6:	f7fe fbcd 	bl	8010e84 <_malloc_r>
 80126ea:	6028      	str	r0, [r5, #0]
 80126ec:	6128      	str	r0, [r5, #16]
 80126ee:	b930      	cbnz	r0, 80126fe <_svfiprintf_r+0x32>
 80126f0:	230c      	movs	r3, #12
 80126f2:	603b      	str	r3, [r7, #0]
 80126f4:	f04f 30ff 	mov.w	r0, #4294967295
 80126f8:	b01d      	add	sp, #116	@ 0x74
 80126fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126fe:	2340      	movs	r3, #64	@ 0x40
 8012700:	616b      	str	r3, [r5, #20]
 8012702:	2300      	movs	r3, #0
 8012704:	f8cd 800c 	str.w	r8, [sp, #12]
 8012708:	f04f 0901 	mov.w	r9, #1
 801270c:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 80128b0 <_svfiprintf_r+0x1e4>
 8012710:	9309      	str	r3, [sp, #36]	@ 0x24
 8012712:	2320      	movs	r3, #32
 8012714:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012718:	2330      	movs	r3, #48	@ 0x30
 801271a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801271e:	4623      	mov	r3, r4
 8012720:	469a      	mov	sl, r3
 8012722:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012726:	b10a      	cbz	r2, 801272c <_svfiprintf_r+0x60>
 8012728:	2a25      	cmp	r2, #37	@ 0x25
 801272a:	d1f9      	bne.n	8012720 <_svfiprintf_r+0x54>
 801272c:	ebba 0b04 	subs.w	fp, sl, r4
 8012730:	d00b      	beq.n	801274a <_svfiprintf_r+0x7e>
 8012732:	465b      	mov	r3, fp
 8012734:	4622      	mov	r2, r4
 8012736:	4629      	mov	r1, r5
 8012738:	4638      	mov	r0, r7
 801273a:	f7ff ff6b 	bl	8012614 <__ssputs_r>
 801273e:	3001      	adds	r0, #1
 8012740:	f000 80a7 	beq.w	8012892 <_svfiprintf_r+0x1c6>
 8012744:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012746:	445a      	add	r2, fp
 8012748:	9209      	str	r2, [sp, #36]	@ 0x24
 801274a:	f89a 3000 	ldrb.w	r3, [sl]
 801274e:	2b00      	cmp	r3, #0
 8012750:	f000 809f 	beq.w	8012892 <_svfiprintf_r+0x1c6>
 8012754:	2300      	movs	r3, #0
 8012756:	f04f 32ff 	mov.w	r2, #4294967295
 801275a:	f10a 0a01 	add.w	sl, sl, #1
 801275e:	9304      	str	r3, [sp, #16]
 8012760:	9307      	str	r3, [sp, #28]
 8012762:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012766:	931a      	str	r3, [sp, #104]	@ 0x68
 8012768:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801276c:	4654      	mov	r4, sl
 801276e:	2205      	movs	r2, #5
 8012770:	484f      	ldr	r0, [pc, #316]	@ (80128b0 <_svfiprintf_r+0x1e4>)
 8012772:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012776:	f7fd fc8f 	bl	8010098 <memchr>
 801277a:	9a04      	ldr	r2, [sp, #16]
 801277c:	b9d8      	cbnz	r0, 80127b6 <_svfiprintf_r+0xea>
 801277e:	06d0      	lsls	r0, r2, #27
 8012780:	bf44      	itt	mi
 8012782:	2320      	movmi	r3, #32
 8012784:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012788:	0711      	lsls	r1, r2, #28
 801278a:	bf44      	itt	mi
 801278c:	232b      	movmi	r3, #43	@ 0x2b
 801278e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012792:	f89a 3000 	ldrb.w	r3, [sl]
 8012796:	2b2a      	cmp	r3, #42	@ 0x2a
 8012798:	d015      	beq.n	80127c6 <_svfiprintf_r+0xfa>
 801279a:	9a07      	ldr	r2, [sp, #28]
 801279c:	4654      	mov	r4, sl
 801279e:	2000      	movs	r0, #0
 80127a0:	f04f 0c0a 	mov.w	ip, #10
 80127a4:	4621      	mov	r1, r4
 80127a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80127aa:	3b30      	subs	r3, #48	@ 0x30
 80127ac:	2b09      	cmp	r3, #9
 80127ae:	d94b      	bls.n	8012848 <_svfiprintf_r+0x17c>
 80127b0:	b1b0      	cbz	r0, 80127e0 <_svfiprintf_r+0x114>
 80127b2:	9207      	str	r2, [sp, #28]
 80127b4:	e014      	b.n	80127e0 <_svfiprintf_r+0x114>
 80127b6:	eba0 0308 	sub.w	r3, r0, r8
 80127ba:	46a2      	mov	sl, r4
 80127bc:	fa09 f303 	lsl.w	r3, r9, r3
 80127c0:	4313      	orrs	r3, r2
 80127c2:	9304      	str	r3, [sp, #16]
 80127c4:	e7d2      	b.n	801276c <_svfiprintf_r+0xa0>
 80127c6:	9b03      	ldr	r3, [sp, #12]
 80127c8:	1d19      	adds	r1, r3, #4
 80127ca:	681b      	ldr	r3, [r3, #0]
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	9103      	str	r1, [sp, #12]
 80127d0:	bfbb      	ittet	lt
 80127d2:	425b      	neglt	r3, r3
 80127d4:	f042 0202 	orrlt.w	r2, r2, #2
 80127d8:	9307      	strge	r3, [sp, #28]
 80127da:	9307      	strlt	r3, [sp, #28]
 80127dc:	bfb8      	it	lt
 80127de:	9204      	strlt	r2, [sp, #16]
 80127e0:	7823      	ldrb	r3, [r4, #0]
 80127e2:	2b2e      	cmp	r3, #46	@ 0x2e
 80127e4:	d10a      	bne.n	80127fc <_svfiprintf_r+0x130>
 80127e6:	7863      	ldrb	r3, [r4, #1]
 80127e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80127ea:	d132      	bne.n	8012852 <_svfiprintf_r+0x186>
 80127ec:	9b03      	ldr	r3, [sp, #12]
 80127ee:	3402      	adds	r4, #2
 80127f0:	1d1a      	adds	r2, r3, #4
 80127f2:	681b      	ldr	r3, [r3, #0]
 80127f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80127f8:	9203      	str	r2, [sp, #12]
 80127fa:	9305      	str	r3, [sp, #20]
 80127fc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80128c0 <_svfiprintf_r+0x1f4>
 8012800:	2203      	movs	r2, #3
 8012802:	7821      	ldrb	r1, [r4, #0]
 8012804:	4650      	mov	r0, sl
 8012806:	f7fd fc47 	bl	8010098 <memchr>
 801280a:	b138      	cbz	r0, 801281c <_svfiprintf_r+0x150>
 801280c:	eba0 000a 	sub.w	r0, r0, sl
 8012810:	2240      	movs	r2, #64	@ 0x40
 8012812:	9b04      	ldr	r3, [sp, #16]
 8012814:	3401      	adds	r4, #1
 8012816:	4082      	lsls	r2, r0
 8012818:	4313      	orrs	r3, r2
 801281a:	9304      	str	r3, [sp, #16]
 801281c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012820:	2206      	movs	r2, #6
 8012822:	4824      	ldr	r0, [pc, #144]	@ (80128b4 <_svfiprintf_r+0x1e8>)
 8012824:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012828:	f7fd fc36 	bl	8010098 <memchr>
 801282c:	2800      	cmp	r0, #0
 801282e:	d036      	beq.n	801289e <_svfiprintf_r+0x1d2>
 8012830:	4b21      	ldr	r3, [pc, #132]	@ (80128b8 <_svfiprintf_r+0x1ec>)
 8012832:	bb1b      	cbnz	r3, 801287c <_svfiprintf_r+0x1b0>
 8012834:	9b03      	ldr	r3, [sp, #12]
 8012836:	3307      	adds	r3, #7
 8012838:	f023 0307 	bic.w	r3, r3, #7
 801283c:	3308      	adds	r3, #8
 801283e:	9303      	str	r3, [sp, #12]
 8012840:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012842:	4433      	add	r3, r6
 8012844:	9309      	str	r3, [sp, #36]	@ 0x24
 8012846:	e76a      	b.n	801271e <_svfiprintf_r+0x52>
 8012848:	fb0c 3202 	mla	r2, ip, r2, r3
 801284c:	460c      	mov	r4, r1
 801284e:	2001      	movs	r0, #1
 8012850:	e7a8      	b.n	80127a4 <_svfiprintf_r+0xd8>
 8012852:	2300      	movs	r3, #0
 8012854:	3401      	adds	r4, #1
 8012856:	f04f 0c0a 	mov.w	ip, #10
 801285a:	4619      	mov	r1, r3
 801285c:	9305      	str	r3, [sp, #20]
 801285e:	4620      	mov	r0, r4
 8012860:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012864:	3a30      	subs	r2, #48	@ 0x30
 8012866:	2a09      	cmp	r2, #9
 8012868:	d903      	bls.n	8012872 <_svfiprintf_r+0x1a6>
 801286a:	2b00      	cmp	r3, #0
 801286c:	d0c6      	beq.n	80127fc <_svfiprintf_r+0x130>
 801286e:	9105      	str	r1, [sp, #20]
 8012870:	e7c4      	b.n	80127fc <_svfiprintf_r+0x130>
 8012872:	fb0c 2101 	mla	r1, ip, r1, r2
 8012876:	4604      	mov	r4, r0
 8012878:	2301      	movs	r3, #1
 801287a:	e7f0      	b.n	801285e <_svfiprintf_r+0x192>
 801287c:	ab03      	add	r3, sp, #12
 801287e:	462a      	mov	r2, r5
 8012880:	a904      	add	r1, sp, #16
 8012882:	4638      	mov	r0, r7
 8012884:	9300      	str	r3, [sp, #0]
 8012886:	4b0d      	ldr	r3, [pc, #52]	@ (80128bc <_svfiprintf_r+0x1f0>)
 8012888:	f7fc fb7e 	bl	800ef88 <_printf_float>
 801288c:	1c42      	adds	r2, r0, #1
 801288e:	4606      	mov	r6, r0
 8012890:	d1d6      	bne.n	8012840 <_svfiprintf_r+0x174>
 8012892:	89ab      	ldrh	r3, [r5, #12]
 8012894:	065b      	lsls	r3, r3, #25
 8012896:	f53f af2d 	bmi.w	80126f4 <_svfiprintf_r+0x28>
 801289a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801289c:	e72c      	b.n	80126f8 <_svfiprintf_r+0x2c>
 801289e:	ab03      	add	r3, sp, #12
 80128a0:	462a      	mov	r2, r5
 80128a2:	a904      	add	r1, sp, #16
 80128a4:	4638      	mov	r0, r7
 80128a6:	9300      	str	r3, [sp, #0]
 80128a8:	4b04      	ldr	r3, [pc, #16]	@ (80128bc <_svfiprintf_r+0x1f0>)
 80128aa:	f7fc fe09 	bl	800f4c0 <_printf_i>
 80128ae:	e7ed      	b.n	801288c <_svfiprintf_r+0x1c0>
 80128b0:	08014951 	.word	0x08014951
 80128b4:	0801495b 	.word	0x0801495b
 80128b8:	0800ef89 	.word	0x0800ef89
 80128bc:	08012615 	.word	0x08012615
 80128c0:	08014957 	.word	0x08014957

080128c4 <__sfputc_r>:
 80128c4:	6893      	ldr	r3, [r2, #8]
 80128c6:	3b01      	subs	r3, #1
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	b410      	push	{r4}
 80128cc:	6093      	str	r3, [r2, #8]
 80128ce:	da08      	bge.n	80128e2 <__sfputc_r+0x1e>
 80128d0:	6994      	ldr	r4, [r2, #24]
 80128d2:	42a3      	cmp	r3, r4
 80128d4:	db01      	blt.n	80128da <__sfputc_r+0x16>
 80128d6:	290a      	cmp	r1, #10
 80128d8:	d103      	bne.n	80128e2 <__sfputc_r+0x1e>
 80128da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80128de:	f7fd bab2 	b.w	800fe46 <__swbuf_r>
 80128e2:	6813      	ldr	r3, [r2, #0]
 80128e4:	1c58      	adds	r0, r3, #1
 80128e6:	6010      	str	r0, [r2, #0]
 80128e8:	4608      	mov	r0, r1
 80128ea:	7019      	strb	r1, [r3, #0]
 80128ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80128f0:	4770      	bx	lr

080128f2 <__sfputs_r>:
 80128f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80128f4:	4606      	mov	r6, r0
 80128f6:	460f      	mov	r7, r1
 80128f8:	4614      	mov	r4, r2
 80128fa:	18d5      	adds	r5, r2, r3
 80128fc:	42ac      	cmp	r4, r5
 80128fe:	d101      	bne.n	8012904 <__sfputs_r+0x12>
 8012900:	2000      	movs	r0, #0
 8012902:	e007      	b.n	8012914 <__sfputs_r+0x22>
 8012904:	463a      	mov	r2, r7
 8012906:	f814 1b01 	ldrb.w	r1, [r4], #1
 801290a:	4630      	mov	r0, r6
 801290c:	f7ff ffda 	bl	80128c4 <__sfputc_r>
 8012910:	1c43      	adds	r3, r0, #1
 8012912:	d1f3      	bne.n	80128fc <__sfputs_r+0xa>
 8012914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012918 <_vfiprintf_r>:
 8012918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801291c:	460d      	mov	r5, r1
 801291e:	b09d      	sub	sp, #116	@ 0x74
 8012920:	4614      	mov	r4, r2
 8012922:	4698      	mov	r8, r3
 8012924:	4606      	mov	r6, r0
 8012926:	b118      	cbz	r0, 8012930 <_vfiprintf_r+0x18>
 8012928:	6a03      	ldr	r3, [r0, #32]
 801292a:	b90b      	cbnz	r3, 8012930 <_vfiprintf_r+0x18>
 801292c:	f7fd f980 	bl	800fc30 <__sinit>
 8012930:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012932:	07d9      	lsls	r1, r3, #31
 8012934:	d405      	bmi.n	8012942 <_vfiprintf_r+0x2a>
 8012936:	89ab      	ldrh	r3, [r5, #12]
 8012938:	059a      	lsls	r2, r3, #22
 801293a:	d402      	bmi.n	8012942 <_vfiprintf_r+0x2a>
 801293c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801293e:	f7fd fba4 	bl	801008a <__retarget_lock_acquire_recursive>
 8012942:	89ab      	ldrh	r3, [r5, #12]
 8012944:	071b      	lsls	r3, r3, #28
 8012946:	d501      	bpl.n	801294c <_vfiprintf_r+0x34>
 8012948:	692b      	ldr	r3, [r5, #16]
 801294a:	b99b      	cbnz	r3, 8012974 <_vfiprintf_r+0x5c>
 801294c:	4629      	mov	r1, r5
 801294e:	4630      	mov	r0, r6
 8012950:	f7fd fab8 	bl	800fec4 <__swsetup_r>
 8012954:	b170      	cbz	r0, 8012974 <_vfiprintf_r+0x5c>
 8012956:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012958:	07dc      	lsls	r4, r3, #31
 801295a:	d504      	bpl.n	8012966 <_vfiprintf_r+0x4e>
 801295c:	f04f 30ff 	mov.w	r0, #4294967295
 8012960:	b01d      	add	sp, #116	@ 0x74
 8012962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012966:	89ab      	ldrh	r3, [r5, #12]
 8012968:	0598      	lsls	r0, r3, #22
 801296a:	d4f7      	bmi.n	801295c <_vfiprintf_r+0x44>
 801296c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801296e:	f7fd fb8d 	bl	801008c <__retarget_lock_release_recursive>
 8012972:	e7f3      	b.n	801295c <_vfiprintf_r+0x44>
 8012974:	2300      	movs	r3, #0
 8012976:	f8cd 800c 	str.w	r8, [sp, #12]
 801297a:	f04f 0901 	mov.w	r9, #1
 801297e:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8012b34 <_vfiprintf_r+0x21c>
 8012982:	9309      	str	r3, [sp, #36]	@ 0x24
 8012984:	2320      	movs	r3, #32
 8012986:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801298a:	2330      	movs	r3, #48	@ 0x30
 801298c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012990:	4623      	mov	r3, r4
 8012992:	469a      	mov	sl, r3
 8012994:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012998:	b10a      	cbz	r2, 801299e <_vfiprintf_r+0x86>
 801299a:	2a25      	cmp	r2, #37	@ 0x25
 801299c:	d1f9      	bne.n	8012992 <_vfiprintf_r+0x7a>
 801299e:	ebba 0b04 	subs.w	fp, sl, r4
 80129a2:	d00b      	beq.n	80129bc <_vfiprintf_r+0xa4>
 80129a4:	465b      	mov	r3, fp
 80129a6:	4622      	mov	r2, r4
 80129a8:	4629      	mov	r1, r5
 80129aa:	4630      	mov	r0, r6
 80129ac:	f7ff ffa1 	bl	80128f2 <__sfputs_r>
 80129b0:	3001      	adds	r0, #1
 80129b2:	f000 80a7 	beq.w	8012b04 <_vfiprintf_r+0x1ec>
 80129b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80129b8:	445a      	add	r2, fp
 80129ba:	9209      	str	r2, [sp, #36]	@ 0x24
 80129bc:	f89a 3000 	ldrb.w	r3, [sl]
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	f000 809f 	beq.w	8012b04 <_vfiprintf_r+0x1ec>
 80129c6:	2300      	movs	r3, #0
 80129c8:	f04f 32ff 	mov.w	r2, #4294967295
 80129cc:	f10a 0a01 	add.w	sl, sl, #1
 80129d0:	9304      	str	r3, [sp, #16]
 80129d2:	9307      	str	r3, [sp, #28]
 80129d4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80129d8:	931a      	str	r3, [sp, #104]	@ 0x68
 80129da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80129de:	4654      	mov	r4, sl
 80129e0:	2205      	movs	r2, #5
 80129e2:	4854      	ldr	r0, [pc, #336]	@ (8012b34 <_vfiprintf_r+0x21c>)
 80129e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80129e8:	f7fd fb56 	bl	8010098 <memchr>
 80129ec:	9a04      	ldr	r2, [sp, #16]
 80129ee:	b9d8      	cbnz	r0, 8012a28 <_vfiprintf_r+0x110>
 80129f0:	06d1      	lsls	r1, r2, #27
 80129f2:	bf44      	itt	mi
 80129f4:	2320      	movmi	r3, #32
 80129f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80129fa:	0713      	lsls	r3, r2, #28
 80129fc:	bf44      	itt	mi
 80129fe:	232b      	movmi	r3, #43	@ 0x2b
 8012a00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012a04:	f89a 3000 	ldrb.w	r3, [sl]
 8012a08:	2b2a      	cmp	r3, #42	@ 0x2a
 8012a0a:	d015      	beq.n	8012a38 <_vfiprintf_r+0x120>
 8012a0c:	9a07      	ldr	r2, [sp, #28]
 8012a0e:	4654      	mov	r4, sl
 8012a10:	2000      	movs	r0, #0
 8012a12:	f04f 0c0a 	mov.w	ip, #10
 8012a16:	4621      	mov	r1, r4
 8012a18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012a1c:	3b30      	subs	r3, #48	@ 0x30
 8012a1e:	2b09      	cmp	r3, #9
 8012a20:	d94b      	bls.n	8012aba <_vfiprintf_r+0x1a2>
 8012a22:	b1b0      	cbz	r0, 8012a52 <_vfiprintf_r+0x13a>
 8012a24:	9207      	str	r2, [sp, #28]
 8012a26:	e014      	b.n	8012a52 <_vfiprintf_r+0x13a>
 8012a28:	eba0 0308 	sub.w	r3, r0, r8
 8012a2c:	46a2      	mov	sl, r4
 8012a2e:	fa09 f303 	lsl.w	r3, r9, r3
 8012a32:	4313      	orrs	r3, r2
 8012a34:	9304      	str	r3, [sp, #16]
 8012a36:	e7d2      	b.n	80129de <_vfiprintf_r+0xc6>
 8012a38:	9b03      	ldr	r3, [sp, #12]
 8012a3a:	1d19      	adds	r1, r3, #4
 8012a3c:	681b      	ldr	r3, [r3, #0]
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	9103      	str	r1, [sp, #12]
 8012a42:	bfbb      	ittet	lt
 8012a44:	425b      	neglt	r3, r3
 8012a46:	f042 0202 	orrlt.w	r2, r2, #2
 8012a4a:	9307      	strge	r3, [sp, #28]
 8012a4c:	9307      	strlt	r3, [sp, #28]
 8012a4e:	bfb8      	it	lt
 8012a50:	9204      	strlt	r2, [sp, #16]
 8012a52:	7823      	ldrb	r3, [r4, #0]
 8012a54:	2b2e      	cmp	r3, #46	@ 0x2e
 8012a56:	d10a      	bne.n	8012a6e <_vfiprintf_r+0x156>
 8012a58:	7863      	ldrb	r3, [r4, #1]
 8012a5a:	2b2a      	cmp	r3, #42	@ 0x2a
 8012a5c:	d132      	bne.n	8012ac4 <_vfiprintf_r+0x1ac>
 8012a5e:	9b03      	ldr	r3, [sp, #12]
 8012a60:	3402      	adds	r4, #2
 8012a62:	1d1a      	adds	r2, r3, #4
 8012a64:	681b      	ldr	r3, [r3, #0]
 8012a66:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012a6a:	9203      	str	r2, [sp, #12]
 8012a6c:	9305      	str	r3, [sp, #20]
 8012a6e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012b44 <_vfiprintf_r+0x22c>
 8012a72:	2203      	movs	r2, #3
 8012a74:	7821      	ldrb	r1, [r4, #0]
 8012a76:	4650      	mov	r0, sl
 8012a78:	f7fd fb0e 	bl	8010098 <memchr>
 8012a7c:	b138      	cbz	r0, 8012a8e <_vfiprintf_r+0x176>
 8012a7e:	eba0 000a 	sub.w	r0, r0, sl
 8012a82:	2240      	movs	r2, #64	@ 0x40
 8012a84:	9b04      	ldr	r3, [sp, #16]
 8012a86:	3401      	adds	r4, #1
 8012a88:	4082      	lsls	r2, r0
 8012a8a:	4313      	orrs	r3, r2
 8012a8c:	9304      	str	r3, [sp, #16]
 8012a8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012a92:	2206      	movs	r2, #6
 8012a94:	4828      	ldr	r0, [pc, #160]	@ (8012b38 <_vfiprintf_r+0x220>)
 8012a96:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012a9a:	f7fd fafd 	bl	8010098 <memchr>
 8012a9e:	2800      	cmp	r0, #0
 8012aa0:	d03f      	beq.n	8012b22 <_vfiprintf_r+0x20a>
 8012aa2:	4b26      	ldr	r3, [pc, #152]	@ (8012b3c <_vfiprintf_r+0x224>)
 8012aa4:	bb1b      	cbnz	r3, 8012aee <_vfiprintf_r+0x1d6>
 8012aa6:	9b03      	ldr	r3, [sp, #12]
 8012aa8:	3307      	adds	r3, #7
 8012aaa:	f023 0307 	bic.w	r3, r3, #7
 8012aae:	3308      	adds	r3, #8
 8012ab0:	9303      	str	r3, [sp, #12]
 8012ab2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012ab4:	443b      	add	r3, r7
 8012ab6:	9309      	str	r3, [sp, #36]	@ 0x24
 8012ab8:	e76a      	b.n	8012990 <_vfiprintf_r+0x78>
 8012aba:	fb0c 3202 	mla	r2, ip, r2, r3
 8012abe:	460c      	mov	r4, r1
 8012ac0:	2001      	movs	r0, #1
 8012ac2:	e7a8      	b.n	8012a16 <_vfiprintf_r+0xfe>
 8012ac4:	2300      	movs	r3, #0
 8012ac6:	3401      	adds	r4, #1
 8012ac8:	f04f 0c0a 	mov.w	ip, #10
 8012acc:	4619      	mov	r1, r3
 8012ace:	9305      	str	r3, [sp, #20]
 8012ad0:	4620      	mov	r0, r4
 8012ad2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012ad6:	3a30      	subs	r2, #48	@ 0x30
 8012ad8:	2a09      	cmp	r2, #9
 8012ada:	d903      	bls.n	8012ae4 <_vfiprintf_r+0x1cc>
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d0c6      	beq.n	8012a6e <_vfiprintf_r+0x156>
 8012ae0:	9105      	str	r1, [sp, #20]
 8012ae2:	e7c4      	b.n	8012a6e <_vfiprintf_r+0x156>
 8012ae4:	fb0c 2101 	mla	r1, ip, r1, r2
 8012ae8:	4604      	mov	r4, r0
 8012aea:	2301      	movs	r3, #1
 8012aec:	e7f0      	b.n	8012ad0 <_vfiprintf_r+0x1b8>
 8012aee:	ab03      	add	r3, sp, #12
 8012af0:	462a      	mov	r2, r5
 8012af2:	a904      	add	r1, sp, #16
 8012af4:	4630      	mov	r0, r6
 8012af6:	9300      	str	r3, [sp, #0]
 8012af8:	4b11      	ldr	r3, [pc, #68]	@ (8012b40 <_vfiprintf_r+0x228>)
 8012afa:	f7fc fa45 	bl	800ef88 <_printf_float>
 8012afe:	4607      	mov	r7, r0
 8012b00:	1c78      	adds	r0, r7, #1
 8012b02:	d1d6      	bne.n	8012ab2 <_vfiprintf_r+0x19a>
 8012b04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012b06:	07d9      	lsls	r1, r3, #31
 8012b08:	d405      	bmi.n	8012b16 <_vfiprintf_r+0x1fe>
 8012b0a:	89ab      	ldrh	r3, [r5, #12]
 8012b0c:	059a      	lsls	r2, r3, #22
 8012b0e:	d402      	bmi.n	8012b16 <_vfiprintf_r+0x1fe>
 8012b10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012b12:	f7fd fabb 	bl	801008c <__retarget_lock_release_recursive>
 8012b16:	89ab      	ldrh	r3, [r5, #12]
 8012b18:	065b      	lsls	r3, r3, #25
 8012b1a:	f53f af1f 	bmi.w	801295c <_vfiprintf_r+0x44>
 8012b1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012b20:	e71e      	b.n	8012960 <_vfiprintf_r+0x48>
 8012b22:	ab03      	add	r3, sp, #12
 8012b24:	462a      	mov	r2, r5
 8012b26:	a904      	add	r1, sp, #16
 8012b28:	4630      	mov	r0, r6
 8012b2a:	9300      	str	r3, [sp, #0]
 8012b2c:	4b04      	ldr	r3, [pc, #16]	@ (8012b40 <_vfiprintf_r+0x228>)
 8012b2e:	f7fc fcc7 	bl	800f4c0 <_printf_i>
 8012b32:	e7e4      	b.n	8012afe <_vfiprintf_r+0x1e6>
 8012b34:	08014951 	.word	0x08014951
 8012b38:	0801495b 	.word	0x0801495b
 8012b3c:	0800ef89 	.word	0x0800ef89
 8012b40:	080128f3 	.word	0x080128f3
 8012b44:	08014957 	.word	0x08014957

08012b48 <__sflush_r>:
 8012b48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b50:	0716      	lsls	r6, r2, #28
 8012b52:	4605      	mov	r5, r0
 8012b54:	460c      	mov	r4, r1
 8012b56:	d454      	bmi.n	8012c02 <__sflush_r+0xba>
 8012b58:	684b      	ldr	r3, [r1, #4]
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	dc02      	bgt.n	8012b64 <__sflush_r+0x1c>
 8012b5e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	dd48      	ble.n	8012bf6 <__sflush_r+0xae>
 8012b64:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012b66:	2e00      	cmp	r6, #0
 8012b68:	d045      	beq.n	8012bf6 <__sflush_r+0xae>
 8012b6a:	2300      	movs	r3, #0
 8012b6c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012b70:	682f      	ldr	r7, [r5, #0]
 8012b72:	6a21      	ldr	r1, [r4, #32]
 8012b74:	602b      	str	r3, [r5, #0]
 8012b76:	d030      	beq.n	8012bda <__sflush_r+0x92>
 8012b78:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012b7a:	89a3      	ldrh	r3, [r4, #12]
 8012b7c:	0759      	lsls	r1, r3, #29
 8012b7e:	d505      	bpl.n	8012b8c <__sflush_r+0x44>
 8012b80:	6863      	ldr	r3, [r4, #4]
 8012b82:	1ad2      	subs	r2, r2, r3
 8012b84:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012b86:	b10b      	cbz	r3, 8012b8c <__sflush_r+0x44>
 8012b88:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012b8a:	1ad2      	subs	r2, r2, r3
 8012b8c:	2300      	movs	r3, #0
 8012b8e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012b90:	6a21      	ldr	r1, [r4, #32]
 8012b92:	4628      	mov	r0, r5
 8012b94:	47b0      	blx	r6
 8012b96:	1c43      	adds	r3, r0, #1
 8012b98:	89a3      	ldrh	r3, [r4, #12]
 8012b9a:	d106      	bne.n	8012baa <__sflush_r+0x62>
 8012b9c:	6829      	ldr	r1, [r5, #0]
 8012b9e:	291d      	cmp	r1, #29
 8012ba0:	d82b      	bhi.n	8012bfa <__sflush_r+0xb2>
 8012ba2:	4a2a      	ldr	r2, [pc, #168]	@ (8012c4c <__sflush_r+0x104>)
 8012ba4:	40ca      	lsrs	r2, r1
 8012ba6:	07d6      	lsls	r6, r2, #31
 8012ba8:	d527      	bpl.n	8012bfa <__sflush_r+0xb2>
 8012baa:	2200      	movs	r2, #0
 8012bac:	04d9      	lsls	r1, r3, #19
 8012bae:	6062      	str	r2, [r4, #4]
 8012bb0:	6922      	ldr	r2, [r4, #16]
 8012bb2:	6022      	str	r2, [r4, #0]
 8012bb4:	d504      	bpl.n	8012bc0 <__sflush_r+0x78>
 8012bb6:	1c42      	adds	r2, r0, #1
 8012bb8:	d101      	bne.n	8012bbe <__sflush_r+0x76>
 8012bba:	682b      	ldr	r3, [r5, #0]
 8012bbc:	b903      	cbnz	r3, 8012bc0 <__sflush_r+0x78>
 8012bbe:	6560      	str	r0, [r4, #84]	@ 0x54
 8012bc0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012bc2:	602f      	str	r7, [r5, #0]
 8012bc4:	b1b9      	cbz	r1, 8012bf6 <__sflush_r+0xae>
 8012bc6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012bca:	4299      	cmp	r1, r3
 8012bcc:	d002      	beq.n	8012bd4 <__sflush_r+0x8c>
 8012bce:	4628      	mov	r0, r5
 8012bd0:	f7fe f8e4 	bl	8010d9c <_free_r>
 8012bd4:	2300      	movs	r3, #0
 8012bd6:	6363      	str	r3, [r4, #52]	@ 0x34
 8012bd8:	e00d      	b.n	8012bf6 <__sflush_r+0xae>
 8012bda:	2301      	movs	r3, #1
 8012bdc:	4628      	mov	r0, r5
 8012bde:	47b0      	blx	r6
 8012be0:	4602      	mov	r2, r0
 8012be2:	1c50      	adds	r0, r2, #1
 8012be4:	d1c9      	bne.n	8012b7a <__sflush_r+0x32>
 8012be6:	682b      	ldr	r3, [r5, #0]
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	d0c6      	beq.n	8012b7a <__sflush_r+0x32>
 8012bec:	2b1d      	cmp	r3, #29
 8012bee:	d001      	beq.n	8012bf4 <__sflush_r+0xac>
 8012bf0:	2b16      	cmp	r3, #22
 8012bf2:	d11d      	bne.n	8012c30 <__sflush_r+0xe8>
 8012bf4:	602f      	str	r7, [r5, #0]
 8012bf6:	2000      	movs	r0, #0
 8012bf8:	e021      	b.n	8012c3e <__sflush_r+0xf6>
 8012bfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012bfe:	b21b      	sxth	r3, r3
 8012c00:	e01a      	b.n	8012c38 <__sflush_r+0xf0>
 8012c02:	690f      	ldr	r7, [r1, #16]
 8012c04:	2f00      	cmp	r7, #0
 8012c06:	d0f6      	beq.n	8012bf6 <__sflush_r+0xae>
 8012c08:	0793      	lsls	r3, r2, #30
 8012c0a:	680e      	ldr	r6, [r1, #0]
 8012c0c:	600f      	str	r7, [r1, #0]
 8012c0e:	bf0c      	ite	eq
 8012c10:	694b      	ldreq	r3, [r1, #20]
 8012c12:	2300      	movne	r3, #0
 8012c14:	eba6 0807 	sub.w	r8, r6, r7
 8012c18:	608b      	str	r3, [r1, #8]
 8012c1a:	f1b8 0f00 	cmp.w	r8, #0
 8012c1e:	ddea      	ble.n	8012bf6 <__sflush_r+0xae>
 8012c20:	4643      	mov	r3, r8
 8012c22:	463a      	mov	r2, r7
 8012c24:	6a21      	ldr	r1, [r4, #32]
 8012c26:	4628      	mov	r0, r5
 8012c28:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8012c2a:	47b0      	blx	r6
 8012c2c:	2800      	cmp	r0, #0
 8012c2e:	dc08      	bgt.n	8012c42 <__sflush_r+0xfa>
 8012c30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012c34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012c38:	f04f 30ff 	mov.w	r0, #4294967295
 8012c3c:	81a3      	strh	r3, [r4, #12]
 8012c3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c42:	4407      	add	r7, r0
 8012c44:	eba8 0800 	sub.w	r8, r8, r0
 8012c48:	e7e7      	b.n	8012c1a <__sflush_r+0xd2>
 8012c4a:	bf00      	nop
 8012c4c:	20400001 	.word	0x20400001

08012c50 <_fflush_r>:
 8012c50:	b538      	push	{r3, r4, r5, lr}
 8012c52:	690b      	ldr	r3, [r1, #16]
 8012c54:	4605      	mov	r5, r0
 8012c56:	460c      	mov	r4, r1
 8012c58:	b913      	cbnz	r3, 8012c60 <_fflush_r+0x10>
 8012c5a:	2500      	movs	r5, #0
 8012c5c:	4628      	mov	r0, r5
 8012c5e:	bd38      	pop	{r3, r4, r5, pc}
 8012c60:	b118      	cbz	r0, 8012c6a <_fflush_r+0x1a>
 8012c62:	6a03      	ldr	r3, [r0, #32]
 8012c64:	b90b      	cbnz	r3, 8012c6a <_fflush_r+0x1a>
 8012c66:	f7fc ffe3 	bl	800fc30 <__sinit>
 8012c6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d0f3      	beq.n	8012c5a <_fflush_r+0xa>
 8012c72:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012c74:	07d0      	lsls	r0, r2, #31
 8012c76:	d404      	bmi.n	8012c82 <_fflush_r+0x32>
 8012c78:	0599      	lsls	r1, r3, #22
 8012c7a:	d402      	bmi.n	8012c82 <_fflush_r+0x32>
 8012c7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012c7e:	f7fd fa04 	bl	801008a <__retarget_lock_acquire_recursive>
 8012c82:	4628      	mov	r0, r5
 8012c84:	4621      	mov	r1, r4
 8012c86:	f7ff ff5f 	bl	8012b48 <__sflush_r>
 8012c8a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012c8c:	4605      	mov	r5, r0
 8012c8e:	07da      	lsls	r2, r3, #31
 8012c90:	d4e4      	bmi.n	8012c5c <_fflush_r+0xc>
 8012c92:	89a3      	ldrh	r3, [r4, #12]
 8012c94:	059b      	lsls	r3, r3, #22
 8012c96:	d4e1      	bmi.n	8012c5c <_fflush_r+0xc>
 8012c98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012c9a:	f7fd f9f7 	bl	801008c <__retarget_lock_release_recursive>
 8012c9e:	e7dd      	b.n	8012c5c <_fflush_r+0xc>

08012ca0 <__swhatbuf_r>:
 8012ca0:	b570      	push	{r4, r5, r6, lr}
 8012ca2:	460c      	mov	r4, r1
 8012ca4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ca8:	b096      	sub	sp, #88	@ 0x58
 8012caa:	4615      	mov	r5, r2
 8012cac:	2900      	cmp	r1, #0
 8012cae:	461e      	mov	r6, r3
 8012cb0:	da0c      	bge.n	8012ccc <__swhatbuf_r+0x2c>
 8012cb2:	89a3      	ldrh	r3, [r4, #12]
 8012cb4:	2100      	movs	r1, #0
 8012cb6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012cba:	bf14      	ite	ne
 8012cbc:	2340      	movne	r3, #64	@ 0x40
 8012cbe:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012cc2:	2000      	movs	r0, #0
 8012cc4:	6031      	str	r1, [r6, #0]
 8012cc6:	602b      	str	r3, [r5, #0]
 8012cc8:	b016      	add	sp, #88	@ 0x58
 8012cca:	bd70      	pop	{r4, r5, r6, pc}
 8012ccc:	466a      	mov	r2, sp
 8012cce:	f000 f875 	bl	8012dbc <_fstat_r>
 8012cd2:	2800      	cmp	r0, #0
 8012cd4:	dbed      	blt.n	8012cb2 <__swhatbuf_r+0x12>
 8012cd6:	9901      	ldr	r1, [sp, #4]
 8012cd8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012cdc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012ce0:	4259      	negs	r1, r3
 8012ce2:	4159      	adcs	r1, r3
 8012ce4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012ce8:	e7eb      	b.n	8012cc2 <__swhatbuf_r+0x22>

08012cea <__smakebuf_r>:
 8012cea:	898b      	ldrh	r3, [r1, #12]
 8012cec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012cee:	079d      	lsls	r5, r3, #30
 8012cf0:	4606      	mov	r6, r0
 8012cf2:	460c      	mov	r4, r1
 8012cf4:	d507      	bpl.n	8012d06 <__smakebuf_r+0x1c>
 8012cf6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012cfa:	6023      	str	r3, [r4, #0]
 8012cfc:	6123      	str	r3, [r4, #16]
 8012cfe:	2301      	movs	r3, #1
 8012d00:	6163      	str	r3, [r4, #20]
 8012d02:	b003      	add	sp, #12
 8012d04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012d06:	ab01      	add	r3, sp, #4
 8012d08:	466a      	mov	r2, sp
 8012d0a:	f7ff ffc9 	bl	8012ca0 <__swhatbuf_r>
 8012d0e:	9f00      	ldr	r7, [sp, #0]
 8012d10:	4605      	mov	r5, r0
 8012d12:	4630      	mov	r0, r6
 8012d14:	4639      	mov	r1, r7
 8012d16:	f7fe f8b5 	bl	8010e84 <_malloc_r>
 8012d1a:	b948      	cbnz	r0, 8012d30 <__smakebuf_r+0x46>
 8012d1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012d20:	059a      	lsls	r2, r3, #22
 8012d22:	d4ee      	bmi.n	8012d02 <__smakebuf_r+0x18>
 8012d24:	f023 0303 	bic.w	r3, r3, #3
 8012d28:	f043 0302 	orr.w	r3, r3, #2
 8012d2c:	81a3      	strh	r3, [r4, #12]
 8012d2e:	e7e2      	b.n	8012cf6 <__smakebuf_r+0xc>
 8012d30:	89a3      	ldrh	r3, [r4, #12]
 8012d32:	6020      	str	r0, [r4, #0]
 8012d34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012d38:	81a3      	strh	r3, [r4, #12]
 8012d3a:	9b01      	ldr	r3, [sp, #4]
 8012d3c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012d40:	b15b      	cbz	r3, 8012d5a <__smakebuf_r+0x70>
 8012d42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012d46:	4630      	mov	r0, r6
 8012d48:	f000 f84a 	bl	8012de0 <_isatty_r>
 8012d4c:	b128      	cbz	r0, 8012d5a <__smakebuf_r+0x70>
 8012d4e:	89a3      	ldrh	r3, [r4, #12]
 8012d50:	f023 0303 	bic.w	r3, r3, #3
 8012d54:	f043 0301 	orr.w	r3, r3, #1
 8012d58:	81a3      	strh	r3, [r4, #12]
 8012d5a:	89a3      	ldrh	r3, [r4, #12]
 8012d5c:	431d      	orrs	r5, r3
 8012d5e:	81a5      	strh	r5, [r4, #12]
 8012d60:	e7cf      	b.n	8012d02 <__smakebuf_r+0x18>

08012d62 <memmove>:
 8012d62:	4288      	cmp	r0, r1
 8012d64:	b510      	push	{r4, lr}
 8012d66:	eb01 0402 	add.w	r4, r1, r2
 8012d6a:	d902      	bls.n	8012d72 <memmove+0x10>
 8012d6c:	4284      	cmp	r4, r0
 8012d6e:	4623      	mov	r3, r4
 8012d70:	d807      	bhi.n	8012d82 <memmove+0x20>
 8012d72:	1e43      	subs	r3, r0, #1
 8012d74:	42a1      	cmp	r1, r4
 8012d76:	d008      	beq.n	8012d8a <memmove+0x28>
 8012d78:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012d7c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012d80:	e7f8      	b.n	8012d74 <memmove+0x12>
 8012d82:	4402      	add	r2, r0
 8012d84:	4601      	mov	r1, r0
 8012d86:	428a      	cmp	r2, r1
 8012d88:	d100      	bne.n	8012d8c <memmove+0x2a>
 8012d8a:	bd10      	pop	{r4, pc}
 8012d8c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012d90:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012d94:	e7f7      	b.n	8012d86 <memmove+0x24>

08012d96 <strncmp>:
 8012d96:	b510      	push	{r4, lr}
 8012d98:	b16a      	cbz	r2, 8012db6 <strncmp+0x20>
 8012d9a:	3901      	subs	r1, #1
 8012d9c:	1884      	adds	r4, r0, r2
 8012d9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012da2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8012da6:	429a      	cmp	r2, r3
 8012da8:	d103      	bne.n	8012db2 <strncmp+0x1c>
 8012daa:	42a0      	cmp	r0, r4
 8012dac:	d001      	beq.n	8012db2 <strncmp+0x1c>
 8012dae:	2a00      	cmp	r2, #0
 8012db0:	d1f5      	bne.n	8012d9e <strncmp+0x8>
 8012db2:	1ad0      	subs	r0, r2, r3
 8012db4:	bd10      	pop	{r4, pc}
 8012db6:	4610      	mov	r0, r2
 8012db8:	e7fc      	b.n	8012db4 <strncmp+0x1e>
	...

08012dbc <_fstat_r>:
 8012dbc:	b538      	push	{r3, r4, r5, lr}
 8012dbe:	2300      	movs	r3, #0
 8012dc0:	4d06      	ldr	r5, [pc, #24]	@ (8012ddc <_fstat_r+0x20>)
 8012dc2:	4604      	mov	r4, r0
 8012dc4:	4608      	mov	r0, r1
 8012dc6:	4611      	mov	r1, r2
 8012dc8:	602b      	str	r3, [r5, #0]
 8012dca:	f7f1 f9b4 	bl	8004136 <_fstat>
 8012dce:	1c43      	adds	r3, r0, #1
 8012dd0:	d102      	bne.n	8012dd8 <_fstat_r+0x1c>
 8012dd2:	682b      	ldr	r3, [r5, #0]
 8012dd4:	b103      	cbz	r3, 8012dd8 <_fstat_r+0x1c>
 8012dd6:	6023      	str	r3, [r4, #0]
 8012dd8:	bd38      	pop	{r3, r4, r5, pc}
 8012dda:	bf00      	nop
 8012ddc:	200008dc 	.word	0x200008dc

08012de0 <_isatty_r>:
 8012de0:	b538      	push	{r3, r4, r5, lr}
 8012de2:	2300      	movs	r3, #0
 8012de4:	4d05      	ldr	r5, [pc, #20]	@ (8012dfc <_isatty_r+0x1c>)
 8012de6:	4604      	mov	r4, r0
 8012de8:	4608      	mov	r0, r1
 8012dea:	602b      	str	r3, [r5, #0]
 8012dec:	f7f1 f9b3 	bl	8004156 <_isatty>
 8012df0:	1c43      	adds	r3, r0, #1
 8012df2:	d102      	bne.n	8012dfa <_isatty_r+0x1a>
 8012df4:	682b      	ldr	r3, [r5, #0]
 8012df6:	b103      	cbz	r3, 8012dfa <_isatty_r+0x1a>
 8012df8:	6023      	str	r3, [r4, #0]
 8012dfa:	bd38      	pop	{r3, r4, r5, pc}
 8012dfc:	200008dc 	.word	0x200008dc

08012e00 <_sbrk_r>:
 8012e00:	b538      	push	{r3, r4, r5, lr}
 8012e02:	2300      	movs	r3, #0
 8012e04:	4d05      	ldr	r5, [pc, #20]	@ (8012e1c <_sbrk_r+0x1c>)
 8012e06:	4604      	mov	r4, r0
 8012e08:	4608      	mov	r0, r1
 8012e0a:	602b      	str	r3, [r5, #0]
 8012e0c:	f7f1 f9bc 	bl	8004188 <_sbrk>
 8012e10:	1c43      	adds	r3, r0, #1
 8012e12:	d102      	bne.n	8012e1a <_sbrk_r+0x1a>
 8012e14:	682b      	ldr	r3, [r5, #0]
 8012e16:	b103      	cbz	r3, 8012e1a <_sbrk_r+0x1a>
 8012e18:	6023      	str	r3, [r4, #0]
 8012e1a:	bd38      	pop	{r3, r4, r5, pc}
 8012e1c:	200008dc 	.word	0x200008dc

08012e20 <nan>:
 8012e20:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8012e28 <nan+0x8>
 8012e24:	4770      	bx	lr
 8012e26:	bf00      	nop
 8012e28:	00000000 	.word	0x00000000
 8012e2c:	7ff80000 	.word	0x7ff80000

08012e30 <__assert_func>:
 8012e30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012e32:	4614      	mov	r4, r2
 8012e34:	461a      	mov	r2, r3
 8012e36:	4b09      	ldr	r3, [pc, #36]	@ (8012e5c <__assert_func+0x2c>)
 8012e38:	4605      	mov	r5, r0
 8012e3a:	681b      	ldr	r3, [r3, #0]
 8012e3c:	68d8      	ldr	r0, [r3, #12]
 8012e3e:	b14c      	cbz	r4, 8012e54 <__assert_func+0x24>
 8012e40:	4b07      	ldr	r3, [pc, #28]	@ (8012e60 <__assert_func+0x30>)
 8012e42:	9100      	str	r1, [sp, #0]
 8012e44:	4907      	ldr	r1, [pc, #28]	@ (8012e64 <__assert_func+0x34>)
 8012e46:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012e4a:	462b      	mov	r3, r5
 8012e4c:	f000 fba4 	bl	8013598 <fiprintf>
 8012e50:	f000 fbb4 	bl	80135bc <abort>
 8012e54:	4b04      	ldr	r3, [pc, #16]	@ (8012e68 <__assert_func+0x38>)
 8012e56:	461c      	mov	r4, r3
 8012e58:	e7f3      	b.n	8012e42 <__assert_func+0x12>
 8012e5a:	bf00      	nop
 8012e5c:	2000003c 	.word	0x2000003c
 8012e60:	0801496a 	.word	0x0801496a
 8012e64:	08014977 	.word	0x08014977
 8012e68:	080149a5 	.word	0x080149a5

08012e6c <_calloc_r>:
 8012e6c:	b570      	push	{r4, r5, r6, lr}
 8012e6e:	fba1 5402 	umull	r5, r4, r1, r2
 8012e72:	b934      	cbnz	r4, 8012e82 <_calloc_r+0x16>
 8012e74:	4629      	mov	r1, r5
 8012e76:	f7fe f805 	bl	8010e84 <_malloc_r>
 8012e7a:	4606      	mov	r6, r0
 8012e7c:	b928      	cbnz	r0, 8012e8a <_calloc_r+0x1e>
 8012e7e:	4630      	mov	r0, r6
 8012e80:	bd70      	pop	{r4, r5, r6, pc}
 8012e82:	220c      	movs	r2, #12
 8012e84:	2600      	movs	r6, #0
 8012e86:	6002      	str	r2, [r0, #0]
 8012e88:	e7f9      	b.n	8012e7e <_calloc_r+0x12>
 8012e8a:	462a      	mov	r2, r5
 8012e8c:	4621      	mov	r1, r4
 8012e8e:	f7fd f87f 	bl	800ff90 <memset>
 8012e92:	e7f4      	b.n	8012e7e <_calloc_r+0x12>

08012e94 <rshift>:
 8012e94:	6903      	ldr	r3, [r0, #16]
 8012e96:	114a      	asrs	r2, r1, #5
 8012e98:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8012e9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012ea0:	f100 0414 	add.w	r4, r0, #20
 8012ea4:	dd45      	ble.n	8012f32 <rshift+0x9e>
 8012ea6:	f011 011f 	ands.w	r1, r1, #31
 8012eaa:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8012eae:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8012eb2:	d10c      	bne.n	8012ece <rshift+0x3a>
 8012eb4:	f100 0710 	add.w	r7, r0, #16
 8012eb8:	4629      	mov	r1, r5
 8012eba:	42b1      	cmp	r1, r6
 8012ebc:	d334      	bcc.n	8012f28 <rshift+0x94>
 8012ebe:	1a9b      	subs	r3, r3, r2
 8012ec0:	1eea      	subs	r2, r5, #3
 8012ec2:	009b      	lsls	r3, r3, #2
 8012ec4:	4296      	cmp	r6, r2
 8012ec6:	bf38      	it	cc
 8012ec8:	2300      	movcc	r3, #0
 8012eca:	4423      	add	r3, r4
 8012ecc:	e015      	b.n	8012efa <rshift+0x66>
 8012ece:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8012ed2:	f1c1 0820 	rsb	r8, r1, #32
 8012ed6:	f105 0e04 	add.w	lr, r5, #4
 8012eda:	46a1      	mov	r9, r4
 8012edc:	40cf      	lsrs	r7, r1
 8012ede:	4576      	cmp	r6, lr
 8012ee0:	46f4      	mov	ip, lr
 8012ee2:	d815      	bhi.n	8012f10 <rshift+0x7c>
 8012ee4:	1a9a      	subs	r2, r3, r2
 8012ee6:	3501      	adds	r5, #1
 8012ee8:	0092      	lsls	r2, r2, #2
 8012eea:	3a04      	subs	r2, #4
 8012eec:	42ae      	cmp	r6, r5
 8012eee:	bf38      	it	cc
 8012ef0:	2200      	movcc	r2, #0
 8012ef2:	18a3      	adds	r3, r4, r2
 8012ef4:	50a7      	str	r7, [r4, r2]
 8012ef6:	b107      	cbz	r7, 8012efa <rshift+0x66>
 8012ef8:	3304      	adds	r3, #4
 8012efa:	1b1a      	subs	r2, r3, r4
 8012efc:	42a3      	cmp	r3, r4
 8012efe:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8012f02:	bf08      	it	eq
 8012f04:	2300      	moveq	r3, #0
 8012f06:	6102      	str	r2, [r0, #16]
 8012f08:	bf08      	it	eq
 8012f0a:	6143      	streq	r3, [r0, #20]
 8012f0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012f10:	f8dc c000 	ldr.w	ip, [ip]
 8012f14:	fa0c fc08 	lsl.w	ip, ip, r8
 8012f18:	ea4c 0707 	orr.w	r7, ip, r7
 8012f1c:	f849 7b04 	str.w	r7, [r9], #4
 8012f20:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012f24:	40cf      	lsrs	r7, r1
 8012f26:	e7da      	b.n	8012ede <rshift+0x4a>
 8012f28:	f851 cb04 	ldr.w	ip, [r1], #4
 8012f2c:	f847 cf04 	str.w	ip, [r7, #4]!
 8012f30:	e7c3      	b.n	8012eba <rshift+0x26>
 8012f32:	4623      	mov	r3, r4
 8012f34:	e7e1      	b.n	8012efa <rshift+0x66>

08012f36 <__hexdig_fun>:
 8012f36:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8012f3a:	2b09      	cmp	r3, #9
 8012f3c:	d802      	bhi.n	8012f44 <__hexdig_fun+0xe>
 8012f3e:	3820      	subs	r0, #32
 8012f40:	b2c0      	uxtb	r0, r0
 8012f42:	4770      	bx	lr
 8012f44:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8012f48:	2b05      	cmp	r3, #5
 8012f4a:	d801      	bhi.n	8012f50 <__hexdig_fun+0x1a>
 8012f4c:	3847      	subs	r0, #71	@ 0x47
 8012f4e:	e7f7      	b.n	8012f40 <__hexdig_fun+0xa>
 8012f50:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8012f54:	2b05      	cmp	r3, #5
 8012f56:	d801      	bhi.n	8012f5c <__hexdig_fun+0x26>
 8012f58:	3827      	subs	r0, #39	@ 0x27
 8012f5a:	e7f1      	b.n	8012f40 <__hexdig_fun+0xa>
 8012f5c:	2000      	movs	r0, #0
 8012f5e:	4770      	bx	lr

08012f60 <__gethex>:
 8012f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f64:	b085      	sub	sp, #20
 8012f66:	468a      	mov	sl, r1
 8012f68:	4690      	mov	r8, r2
 8012f6a:	9302      	str	r3, [sp, #8]
 8012f6c:	680b      	ldr	r3, [r1, #0]
 8012f6e:	9001      	str	r0, [sp, #4]
 8012f70:	1c9c      	adds	r4, r3, #2
 8012f72:	46a1      	mov	r9, r4
 8012f74:	f814 0b01 	ldrb.w	r0, [r4], #1
 8012f78:	2830      	cmp	r0, #48	@ 0x30
 8012f7a:	d0fa      	beq.n	8012f72 <__gethex+0x12>
 8012f7c:	eba9 0303 	sub.w	r3, r9, r3
 8012f80:	f1a3 0b02 	sub.w	fp, r3, #2
 8012f84:	f7ff ffd7 	bl	8012f36 <__hexdig_fun>
 8012f88:	4605      	mov	r5, r0
 8012f8a:	2800      	cmp	r0, #0
 8012f8c:	d166      	bne.n	801305c <__gethex+0xfc>
 8012f8e:	2201      	movs	r2, #1
 8012f90:	499e      	ldr	r1, [pc, #632]	@ (801320c <__gethex+0x2ac>)
 8012f92:	4648      	mov	r0, r9
 8012f94:	f7ff feff 	bl	8012d96 <strncmp>
 8012f98:	4607      	mov	r7, r0
 8012f9a:	2800      	cmp	r0, #0
 8012f9c:	d165      	bne.n	801306a <__gethex+0x10a>
 8012f9e:	f899 0001 	ldrb.w	r0, [r9, #1]
 8012fa2:	4626      	mov	r6, r4
 8012fa4:	f7ff ffc7 	bl	8012f36 <__hexdig_fun>
 8012fa8:	2800      	cmp	r0, #0
 8012faa:	d060      	beq.n	801306e <__gethex+0x10e>
 8012fac:	4623      	mov	r3, r4
 8012fae:	7818      	ldrb	r0, [r3, #0]
 8012fb0:	4699      	mov	r9, r3
 8012fb2:	3301      	adds	r3, #1
 8012fb4:	2830      	cmp	r0, #48	@ 0x30
 8012fb6:	d0fa      	beq.n	8012fae <__gethex+0x4e>
 8012fb8:	f7ff ffbd 	bl	8012f36 <__hexdig_fun>
 8012fbc:	fab0 f580 	clz	r5, r0
 8012fc0:	f04f 0b01 	mov.w	fp, #1
 8012fc4:	096d      	lsrs	r5, r5, #5
 8012fc6:	464a      	mov	r2, r9
 8012fc8:	4616      	mov	r6, r2
 8012fca:	3201      	adds	r2, #1
 8012fcc:	7830      	ldrb	r0, [r6, #0]
 8012fce:	f7ff ffb2 	bl	8012f36 <__hexdig_fun>
 8012fd2:	2800      	cmp	r0, #0
 8012fd4:	d1f8      	bne.n	8012fc8 <__gethex+0x68>
 8012fd6:	2201      	movs	r2, #1
 8012fd8:	498c      	ldr	r1, [pc, #560]	@ (801320c <__gethex+0x2ac>)
 8012fda:	4630      	mov	r0, r6
 8012fdc:	f7ff fedb 	bl	8012d96 <strncmp>
 8012fe0:	2800      	cmp	r0, #0
 8012fe2:	d13e      	bne.n	8013062 <__gethex+0x102>
 8012fe4:	b944      	cbnz	r4, 8012ff8 <__gethex+0x98>
 8012fe6:	1c74      	adds	r4, r6, #1
 8012fe8:	4622      	mov	r2, r4
 8012fea:	4616      	mov	r6, r2
 8012fec:	3201      	adds	r2, #1
 8012fee:	7830      	ldrb	r0, [r6, #0]
 8012ff0:	f7ff ffa1 	bl	8012f36 <__hexdig_fun>
 8012ff4:	2800      	cmp	r0, #0
 8012ff6:	d1f8      	bne.n	8012fea <__gethex+0x8a>
 8012ff8:	1ba4      	subs	r4, r4, r6
 8012ffa:	00a7      	lsls	r7, r4, #2
 8012ffc:	7833      	ldrb	r3, [r6, #0]
 8012ffe:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8013002:	2b50      	cmp	r3, #80	@ 0x50
 8013004:	d13d      	bne.n	8013082 <__gethex+0x122>
 8013006:	7873      	ldrb	r3, [r6, #1]
 8013008:	2b2b      	cmp	r3, #43	@ 0x2b
 801300a:	d032      	beq.n	8013072 <__gethex+0x112>
 801300c:	2b2d      	cmp	r3, #45	@ 0x2d
 801300e:	d033      	beq.n	8013078 <__gethex+0x118>
 8013010:	1c71      	adds	r1, r6, #1
 8013012:	2400      	movs	r4, #0
 8013014:	7808      	ldrb	r0, [r1, #0]
 8013016:	f7ff ff8e 	bl	8012f36 <__hexdig_fun>
 801301a:	1e43      	subs	r3, r0, #1
 801301c:	b2db      	uxtb	r3, r3
 801301e:	2b18      	cmp	r3, #24
 8013020:	d82f      	bhi.n	8013082 <__gethex+0x122>
 8013022:	f1a0 0210 	sub.w	r2, r0, #16
 8013026:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801302a:	f7ff ff84 	bl	8012f36 <__hexdig_fun>
 801302e:	f100 3cff 	add.w	ip, r0, #4294967295
 8013032:	230a      	movs	r3, #10
 8013034:	fa5f fc8c 	uxtb.w	ip, ip
 8013038:	f1bc 0f18 	cmp.w	ip, #24
 801303c:	d91e      	bls.n	801307c <__gethex+0x11c>
 801303e:	b104      	cbz	r4, 8013042 <__gethex+0xe2>
 8013040:	4252      	negs	r2, r2
 8013042:	4417      	add	r7, r2
 8013044:	f8ca 1000 	str.w	r1, [sl]
 8013048:	b1ed      	cbz	r5, 8013086 <__gethex+0x126>
 801304a:	f1bb 0f00 	cmp.w	fp, #0
 801304e:	bf0c      	ite	eq
 8013050:	2506      	moveq	r5, #6
 8013052:	2500      	movne	r5, #0
 8013054:	4628      	mov	r0, r5
 8013056:	b005      	add	sp, #20
 8013058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801305c:	2500      	movs	r5, #0
 801305e:	462c      	mov	r4, r5
 8013060:	e7b1      	b.n	8012fc6 <__gethex+0x66>
 8013062:	2c00      	cmp	r4, #0
 8013064:	d1c8      	bne.n	8012ff8 <__gethex+0x98>
 8013066:	4627      	mov	r7, r4
 8013068:	e7c8      	b.n	8012ffc <__gethex+0x9c>
 801306a:	464e      	mov	r6, r9
 801306c:	462f      	mov	r7, r5
 801306e:	2501      	movs	r5, #1
 8013070:	e7c4      	b.n	8012ffc <__gethex+0x9c>
 8013072:	2400      	movs	r4, #0
 8013074:	1cb1      	adds	r1, r6, #2
 8013076:	e7cd      	b.n	8013014 <__gethex+0xb4>
 8013078:	2401      	movs	r4, #1
 801307a:	e7fb      	b.n	8013074 <__gethex+0x114>
 801307c:	fb03 0002 	mla	r0, r3, r2, r0
 8013080:	e7cf      	b.n	8013022 <__gethex+0xc2>
 8013082:	4631      	mov	r1, r6
 8013084:	e7de      	b.n	8013044 <__gethex+0xe4>
 8013086:	eba6 0309 	sub.w	r3, r6, r9
 801308a:	4629      	mov	r1, r5
 801308c:	3b01      	subs	r3, #1
 801308e:	2b07      	cmp	r3, #7
 8013090:	dc0a      	bgt.n	80130a8 <__gethex+0x148>
 8013092:	9801      	ldr	r0, [sp, #4]
 8013094:	f7fd ff82 	bl	8010f9c <_Balloc>
 8013098:	4604      	mov	r4, r0
 801309a:	b940      	cbnz	r0, 80130ae <__gethex+0x14e>
 801309c:	4b5c      	ldr	r3, [pc, #368]	@ (8013210 <__gethex+0x2b0>)
 801309e:	4602      	mov	r2, r0
 80130a0:	21e4      	movs	r1, #228	@ 0xe4
 80130a2:	485c      	ldr	r0, [pc, #368]	@ (8013214 <__gethex+0x2b4>)
 80130a4:	f7ff fec4 	bl	8012e30 <__assert_func>
 80130a8:	3101      	adds	r1, #1
 80130aa:	105b      	asrs	r3, r3, #1
 80130ac:	e7ef      	b.n	801308e <__gethex+0x12e>
 80130ae:	f100 0a14 	add.w	sl, r0, #20
 80130b2:	2300      	movs	r3, #0
 80130b4:	4655      	mov	r5, sl
 80130b6:	469b      	mov	fp, r3
 80130b8:	45b1      	cmp	r9, r6
 80130ba:	d337      	bcc.n	801312c <__gethex+0x1cc>
 80130bc:	f845 bb04 	str.w	fp, [r5], #4
 80130c0:	eba5 050a 	sub.w	r5, r5, sl
 80130c4:	4658      	mov	r0, fp
 80130c6:	10ad      	asrs	r5, r5, #2
 80130c8:	6125      	str	r5, [r4, #16]
 80130ca:	016d      	lsls	r5, r5, #5
 80130cc:	f7fe f85a 	bl	8011184 <__hi0bits>
 80130d0:	f8d8 6000 	ldr.w	r6, [r8]
 80130d4:	1a2d      	subs	r5, r5, r0
 80130d6:	42b5      	cmp	r5, r6
 80130d8:	dd54      	ble.n	8013184 <__gethex+0x224>
 80130da:	1bad      	subs	r5, r5, r6
 80130dc:	4620      	mov	r0, r4
 80130de:	4629      	mov	r1, r5
 80130e0:	f7fe fbf1 	bl	80118c6 <__any_on>
 80130e4:	4681      	mov	r9, r0
 80130e6:	b178      	cbz	r0, 8013108 <__gethex+0x1a8>
 80130e8:	1e6b      	subs	r3, r5, #1
 80130ea:	f04f 0901 	mov.w	r9, #1
 80130ee:	1159      	asrs	r1, r3, #5
 80130f0:	f003 021f 	and.w	r2, r3, #31
 80130f4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80130f8:	fa09 f202 	lsl.w	r2, r9, r2
 80130fc:	420a      	tst	r2, r1
 80130fe:	d003      	beq.n	8013108 <__gethex+0x1a8>
 8013100:	454b      	cmp	r3, r9
 8013102:	dc36      	bgt.n	8013172 <__gethex+0x212>
 8013104:	f04f 0902 	mov.w	r9, #2
 8013108:	442f      	add	r7, r5
 801310a:	4629      	mov	r1, r5
 801310c:	4620      	mov	r0, r4
 801310e:	f7ff fec1 	bl	8012e94 <rshift>
 8013112:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013116:	42bb      	cmp	r3, r7
 8013118:	da42      	bge.n	80131a0 <__gethex+0x240>
 801311a:	4621      	mov	r1, r4
 801311c:	9801      	ldr	r0, [sp, #4]
 801311e:	f7fd ff7d 	bl	801101c <_Bfree>
 8013122:	2300      	movs	r3, #0
 8013124:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013126:	25a3      	movs	r5, #163	@ 0xa3
 8013128:	6013      	str	r3, [r2, #0]
 801312a:	e793      	b.n	8013054 <__gethex+0xf4>
 801312c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8013130:	2a2e      	cmp	r2, #46	@ 0x2e
 8013132:	d012      	beq.n	801315a <__gethex+0x1fa>
 8013134:	2b20      	cmp	r3, #32
 8013136:	d104      	bne.n	8013142 <__gethex+0x1e2>
 8013138:	f845 bb04 	str.w	fp, [r5], #4
 801313c:	f04f 0b00 	mov.w	fp, #0
 8013140:	465b      	mov	r3, fp
 8013142:	7830      	ldrb	r0, [r6, #0]
 8013144:	9303      	str	r3, [sp, #12]
 8013146:	f7ff fef6 	bl	8012f36 <__hexdig_fun>
 801314a:	9b03      	ldr	r3, [sp, #12]
 801314c:	f000 000f 	and.w	r0, r0, #15
 8013150:	4098      	lsls	r0, r3
 8013152:	3304      	adds	r3, #4
 8013154:	ea4b 0b00 	orr.w	fp, fp, r0
 8013158:	e7ae      	b.n	80130b8 <__gethex+0x158>
 801315a:	45b1      	cmp	r9, r6
 801315c:	d8ea      	bhi.n	8013134 <__gethex+0x1d4>
 801315e:	2201      	movs	r2, #1
 8013160:	492a      	ldr	r1, [pc, #168]	@ (801320c <__gethex+0x2ac>)
 8013162:	4630      	mov	r0, r6
 8013164:	9303      	str	r3, [sp, #12]
 8013166:	f7ff fe16 	bl	8012d96 <strncmp>
 801316a:	9b03      	ldr	r3, [sp, #12]
 801316c:	2800      	cmp	r0, #0
 801316e:	d1e1      	bne.n	8013134 <__gethex+0x1d4>
 8013170:	e7a2      	b.n	80130b8 <__gethex+0x158>
 8013172:	1ea9      	subs	r1, r5, #2
 8013174:	4620      	mov	r0, r4
 8013176:	f7fe fba6 	bl	80118c6 <__any_on>
 801317a:	2800      	cmp	r0, #0
 801317c:	d0c2      	beq.n	8013104 <__gethex+0x1a4>
 801317e:	f04f 0903 	mov.w	r9, #3
 8013182:	e7c1      	b.n	8013108 <__gethex+0x1a8>
 8013184:	da09      	bge.n	801319a <__gethex+0x23a>
 8013186:	1b75      	subs	r5, r6, r5
 8013188:	4621      	mov	r1, r4
 801318a:	9801      	ldr	r0, [sp, #4]
 801318c:	462a      	mov	r2, r5
 801318e:	1b7f      	subs	r7, r7, r5
 8013190:	f7fe f958 	bl	8011444 <__lshift>
 8013194:	4604      	mov	r4, r0
 8013196:	f100 0a14 	add.w	sl, r0, #20
 801319a:	f04f 0900 	mov.w	r9, #0
 801319e:	e7b8      	b.n	8013112 <__gethex+0x1b2>
 80131a0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80131a4:	42bd      	cmp	r5, r7
 80131a6:	dd6f      	ble.n	8013288 <__gethex+0x328>
 80131a8:	1bed      	subs	r5, r5, r7
 80131aa:	42ae      	cmp	r6, r5
 80131ac:	dc34      	bgt.n	8013218 <__gethex+0x2b8>
 80131ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80131b2:	2b02      	cmp	r3, #2
 80131b4:	d022      	beq.n	80131fc <__gethex+0x29c>
 80131b6:	2b03      	cmp	r3, #3
 80131b8:	d024      	beq.n	8013204 <__gethex+0x2a4>
 80131ba:	2b01      	cmp	r3, #1
 80131bc:	d115      	bne.n	80131ea <__gethex+0x28a>
 80131be:	42ae      	cmp	r6, r5
 80131c0:	d113      	bne.n	80131ea <__gethex+0x28a>
 80131c2:	2e01      	cmp	r6, #1
 80131c4:	d10b      	bne.n	80131de <__gethex+0x27e>
 80131c6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80131ca:	2562      	movs	r5, #98	@ 0x62
 80131cc:	9a02      	ldr	r2, [sp, #8]
 80131ce:	6013      	str	r3, [r2, #0]
 80131d0:	2301      	movs	r3, #1
 80131d2:	6123      	str	r3, [r4, #16]
 80131d4:	f8ca 3000 	str.w	r3, [sl]
 80131d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80131da:	601c      	str	r4, [r3, #0]
 80131dc:	e73a      	b.n	8013054 <__gethex+0xf4>
 80131de:	1e71      	subs	r1, r6, #1
 80131e0:	4620      	mov	r0, r4
 80131e2:	f7fe fb70 	bl	80118c6 <__any_on>
 80131e6:	2800      	cmp	r0, #0
 80131e8:	d1ed      	bne.n	80131c6 <__gethex+0x266>
 80131ea:	4621      	mov	r1, r4
 80131ec:	9801      	ldr	r0, [sp, #4]
 80131ee:	f7fd ff15 	bl	801101c <_Bfree>
 80131f2:	2300      	movs	r3, #0
 80131f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80131f6:	2550      	movs	r5, #80	@ 0x50
 80131f8:	6013      	str	r3, [r2, #0]
 80131fa:	e72b      	b.n	8013054 <__gethex+0xf4>
 80131fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80131fe:	2b00      	cmp	r3, #0
 8013200:	d1f3      	bne.n	80131ea <__gethex+0x28a>
 8013202:	e7e0      	b.n	80131c6 <__gethex+0x266>
 8013204:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013206:	2b00      	cmp	r3, #0
 8013208:	d1dd      	bne.n	80131c6 <__gethex+0x266>
 801320a:	e7ee      	b.n	80131ea <__gethex+0x28a>
 801320c:	0801494f 	.word	0x0801494f
 8013210:	080148e5 	.word	0x080148e5
 8013214:	080149a6 	.word	0x080149a6
 8013218:	1e6f      	subs	r7, r5, #1
 801321a:	f1b9 0f00 	cmp.w	r9, #0
 801321e:	d130      	bne.n	8013282 <__gethex+0x322>
 8013220:	b127      	cbz	r7, 801322c <__gethex+0x2cc>
 8013222:	4639      	mov	r1, r7
 8013224:	4620      	mov	r0, r4
 8013226:	f7fe fb4e 	bl	80118c6 <__any_on>
 801322a:	4681      	mov	r9, r0
 801322c:	117a      	asrs	r2, r7, #5
 801322e:	2301      	movs	r3, #1
 8013230:	f007 071f 	and.w	r7, r7, #31
 8013234:	4629      	mov	r1, r5
 8013236:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801323a:	4620      	mov	r0, r4
 801323c:	40bb      	lsls	r3, r7
 801323e:	1b76      	subs	r6, r6, r5
 8013240:	2502      	movs	r5, #2
 8013242:	4213      	tst	r3, r2
 8013244:	bf18      	it	ne
 8013246:	f049 0902 	orrne.w	r9, r9, #2
 801324a:	f7ff fe23 	bl	8012e94 <rshift>
 801324e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8013252:	f1b9 0f00 	cmp.w	r9, #0
 8013256:	d047      	beq.n	80132e8 <__gethex+0x388>
 8013258:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801325c:	2b02      	cmp	r3, #2
 801325e:	d015      	beq.n	801328c <__gethex+0x32c>
 8013260:	2b03      	cmp	r3, #3
 8013262:	d017      	beq.n	8013294 <__gethex+0x334>
 8013264:	2b01      	cmp	r3, #1
 8013266:	d109      	bne.n	801327c <__gethex+0x31c>
 8013268:	f019 0f02 	tst.w	r9, #2
 801326c:	d006      	beq.n	801327c <__gethex+0x31c>
 801326e:	f8da 3000 	ldr.w	r3, [sl]
 8013272:	ea49 0903 	orr.w	r9, r9, r3
 8013276:	f019 0f01 	tst.w	r9, #1
 801327a:	d10e      	bne.n	801329a <__gethex+0x33a>
 801327c:	f045 0510 	orr.w	r5, r5, #16
 8013280:	e032      	b.n	80132e8 <__gethex+0x388>
 8013282:	f04f 0901 	mov.w	r9, #1
 8013286:	e7d1      	b.n	801322c <__gethex+0x2cc>
 8013288:	2501      	movs	r5, #1
 801328a:	e7e2      	b.n	8013252 <__gethex+0x2f2>
 801328c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801328e:	f1c3 0301 	rsb	r3, r3, #1
 8013292:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013294:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013296:	2b00      	cmp	r3, #0
 8013298:	d0f0      	beq.n	801327c <__gethex+0x31c>
 801329a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801329e:	f104 0314 	add.w	r3, r4, #20
 80132a2:	f04f 0c00 	mov.w	ip, #0
 80132a6:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80132aa:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80132ae:	4618      	mov	r0, r3
 80132b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80132b4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80132b8:	d01b      	beq.n	80132f2 <__gethex+0x392>
 80132ba:	3201      	adds	r2, #1
 80132bc:	6002      	str	r2, [r0, #0]
 80132be:	2d02      	cmp	r5, #2
 80132c0:	f104 0314 	add.w	r3, r4, #20
 80132c4:	d13c      	bne.n	8013340 <__gethex+0x3e0>
 80132c6:	f8d8 2000 	ldr.w	r2, [r8]
 80132ca:	3a01      	subs	r2, #1
 80132cc:	42b2      	cmp	r2, r6
 80132ce:	d109      	bne.n	80132e4 <__gethex+0x384>
 80132d0:	1171      	asrs	r1, r6, #5
 80132d2:	2201      	movs	r2, #1
 80132d4:	f006 061f 	and.w	r6, r6, #31
 80132d8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80132dc:	fa02 f606 	lsl.w	r6, r2, r6
 80132e0:	421e      	tst	r6, r3
 80132e2:	d13a      	bne.n	801335a <__gethex+0x3fa>
 80132e4:	f045 0520 	orr.w	r5, r5, #32
 80132e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80132ea:	601c      	str	r4, [r3, #0]
 80132ec:	9b02      	ldr	r3, [sp, #8]
 80132ee:	601f      	str	r7, [r3, #0]
 80132f0:	e6b0      	b.n	8013054 <__gethex+0xf4>
 80132f2:	4299      	cmp	r1, r3
 80132f4:	f843 cc04 	str.w	ip, [r3, #-4]
 80132f8:	d8d9      	bhi.n	80132ae <__gethex+0x34e>
 80132fa:	68a3      	ldr	r3, [r4, #8]
 80132fc:	459b      	cmp	fp, r3
 80132fe:	db17      	blt.n	8013330 <__gethex+0x3d0>
 8013300:	6861      	ldr	r1, [r4, #4]
 8013302:	9801      	ldr	r0, [sp, #4]
 8013304:	3101      	adds	r1, #1
 8013306:	f7fd fe49 	bl	8010f9c <_Balloc>
 801330a:	4681      	mov	r9, r0
 801330c:	b918      	cbnz	r0, 8013316 <__gethex+0x3b6>
 801330e:	4b1a      	ldr	r3, [pc, #104]	@ (8013378 <__gethex+0x418>)
 8013310:	4602      	mov	r2, r0
 8013312:	2184      	movs	r1, #132	@ 0x84
 8013314:	e6c5      	b.n	80130a2 <__gethex+0x142>
 8013316:	6922      	ldr	r2, [r4, #16]
 8013318:	f104 010c 	add.w	r1, r4, #12
 801331c:	300c      	adds	r0, #12
 801331e:	3202      	adds	r2, #2
 8013320:	0092      	lsls	r2, r2, #2
 8013322:	f7fc fec7 	bl	80100b4 <memcpy>
 8013326:	4621      	mov	r1, r4
 8013328:	464c      	mov	r4, r9
 801332a:	9801      	ldr	r0, [sp, #4]
 801332c:	f7fd fe76 	bl	801101c <_Bfree>
 8013330:	6923      	ldr	r3, [r4, #16]
 8013332:	1c5a      	adds	r2, r3, #1
 8013334:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013338:	6122      	str	r2, [r4, #16]
 801333a:	2201      	movs	r2, #1
 801333c:	615a      	str	r2, [r3, #20]
 801333e:	e7be      	b.n	80132be <__gethex+0x35e>
 8013340:	6922      	ldr	r2, [r4, #16]
 8013342:	455a      	cmp	r2, fp
 8013344:	dd0b      	ble.n	801335e <__gethex+0x3fe>
 8013346:	2101      	movs	r1, #1
 8013348:	4620      	mov	r0, r4
 801334a:	f7ff fda3 	bl	8012e94 <rshift>
 801334e:	3701      	adds	r7, #1
 8013350:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013354:	42bb      	cmp	r3, r7
 8013356:	f6ff aee0 	blt.w	801311a <__gethex+0x1ba>
 801335a:	2501      	movs	r5, #1
 801335c:	e7c2      	b.n	80132e4 <__gethex+0x384>
 801335e:	f016 061f 	ands.w	r6, r6, #31
 8013362:	d0fa      	beq.n	801335a <__gethex+0x3fa>
 8013364:	4453      	add	r3, sl
 8013366:	f1c6 0620 	rsb	r6, r6, #32
 801336a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801336e:	f7fd ff09 	bl	8011184 <__hi0bits>
 8013372:	42b0      	cmp	r0, r6
 8013374:	dbe7      	blt.n	8013346 <__gethex+0x3e6>
 8013376:	e7f0      	b.n	801335a <__gethex+0x3fa>
 8013378:	080148e5 	.word	0x080148e5

0801337c <L_shift>:
 801337c:	f1c2 0208 	rsb	r2, r2, #8
 8013380:	0092      	lsls	r2, r2, #2
 8013382:	b570      	push	{r4, r5, r6, lr}
 8013384:	f1c2 0620 	rsb	r6, r2, #32
 8013388:	6843      	ldr	r3, [r0, #4]
 801338a:	6804      	ldr	r4, [r0, #0]
 801338c:	fa03 f506 	lsl.w	r5, r3, r6
 8013390:	40d3      	lsrs	r3, r2
 8013392:	432c      	orrs	r4, r5
 8013394:	6004      	str	r4, [r0, #0]
 8013396:	f840 3f04 	str.w	r3, [r0, #4]!
 801339a:	4288      	cmp	r0, r1
 801339c:	d3f4      	bcc.n	8013388 <L_shift+0xc>
 801339e:	bd70      	pop	{r4, r5, r6, pc}

080133a0 <__match>:
 80133a0:	6803      	ldr	r3, [r0, #0]
 80133a2:	3301      	adds	r3, #1
 80133a4:	b530      	push	{r4, r5, lr}
 80133a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80133aa:	b914      	cbnz	r4, 80133b2 <__match+0x12>
 80133ac:	6003      	str	r3, [r0, #0]
 80133ae:	2001      	movs	r0, #1
 80133b0:	bd30      	pop	{r4, r5, pc}
 80133b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80133b6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80133ba:	2d19      	cmp	r5, #25
 80133bc:	bf98      	it	ls
 80133be:	3220      	addls	r2, #32
 80133c0:	42a2      	cmp	r2, r4
 80133c2:	d0f0      	beq.n	80133a6 <__match+0x6>
 80133c4:	2000      	movs	r0, #0
 80133c6:	e7f3      	b.n	80133b0 <__match+0x10>

080133c8 <__hexnan>:
 80133c8:	680b      	ldr	r3, [r1, #0]
 80133ca:	6801      	ldr	r1, [r0, #0]
 80133cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133d0:	115e      	asrs	r6, r3, #5
 80133d2:	f013 031f 	ands.w	r3, r3, #31
 80133d6:	f04f 0500 	mov.w	r5, #0
 80133da:	b087      	sub	sp, #28
 80133dc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80133e0:	4682      	mov	sl, r0
 80133e2:	4690      	mov	r8, r2
 80133e4:	46ab      	mov	fp, r5
 80133e6:	bf18      	it	ne
 80133e8:	3604      	addne	r6, #4
 80133ea:	9301      	str	r3, [sp, #4]
 80133ec:	9502      	str	r5, [sp, #8]
 80133ee:	1f37      	subs	r7, r6, #4
 80133f0:	f846 5c04 	str.w	r5, [r6, #-4]
 80133f4:	46b9      	mov	r9, r7
 80133f6:	463c      	mov	r4, r7
 80133f8:	1c4b      	adds	r3, r1, #1
 80133fa:	784a      	ldrb	r2, [r1, #1]
 80133fc:	9303      	str	r3, [sp, #12]
 80133fe:	b342      	cbz	r2, 8013452 <__hexnan+0x8a>
 8013400:	4610      	mov	r0, r2
 8013402:	9105      	str	r1, [sp, #20]
 8013404:	9204      	str	r2, [sp, #16]
 8013406:	f7ff fd96 	bl	8012f36 <__hexdig_fun>
 801340a:	2800      	cmp	r0, #0
 801340c:	d151      	bne.n	80134b2 <__hexnan+0xea>
 801340e:	9a04      	ldr	r2, [sp, #16]
 8013410:	9905      	ldr	r1, [sp, #20]
 8013412:	2a20      	cmp	r2, #32
 8013414:	d818      	bhi.n	8013448 <__hexnan+0x80>
 8013416:	9b02      	ldr	r3, [sp, #8]
 8013418:	459b      	cmp	fp, r3
 801341a:	dd13      	ble.n	8013444 <__hexnan+0x7c>
 801341c:	454c      	cmp	r4, r9
 801341e:	d206      	bcs.n	801342e <__hexnan+0x66>
 8013420:	2d07      	cmp	r5, #7
 8013422:	dc04      	bgt.n	801342e <__hexnan+0x66>
 8013424:	462a      	mov	r2, r5
 8013426:	4649      	mov	r1, r9
 8013428:	4620      	mov	r0, r4
 801342a:	f7ff ffa7 	bl	801337c <L_shift>
 801342e:	4544      	cmp	r4, r8
 8013430:	d951      	bls.n	80134d6 <__hexnan+0x10e>
 8013432:	2300      	movs	r3, #0
 8013434:	f1a4 0904 	sub.w	r9, r4, #4
 8013438:	f8cd b008 	str.w	fp, [sp, #8]
 801343c:	f844 3c04 	str.w	r3, [r4, #-4]
 8013440:	461d      	mov	r5, r3
 8013442:	464c      	mov	r4, r9
 8013444:	9903      	ldr	r1, [sp, #12]
 8013446:	e7d7      	b.n	80133f8 <__hexnan+0x30>
 8013448:	2a29      	cmp	r2, #41	@ 0x29
 801344a:	d156      	bne.n	80134fa <__hexnan+0x132>
 801344c:	3102      	adds	r1, #2
 801344e:	f8ca 1000 	str.w	r1, [sl]
 8013452:	f1bb 0f00 	cmp.w	fp, #0
 8013456:	d050      	beq.n	80134fa <__hexnan+0x132>
 8013458:	454c      	cmp	r4, r9
 801345a:	d206      	bcs.n	801346a <__hexnan+0xa2>
 801345c:	2d07      	cmp	r5, #7
 801345e:	dc04      	bgt.n	801346a <__hexnan+0xa2>
 8013460:	462a      	mov	r2, r5
 8013462:	4649      	mov	r1, r9
 8013464:	4620      	mov	r0, r4
 8013466:	f7ff ff89 	bl	801337c <L_shift>
 801346a:	4544      	cmp	r4, r8
 801346c:	d935      	bls.n	80134da <__hexnan+0x112>
 801346e:	f1a8 0204 	sub.w	r2, r8, #4
 8013472:	4623      	mov	r3, r4
 8013474:	f853 1b04 	ldr.w	r1, [r3], #4
 8013478:	429f      	cmp	r7, r3
 801347a:	f842 1f04 	str.w	r1, [r2, #4]!
 801347e:	d2f9      	bcs.n	8013474 <__hexnan+0xac>
 8013480:	1b3b      	subs	r3, r7, r4
 8013482:	3e03      	subs	r6, #3
 8013484:	3401      	adds	r4, #1
 8013486:	2200      	movs	r2, #0
 8013488:	f023 0303 	bic.w	r3, r3, #3
 801348c:	3304      	adds	r3, #4
 801348e:	42b4      	cmp	r4, r6
 8013490:	bf88      	it	hi
 8013492:	2304      	movhi	r3, #4
 8013494:	4443      	add	r3, r8
 8013496:	f843 2b04 	str.w	r2, [r3], #4
 801349a:	429f      	cmp	r7, r3
 801349c:	d2fb      	bcs.n	8013496 <__hexnan+0xce>
 801349e:	683b      	ldr	r3, [r7, #0]
 80134a0:	b91b      	cbnz	r3, 80134aa <__hexnan+0xe2>
 80134a2:	4547      	cmp	r7, r8
 80134a4:	d127      	bne.n	80134f6 <__hexnan+0x12e>
 80134a6:	2301      	movs	r3, #1
 80134a8:	603b      	str	r3, [r7, #0]
 80134aa:	2005      	movs	r0, #5
 80134ac:	b007      	add	sp, #28
 80134ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134b2:	3501      	adds	r5, #1
 80134b4:	f10b 0b01 	add.w	fp, fp, #1
 80134b8:	2d08      	cmp	r5, #8
 80134ba:	dd05      	ble.n	80134c8 <__hexnan+0x100>
 80134bc:	4544      	cmp	r4, r8
 80134be:	d9c1      	bls.n	8013444 <__hexnan+0x7c>
 80134c0:	2300      	movs	r3, #0
 80134c2:	3c04      	subs	r4, #4
 80134c4:	2501      	movs	r5, #1
 80134c6:	6023      	str	r3, [r4, #0]
 80134c8:	6822      	ldr	r2, [r4, #0]
 80134ca:	f000 000f 	and.w	r0, r0, #15
 80134ce:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80134d2:	6020      	str	r0, [r4, #0]
 80134d4:	e7b6      	b.n	8013444 <__hexnan+0x7c>
 80134d6:	2508      	movs	r5, #8
 80134d8:	e7b4      	b.n	8013444 <__hexnan+0x7c>
 80134da:	9b01      	ldr	r3, [sp, #4]
 80134dc:	2b00      	cmp	r3, #0
 80134de:	d0de      	beq.n	801349e <__hexnan+0xd6>
 80134e0:	f1c3 0320 	rsb	r3, r3, #32
 80134e4:	f04f 32ff 	mov.w	r2, #4294967295
 80134e8:	40da      	lsrs	r2, r3
 80134ea:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80134ee:	4013      	ands	r3, r2
 80134f0:	f846 3c04 	str.w	r3, [r6, #-4]
 80134f4:	e7d3      	b.n	801349e <__hexnan+0xd6>
 80134f6:	3f04      	subs	r7, #4
 80134f8:	e7d1      	b.n	801349e <__hexnan+0xd6>
 80134fa:	2004      	movs	r0, #4
 80134fc:	e7d6      	b.n	80134ac <__hexnan+0xe4>

080134fe <__ascii_mbtowc>:
 80134fe:	b082      	sub	sp, #8
 8013500:	b901      	cbnz	r1, 8013504 <__ascii_mbtowc+0x6>
 8013502:	a901      	add	r1, sp, #4
 8013504:	b142      	cbz	r2, 8013518 <__ascii_mbtowc+0x1a>
 8013506:	b14b      	cbz	r3, 801351c <__ascii_mbtowc+0x1e>
 8013508:	7813      	ldrb	r3, [r2, #0]
 801350a:	600b      	str	r3, [r1, #0]
 801350c:	7812      	ldrb	r2, [r2, #0]
 801350e:	1e10      	subs	r0, r2, #0
 8013510:	bf18      	it	ne
 8013512:	2001      	movne	r0, #1
 8013514:	b002      	add	sp, #8
 8013516:	4770      	bx	lr
 8013518:	4610      	mov	r0, r2
 801351a:	e7fb      	b.n	8013514 <__ascii_mbtowc+0x16>
 801351c:	f06f 0001 	mvn.w	r0, #1
 8013520:	e7f8      	b.n	8013514 <__ascii_mbtowc+0x16>

08013522 <_realloc_r>:
 8013522:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013526:	4607      	mov	r7, r0
 8013528:	4614      	mov	r4, r2
 801352a:	460d      	mov	r5, r1
 801352c:	b921      	cbnz	r1, 8013538 <_realloc_r+0x16>
 801352e:	4611      	mov	r1, r2
 8013530:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013534:	f7fd bca6 	b.w	8010e84 <_malloc_r>
 8013538:	b92a      	cbnz	r2, 8013546 <_realloc_r+0x24>
 801353a:	4625      	mov	r5, r4
 801353c:	f7fd fc2e 	bl	8010d9c <_free_r>
 8013540:	4628      	mov	r0, r5
 8013542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013546:	f000 f840 	bl	80135ca <_malloc_usable_size_r>
 801354a:	4284      	cmp	r4, r0
 801354c:	4606      	mov	r6, r0
 801354e:	d802      	bhi.n	8013556 <_realloc_r+0x34>
 8013550:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013554:	d8f4      	bhi.n	8013540 <_realloc_r+0x1e>
 8013556:	4621      	mov	r1, r4
 8013558:	4638      	mov	r0, r7
 801355a:	f7fd fc93 	bl	8010e84 <_malloc_r>
 801355e:	4680      	mov	r8, r0
 8013560:	b908      	cbnz	r0, 8013566 <_realloc_r+0x44>
 8013562:	4645      	mov	r5, r8
 8013564:	e7ec      	b.n	8013540 <_realloc_r+0x1e>
 8013566:	42b4      	cmp	r4, r6
 8013568:	4622      	mov	r2, r4
 801356a:	4629      	mov	r1, r5
 801356c:	bf28      	it	cs
 801356e:	4632      	movcs	r2, r6
 8013570:	f7fc fda0 	bl	80100b4 <memcpy>
 8013574:	4629      	mov	r1, r5
 8013576:	4638      	mov	r0, r7
 8013578:	f7fd fc10 	bl	8010d9c <_free_r>
 801357c:	e7f1      	b.n	8013562 <_realloc_r+0x40>

0801357e <__ascii_wctomb>:
 801357e:	4603      	mov	r3, r0
 8013580:	4608      	mov	r0, r1
 8013582:	b141      	cbz	r1, 8013596 <__ascii_wctomb+0x18>
 8013584:	2aff      	cmp	r2, #255	@ 0xff
 8013586:	d904      	bls.n	8013592 <__ascii_wctomb+0x14>
 8013588:	228a      	movs	r2, #138	@ 0x8a
 801358a:	f04f 30ff 	mov.w	r0, #4294967295
 801358e:	601a      	str	r2, [r3, #0]
 8013590:	4770      	bx	lr
 8013592:	2001      	movs	r0, #1
 8013594:	700a      	strb	r2, [r1, #0]
 8013596:	4770      	bx	lr

08013598 <fiprintf>:
 8013598:	b40e      	push	{r1, r2, r3}
 801359a:	b503      	push	{r0, r1, lr}
 801359c:	ab03      	add	r3, sp, #12
 801359e:	4601      	mov	r1, r0
 80135a0:	4805      	ldr	r0, [pc, #20]	@ (80135b8 <fiprintf+0x20>)
 80135a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80135a6:	6800      	ldr	r0, [r0, #0]
 80135a8:	9301      	str	r3, [sp, #4]
 80135aa:	f7ff f9b5 	bl	8012918 <_vfiprintf_r>
 80135ae:	b002      	add	sp, #8
 80135b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80135b4:	b003      	add	sp, #12
 80135b6:	4770      	bx	lr
 80135b8:	2000003c 	.word	0x2000003c

080135bc <abort>:
 80135bc:	2006      	movs	r0, #6
 80135be:	b508      	push	{r3, lr}
 80135c0:	f000 f834 	bl	801362c <raise>
 80135c4:	2001      	movs	r0, #1
 80135c6:	f7f0 fd66 	bl	8004096 <_exit>

080135ca <_malloc_usable_size_r>:
 80135ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80135ce:	1f18      	subs	r0, r3, #4
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	bfbc      	itt	lt
 80135d4:	580b      	ldrlt	r3, [r1, r0]
 80135d6:	18c0      	addlt	r0, r0, r3
 80135d8:	4770      	bx	lr

080135da <_raise_r>:
 80135da:	291f      	cmp	r1, #31
 80135dc:	b538      	push	{r3, r4, r5, lr}
 80135de:	4605      	mov	r5, r0
 80135e0:	460c      	mov	r4, r1
 80135e2:	d904      	bls.n	80135ee <_raise_r+0x14>
 80135e4:	2316      	movs	r3, #22
 80135e6:	6003      	str	r3, [r0, #0]
 80135e8:	f04f 30ff 	mov.w	r0, #4294967295
 80135ec:	bd38      	pop	{r3, r4, r5, pc}
 80135ee:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80135f0:	b112      	cbz	r2, 80135f8 <_raise_r+0x1e>
 80135f2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80135f6:	b94b      	cbnz	r3, 801360c <_raise_r+0x32>
 80135f8:	4628      	mov	r0, r5
 80135fa:	f000 f831 	bl	8013660 <_getpid_r>
 80135fe:	4622      	mov	r2, r4
 8013600:	4601      	mov	r1, r0
 8013602:	4628      	mov	r0, r5
 8013604:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013608:	f000 b818 	b.w	801363c <_kill_r>
 801360c:	2b01      	cmp	r3, #1
 801360e:	d00a      	beq.n	8013626 <_raise_r+0x4c>
 8013610:	1c59      	adds	r1, r3, #1
 8013612:	d103      	bne.n	801361c <_raise_r+0x42>
 8013614:	2316      	movs	r3, #22
 8013616:	6003      	str	r3, [r0, #0]
 8013618:	2001      	movs	r0, #1
 801361a:	e7e7      	b.n	80135ec <_raise_r+0x12>
 801361c:	2100      	movs	r1, #0
 801361e:	4620      	mov	r0, r4
 8013620:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8013624:	4798      	blx	r3
 8013626:	2000      	movs	r0, #0
 8013628:	e7e0      	b.n	80135ec <_raise_r+0x12>
	...

0801362c <raise>:
 801362c:	4b02      	ldr	r3, [pc, #8]	@ (8013638 <raise+0xc>)
 801362e:	4601      	mov	r1, r0
 8013630:	6818      	ldr	r0, [r3, #0]
 8013632:	f7ff bfd2 	b.w	80135da <_raise_r>
 8013636:	bf00      	nop
 8013638:	2000003c 	.word	0x2000003c

0801363c <_kill_r>:
 801363c:	b538      	push	{r3, r4, r5, lr}
 801363e:	2300      	movs	r3, #0
 8013640:	4d06      	ldr	r5, [pc, #24]	@ (801365c <_kill_r+0x20>)
 8013642:	4604      	mov	r4, r0
 8013644:	4608      	mov	r0, r1
 8013646:	4611      	mov	r1, r2
 8013648:	602b      	str	r3, [r5, #0]
 801364a:	f7f0 fd14 	bl	8004076 <_kill>
 801364e:	1c43      	adds	r3, r0, #1
 8013650:	d102      	bne.n	8013658 <_kill_r+0x1c>
 8013652:	682b      	ldr	r3, [r5, #0]
 8013654:	b103      	cbz	r3, 8013658 <_kill_r+0x1c>
 8013656:	6023      	str	r3, [r4, #0]
 8013658:	bd38      	pop	{r3, r4, r5, pc}
 801365a:	bf00      	nop
 801365c:	200008dc 	.word	0x200008dc

08013660 <_getpid_r>:
 8013660:	f7f0 bd01 	b.w	8004066 <_getpid>
 8013664:	0000      	movs	r0, r0
	...

08013668 <ceil>:
 8013668:	ec51 0b10 	vmov	r0, r1, d0
 801366c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8013670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013674:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8013678:	460c      	mov	r4, r1
 801367a:	4605      	mov	r5, r0
 801367c:	4680      	mov	r8, r0
 801367e:	2e13      	cmp	r6, #19
 8013680:	dc2f      	bgt.n	80136e2 <ceil+0x7a>
 8013682:	2e00      	cmp	r6, #0
 8013684:	da11      	bge.n	80136aa <ceil+0x42>
 8013686:	a332      	add	r3, pc, #200	@ (adr r3, 8013750 <ceil+0xe8>)
 8013688:	e9d3 2300 	ldrd	r2, r3, [r3]
 801368c:	f7ee fb90 	bl	8001db0 <__adddf3>
 8013690:	2200      	movs	r2, #0
 8013692:	2300      	movs	r3, #0
 8013694:	f7ee ffd2 	bl	800263c <__aeabi_dcmpgt>
 8013698:	b120      	cbz	r0, 80136a4 <ceil+0x3c>
 801369a:	2c00      	cmp	r4, #0
 801369c:	db50      	blt.n	8013740 <ceil+0xd8>
 801369e:	4325      	orrs	r5, r4
 80136a0:	d152      	bne.n	8013748 <ceil+0xe0>
 80136a2:	462c      	mov	r4, r5
 80136a4:	4621      	mov	r1, r4
 80136a6:	4628      	mov	r0, r5
 80136a8:	e024      	b.n	80136f4 <ceil+0x8c>
 80136aa:	4f2b      	ldr	r7, [pc, #172]	@ (8013758 <ceil+0xf0>)
 80136ac:	4137      	asrs	r7, r6
 80136ae:	ea01 0307 	and.w	r3, r1, r7
 80136b2:	4303      	orrs	r3, r0
 80136b4:	d01e      	beq.n	80136f4 <ceil+0x8c>
 80136b6:	a326      	add	r3, pc, #152	@ (adr r3, 8013750 <ceil+0xe8>)
 80136b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136bc:	f7ee fb78 	bl	8001db0 <__adddf3>
 80136c0:	2200      	movs	r2, #0
 80136c2:	2300      	movs	r3, #0
 80136c4:	f7ee ffba 	bl	800263c <__aeabi_dcmpgt>
 80136c8:	2800      	cmp	r0, #0
 80136ca:	d0eb      	beq.n	80136a4 <ceil+0x3c>
 80136cc:	2c00      	cmp	r4, #0
 80136ce:	f04f 0500 	mov.w	r5, #0
 80136d2:	bfc2      	ittt	gt
 80136d4:	f44f 1380 	movgt.w	r3, #1048576	@ 0x100000
 80136d8:	4133      	asrgt	r3, r6
 80136da:	18e4      	addgt	r4, r4, r3
 80136dc:	ea24 0407 	bic.w	r4, r4, r7
 80136e0:	e7e0      	b.n	80136a4 <ceil+0x3c>
 80136e2:	2e33      	cmp	r6, #51	@ 0x33
 80136e4:	dd0a      	ble.n	80136fc <ceil+0x94>
 80136e6:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80136ea:	d103      	bne.n	80136f4 <ceil+0x8c>
 80136ec:	4602      	mov	r2, r0
 80136ee:	460b      	mov	r3, r1
 80136f0:	f7ee fb5e 	bl	8001db0 <__adddf3>
 80136f4:	ec41 0b10 	vmov	d0, r0, r1
 80136f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136fc:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8013700:	f04f 37ff 	mov.w	r7, #4294967295
 8013704:	40df      	lsrs	r7, r3
 8013706:	4238      	tst	r0, r7
 8013708:	d0f4      	beq.n	80136f4 <ceil+0x8c>
 801370a:	a311      	add	r3, pc, #68	@ (adr r3, 8013750 <ceil+0xe8>)
 801370c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013710:	f7ee fb4e 	bl	8001db0 <__adddf3>
 8013714:	2200      	movs	r2, #0
 8013716:	2300      	movs	r3, #0
 8013718:	f7ee ff90 	bl	800263c <__aeabi_dcmpgt>
 801371c:	2800      	cmp	r0, #0
 801371e:	d0c1      	beq.n	80136a4 <ceil+0x3c>
 8013720:	2c00      	cmp	r4, #0
 8013722:	dd0a      	ble.n	801373a <ceil+0xd2>
 8013724:	2e14      	cmp	r6, #20
 8013726:	d101      	bne.n	801372c <ceil+0xc4>
 8013728:	3401      	adds	r4, #1
 801372a:	e006      	b.n	801373a <ceil+0xd2>
 801372c:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8013730:	2301      	movs	r3, #1
 8013732:	40b3      	lsls	r3, r6
 8013734:	441d      	add	r5, r3
 8013736:	45a8      	cmp	r8, r5
 8013738:	d8f6      	bhi.n	8013728 <ceil+0xc0>
 801373a:	ea25 0507 	bic.w	r5, r5, r7
 801373e:	e7b1      	b.n	80136a4 <ceil+0x3c>
 8013740:	2500      	movs	r5, #0
 8013742:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 8013746:	e7ad      	b.n	80136a4 <ceil+0x3c>
 8013748:	2500      	movs	r5, #0
 801374a:	4c04      	ldr	r4, [pc, #16]	@ (801375c <ceil+0xf4>)
 801374c:	e7aa      	b.n	80136a4 <ceil+0x3c>
 801374e:	bf00      	nop
 8013750:	8800759c 	.word	0x8800759c
 8013754:	7e37e43c 	.word	0x7e37e43c
 8013758:	000fffff 	.word	0x000fffff
 801375c:	3ff00000 	.word	0x3ff00000

08013760 <floor>:
 8013760:	ec51 0b10 	vmov	r0, r1, d0
 8013764:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8013768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801376c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8013770:	460c      	mov	r4, r1
 8013772:	4605      	mov	r5, r0
 8013774:	4680      	mov	r8, r0
 8013776:	2e13      	cmp	r6, #19
 8013778:	dc35      	bgt.n	80137e6 <floor+0x86>
 801377a:	2e00      	cmp	r6, #0
 801377c:	da17      	bge.n	80137ae <floor+0x4e>
 801377e:	a334      	add	r3, pc, #208	@ (adr r3, 8013850 <floor+0xf0>)
 8013780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013784:	f7ee fb14 	bl	8001db0 <__adddf3>
 8013788:	2200      	movs	r2, #0
 801378a:	2300      	movs	r3, #0
 801378c:	f7ee ff56 	bl	800263c <__aeabi_dcmpgt>
 8013790:	b150      	cbz	r0, 80137a8 <floor+0x48>
 8013792:	2c00      	cmp	r4, #0
 8013794:	da56      	bge.n	8013844 <floor+0xe4>
 8013796:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801379a:	432c      	orrs	r4, r5
 801379c:	2500      	movs	r5, #0
 801379e:	42ac      	cmp	r4, r5
 80137a0:	4c2d      	ldr	r4, [pc, #180]	@ (8013858 <floor+0xf8>)
 80137a2:	bf08      	it	eq
 80137a4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80137a8:	4621      	mov	r1, r4
 80137aa:	4628      	mov	r0, r5
 80137ac:	e024      	b.n	80137f8 <floor+0x98>
 80137ae:	4f2b      	ldr	r7, [pc, #172]	@ (801385c <floor+0xfc>)
 80137b0:	4137      	asrs	r7, r6
 80137b2:	ea01 0307 	and.w	r3, r1, r7
 80137b6:	4303      	orrs	r3, r0
 80137b8:	d01e      	beq.n	80137f8 <floor+0x98>
 80137ba:	a325      	add	r3, pc, #148	@ (adr r3, 8013850 <floor+0xf0>)
 80137bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137c0:	f7ee faf6 	bl	8001db0 <__adddf3>
 80137c4:	2200      	movs	r2, #0
 80137c6:	2300      	movs	r3, #0
 80137c8:	f7ee ff38 	bl	800263c <__aeabi_dcmpgt>
 80137cc:	2800      	cmp	r0, #0
 80137ce:	d0eb      	beq.n	80137a8 <floor+0x48>
 80137d0:	2c00      	cmp	r4, #0
 80137d2:	f04f 0500 	mov.w	r5, #0
 80137d6:	bfbe      	ittt	lt
 80137d8:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80137dc:	4133      	asrlt	r3, r6
 80137de:	18e4      	addlt	r4, r4, r3
 80137e0:	ea24 0407 	bic.w	r4, r4, r7
 80137e4:	e7e0      	b.n	80137a8 <floor+0x48>
 80137e6:	2e33      	cmp	r6, #51	@ 0x33
 80137e8:	dd0a      	ble.n	8013800 <floor+0xa0>
 80137ea:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80137ee:	d103      	bne.n	80137f8 <floor+0x98>
 80137f0:	4602      	mov	r2, r0
 80137f2:	460b      	mov	r3, r1
 80137f4:	f7ee fadc 	bl	8001db0 <__adddf3>
 80137f8:	ec41 0b10 	vmov	d0, r0, r1
 80137fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013800:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8013804:	f04f 37ff 	mov.w	r7, #4294967295
 8013808:	40df      	lsrs	r7, r3
 801380a:	4207      	tst	r7, r0
 801380c:	d0f4      	beq.n	80137f8 <floor+0x98>
 801380e:	a310      	add	r3, pc, #64	@ (adr r3, 8013850 <floor+0xf0>)
 8013810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013814:	f7ee facc 	bl	8001db0 <__adddf3>
 8013818:	2200      	movs	r2, #0
 801381a:	2300      	movs	r3, #0
 801381c:	f7ee ff0e 	bl	800263c <__aeabi_dcmpgt>
 8013820:	2800      	cmp	r0, #0
 8013822:	d0c1      	beq.n	80137a8 <floor+0x48>
 8013824:	2c00      	cmp	r4, #0
 8013826:	da0a      	bge.n	801383e <floor+0xde>
 8013828:	2e14      	cmp	r6, #20
 801382a:	d101      	bne.n	8013830 <floor+0xd0>
 801382c:	3401      	adds	r4, #1
 801382e:	e006      	b.n	801383e <floor+0xde>
 8013830:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8013834:	2301      	movs	r3, #1
 8013836:	40b3      	lsls	r3, r6
 8013838:	441d      	add	r5, r3
 801383a:	4545      	cmp	r5, r8
 801383c:	d3f6      	bcc.n	801382c <floor+0xcc>
 801383e:	ea25 0507 	bic.w	r5, r5, r7
 8013842:	e7b1      	b.n	80137a8 <floor+0x48>
 8013844:	2500      	movs	r5, #0
 8013846:	462c      	mov	r4, r5
 8013848:	e7ae      	b.n	80137a8 <floor+0x48>
 801384a:	bf00      	nop
 801384c:	f3af 8000 	nop.w
 8013850:	8800759c 	.word	0x8800759c
 8013854:	7e37e43c 	.word	0x7e37e43c
 8013858:	bff00000 	.word	0xbff00000
 801385c:	000fffff 	.word	0x000fffff

08013860 <round>:
 8013860:	ec51 0b10 	vmov	r0, r1, d0
 8013864:	b570      	push	{r4, r5, r6, lr}
 8013866:	f3c1 540a 	ubfx	r4, r1, #20, #11
 801386a:	460b      	mov	r3, r1
 801386c:	4605      	mov	r5, r0
 801386e:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 8013872:	2a13      	cmp	r2, #19
 8013874:	dc1b      	bgt.n	80138ae <round+0x4e>
 8013876:	2a00      	cmp	r2, #0
 8013878:	da0b      	bge.n	8013892 <round+0x32>
 801387a:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 801387e:	3201      	adds	r2, #1
 8013880:	bf04      	itt	eq
 8013882:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 8013886:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 801388a:	2200      	movs	r2, #0
 801388c:	4619      	mov	r1, r3
 801388e:	4610      	mov	r0, r2
 8013890:	e015      	b.n	80138be <round+0x5e>
 8013892:	4c15      	ldr	r4, [pc, #84]	@ (80138e8 <round+0x88>)
 8013894:	4114      	asrs	r4, r2
 8013896:	ea04 0601 	and.w	r6, r4, r1
 801389a:	4306      	orrs	r6, r0
 801389c:	d00f      	beq.n	80138be <round+0x5e>
 801389e:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 80138a2:	fa41 f202 	asr.w	r2, r1, r2
 80138a6:	4413      	add	r3, r2
 80138a8:	ea23 0304 	bic.w	r3, r3, r4
 80138ac:	e7ed      	b.n	801388a <round+0x2a>
 80138ae:	2a33      	cmp	r2, #51	@ 0x33
 80138b0:	dd08      	ble.n	80138c4 <round+0x64>
 80138b2:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80138b6:	d102      	bne.n	80138be <round+0x5e>
 80138b8:	4602      	mov	r2, r0
 80138ba:	f7ee fa79 	bl	8001db0 <__adddf3>
 80138be:	ec41 0b10 	vmov	d0, r0, r1
 80138c2:	bd70      	pop	{r4, r5, r6, pc}
 80138c4:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 80138c8:	f04f 34ff 	mov.w	r4, #4294967295
 80138cc:	40f4      	lsrs	r4, r6
 80138ce:	4204      	tst	r4, r0
 80138d0:	d0f5      	beq.n	80138be <round+0x5e>
 80138d2:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 80138d6:	2201      	movs	r2, #1
 80138d8:	408a      	lsls	r2, r1
 80138da:	1952      	adds	r2, r2, r5
 80138dc:	bf28      	it	cs
 80138de:	3301      	addcs	r3, #1
 80138e0:	ea22 0204 	bic.w	r2, r2, r4
 80138e4:	e7d2      	b.n	801388c <round+0x2c>
 80138e6:	bf00      	nop
 80138e8:	000fffff 	.word	0x000fffff

080138ec <_init>:
 80138ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80138ee:	bf00      	nop
 80138f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80138f2:	bc08      	pop	{r3}
 80138f4:	469e      	mov	lr, r3
 80138f6:	4770      	bx	lr

080138f8 <_fini>:
 80138f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80138fa:	bf00      	nop
 80138fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80138fe:	bc08      	pop	{r3}
 8013900:	469e      	mov	lr, r3
 8013902:	4770      	bx	lr
