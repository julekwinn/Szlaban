
Projekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014b04  08000238  08000238  00001238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001cd9  08014d40  08014d40  00015d40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 CMOX_CTA_PROTECTED_DATA 00000500  08016a1c  08016a1c  00017a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000008  08016f1c  08016f1c  00017f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000004  08016f24  08016f24  00017f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .fini_array   00000004  08016f28  08016f28  00017f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .data         000001f0  20000000  08016f2c  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          0000075c  200001f0  0801711c  000181f0  2**2
                  ALLOC
  9 ._user_heap_stack 00000604  2000094c  0801711c  0001894c  2**0
                  ALLOC
 10 .ARM.attributes 0000003a  00000000  00000000  000181f0  2**0
                  CONTENTS, READONLY
 11 .debug_info   00024333  00000000  00000000  0001822a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00004de8  00000000  00000000  0003c55d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001b48  00000000  00000000  00041348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000014dc  00000000  00000000  00042e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003743d  00000000  00000000  0004436c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00028d8d  00000000  00000000  0007b7a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00139c0d  00000000  00000000  000a4536  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  001de143  2**0
                  CONTENTS, READONLY
 19 .iar_vfe_header 00000040  00000000  00000000  001de188  2**2
                  CONTENTS, READONLY
 20 .debug_frame  00008744  00000000  00000000  001de1c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  001e690c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	200001f0 	.word	0x200001f0
 8000254:	00000000 	.word	0x00000000
 8000258:	08014d24 	.word	0x08014d24

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	200001f4 	.word	0x200001f4
 8000274:	08014d24 	.word	0x08014d24

08000278 <cmox_cipher_encrypt>:
 8000278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800027a:	460c      	mov	r4, r1
 800027c:	4611      	mov	r1, r2
 800027e:	461a      	mov	r2, r3
 8000280:	b084      	sub	sp, #16
 8000282:	0005      	movs	r5, r0
 8000284:	4b10      	ldr	r3, [pc, #64]	@ (80002c8 <cmox_cipher_encrypt+0x50>)
 8000286:	d01b      	beq.n	80002c0 <cmox_cipher_encrypt+0x48>
 8000288:	6868      	ldr	r0, [r5, #4]
 800028a:	283a      	cmp	r0, #58	@ 0x3a
 800028c:	bf18      	it	ne
 800028e:	4b0f      	ldrne	r3, [pc, #60]	@ (80002cc <cmox_cipher_encrypt+0x54>)
 8000290:	d116      	bne.n	80002c0 <cmox_cipher_encrypt+0x48>
 8000292:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8000294:	b90c      	cbnz	r4, 800029a <cmox_cipher_encrypt+0x22>
 8000296:	b109      	cbz	r1, 800029c <cmox_cipher_encrypt+0x24>
 8000298:	e012      	b.n	80002c0 <cmox_cipher_encrypt+0x48>
 800029a:	b188      	cbz	r0, 80002c0 <cmox_cipher_encrypt+0x48>
 800029c:	b182      	cbz	r2, 80002c0 <cmox_cipher_encrypt+0x48>
 800029e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80002a0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80002a2:	b907      	cbnz	r7, 80002a6 <cmox_cipher_encrypt+0x2e>
 80002a4:	b966      	cbnz	r6, 80002c0 <cmox_cipher_encrypt+0x48>
 80002a6:	b158      	cbz	r0, 80002c0 <cmox_cipher_encrypt+0x48>
 80002a8:	f8dd c038 	ldr.w	ip, [sp, #56]	@ 0x38
 80002ac:	9002      	str	r0, [sp, #8]
 80002ae:	9601      	str	r6, [sp, #4]
 80002b0:	f8cd c00c 	str.w	ip, [sp, #12]
 80002b4:	9700      	str	r7, [sp, #0]
 80002b6:	4620      	mov	r0, r4
 80002b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80002ba:	682c      	ldr	r4, [r5, #0]
 80002bc:	47a0      	blx	r4
 80002be:	4603      	mov	r3, r0
 80002c0:	4618      	mov	r0, r3
 80002c2:	b005      	add	sp, #20
 80002c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002c6:	bf00      	nop
 80002c8:	00010003 	.word	0x00010003
 80002cc:	00010002 	.word	0x00010002

080002d0 <cmox_cipher_decrypt>:
 80002d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002d2:	460c      	mov	r4, r1
 80002d4:	4611      	mov	r1, r2
 80002d6:	461a      	mov	r2, r3
 80002d8:	b084      	sub	sp, #16
 80002da:	0005      	movs	r5, r0
 80002dc:	4b10      	ldr	r3, [pc, #64]	@ (8000320 <cmox_cipher_decrypt+0x50>)
 80002de:	d01c      	beq.n	800031a <cmox_cipher_decrypt+0x4a>
 80002e0:	6868      	ldr	r0, [r5, #4]
 80002e2:	f110 0f3b 	cmn.w	r0, #59	@ 0x3b
 80002e6:	bf18      	it	ne
 80002e8:	4b0e      	ldrne	r3, [pc, #56]	@ (8000324 <cmox_cipher_decrypt+0x54>)
 80002ea:	d116      	bne.n	800031a <cmox_cipher_decrypt+0x4a>
 80002ec:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80002ee:	b90c      	cbnz	r4, 80002f4 <cmox_cipher_decrypt+0x24>
 80002f0:	b109      	cbz	r1, 80002f6 <cmox_cipher_decrypt+0x26>
 80002f2:	e012      	b.n	800031a <cmox_cipher_decrypt+0x4a>
 80002f4:	b188      	cbz	r0, 800031a <cmox_cipher_decrypt+0x4a>
 80002f6:	b182      	cbz	r2, 800031a <cmox_cipher_decrypt+0x4a>
 80002f8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80002fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80002fc:	b907      	cbnz	r7, 8000300 <cmox_cipher_decrypt+0x30>
 80002fe:	b966      	cbnz	r6, 800031a <cmox_cipher_decrypt+0x4a>
 8000300:	b158      	cbz	r0, 800031a <cmox_cipher_decrypt+0x4a>
 8000302:	f8dd c038 	ldr.w	ip, [sp, #56]	@ 0x38
 8000306:	9002      	str	r0, [sp, #8]
 8000308:	9601      	str	r6, [sp, #4]
 800030a:	f8cd c00c 	str.w	ip, [sp, #12]
 800030e:	9700      	str	r7, [sp, #0]
 8000310:	4620      	mov	r0, r4
 8000312:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8000314:	682c      	ldr	r4, [r5, #0]
 8000316:	47a0      	blx	r4
 8000318:	4603      	mov	r3, r0
 800031a:	4618      	mov	r0, r3
 800031c:	b005      	add	sp, #20
 800031e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000320:	00010003 	.word	0x00010003
 8000324:	00010002 	.word	0x00010002

08000328 <cmox_cipher_innerCompute>:
 8000328:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 800032c:	4604      	mov	r4, r0
 800032e:	460d      	mov	r5, r1
 8000330:	6821      	ldr	r1, [r4, #0]
 8000332:	4616      	mov	r6, r2
 8000334:	461f      	mov	r7, r3
 8000336:	684a      	ldr	r2, [r1, #4]
 8000338:	4790      	blx	r2
 800033a:	4680      	mov	r8, r0
 800033c:	f5b8 3f80 	cmp.w	r8, #65536	@ 0x10000
 8000340:	d11d      	bne.n	800037e <cmox_cipher_innerCompute+0x56>
 8000342:	6823      	ldr	r3, [r4, #0]
 8000344:	4639      	mov	r1, r7
 8000346:	9a08      	ldr	r2, [sp, #32]
 8000348:	689f      	ldr	r7, [r3, #8]
 800034a:	4620      	mov	r0, r4
 800034c:	47b8      	blx	r7
 800034e:	4680      	mov	r8, r0
 8000350:	f5b8 3f80 	cmp.w	r8, #65536	@ 0x10000
 8000354:	d113      	bne.n	800037e <cmox_cipher_innerCompute+0x56>
 8000356:	6823      	ldr	r3, [r4, #0]
 8000358:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800035a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800035c:	68df      	ldr	r7, [r3, #12]
 800035e:	4620      	mov	r0, r4
 8000360:	47b8      	blx	r7
 8000362:	4680      	mov	r8, r0
 8000364:	f5b8 3f80 	cmp.w	r8, #65536	@ 0x10000
 8000368:	d109      	bne.n	800037e <cmox_cipher_innerCompute+0x56>
 800036a:	4629      	mov	r1, r5
 800036c:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800036e:	4632      	mov	r2, r6
 8000370:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8000372:	9000      	str	r0, [sp, #0]
 8000374:	6825      	ldr	r5, [r4, #0]
 8000376:	4620      	mov	r0, r4
 8000378:	6a2e      	ldr	r6, [r5, #32]
 800037a:	47b0      	blx	r6
 800037c:	4680      	mov	r8, r0
 800037e:	6821      	ldr	r1, [r4, #0]
 8000380:	4620      	mov	r0, r4
 8000382:	680a      	ldr	r2, [r1, #0]
 8000384:	4790      	blx	r2
 8000386:	4640      	mov	r0, r8
 8000388:	e8bd 81f6 	ldmia.w	sp!, {r1, r2, r4, r5, r6, r7, r8, pc}

0800038c <CMOX_CTR_ENC_AESFAST_IMPL>:
 800038c:	0e39 0800 62fc 0801                         9....b..

08000394 <cmox_ctr_compute>:
 8000394:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000396:	b0cb      	sub	sp, #300	@ 0x12c
 8000398:	4604      	mov	r4, r0
 800039a:	460d      	mov	r5, r1
 800039c:	4616      	mov	r6, r2
 800039e:	461f      	mov	r7, r3
 80003a0:	4909      	ldr	r1, [pc, #36]	@ (80003c8 <cmox_ctr_compute+0x34>)
 80003a2:	a805      	add	r0, sp, #20
 80003a4:	f000 fd58 	bl	8000e58 <cmox_ctr_construct>
 80003a8:	9953      	ldr	r1, [sp, #332]	@ 0x14c
 80003aa:	9a52      	ldr	r2, [sp, #328]	@ 0x148
 80003ac:	9104      	str	r1, [sp, #16]
 80003ae:	9951      	ldr	r1, [sp, #324]	@ 0x144
 80003b0:	9203      	str	r2, [sp, #12]
 80003b2:	9a50      	ldr	r2, [sp, #320]	@ 0x140
 80003b4:	9102      	str	r1, [sp, #8]
 80003b6:	9700      	str	r7, [sp, #0]
 80003b8:	9201      	str	r2, [sp, #4]
 80003ba:	4633      	mov	r3, r6
 80003bc:	462a      	mov	r2, r5
 80003be:	4621      	mov	r1, r4
 80003c0:	f7ff ffb2 	bl	8000328 <cmox_cipher_innerCompute>
 80003c4:	b04b      	add	sp, #300	@ 0x12c
 80003c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003c8:	0800038c 	.word	0x0800038c

080003cc <cmox_hash_common_compute>:
 80003cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80003d0:	4604      	mov	r4, r0
 80003d2:	460e      	mov	r6, r1
 80003d4:	6821      	ldr	r1, [r4, #0]
 80003d6:	4617      	mov	r7, r2
 80003d8:	461d      	mov	r5, r3
 80003da:	684a      	ldr	r2, [r1, #4]
 80003dc:	4790      	blx	r2
 80003de:	4680      	mov	r8, r0
 80003e0:	f5b8 3f00 	cmp.w	r8, #131072	@ 0x20000
 80003e4:	d119      	bne.n	800041a <cmox_hash_common_compute+0x4e>
 80003e6:	6822      	ldr	r2, [r4, #0]
 80003e8:	9906      	ldr	r1, [sp, #24]
 80003ea:	4620      	mov	r0, r4
 80003ec:	6893      	ldr	r3, [r2, #8]
 80003ee:	4798      	blx	r3
 80003f0:	4680      	mov	r8, r0
 80003f2:	f5b8 3f00 	cmp.w	r8, #131072	@ 0x20000
 80003f6:	d110      	bne.n	800041a <cmox_hash_common_compute+0x4e>
 80003f8:	6823      	ldr	r3, [r4, #0]
 80003fa:	4631      	mov	r1, r6
 80003fc:	463a      	mov	r2, r7
 80003fe:	68de      	ldr	r6, [r3, #12]
 8000400:	4620      	mov	r0, r4
 8000402:	47b0      	blx	r6
 8000404:	4680      	mov	r8, r0
 8000406:	f5b8 3f00 	cmp.w	r8, #131072	@ 0x20000
 800040a:	d106      	bne.n	800041a <cmox_hash_common_compute+0x4e>
 800040c:	6823      	ldr	r3, [r4, #0]
 800040e:	4629      	mov	r1, r5
 8000410:	9a07      	ldr	r2, [sp, #28]
 8000412:	691d      	ldr	r5, [r3, #16]
 8000414:	4620      	mov	r0, r4
 8000416:	47a8      	blx	r5
 8000418:	4680      	mov	r8, r0
 800041a:	6821      	ldr	r1, [r4, #0]
 800041c:	4620      	mov	r0, r4
 800041e:	680a      	ldr	r2, [r1, #0]
 8000420:	4790      	blx	r2
 8000422:	4640      	mov	r0, r8
 8000424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000428 <cmox_sha256_setDefaultMacLen>:
 8000428:	2120      	movs	r1, #32
 800042a:	6041      	str	r1, [r0, #4]
 800042c:	4770      	bx	lr

0800042e <cmox_sha256_getDefaultMacLen>:
 800042e:	2020      	movs	r0, #32
 8000430:	4770      	bx	lr

08000432 <cmox_sha256_getBlockLen>:
 8000432:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8000434:	4770      	bx	lr
	...

08000438 <CMOX_HMAC_SUPPORT_SHA256>:
 8000438:	0429 0800 042f 0800 0433 0800               ).../...3...

08000444 <CMOX_HMAC_SHA256_TABLE>:
 8000444:	0449 0800                                   I...

08000448 <cmox_hmac_sha256_constructor>:
 8000448:	b510      	push	{r4, lr}
 800044a:	4604      	mov	r4, r0
 800044c:	f104 0010 	add.w	r0, r4, #16
 8000450:	f000 f9b0 	bl	80007b4 <cmox_sha256_construct>
 8000454:	f8c4 00f8 	str.w	r0, [r4, #248]	@ 0xf8
 8000458:	4801      	ldr	r0, [pc, #4]	@ (8000460 <cmox_hmac_sha256_constructor+0x18>)
 800045a:	f8c4 017c 	str.w	r0, [r4, #380]	@ 0x17c
 800045e:	bd10      	pop	{r4, pc}
 8000460:	08000438 	.word	0x08000438

08000464 <cmox_hmac_sha256_compute>:
 8000464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000466:	b0e6      	sub	sp, #408	@ 0x198
 8000468:	4604      	mov	r4, r0
 800046a:	460d      	mov	r5, r1
 800046c:	4616      	mov	r6, r2
 800046e:	461f      	mov	r7, r3
 8000470:	490a      	ldr	r1, [pc, #40]	@ (800049c <cmox_hmac_sha256_compute+0x38>)
 8000472:	a806      	add	r0, sp, #24
 8000474:	f000 ff34 	bl	80012e0 <cmox_hmac_construct>
 8000478:	9970      	ldr	r1, [sp, #448]	@ 0x1c0
 800047a:	9a6f      	ldr	r2, [sp, #444]	@ 0x1bc
 800047c:	9700      	str	r7, [sp, #0]
 800047e:	9105      	str	r1, [sp, #20]
 8000480:	996e      	ldr	r1, [sp, #440]	@ 0x1b8
 8000482:	9204      	str	r2, [sp, #16]
 8000484:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 8000486:	9103      	str	r1, [sp, #12]
 8000488:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 800048a:	9202      	str	r2, [sp, #8]
 800048c:	4633      	mov	r3, r6
 800048e:	9101      	str	r1, [sp, #4]
 8000490:	462a      	mov	r2, r5
 8000492:	4621      	mov	r1, r4
 8000494:	f000 f832 	bl	80004fc <cmox_mac_innerCompute>
 8000498:	b067      	add	sp, #412	@ 0x19c
 800049a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800049c:	08000444 	.word	0x08000444

080004a0 <cmox_hmac_sha256_verify>:
 80004a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004a2:	b0e6      	sub	sp, #408	@ 0x198
 80004a4:	4604      	mov	r4, r0
 80004a6:	460d      	mov	r5, r1
 80004a8:	4616      	mov	r6, r2
 80004aa:	461f      	mov	r7, r3
 80004ac:	4909      	ldr	r1, [pc, #36]	@ (80004d4 <cmox_hmac_sha256_verify+0x34>)
 80004ae:	a806      	add	r0, sp, #24
 80004b0:	f000 ff16 	bl	80012e0 <cmox_hmac_construct>
 80004b4:	996f      	ldr	r1, [sp, #444]	@ 0x1bc
 80004b6:	9a6e      	ldr	r2, [sp, #440]	@ 0x1b8
 80004b8:	9104      	str	r1, [sp, #16]
 80004ba:	996d      	ldr	r1, [sp, #436]	@ 0x1b4
 80004bc:	9203      	str	r2, [sp, #12]
 80004be:	9a6c      	ldr	r2, [sp, #432]	@ 0x1b0
 80004c0:	9102      	str	r1, [sp, #8]
 80004c2:	9700      	str	r7, [sp, #0]
 80004c4:	9201      	str	r2, [sp, #4]
 80004c6:	4633      	mov	r3, r6
 80004c8:	462a      	mov	r2, r5
 80004ca:	4621      	mov	r1, r4
 80004cc:	f000 f859 	bl	8000582 <cmox_mac_innerVerify>
 80004d0:	b067      	add	sp, #412	@ 0x19c
 80004d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d4:	08000444 	.word	0x08000444

080004d8 <cmox_initialize>:
 80004d8:	b140      	cbz	r0, 80004ec <cmox_initialize+0x14>
 80004da:	6801      	ldr	r1, [r0, #0]
 80004dc:	b129      	cbz	r1, 80004ea <cmox_initialize+0x12>
 80004de:	4a04      	ldr	r2, [pc, #16]	@ (80004f0 <cmox_initialize+0x18>)
 80004e0:	4291      	cmp	r1, r2
 80004e2:	d102      	bne.n	80004ea <cmox_initialize+0x12>
 80004e4:	2101      	movs	r1, #1
 80004e6:	4b03      	ldr	r3, [pc, #12]	@ (80004f4 <cmox_initialize+0x1c>)
 80004e8:	7019      	strb	r1, [r3, #0]
 80004ea:	6840      	ldr	r0, [r0, #4]
 80004ec:	f002 be48 	b.w	8003180 <cmox_ll_init>
 80004f0:	48370000 	.word	0x48370000
 80004f4:	2000020c 	.word	0x2000020c

080004f8 <cmox_finalize>:
 80004f8:	f002 be64 	b.w	80031c4 <cmox_ll_deInit>

080004fc <cmox_mac_innerCompute>:
 80004fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000500:	4604      	mov	r4, r0
 8000502:	460d      	mov	r5, r1
 8000504:	6821      	ldr	r1, [r4, #0]
 8000506:	4616      	mov	r6, r2
 8000508:	461f      	mov	r7, r3
 800050a:	684a      	ldr	r2, [r1, #4]
 800050c:	4790      	blx	r2
 800050e:	4680      	mov	r8, r0
 8000510:	f5b8 3f40 	cmp.w	r8, #196608	@ 0x30000
 8000514:	d12e      	bne.n	8000574 <cmox_mac_innerCompute+0x78>
 8000516:	6822      	ldr	r2, [r4, #0]
 8000518:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800051a:	4620      	mov	r0, r4
 800051c:	6893      	ldr	r3, [r2, #8]
 800051e:	4798      	blx	r3
 8000520:	4680      	mov	r8, r0
 8000522:	f5b8 3f40 	cmp.w	r8, #196608	@ 0x30000
 8000526:	d125      	bne.n	8000574 <cmox_mac_innerCompute+0x78>
 8000528:	6823      	ldr	r3, [r4, #0]
 800052a:	9a08      	ldr	r2, [sp, #32]
 800052c:	9907      	ldr	r1, [sp, #28]
 800052e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8000532:	4620      	mov	r0, r4
 8000534:	47e0      	blx	ip
 8000536:	4680      	mov	r8, r0
 8000538:	f5b8 3f40 	cmp.w	r8, #196608	@ 0x30000
 800053c:	d11a      	bne.n	8000574 <cmox_mac_innerCompute+0x78>
 800053e:	6823      	ldr	r3, [r4, #0]
 8000540:	4639      	mov	r1, r7
 8000542:	9a06      	ldr	r2, [sp, #24]
 8000544:	691f      	ldr	r7, [r3, #16]
 8000546:	4620      	mov	r0, r4
 8000548:	47b8      	blx	r7
 800054a:	4680      	mov	r8, r0
 800054c:	f5b8 3f40 	cmp.w	r8, #196608	@ 0x30000
 8000550:	d110      	bne.n	8000574 <cmox_mac_innerCompute+0x78>
 8000552:	6823      	ldr	r3, [r4, #0]
 8000554:	4629      	mov	r1, r5
 8000556:	4632      	mov	r2, r6
 8000558:	695d      	ldr	r5, [r3, #20]
 800055a:	4620      	mov	r0, r4
 800055c:	47a8      	blx	r5
 800055e:	4680      	mov	r8, r0
 8000560:	f5b8 3f40 	cmp.w	r8, #196608	@ 0x30000
 8000564:	d106      	bne.n	8000574 <cmox_mac_innerCompute+0x78>
 8000566:	6823      	ldr	r3, [r4, #0]
 8000568:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800056a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800056c:	699d      	ldr	r5, [r3, #24]
 800056e:	4620      	mov	r0, r4
 8000570:	47a8      	blx	r5
 8000572:	4680      	mov	r8, r0
 8000574:	6821      	ldr	r1, [r4, #0]
 8000576:	4620      	mov	r0, r4
 8000578:	680a      	ldr	r2, [r1, #0]
 800057a:	4790      	blx	r2
 800057c:	4640      	mov	r0, r8
 800057e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000582 <cmox_mac_innerVerify>:
 8000582:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000586:	4604      	mov	r4, r0
 8000588:	460d      	mov	r5, r1
 800058a:	6821      	ldr	r1, [r4, #0]
 800058c:	4616      	mov	r6, r2
 800058e:	461f      	mov	r7, r3
 8000590:	684a      	ldr	r2, [r1, #4]
 8000592:	4790      	blx	r2
 8000594:	4680      	mov	r8, r0
 8000596:	f5b8 3f40 	cmp.w	r8, #196608	@ 0x30000
 800059a:	d12e      	bne.n	80005fa <cmox_mac_innerVerify+0x78>
 800059c:	6822      	ldr	r2, [r4, #0]
 800059e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80005a0:	4620      	mov	r0, r4
 80005a2:	6893      	ldr	r3, [r2, #8]
 80005a4:	4798      	blx	r3
 80005a6:	4680      	mov	r8, r0
 80005a8:	f5b8 3f40 	cmp.w	r8, #196608	@ 0x30000
 80005ac:	d125      	bne.n	80005fa <cmox_mac_innerVerify+0x78>
 80005ae:	6823      	ldr	r3, [r4, #0]
 80005b0:	9a08      	ldr	r2, [sp, #32]
 80005b2:	9907      	ldr	r1, [sp, #28]
 80005b4:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 80005b8:	4620      	mov	r0, r4
 80005ba:	47e0      	blx	ip
 80005bc:	4680      	mov	r8, r0
 80005be:	f5b8 3f40 	cmp.w	r8, #196608	@ 0x30000
 80005c2:	d11a      	bne.n	80005fa <cmox_mac_innerVerify+0x78>
 80005c4:	6823      	ldr	r3, [r4, #0]
 80005c6:	4639      	mov	r1, r7
 80005c8:	9a06      	ldr	r2, [sp, #24]
 80005ca:	691f      	ldr	r7, [r3, #16]
 80005cc:	4620      	mov	r0, r4
 80005ce:	47b8      	blx	r7
 80005d0:	4680      	mov	r8, r0
 80005d2:	f5b8 3f40 	cmp.w	r8, #196608	@ 0x30000
 80005d6:	d110      	bne.n	80005fa <cmox_mac_innerVerify+0x78>
 80005d8:	6823      	ldr	r3, [r4, #0]
 80005da:	4629      	mov	r1, r5
 80005dc:	4632      	mov	r2, r6
 80005de:	695d      	ldr	r5, [r3, #20]
 80005e0:	4620      	mov	r0, r4
 80005e2:	47a8      	blx	r5
 80005e4:	4680      	mov	r8, r0
 80005e6:	f5b8 3f40 	cmp.w	r8, #196608	@ 0x30000
 80005ea:	d106      	bne.n	80005fa <cmox_mac_innerVerify+0x78>
 80005ec:	6823      	ldr	r3, [r4, #0]
 80005ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80005f0:	2200      	movs	r2, #0
 80005f2:	69dd      	ldr	r5, [r3, #28]
 80005f4:	4620      	mov	r0, r4
 80005f6:	47a8      	blx	r5
 80005f8:	4680      	mov	r8, r0
 80005fa:	6821      	ldr	r1, [r4, #0]
 80005fc:	4620      	mov	r0, r4
 80005fe:	680a      	ldr	r2, [r1, #0]
 8000600:	4790      	blx	r2
 8000602:	4640      	mov	r0, r8
 8000604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000608 <cmox_mac_setCustomData_empty>:
 8000608:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 800060c:	4770      	bx	lr
	...

08000610 <cmox_mac_compute>:
 8000610:	2800      	cmp	r0, #0
 8000612:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000614:	460c      	mov	r4, r1
 8000616:	4611      	mov	r1, r2
 8000618:	b085      	sub	sp, #20
 800061a:	bf1c      	itt	ne
 800061c:	6805      	ldrne	r5, [r0, #0]
 800061e:	2d00      	cmpne	r5, #0
 8000620:	461a      	mov	r2, r3
 8000622:	4b0b      	ldr	r3, [pc, #44]	@ (8000650 <cmox_mac_compute+0x40>)
 8000624:	d011      	beq.n	800064a <cmox_mac_compute+0x3a>
 8000626:	b182      	cbz	r2, 800064a <cmox_mac_compute+0x3a>
 8000628:	b904      	cbnz	r4, 800062c <cmox_mac_compute+0x1c>
 800062a:	b971      	cbnz	r1, 800064a <cmox_mac_compute+0x3a>
 800062c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800062e:	b160      	cbz	r0, 800064a <cmox_mac_compute+0x3a>
 8000630:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8000632:	9002      	str	r0, [sp, #8]
 8000634:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8000636:	9604      	str	r6, [sp, #16]
 8000638:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 800063a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800063c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800063e:	9000      	str	r0, [sp, #0]
 8000640:	9703      	str	r7, [sp, #12]
 8000642:	9601      	str	r6, [sp, #4]
 8000644:	4620      	mov	r0, r4
 8000646:	47a8      	blx	r5
 8000648:	4603      	mov	r3, r0
 800064a:	4618      	mov	r0, r3
 800064c:	b005      	add	sp, #20
 800064e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000650:	00030002 	.word	0x00030002

08000654 <cmox_sha256_cleanup>:
 8000654:	b500      	push	{lr}
 8000656:	b081      	sub	sp, #4
 8000658:	6801      	ldr	r1, [r0, #0]
 800065a:	4a07      	ldr	r2, [pc, #28]	@ (8000678 <cmox_sha256_cleanup+0x24>)
 800065c:	4291      	cmp	r1, r2
 800065e:	d100      	bne.n	8000662 <cmox_sha256_cleanup+0xe>
 8000660:	b910      	cbnz	r0, 8000668 <cmox_sha256_cleanup+0x14>
 8000662:	4806      	ldr	r0, [pc, #24]	@ (800067c <cmox_sha256_cleanup+0x28>)
 8000664:	b001      	add	sp, #4
 8000666:	bd00      	pop	{pc}
 8000668:	217c      	movs	r1, #124	@ 0x7c
 800066a:	f010 ff2e 	bl	80114ca <__aeabi_memclr>
 800066e:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8000672:	b001      	add	sp, #4
 8000674:	bd00      	pop	{pc}
 8000676:	bf00      	nop
 8000678:	08000764 	.word	0x08000764
 800067c:	00020003 	.word	0x00020003

08000680 <cmox_sha256_init>:
 8000680:	4a0d      	ldr	r2, [pc, #52]	@ (80006b8 <cmox_sha256_init+0x38>)
 8000682:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000686:	e892 51f8 	ldmia.w	r2, {r3, r4, r5, r6, r7, r8, ip, lr}
 800068a:	b088      	sub	sp, #32
 800068c:	4669      	mov	r1, sp
 800068e:	e881 51f8 	stmia.w	r1, {r3, r4, r5, r6, r7, r8, ip, lr}
 8000692:	f8d0 9000 	ldr.w	r9, [r0]
 8000696:	f8df a024 	ldr.w	sl, [pc, #36]	@ 80006bc <cmox_sha256_init+0x3c>
 800069a:	45d1      	cmp	r9, sl
 800069c:	d100      	bne.n	80006a0 <cmox_sha256_init+0x20>
 800069e:	b918      	cbnz	r0, 80006a8 <cmox_sha256_init+0x28>
 80006a0:	4807      	ldr	r0, [pc, #28]	@ (80006c0 <cmox_sha256_init+0x40>)
 80006a2:	b008      	add	sp, #32
 80006a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006a8:	2220      	movs	r2, #32
 80006aa:	3008      	adds	r0, #8
 80006ac:	f000 fe65 	bl	800137a <cmox_md_init>
 80006b0:	b008      	add	sp, #32
 80006b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006b6:	bf00      	nop
 80006b8:	08000744 	.word	0x08000744
 80006bc:	08000764 	.word	0x08000764
 80006c0:	00020003 	.word	0x00020003

080006c4 <cmox_sha256_setTagLen>:
 80006c4:	2921      	cmp	r1, #33	@ 0x21
 80006c6:	d204      	bcs.n	80006d2 <cmox_sha256_setTagLen+0xe>
 80006c8:	6802      	ldr	r2, [r0, #0]
 80006ca:	4b04      	ldr	r3, [pc, #16]	@ (80006dc <cmox_sha256_setTagLen+0x18>)
 80006cc:	429a      	cmp	r2, r3
 80006ce:	d100      	bne.n	80006d2 <cmox_sha256_setTagLen+0xe>
 80006d0:	b908      	cbnz	r0, 80006d6 <cmox_sha256_setTagLen+0x12>
 80006d2:	4803      	ldr	r0, [pc, #12]	@ (80006e0 <cmox_sha256_setTagLen+0x1c>)
 80006d4:	4770      	bx	lr
 80006d6:	3008      	adds	r0, #8
 80006d8:	f000 be5e 	b.w	8001398 <cmox_md_setTagSize>
 80006dc:	08000764 	.word	0x08000764
 80006e0:	00020003 	.word	0x00020003

080006e4 <cmox_sha256_append>:
 80006e4:	b410      	push	{r4}
 80006e6:	b081      	sub	sp, #4
 80006e8:	4613      	mov	r3, r2
 80006ea:	6802      	ldr	r2, [r0, #0]
 80006ec:	4c07      	ldr	r4, [pc, #28]	@ (800070c <cmox_sha256_append+0x28>)
 80006ee:	42a2      	cmp	r2, r4
 80006f0:	d100      	bne.n	80006f4 <cmox_sha256_append+0x10>
 80006f2:	b918      	cbnz	r0, 80006fc <cmox_sha256_append+0x18>
 80006f4:	b001      	add	sp, #4
 80006f6:	4806      	ldr	r0, [pc, #24]	@ (8000710 <cmox_sha256_append+0x2c>)
 80006f8:	bc10      	pop	{r4}
 80006fa:	4770      	bx	lr
 80006fc:	f100 0224 	add.w	r2, r0, #36	@ 0x24
 8000700:	b001      	add	sp, #4
 8000702:	3008      	adds	r0, #8
 8000704:	bc10      	pop	{r4}
 8000706:	f000 be4b 	b.w	80013a0 <cmox_md_append>
 800070a:	bf00      	nop
 800070c:	08000764 	.word	0x08000764
 8000710:	00020003 	.word	0x00020003

08000714 <cmox_sha256_generateTag>:
 8000714:	b410      	push	{r4}
 8000716:	b081      	sub	sp, #4
 8000718:	4613      	mov	r3, r2
 800071a:	6802      	ldr	r2, [r0, #0]
 800071c:	4c07      	ldr	r4, [pc, #28]	@ (800073c <cmox_sha256_generateTag+0x28>)
 800071e:	42a2      	cmp	r2, r4
 8000720:	d100      	bne.n	8000724 <cmox_sha256_generateTag+0x10>
 8000722:	b918      	cbnz	r0, 800072c <cmox_sha256_generateTag+0x18>
 8000724:	b001      	add	sp, #4
 8000726:	4806      	ldr	r0, [pc, #24]	@ (8000740 <cmox_sha256_generateTag+0x2c>)
 8000728:	bc10      	pop	{r4}
 800072a:	4770      	bx	lr
 800072c:	460a      	mov	r2, r1
 800072e:	f100 0124 	add.w	r1, r0, #36	@ 0x24
 8000732:	b001      	add	sp, #4
 8000734:	3008      	adds	r0, #8
 8000736:	bc10      	pop	{r4}
 8000738:	f000 be86 	b.w	8001448 <cmox_md_generateTag>
 800073c:	08000764 	.word	0x08000764
 8000740:	00020003 	.word	0x00020003
 8000744:	6a09e667 	.word	0x6a09e667
 8000748:	bb67ae85 	.word	0xbb67ae85
 800074c:	3c6ef372 	.word	0x3c6ef372
 8000750:	a54ff53a 	.word	0xa54ff53a
 8000754:	510e527f 	.word	0x510e527f
 8000758:	9b05688c 	.word	0x9b05688c
 800075c:	1f83d9ab 	.word	0x1f83d9ab
 8000760:	5be0cd19 	.word	0x5be0cd19

08000764 <CMOX_SHA256_VTABLE>:
 8000764:	08000655 08000681 080006c5 080006e5     U...............
 8000774:	08000715                                ....

08000778 <cmox_sha256_compute>:
 8000778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800077a:	4604      	mov	r4, r0
 800077c:	b0a3      	sub	sp, #140	@ 0x8c
 800077e:	480b      	ldr	r0, [pc, #44]	@ (80007ac <cmox_sha256_compute+0x34>)
 8000780:	460d      	mov	r5, r1
 8000782:	4616      	mov	r6, r2
 8000784:	461f      	mov	r7, r3
 8000786:	9002      	str	r0, [sp, #8]
 8000788:	4b09      	ldr	r3, [pc, #36]	@ (80007b0 <cmox_sha256_compute+0x38>)
 800078a:	2208      	movs	r2, #8
 800078c:	2140      	movs	r1, #64	@ 0x40
 800078e:	a804      	add	r0, sp, #16
 8000790:	f000 fdef 	bl	8001372 <cmox_md_construct>
 8000794:	9828      	ldr	r0, [sp, #160]	@ 0xa0
 8000796:	9700      	str	r7, [sp, #0]
 8000798:	4633      	mov	r3, r6
 800079a:	9001      	str	r0, [sp, #4]
 800079c:	462a      	mov	r2, r5
 800079e:	4621      	mov	r1, r4
 80007a0:	a802      	add	r0, sp, #8
 80007a2:	f7ff fe13 	bl	80003cc <cmox_hash_common_compute>
 80007a6:	b023      	add	sp, #140	@ 0x8c
 80007a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007aa:	bf00      	nop
 80007ac:	08000764 	.word	0x08000764
 80007b0:	080162e4 	.word	0x080162e4

080007b4 <cmox_sha256_construct>:
 80007b4:	b510      	push	{r4, lr}
 80007b6:	0004      	movs	r4, r0
 80007b8:	bf08      	it	eq
 80007ba:	2400      	moveq	r4, #0
 80007bc:	d008      	beq.n	80007d0 <cmox_sha256_construct+0x1c>
 80007be:	4805      	ldr	r0, [pc, #20]	@ (80007d4 <cmox_sha256_construct+0x20>)
 80007c0:	6020      	str	r0, [r4, #0]
 80007c2:	4b05      	ldr	r3, [pc, #20]	@ (80007d8 <cmox_sha256_construct+0x24>)
 80007c4:	2208      	movs	r2, #8
 80007c6:	2140      	movs	r1, #64	@ 0x40
 80007c8:	f104 0008 	add.w	r0, r4, #8
 80007cc:	f000 fdd1 	bl	8001372 <cmox_md_construct>
 80007d0:	4620      	mov	r0, r4
 80007d2:	bd10      	pop	{r4, pc}
 80007d4:	08000764 	.word	0x08000764
 80007d8:	080162e4 	.word	0x080162e4

080007dc <cmox_sha256_transform>:
 80007dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80007e0:	b0c1      	sub	sp, #260	@ 0x104
 80007e2:	680b      	ldr	r3, [r1, #0]
 80007e4:	4602      	mov	r2, r0
 80007e6:	a801      	add	r0, sp, #4
 80007e8:	ba1b      	rev	r3, r3
 80007ea:	9301      	str	r3, [sp, #4]
 80007ec:	684b      	ldr	r3, [r1, #4]
 80007ee:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 80007f2:	ba1b      	rev	r3, r3
 80007f4:	6043      	str	r3, [r0, #4]
 80007f6:	688b      	ldr	r3, [r1, #8]
 80007f8:	ba1b      	rev	r3, r3
 80007fa:	6083      	str	r3, [r0, #8]
 80007fc:	68cb      	ldr	r3, [r1, #12]
 80007fe:	ba1b      	rev	r3, r3
 8000800:	60c3      	str	r3, [r0, #12]
 8000802:	690b      	ldr	r3, [r1, #16]
 8000804:	ba1b      	rev	r3, r3
 8000806:	6103      	str	r3, [r0, #16]
 8000808:	694b      	ldr	r3, [r1, #20]
 800080a:	ba1b      	rev	r3, r3
 800080c:	6143      	str	r3, [r0, #20]
 800080e:	698b      	ldr	r3, [r1, #24]
 8000810:	ba1b      	rev	r3, r3
 8000812:	6183      	str	r3, [r0, #24]
 8000814:	69cb      	ldr	r3, [r1, #28]
 8000816:	ba1b      	rev	r3, r3
 8000818:	61c3      	str	r3, [r0, #28]
 800081a:	6a0b      	ldr	r3, [r1, #32]
 800081c:	ba1b      	rev	r3, r3
 800081e:	6203      	str	r3, [r0, #32]
 8000820:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8000822:	ba1b      	rev	r3, r3
 8000824:	6243      	str	r3, [r0, #36]	@ 0x24
 8000826:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8000828:	ba1b      	rev	r3, r3
 800082a:	6283      	str	r3, [r0, #40]	@ 0x28
 800082c:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 800082e:	ba1b      	rev	r3, r3
 8000830:	62c3      	str	r3, [r0, #44]	@ 0x2c
 8000832:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 8000834:	ba1b      	rev	r3, r3
 8000836:	6303      	str	r3, [r0, #48]	@ 0x30
 8000838:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800083a:	ba1b      	rev	r3, r3
 800083c:	6343      	str	r3, [r0, #52]	@ 0x34
 800083e:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 8000840:	ba1b      	rev	r3, r3
 8000842:	6383      	str	r3, [r0, #56]	@ 0x38
 8000844:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
 8000846:	ba09      	rev	r1, r1
 8000848:	63c1      	str	r1, [r0, #60]	@ 0x3c
 800084a:	2018      	movs	r0, #24
 800084c:	f85c ec08 	ldr.w	lr, [ip, #-8]
 8000850:	ea4f 41fe 	mov.w	r1, lr, ror #19
 8000854:	ea91 437e 	eors.w	r3, r1, lr, ror #17
 8000858:	f85c 1c3c 	ldr.w	r1, [ip, #-60]
 800085c:	ea4f 47b1 	mov.w	r7, r1, ror #18
 8000860:	ea97 16f1 	eors.w	r6, r7, r1, ror #7
 8000864:	ea83 239e 	eor.w	r3, r3, lr, lsr #10
 8000868:	f85c ec1c 	ldr.w	lr, [ip, #-28]
 800086c:	ea86 06d1 	eor.w	r6, r6, r1, lsr #3
 8000870:	4473      	add	r3, lr
 8000872:	18f3      	adds	r3, r6, r3
 8000874:	f85c 6c40 	ldr.w	r6, [ip, #-64]
 8000878:	18f3      	adds	r3, r6, r3
 800087a:	f8cc 3000 	str.w	r3, [ip]
 800087e:	f85c ec04 	ldr.w	lr, [ip, #-4]
 8000882:	ea4f 46fe 	mov.w	r6, lr, ror #19
 8000886:	ea96 437e 	eors.w	r3, r6, lr, ror #17
 800088a:	f85c 6c38 	ldr.w	r6, [ip, #-56]
 800088e:	ea4f 4ab6 	mov.w	sl, r6, ror #18
 8000892:	ea8a 17f6 	eor.w	r7, sl, r6, ror #7
 8000896:	ea83 239e 	eor.w	r3, r3, lr, lsr #10
 800089a:	f85c ec18 	ldr.w	lr, [ip, #-24]
 800089e:	ea87 07d6 	eor.w	r7, r7, r6, lsr #3
 80008a2:	4473      	add	r3, lr
 80008a4:	18fb      	adds	r3, r7, r3
 80008a6:	18c9      	adds	r1, r1, r3
 80008a8:	f8cc 1004 	str.w	r1, [ip, #4]
 80008ac:	f10c 0c08 	add.w	ip, ip, #8
 80008b0:	1e40      	subs	r0, r0, #1
 80008b2:	d1cb      	bne.n	800084c <cmox_sha256_transform+0x70>
 80008b4:	9200      	str	r2, [sp, #0]
 80008b6:	4610      	mov	r0, r2
 80008b8:	6dc1      	ldr	r1, [r0, #92]	@ 0x5c
 80008ba:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 80008bc:	f8d0 e060 	ldr.w	lr, [r0, #96]	@ 0x60
 80008c0:	f8d0 8070 	ldr.w	r8, [r0, #112]	@ 0x70
 80008c4:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 80008c6:	6f44      	ldr	r4, [r0, #116]	@ 0x74
 80008c8:	f8d0 a068 	ldr.w	sl, [r0, #104]	@ 0x68
 80008cc:	6f85      	ldr	r5, [r0, #120]	@ 0x78
 80008ce:	f8df 90fc 	ldr.w	r9, [pc, #252]	@ 80009cc <cmox_sha256_transform+0x1f0>
 80008d2:	f10d 0c04 	add.w	ip, sp, #4
 80008d6:	2020      	movs	r0, #32
 80008d8:	ea4f 16b3 	mov.w	r6, r3, ror #6
 80008dc:	ea86 26f3 	eor.w	r6, r6, r3, ror #11
 80008e0:	f85c 7b04 	ldr.w	r7, [ip], #4
 80008e4:	ea4e 0b01 	orr.w	fp, lr, r1
 80008e8:	ea86 6673 	eor.w	r6, r6, r3, ror #25
 80008ec:	ea0b 0b02 	and.w	fp, fp, r2
 80008f0:	1975      	adds	r5, r6, r5
 80008f2:	ea84 0608 	eor.w	r6, r4, r8
 80008f6:	401e      	ands	r6, r3
 80008f8:	4066      	eors	r6, r4
 80008fa:	1975      	adds	r5, r6, r5
 80008fc:	f859 6b04 	ldr.w	r6, [r9], #4
 8000900:	1975      	adds	r5, r6, r5
 8000902:	197e      	adds	r6, r7, r5
 8000904:	ea4f 07b1 	mov.w	r7, r1, ror #2
 8000908:	ea87 3771 	eor.w	r7, r7, r1, ror #13
 800090c:	ea0e 0501 	and.w	r5, lr, r1
 8000910:	ea4b 0505 	orr.w	r5, fp, r5
 8000914:	ea87 57b1 	eor.w	r7, r7, r1, ror #22
 8000918:	19ef      	adds	r7, r5, r7
 800091a:	4645      	mov	r5, r8
 800091c:	eb06 080a 	add.w	r8, r6, sl
 8000920:	4692      	mov	sl, r2
 8000922:	4672      	mov	r2, lr
 8000924:	eb07 0e06 	add.w	lr, r7, r6
 8000928:	ea4f 16b8 	mov.w	r6, r8, ror #6
 800092c:	ea86 26f8 	eor.w	r6, r6, r8, ror #11
 8000930:	f85c 7b04 	ldr.w	r7, [ip], #4
 8000934:	ea41 0b0e 	orr.w	fp, r1, lr
 8000938:	ea86 6678 	eor.w	r6, r6, r8, ror #25
 800093c:	ea0b 0b02 	and.w	fp, fp, r2
 8000940:	1934      	adds	r4, r6, r4
 8000942:	ea85 0603 	eor.w	r6, r5, r3
 8000946:	ea06 0608 	and.w	r6, r6, r8
 800094a:	406e      	eors	r6, r5
 800094c:	1934      	adds	r4, r6, r4
 800094e:	f859 6b04 	ldr.w	r6, [r9], #4
 8000952:	1934      	adds	r4, r6, r4
 8000954:	193e      	adds	r6, r7, r4
 8000956:	ea4f 07be 	mov.w	r7, lr, ror #2
 800095a:	ea87 377e 	eor.w	r7, r7, lr, ror #13
 800095e:	ea01 040e 	and.w	r4, r1, lr
 8000962:	ea4b 0404 	orr.w	r4, fp, r4
 8000966:	ea87 57be 	eor.w	r7, r7, lr, ror #22
 800096a:	19e7      	adds	r7, r4, r7
 800096c:	461c      	mov	r4, r3
 800096e:	eb06 030a 	add.w	r3, r6, sl
 8000972:	4692      	mov	sl, r2
 8000974:	460a      	mov	r2, r1
 8000976:	19b9      	adds	r1, r7, r6
 8000978:	1e40      	subs	r0, r0, #1
 800097a:	d1ad      	bne.n	80008d8 <cmox_sha256_transform+0xfc>
 800097c:	9800      	ldr	r0, [sp, #0]
 800097e:	f8d0 905c 	ldr.w	r9, [r0, #92]	@ 0x5c
 8000982:	4449      	add	r1, r9
 8000984:	65c1      	str	r1, [r0, #92]	@ 0x5c
 8000986:	9900      	ldr	r1, [sp, #0]
 8000988:	6e08      	ldr	r0, [r1, #96]	@ 0x60
 800098a:	4486      	add	lr, r0
 800098c:	f8c1 e060 	str.w	lr, [r1, #96]	@ 0x60
 8000990:	9800      	ldr	r0, [sp, #0]
 8000992:	6e41      	ldr	r1, [r0, #100]	@ 0x64
 8000994:	1852      	adds	r2, r2, r1
 8000996:	6642      	str	r2, [r0, #100]	@ 0x64
 8000998:	9900      	ldr	r1, [sp, #0]
 800099a:	6e88      	ldr	r0, [r1, #104]	@ 0x68
 800099c:	4482      	add	sl, r0
 800099e:	f8c1 a068 	str.w	sl, [r1, #104]	@ 0x68
 80009a2:	9800      	ldr	r0, [sp, #0]
 80009a4:	6ec1      	ldr	r1, [r0, #108]	@ 0x6c
 80009a6:	185b      	adds	r3, r3, r1
 80009a8:	66c3      	str	r3, [r0, #108]	@ 0x6c
 80009aa:	9900      	ldr	r1, [sp, #0]
 80009ac:	6f08      	ldr	r0, [r1, #112]	@ 0x70
 80009ae:	4480      	add	r8, r0
 80009b0:	f8c1 8070 	str.w	r8, [r1, #112]	@ 0x70
 80009b4:	9800      	ldr	r0, [sp, #0]
 80009b6:	6f41      	ldr	r1, [r0, #116]	@ 0x74
 80009b8:	1864      	adds	r4, r4, r1
 80009ba:	6744      	str	r4, [r0, #116]	@ 0x74
 80009bc:	9900      	ldr	r1, [sp, #0]
 80009be:	6f88      	ldr	r0, [r1, #120]	@ 0x78
 80009c0:	182d      	adds	r5, r5, r0
 80009c2:	678d      	str	r5, [r1, #120]	@ 0x78
 80009c4:	b041      	add	sp, #260	@ 0x104
 80009c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009ca:	bf00      	nop
 80009cc:	080161e4 	.word	0x080161e4

080009d0 <cmox_aesFast_encrypt>:
 80009d0:	f100 030c 	add.w	r3, r0, #12
 80009d4:	e92d 4ff4 	stmdb	sp!, {r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009d8:	b08c      	sub	sp, #48	@ 0x30
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	684c      	ldr	r4, [r1, #4]
 80009de:	6845      	ldr	r5, [r0, #4]
 80009e0:	6808      	ldr	r0, [r1, #0]
 80009e2:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 80009e6:	688f      	ldr	r7, [r1, #8]
 80009e8:	4050      	eors	r0, r2
 80009ea:	685a      	ldr	r2, [r3, #4]
 80009ec:	68d9      	ldr	r1, [r3, #12]
 80009ee:	08ed      	lsrs	r5, r5, #3
 80009f0:	4054      	eors	r4, r2
 80009f2:	689a      	ldr	r2, [r3, #8]
 80009f4:	1ced      	adds	r5, r5, #3
 80009f6:	ea81 0e0e 	eor.w	lr, r1, lr
 80009fa:	4057      	eors	r7, r2
 80009fc:	4ab9      	ldr	r2, [pc, #740]	@ (8000ce4 <cmox_aesFast_encrypt+0x314>)
 80009fe:	9500      	str	r5, [sp, #0]
 8000a00:	4621      	mov	r1, r4
 8000a02:	e061      	b.n	8000ac8 <cmox_aesFast_encrypt+0xf8>
 8000a04:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8000a06:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8000a0a:	f852 8028 	ldr.w	r8, [r2, r8, lsl #2]
 8000a0e:	f852 c020 	ldr.w	ip, [r2, r0, lsl #2]
 8000a12:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8000a16:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
 8000a1a:	ea4f 203c 	mov.w	r0, ip, ror #8
 8000a1e:	f852 c02a 	ldr.w	ip, [r2, sl, lsl #2]
 8000a22:	ea80 0008 	eor.w	r0, r0, r8
 8000a26:	9c03      	ldr	r4, [sp, #12]
 8000a28:	ea80 403c 	eor.w	r0, r0, ip, ror #16
 8000a2c:	f8dd c024 	ldr.w	ip, [sp, #36]	@ 0x24
 8000a30:	9d02      	ldr	r5, [sp, #8]
 8000a32:	ea90 6031 	eors.w	r0, r0, r1, ror #24
 8000a36:	6819      	ldr	r1, [r3, #0]
 8000a38:	9e01      	ldr	r6, [sp, #4]
 8000a3a:	4048      	eors	r0, r1
 8000a3c:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8000a40:	f852 c02e 	ldr.w	ip, [r2, lr, lsl #2]
 8000a44:	f852 e029 	ldr.w	lr, [r2, r9, lsl #2]
 8000a48:	ea97 2131 	eors.w	r1, r7, r1, ror #8
 8000a4c:	9f08      	ldr	r7, [sp, #32]
 8000a4e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8000a52:	ea81 413c 	eor.w	r1, r1, ip, ror #16
 8000a56:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8000a5a:	ea81 613e 	eor.w	r1, r1, lr, ror #24
 8000a5e:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8000a62:	ea8c 0101 	eor.w	r1, ip, r1
 8000a66:	f852 c027 	ldr.w	ip, [r2, r7, lsl #2]
 8000a6a:	ea4f 273c 	mov.w	r7, ip, ror #8
 8000a6e:	f852 c02e 	ldr.w	ip, [r2, lr, lsl #2]
 8000a72:	f8dd e018 	ldr.w	lr, [sp, #24]
 8000a76:	f852 802e 	ldr.w	r8, [r2, lr, lsl #2]
 8000a7a:	ea4f 6e38 	mov.w	lr, r8, ror #24
 8000a7e:	f852 8029 	ldr.w	r8, [r2, r9, lsl #2]
 8000a82:	ea87 0708 	eor.w	r7, r7, r8
 8000a86:	ea87 473c 	eor.w	r7, r7, ip, ror #16
 8000a8a:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8000a8e:	ea8e 0707 	eor.w	r7, lr, r7
 8000a92:	f8dd e010 	ldr.w	lr, [sp, #16]
 8000a96:	ea8c 0707 	eor.w	r7, ip, r7
 8000a9a:	f852 c02e 	ldr.w	ip, [r2, lr, lsl #2]
 8000a9e:	ea4f 2e3c 	mov.w	lr, ip, ror #8
 8000aa2:	f852 c024 	ldr.w	ip, [r2, r4, lsl #2]
 8000aa6:	ea4f 443c 	mov.w	r4, ip, ror #16
 8000aaa:	f852 c025 	ldr.w	ip, [r2, r5, lsl #2]
 8000aae:	ea4f 653c 	mov.w	r5, ip, ror #24
 8000ab2:	f852 c026 	ldr.w	ip, [r2, r6, lsl #2]
 8000ab6:	ea8e 0e0c 	eor.w	lr, lr, ip
 8000aba:	ea84 0e0e 	eor.w	lr, r4, lr
 8000abe:	68dc      	ldr	r4, [r3, #12]
 8000ac0:	ea85 0e0e 	eor.w	lr, r5, lr
 8000ac4:	ea84 0e0e 	eor.w	lr, r4, lr
 8000ac8:	020d      	lsls	r5, r1, #8
 8000aca:	fa5f f88e 	uxtb.w	r8, lr
 8000ace:	0e2d      	lsrs	r5, r5, #24
 8000ad0:	f852 a028 	ldr.w	sl, [r2, r8, lsl #2]
 8000ad4:	f852 6025 	ldr.w	r6, [r2, r5, lsl #2]
 8000ad8:	ea4f 4c07 	mov.w	ip, r7, lsl #16
 8000adc:	ea4f 683a 	mov.w	r8, sl, ror #24
 8000ae0:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 8000ae4:	ea4f 2936 	mov.w	r9, r6, ror #8
 8000ae8:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
 8000aec:	f852 a02b 	ldr.w	sl, [r2, fp, lsl #2]
 8000af0:	f852 602c 	ldr.w	r6, [r2, ip, lsl #2]
 8000af4:	f8d3 c010 	ldr.w	ip, [r3, #16]
 8000af8:	ea89 090a 	eor.w	r9, r9, sl
 8000afc:	ea89 4936 	eor.w	r9, r9, r6, ror #16
 8000b00:	ea88 0909 	eor.w	r9, r8, r9
 8000b04:	ea8c 0909 	eor.w	r9, ip, r9
 8000b08:	ea4f 2807 	mov.w	r8, r7, lsl #8
 8000b0c:	ea4f 6818 	mov.w	r8, r8, lsr #24
 8000b10:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8000b14:	f852 a028 	ldr.w	sl, [r2, r8, lsl #2]
 8000b18:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
 8000b1c:	f852 802c 	ldr.w	r8, [r2, ip, lsl #2]
 8000b20:	ea4f 4c38 	mov.w	ip, r8, ror #16
 8000b24:	fa5f f880 	uxtb.w	r8, r0
 8000b28:	f852 b028 	ldr.w	fp, [r2, r8, lsl #2]
 8000b2c:	ea4f 683b 	mov.w	r8, fp, ror #24
 8000b30:	ea4f 6b11 	mov.w	fp, r1, lsr #24
 8000b34:	f852 b02b 	ldr.w	fp, [r2, fp, lsl #2]
 8000b38:	ea8b 2a3a 	eor.w	sl, fp, sl, ror #8
 8000b3c:	ea8c 0a0a 	eor.w	sl, ip, sl
 8000b40:	f8d3 c014 	ldr.w	ip, [r3, #20]
 8000b44:	ea88 0a0a 	eor.w	sl, r8, sl
 8000b48:	ea4f 280e 	mov.w	r8, lr, lsl #8
 8000b4c:	ea8c 0a0a 	eor.w	sl, ip, sl
 8000b50:	ea4f 6818 	mov.w	r8, r8, lsr #24
 8000b54:	ea4f 4c00 	mov.w	ip, r0, lsl #16
 8000b58:	f852 b028 	ldr.w	fp, [r2, r8, lsl #2]
 8000b5c:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
 8000b60:	f852 802c 	ldr.w	r8, [r2, ip, lsl #2]
 8000b64:	fa5f fc81 	uxtb.w	ip, r1
 8000b68:	0409      	lsls	r1, r1, #16
 8000b6a:	ea4f 4838 	mov.w	r8, r8, ror #16
 8000b6e:	f8cd 8004 	str.w	r8, [sp, #4]
 8000b72:	f852 802c 	ldr.w	r8, [r2, ip, lsl #2]
 8000b76:	0e09      	lsrs	r1, r1, #24
 8000b78:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8000b7c:	ea4f 6c38 	mov.w	ip, r8, ror #24
 8000b80:	ea4f 6817 	mov.w	r8, r7, lsr #24
 8000b84:	f852 8028 	ldr.w	r8, [r2, r8, lsl #2]
 8000b88:	0200      	lsls	r0, r0, #8
 8000b8a:	0e00      	lsrs	r0, r0, #24
 8000b8c:	ea88 2b3b 	eor.w	fp, r8, fp, ror #8
 8000b90:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8000b94:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
 8000b98:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8000b9c:	ea88 0b0b 	eor.w	fp, r8, fp
 8000ba0:	ea8c 0b0b 	eor.w	fp, ip, fp
 8000ba4:	f8d3 c018 	ldr.w	ip, [r3, #24]
 8000ba8:	b2ff      	uxtb	r7, r7
 8000baa:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
 8000bae:	ea8c 0b0b 	eor.w	fp, ip, fp
 8000bb2:	ea4f 4c31 	mov.w	ip, r1, ror #16
 8000bb6:	f852 102e 	ldr.w	r1, [r2, lr, lsl #2]
 8000bba:	ea4f 280b 	mov.w	r8, fp, lsl #8
 8000bbe:	ea4f 6818 	mov.w	r8, r8, lsr #24
 8000bc2:	ea91 2030 	eors.w	r0, r1, r0, ror #8
 8000bc6:	ea8c 0100 	eor.w	r1, ip, r0
 8000bca:	ea91 6137 	eors.w	r1, r1, r7, ror #24
 8000bce:	9f00      	ldr	r7, [sp, #0]
 8000bd0:	69d8      	ldr	r0, [r3, #28]
 8000bd2:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 8000bd6:	1e7f      	subs	r7, r7, #1
 8000bd8:	9700      	str	r7, [sp, #0]
 8000bda:	4041      	eors	r1, r0
 8000bdc:	ea4f 470a 	mov.w	r7, sl, lsl #16
 8000be0:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 8000be4:	0e3f      	lsrs	r7, r7, #24
 8000be6:	f8cd e004 	str.w	lr, [sp, #4]
 8000bea:	9703      	str	r7, [sp, #12]
 8000bec:	ea4f 2e09 	mov.w	lr, r9, lsl #8
 8000bf0:	ea4f 671b 	mov.w	r7, fp, lsr #24
 8000bf4:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
 8000bf8:	9705      	str	r7, [sp, #20]
 8000bfa:	ea4f 400b 	mov.w	r0, fp, lsl #16
 8000bfe:	f8cd e010 	str.w	lr, [sp, #16]
 8000c02:	020f      	lsls	r7, r1, #8
 8000c04:	0e00      	lsrs	r0, r0, #24
 8000c06:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8000c0a:	0e3f      	lsrs	r7, r7, #24
 8000c0c:	900a      	str	r0, [sp, #40]	@ 0x28
 8000c0e:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
 8000c12:	9708      	str	r7, [sp, #32]
 8000c14:	9800      	ldr	r0, [sp, #0]
 8000c16:	f8cd e01c 	str.w	lr, [sp, #28]
 8000c1a:	ea4f 671a 	mov.w	r7, sl, lsr #24
 8000c1e:	ea4f 2c0a 	mov.w	ip, sl, lsl #8
 8000c22:	3320      	adds	r3, #32
 8000c24:	ea4f 4e01 	mov.w	lr, r1, lsl #16
 8000c28:	ea4f 6819 	mov.w	r8, r9, lsr #24
 8000c2c:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
 8000c30:	fa5f fb8b 	uxtb.w	fp, fp
 8000c34:	fa5f fa8a 	uxtb.w	sl, sl
 8000c38:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
 8000c3c:	f8cd c02c 	str.w	ip, [sp, #44]	@ 0x2c
 8000c40:	f8cd b008 	str.w	fp, [sp, #8]
 8000c44:	f8cd a018 	str.w	sl, [sp, #24]
 8000c48:	fa5f f989 	uxtb.w	r9, r9
 8000c4c:	b2c9      	uxtb	r1, r1
 8000c4e:	2800      	cmp	r0, #0
 8000c50:	f47f aed8 	bne.w	8000a04 <cmox_aesFast_encrypt+0x34>
 8000c54:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8000c56:	4c24      	ldr	r4, [pc, #144]	@ (8000ce8 <cmox_aesFast_encrypt+0x318>)
 8000c58:	f814 0008 	ldrb.w	r0, [r4, r8]
 8000c5c:	5d66      	ldrb	r6, [r4, r5]
 8000c5e:	5c61      	ldrb	r1, [r4, r1]
 8000c60:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8000c62:	0436      	lsls	r6, r6, #16
 8000c64:	ea46 6600 	orr.w	r6, r6, r0, lsl #24
 8000c68:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8000c6a:	5c25      	ldrb	r5, [r4, r0]
 8000c6c:	6818      	ldr	r0, [r3, #0]
 8000c6e:	ea46 2605 	orr.w	r6, r6, r5, lsl #8
 8000c72:	430e      	orrs	r6, r1
 8000c74:	4046      	eors	r6, r0
 8000c76:	6016      	str	r6, [r2, #0]
 8000c78:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000c7a:	5de5      	ldrb	r5, [r4, r7]
 8000c7c:	f814 1009 	ldrb.w	r1, [r4, r9]
 8000c80:	5c26      	ldrb	r6, [r4, r0]
 8000c82:	6858      	ldr	r0, [r3, #4]
 8000c84:	0436      	lsls	r6, r6, #16
 8000c86:	ea46 6605 	orr.w	r6, r6, r5, lsl #24
 8000c8a:	f814 500e 	ldrb.w	r5, [r4, lr]
 8000c8e:	ea46 2605 	orr.w	r6, r6, r5, lsl #8
 8000c92:	430e      	orrs	r6, r1
 8000c94:	4046      	eors	r6, r0
 8000c96:	6056      	str	r6, [r2, #4]
 8000c98:	9905      	ldr	r1, [sp, #20]
 8000c9a:	9e06      	ldr	r6, [sp, #24]
 8000c9c:	5c60      	ldrb	r0, [r4, r1]
 8000c9e:	9908      	ldr	r1, [sp, #32]
 8000ca0:	5c65      	ldrb	r5, [r4, r1]
 8000ca2:	042d      	lsls	r5, r5, #16
 8000ca4:	ea45 6500 	orr.w	r5, r5, r0, lsl #24
 8000ca8:	9807      	ldr	r0, [sp, #28]
 8000caa:	5c21      	ldrb	r1, [r4, r0]
 8000cac:	6898      	ldr	r0, [r3, #8]
 8000cae:	ea45 2501 	orr.w	r5, r5, r1, lsl #8
 8000cb2:	5da1      	ldrb	r1, [r4, r6]
 8000cb4:	430d      	orrs	r5, r1
 8000cb6:	4045      	eors	r5, r0
 8000cb8:	6095      	str	r5, [r2, #8]
 8000cba:	9901      	ldr	r1, [sp, #4]
 8000cbc:	9e02      	ldr	r6, [sp, #8]
 8000cbe:	5c60      	ldrb	r0, [r4, r1]
 8000cc0:	9904      	ldr	r1, [sp, #16]
 8000cc2:	5c65      	ldrb	r5, [r4, r1]
 8000cc4:	042d      	lsls	r5, r5, #16
 8000cc6:	ea45 6500 	orr.w	r5, r5, r0, lsl #24
 8000cca:	9803      	ldr	r0, [sp, #12]
 8000ccc:	5c21      	ldrb	r1, [r4, r0]
 8000cce:	5da0      	ldrb	r0, [r4, r6]
 8000cd0:	ea45 2501 	orr.w	r5, r5, r1, lsl #8
 8000cd4:	68d9      	ldr	r1, [r3, #12]
 8000cd6:	4305      	orrs	r5, r0
 8000cd8:	404d      	eors	r5, r1
 8000cda:	60d5      	str	r5, [r2, #12]
 8000cdc:	b00d      	add	sp, #52	@ 0x34
 8000cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ce2:	bf00      	nop
 8000ce4:	08016a1c 	.word	0x08016a1c
 8000ce8:	08016e1c 	.word	0x08016e1c

08000cec <cmox_ctr_cleanup>:
 8000cec:	b510      	push	{r4, lr}
 8000cee:	f000 f8ab 	bl	8000e48 <cmox_ctr_getByCipher>
 8000cf2:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 8000cf6:	2800      	cmp	r0, #0
 8000cf8:	bf0e      	itee	eq
 8000cfa:	4c03      	ldreq	r4, [pc, #12]	@ (8000d08 <cmox_ctr_cleanup+0x1c>)
 8000cfc:	f44f 718a 	movne.w	r1, #276	@ 0x114
 8000d00:	f010 fbe3 	blne	80114ca <__aeabi_memclr>
 8000d04:	4620      	mov	r0, r4
 8000d06:	bd10      	pop	{r4, pc}
 8000d08:	00010003 	.word	0x00010003

08000d0c <cmox_ctr_init>:
 8000d0c:	b510      	push	{r4, lr}
 8000d0e:	0004      	movs	r4, r0
 8000d10:	d101      	bne.n	8000d16 <cmox_ctr_init+0xa>
 8000d12:	4805      	ldr	r0, [pc, #20]	@ (8000d28 <cmox_ctr_init+0x1c>)
 8000d14:	bd10      	pop	{r4, pc}
 8000d16:	f000 f897 	bl	8000e48 <cmox_ctr_getByCipher>
 8000d1a:	f100 0108 	add.w	r1, r0, #8
 8000d1e:	4620      	mov	r0, r4
 8000d20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000d24:	f000 bdaa 	b.w	800187c <cmox_cipherMode_init>
 8000d28:	00010003 	.word	0x00010003

08000d2c <cmox_ctr_setKey>:
 8000d2c:	b538      	push	{r3, r4, r5, lr}
 8000d2e:	460c      	mov	r4, r1
 8000d30:	4615      	mov	r5, r2
 8000d32:	b908      	cbnz	r0, 8000d38 <cmox_ctr_setKey+0xc>
 8000d34:	4805      	ldr	r0, [pc, #20]	@ (8000d4c <cmox_ctr_setKey+0x20>)
 8000d36:	bd32      	pop	{r1, r4, r5, pc}
 8000d38:	f000 f886 	bl	8000e48 <cmox_ctr_getByCipher>
 8000d3c:	462a      	mov	r2, r5
 8000d3e:	4621      	mov	r1, r4
 8000d40:	3008      	adds	r0, #8
 8000d42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d46:	f000 bda1 	b.w	800188c <cmox_cipherMode_setKey>
 8000d4a:	bf00      	nop
 8000d4c:	00010003 	.word	0x00010003

08000d50 <cmox_ctr_setIV>:
 8000d50:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 8000d52:	0004      	movs	r4, r0
 8000d54:	460d      	mov	r5, r1
 8000d56:	4616      	mov	r6, r2
 8000d58:	d002      	beq.n	8000d60 <cmox_ctr_setIV+0x10>
 8000d5a:	f000 f875 	bl	8000e48 <cmox_ctr_getByCipher>
 8000d5e:	b908      	cbnz	r0, 8000d64 <cmox_ctr_setIV+0x14>
 8000d60:	4807      	ldr	r0, [pc, #28]	@ (8000d80 <cmox_ctr_setIV+0x30>)
 8000d62:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8000d64:	2e10      	cmp	r6, #16
 8000d66:	4633      	mov	r3, r6
 8000d68:	462a      	mov	r2, r5
 8000d6a:	bf0c      	ite	eq
 8000d6c:	2101      	moveq	r1, #1
 8000d6e:	2100      	movne	r1, #0
 8000d70:	9100      	str	r1, [sp, #0]
 8000d72:	f500 7182 	add.w	r1, r0, #260	@ 0x104
 8000d76:	4620      	mov	r0, r4
 8000d78:	f000 ff6c 	bl	8001c54 <cmox_cipherMode_setIV>
 8000d7c:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8000d7e:	bf00      	nop
 8000d80:	00010003 	.word	0x00010003

08000d84 <cmox_ctr_append>:
 8000d84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d88:	b088      	sub	sp, #32
 8000d8a:	4604      	mov	r4, r0
 8000d8c:	7920      	ldrb	r0, [r4, #4]
 8000d8e:	468b      	mov	fp, r1
 8000d90:	4690      	mov	r8, r2
 8000d92:	07c1      	lsls	r1, r0, #31
 8000d94:	4699      	mov	r9, r3
 8000d96:	bf58      	it	pl
 8000d98:	4825      	ldrpl	r0, [pc, #148]	@ (8000e30 <cmox_ctr_append+0xac>)
 8000d9a:	d545      	bpl.n	8000e28 <cmox_ctr_append+0xa4>
 8000d9c:	4620      	mov	r0, r4
 8000d9e:	f000 f853 	bl	8000e48 <cmox_ctr_getByCipher>
 8000da2:	4605      	mov	r5, r0
 8000da4:	7c28      	ldrb	r0, [r5, #16]
 8000da6:	f000 0005 	and.w	r0, r0, #5
 8000daa:	2805      	cmp	r0, #5
 8000dac:	bf18      	it	ne
 8000dae:	4821      	ldrne	r0, [pc, #132]	@ (8000e34 <cmox_ctr_append+0xb0>)
 8000db0:	d13a      	bne.n	8000e28 <cmox_ctr_append+0xa4>
 8000db2:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8000db4:	b10f      	cbz	r7, 8000dba <cmox_ctr_append+0x36>
 8000db6:	2000      	movs	r0, #0
 8000db8:	6038      	str	r0, [r7, #0]
 8000dba:	2600      	movs	r6, #0
 8000dbc:	e011      	b.n	8000de2 <cmox_ctr_append+0x5e>
 8000dbe:	f81d 0001 	ldrb.w	r0, [sp, r1]
 8000dc2:	f81b 3002 	ldrb.w	r3, [fp, r2]
 8000dc6:	4058      	eors	r0, r3
 8000dc8:	f809 0002 	strb.w	r0, [r9, r2]
 8000dcc:	b117      	cbz	r7, 8000dd4 <cmox_ctr_append+0x50>
 8000dce:	683a      	ldr	r2, [r7, #0]
 8000dd0:	1c52      	adds	r2, r2, #1
 8000dd2:	603a      	str	r2, [r7, #0]
 8000dd4:	1c49      	adds	r1, r1, #1
 8000dd6:	4551      	cmp	r1, sl
 8000dd8:	d202      	bcs.n	8000de0 <cmox_ctr_append+0x5c>
 8000dda:	198a      	adds	r2, r1, r6
 8000ddc:	4590      	cmp	r8, r2
 8000dde:	d2ee      	bcs.n	8000dbe <cmox_ctr_append+0x3a>
 8000de0:	3610      	adds	r6, #16
 8000de2:	4546      	cmp	r6, r8
 8000de4:	d21a      	bcs.n	8000e1c <cmox_ctr_append+0x98>
 8000de6:	68ab      	ldr	r3, [r5, #8]
 8000de8:	eba8 0a06 	sub.w	sl, r8, r6
 8000dec:	f1ba 0f10 	cmp.w	sl, #16
 8000df0:	f8d3 c000 	ldr.w	ip, [r3]
 8000df4:	aa04      	add	r2, sp, #16
 8000df6:	bf88      	it	hi
 8000df8:	f04f 0a10 	movhi.w	sl, #16
 8000dfc:	f505 7182 	add.w	r1, r5, #260	@ 0x104
 8000e00:	f105 0008 	add.w	r0, r5, #8
 8000e04:	47e0      	blx	ip
 8000e06:	f8d5 0110 	ldr.w	r0, [r5, #272]	@ 0x110
 8000e0a:	4669      	mov	r1, sp
 8000e0c:	1c40      	adds	r0, r0, #1
 8000e0e:	f8c5 0110 	str.w	r0, [r5, #272]	@ 0x110
 8000e12:	a804      	add	r0, sp, #16
 8000e14:	f000 ff5a 	bl	8001ccc <convert_block_2_bytes>
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e7dc      	b.n	8000dd6 <cmox_ctr_append+0x52>
 8000e1c:	45b0      	cmp	r8, r6
 8000e1e:	bf3c      	itt	cc
 8000e20:	2000      	movcc	r0, #0
 8000e22:	6060      	strcc	r0, [r4, #4]
 8000e24:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8000e28:	b009      	add	sp, #36	@ 0x24
 8000e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e2e:	bf00      	nop
 8000e30:	00010003 	.word	0x00010003
 8000e34:	00010004 	.word	0x00010004

08000e38 <cmox_ctr_general_dir>:
 8000e38:	b110      	cbz	r0, 8000e40 <cmox_ctr_general_dir+0x8>
 8000e3a:	4a02      	ldr	r2, [pc, #8]	@ (8000e44 <cmox_ctr_general_dir+0xc>)
 8000e3c:	6002      	str	r2, [r0, #0]
 8000e3e:	6081      	str	r1, [r0, #8]
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	08016300 	.word	0x08016300

08000e48 <cmox_ctr_getByCipher>:
 8000e48:	6801      	ldr	r1, [r0, #0]
 8000e4a:	4a02      	ldr	r2, [pc, #8]	@ (8000e54 <cmox_ctr_getByCipher+0xc>)
 8000e4c:	4291      	cmp	r1, r2
 8000e4e:	bf18      	it	ne
 8000e50:	2000      	movne	r0, #0
 8000e52:	4770      	bx	lr
 8000e54:	08016300 	.word	0x08016300

08000e58 <cmox_ctr_construct>:
 8000e58:	460a      	mov	r2, r1
 8000e5a:	6853      	ldr	r3, [r2, #4]
 8000e5c:	6812      	ldr	r2, [r2, #0]
 8000e5e:	6819      	ldr	r1, [r3, #0]

08000e60 <__iar_annotation$$tailcall>:
 8000e60:	4710      	bx	r2
	...

08000e64 <cmox_hmac_cleanup>:
 8000e64:	b510      	push	{r4, lr}
 8000e66:	f000 fa33 	bl	80012d0 <cmox_hmac_getByMAC>
 8000e6a:	f44f 3440 	mov.w	r4, #196608	@ 0x30000
 8000e6e:	2800      	cmp	r0, #0
 8000e70:	bf0e      	itee	eq
 8000e72:	4c03      	ldreq	r4, [pc, #12]	@ (8000e80 <cmox_hmac_cleanup+0x1c>)
 8000e74:	f44f 71c0 	movne.w	r1, #384	@ 0x180
 8000e78:	f010 fb27 	blne	80114ca <__aeabi_memclr>
 8000e7c:	4620      	mov	r0, r4
 8000e7e:	bd10      	pop	{r4, pc}
 8000e80:	00030002 	.word	0x00030002

08000e84 <cmox_hmac_init>:
 8000e84:	b510      	push	{r4, lr}
 8000e86:	4604      	mov	r4, r0
 8000e88:	f000 fa22 	bl	80012d0 <cmox_hmac_getByMAC>
 8000e8c:	b908      	cbnz	r0, 8000e92 <cmox_hmac_init+0xe>
 8000e8e:	4805      	ldr	r0, [pc, #20]	@ (8000ea4 <cmox_hmac_init+0x20>)
 8000e90:	bd10      	pop	{r4, pc}
 8000e92:	2100      	movs	r1, #0
 8000e94:	60a1      	str	r1, [r4, #8]
 8000e96:	f8d0 217c 	ldr.w	r2, [r0, #380]	@ 0x17c
 8000e9a:	6811      	ldr	r1, [r2, #0]
 8000e9c:	4788      	blx	r1
 8000e9e:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8000ea2:	bd10      	pop	{r4, pc}
 8000ea4:	00030002 	.word	0x00030002

08000ea8 <cmox_hmac_setTagLen>:
 8000ea8:	b570      	push	{r4, r5, r6, lr}
 8000eaa:	4604      	mov	r4, r0
 8000eac:	460d      	mov	r5, r1
 8000eae:	f000 fa0f 	bl	80012d0 <cmox_hmac_getByMAC>
 8000eb2:	4e06      	ldr	r6, [pc, #24]	@ (8000ecc <cmox_hmac_setTagLen+0x24>)
 8000eb4:	b140      	cbz	r0, 8000ec8 <cmox_hmac_setTagLen+0x20>
 8000eb6:	f8d0 017c 	ldr.w	r0, [r0, #380]	@ 0x17c
 8000eba:	6841      	ldr	r1, [r0, #4]
 8000ebc:	4788      	blx	r1
 8000ebe:	42a8      	cmp	r0, r5
 8000ec0:	bf24      	itt	cs
 8000ec2:	6065      	strcs	r5, [r4, #4]
 8000ec4:	f44f 3640 	movcs.w	r6, #196608	@ 0x30000
 8000ec8:	4630      	mov	r0, r6
 8000eca:	bd70      	pop	{r4, r5, r6, pc}
 8000ecc:	00030002 	.word	0x00030002

08000ed0 <cmox_hmac_setKey>:
 8000ed0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000ed4:	460c      	mov	r4, r1
 8000ed6:	0015      	movs	r5, r2
 8000ed8:	d000      	beq.n	8000edc <cmox_hmac_setKey+0xc>
 8000eda:	b12c      	cbz	r4, 8000ee8 <cmox_hmac_setKey+0x18>
 8000edc:	4606      	mov	r6, r0
 8000ede:	f000 f9f7 	bl	80012d0 <cmox_hmac_getByMAC>
 8000ee2:	ea5f 0800 	movs.w	r8, r0
 8000ee6:	d101      	bne.n	8000eec <cmox_hmac_setKey+0x1c>
 8000ee8:	4864      	ldr	r0, [pc, #400]	@ (800107c <cmox_hmac_setKey+0x1ac>)
 8000eea:	e0c3      	b.n	8001074 <cmox_hmac_setKey+0x1a4>
 8000eec:	f8d8 00f8 	ldr.w	r0, [r8, #248]	@ 0xf8
 8000ef0:	6801      	ldr	r1, [r0, #0]
 8000ef2:	684a      	ldr	r2, [r1, #4]
 8000ef4:	4790      	blx	r2
 8000ef6:	f5b0 3f00 	cmp.w	r0, #131072	@ 0x20000
 8000efa:	d117      	bne.n	8000f2c <cmox_hmac_setKey+0x5c>
 8000efc:	f8d8 117c 	ldr.w	r1, [r8, #380]	@ 0x17c
 8000f00:	4640      	mov	r0, r8
 8000f02:	688a      	ldr	r2, [r1, #8]
 8000f04:	4790      	blx	r2
 8000f06:	4681      	mov	r9, r0
 8000f08:	f1b9 0f81 	cmp.w	r9, #129	@ 0x81
 8000f0c:	f080 809e 	bcs.w	800104c <cmox_hmac_setKey+0x17c>
 8000f10:	f108 0afc 	add.w	sl, r8, #252	@ 0xfc
 8000f14:	45a9      	cmp	r9, r5
 8000f16:	d217      	bcs.n	8000f48 <cmox_hmac_setKey+0x78>
 8000f18:	f8d8 00f8 	ldr.w	r0, [r8, #248]	@ 0xf8
 8000f1c:	462a      	mov	r2, r5
 8000f1e:	4621      	mov	r1, r4
 8000f20:	6803      	ldr	r3, [r0, #0]
 8000f22:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8000f26:	47e0      	blx	ip
 8000f28:	f5b0 3f00 	cmp.w	r0, #131072	@ 0x20000
 8000f2c:	f040 808e 	bne.w	800104c <cmox_hmac_setKey+0x17c>
 8000f30:	f8d8 00f8 	ldr.w	r0, [r8, #248]	@ 0xf8
 8000f34:	466a      	mov	r2, sp
 8000f36:	4651      	mov	r1, sl
 8000f38:	6803      	ldr	r3, [r0, #0]
 8000f3a:	f8d3 c010 	ldr.w	ip, [r3, #16]
 8000f3e:	47e0      	blx	ip
 8000f40:	f5b0 3f00 	cmp.w	r0, #131072	@ 0x20000
 8000f44:	d176      	bne.n	8001034 <cmox_hmac_setKey+0x164>
 8000f46:	e00a      	b.n	8000f5e <cmox_hmac_setKey+0x8e>
 8000f48:	2000      	movs	r0, #0
 8000f4a:	e004      	b.n	8000f56 <cmox_hmac_setKey+0x86>
 8000f4c:	5c21      	ldrb	r1, [r4, r0]
 8000f4e:	f80a 1000 	strb.w	r1, [sl, r0]
 8000f52:	9800      	ldr	r0, [sp, #0]
 8000f54:	1c40      	adds	r0, r0, #1
 8000f56:	9000      	str	r0, [sp, #0]
 8000f58:	9800      	ldr	r0, [sp, #0]
 8000f5a:	42a8      	cmp	r0, r5
 8000f5c:	d3f6      	bcc.n	8000f4c <cmox_hmac_setKey+0x7c>
 8000f5e:	f04f 0c00 	mov.w	ip, #0
 8000f62:	4947      	ldr	r1, [pc, #284]	@ (8001080 <cmox_hmac_setKey+0x1b0>)
 8000f64:	4a47      	ldr	r2, [pc, #284]	@ (8001084 <cmox_hmac_setKey+0x1b4>)
 8000f66:	ac01      	add	r4, sp, #4
 8000f68:	4b47      	ldr	r3, [pc, #284]	@ (8001088 <cmox_hmac_setKey+0x1b8>)
 8000f6a:	9800      	ldr	r0, [sp, #0]
 8000f6c:	4584      	cmp	ip, r0
 8000f6e:	d258      	bcs.n	8001022 <cmox_hmac_setKey+0x152>
 8000f70:	e9d3 7000 	ldrd	r7, r0, [r3]
 8000f74:	ad01      	add	r5, sp, #4
 8000f76:	e9c5 7000 	strd	r7, r0, [r5]
 8000f7a:	7810      	ldrb	r0, [r2, #0]
 8000f7c:	2800      	cmp	r0, #0
 8000f7e:	bf1a      	itte	ne
 8000f80:	2004      	movne	r0, #4
 8000f82:	4686      	movne	lr, r0
 8000f84:	f04f 0e00 	moveq.w	lr, #0
 8000f88:	5808      	ldr	r0, [r1, r0]
 8000f8a:	f854 500e 	ldr.w	r5, [r4, lr]
 8000f8e:	2701      	movs	r7, #1
 8000f90:	4428      	add	r0, r5
 8000f92:	4d3e      	ldr	r5, [pc, #248]	@ (800108c <cmox_hmac_setKey+0x1bc>)
 8000f94:	6005      	str	r5, [r0, #0]
 8000f96:	f8d0 e000 	ldr.w	lr, [r0]
 8000f9a:	6087      	str	r7, [r0, #8]
 8000f9c:	9d01      	ldr	r5, [sp, #4]
 8000f9e:	684f      	ldr	r7, [r1, #4]
 8000fa0:	f81a 000c 	ldrb.w	r0, [sl, ip]
 8000fa4:	407d      	eors	r5, r7
 8000fa6:	ea8e 0505 	eor.w	r5, lr, r5
 8000faa:	f085 0e04 	eor.w	lr, r5, #4
 8000fae:	6865      	ldr	r5, [r4, #4]
 8000fb0:	680f      	ldr	r7, [r1, #0]
 8000fb2:	407d      	eors	r5, r7
 8000fb4:	f085 05fc 	eor.w	r5, r5, #252	@ 0xfc
 8000fb8:	4475      	add	r5, lr
 8000fba:	f085 05a3 	eor.w	r5, r5, #163	@ 0xa3
 8000fbe:	4068      	eors	r0, r5
 8000fc0:	f80a 000c 	strb.w	r0, [sl, ip]
 8000fc4:	f10c 0c01 	add.w	ip, ip, #1
 8000fc8:	e7cf      	b.n	8000f6a <cmox_hmac_setKey+0x9a>
 8000fca:	e9d3 4500 	ldrd	r4, r5, [r3]
 8000fce:	a801      	add	r0, sp, #4
 8000fd0:	e9c0 4500 	strd	r4, r5, [r0]
 8000fd4:	7810      	ldrb	r0, [r2, #0]
 8000fd6:	4d2e      	ldr	r5, [pc, #184]	@ (8001090 <cmox_hmac_setKey+0x1c0>)
 8000fd8:	2800      	cmp	r0, #0
 8000fda:	a801      	add	r0, sp, #4
 8000fdc:	bf14      	ite	ne
 8000fde:	f04f 0e04 	movne.w	lr, #4
 8000fe2:	f04f 0e00 	moveq.w	lr, #0
 8000fe6:	4674      	mov	r4, lr
 8000fe8:	f851 e00e 	ldr.w	lr, [r1, lr]
 8000fec:	5904      	ldr	r4, [r0, r4]
 8000fee:	2701      	movs	r7, #1
 8000ff0:	44a6      	add	lr, r4
 8000ff2:	f8ce 5000 	str.w	r5, [lr]
 8000ff6:	f8de 4000 	ldr.w	r4, [lr]
 8000ffa:	f8ce 7008 	str.w	r7, [lr, #8]
 8000ffe:	9f01      	ldr	r7, [sp, #4]
 8001000:	684d      	ldr	r5, [r1, #4]
 8001002:	6840      	ldr	r0, [r0, #4]
 8001004:	407d      	eors	r5, r7
 8001006:	406c      	eors	r4, r5
 8001008:	680d      	ldr	r5, [r1, #0]
 800100a:	f084 0404 	eor.w	r4, r4, #4
 800100e:	4068      	eors	r0, r5
 8001010:	f080 00fc 	eor.w	r0, r0, #252	@ 0xfc
 8001014:	1904      	adds	r4, r0, r4
 8001016:	f084 0457 	eor.w	r4, r4, #87	@ 0x57
 800101a:	f80a 400c 	strb.w	r4, [sl, ip]
 800101e:	f10c 0c01 	add.w	ip, ip, #1
 8001022:	45cc      	cmp	ip, r9
 8001024:	d3d1      	bcc.n	8000fca <cmox_hmac_setKey+0xfa>
 8001026:	f8d8 00f8 	ldr.w	r0, [r8, #248]	@ 0xf8
 800102a:	6801      	ldr	r1, [r0, #0]
 800102c:	684a      	ldr	r2, [r1, #4]
 800102e:	4790      	blx	r2
 8001030:	f5b0 3f00 	cmp.w	r0, #131072	@ 0x20000
 8001034:	d10a      	bne.n	800104c <cmox_hmac_setKey+0x17c>
 8001036:	f8d8 00f8 	ldr.w	r0, [r8, #248]	@ 0xf8
 800103a:	464a      	mov	r2, r9
 800103c:	4651      	mov	r1, sl
 800103e:	6803      	ldr	r3, [r0, #0]
 8001040:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8001044:	47c0      	blx	r8
 8001046:	f5b0 3f00 	cmp.w	r0, #131072	@ 0x20000
 800104a:	d001      	beq.n	8001050 <cmox_hmac_setKey+0x180>
 800104c:	4811      	ldr	r0, [pc, #68]	@ (8001094 <cmox_hmac_setKey+0x1c4>)
 800104e:	e011      	b.n	8001074 <cmox_hmac_setKey+0x1a4>
 8001050:	2000      	movs	r0, #0
 8001052:	e006      	b.n	8001062 <cmox_hmac_setKey+0x192>
 8001054:	f85a 1020 	ldr.w	r1, [sl, r0, lsl #2]
 8001058:	f081 316a 	eor.w	r1, r1, #1785358954	@ 0x6a6a6a6a
 800105c:	f84a 1020 	str.w	r1, [sl, r0, lsl #2]
 8001060:	1c40      	adds	r0, r0, #1
 8001062:	ebb0 0f99 	cmp.w	r0, r9, lsr #2
 8001066:	d3f5      	bcc.n	8001054 <cmox_hmac_setKey+0x184>
 8001068:	68b0      	ldr	r0, [r6, #8]
 800106a:	f040 0001 	orr.w	r0, r0, #1
 800106e:	60b0      	str	r0, [r6, #8]
 8001070:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8001074:	b004      	add	sp, #16
 8001076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800107a:	bf00      	nop
 800107c:	00030002 	.word	0x00030002
 8001080:	080161dc 	.word	0x080161dc
 8001084:	2000020c 	.word	0x2000020c
 8001088:	080012a8 	.word	0x080012a8
 800108c:	d74ebead 	.word	0xd74ebead
 8001090:	a175be0d 	.word	0xa175be0d
 8001094:	00030001 	.word	0x00030001

08001098 <cmox_hmac_append>:
 8001098:	b538      	push	{r3, r4, r5, lr}
 800109a:	460c      	mov	r4, r1
 800109c:	7a01      	ldrb	r1, [r0, #8]
 800109e:	4615      	mov	r5, r2
 80010a0:	07ca      	lsls	r2, r1, #31
 80010a2:	d502      	bpl.n	80010aa <cmox_hmac_append+0x12>
 80010a4:	f000 f914 	bl	80012d0 <cmox_hmac_getByMAC>
 80010a8:	b908      	cbnz	r0, 80010ae <cmox_hmac_append+0x16>
 80010aa:	4808      	ldr	r0, [pc, #32]	@ (80010cc <cmox_hmac_append+0x34>)
 80010ac:	bd32      	pop	{r1, r4, r5, pc}
 80010ae:	f8d0 00f8 	ldr.w	r0, [r0, #248]	@ 0xf8
 80010b2:	4621      	mov	r1, r4
 80010b4:	462a      	mov	r2, r5
 80010b6:	6803      	ldr	r3, [r0, #0]
 80010b8:	68dc      	ldr	r4, [r3, #12]
 80010ba:	47a0      	blx	r4
 80010bc:	f5b0 3f00 	cmp.w	r0, #131072	@ 0x20000
 80010c0:	d001      	beq.n	80010c6 <cmox_hmac_append+0x2e>
 80010c2:	4803      	ldr	r0, [pc, #12]	@ (80010d0 <cmox_hmac_append+0x38>)
 80010c4:	bd32      	pop	{r1, r4, r5, pc}
 80010c6:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 80010ca:	bd32      	pop	{r1, r4, r5, pc}
 80010cc:	00030002 	.word	0x00030002
 80010d0:	00030001 	.word	0x00030001

080010d4 <cmox_hmac_generateTag>:
 80010d4:	e92d 41f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, lr}
 80010d8:	b091      	sub	sp, #68	@ 0x44
 80010da:	4605      	mov	r5, r0
 80010dc:	460e      	mov	r6, r1
 80010de:	4617      	mov	r7, r2
 80010e0:	2140      	movs	r1, #64	@ 0x40
 80010e2:	a801      	add	r0, sp, #4
 80010e4:	f010 f9f1 	bl	80114ca <__aeabi_memclr>
 80010e8:	7a29      	ldrb	r1, [r5, #8]
 80010ea:	07c8      	lsls	r0, r1, #31
 80010ec:	d504      	bpl.n	80010f8 <cmox_hmac_generateTag+0x24>
 80010ee:	4628      	mov	r0, r5
 80010f0:	f000 f8ee 	bl	80012d0 <cmox_hmac_getByMAC>
 80010f4:	0004      	movs	r4, r0
 80010f6:	d102      	bne.n	80010fe <cmox_hmac_generateTag+0x2a>
 80010f8:	f8df 80a4 	ldr.w	r8, [pc, #164]	@ 80011a0 <cmox_hmac_generateTag+0xcc>
 80010fc:	e04b      	b.n	8001196 <cmox_hmac_generateTag+0xc2>
 80010fe:	f8d4 00f8 	ldr.w	r0, [r4, #248]	@ 0xf8
 8001102:	466a      	mov	r2, sp
 8001104:	a901      	add	r1, sp, #4
 8001106:	6803      	ldr	r3, [r0, #0]
 8001108:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 80011a4 <cmox_hmac_generateTag+0xd0>
 800110c:	f8d3 c010 	ldr.w	ip, [r3, #16]
 8001110:	47e0      	blx	ip
 8001112:	f5b0 3f00 	cmp.w	r0, #131072	@ 0x20000
 8001116:	d13e      	bne.n	8001196 <cmox_hmac_generateTag+0xc2>
 8001118:	f8d4 00f8 	ldr.w	r0, [r4, #248]	@ 0xf8
 800111c:	6801      	ldr	r1, [r0, #0]
 800111e:	684a      	ldr	r2, [r1, #4]
 8001120:	4790      	blx	r2
 8001122:	f5b0 3f00 	cmp.w	r0, #131072	@ 0x20000
 8001126:	d136      	bne.n	8001196 <cmox_hmac_generateTag+0xc2>
 8001128:	f8d4 117c 	ldr.w	r1, [r4, #380]	@ 0x17c
 800112c:	4620      	mov	r0, r4
 800112e:	688a      	ldr	r2, [r1, #8]
 8001130:	4790      	blx	r2
 8001132:	f8d4 30f8 	ldr.w	r3, [r4, #248]	@ 0xf8
 8001136:	4602      	mov	r2, r0
 8001138:	f104 01fc 	add.w	r1, r4, #252	@ 0xfc
 800113c:	4618      	mov	r0, r3
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8001144:	47e0      	blx	ip
 8001146:	f5b0 3f00 	cmp.w	r0, #131072	@ 0x20000
 800114a:	d124      	bne.n	8001196 <cmox_hmac_generateTag+0xc2>
 800114c:	f8d4 017c 	ldr.w	r0, [r4, #380]	@ 0x17c
 8001150:	6841      	ldr	r1, [r0, #4]
 8001152:	4788      	blx	r1
 8001154:	f8d4 30f8 	ldr.w	r3, [r4, #248]	@ 0xf8
 8001158:	4602      	mov	r2, r0
 800115a:	a901      	add	r1, sp, #4
 800115c:	4618      	mov	r0, r3
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8001164:	47e0      	blx	ip
 8001166:	f5b0 3f00 	cmp.w	r0, #131072	@ 0x20000
 800116a:	d114      	bne.n	8001196 <cmox_hmac_generateTag+0xc2>
 800116c:	f8d4 00f8 	ldr.w	r0, [r4, #248]	@ 0xf8
 8001170:	6869      	ldr	r1, [r5, #4]
 8001172:	6802      	ldr	r2, [r0, #0]
 8001174:	6893      	ldr	r3, [r2, #8]
 8001176:	4798      	blx	r3
 8001178:	f5b0 3f00 	cmp.w	r0, #131072	@ 0x20000
 800117c:	d10b      	bne.n	8001196 <cmox_hmac_generateTag+0xc2>
 800117e:	f8d4 00f8 	ldr.w	r0, [r4, #248]	@ 0xf8
 8001182:	463a      	mov	r2, r7
 8001184:	4631      	mov	r1, r6
 8001186:	6803      	ldr	r3, [r0, #0]
 8001188:	691c      	ldr	r4, [r3, #16]
 800118a:	47a0      	blx	r4
 800118c:	f5b0 3f00 	cmp.w	r0, #131072	@ 0x20000
 8001190:	bf08      	it	eq
 8001192:	f44f 3840 	moveq.w	r8, #196608	@ 0x30000
 8001196:	4640      	mov	r0, r8
 8001198:	b012      	add	sp, #72	@ 0x48
 800119a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800119e:	bf00      	nop
 80011a0:	00030002 	.word	0x00030002
 80011a4:	00030001 	.word	0x00030001

080011a8 <cmox_hmac_verifyTag>:
 80011a8:	e92d 41f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, lr}
 80011ac:	b0a5      	sub	sp, #148	@ 0x94
 80011ae:	4607      	mov	r7, r0
 80011b0:	4688      	mov	r8, r1
 80011b2:	4616      	mov	r6, r2
 80011b4:	2140      	movs	r1, #64	@ 0x40
 80011b6:	a815      	add	r0, sp, #84	@ 0x54
 80011b8:	f010 f987 	bl	80114ca <__aeabi_memclr>
 80011bc:	2200      	movs	r2, #0
 80011be:	9204      	str	r2, [sp, #16]
 80011c0:	2140      	movs	r1, #64	@ 0x40
 80011c2:	a805      	add	r0, sp, #20
 80011c4:	f010 f981 	bl	80114ca <__aeabi_memclr>
 80011c8:	7a38      	ldrb	r0, [r7, #8]
 80011ca:	07c1      	lsls	r1, r0, #31
 80011cc:	d55e      	bpl.n	800128c <cmox_hmac_verifyTag+0xe4>
 80011ce:	4638      	mov	r0, r7
 80011d0:	f000 f87e 	bl	80012d0 <cmox_hmac_getByMAC>
 80011d4:	0005      	movs	r5, r0
 80011d6:	d059      	beq.n	800128c <cmox_hmac_verifyTag+0xe4>
 80011d8:	f8d5 00f8 	ldr.w	r0, [r5, #248]	@ 0xf8
 80011dc:	466a      	mov	r2, sp
 80011de:	a905      	add	r1, sp, #20
 80011e0:	6803      	ldr	r3, [r0, #0]
 80011e2:	4c2c      	ldr	r4, [pc, #176]	@ (8001294 <cmox_hmac_verifyTag+0xec>)
 80011e4:	f8d3 c010 	ldr.w	ip, [r3, #16]
 80011e8:	47e0      	blx	ip
 80011ea:	f5b0 3f00 	cmp.w	r0, #131072	@ 0x20000
 80011ee:	d13c      	bne.n	800126a <cmox_hmac_verifyTag+0xc2>
 80011f0:	f8d5 00f8 	ldr.w	r0, [r5, #248]	@ 0xf8
 80011f4:	6801      	ldr	r1, [r0, #0]
 80011f6:	684a      	ldr	r2, [r1, #4]
 80011f8:	4790      	blx	r2
 80011fa:	f5b0 3f00 	cmp.w	r0, #131072	@ 0x20000
 80011fe:	d134      	bne.n	800126a <cmox_hmac_verifyTag+0xc2>
 8001200:	f8d5 117c 	ldr.w	r1, [r5, #380]	@ 0x17c
 8001204:	4628      	mov	r0, r5
 8001206:	688a      	ldr	r2, [r1, #8]
 8001208:	4790      	blx	r2
 800120a:	f8d5 30f8 	ldr.w	r3, [r5, #248]	@ 0xf8
 800120e:	4602      	mov	r2, r0
 8001210:	f105 01fc 	add.w	r1, r5, #252	@ 0xfc
 8001214:	4618      	mov	r0, r3
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800121c:	47e0      	blx	ip
 800121e:	f5b0 3f00 	cmp.w	r0, #131072	@ 0x20000
 8001222:	d122      	bne.n	800126a <cmox_hmac_verifyTag+0xc2>
 8001224:	f8d5 017c 	ldr.w	r0, [r5, #380]	@ 0x17c
 8001228:	6841      	ldr	r1, [r0, #4]
 800122a:	4788      	blx	r1
 800122c:	f8d5 30f8 	ldr.w	r3, [r5, #248]	@ 0xf8
 8001230:	4602      	mov	r2, r0
 8001232:	a905      	add	r1, sp, #20
 8001234:	4618      	mov	r0, r3
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800123c:	47e0      	blx	ip
 800123e:	f5b0 3f00 	cmp.w	r0, #131072	@ 0x20000
 8001242:	d112      	bne.n	800126a <cmox_hmac_verifyTag+0xc2>
 8001244:	f8d5 00f8 	ldr.w	r0, [r5, #248]	@ 0xf8
 8001248:	6879      	ldr	r1, [r7, #4]
 800124a:	6802      	ldr	r2, [r0, #0]
 800124c:	6893      	ldr	r3, [r2, #8]
 800124e:	4798      	blx	r3
 8001250:	f5b0 3f00 	cmp.w	r0, #131072	@ 0x20000
 8001254:	d109      	bne.n	800126a <cmox_hmac_verifyTag+0xc2>
 8001256:	f8d5 00f8 	ldr.w	r0, [r5, #248]	@ 0xf8
 800125a:	aa04      	add	r2, sp, #16
 800125c:	a915      	add	r1, sp, #84	@ 0x54
 800125e:	6803      	ldr	r3, [r0, #0]
 8001260:	691d      	ldr	r5, [r3, #16]
 8001262:	47a8      	blx	r5
 8001264:	f5b0 3f00 	cmp.w	r0, #131072	@ 0x20000
 8001268:	d001      	beq.n	800126e <cmox_hmac_verifyTag+0xc6>
 800126a:	4620      	mov	r0, r4
 800126c:	e00f      	b.n	800128e <cmox_hmac_verifyTag+0xe6>
 800126e:	4b0a      	ldr	r3, [pc, #40]	@ (8001298 <cmox_hmac_verifyTag+0xf0>)
 8001270:	9603      	str	r6, [sp, #12]
 8001272:	681c      	ldr	r4, [r3, #0]
 8001274:	4909      	ldr	r1, [pc, #36]	@ (800129c <cmox_hmac_verifyTag+0xf4>)
 8001276:	9102      	str	r1, [sp, #8]
 8001278:	9400      	str	r4, [sp, #0]
 800127a:	4a09      	ldr	r2, [pc, #36]	@ (80012a0 <cmox_hmac_verifyTag+0xf8>)
 800127c:	9b04      	ldr	r3, [sp, #16]
 800127e:	9201      	str	r2, [sp, #4]
 8001280:	6879      	ldr	r1, [r7, #4]
 8001282:	4640      	mov	r0, r8
 8001284:	aa15      	add	r2, sp, #84	@ 0x54
 8001286:	f000 f9ed 	bl	8001664 <cmox_utils_robustCmp>
 800128a:	e000      	b.n	800128e <cmox_hmac_verifyTag+0xe6>
 800128c:	4805      	ldr	r0, [pc, #20]	@ (80012a4 <cmox_hmac_verifyTag+0xfc>)
 800128e:	b026      	add	sp, #152	@ 0x98
 8001290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001294:	00030001 	.word	0x00030001
 8001298:	0801632c 	.word	0x0801632c
 800129c:	00036e93 	.word	0x00036e93
 80012a0:	0003c726 	.word	0x0003c726
 80012a4:	00030002 	.word	0x00030002
 80012a8:	0101b004 	.word	0x0101b004
 80012ac:	45011700 	.word	0x45011700

080012b0 <hmac_table>:
 80012b0:	08000e65 08000e85 08000ea9 08000609     e...............
 80012c0:	08000ed1 08001099 080010d5 080011a9     ................

080012d0 <cmox_hmac_getByMAC>:
 80012d0:	6801      	ldr	r1, [r0, #0]
 80012d2:	4a02      	ldr	r2, [pc, #8]	@ (80012dc <cmox_hmac_getByMAC+0xc>)
 80012d4:	4291      	cmp	r1, r2
 80012d6:	bf18      	it	ne
 80012d8:	2000      	movne	r0, #0
 80012da:	4770      	bx	lr
 80012dc:	080012b0 	.word	0x080012b0

080012e0 <cmox_hmac_construct>:
 80012e0:	b510      	push	{r4, lr}
 80012e2:	0004      	movs	r4, r0
 80012e4:	bf08      	it	eq
 80012e6:	2400      	moveq	r4, #0
 80012e8:	d004      	beq.n	80012f4 <cmox_hmac_construct+0x14>
 80012ea:	4803      	ldr	r0, [pc, #12]	@ (80012f8 <cmox_hmac_construct+0x18>)
 80012ec:	6020      	str	r0, [r4, #0]
 80012ee:	6809      	ldr	r1, [r1, #0]
 80012f0:	4620      	mov	r0, r4
 80012f2:	4788      	blx	r1
 80012f4:	4620      	mov	r0, r4
 80012f6:	bd10      	pop	{r4, pc}
 80012f8:	080012b0 	.word	0x080012b0

080012fc <cmox_md_updateState_small>:
 80012fc:	2220      	movs	r2, #32
 80012fe:	305c      	adds	r0, #92	@ 0x5c
 8001300:	f010 b8e1 	b.w	80114c6 <__aeabi_memcpy>

08001304 <cmox_md_copyLastState_small>:
 8001304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001306:	6883      	ldr	r3, [r0, #8]
 8001308:	2400      	movs	r4, #0
 800130a:	089a      	lsrs	r2, r3, #2
 800130c:	f003 0303 	and.w	r3, r3, #3
 8001310:	e00f      	b.n	8001332 <cmox_md_copyLastState_small+0x2e>
 8001312:	eb00 0684 	add.w	r6, r0, r4, lsl #2
 8001316:	6df7      	ldr	r7, [r6, #92]	@ 0x5c
 8001318:	eb01 0584 	add.w	r5, r1, r4, lsl #2
 800131c:	1c64      	adds	r4, r4, #1
 800131e:	70ef      	strb	r7, [r5, #3]
 8001320:	6df7      	ldr	r7, [r6, #92]	@ 0x5c
 8001322:	0a3f      	lsrs	r7, r7, #8
 8001324:	70af      	strb	r7, [r5, #2]
 8001326:	6df7      	ldr	r7, [r6, #92]	@ 0x5c
 8001328:	0c3f      	lsrs	r7, r7, #16
 800132a:	706f      	strb	r7, [r5, #1]
 800132c:	6df6      	ldr	r6, [r6, #92]	@ 0x5c
 800132e:	0e36      	lsrs	r6, r6, #24
 8001330:	702e      	strb	r6, [r5, #0]
 8001332:	4294      	cmp	r4, r2
 8001334:	d3ed      	bcc.n	8001312 <cmox_md_copyLastState_small+0xe>
 8001336:	2400      	movs	r4, #0
 8001338:	e00b      	b.n	8001352 <cmox_md_copyLastState_small+0x4e>
 800133a:	f100 055c 	add.w	r5, r0, #92	@ 0x5c
 800133e:	f855 6022 	ldr.w	r6, [r5, r2, lsl #2]
 8001342:	00e5      	lsls	r5, r4, #3
 8001344:	f1c5 0518 	rsb	r5, r5, #24
 8001348:	40ee      	lsrs	r6, r5
 800134a:	eb04 0782 	add.w	r7, r4, r2, lsl #2
 800134e:	55ce      	strb	r6, [r1, r7]
 8001350:	1c64      	adds	r4, r4, #1
 8001352:	429c      	cmp	r4, r3
 8001354:	d3f1      	bcc.n	800133a <cmox_md_copyLastState_small+0x36>
 8001356:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001358 <cmox_md_padMsgLen_small>:
 8001358:	b530      	push	{r4, r5, lr}
 800135a:	68c4      	ldr	r4, [r0, #12]
 800135c:	6903      	ldr	r3, [r0, #16]
 800135e:	2200      	movs	r2, #0
 8001360:	1ae3      	subs	r3, r4, r3
 8001362:	5c8c      	ldrb	r4, [r1, r2]
 8001364:	18d5      	adds	r5, r2, r3
 8001366:	4405      	add	r5, r0
 8001368:	1c52      	adds	r2, r2, #1
 800136a:	772c      	strb	r4, [r5, #28]
 800136c:	2a08      	cmp	r2, #8
 800136e:	d3f8      	bcc.n	8001362 <cmox_md_padMsgLen_small+0xa>
 8001370:	bd30      	pop	{r4, r5, pc}

08001372 <cmox_md_construct>:
 8001372:	6003      	str	r3, [r0, #0]
 8001374:	60c1      	str	r1, [r0, #12]
 8001376:	6102      	str	r2, [r0, #16]
 8001378:	4770      	bx	lr

0800137a <cmox_md_init>:
 800137a:	b538      	push	{r3, r4, r5, lr}
 800137c:	4615      	mov	r5, r2
 800137e:	4604      	mov	r4, r0
 8001380:	2200      	movs	r2, #0
 8001382:	6062      	str	r2, [r4, #4]
 8001384:	6823      	ldr	r3, [r4, #0]
 8001386:	685a      	ldr	r2, [r3, #4]
 8001388:	4790      	blx	r2
 800138a:	2000      	movs	r0, #0
 800138c:	6160      	str	r0, [r4, #20]
 800138e:	61a0      	str	r0, [r4, #24]
 8001390:	60a5      	str	r5, [r4, #8]
 8001392:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8001396:	bd32      	pop	{r1, r4, r5, pc}

08001398 <cmox_md_setTagSize>:
 8001398:	6081      	str	r1, [r0, #8]
 800139a:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800139e:	4770      	bx	lr

080013a0 <cmox_md_append>:
 80013a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80013a4:	4604      	mov	r4, r0
 80013a6:	7920      	ldrb	r0, [r4, #4]
 80013a8:	f8d4 800c 	ldr.w	r8, [r4, #12]
 80013ac:	0745      	lsls	r5, r0, #29
 80013ae:	bf48      	it	mi
 80013b0:	4824      	ldrmi	r0, [pc, #144]	@ (8001444 <cmox_md_append+0xa4>)
 80013b2:	d444      	bmi.n	800143e <cmox_md_append+0x9e>
 80013b4:	6966      	ldr	r6, [r4, #20]
 80013b6:	461d      	mov	r5, r3
 80013b8:	f1a8 0001 	sub.w	r0, r8, #1
 80013bc:	ea00 03d6 	and.w	r3, r0, r6, lsr #3
 80013c0:	eb06 06c5 	add.w	r6, r6, r5, lsl #3
 80013c4:	6166      	str	r6, [r4, #20]
 80013c6:	ebb6 0fc5 	cmp.w	r6, r5, lsl #3
 80013ca:	d202      	bcs.n	80013d2 <cmox_md_append+0x32>
 80013cc:	69a6      	ldr	r6, [r4, #24]
 80013ce:	1c76      	adds	r6, r6, #1
 80013d0:	61a6      	str	r6, [r4, #24]
 80013d2:	69a6      	ldr	r6, [r4, #24]
 80013d4:	4617      	mov	r7, r2
 80013d6:	eb06 7655 	add.w	r6, r6, r5, lsr #29
 80013da:	61a6      	str	r6, [r4, #24]
 80013dc:	460e      	mov	r6, r1
 80013de:	18e9      	adds	r1, r5, r3
 80013e0:	4288      	cmp	r0, r1
 80013e2:	d224      	bcs.n	800142e <cmox_md_append+0x8e>
 80013e4:	eba8 0903 	sub.w	r9, r8, r3
 80013e8:	464a      	mov	r2, r9
 80013ea:	4631      	mov	r1, r6
 80013ec:	18f8      	adds	r0, r7, r3
 80013ee:	f010 f86a 	bl	80114c6 <__aeabi_memcpy>
 80013f2:	6822      	ldr	r2, [r4, #0]
 80013f4:	4639      	mov	r1, r7
 80013f6:	e00e      	b.n	8001416 <cmox_md_append+0x76>
 80013f8:	4642      	mov	r2, r8
 80013fa:	4638      	mov	r0, r7
 80013fc:	f010 f863 	bl	80114c6 <__aeabi_memcpy>
 8001400:	6823      	ldr	r3, [r4, #0]
 8001402:	4639      	mov	r1, r7
 8001404:	4620      	mov	r0, r4
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	4790      	blx	r2
 800140a:	e007      	b.n	800141c <cmox_md_append+0x7c>
 800140c:	1831      	adds	r1, r6, r0
 800140e:	f011 0003 	ands.w	r0, r1, #3
 8001412:	d1f1      	bne.n	80013f8 <cmox_md_append+0x58>
 8001414:	6822      	ldr	r2, [r4, #0]
 8001416:	4620      	mov	r0, r4
 8001418:	6813      	ldr	r3, [r2, #0]
 800141a:	4798      	blx	r3
 800141c:	4648      	mov	r0, r9
 800141e:	eb00 0908 	add.w	r9, r0, r8
 8001422:	f1a9 0101 	sub.w	r1, r9, #1
 8001426:	42a9      	cmp	r1, r5
 8001428:	d3f0      	bcc.n	800140c <cmox_md_append+0x6c>
 800142a:	2300      	movs	r3, #0
 800142c:	e000      	b.n	8001430 <cmox_md_append+0x90>
 800142e:	2000      	movs	r0, #0
 8001430:	1a2a      	subs	r2, r5, r0
 8001432:	1831      	adds	r1, r6, r0
 8001434:	18f8      	adds	r0, r7, r3
 8001436:	f010 f846 	bl	80114c6 <__aeabi_memcpy>
 800143a:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800143e:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}
 8001442:	bf00      	nop
 8001444:	00020004 	.word	0x00020004

08001448 <cmox_md_generateTag>:
 8001448:	e92d 4ffc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800144c:	b085      	sub	sp, #20
 800144e:	4602      	mov	r2, r0
 8001450:	68d0      	ldr	r0, [r2, #12]
 8001452:	6913      	ldr	r3, [r2, #16]
 8001454:	2700      	movs	r7, #0
 8001456:	f8df c16c 	ldr.w	ip, [pc, #364]	@ 80015c4 <cmox_md_generateTag+0x17c>
 800145a:	eba0 0a03 	sub.w	sl, r0, r3
 800145e:	6850      	ldr	r0, [r2, #4]
 8001460:	f10d 0e0c 	add.w	lr, sp, #12
 8001464:	f8df 8160 	ldr.w	r8, [pc, #352]	@ 80015c8 <cmox_md_generateTag+0x180>
 8001468:	f040 0004 	orr.w	r0, r0, #4
 800146c:	6050      	str	r0, [r2, #4]
 800146e:	a803      	add	r0, sp, #12
 8001470:	9002      	str	r0, [sp, #8]
 8001472:	e9d8 3400 	ldrd	r3, r4, [r8]
 8001476:	a803      	add	r0, sp, #12
 8001478:	4d54      	ldr	r5, [pc, #336]	@ (80015cc <cmox_md_generateTag+0x184>)
 800147a:	e9c0 3400 	strd	r3, r4, [r0]
 800147e:	7828      	ldrb	r0, [r5, #0]
 8001480:	4d53      	ldr	r5, [pc, #332]	@ (80015d0 <cmox_md_generateTag+0x188>)
 8001482:	2800      	cmp	r0, #0
 8001484:	bf0c      	ite	eq
 8001486:	2300      	moveq	r3, #0
 8001488:	2304      	movne	r3, #4
 800148a:	4699      	mov	r9, r3
 800148c:	f85c 3003 	ldr.w	r3, [ip, r3]
 8001490:	f85e 4009 	ldr.w	r4, [lr, r9]
 8001494:	2601      	movs	r6, #1
 8001496:	4423      	add	r3, r4
 8001498:	601d      	str	r5, [r3, #0]
 800149a:	681c      	ldr	r4, [r3, #0]
 800149c:	609e      	str	r6, [r3, #8]
 800149e:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80014a2:	9d03      	ldr	r5, [sp, #12]
 80014a4:	f8dc 9000 	ldr.w	r9, [ip]
 80014a8:	f8de 6004 	ldr.w	r6, [lr, #4]
 80014ac:	405d      	eors	r5, r3
 80014ae:	4065      	eors	r5, r4
 80014b0:	4c48      	ldr	r4, [pc, #288]	@ (80015d4 <cmox_md_generateTag+0x18c>)
 80014b2:	4065      	eors	r5, r4
 80014b4:	ea89 0606 	eor.w	r6, r9, r6
 80014b8:	4c47      	ldr	r4, [pc, #284]	@ (80015d8 <cmox_md_generateTag+0x190>)
 80014ba:	4066      	eors	r6, r4
 80014bc:	1975      	adds	r5, r6, r5
 80014be:	4c47      	ldr	r4, [pc, #284]	@ (80015dc <cmox_md_generateTag+0x194>)
 80014c0:	e9d8 6b00 	ldrd	r6, fp, [r8]
 80014c4:	4065      	eors	r5, r4
 80014c6:	2800      	cmp	r0, #0
 80014c8:	ac03      	add	r4, sp, #12
 80014ca:	e9c4 6b00 	strd	r6, fp, [r4]
 80014ce:	9e02      	ldr	r6, [sp, #8]
 80014d0:	bf0e      	itee	eq
 80014d2:	2400      	moveq	r4, #0
 80014d4:	2004      	movne	r0, #4
 80014d6:	2404      	movne	r4, #4
 80014d8:	f85c 0000 	ldr.w	r0, [ip, r0]
 80014dc:	5934      	ldr	r4, [r6, r4]
 80014de:	2601      	movs	r6, #1
 80014e0:	1820      	adds	r0, r4, r0
 80014e2:	4c3f      	ldr	r4, [pc, #252]	@ (80015e0 <cmox_md_generateTag+0x198>)
 80014e4:	6004      	str	r4, [r0, #0]
 80014e6:	6804      	ldr	r4, [r0, #0]
 80014e8:	6086      	str	r6, [r0, #8]
 80014ea:	9803      	ldr	r0, [sp, #12]
 80014ec:	9e02      	ldr	r6, [sp, #8]
 80014ee:	4043      	eors	r3, r0
 80014f0:	4063      	eors	r3, r4
 80014f2:	6870      	ldr	r0, [r6, #4]
 80014f4:	4c37      	ldr	r4, [pc, #220]	@ (80015d4 <cmox_md_generateTag+0x18c>)
 80014f6:	4063      	eors	r3, r4
 80014f8:	ea89 0000 	eor.w	r0, r9, r0
 80014fc:	4c36      	ldr	r4, [pc, #216]	@ (80015d8 <cmox_md_generateTag+0x190>)
 80014fe:	4060      	eors	r0, r4
 8001500:	4403      	add	r3, r0
 8001502:	4838      	ldr	r0, [pc, #224]	@ (80015e4 <cmox_md_generateTag+0x19c>)
 8001504:	4043      	eors	r3, r0
 8001506:	0028      	movs	r0, r5
 8001508:	bf18      	it	ne
 800150a:	2001      	movne	r0, #1
 800150c:	1e5b      	subs	r3, r3, #1
 800150e:	419b      	sbcs	r3, r3
 8001510:	2f04      	cmp	r7, #4
 8001512:	bf2c      	ite	cs
 8001514:	b2c0      	uxtbcs	r0, r0
 8001516:	0fd8      	lsrcc	r0, r3, #31
 8001518:	f102 0314 	add.w	r3, r2, #20
 800151c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001520:	f007 0303 	and.w	r3, r7, #3
 8001524:	f1c3 0303 	rsb	r3, r3, #3
 8001528:	00db      	lsls	r3, r3, #3
 800152a:	40d8      	lsrs	r0, r3
 800152c:	f80d 0007 	strb.w	r0, [sp, r7]
 8001530:	1c7f      	adds	r7, r7, #1
 8001532:	2f08      	cmp	r7, #8
 8001534:	d39d      	bcc.n	8001472 <cmox_md_generateTag+0x2a>
 8001536:	4615      	mov	r5, r2
 8001538:	696a      	ldr	r2, [r5, #20]
 800153a:	69ab      	ldr	r3, [r5, #24]
 800153c:	68e8      	ldr	r0, [r5, #12]
 800153e:	08d2      	lsrs	r2, r2, #3
 8001540:	ea42 7243 	orr.w	r2, r2, r3, lsl #29
 8001544:	1e40      	subs	r0, r0, #1
 8001546:	2300      	movs	r3, #0
 8001548:	ea00 0702 	and.w	r7, r0, r2
 800154c:	4002      	ands	r2, r0
 800154e:	460c      	mov	r4, r1
 8001550:	429b      	cmp	r3, r3
 8001552:	d80a      	bhi.n	800156a <cmox_md_generateTag+0x122>
 8001554:	4552      	cmp	r2, sl
 8001556:	d208      	bcs.n	800156a <cmox_md_generateTag+0x122>
 8001558:	2080      	movs	r0, #128	@ 0x80
 800155a:	55e0      	strb	r0, [r4, r7]
 800155c:	1c7f      	adds	r7, r7, #1
 800155e:	4557      	cmp	r7, sl
 8001560:	d216      	bcs.n	8001590 <cmox_md_generateTag+0x148>
 8001562:	ebaa 0107 	sub.w	r1, sl, r7
 8001566:	19e0      	adds	r0, r4, r7
 8001568:	e010      	b.n	800158c <cmox_md_generateTag+0x144>
 800156a:	2080      	movs	r0, #128	@ 0x80
 800156c:	55e0      	strb	r0, [r4, r7]
 800156e:	e000      	b.n	8001572 <cmox_md_generateTag+0x12a>
 8001570:	55e3      	strb	r3, [r4, r7]
 8001572:	68e8      	ldr	r0, [r5, #12]
 8001574:	1c7f      	adds	r7, r7, #1
 8001576:	4287      	cmp	r7, r0
 8001578:	d3fa      	bcc.n	8001570 <cmox_md_generateTag+0x128>
 800157a:	682a      	ldr	r2, [r5, #0]
 800157c:	4628      	mov	r0, r5
 800157e:	6813      	ldr	r3, [r2, #0]
 8001580:	4798      	blx	r3
 8001582:	f1ba 0f00 	cmp.w	sl, #0
 8001586:	d003      	beq.n	8001590 <cmox_md_generateTag+0x148>
 8001588:	4651      	mov	r1, sl
 800158a:	4620      	mov	r0, r4
 800158c:	f00f ff9d 	bl	80114ca <__aeabi_memclr>
 8001590:	682a      	ldr	r2, [r5, #0]
 8001592:	9e06      	ldr	r6, [sp, #24]
 8001594:	9f05      	ldr	r7, [sp, #20]
 8001596:	6893      	ldr	r3, [r2, #8]
 8001598:	4669      	mov	r1, sp
 800159a:	4628      	mov	r0, r5
 800159c:	4798      	blx	r3
 800159e:	682a      	ldr	r2, [r5, #0]
 80015a0:	4621      	mov	r1, r4
 80015a2:	4628      	mov	r0, r5
 80015a4:	f8d2 9000 	ldr.w	r9, [r2]
 80015a8:	47c8      	blx	r9
 80015aa:	682b      	ldr	r3, [r5, #0]
 80015ac:	4639      	mov	r1, r7
 80015ae:	4628      	mov	r0, r5
 80015b0:	68da      	ldr	r2, [r3, #12]
 80015b2:	4790      	blx	r2
 80015b4:	b10e      	cbz	r6, 80015ba <cmox_md_generateTag+0x172>
 80015b6:	68a8      	ldr	r0, [r5, #8]
 80015b8:	6030      	str	r0, [r6, #0]
 80015ba:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80015be:	b007      	add	sp, #28
 80015c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80015c4:	080161dc 	.word	0x080161dc
 80015c8:	080015e8 	.word	0x080015e8
 80015cc:	2000020c 	.word	0x2000020c
 80015d0:	9310c55f 	.word	0x9310c55f
 80015d4:	12008504 	.word	0x12008504
 80015d8:	7a0168fc 	.word	0x7a0168fc
 80015dc:	ff24f5c0 	.word	0xff24f5c0
 80015e0:	d433af24 	.word	0xd433af24
 80015e4:	8b69af26 	.word	0x8b69af26
 80015e8:	0101b004 	.word	0x0101b004
 80015ec:	45011700 	.word	0x45011700

080015f0 <firstloop_bb_cmp>:
 80015f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015f2:	2401      	movs	r4, #1
 80015f4:	9400      	str	r4, [sp, #0]
 80015f6:	2300      	movs	r3, #0
 80015f8:	2400      	movs	r4, #0
 80015fa:	e00d      	b.n	8001618 <firstloop_bb_cmp+0x28>
 80015fc:	9d00      	ldr	r5, [sp, #0]
 80015fe:	5d06      	ldrb	r6, [r0, r4]
 8001600:	5d0f      	ldrb	r7, [r1, r4]
 8001602:	1c64      	adds	r4, r4, #1
 8001604:	407e      	eors	r6, r7
 8001606:	43f6      	mvns	r6, r6
 8001608:	1c76      	adds	r6, r6, #1
 800160a:	0ff6      	lsrs	r6, r6, #31
 800160c:	f086 0601 	eor.w	r6, r6, #1
 8001610:	4035      	ands	r5, r6
 8001612:	9500      	str	r5, [sp, #0]
 8001614:	9d00      	ldr	r5, [sp, #0]
 8001616:	18eb      	adds	r3, r5, r3
 8001618:	4294      	cmp	r4, r2
 800161a:	d3ef      	bcc.n	80015fc <firstloop_bb_cmp+0xc>
 800161c:	4618      	mov	r0, r3
 800161e:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08001620 <secondloop_bb_cmp>:
 8001620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001622:	2300      	movs	r3, #0
 8001624:	2401      	movs	r4, #1
 8001626:	9400      	str	r4, [sp, #0]
 8001628:	2a00      	cmp	r2, #0
 800162a:	e011      	b.n	8001650 <secondloop_bb_cmp+0x30>
 800162c:	9c00      	ldr	r4, [sp, #0]
 800162e:	1885      	adds	r5, r0, r2
 8001630:	f815 6c01 	ldrb.w	r6, [r5, #-1]
 8001634:	188f      	adds	r7, r1, r2
 8001636:	f817 5c01 	ldrb.w	r5, [r7, #-1]
 800163a:	406e      	eors	r6, r5
 800163c:	43f6      	mvns	r6, r6
 800163e:	1c76      	adds	r6, r6, #1
 8001640:	0ff6      	lsrs	r6, r6, #31
 8001642:	f086 0601 	eor.w	r6, r6, #1
 8001646:	4034      	ands	r4, r6
 8001648:	9400      	str	r4, [sp, #0]
 800164a:	9c00      	ldr	r4, [sp, #0]
 800164c:	18e3      	adds	r3, r4, r3
 800164e:	1e52      	subs	r2, r2, #1
 8001650:	d1ec      	bne.n	800162c <secondloop_bb_cmp+0xc>
 8001652:	4618      	mov	r0, r3
 8001654:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
	...

08001658 <bufType_bb>:
 8001658:	15f1 0800 1621 0800 0001 0000               ....!.......

08001664 <cmox_utils_robustCmp>:
 8001664:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001668:	461d      	mov	r5, r3
 800166a:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800166e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8001670:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8001672:	f04f 33ff 	mov.w	r3, #4294967295
 8001676:	9300      	str	r3, [sp, #0]
 8001678:	f8d9 b000 	ldr.w	fp, [r9]
 800167c:	460e      	mov	r6, r1
 800167e:	4692      	mov	sl, r2
 8001680:	4680      	mov	r8, r0
 8001682:	4632      	mov	r2, r6
 8001684:	4651      	mov	r1, sl
 8001686:	47d8      	blx	fp
 8001688:	4683      	mov	fp, r0
 800168a:	b364      	cbz	r4, 80016e6 <cmox_utils_robustCmp+0x82>
 800168c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001690:	4632      	mov	r2, r6
 8001692:	4651      	mov	r1, sl
 8001694:	4640      	mov	r0, r8
 8001696:	4798      	blx	r3
 8001698:	ea6f 020b 	mvn.w	r2, fp
 800169c:	1c52      	adds	r2, r2, #1
 800169e:	9900      	ldr	r1, [sp, #0]
 80016a0:	ea42 020b 	orr.w	r2, r2, fp
 80016a4:	ea6f 73d2 	mvn.w	r3, r2, lsr #31
 80016a8:	1c5b      	adds	r3, r3, #1
 80016aa:	4019      	ands	r1, r3
 80016ac:	43c2      	mvns	r2, r0
 80016ae:	9100      	str	r1, [sp, #0]
 80016b0:	1c52      	adds	r2, r2, #1
 80016b2:	9900      	ldr	r1, [sp, #0]
 80016b4:	4302      	orrs	r2, r0
 80016b6:	ea6f 73d2 	mvn.w	r3, r2, lsr #31
 80016ba:	1c5b      	adds	r3, r3, #1
 80016bc:	4019      	ands	r1, r3
 80016be:	9100      	str	r1, [sp, #0]
 80016c0:	f086 3155 	eor.w	r1, r6, #1431655765	@ 0x55555555
 80016c4:	4048      	eors	r0, r1
 80016c6:	ea87 0100 	eor.w	r1, r7, r0
 80016ca:	f081 3155 	eor.w	r1, r1, #1431655765	@ 0x55555555
 80016ce:	6021      	str	r1, [r4, #0]
 80016d0:	f080 3155 	eor.w	r1, r0, #1431655765	@ 0x55555555
 80016d4:	43c9      	mvns	r1, r1
 80016d6:	1c49      	adds	r1, r1, #1
 80016d8:	9a00      	ldr	r2, [sp, #0]
 80016da:	4308      	orrs	r0, r1
 80016dc:	ea6f 70d0 	mvn.w	r0, r0, lsr #31
 80016e0:	1c40      	adds	r0, r0, #1
 80016e2:	4382      	bics	r2, r0
 80016e4:	9200      	str	r2, [sp, #0]
 80016e6:	f8d9 0008 	ldr.w	r0, [r9, #8]
 80016ea:	2801      	cmp	r0, #1
 80016ec:	d109      	bne.n	8001702 <cmox_utils_robustCmp+0x9e>
 80016ee:	4075      	eors	r5, r6
 80016f0:	43e9      	mvns	r1, r5
 80016f2:	1c49      	adds	r1, r1, #1
 80016f4:	9800      	ldr	r0, [sp, #0]
 80016f6:	430d      	orrs	r5, r1
 80016f8:	ea6f 72d5 	mvn.w	r2, r5, lsr #31
 80016fc:	1c52      	adds	r2, r2, #1
 80016fe:	4390      	bics	r0, r2
 8001700:	e00a      	b.n	8001718 <cmox_utils_robustCmp+0xb4>
 8001702:	1cf1      	adds	r1, r6, #3
 8001704:	ea85 0291 	eor.w	r2, r5, r1, lsr #2
 8001708:	9800      	ldr	r0, [sp, #0]
 800170a:	43d2      	mvns	r2, r2
 800170c:	1c52      	adds	r2, r2, #1
 800170e:	4315      	orrs	r5, r2
 8001710:	ea6f 73d5 	mvn.w	r3, r5, lsr #31
 8001714:	1c5b      	adds	r3, r3, #1
 8001716:	4398      	bics	r0, r3
 8001718:	f086 36aa 	eor.w	r6, r6, #2863311530	@ 0xaaaaaaaa
 800171c:	ea86 060b 	eor.w	r6, r6, fp
 8001720:	f086 33aa 	eor.w	r3, r6, #2863311530	@ 0xaaaaaaaa
 8001724:	43f2      	mvns	r2, r6
 8001726:	43db      	mvns	r3, r3
 8001728:	f3c2 72c0 	ubfx	r2, r2, #31, #1
 800172c:	1c5b      	adds	r3, r3, #1
 800172e:	9000      	str	r0, [sp, #0]
 8001730:	ea42 72d3 	orr.w	r2, r2, r3, lsr #31
 8001734:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001736:	9900      	ldr	r1, [sp, #0]
 8001738:	43d2      	mvns	r2, r2
 800173a:	1c52      	adds	r2, r2, #1
 800173c:	4391      	bics	r1, r2
 800173e:	9100      	str	r1, [sp, #0]
 8001740:	9900      	ldr	r1, [sp, #0]
 8001742:	4077      	eors	r7, r6
 8001744:	f087 37aa 	eor.w	r7, r7, #2863311530	@ 0xaaaaaaaa
 8001748:	4388      	bics	r0, r1
 800174a:	9900      	ldr	r1, [sp, #0]
 800174c:	400f      	ands	r7, r1
 800174e:	4338      	orrs	r0, r7
 8001750:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001754 <cmox_aesSmall_keySchedule>:
 8001754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001758:	f100 050c 	add.w	r5, r0, #12
 800175c:	2400      	movs	r4, #0
 800175e:	0892      	lsrs	r2, r2, #2
 8001760:	4b43      	ldr	r3, [pc, #268]	@ (8001870 <cmox_aesSmall_keySchedule+0x11c>)
 8001762:	2000      	movs	r0, #0
 8001764:	e010      	b.n	8001788 <cmox_aesSmall_keySchedule+0x34>
 8001766:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 800176a:	f896 c001 	ldrb.w	ip, [r6, #1]
 800176e:	7837      	ldrb	r7, [r6, #0]
 8001770:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 8001774:	ea4c 6c07 	orr.w	ip, ip, r7, lsl #24
 8001778:	78b7      	ldrb	r7, [r6, #2]
 800177a:	78f6      	ldrb	r6, [r6, #3]
 800177c:	ea4c 2707 	orr.w	r7, ip, r7, lsl #8
 8001780:	433e      	orrs	r6, r7
 8001782:	f845 6020 	str.w	r6, [r5, r0, lsl #2]
 8001786:	1c40      	adds	r0, r0, #1
 8001788:	4290      	cmp	r0, r2
 800178a:	d3ec      	bcc.n	8001766 <cmox_aesSmall_keySchedule+0x12>
 800178c:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8001790:	f858 0c04 	ldr.w	r0, [r8, #-4]
 8001794:	4f37      	ldr	r7, [pc, #220]	@ (8001874 <cmox_aesSmall_keySchedule+0x120>)
 8001796:	f8d5 c000 	ldr.w	ip, [r5]
 800179a:	0406      	lsls	r6, r0, #16
 800179c:	0201      	lsls	r1, r0, #8
 800179e:	0e36      	lsrs	r6, r6, #24
 80017a0:	0e09      	lsrs	r1, r1, #24
 80017a2:	5dbe      	ldrb	r6, [r7, r6]
 80017a4:	5c79      	ldrb	r1, [r7, r1]
 80017a6:	0436      	lsls	r6, r6, #16
 80017a8:	ea46 6601 	orr.w	r6, r6, r1, lsl #24
 80017ac:	b2c1      	uxtb	r1, r0
 80017ae:	5c79      	ldrb	r1, [r7, r1]
 80017b0:	0e00      	lsrs	r0, r0, #24
 80017b2:	ea46 2601 	orr.w	r6, r6, r1, lsl #8
 80017b6:	5c39      	ldrb	r1, [r7, r0]
 80017b8:	ea41 0006 	orr.w	r0, r1, r6
 80017bc:	ea80 010c 	eor.w	r1, r0, ip
 80017c0:	4e2d      	ldr	r6, [pc, #180]	@ (8001878 <cmox_aesSmall_keySchedule+0x124>)
 80017c2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80017c6:	1c64      	adds	r4, r4, #1
 80017c8:	4048      	eors	r0, r1
 80017ca:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
 80017ce:	2001      	movs	r0, #1
 80017d0:	1881      	adds	r1, r0, r2
 80017d2:	1f2e      	subs	r6, r5, #4
 80017d4:	f856 6021 	ldr.w	r6, [r6, r1, lsl #2]
 80017d8:	f855 c020 	ldr.w	ip, [r5, r0, lsl #2]
 80017dc:	1c40      	adds	r0, r0, #1
 80017de:	2804      	cmp	r0, #4
 80017e0:	ea8c 0606 	eor.w	r6, ip, r6
 80017e4:	f845 6021 	str.w	r6, [r5, r1, lsl #2]
 80017e8:	d3f2      	bcc.n	80017d0 <cmox_aesSmall_keySchedule+0x7c>
 80017ea:	2a04      	cmp	r2, #4
 80017ec:	d004      	beq.n	80017f8 <cmox_aesSmall_keySchedule+0xa4>
 80017ee:	2a06      	cmp	r2, #6
 80017f0:	d00b      	beq.n	800180a <cmox_aesSmall_keySchedule+0xb6>
 80017f2:	2a08      	cmp	r2, #8
 80017f4:	d014      	beq.n	8001820 <cmox_aesSmall_keySchedule+0xcc>
 80017f6:	e037      	b.n	8001868 <cmox_aesSmall_keySchedule+0x114>
 80017f8:	2c0a      	cmp	r4, #10
 80017fa:	d204      	bcs.n	8001806 <cmox_aesSmall_keySchedule+0xb2>
 80017fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001800:	d001      	beq.n	8001806 <cmox_aesSmall_keySchedule+0xb2>
 8001802:	4645      	mov	r5, r8
 8001804:	e7c2      	b.n	800178c <cmox_aesSmall_keySchedule+0x38>
 8001806:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800180a:	2c07      	cmp	r4, #7
 800180c:	d8fb      	bhi.n	8001806 <cmox_aesSmall_keySchedule+0xb2>
 800180e:	6a6f      	ldr	r7, [r5, #36]	@ 0x24
 8001810:	6928      	ldr	r0, [r5, #16]
 8001812:	4047      	eors	r7, r0
 8001814:	62af      	str	r7, [r5, #40]	@ 0x28
 8001816:	6968      	ldr	r0, [r5, #20]
 8001818:	ea80 0107 	eor.w	r1, r0, r7
 800181c:	62e9      	str	r1, [r5, #44]	@ 0x2c
 800181e:	e7ed      	b.n	80017fc <cmox_aesSmall_keySchedule+0xa8>
 8001820:	2c07      	cmp	r4, #7
 8001822:	d2f0      	bcs.n	8001806 <cmox_aesSmall_keySchedule+0xb2>
 8001824:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8001826:	6929      	ldr	r1, [r5, #16]
 8001828:	0e06      	lsrs	r6, r0, #24
 800182a:	f817 e006 	ldrb.w	lr, [r7, r6]
 800182e:	0206      	lsls	r6, r0, #8
 8001830:	0e36      	lsrs	r6, r6, #24
 8001832:	5dbe      	ldrb	r6, [r7, r6]
 8001834:	0436      	lsls	r6, r6, #16
 8001836:	ea46 6c0e 	orr.w	ip, r6, lr, lsl #24
 800183a:	0406      	lsls	r6, r0, #16
 800183c:	ea4f 6e16 	mov.w	lr, r6, lsr #24
 8001840:	f817 600e 	ldrb.w	r6, [r7, lr]
 8001844:	b2c0      	uxtb	r0, r0
 8001846:	5c38      	ldrb	r0, [r7, r0]
 8001848:	ea4c 2606 	orr.w	r6, ip, r6, lsl #8
 800184c:	4330      	orrs	r0, r6
 800184e:	4041      	eors	r1, r0
 8001850:	6329      	str	r1, [r5, #48]	@ 0x30
 8001852:	2005      	movs	r0, #5
 8001854:	eb05 0180 	add.w	r1, r5, r0, lsl #2
 8001858:	69cf      	ldr	r7, [r1, #28]
 800185a:	680e      	ldr	r6, [r1, #0]
 800185c:	1c40      	adds	r0, r0, #1
 800185e:	4077      	eors	r7, r6
 8001860:	620f      	str	r7, [r1, #32]
 8001862:	2807      	cmp	r0, #7
 8001864:	d9f6      	bls.n	8001854 <cmox_aesSmall_keySchedule+0x100>
 8001866:	e7c9      	b.n	80017fc <cmox_aesSmall_keySchedule+0xa8>
 8001868:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 800186c:	e7c9      	b.n	8001802 <cmox_aesSmall_keySchedule+0xae>
 800186e:	bf00      	nop
 8001870:	00010004 	.word	0x00010004
 8001874:	08016e1c 	.word	0x08016e1c
 8001878:	08016330 	.word	0x08016330

0800187c <cmox_cipherMode_init>:
 800187c:	2200      	movs	r2, #0
 800187e:	6042      	str	r2, [r0, #4]
 8001880:	2001      	movs	r0, #1
 8001882:	6088      	str	r0, [r1, #8]
 8001884:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8001888:	4770      	bx	lr
	...

0800188c <cmox_cipherMode_setKey>:
 800188c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001890:	b08c      	sub	sp, #48	@ 0x30
 8001892:	4692      	mov	sl, r2
 8001894:	4ae8      	ldr	r2, [pc, #928]	@ (8001c38 <cmox_cipherMode_setKey+0x3ac>)
 8001896:	4be9      	ldr	r3, [pc, #932]	@ (8001c3c <cmox_cipherMode_setKey+0x3b0>)
 8001898:	4de9      	ldr	r5, [pc, #932]	@ (8001c40 <cmox_cipherMode_setKey+0x3b4>)
 800189a:	f8df 83a8 	ldr.w	r8, [pc, #936]	@ 8001c44 <cmox_cipherMode_setKey+0x3b8>
 800189e:	4eea      	ldr	r6, [pc, #936]	@ (8001c48 <cmox_cipherMode_setKey+0x3bc>)
 80018a0:	f8df b3a8 	ldr.w	fp, [pc, #936]	@ 8001c4c <cmox_cipherMode_setKey+0x3c0>
 80018a4:	f10d 0c04 	add.w	ip, sp, #4
 80018a8:	f1ba 0f10 	cmp.w	sl, #16
 80018ac:	d008      	beq.n	80018c0 <cmox_cipherMode_setKey+0x34>
 80018ae:	f1ba 0f18 	cmp.w	sl, #24
 80018b2:	f000 8092 	beq.w	80019da <cmox_cipherMode_setKey+0x14e>
 80018b6:	f1ba 0f20 	cmp.w	sl, #32
 80018ba:	f000 8118 	beq.w	8001aee <cmox_cipherMode_setKey+0x262>
 80018be:	e1a8      	b.n	8001c12 <cmox_cipherMode_setKey+0x386>
 80018c0:	e9db 0400 	ldrd	r0, r4, [fp]
 80018c4:	f10d 0e24 	add.w	lr, sp, #36	@ 0x24
 80018c8:	4fe1      	ldr	r7, [pc, #900]	@ (8001c50 <cmox_cipherMode_setKey+0x3c4>)
 80018ca:	e9ce 0400 	strd	r0, r4, [lr]
 80018ce:	7838      	ldrb	r0, [r7, #0]
 80018d0:	2800      	cmp	r0, #0
 80018d2:	bf0c      	ite	eq
 80018d4:	f04f 0900 	moveq.w	r9, #0
 80018d8:	f04f 0904 	movne.w	r9, #4
 80018dc:	f856 4009 	ldr.w	r4, [r6, r9]
 80018e0:	f85e 7009 	ldr.w	r7, [lr, r9]
 80018e4:	443c      	add	r4, r7
 80018e6:	6023      	str	r3, [r4, #0]
 80018e8:	6827      	ldr	r7, [r4, #0]
 80018ea:	2301      	movs	r3, #1
 80018ec:	60a3      	str	r3, [r4, #8]
 80018ee:	7b8c      	ldrb	r4, [r1, #14]
 80018f0:	6873      	ldr	r3, [r6, #4]
 80018f2:	f8d6 9000 	ldr.w	r9, [r6]
 80018f6:	9400      	str	r4, [sp, #0]
 80018f8:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80018fa:	405f      	eors	r7, r3
 80018fc:	407c      	eors	r4, r7
 80018fe:	f8de 7004 	ldr.w	r7, [lr, #4]
 8001902:	f084 0404 	eor.w	r4, r4, #4
 8001906:	ea87 0709 	eor.w	r7, r7, r9
 800190a:	f087 0efc 	eor.w	lr, r7, #252	@ 0xfc
 800190e:	9f00      	ldr	r7, [sp, #0]
 8001910:	4474      	add	r4, lr
 8001912:	f084 0e52 	eor.w	lr, r4, #82	@ 0x52
 8001916:	44be      	add	lr, r7
 8001918:	f88c e00e 	strb.w	lr, [ip, #14]
 800191c:	f04f 0e01 	mov.w	lr, #1
 8001920:	f811 400e 	ldrb.w	r4, [r1, lr]
 8001924:	f80c 400e 	strb.w	r4, [ip, lr]
 8001928:	f10e 0e01 	add.w	lr, lr, #1
 800192c:	f1be 0f0e 	cmp.w	lr, #14
 8001930:	d3f6      	bcc.n	8001920 <cmox_cipherMode_setKey+0x94>
 8001932:	e9db 4700 	ldrd	r4, r7, [fp]
 8001936:	2800      	cmp	r0, #0
 8001938:	f10d 0e24 	add.w	lr, sp, #36	@ 0x24
 800193c:	e9ce 4700 	strd	r4, r7, [lr]
 8001940:	bf0c      	ite	eq
 8001942:	2700      	moveq	r7, #0
 8001944:	2704      	movne	r7, #4
 8001946:	463c      	mov	r4, r7
 8001948:	59f7      	ldr	r7, [r6, r7]
 800194a:	f85e 4004 	ldr.w	r4, [lr, r4]
 800194e:	19e4      	adds	r4, r4, r7
 8001950:	f8c4 8000 	str.w	r8, [r4]
 8001954:	f8d4 8000 	ldr.w	r8, [r4]
 8001958:	2701      	movs	r7, #1
 800195a:	60a7      	str	r7, [r4, #8]
 800195c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800195e:	ea83 0808 	eor.w	r8, r3, r8
 8001962:	780f      	ldrb	r7, [r1, #0]
 8001964:	ea84 0408 	eor.w	r4, r4, r8
 8001968:	f084 0804 	eor.w	r8, r4, #4
 800196c:	f8de 4004 	ldr.w	r4, [lr, #4]
 8001970:	2800      	cmp	r0, #0
 8001972:	ea84 0409 	eor.w	r4, r4, r9
 8001976:	f084 04fc 	eor.w	r4, r4, #252	@ 0xfc
 800197a:	4444      	add	r4, r8
 800197c:	f084 080b 	eor.w	r8, r4, #11
 8001980:	e9db 4e00 	ldrd	r4, lr, [fp]
 8001984:	44b8      	add	r8, r7
 8001986:	af09      	add	r7, sp, #36	@ 0x24
 8001988:	e9c7 4e00 	strd	r4, lr, [r7]
 800198c:	f88d 8004 	strb.w	r8, [sp, #4]
 8001990:	bf0e      	itee	eq
 8001992:	f04f 0e00 	moveq.w	lr, #0
 8001996:	2004      	movne	r0, #4
 8001998:	4686      	movne	lr, r0
 800199a:	ac09      	add	r4, sp, #36	@ 0x24
 800199c:	5836      	ldr	r6, [r6, r0]
 800199e:	f854 000e 	ldr.w	r0, [r4, lr]
 80019a2:	1986      	adds	r6, r0, r6
 80019a4:	6035      	str	r5, [r6, #0]
 80019a6:	6830      	ldr	r0, [r6, #0]
 80019a8:	2501      	movs	r5, #1
 80019aa:	60b5      	str	r5, [r6, #8]
 80019ac:	7bce      	ldrb	r6, [r1, #15]
 80019ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80019b0:	4043      	eors	r3, r0
 80019b2:	6860      	ldr	r0, [r4, #4]
 80019b4:	404b      	eors	r3, r1
 80019b6:	f083 0304 	eor.w	r3, r3, #4
 80019ba:	ea80 0009 	eor.w	r0, r0, r9
 80019be:	f080 00fc 	eor.w	r0, r0, #252	@ 0xfc
 80019c2:	4403      	add	r3, r0
 80019c4:	f083 0385 	eor.w	r3, r3, #133	@ 0x85
 80019c8:	199b      	adds	r3, r3, r6
 80019ca:	f88c 300f 	strb.w	r3, [ip, #15]
 80019ce:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80019d0:	7a28      	ldrb	r0, [r5, #8]
 80019d2:	07c1      	lsls	r1, r0, #31
 80019d4:	f100 811f 	bmi.w	8001c16 <cmox_cipherMode_setKey+0x38a>
 80019d8:	e11b      	b.n	8001c12 <cmox_cipherMode_setKey+0x386>
 80019da:	e9db e900 	ldrd	lr, r9, [fp]
 80019de:	a809      	add	r0, sp, #36	@ 0x24
 80019e0:	4c9b      	ldr	r4, [pc, #620]	@ (8001c50 <cmox_cipherMode_setKey+0x3c4>)
 80019e2:	e9c0 e900 	strd	lr, r9, [r0]
 80019e6:	7820      	ldrb	r0, [r4, #0]
 80019e8:	f10d 0e24 	add.w	lr, sp, #36	@ 0x24
 80019ec:	2800      	cmp	r0, #0
 80019ee:	bf0c      	ite	eq
 80019f0:	f04f 0900 	moveq.w	r9, #0
 80019f4:	f04f 0904 	movne.w	r9, #4
 80019f8:	f856 4009 	ldr.w	r4, [r6, r9]
 80019fc:	f85e 7009 	ldr.w	r7, [lr, r9]
 8001a00:	443c      	add	r4, r7
 8001a02:	6025      	str	r5, [r4, #0]
 8001a04:	6827      	ldr	r7, [r4, #0]
 8001a06:	2501      	movs	r5, #1
 8001a08:	60a5      	str	r5, [r4, #8]
 8001a0a:	7b8c      	ldrb	r4, [r1, #14]
 8001a0c:	6875      	ldr	r5, [r6, #4]
 8001a0e:	f8d6 9000 	ldr.w	r9, [r6]
 8001a12:	9400      	str	r4, [sp, #0]
 8001a14:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8001a16:	406f      	eors	r7, r5
 8001a18:	407c      	eors	r4, r7
 8001a1a:	f8de 7004 	ldr.w	r7, [lr, #4]
 8001a1e:	f084 0404 	eor.w	r4, r4, #4
 8001a22:	ea87 0709 	eor.w	r7, r7, r9
 8001a26:	f087 0efc 	eor.w	lr, r7, #252	@ 0xfc
 8001a2a:	9f00      	ldr	r7, [sp, #0]
 8001a2c:	4474      	add	r4, lr
 8001a2e:	f084 0e85 	eor.w	lr, r4, #133	@ 0x85
 8001a32:	44be      	add	lr, r7
 8001a34:	f88c e00e 	strb.w	lr, [ip, #14]
 8001a38:	f04f 0e01 	mov.w	lr, #1
 8001a3c:	f811 400e 	ldrb.w	r4, [r1, lr]
 8001a40:	f80c 400e 	strb.w	r4, [ip, lr]
 8001a44:	f10e 0e01 	add.w	lr, lr, #1
 8001a48:	f1be 0f0e 	cmp.w	lr, #14
 8001a4c:	d3f6      	bcc.n	8001a3c <cmox_cipherMode_setKey+0x1b0>
 8001a4e:	e9db 4700 	ldrd	r4, r7, [fp]
 8001a52:	2800      	cmp	r0, #0
 8001a54:	f10d 0e24 	add.w	lr, sp, #36	@ 0x24
 8001a58:	e9ce 4700 	strd	r4, r7, [lr]
 8001a5c:	bf0c      	ite	eq
 8001a5e:	2700      	moveq	r7, #0
 8001a60:	2704      	movne	r7, #4
 8001a62:	463c      	mov	r4, r7
 8001a64:	59f7      	ldr	r7, [r6, r7]
 8001a66:	f85e 4004 	ldr.w	r4, [lr, r4]
 8001a6a:	19e4      	adds	r4, r4, r7
 8001a6c:	6023      	str	r3, [r4, #0]
 8001a6e:	6827      	ldr	r7, [r4, #0]
 8001a70:	2301      	movs	r3, #1
 8001a72:	60a3      	str	r3, [r4, #8]
 8001a74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001a76:	406f      	eors	r7, r5
 8001a78:	780c      	ldrb	r4, [r1, #0]
 8001a7a:	405f      	eors	r7, r3
 8001a7c:	f8de 3004 	ldr.w	r3, [lr, #4]
 8001a80:	f087 0704 	eor.w	r7, r7, #4
 8001a84:	ea83 0309 	eor.w	r3, r3, r9
 8001a88:	f083 03fc 	eor.w	r3, r3, #252	@ 0xfc
 8001a8c:	441f      	add	r7, r3
 8001a8e:	f087 0752 	eor.w	r7, r7, #82	@ 0x52
 8001a92:	193f      	adds	r7, r7, r4
 8001a94:	f88d 7004 	strb.w	r7, [sp, #4]
 8001a98:	e9db 7300 	ldrd	r7, r3, [fp]
 8001a9c:	2800      	cmp	r0, #0
 8001a9e:	ac09      	add	r4, sp, #36	@ 0x24
 8001aa0:	e9c4 7300 	strd	r7, r3, [r4]
 8001aa4:	bf0e      	itee	eq
 8001aa6:	2300      	moveq	r3, #0
 8001aa8:	2004      	movne	r0, #4
 8001aaa:	2304      	movne	r3, #4
 8001aac:	5836      	ldr	r6, [r6, r0]
 8001aae:	58e0      	ldr	r0, [r4, r3]
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	1986      	adds	r6, r0, r6
 8001ab4:	f8c6 8000 	str.w	r8, [r6]
 8001ab8:	6830      	ldr	r0, [r6, #0]
 8001aba:	60b3      	str	r3, [r6, #8]
 8001abc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001abe:	4045      	eors	r5, r0
 8001ac0:	6860      	ldr	r0, [r4, #4]
 8001ac2:	405d      	eors	r5, r3
 8001ac4:	7bce      	ldrb	r6, [r1, #15]
 8001ac6:	ea80 0009 	eor.w	r0, r0, r9
 8001aca:	f085 0504 	eor.w	r5, r5, #4
 8001ace:	f080 00fc 	eor.w	r0, r0, #252	@ 0xfc
 8001ad2:	4405      	add	r5, r0
 8001ad4:	f085 050b 	eor.w	r5, r5, #11
 8001ad8:	19ad      	adds	r5, r5, r6
 8001ada:	f88c 500f 	strb.w	r5, [ip, #15]
 8001ade:	2010      	movs	r0, #16
 8001ae0:	5c0b      	ldrb	r3, [r1, r0]
 8001ae2:	f80c 3000 	strb.w	r3, [ip, r0]
 8001ae6:	1c40      	adds	r0, r0, #1
 8001ae8:	2818      	cmp	r0, #24
 8001aea:	d3f9      	bcc.n	8001ae0 <cmox_cipherMode_setKey+0x254>
 8001aec:	e76f      	b.n	80019ce <cmox_cipherMode_setKey+0x142>
 8001aee:	e9db e900 	ldrd	lr, r9, [fp]
 8001af2:	a809      	add	r0, sp, #36	@ 0x24
 8001af4:	4c56      	ldr	r4, [pc, #344]	@ (8001c50 <cmox_cipherMode_setKey+0x3c4>)
 8001af6:	e9c0 e900 	strd	lr, r9, [r0]
 8001afa:	7820      	ldrb	r0, [r4, #0]
 8001afc:	f10d 0e24 	add.w	lr, sp, #36	@ 0x24
 8001b00:	2800      	cmp	r0, #0
 8001b02:	bf0c      	ite	eq
 8001b04:	f04f 0900 	moveq.w	r9, #0
 8001b08:	f04f 0904 	movne.w	r9, #4
 8001b0c:	f856 4009 	ldr.w	r4, [r6, r9]
 8001b10:	f85e 7009 	ldr.w	r7, [lr, r9]
 8001b14:	443c      	add	r4, r7
 8001b16:	f8c4 8000 	str.w	r8, [r4]
 8001b1a:	6827      	ldr	r7, [r4, #0]
 8001b1c:	f04f 0801 	mov.w	r8, #1
 8001b20:	f8c4 8008 	str.w	r8, [r4, #8]
 8001b24:	7fcc      	ldrb	r4, [r1, #31]
 8001b26:	f8d6 8004 	ldr.w	r8, [r6, #4]
 8001b2a:	f8d6 9000 	ldr.w	r9, [r6]
 8001b2e:	9400      	str	r4, [sp, #0]
 8001b30:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8001b32:	ea88 0707 	eor.w	r7, r8, r7
 8001b36:	407c      	eors	r4, r7
 8001b38:	f8de 7004 	ldr.w	r7, [lr, #4]
 8001b3c:	f084 0404 	eor.w	r4, r4, #4
 8001b40:	ea87 0709 	eor.w	r7, r7, r9
 8001b44:	f087 0efc 	eor.w	lr, r7, #252	@ 0xfc
 8001b48:	9f00      	ldr	r7, [sp, #0]
 8001b4a:	4474      	add	r4, lr
 8001b4c:	f084 0e0b 	eor.w	lr, r4, #11
 8001b50:	44be      	add	lr, r7
 8001b52:	f88c e01f 	strb.w	lr, [ip, #31]
 8001b56:	f04f 0e00 	mov.w	lr, #0
 8001b5a:	f811 400e 	ldrb.w	r4, [r1, lr]
 8001b5e:	f80c 400e 	strb.w	r4, [ip, lr]
 8001b62:	f10e 0e01 	add.w	lr, lr, #1
 8001b66:	f1be 0f10 	cmp.w	lr, #16
 8001b6a:	d3f6      	bcc.n	8001b5a <cmox_cipherMode_setKey+0x2ce>
 8001b6c:	e9db 4700 	ldrd	r4, r7, [fp]
 8001b70:	2800      	cmp	r0, #0
 8001b72:	f10d 0e24 	add.w	lr, sp, #36	@ 0x24
 8001b76:	e9ce 4700 	strd	r4, r7, [lr]
 8001b7a:	bf0c      	ite	eq
 8001b7c:	2700      	moveq	r7, #0
 8001b7e:	2704      	movne	r7, #4
 8001b80:	463c      	mov	r4, r7
 8001b82:	59f7      	ldr	r7, [r6, r7]
 8001b84:	f85e 4004 	ldr.w	r4, [lr, r4]
 8001b88:	19e4      	adds	r4, r4, r7
 8001b8a:	6025      	str	r5, [r4, #0]
 8001b8c:	6827      	ldr	r7, [r4, #0]
 8001b8e:	2501      	movs	r5, #1
 8001b90:	60a5      	str	r5, [r4, #8]
 8001b92:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8001b94:	ea88 0707 	eor.w	r7, r8, r7
 8001b98:	7c4c      	ldrb	r4, [r1, #17]
 8001b9a:	406f      	eors	r7, r5
 8001b9c:	f8de 5004 	ldr.w	r5, [lr, #4]
 8001ba0:	f087 0704 	eor.w	r7, r7, #4
 8001ba4:	ea85 0509 	eor.w	r5, r5, r9
 8001ba8:	f085 05fc 	eor.w	r5, r5, #252	@ 0xfc
 8001bac:	442f      	add	r7, r5
 8001bae:	f087 0785 	eor.w	r7, r7, #133	@ 0x85
 8001bb2:	193f      	adds	r7, r7, r4
 8001bb4:	f88c 7011 	strb.w	r7, [ip, #17]
 8001bb8:	e9db 4700 	ldrd	r4, r7, [fp]
 8001bbc:	2800      	cmp	r0, #0
 8001bbe:	ad09      	add	r5, sp, #36	@ 0x24
 8001bc0:	e9c5 4700 	strd	r4, r7, [r5]
 8001bc4:	bf0e      	itee	eq
 8001bc6:	f04f 0b00 	moveq.w	fp, #0
 8001bca:	2004      	movne	r0, #4
 8001bcc:	4683      	movne	fp, r0
 8001bce:	5836      	ldr	r6, [r6, r0]
 8001bd0:	f855 000b 	ldr.w	r0, [r5, fp]
 8001bd4:	1986      	adds	r6, r0, r6
 8001bd6:	6033      	str	r3, [r6, #0]
 8001bd8:	6830      	ldr	r0, [r6, #0]
 8001bda:	2301      	movs	r3, #1
 8001bdc:	60b3      	str	r3, [r6, #8]
 8001bde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001be0:	ea88 0000 	eor.w	r0, r8, r0
 8001be4:	7c0e      	ldrb	r6, [r1, #16]
 8001be6:	4058      	eors	r0, r3
 8001be8:	f080 0804 	eor.w	r8, r0, #4
 8001bec:	6868      	ldr	r0, [r5, #4]
 8001bee:	ea80 0009 	eor.w	r0, r0, r9
 8001bf2:	f080 00fc 	eor.w	r0, r0, #252	@ 0xfc
 8001bf6:	4440      	add	r0, r8
 8001bf8:	f080 0852 	eor.w	r8, r0, #82	@ 0x52
 8001bfc:	44b0      	add	r8, r6
 8001bfe:	f88c 8010 	strb.w	r8, [ip, #16]
 8001c02:	2012      	movs	r0, #18
 8001c04:	5c0b      	ldrb	r3, [r1, r0]
 8001c06:	f80c 3000 	strb.w	r3, [ip, r0]
 8001c0a:	1c40      	adds	r0, r0, #1
 8001c0c:	281f      	cmp	r0, #31
 8001c0e:	d3f9      	bcc.n	8001c04 <cmox_cipherMode_setKey+0x378>
 8001c10:	e6dd      	b.n	80019ce <cmox_cipherMode_setKey+0x142>
 8001c12:	4610      	mov	r0, r2
 8001c14:	e00d      	b.n	8001c32 <cmox_cipherMode_setKey+0x3a6>
 8001c16:	682b      	ldr	r3, [r5, #0]
 8001c18:	4652      	mov	r2, sl
 8001c1a:	a901      	add	r1, sp, #4
 8001c1c:	685e      	ldr	r6, [r3, #4]
 8001c1e:	4628      	mov	r0, r5
 8001c20:	47b0      	blx	r6
 8001c22:	68a8      	ldr	r0, [r5, #8]
 8001c24:	f8c5 a004 	str.w	sl, [r5, #4]
 8001c28:	f040 0004 	orr.w	r0, r0, #4
 8001c2c:	60a8      	str	r0, [r5, #8]
 8001c2e:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8001c32:	b00d      	add	sp, #52	@ 0x34
 8001c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c38:	00010003 	.word	0x00010003
 8001c3c:	f78e2254 	.word	0xf78e2254
 8001c40:	2e8f137d 	.word	0x2e8f137d
 8001c44:	910e0ba4 	.word	0x910e0ba4
 8001c48:	080161dc 	.word	0x080161dc
 8001c4c:	08001cc4 	.word	0x08001cc4
 8001c50:	2000020c 	.word	0x2000020c

08001c54 <cmox_cipherMode_setIV>:
 8001c54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c56:	9c05      	ldr	r4, [sp, #20]
 8001c58:	2c00      	cmp	r4, #0
 8001c5a:	bf18      	it	ne
 8001c5c:	2a00      	cmpne	r2, #0
 8001c5e:	d101      	bne.n	8001c64 <cmox_cipherMode_setIV+0x10>
 8001c60:	480d      	ldr	r0, [pc, #52]	@ (8001c98 <cmox_cipherMode_setIV+0x44>)
 8001c62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c64:	2400      	movs	r4, #0
 8001c66:	e00d      	b.n	8001c84 <cmox_cipherMode_setIV+0x30>
 8001c68:	4415      	add	r5, r2
 8001c6a:	786f      	ldrb	r7, [r5, #1]
 8001c6c:	782e      	ldrb	r6, [r5, #0]
 8001c6e:	043f      	lsls	r7, r7, #16
 8001c70:	ea47 6706 	orr.w	r7, r7, r6, lsl #24
 8001c74:	78ae      	ldrb	r6, [r5, #2]
 8001c76:	78ed      	ldrb	r5, [r5, #3]
 8001c78:	ea47 2706 	orr.w	r7, r7, r6, lsl #8
 8001c7c:	432f      	orrs	r7, r5
 8001c7e:	f841 7024 	str.w	r7, [r1, r4, lsl #2]
 8001c82:	1c64      	adds	r4, r4, #1
 8001c84:	00a5      	lsls	r5, r4, #2
 8001c86:	429d      	cmp	r5, r3
 8001c88:	d3ee      	bcc.n	8001c68 <cmox_cipherMode_setIV+0x14>
 8001c8a:	6841      	ldr	r1, [r0, #4]
 8001c8c:	f041 0101 	orr.w	r1, r1, #1
 8001c90:	6041      	str	r1, [r0, #4]
 8001c92:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8001c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c98:	00010003 	.word	0x00010003

08001c9c <cmox_cipher_setTagLen_empty>:
 8001c9c:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8001ca0:	4770      	bx	lr

08001ca2 <cmox_cipher_setPayloadLen_empty>:
 8001ca2:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8001ca6:	4770      	bx	lr

08001ca8 <cmox_cipher_setADLen_empty>:
 8001ca8:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8001cac:	4770      	bx	lr

08001cae <cmox_cipher_appendAD_empty>:
 8001cae:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8001cb2:	4770      	bx	lr

08001cb4 <cmox_cipher_generateTag_empty>:
 8001cb4:	4800      	ldr	r0, [pc, #0]	@ (8001cb8 <cmox_cipher_generateTag_empty+0x4>)
 8001cb6:	4770      	bx	lr
 8001cb8:	00010002 	.word	0x00010002

08001cbc <cmox_cipher_verifyTag_empty>:
 8001cbc:	4800      	ldr	r0, [pc, #0]	@ (8001cc0 <cmox_cipher_verifyTag_empty+0x4>)
 8001cbe:	4770      	bx	lr
 8001cc0:	00010002 	.word	0x00010002
 8001cc4:	0101b004 	.word	0x0101b004
 8001cc8:	45011700 	.word	0x45011700

08001ccc <convert_block_2_bytes>:
 8001ccc:	b530      	push	{r4, r5, lr}
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 8001cd4:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8001cd8:	70dc      	strb	r4, [r3, #3]
 8001cda:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 8001cde:	0a2d      	lsrs	r5, r5, #8
 8001ce0:	709d      	strb	r5, [r3, #2]
 8001ce2:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 8001ce6:	0c24      	lsrs	r4, r4, #16
 8001ce8:	705c      	strb	r4, [r3, #1]
 8001cea:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 8001cee:	1c52      	adds	r2, r2, #1
 8001cf0:	0e24      	lsrs	r4, r4, #24
 8001cf2:	701c      	strb	r4, [r3, #0]
 8001cf4:	2a04      	cmp	r2, #4
 8001cf6:	d3eb      	bcc.n	8001cd0 <convert_block_2_bytes+0x4>
 8001cf8:	bd30      	pop	{r4, r5, pc}

08001cfa <strlen>:
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001d00:	2a00      	cmp	r2, #0
 8001d02:	d1fb      	bne.n	8001cfc <strlen+0x2>
 8001d04:	1a18      	subs	r0, r3, r0
 8001d06:	3801      	subs	r0, #1
 8001d08:	4770      	bx	lr

08001d0a <__aeabi_memset>:
 8001d0a:	b470      	push	{r4, r5, r6}
 8001d0c:	0784      	lsls	r4, r0, #30
 8001d0e:	d046      	beq.n	8001d9e <__aeabi_memset+0x94>
 8001d10:	1e4c      	subs	r4, r1, #1
 8001d12:	2900      	cmp	r1, #0
 8001d14:	d041      	beq.n	8001d9a <__aeabi_memset+0x90>
 8001d16:	b2d5      	uxtb	r5, r2
 8001d18:	4603      	mov	r3, r0
 8001d1a:	e002      	b.n	8001d22 <__aeabi_memset+0x18>
 8001d1c:	1e61      	subs	r1, r4, #1
 8001d1e:	b3e4      	cbz	r4, 8001d9a <__aeabi_memset+0x90>
 8001d20:	460c      	mov	r4, r1
 8001d22:	f803 5b01 	strb.w	r5, [r3], #1
 8001d26:	0799      	lsls	r1, r3, #30
 8001d28:	d1f8      	bne.n	8001d1c <__aeabi_memset+0x12>
 8001d2a:	2c03      	cmp	r4, #3
 8001d2c:	d92e      	bls.n	8001d8c <__aeabi_memset+0x82>
 8001d2e:	b2d5      	uxtb	r5, r2
 8001d30:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8001d34:	2c0f      	cmp	r4, #15
 8001d36:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8001d3a:	d919      	bls.n	8001d70 <__aeabi_memset+0x66>
 8001d3c:	4626      	mov	r6, r4
 8001d3e:	f103 0110 	add.w	r1, r3, #16
 8001d42:	3e10      	subs	r6, #16
 8001d44:	2e0f      	cmp	r6, #15
 8001d46:	f841 5c10 	str.w	r5, [r1, #-16]
 8001d4a:	f841 5c0c 	str.w	r5, [r1, #-12]
 8001d4e:	f841 5c08 	str.w	r5, [r1, #-8]
 8001d52:	f841 5c04 	str.w	r5, [r1, #-4]
 8001d56:	f101 0110 	add.w	r1, r1, #16
 8001d5a:	d8f2      	bhi.n	8001d42 <__aeabi_memset+0x38>
 8001d5c:	f1a4 0110 	sub.w	r1, r4, #16
 8001d60:	f021 010f 	bic.w	r1, r1, #15
 8001d64:	f004 040f 	and.w	r4, r4, #15
 8001d68:	3110      	adds	r1, #16
 8001d6a:	2c03      	cmp	r4, #3
 8001d6c:	440b      	add	r3, r1
 8001d6e:	d90d      	bls.n	8001d8c <__aeabi_memset+0x82>
 8001d70:	461e      	mov	r6, r3
 8001d72:	4621      	mov	r1, r4
 8001d74:	3904      	subs	r1, #4
 8001d76:	2903      	cmp	r1, #3
 8001d78:	f846 5b04 	str.w	r5, [r6], #4
 8001d7c:	d8fa      	bhi.n	8001d74 <__aeabi_memset+0x6a>
 8001d7e:	1f21      	subs	r1, r4, #4
 8001d80:	f021 0103 	bic.w	r1, r1, #3
 8001d84:	3104      	adds	r1, #4
 8001d86:	440b      	add	r3, r1
 8001d88:	f004 0403 	and.w	r4, r4, #3
 8001d8c:	b12c      	cbz	r4, 8001d9a <__aeabi_memset+0x90>
 8001d8e:	b2d2      	uxtb	r2, r2
 8001d90:	441c      	add	r4, r3
 8001d92:	f803 2b01 	strb.w	r2, [r3], #1
 8001d96:	42a3      	cmp	r3, r4
 8001d98:	d1fb      	bne.n	8001d92 <__aeabi_memset+0x88>
 8001d9a:	bc70      	pop	{r4, r5, r6}
 8001d9c:	4770      	bx	lr
 8001d9e:	460c      	mov	r4, r1
 8001da0:	4603      	mov	r3, r0
 8001da2:	e7c2      	b.n	8001d2a <__aeabi_memset+0x20>

08001da4 <__aeabi_drsub>:
 8001da4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8001da8:	e002      	b.n	8001db0 <__adddf3>
 8001daa:	bf00      	nop

08001dac <__aeabi_dsub>:
 8001dac:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08001db0 <__adddf3>:
 8001db0:	b530      	push	{r4, r5, lr}
 8001db2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8001db6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8001dba:	ea94 0f05 	teq	r4, r5
 8001dbe:	bf08      	it	eq
 8001dc0:	ea90 0f02 	teqeq	r0, r2
 8001dc4:	bf1f      	itttt	ne
 8001dc6:	ea54 0c00 	orrsne.w	ip, r4, r0
 8001dca:	ea55 0c02 	orrsne.w	ip, r5, r2
 8001dce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8001dd2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8001dd6:	f000 80e2 	beq.w	8001f9e <__adddf3+0x1ee>
 8001dda:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8001dde:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8001de2:	bfb8      	it	lt
 8001de4:	426d      	neglt	r5, r5
 8001de6:	dd0c      	ble.n	8001e02 <__adddf3+0x52>
 8001de8:	442c      	add	r4, r5
 8001dea:	ea80 0202 	eor.w	r2, r0, r2
 8001dee:	ea81 0303 	eor.w	r3, r1, r3
 8001df2:	ea82 0000 	eor.w	r0, r2, r0
 8001df6:	ea83 0101 	eor.w	r1, r3, r1
 8001dfa:	ea80 0202 	eor.w	r2, r0, r2
 8001dfe:	ea81 0303 	eor.w	r3, r1, r3
 8001e02:	2d36      	cmp	r5, #54	@ 0x36
 8001e04:	bf88      	it	hi
 8001e06:	bd30      	pophi	{r4, r5, pc}
 8001e08:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8001e0c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8001e10:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8001e14:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8001e18:	d002      	beq.n	8001e20 <__adddf3+0x70>
 8001e1a:	4240      	negs	r0, r0
 8001e1c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001e20:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8001e24:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8001e28:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8001e2c:	d002      	beq.n	8001e34 <__adddf3+0x84>
 8001e2e:	4252      	negs	r2, r2
 8001e30:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001e34:	ea94 0f05 	teq	r4, r5
 8001e38:	f000 80a7 	beq.w	8001f8a <__adddf3+0x1da>
 8001e3c:	f1a4 0401 	sub.w	r4, r4, #1
 8001e40:	f1d5 0e20 	rsbs	lr, r5, #32
 8001e44:	db0d      	blt.n	8001e62 <__adddf3+0xb2>
 8001e46:	fa02 fc0e 	lsl.w	ip, r2, lr
 8001e4a:	fa22 f205 	lsr.w	r2, r2, r5
 8001e4e:	1880      	adds	r0, r0, r2
 8001e50:	f141 0100 	adc.w	r1, r1, #0
 8001e54:	fa03 f20e 	lsl.w	r2, r3, lr
 8001e58:	1880      	adds	r0, r0, r2
 8001e5a:	fa43 f305 	asr.w	r3, r3, r5
 8001e5e:	4159      	adcs	r1, r3
 8001e60:	e00e      	b.n	8001e80 <__adddf3+0xd0>
 8001e62:	f1a5 0520 	sub.w	r5, r5, #32
 8001e66:	f10e 0e20 	add.w	lr, lr, #32
 8001e6a:	2a01      	cmp	r2, #1
 8001e6c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8001e70:	bf28      	it	cs
 8001e72:	f04c 0c02 	orrcs.w	ip, ip, #2
 8001e76:	fa43 f305 	asr.w	r3, r3, r5
 8001e7a:	18c0      	adds	r0, r0, r3
 8001e7c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8001e80:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8001e84:	d507      	bpl.n	8001e96 <__adddf3+0xe6>
 8001e86:	f04f 0e00 	mov.w	lr, #0
 8001e8a:	f1dc 0c00 	rsbs	ip, ip, #0
 8001e8e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8001e92:	eb6e 0101 	sbc.w	r1, lr, r1
 8001e96:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8001e9a:	d31b      	bcc.n	8001ed4 <__adddf3+0x124>
 8001e9c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8001ea0:	d30c      	bcc.n	8001ebc <__adddf3+0x10c>
 8001ea2:	0849      	lsrs	r1, r1, #1
 8001ea4:	ea5f 0030 	movs.w	r0, r0, rrx
 8001ea8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8001eac:	f104 0401 	add.w	r4, r4, #1
 8001eb0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8001eb4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8001eb8:	f080 809a 	bcs.w	8001ff0 <__adddf3+0x240>
 8001ebc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8001ec0:	bf08      	it	eq
 8001ec2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8001ec6:	f150 0000 	adcs.w	r0, r0, #0
 8001eca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8001ece:	ea41 0105 	orr.w	r1, r1, r5
 8001ed2:	bd30      	pop	{r4, r5, pc}
 8001ed4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8001ed8:	4140      	adcs	r0, r0
 8001eda:	eb41 0101 	adc.w	r1, r1, r1
 8001ede:	3c01      	subs	r4, #1
 8001ee0:	bf28      	it	cs
 8001ee2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8001ee6:	d2e9      	bcs.n	8001ebc <__adddf3+0x10c>
 8001ee8:	f091 0f00 	teq	r1, #0
 8001eec:	bf04      	itt	eq
 8001eee:	4601      	moveq	r1, r0
 8001ef0:	2000      	moveq	r0, #0
 8001ef2:	fab1 f381 	clz	r3, r1
 8001ef6:	bf08      	it	eq
 8001ef8:	3320      	addeq	r3, #32
 8001efa:	f1a3 030b 	sub.w	r3, r3, #11
 8001efe:	f1b3 0220 	subs.w	r2, r3, #32
 8001f02:	da0c      	bge.n	8001f1e <__adddf3+0x16e>
 8001f04:	320c      	adds	r2, #12
 8001f06:	dd08      	ble.n	8001f1a <__adddf3+0x16a>
 8001f08:	f102 0c14 	add.w	ip, r2, #20
 8001f0c:	f1c2 020c 	rsb	r2, r2, #12
 8001f10:	fa01 f00c 	lsl.w	r0, r1, ip
 8001f14:	fa21 f102 	lsr.w	r1, r1, r2
 8001f18:	e00c      	b.n	8001f34 <__adddf3+0x184>
 8001f1a:	f102 0214 	add.w	r2, r2, #20
 8001f1e:	bfd8      	it	le
 8001f20:	f1c2 0c20 	rsble	ip, r2, #32
 8001f24:	fa01 f102 	lsl.w	r1, r1, r2
 8001f28:	fa20 fc0c 	lsr.w	ip, r0, ip
 8001f2c:	bfdc      	itt	le
 8001f2e:	ea41 010c 	orrle.w	r1, r1, ip
 8001f32:	4090      	lslle	r0, r2
 8001f34:	1ae4      	subs	r4, r4, r3
 8001f36:	bfa2      	ittt	ge
 8001f38:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8001f3c:	4329      	orrge	r1, r5
 8001f3e:	bd30      	popge	{r4, r5, pc}
 8001f40:	ea6f 0404 	mvn.w	r4, r4
 8001f44:	3c1f      	subs	r4, #31
 8001f46:	da1c      	bge.n	8001f82 <__adddf3+0x1d2>
 8001f48:	340c      	adds	r4, #12
 8001f4a:	dc0e      	bgt.n	8001f6a <__adddf3+0x1ba>
 8001f4c:	f104 0414 	add.w	r4, r4, #20
 8001f50:	f1c4 0220 	rsb	r2, r4, #32
 8001f54:	fa20 f004 	lsr.w	r0, r0, r4
 8001f58:	fa01 f302 	lsl.w	r3, r1, r2
 8001f5c:	ea40 0003 	orr.w	r0, r0, r3
 8001f60:	fa21 f304 	lsr.w	r3, r1, r4
 8001f64:	ea45 0103 	orr.w	r1, r5, r3
 8001f68:	bd30      	pop	{r4, r5, pc}
 8001f6a:	f1c4 040c 	rsb	r4, r4, #12
 8001f6e:	f1c4 0220 	rsb	r2, r4, #32
 8001f72:	fa20 f002 	lsr.w	r0, r0, r2
 8001f76:	fa01 f304 	lsl.w	r3, r1, r4
 8001f7a:	ea40 0003 	orr.w	r0, r0, r3
 8001f7e:	4629      	mov	r1, r5
 8001f80:	bd30      	pop	{r4, r5, pc}
 8001f82:	fa21 f004 	lsr.w	r0, r1, r4
 8001f86:	4629      	mov	r1, r5
 8001f88:	bd30      	pop	{r4, r5, pc}
 8001f8a:	f094 0f00 	teq	r4, #0
 8001f8e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8001f92:	bf06      	itte	eq
 8001f94:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8001f98:	3401      	addeq	r4, #1
 8001f9a:	3d01      	subne	r5, #1
 8001f9c:	e74e      	b.n	8001e3c <__adddf3+0x8c>
 8001f9e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8001fa2:	bf18      	it	ne
 8001fa4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8001fa8:	d029      	beq.n	8001ffe <__adddf3+0x24e>
 8001faa:	ea94 0f05 	teq	r4, r5
 8001fae:	bf08      	it	eq
 8001fb0:	ea90 0f02 	teqeq	r0, r2
 8001fb4:	d005      	beq.n	8001fc2 <__adddf3+0x212>
 8001fb6:	ea54 0c00 	orrs.w	ip, r4, r0
 8001fba:	bf04      	itt	eq
 8001fbc:	4619      	moveq	r1, r3
 8001fbe:	4610      	moveq	r0, r2
 8001fc0:	bd30      	pop	{r4, r5, pc}
 8001fc2:	ea91 0f03 	teq	r1, r3
 8001fc6:	bf1e      	ittt	ne
 8001fc8:	2100      	movne	r1, #0
 8001fca:	2000      	movne	r0, #0
 8001fcc:	bd30      	popne	{r4, r5, pc}
 8001fce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8001fd2:	d105      	bne.n	8001fe0 <__adddf3+0x230>
 8001fd4:	0040      	lsls	r0, r0, #1
 8001fd6:	4149      	adcs	r1, r1
 8001fd8:	bf28      	it	cs
 8001fda:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8001fde:	bd30      	pop	{r4, r5, pc}
 8001fe0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8001fe4:	bf3c      	itt	cc
 8001fe6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8001fea:	bd30      	popcc	{r4, r5, pc}
 8001fec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8001ff0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8001ff4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8001ff8:	f04f 0000 	mov.w	r0, #0
 8001ffc:	bd30      	pop	{r4, r5, pc}
 8001ffe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8002002:	bf1a      	itte	ne
 8002004:	4619      	movne	r1, r3
 8002006:	4610      	movne	r0, r2
 8002008:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800200c:	bf1c      	itt	ne
 800200e:	460b      	movne	r3, r1
 8002010:	4602      	movne	r2, r0
 8002012:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8002016:	bf06      	itte	eq
 8002018:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800201c:	ea91 0f03 	teqeq	r1, r3
 8002020:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8002024:	bd30      	pop	{r4, r5, pc}
 8002026:	bf00      	nop

08002028 <__aeabi_ui2d>:
 8002028:	f090 0f00 	teq	r0, #0
 800202c:	bf04      	itt	eq
 800202e:	2100      	moveq	r1, #0
 8002030:	4770      	bxeq	lr
 8002032:	b530      	push	{r4, r5, lr}
 8002034:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8002038:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800203c:	f04f 0500 	mov.w	r5, #0
 8002040:	f04f 0100 	mov.w	r1, #0
 8002044:	e750      	b.n	8001ee8 <__adddf3+0x138>
 8002046:	bf00      	nop

08002048 <__aeabi_i2d>:
 8002048:	f090 0f00 	teq	r0, #0
 800204c:	bf04      	itt	eq
 800204e:	2100      	moveq	r1, #0
 8002050:	4770      	bxeq	lr
 8002052:	b530      	push	{r4, r5, lr}
 8002054:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8002058:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800205c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8002060:	bf48      	it	mi
 8002062:	4240      	negmi	r0, r0
 8002064:	f04f 0100 	mov.w	r1, #0
 8002068:	e73e      	b.n	8001ee8 <__adddf3+0x138>
 800206a:	bf00      	nop

0800206c <__aeabi_f2d>:
 800206c:	0042      	lsls	r2, r0, #1
 800206e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8002072:	ea4f 0131 	mov.w	r1, r1, rrx
 8002076:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800207a:	bf1f      	itttt	ne
 800207c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8002080:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8002084:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8002088:	4770      	bxne	lr
 800208a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800208e:	bf08      	it	eq
 8002090:	4770      	bxeq	lr
 8002092:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8002096:	bf04      	itt	eq
 8002098:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800209c:	4770      	bxeq	lr
 800209e:	b530      	push	{r4, r5, lr}
 80020a0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80020a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80020a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80020ac:	e71c      	b.n	8001ee8 <__adddf3+0x138>
 80020ae:	bf00      	nop

080020b0 <__aeabi_ul2d>:
 80020b0:	ea50 0201 	orrs.w	r2, r0, r1
 80020b4:	bf08      	it	eq
 80020b6:	4770      	bxeq	lr
 80020b8:	b530      	push	{r4, r5, lr}
 80020ba:	f04f 0500 	mov.w	r5, #0
 80020be:	e00a      	b.n	80020d6 <__aeabi_l2d+0x16>

080020c0 <__aeabi_l2d>:
 80020c0:	ea50 0201 	orrs.w	r2, r0, r1
 80020c4:	bf08      	it	eq
 80020c6:	4770      	bxeq	lr
 80020c8:	b530      	push	{r4, r5, lr}
 80020ca:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80020ce:	d502      	bpl.n	80020d6 <__aeabi_l2d+0x16>
 80020d0:	4240      	negs	r0, r0
 80020d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80020d6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80020da:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80020de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80020e2:	f43f aed8 	beq.w	8001e96 <__adddf3+0xe6>
 80020e6:	f04f 0203 	mov.w	r2, #3
 80020ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80020ee:	bf18      	it	ne
 80020f0:	3203      	addne	r2, #3
 80020f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80020f6:	bf18      	it	ne
 80020f8:	3203      	addne	r2, #3
 80020fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80020fe:	f1c2 0320 	rsb	r3, r2, #32
 8002102:	fa00 fc03 	lsl.w	ip, r0, r3
 8002106:	fa20 f002 	lsr.w	r0, r0, r2
 800210a:	fa01 fe03 	lsl.w	lr, r1, r3
 800210e:	ea40 000e 	orr.w	r0, r0, lr
 8002112:	fa21 f102 	lsr.w	r1, r1, r2
 8002116:	4414      	add	r4, r2
 8002118:	e6bd      	b.n	8001e96 <__adddf3+0xe6>
 800211a:	bf00      	nop

0800211c <__aeabi_dmul>:
 800211c:	b570      	push	{r4, r5, r6, lr}
 800211e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8002122:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8002126:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800212a:	bf1d      	ittte	ne
 800212c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8002130:	ea94 0f0c 	teqne	r4, ip
 8002134:	ea95 0f0c 	teqne	r5, ip
 8002138:	f000 f8de 	bleq	80022f8 <__aeabi_dmul+0x1dc>
 800213c:	442c      	add	r4, r5
 800213e:	ea81 0603 	eor.w	r6, r1, r3
 8002142:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8002146:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800214a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800214e:	bf18      	it	ne
 8002150:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8002154:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8002158:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800215c:	d038      	beq.n	80021d0 <__aeabi_dmul+0xb4>
 800215e:	fba0 ce02 	umull	ip, lr, r0, r2
 8002162:	f04f 0500 	mov.w	r5, #0
 8002166:	fbe1 e502 	umlal	lr, r5, r1, r2
 800216a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800216e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8002172:	f04f 0600 	mov.w	r6, #0
 8002176:	fbe1 5603 	umlal	r5, r6, r1, r3
 800217a:	f09c 0f00 	teq	ip, #0
 800217e:	bf18      	it	ne
 8002180:	f04e 0e01 	orrne.w	lr, lr, #1
 8002184:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8002188:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800218c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8002190:	d204      	bcs.n	800219c <__aeabi_dmul+0x80>
 8002192:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8002196:	416d      	adcs	r5, r5
 8002198:	eb46 0606 	adc.w	r6, r6, r6
 800219c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80021a0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80021a4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80021a8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80021ac:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80021b0:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80021b4:	bf88      	it	hi
 80021b6:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80021ba:	d81e      	bhi.n	80021fa <__aeabi_dmul+0xde>
 80021bc:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80021c0:	bf08      	it	eq
 80021c2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80021c6:	f150 0000 	adcs.w	r0, r0, #0
 80021ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80021ce:	bd70      	pop	{r4, r5, r6, pc}
 80021d0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80021d4:	ea46 0101 	orr.w	r1, r6, r1
 80021d8:	ea40 0002 	orr.w	r0, r0, r2
 80021dc:	ea81 0103 	eor.w	r1, r1, r3
 80021e0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80021e4:	bfc2      	ittt	gt
 80021e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80021ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80021ee:	bd70      	popgt	{r4, r5, r6, pc}
 80021f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80021f4:	f04f 0e00 	mov.w	lr, #0
 80021f8:	3c01      	subs	r4, #1
 80021fa:	f300 80ab 	bgt.w	8002354 <__aeabi_dmul+0x238>
 80021fe:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8002202:	bfde      	ittt	le
 8002204:	2000      	movle	r0, #0
 8002206:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800220a:	bd70      	pople	{r4, r5, r6, pc}
 800220c:	f1c4 0400 	rsb	r4, r4, #0
 8002210:	3c20      	subs	r4, #32
 8002212:	da35      	bge.n	8002280 <__aeabi_dmul+0x164>
 8002214:	340c      	adds	r4, #12
 8002216:	dc1b      	bgt.n	8002250 <__aeabi_dmul+0x134>
 8002218:	f104 0414 	add.w	r4, r4, #20
 800221c:	f1c4 0520 	rsb	r5, r4, #32
 8002220:	fa00 f305 	lsl.w	r3, r0, r5
 8002224:	fa20 f004 	lsr.w	r0, r0, r4
 8002228:	fa01 f205 	lsl.w	r2, r1, r5
 800222c:	ea40 0002 	orr.w	r0, r0, r2
 8002230:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8002234:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8002238:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800223c:	fa21 f604 	lsr.w	r6, r1, r4
 8002240:	eb42 0106 	adc.w	r1, r2, r6
 8002244:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8002248:	bf08      	it	eq
 800224a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800224e:	bd70      	pop	{r4, r5, r6, pc}
 8002250:	f1c4 040c 	rsb	r4, r4, #12
 8002254:	f1c4 0520 	rsb	r5, r4, #32
 8002258:	fa00 f304 	lsl.w	r3, r0, r4
 800225c:	fa20 f005 	lsr.w	r0, r0, r5
 8002260:	fa01 f204 	lsl.w	r2, r1, r4
 8002264:	ea40 0002 	orr.w	r0, r0, r2
 8002268:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800226c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8002270:	f141 0100 	adc.w	r1, r1, #0
 8002274:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8002278:	bf08      	it	eq
 800227a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800227e:	bd70      	pop	{r4, r5, r6, pc}
 8002280:	f1c4 0520 	rsb	r5, r4, #32
 8002284:	fa00 f205 	lsl.w	r2, r0, r5
 8002288:	ea4e 0e02 	orr.w	lr, lr, r2
 800228c:	fa20 f304 	lsr.w	r3, r0, r4
 8002290:	fa01 f205 	lsl.w	r2, r1, r5
 8002294:	ea43 0302 	orr.w	r3, r3, r2
 8002298:	fa21 f004 	lsr.w	r0, r1, r4
 800229c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80022a0:	fa21 f204 	lsr.w	r2, r1, r4
 80022a4:	ea20 0002 	bic.w	r0, r0, r2
 80022a8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80022ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80022b0:	bf08      	it	eq
 80022b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80022b6:	bd70      	pop	{r4, r5, r6, pc}
 80022b8:	f094 0f00 	teq	r4, #0
 80022bc:	d10f      	bne.n	80022de <__aeabi_dmul+0x1c2>
 80022be:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80022c2:	0040      	lsls	r0, r0, #1
 80022c4:	eb41 0101 	adc.w	r1, r1, r1
 80022c8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80022cc:	bf08      	it	eq
 80022ce:	3c01      	subeq	r4, #1
 80022d0:	d0f7      	beq.n	80022c2 <__aeabi_dmul+0x1a6>
 80022d2:	ea41 0106 	orr.w	r1, r1, r6
 80022d6:	f095 0f00 	teq	r5, #0
 80022da:	bf18      	it	ne
 80022dc:	4770      	bxne	lr
 80022de:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80022e2:	0052      	lsls	r2, r2, #1
 80022e4:	eb43 0303 	adc.w	r3, r3, r3
 80022e8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80022ec:	bf08      	it	eq
 80022ee:	3d01      	subeq	r5, #1
 80022f0:	d0f7      	beq.n	80022e2 <__aeabi_dmul+0x1c6>
 80022f2:	ea43 0306 	orr.w	r3, r3, r6
 80022f6:	4770      	bx	lr
 80022f8:	ea94 0f0c 	teq	r4, ip
 80022fc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8002300:	bf18      	it	ne
 8002302:	ea95 0f0c 	teqne	r5, ip
 8002306:	d00c      	beq.n	8002322 <__aeabi_dmul+0x206>
 8002308:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800230c:	bf18      	it	ne
 800230e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8002312:	d1d1      	bne.n	80022b8 <__aeabi_dmul+0x19c>
 8002314:	ea81 0103 	eor.w	r1, r1, r3
 8002318:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800231c:	f04f 0000 	mov.w	r0, #0
 8002320:	bd70      	pop	{r4, r5, r6, pc}
 8002322:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8002326:	bf06      	itte	eq
 8002328:	4610      	moveq	r0, r2
 800232a:	4619      	moveq	r1, r3
 800232c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8002330:	d019      	beq.n	8002366 <__aeabi_dmul+0x24a>
 8002332:	ea94 0f0c 	teq	r4, ip
 8002336:	d102      	bne.n	800233e <__aeabi_dmul+0x222>
 8002338:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800233c:	d113      	bne.n	8002366 <__aeabi_dmul+0x24a>
 800233e:	ea95 0f0c 	teq	r5, ip
 8002342:	d105      	bne.n	8002350 <__aeabi_dmul+0x234>
 8002344:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8002348:	bf1c      	itt	ne
 800234a:	4610      	movne	r0, r2
 800234c:	4619      	movne	r1, r3
 800234e:	d10a      	bne.n	8002366 <__aeabi_dmul+0x24a>
 8002350:	ea81 0103 	eor.w	r1, r1, r3
 8002354:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8002358:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800235c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8002360:	f04f 0000 	mov.w	r0, #0
 8002364:	bd70      	pop	{r4, r5, r6, pc}
 8002366:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800236a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800236e:	bd70      	pop	{r4, r5, r6, pc}

08002370 <__aeabi_ddiv>:
 8002370:	b570      	push	{r4, r5, r6, lr}
 8002372:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8002376:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800237a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800237e:	bf1d      	ittte	ne
 8002380:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8002384:	ea94 0f0c 	teqne	r4, ip
 8002388:	ea95 0f0c 	teqne	r5, ip
 800238c:	f000 f8a7 	bleq	80024de <__aeabi_ddiv+0x16e>
 8002390:	eba4 0405 	sub.w	r4, r4, r5
 8002394:	ea81 0e03 	eor.w	lr, r1, r3
 8002398:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800239c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80023a0:	f000 8088 	beq.w	80024b4 <__aeabi_ddiv+0x144>
 80023a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80023a8:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80023ac:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80023b0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80023b4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80023b8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80023bc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80023c0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80023c4:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80023c8:	429d      	cmp	r5, r3
 80023ca:	bf08      	it	eq
 80023cc:	4296      	cmpeq	r6, r2
 80023ce:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80023d2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80023d6:	d202      	bcs.n	80023de <__aeabi_ddiv+0x6e>
 80023d8:	085b      	lsrs	r3, r3, #1
 80023da:	ea4f 0232 	mov.w	r2, r2, rrx
 80023de:	1ab6      	subs	r6, r6, r2
 80023e0:	eb65 0503 	sbc.w	r5, r5, r3
 80023e4:	085b      	lsrs	r3, r3, #1
 80023e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80023ea:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80023ee:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80023f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80023f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80023fa:	bf22      	ittt	cs
 80023fc:	1ab6      	subcs	r6, r6, r2
 80023fe:	4675      	movcs	r5, lr
 8002400:	ea40 000c 	orrcs.w	r0, r0, ip
 8002404:	085b      	lsrs	r3, r3, #1
 8002406:	ea4f 0232 	mov.w	r2, r2, rrx
 800240a:	ebb6 0e02 	subs.w	lr, r6, r2
 800240e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8002412:	bf22      	ittt	cs
 8002414:	1ab6      	subcs	r6, r6, r2
 8002416:	4675      	movcs	r5, lr
 8002418:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800241c:	085b      	lsrs	r3, r3, #1
 800241e:	ea4f 0232 	mov.w	r2, r2, rrx
 8002422:	ebb6 0e02 	subs.w	lr, r6, r2
 8002426:	eb75 0e03 	sbcs.w	lr, r5, r3
 800242a:	bf22      	ittt	cs
 800242c:	1ab6      	subcs	r6, r6, r2
 800242e:	4675      	movcs	r5, lr
 8002430:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8002434:	085b      	lsrs	r3, r3, #1
 8002436:	ea4f 0232 	mov.w	r2, r2, rrx
 800243a:	ebb6 0e02 	subs.w	lr, r6, r2
 800243e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8002442:	bf22      	ittt	cs
 8002444:	1ab6      	subcs	r6, r6, r2
 8002446:	4675      	movcs	r5, lr
 8002448:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800244c:	ea55 0e06 	orrs.w	lr, r5, r6
 8002450:	d018      	beq.n	8002484 <__aeabi_ddiv+0x114>
 8002452:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8002456:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800245a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800245e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8002462:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8002466:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800246a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800246e:	d1c0      	bne.n	80023f2 <__aeabi_ddiv+0x82>
 8002470:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8002474:	d10b      	bne.n	800248e <__aeabi_ddiv+0x11e>
 8002476:	ea41 0100 	orr.w	r1, r1, r0
 800247a:	f04f 0000 	mov.w	r0, #0
 800247e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8002482:	e7b6      	b.n	80023f2 <__aeabi_ddiv+0x82>
 8002484:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8002488:	bf04      	itt	eq
 800248a:	4301      	orreq	r1, r0
 800248c:	2000      	moveq	r0, #0
 800248e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8002492:	bf88      	it	hi
 8002494:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8002498:	f63f aeaf 	bhi.w	80021fa <__aeabi_dmul+0xde>
 800249c:	ebb5 0c03 	subs.w	ip, r5, r3
 80024a0:	bf04      	itt	eq
 80024a2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80024a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80024aa:	f150 0000 	adcs.w	r0, r0, #0
 80024ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80024b2:	bd70      	pop	{r4, r5, r6, pc}
 80024b4:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80024b8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80024bc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80024c0:	bfc2      	ittt	gt
 80024c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80024c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80024ca:	bd70      	popgt	{r4, r5, r6, pc}
 80024cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80024d0:	f04f 0e00 	mov.w	lr, #0
 80024d4:	3c01      	subs	r4, #1
 80024d6:	e690      	b.n	80021fa <__aeabi_dmul+0xde>
 80024d8:	ea45 0e06 	orr.w	lr, r5, r6
 80024dc:	e68d      	b.n	80021fa <__aeabi_dmul+0xde>
 80024de:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80024e2:	ea94 0f0c 	teq	r4, ip
 80024e6:	bf08      	it	eq
 80024e8:	ea95 0f0c 	teqeq	r5, ip
 80024ec:	f43f af3b 	beq.w	8002366 <__aeabi_dmul+0x24a>
 80024f0:	ea94 0f0c 	teq	r4, ip
 80024f4:	d10a      	bne.n	800250c <__aeabi_ddiv+0x19c>
 80024f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80024fa:	f47f af34 	bne.w	8002366 <__aeabi_dmul+0x24a>
 80024fe:	ea95 0f0c 	teq	r5, ip
 8002502:	f47f af25 	bne.w	8002350 <__aeabi_dmul+0x234>
 8002506:	4610      	mov	r0, r2
 8002508:	4619      	mov	r1, r3
 800250a:	e72c      	b.n	8002366 <__aeabi_dmul+0x24a>
 800250c:	ea95 0f0c 	teq	r5, ip
 8002510:	d106      	bne.n	8002520 <__aeabi_ddiv+0x1b0>
 8002512:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8002516:	f43f aefd 	beq.w	8002314 <__aeabi_dmul+0x1f8>
 800251a:	4610      	mov	r0, r2
 800251c:	4619      	mov	r1, r3
 800251e:	e722      	b.n	8002366 <__aeabi_dmul+0x24a>
 8002520:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8002524:	bf18      	it	ne
 8002526:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800252a:	f47f aec5 	bne.w	80022b8 <__aeabi_dmul+0x19c>
 800252e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8002532:	f47f af0d 	bne.w	8002350 <__aeabi_dmul+0x234>
 8002536:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800253a:	f47f aeeb 	bne.w	8002314 <__aeabi_dmul+0x1f8>
 800253e:	e712      	b.n	8002366 <__aeabi_dmul+0x24a>

08002540 <__gedf2>:
 8002540:	f04f 3cff 	mov.w	ip, #4294967295
 8002544:	e006      	b.n	8002554 <__cmpdf2+0x4>
 8002546:	bf00      	nop

08002548 <__ledf2>:
 8002548:	f04f 0c01 	mov.w	ip, #1
 800254c:	e002      	b.n	8002554 <__cmpdf2+0x4>
 800254e:	bf00      	nop

08002550 <__cmpdf2>:
 8002550:	f04f 0c01 	mov.w	ip, #1
 8002554:	f84d cd04 	str.w	ip, [sp, #-4]!
 8002558:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800255c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8002560:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8002564:	bf18      	it	ne
 8002566:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800256a:	d01b      	beq.n	80025a4 <__cmpdf2+0x54>
 800256c:	b001      	add	sp, #4
 800256e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8002572:	bf0c      	ite	eq
 8002574:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8002578:	ea91 0f03 	teqne	r1, r3
 800257c:	bf02      	ittt	eq
 800257e:	ea90 0f02 	teqeq	r0, r2
 8002582:	2000      	moveq	r0, #0
 8002584:	4770      	bxeq	lr
 8002586:	f110 0f00 	cmn.w	r0, #0
 800258a:	ea91 0f03 	teq	r1, r3
 800258e:	bf58      	it	pl
 8002590:	4299      	cmppl	r1, r3
 8002592:	bf08      	it	eq
 8002594:	4290      	cmpeq	r0, r2
 8002596:	bf2c      	ite	cs
 8002598:	17d8      	asrcs	r0, r3, #31
 800259a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800259e:	f040 0001 	orr.w	r0, r0, #1
 80025a2:	4770      	bx	lr
 80025a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80025a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80025ac:	d102      	bne.n	80025b4 <__cmpdf2+0x64>
 80025ae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80025b2:	d107      	bne.n	80025c4 <__cmpdf2+0x74>
 80025b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80025b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80025bc:	d1d6      	bne.n	800256c <__cmpdf2+0x1c>
 80025be:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80025c2:	d0d3      	beq.n	800256c <__cmpdf2+0x1c>
 80025c4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop

080025cc <__aeabi_cdrcmple>:
 80025cc:	4684      	mov	ip, r0
 80025ce:	4610      	mov	r0, r2
 80025d0:	4662      	mov	r2, ip
 80025d2:	468c      	mov	ip, r1
 80025d4:	4619      	mov	r1, r3
 80025d6:	4663      	mov	r3, ip
 80025d8:	e000      	b.n	80025dc <__aeabi_cdcmpeq>
 80025da:	bf00      	nop

080025dc <__aeabi_cdcmpeq>:
 80025dc:	b501      	push	{r0, lr}
 80025de:	f7ff ffb7 	bl	8002550 <__cmpdf2>
 80025e2:	2800      	cmp	r0, #0
 80025e4:	bf48      	it	mi
 80025e6:	f110 0f00 	cmnmi.w	r0, #0
 80025ea:	bd01      	pop	{r0, pc}

080025ec <__aeabi_dcmpeq>:
 80025ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80025f0:	f7ff fff4 	bl	80025dc <__aeabi_cdcmpeq>
 80025f4:	bf0c      	ite	eq
 80025f6:	2001      	moveq	r0, #1
 80025f8:	2000      	movne	r0, #0
 80025fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80025fe:	bf00      	nop

08002600 <__aeabi_dcmplt>:
 8002600:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002604:	f7ff ffea 	bl	80025dc <__aeabi_cdcmpeq>
 8002608:	bf34      	ite	cc
 800260a:	2001      	movcc	r0, #1
 800260c:	2000      	movcs	r0, #0
 800260e:	f85d fb08 	ldr.w	pc, [sp], #8
 8002612:	bf00      	nop

08002614 <__aeabi_dcmple>:
 8002614:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002618:	f7ff ffe0 	bl	80025dc <__aeabi_cdcmpeq>
 800261c:	bf94      	ite	ls
 800261e:	2001      	movls	r0, #1
 8002620:	2000      	movhi	r0, #0
 8002622:	f85d fb08 	ldr.w	pc, [sp], #8
 8002626:	bf00      	nop

08002628 <__aeabi_dcmpge>:
 8002628:	f84d ed08 	str.w	lr, [sp, #-8]!
 800262c:	f7ff ffce 	bl	80025cc <__aeabi_cdrcmple>
 8002630:	bf94      	ite	ls
 8002632:	2001      	movls	r0, #1
 8002634:	2000      	movhi	r0, #0
 8002636:	f85d fb08 	ldr.w	pc, [sp], #8
 800263a:	bf00      	nop

0800263c <__aeabi_dcmpgt>:
 800263c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002640:	f7ff ffc4 	bl	80025cc <__aeabi_cdrcmple>
 8002644:	bf34      	ite	cc
 8002646:	2001      	movcc	r0, #1
 8002648:	2000      	movcs	r0, #0
 800264a:	f85d fb08 	ldr.w	pc, [sp], #8
 800264e:	bf00      	nop

08002650 <__aeabi_dcmpun>:
 8002650:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8002654:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8002658:	d102      	bne.n	8002660 <__aeabi_dcmpun+0x10>
 800265a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800265e:	d10a      	bne.n	8002676 <__aeabi_dcmpun+0x26>
 8002660:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8002664:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8002668:	d102      	bne.n	8002670 <__aeabi_dcmpun+0x20>
 800266a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800266e:	d102      	bne.n	8002676 <__aeabi_dcmpun+0x26>
 8002670:	f04f 0000 	mov.w	r0, #0
 8002674:	4770      	bx	lr
 8002676:	f04f 0001 	mov.w	r0, #1
 800267a:	4770      	bx	lr

0800267c <__aeabi_d2iz>:
 800267c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8002680:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8002684:	d215      	bcs.n	80026b2 <__aeabi_d2iz+0x36>
 8002686:	d511      	bpl.n	80026ac <__aeabi_d2iz+0x30>
 8002688:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800268c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8002690:	d912      	bls.n	80026b8 <__aeabi_d2iz+0x3c>
 8002692:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8002696:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800269a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800269e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80026a2:	fa23 f002 	lsr.w	r0, r3, r2
 80026a6:	bf18      	it	ne
 80026a8:	4240      	negne	r0, r0
 80026aa:	4770      	bx	lr
 80026ac:	f04f 0000 	mov.w	r0, #0
 80026b0:	4770      	bx	lr
 80026b2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80026b6:	d105      	bne.n	80026c4 <__aeabi_d2iz+0x48>
 80026b8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80026bc:	bf08      	it	eq
 80026be:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80026c2:	4770      	bx	lr
 80026c4:	f04f 0000 	mov.w	r0, #0
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop

080026cc <__aeabi_d2uiz>:
 80026cc:	004a      	lsls	r2, r1, #1
 80026ce:	d211      	bcs.n	80026f4 <__aeabi_d2uiz+0x28>
 80026d0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80026d4:	d211      	bcs.n	80026fa <__aeabi_d2uiz+0x2e>
 80026d6:	d50d      	bpl.n	80026f4 <__aeabi_d2uiz+0x28>
 80026d8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80026dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80026e0:	d40e      	bmi.n	8002700 <__aeabi_d2uiz+0x34>
 80026e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80026e6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80026ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80026ee:	fa23 f002 	lsr.w	r0, r3, r2
 80026f2:	4770      	bx	lr
 80026f4:	f04f 0000 	mov.w	r0, #0
 80026f8:	4770      	bx	lr
 80026fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80026fe:	d102      	bne.n	8002706 <__aeabi_d2uiz+0x3a>
 8002700:	f04f 30ff 	mov.w	r0, #4294967295
 8002704:	4770      	bx	lr
 8002706:	f04f 0000 	mov.w	r0, #0
 800270a:	4770      	bx	lr

0800270c <__aeabi_d2f>:
 800270c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8002710:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8002714:	bf24      	itt	cs
 8002716:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800271a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800271e:	d90d      	bls.n	800273c <__aeabi_d2f+0x30>
 8002720:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8002724:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8002728:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800272c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8002730:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8002734:	bf08      	it	eq
 8002736:	f020 0001 	biceq.w	r0, r0, #1
 800273a:	4770      	bx	lr
 800273c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8002740:	d121      	bne.n	8002786 <__aeabi_d2f+0x7a>
 8002742:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8002746:	bfbc      	itt	lt
 8002748:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800274c:	4770      	bxlt	lr
 800274e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8002752:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8002756:	f1c2 0218 	rsb	r2, r2, #24
 800275a:	f1c2 0c20 	rsb	ip, r2, #32
 800275e:	fa10 f30c 	lsls.w	r3, r0, ip
 8002762:	fa20 f002 	lsr.w	r0, r0, r2
 8002766:	bf18      	it	ne
 8002768:	f040 0001 	orrne.w	r0, r0, #1
 800276c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8002770:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8002774:	fa03 fc0c 	lsl.w	ip, r3, ip
 8002778:	ea40 000c 	orr.w	r0, r0, ip
 800277c:	fa23 f302 	lsr.w	r3, r3, r2
 8002780:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002784:	e7cc      	b.n	8002720 <__aeabi_d2f+0x14>
 8002786:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800278a:	d107      	bne.n	800279c <__aeabi_d2f+0x90>
 800278c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8002790:	bf1e      	ittt	ne
 8002792:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8002796:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800279a:	4770      	bxne	lr
 800279c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80027a0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80027a4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop

080027ac <__aeabi_uldivmod>:
 80027ac:	b953      	cbnz	r3, 80027c4 <__aeabi_uldivmod+0x18>
 80027ae:	b94a      	cbnz	r2, 80027c4 <__aeabi_uldivmod+0x18>
 80027b0:	2900      	cmp	r1, #0
 80027b2:	bf08      	it	eq
 80027b4:	2800      	cmpeq	r0, #0
 80027b6:	bf1c      	itt	ne
 80027b8:	f04f 31ff 	movne.w	r1, #4294967295
 80027bc:	f04f 30ff 	movne.w	r0, #4294967295
 80027c0:	f000 b9e6 	b.w	8002b90 <__aeabi_idiv0>
 80027c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80027c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80027cc:	f000 f83c 	bl	8002848 <__udivmoddi4>
 80027d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80027d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80027d8:	b004      	add	sp, #16
 80027da:	4770      	bx	lr

080027dc <__aeabi_d2lz>:
 80027dc:	b538      	push	{r3, r4, r5, lr}
 80027de:	2200      	movs	r2, #0
 80027e0:	2300      	movs	r3, #0
 80027e2:	4604      	mov	r4, r0
 80027e4:	460d      	mov	r5, r1
 80027e6:	f7ff ff0b 	bl	8002600 <__aeabi_dcmplt>
 80027ea:	b928      	cbnz	r0, 80027f8 <__aeabi_d2lz+0x1c>
 80027ec:	4620      	mov	r0, r4
 80027ee:	4629      	mov	r1, r5
 80027f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80027f4:	f000 b80a 	b.w	800280c <__aeabi_d2ulz>
 80027f8:	4620      	mov	r0, r4
 80027fa:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 80027fe:	f000 f805 	bl	800280c <__aeabi_d2ulz>
 8002802:	4240      	negs	r0, r0
 8002804:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8002808:	bd38      	pop	{r3, r4, r5, pc}
 800280a:	bf00      	nop

0800280c <__aeabi_d2ulz>:
 800280c:	b5d0      	push	{r4, r6, r7, lr}
 800280e:	2200      	movs	r2, #0
 8002810:	4b0b      	ldr	r3, [pc, #44]	@ (8002840 <__aeabi_d2ulz+0x34>)
 8002812:	4606      	mov	r6, r0
 8002814:	460f      	mov	r7, r1
 8002816:	f7ff fc81 	bl	800211c <__aeabi_dmul>
 800281a:	f7ff ff57 	bl	80026cc <__aeabi_d2uiz>
 800281e:	4604      	mov	r4, r0
 8002820:	f7ff fc02 	bl	8002028 <__aeabi_ui2d>
 8002824:	2200      	movs	r2, #0
 8002826:	4b07      	ldr	r3, [pc, #28]	@ (8002844 <__aeabi_d2ulz+0x38>)
 8002828:	f7ff fc78 	bl	800211c <__aeabi_dmul>
 800282c:	4602      	mov	r2, r0
 800282e:	460b      	mov	r3, r1
 8002830:	4630      	mov	r0, r6
 8002832:	4639      	mov	r1, r7
 8002834:	f7ff faba 	bl	8001dac <__aeabi_dsub>
 8002838:	f7ff ff48 	bl	80026cc <__aeabi_d2uiz>
 800283c:	4621      	mov	r1, r4
 800283e:	bdd0      	pop	{r4, r6, r7, pc}
 8002840:	3df00000 	.word	0x3df00000
 8002844:	41f00000 	.word	0x41f00000

08002848 <__udivmoddi4>:
 8002848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800284c:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800284e:	4688      	mov	r8, r1
 8002850:	4604      	mov	r4, r0
 8002852:	468e      	mov	lr, r1
 8002854:	2b00      	cmp	r3, #0
 8002856:	d14a      	bne.n	80028ee <__udivmoddi4+0xa6>
 8002858:	428a      	cmp	r2, r1
 800285a:	4617      	mov	r7, r2
 800285c:	d95f      	bls.n	800291e <__udivmoddi4+0xd6>
 800285e:	fab2 f682 	clz	r6, r2
 8002862:	b14e      	cbz	r6, 8002878 <__udivmoddi4+0x30>
 8002864:	f1c6 0320 	rsb	r3, r6, #32
 8002868:	fa01 fe06 	lsl.w	lr, r1, r6
 800286c:	40b7      	lsls	r7, r6
 800286e:	40b4      	lsls	r4, r6
 8002870:	fa20 f303 	lsr.w	r3, r0, r3
 8002874:	ea43 0e0e 	orr.w	lr, r3, lr
 8002878:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800287c:	fa1f fc87 	uxth.w	ip, r7
 8002880:	0c23      	lsrs	r3, r4, #16
 8002882:	fbbe f1f8 	udiv	r1, lr, r8
 8002886:	fb08 ee11 	mls	lr, r8, r1, lr
 800288a:	fb01 f20c 	mul.w	r2, r1, ip
 800288e:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8002892:	429a      	cmp	r2, r3
 8002894:	d907      	bls.n	80028a6 <__udivmoddi4+0x5e>
 8002896:	18fb      	adds	r3, r7, r3
 8002898:	f101 30ff 	add.w	r0, r1, #4294967295
 800289c:	d202      	bcs.n	80028a4 <__udivmoddi4+0x5c>
 800289e:	429a      	cmp	r2, r3
 80028a0:	f200 8154 	bhi.w	8002b4c <__udivmoddi4+0x304>
 80028a4:	4601      	mov	r1, r0
 80028a6:	1a9b      	subs	r3, r3, r2
 80028a8:	b2a2      	uxth	r2, r4
 80028aa:	fbb3 f0f8 	udiv	r0, r3, r8
 80028ae:	fb08 3310 	mls	r3, r8, r0, r3
 80028b2:	fb00 fc0c 	mul.w	ip, r0, ip
 80028b6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80028ba:	4594      	cmp	ip, r2
 80028bc:	d90b      	bls.n	80028d6 <__udivmoddi4+0x8e>
 80028be:	18ba      	adds	r2, r7, r2
 80028c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80028c4:	bf2c      	ite	cs
 80028c6:	2401      	movcs	r4, #1
 80028c8:	2400      	movcc	r4, #0
 80028ca:	4594      	cmp	ip, r2
 80028cc:	d902      	bls.n	80028d4 <__udivmoddi4+0x8c>
 80028ce:	2c00      	cmp	r4, #0
 80028d0:	f000 813f 	beq.w	8002b52 <__udivmoddi4+0x30a>
 80028d4:	4618      	mov	r0, r3
 80028d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80028da:	eba2 020c 	sub.w	r2, r2, ip
 80028de:	2100      	movs	r1, #0
 80028e0:	b11d      	cbz	r5, 80028ea <__udivmoddi4+0xa2>
 80028e2:	40f2      	lsrs	r2, r6
 80028e4:	2300      	movs	r3, #0
 80028e6:	e9c5 2300 	strd	r2, r3, [r5]
 80028ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80028ee:	428b      	cmp	r3, r1
 80028f0:	d905      	bls.n	80028fe <__udivmoddi4+0xb6>
 80028f2:	b10d      	cbz	r5, 80028f8 <__udivmoddi4+0xb0>
 80028f4:	e9c5 0100 	strd	r0, r1, [r5]
 80028f8:	2100      	movs	r1, #0
 80028fa:	4608      	mov	r0, r1
 80028fc:	e7f5      	b.n	80028ea <__udivmoddi4+0xa2>
 80028fe:	fab3 f183 	clz	r1, r3
 8002902:	2900      	cmp	r1, #0
 8002904:	d14e      	bne.n	80029a4 <__udivmoddi4+0x15c>
 8002906:	4543      	cmp	r3, r8
 8002908:	f0c0 8112 	bcc.w	8002b30 <__udivmoddi4+0x2e8>
 800290c:	4282      	cmp	r2, r0
 800290e:	f240 810f 	bls.w	8002b30 <__udivmoddi4+0x2e8>
 8002912:	4608      	mov	r0, r1
 8002914:	2d00      	cmp	r5, #0
 8002916:	d0e8      	beq.n	80028ea <__udivmoddi4+0xa2>
 8002918:	e9c5 4e00 	strd	r4, lr, [r5]
 800291c:	e7e5      	b.n	80028ea <__udivmoddi4+0xa2>
 800291e:	2a00      	cmp	r2, #0
 8002920:	f000 80ac 	beq.w	8002a7c <__udivmoddi4+0x234>
 8002924:	fab2 f682 	clz	r6, r2
 8002928:	2e00      	cmp	r6, #0
 800292a:	f040 80bb 	bne.w	8002aa4 <__udivmoddi4+0x25c>
 800292e:	1a8b      	subs	r3, r1, r2
 8002930:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8002934:	b2bc      	uxth	r4, r7
 8002936:	2101      	movs	r1, #1
 8002938:	0c02      	lsrs	r2, r0, #16
 800293a:	b280      	uxth	r0, r0
 800293c:	fbb3 fcfe 	udiv	ip, r3, lr
 8002940:	fb0e 331c 	mls	r3, lr, ip, r3
 8002944:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8002948:	fb04 f20c 	mul.w	r2, r4, ip
 800294c:	429a      	cmp	r2, r3
 800294e:	d90e      	bls.n	800296e <__udivmoddi4+0x126>
 8002950:	18fb      	adds	r3, r7, r3
 8002952:	f10c 38ff 	add.w	r8, ip, #4294967295
 8002956:	bf2c      	ite	cs
 8002958:	f04f 0901 	movcs.w	r9, #1
 800295c:	f04f 0900 	movcc.w	r9, #0
 8002960:	429a      	cmp	r2, r3
 8002962:	d903      	bls.n	800296c <__udivmoddi4+0x124>
 8002964:	f1b9 0f00 	cmp.w	r9, #0
 8002968:	f000 80ec 	beq.w	8002b44 <__udivmoddi4+0x2fc>
 800296c:	46c4      	mov	ip, r8
 800296e:	1a9b      	subs	r3, r3, r2
 8002970:	fbb3 f8fe 	udiv	r8, r3, lr
 8002974:	fb0e 3318 	mls	r3, lr, r8, r3
 8002978:	fb04 f408 	mul.w	r4, r4, r8
 800297c:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 8002980:	4294      	cmp	r4, r2
 8002982:	d90b      	bls.n	800299c <__udivmoddi4+0x154>
 8002984:	18ba      	adds	r2, r7, r2
 8002986:	f108 33ff 	add.w	r3, r8, #4294967295
 800298a:	bf2c      	ite	cs
 800298c:	2001      	movcs	r0, #1
 800298e:	2000      	movcc	r0, #0
 8002990:	4294      	cmp	r4, r2
 8002992:	d902      	bls.n	800299a <__udivmoddi4+0x152>
 8002994:	2800      	cmp	r0, #0
 8002996:	f000 80d1 	beq.w	8002b3c <__udivmoddi4+0x2f4>
 800299a:	4698      	mov	r8, r3
 800299c:	1b12      	subs	r2, r2, r4
 800299e:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 80029a2:	e79d      	b.n	80028e0 <__udivmoddi4+0x98>
 80029a4:	f1c1 0620 	rsb	r6, r1, #32
 80029a8:	408b      	lsls	r3, r1
 80029aa:	fa08 f401 	lsl.w	r4, r8, r1
 80029ae:	fa00 f901 	lsl.w	r9, r0, r1
 80029b2:	fa22 f706 	lsr.w	r7, r2, r6
 80029b6:	fa28 f806 	lsr.w	r8, r8, r6
 80029ba:	408a      	lsls	r2, r1
 80029bc:	431f      	orrs	r7, r3
 80029be:	fa20 f306 	lsr.w	r3, r0, r6
 80029c2:	0c38      	lsrs	r0, r7, #16
 80029c4:	4323      	orrs	r3, r4
 80029c6:	fa1f fc87 	uxth.w	ip, r7
 80029ca:	0c1c      	lsrs	r4, r3, #16
 80029cc:	fbb8 fef0 	udiv	lr, r8, r0
 80029d0:	fb00 881e 	mls	r8, r0, lr, r8
 80029d4:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 80029d8:	fb0e f80c 	mul.w	r8, lr, ip
 80029dc:	45a0      	cmp	r8, r4
 80029de:	d90e      	bls.n	80029fe <__udivmoddi4+0x1b6>
 80029e0:	193c      	adds	r4, r7, r4
 80029e2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80029e6:	bf2c      	ite	cs
 80029e8:	f04f 0b01 	movcs.w	fp, #1
 80029ec:	f04f 0b00 	movcc.w	fp, #0
 80029f0:	45a0      	cmp	r8, r4
 80029f2:	d903      	bls.n	80029fc <__udivmoddi4+0x1b4>
 80029f4:	f1bb 0f00 	cmp.w	fp, #0
 80029f8:	f000 80b8 	beq.w	8002b6c <__udivmoddi4+0x324>
 80029fc:	46d6      	mov	lr, sl
 80029fe:	eba4 0408 	sub.w	r4, r4, r8
 8002a02:	fa1f f883 	uxth.w	r8, r3
 8002a06:	fbb4 f3f0 	udiv	r3, r4, r0
 8002a0a:	fb00 4413 	mls	r4, r0, r3, r4
 8002a0e:	fb03 fc0c 	mul.w	ip, r3, ip
 8002a12:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8002a16:	45a4      	cmp	ip, r4
 8002a18:	d90e      	bls.n	8002a38 <__udivmoddi4+0x1f0>
 8002a1a:	193c      	adds	r4, r7, r4
 8002a1c:	f103 30ff 	add.w	r0, r3, #4294967295
 8002a20:	bf2c      	ite	cs
 8002a22:	f04f 0801 	movcs.w	r8, #1
 8002a26:	f04f 0800 	movcc.w	r8, #0
 8002a2a:	45a4      	cmp	ip, r4
 8002a2c:	d903      	bls.n	8002a36 <__udivmoddi4+0x1ee>
 8002a2e:	f1b8 0f00 	cmp.w	r8, #0
 8002a32:	f000 809f 	beq.w	8002b74 <__udivmoddi4+0x32c>
 8002a36:	4603      	mov	r3, r0
 8002a38:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8002a3c:	eba4 040c 	sub.w	r4, r4, ip
 8002a40:	fba0 ec02 	umull	lr, ip, r0, r2
 8002a44:	4564      	cmp	r4, ip
 8002a46:	4673      	mov	r3, lr
 8002a48:	46e0      	mov	r8, ip
 8002a4a:	d302      	bcc.n	8002a52 <__udivmoddi4+0x20a>
 8002a4c:	d107      	bne.n	8002a5e <__udivmoddi4+0x216>
 8002a4e:	45f1      	cmp	r9, lr
 8002a50:	d205      	bcs.n	8002a5e <__udivmoddi4+0x216>
 8002a52:	ebbe 0302 	subs.w	r3, lr, r2
 8002a56:	eb6c 0c07 	sbc.w	ip, ip, r7
 8002a5a:	3801      	subs	r0, #1
 8002a5c:	46e0      	mov	r8, ip
 8002a5e:	b15d      	cbz	r5, 8002a78 <__udivmoddi4+0x230>
 8002a60:	ebb9 0203 	subs.w	r2, r9, r3
 8002a64:	eb64 0408 	sbc.w	r4, r4, r8
 8002a68:	fa04 f606 	lsl.w	r6, r4, r6
 8002a6c:	fa22 f301 	lsr.w	r3, r2, r1
 8002a70:	40cc      	lsrs	r4, r1
 8002a72:	431e      	orrs	r6, r3
 8002a74:	e9c5 6400 	strd	r6, r4, [r5]
 8002a78:	2100      	movs	r1, #0
 8002a7a:	e736      	b.n	80028ea <__udivmoddi4+0xa2>
 8002a7c:	fbb1 fcf2 	udiv	ip, r1, r2
 8002a80:	0c01      	lsrs	r1, r0, #16
 8002a82:	4614      	mov	r4, r2
 8002a84:	b280      	uxth	r0, r0
 8002a86:	4696      	mov	lr, r2
 8002a88:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8002a8c:	2620      	movs	r6, #32
 8002a8e:	4690      	mov	r8, r2
 8002a90:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8002a94:	4610      	mov	r0, r2
 8002a96:	fbb1 f1f2 	udiv	r1, r1, r2
 8002a9a:	eba3 0308 	sub.w	r3, r3, r8
 8002a9e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8002aa2:	e74b      	b.n	800293c <__udivmoddi4+0xf4>
 8002aa4:	40b7      	lsls	r7, r6
 8002aa6:	f1c6 0320 	rsb	r3, r6, #32
 8002aaa:	fa01 f206 	lsl.w	r2, r1, r6
 8002aae:	fa21 f803 	lsr.w	r8, r1, r3
 8002ab2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8002ab6:	fa20 f303 	lsr.w	r3, r0, r3
 8002aba:	b2bc      	uxth	r4, r7
 8002abc:	40b0      	lsls	r0, r6
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	0c02      	lsrs	r2, r0, #16
 8002ac2:	0c19      	lsrs	r1, r3, #16
 8002ac4:	b280      	uxth	r0, r0
 8002ac6:	fbb8 f9fe 	udiv	r9, r8, lr
 8002aca:	fb0e 8819 	mls	r8, lr, r9, r8
 8002ace:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8002ad2:	fb09 f804 	mul.w	r8, r9, r4
 8002ad6:	4588      	cmp	r8, r1
 8002ad8:	d951      	bls.n	8002b7e <__udivmoddi4+0x336>
 8002ada:	1879      	adds	r1, r7, r1
 8002adc:	f109 3cff 	add.w	ip, r9, #4294967295
 8002ae0:	bf2c      	ite	cs
 8002ae2:	f04f 0a01 	movcs.w	sl, #1
 8002ae6:	f04f 0a00 	movcc.w	sl, #0
 8002aea:	4588      	cmp	r8, r1
 8002aec:	d902      	bls.n	8002af4 <__udivmoddi4+0x2ac>
 8002aee:	f1ba 0f00 	cmp.w	sl, #0
 8002af2:	d031      	beq.n	8002b58 <__udivmoddi4+0x310>
 8002af4:	eba1 0108 	sub.w	r1, r1, r8
 8002af8:	fbb1 f9fe 	udiv	r9, r1, lr
 8002afc:	fb09 f804 	mul.w	r8, r9, r4
 8002b00:	fb0e 1119 	mls	r1, lr, r9, r1
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002b0a:	4543      	cmp	r3, r8
 8002b0c:	d235      	bcs.n	8002b7a <__udivmoddi4+0x332>
 8002b0e:	18fb      	adds	r3, r7, r3
 8002b10:	f109 31ff 	add.w	r1, r9, #4294967295
 8002b14:	bf2c      	ite	cs
 8002b16:	f04f 0a01 	movcs.w	sl, #1
 8002b1a:	f04f 0a00 	movcc.w	sl, #0
 8002b1e:	4543      	cmp	r3, r8
 8002b20:	d2bb      	bcs.n	8002a9a <__udivmoddi4+0x252>
 8002b22:	f1ba 0f00 	cmp.w	sl, #0
 8002b26:	d1b8      	bne.n	8002a9a <__udivmoddi4+0x252>
 8002b28:	f1a9 0102 	sub.w	r1, r9, #2
 8002b2c:	443b      	add	r3, r7
 8002b2e:	e7b4      	b.n	8002a9a <__udivmoddi4+0x252>
 8002b30:	1a84      	subs	r4, r0, r2
 8002b32:	eb68 0203 	sbc.w	r2, r8, r3
 8002b36:	2001      	movs	r0, #1
 8002b38:	4696      	mov	lr, r2
 8002b3a:	e6eb      	b.n	8002914 <__udivmoddi4+0xcc>
 8002b3c:	443a      	add	r2, r7
 8002b3e:	f1a8 0802 	sub.w	r8, r8, #2
 8002b42:	e72b      	b.n	800299c <__udivmoddi4+0x154>
 8002b44:	f1ac 0c02 	sub.w	ip, ip, #2
 8002b48:	443b      	add	r3, r7
 8002b4a:	e710      	b.n	800296e <__udivmoddi4+0x126>
 8002b4c:	3902      	subs	r1, #2
 8002b4e:	443b      	add	r3, r7
 8002b50:	e6a9      	b.n	80028a6 <__udivmoddi4+0x5e>
 8002b52:	443a      	add	r2, r7
 8002b54:	3802      	subs	r0, #2
 8002b56:	e6be      	b.n	80028d6 <__udivmoddi4+0x8e>
 8002b58:	eba7 0808 	sub.w	r8, r7, r8
 8002b5c:	f1a9 0c02 	sub.w	ip, r9, #2
 8002b60:	4441      	add	r1, r8
 8002b62:	fbb1 f9fe 	udiv	r9, r1, lr
 8002b66:	fb09 f804 	mul.w	r8, r9, r4
 8002b6a:	e7c9      	b.n	8002b00 <__udivmoddi4+0x2b8>
 8002b6c:	f1ae 0e02 	sub.w	lr, lr, #2
 8002b70:	443c      	add	r4, r7
 8002b72:	e744      	b.n	80029fe <__udivmoddi4+0x1b6>
 8002b74:	3b02      	subs	r3, #2
 8002b76:	443c      	add	r4, r7
 8002b78:	e75e      	b.n	8002a38 <__udivmoddi4+0x1f0>
 8002b7a:	4649      	mov	r1, r9
 8002b7c:	e78d      	b.n	8002a9a <__udivmoddi4+0x252>
 8002b7e:	eba1 0108 	sub.w	r1, r1, r8
 8002b82:	46cc      	mov	ip, r9
 8002b84:	fbb1 f9fe 	udiv	r9, r1, lr
 8002b88:	fb09 f804 	mul.w	r8, r9, r4
 8002b8c:	e7b8      	b.n	8002b00 <__udivmoddi4+0x2b8>
 8002b8e:	bf00      	nop

08002b90 <__aeabi_idiv0>:
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop

08002b94 <app_main>:
static bool SendCommandFrame(const uint8_t* counter_val);
static void ConfigureRadio();


void app_main( void )
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
    bool tx_initiated = false;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	71bb      	strb	r3, [r7, #6]
    uint8_t init_flag;
    bool initialization_needed = false;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	71fb      	strb	r3, [r7, #7]

    printf("\r\n===== app_main START =====\r\n");
 8002ba2:	4880      	ldr	r0, [pc, #512]	@ (8002da4 <app_main+0x210>)
 8002ba4:	f00e fafe 	bl	80111a4 <puts>

    if (!Memory_Init()) {
 8002ba8:	f001 f9f8 	bl	8003f9c <Memory_Init>
 8002bac:	4603      	mov	r3, r0
 8002bae:	f083 0301 	eor.w	r3, r3, #1
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d005      	beq.n	8002bc4 <app_main+0x30>
        printf("app_main: KRYTYCZNY BŁĄD inicjalizacji pamięci EEPROM!\r\n");
 8002bb8:	487b      	ldr	r0, [pc, #492]	@ (8002da8 <app_main+0x214>)
 8002bba:	f00e faf3 	bl	80111a4 <puts>
        Error_Handler();
 8002bbe:	f001 f9d1 	bl	8003f64 <Error_Handler>
        return;
 8002bc2:	e0eb      	b.n	8002d9c <app_main+0x208>
    }

    if (Memory_ReadInitFlag(&init_flag)) {
 8002bc4:	1d7b      	adds	r3, r7, #5
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f001 fac8 	bl	800415c <Memory_ReadInitFlag>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d013      	beq.n	8002bfa <app_main+0x66>
        if (init_flag != EEPROM_INIT_FLAG_VALUE) {
 8002bd2:	797b      	ldrb	r3, [r7, #5]
 8002bd4:	2baa      	cmp	r3, #170	@ 0xaa
 8002bd6:	d008      	beq.n	8002bea <app_main+0x56>
            printf("app_main: Flaga inicjalizacji niepoprawna (0x%02X != 0x%02X). EEPROM wymaga inicjalizacji.\r\n",
 8002bd8:	797b      	ldrb	r3, [r7, #5]
 8002bda:	22aa      	movs	r2, #170	@ 0xaa
 8002bdc:	4619      	mov	r1, r3
 8002bde:	4873      	ldr	r0, [pc, #460]	@ (8002dac <app_main+0x218>)
 8002be0:	f00e fa78 	bl	80110d4 <iprintf>
                   init_flag, EEPROM_INIT_FLAG_VALUE);
            initialization_needed = true;
 8002be4:	2301      	movs	r3, #1
 8002be6:	71fb      	strb	r3, [r7, #7]
 8002be8:	e00c      	b.n	8002c04 <app_main+0x70>
        } else {
            printf("app_main: Flaga inicjalizacji poprawna (0x%02X). EEPROM zainicjalizowany.\r\n", init_flag);
 8002bea:	797b      	ldrb	r3, [r7, #5]
 8002bec:	4619      	mov	r1, r3
 8002bee:	4870      	ldr	r0, [pc, #448]	@ (8002db0 <app_main+0x21c>)
 8002bf0:	f00e fa70 	bl	80110d4 <iprintf>
            initialization_needed = false;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	71fb      	strb	r3, [r7, #7]
 8002bf8:	e004      	b.n	8002c04 <app_main+0x70>
        }
    } else {
        printf("app_main: BŁĄD odczytu flagi inicjalizacji! Zakładam, że EEPROM wymaga inicjalizacji.\r\n");
 8002bfa:	486e      	ldr	r0, [pc, #440]	@ (8002db4 <app_main+0x220>)
 8002bfc:	f00e fad2 	bl	80111a4 <puts>
        initialization_needed = true;
 8002c00:	2301      	movs	r3, #1
 8002c02:	71fb      	strb	r3, [r7, #7]
    }

    if (initialization_needed) {
 8002c04:	79fb      	ldrb	r3, [r7, #7]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d027      	beq.n	8002c5a <app_main+0xc6>
        printf("app_main: Inicjalizuję licznik wartością 1 i zapisuję do EEPROM...\r\n");
 8002c0a:	486b      	ldr	r0, [pc, #428]	@ (8002db8 <app_main+0x224>)
 8002c0c:	f00e faca 	bl	80111a4 <puts>
        memset(CurrentCounterValue, 0, EEPROM_COUNTER_SIZE);
 8002c10:	2208      	movs	r2, #8
 8002c12:	2100      	movs	r1, #0
 8002c14:	4869      	ldr	r0, [pc, #420]	@ (8002dbc <app_main+0x228>)
 8002c16:	f00e fbd7 	bl	80113c8 <memset>
        CurrentCounterValue[EEPROM_COUNTER_SIZE - 1] = 1; // Ustaw ostatni bajt na 1
 8002c1a:	4b68      	ldr	r3, [pc, #416]	@ (8002dbc <app_main+0x228>)
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	71da      	strb	r2, [r3, #7]

        if (Memory_WriteCounter(CurrentCounterValue)) {
 8002c20:	4866      	ldr	r0, [pc, #408]	@ (8002dbc <app_main+0x228>)
 8002c22:	f001 fa2d 	bl	8004080 <Memory_WriteCounter>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d010      	beq.n	8002c4e <app_main+0xba>
            if (!Memory_WriteInitFlag(EEPROM_INIT_FLAG_VALUE)) {
 8002c2c:	20aa      	movs	r0, #170	@ 0xaa
 8002c2e:	f001 fac9 	bl	80041c4 <Memory_WriteInitFlag>
 8002c32:	4603      	mov	r3, r0
 8002c34:	f083 0301 	eor.w	r3, r3, #1
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d003      	beq.n	8002c46 <app_main+0xb2>
                printf("app_main: KRYTYCZNY BŁĄD zapisu flagi inicjalizacji!\r\n");
 8002c3e:	4860      	ldr	r0, [pc, #384]	@ (8002dc0 <app_main+0x22c>)
 8002c40:	f00e fab0 	bl	80111a4 <puts>
 8002c44:	e020      	b.n	8002c88 <app_main+0xf4>
            } else {
                 printf("app_main: Inicjalizacja EEPROM zakończona.\r\n");
 8002c46:	485f      	ldr	r0, [pc, #380]	@ (8002dc4 <app_main+0x230>)
 8002c48:	f00e faac 	bl	80111a4 <puts>
 8002c4c:	e01c      	b.n	8002c88 <app_main+0xf4>
            }
        } else {
             printf("app_main: KRYTYCZNY BŁĄD zapisu początkowego licznika!\r\n");
 8002c4e:	485e      	ldr	r0, [pc, #376]	@ (8002dc8 <app_main+0x234>)
 8002c50:	f00e faa8 	bl	80111a4 <puts>
             Error_Handler();
 8002c54:	f001 f986 	bl	8003f64 <Error_Handler>
             return;
 8002c58:	e0a0      	b.n	8002d9c <app_main+0x208>
        }
    } else {
        printf("app_main: Odczytuję licznik z zainicjalizowanego EEPROM...\r\n");
 8002c5a:	485c      	ldr	r0, [pc, #368]	@ (8002dcc <app_main+0x238>)
 8002c5c:	f00e faa2 	bl	80111a4 <puts>
        if (!Memory_ReadCounter(CurrentCounterValue)) {
 8002c60:	4856      	ldr	r0, [pc, #344]	@ (8002dbc <app_main+0x228>)
 8002c62:	f001 f9b7 	bl	8003fd4 <Memory_ReadCounter>
 8002c66:	4603      	mov	r3, r0
 8002c68:	f083 0301 	eor.w	r3, r3, #1
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00a      	beq.n	8002c88 <app_main+0xf4>
            printf("app_main: BŁĄD odczytu licznika z zainicjalizowanego EEPROM! Używam wartości awaryjnej (1).\r\n");
 8002c72:	4857      	ldr	r0, [pc, #348]	@ (8002dd0 <app_main+0x23c>)
 8002c74:	f00e fa96 	bl	80111a4 <puts>
            memset(CurrentCounterValue, 0, EEPROM_COUNTER_SIZE);
 8002c78:	2208      	movs	r2, #8
 8002c7a:	2100      	movs	r1, #0
 8002c7c:	484f      	ldr	r0, [pc, #316]	@ (8002dbc <app_main+0x228>)
 8002c7e:	f00e fba3 	bl	80113c8 <memset>
            CurrentCounterValue[EEPROM_COUNTER_SIZE - 1] = 1;
 8002c82:	4b4e      	ldr	r3, [pc, #312]	@ (8002dbc <app_main+0x228>)
 8002c84:	2201      	movs	r2, #1
 8002c86:	71da      	strb	r2, [r3, #7]

        }
    }

    BoardInitMcu();
 8002c88:	f009 fc98 	bl	800c5bc <BoardInitMcu>
    BoardInitPeriph();
 8002c8c:	f009 fc60 	bl	800c550 <BoardInitPeriph>

    RadioEvents.TxDone = OnRadioTxDone;
 8002c90:	4b50      	ldr	r3, [pc, #320]	@ (8002dd4 <app_main+0x240>)
 8002c92:	4a51      	ldr	r2, [pc, #324]	@ (8002dd8 <app_main+0x244>)
 8002c94:	601a      	str	r2, [r3, #0]
    RadioEvents.RxDone = OnRadioRxDone;
 8002c96:	4b4f      	ldr	r3, [pc, #316]	@ (8002dd4 <app_main+0x240>)
 8002c98:	4a50      	ldr	r2, [pc, #320]	@ (8002ddc <app_main+0x248>)
 8002c9a:	609a      	str	r2, [r3, #8]
    RadioEvents.TxTimeout = OnRadioTxTimeout;
 8002c9c:	4b4d      	ldr	r3, [pc, #308]	@ (8002dd4 <app_main+0x240>)
 8002c9e:	4a50      	ldr	r2, [pc, #320]	@ (8002de0 <app_main+0x24c>)
 8002ca0:	605a      	str	r2, [r3, #4]
    RadioEvents.RxTimeout = OnRadioRxTimeout;
 8002ca2:	4b4c      	ldr	r3, [pc, #304]	@ (8002dd4 <app_main+0x240>)
 8002ca4:	4a4f      	ldr	r2, [pc, #316]	@ (8002de4 <app_main+0x250>)
 8002ca6:	60da      	str	r2, [r3, #12]
    RadioEvents.RxError = OnRadioRxError;
 8002ca8:	4b4a      	ldr	r3, [pc, #296]	@ (8002dd4 <app_main+0x240>)
 8002caa:	4a4f      	ldr	r2, [pc, #316]	@ (8002de8 <app_main+0x254>)
 8002cac:	611a      	str	r2, [r3, #16]

    Radio.Init(&RadioEvents);
 8002cae:	4b4f      	ldr	r3, [pc, #316]	@ (8002dec <app_main+0x258>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4848      	ldr	r0, [pc, #288]	@ (8002dd4 <app_main+0x240>)
 8002cb4:	4798      	blx	r3

    ConfigureRadio();
 8002cb6:	f000 f8b7 	bl	8002e28 <ConfigureRadio>

    tx_initiated = SendCommandFrame(CurrentCounterValue);
 8002cba:	4840      	ldr	r0, [pc, #256]	@ (8002dbc <app_main+0x228>)
 8002cbc:	f000 f926 	bl	8002f0c <SendCommandFrame>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	71bb      	strb	r3, [r7, #6]

    if (tx_initiated)
 8002cc4:	79bb      	ldrb	r3, [r7, #6]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d03b      	beq.n	8002d42 <app_main+0x1ae>
    {
        printf("app_main: Transmisja zainicjowana. Oczekiwanie na wynik...\r\n");
 8002cca:	4849      	ldr	r0, [pc, #292]	@ (8002df0 <app_main+0x25c>)
 8002ccc:	f00e fa6a 	bl	80111a4 <puts>
        AppState = APP_STATE_TX;
 8002cd0:	4b48      	ldr	r3, [pc, #288]	@ (8002df4 <app_main+0x260>)
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	701a      	strb	r2, [r3, #0]
        while (!TransmissionCompleteFlag && !TransmissionTimedOutFlag)
 8002cd6:	e002      	b.n	8002cde <app_main+0x14a>
        {
             HAL_Delay(5);
 8002cd8:	2005      	movs	r0, #5
 8002cda:	f001 fea7 	bl	8004a2c <HAL_Delay>
        while (!TransmissionCompleteFlag && !TransmissionTimedOutFlag)
 8002cde:	4b46      	ldr	r3, [pc, #280]	@ (8002df8 <app_main+0x264>)
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	f083 0301 	eor.w	r3, r3, #1
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d007      	beq.n	8002cfe <app_main+0x16a>
 8002cee:	4b43      	ldr	r3, [pc, #268]	@ (8002dfc <app_main+0x268>)
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	f083 0301 	eor.w	r3, r3, #1
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d1ec      	bne.n	8002cd8 <app_main+0x144>
        }

        if (TransmissionTimedOutFlag) {
 8002cfe:	4b3f      	ldr	r3, [pc, #252]	@ (8002dfc <app_main+0x268>)
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d006      	beq.n	8002d16 <app_main+0x182>
            printf("app_main: Transmisja zakończona TIMEOUTEM.\r\n");
 8002d08:	483d      	ldr	r0, [pc, #244]	@ (8002e00 <app_main+0x26c>)
 8002d0a:	f00e fa4b 	bl	80111a4 <puts>
            AppState = APP_STATE_TX_TIMEOUT;
 8002d0e:	4b39      	ldr	r3, [pc, #228]	@ (8002df4 <app_main+0x260>)
 8002d10:	2202      	movs	r2, #2
 8002d12:	701a      	strb	r2, [r3, #0]
 8002d14:	e01b      	b.n	8002d4e <app_main+0x1ba>
        } else if (TransmissionCompleteFlag) {
 8002d16:	4b38      	ldr	r3, [pc, #224]	@ (8002df8 <app_main+0x264>)
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d009      	beq.n	8002d34 <app_main+0x1a0>
            printf("app_main: Transmisja zakończona SUKCESEM (TX Done).\r\n");
 8002d20:	4838      	ldr	r0, [pc, #224]	@ (8002e04 <app_main+0x270>)
 8002d22:	f00e fa3f 	bl	80111a4 <puts>
            WriteCounterRequestFlag = true;
 8002d26:	4b38      	ldr	r3, [pc, #224]	@ (8002e08 <app_main+0x274>)
 8002d28:	2201      	movs	r2, #1
 8002d2a:	701a      	strb	r2, [r3, #0]
            AppState = APP_STATE_LOWPOWER;
 8002d2c:	4b31      	ldr	r3, [pc, #196]	@ (8002df4 <app_main+0x260>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	701a      	strb	r2, [r3, #0]
 8002d32:	e00c      	b.n	8002d4e <app_main+0x1ba>
        } else {
            printf("app_main: BŁĄD - Nieznany stan po oczekiwaniu na transmisję.\r\n");
 8002d34:	4835      	ldr	r0, [pc, #212]	@ (8002e0c <app_main+0x278>)
 8002d36:	f00e fa35 	bl	80111a4 <puts>
            AppState = APP_STATE_LOWPOWER;
 8002d3a:	4b2e      	ldr	r3, [pc, #184]	@ (8002df4 <app_main+0x260>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	701a      	strb	r2, [r3, #0]
 8002d40:	e005      	b.n	8002d4e <app_main+0x1ba>
        }
    }
    else
    {
        printf("app_main: BŁĄD inicjalizacji transmisji (SendCommandFrame nie powiódł się).\r\n");
 8002d42:	4833      	ldr	r0, [pc, #204]	@ (8002e10 <app_main+0x27c>)
 8002d44:	f00e fa2e 	bl	80111a4 <puts>
        AppState = APP_STATE_LOWPOWER;
 8002d48:	4b2a      	ldr	r3, [pc, #168]	@ (8002df4 <app_main+0x260>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	701a      	strb	r2, [r3, #0]
    }

    if (WriteCounterRequestFlag)
 8002d4e:	4b2e      	ldr	r3, [pc, #184]	@ (8002e08 <app_main+0x274>)
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d015      	beq.n	8002d84 <app_main+0x1f0>
    {
        printf("app_main: Inkrementacja i zapis licznika do EEPROM...\r\n");
 8002d58:	482e      	ldr	r0, [pc, #184]	@ (8002e14 <app_main+0x280>)
 8002d5a:	f00e fa23 	bl	80111a4 <puts>
        IncrementCounter(CurrentCounterValue);
 8002d5e:	4817      	ldr	r0, [pc, #92]	@ (8002dbc <app_main+0x228>)
 8002d60:	f000 f8b2 	bl	8002ec8 <IncrementCounter>

        if (Memory_WriteCounter(CurrentCounterValue)) {
 8002d64:	4815      	ldr	r0, [pc, #84]	@ (8002dbc <app_main+0x228>)
 8002d66:	f001 f98b 	bl	8004080 <Memory_WriteCounter>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d003      	beq.n	8002d78 <app_main+0x1e4>
             printf("app_main: Nowy licznik zapisany pomyślnie.\r\n");
 8002d70:	4829      	ldr	r0, [pc, #164]	@ (8002e18 <app_main+0x284>)
 8002d72:	f00e fa17 	bl	80111a4 <puts>
 8002d76:	e002      	b.n	8002d7e <app_main+0x1ea>
        } else {
             printf("app_main: KRYTYCZNY BŁĄD zapisu licznika do EEPROM po udanej transmisji!\r\n");
 8002d78:	4828      	ldr	r0, [pc, #160]	@ (8002e1c <app_main+0x288>)
 8002d7a:	f00e fa13 	bl	80111a4 <puts>
        }
        WriteCounterRequestFlag = false;
 8002d7e:	4b22      	ldr	r3, [pc, #136]	@ (8002e08 <app_main+0x274>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	701a      	strb	r2, [r3, #0]
    }

    printf("app_main: Uśpienie radia...\r\n");
 8002d84:	4826      	ldr	r0, [pc, #152]	@ (8002e20 <app_main+0x28c>)
 8002d86:	f00e fa0d 	bl	80111a4 <puts>
    Radio.Sleep();
 8002d8a:	4b18      	ldr	r3, [pc, #96]	@ (8002dec <app_main+0x258>)
 8002d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d8e:	4798      	blx	r3
    AppState = APP_STATE_LOWPOWER;
 8002d90:	4b18      	ldr	r3, [pc, #96]	@ (8002df4 <app_main+0x260>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	701a      	strb	r2, [r3, #0]
    printf("===== app_main KONIEC =====\r\n\r\n");
 8002d96:	4823      	ldr	r0, [pc, #140]	@ (8002e24 <app_main+0x290>)
 8002d98:	f00e fa04 	bl	80111a4 <puts>
}
 8002d9c:	3708      	adds	r7, #8
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	08014d40 	.word	0x08014d40
 8002da8:	08014d60 	.word	0x08014d60
 8002dac:	08014d9c 	.word	0x08014d9c
 8002db0:	08014dfc 	.word	0x08014dfc
 8002db4:	08014e48 	.word	0x08014e48
 8002db8:	08014ea4 	.word	0x08014ea4
 8002dbc:	20000284 	.word	0x20000284
 8002dc0:	08014eec 	.word	0x08014eec
 8002dc4:	08014f24 	.word	0x08014f24
 8002dc8:	08014f54 	.word	0x08014f54
 8002dcc:	08014f90 	.word	0x08014f90
 8002dd0:	08014fd0 	.word	0x08014fd0
 8002dd4:	20000268 	.word	0x20000268
 8002dd8:	08003021 	.word	0x08003021
 8002ddc:	08003095 	.word	0x08003095
 8002de0:	08003055 	.word	0x08003055
 8002de4:	08003129 	.word	0x08003129
 8002de8:	08003155 	.word	0x08003155
 8002dec:	080164b8 	.word	0x080164b8
 8002df0:	08015034 	.word	0x08015034
 8002df4:	2000020d 	.word	0x2000020d
 8002df8:	20000264 	.word	0x20000264
 8002dfc:	20000265 	.word	0x20000265
 8002e00:	08015070 	.word	0x08015070
 8002e04:	080150a0 	.word	0x080150a0
 8002e08:	20000266 	.word	0x20000266
 8002e0c:	080150d8 	.word	0x080150d8
 8002e10:	0801511c 	.word	0x0801511c
 8002e14:	08015170 	.word	0x08015170
 8002e18:	080151a8 	.word	0x080151a8
 8002e1c:	080151d8 	.word	0x080151d8
 8002e20:	08015224 	.word	0x08015224
 8002e24:	08015244 	.word	0x08015244

08002e28 <ConfigureRadio>:


static void ConfigureRadio()
{
 8002e28:	b590      	push	{r4, r7, lr}
 8002e2a:	b08b      	sub	sp, #44	@ 0x2c
 8002e2c:	af0a      	add	r7, sp, #40	@ 0x28
    Radio.SetChannel( RF_FREQUENCY );
 8002e2e:	4b22      	ldr	r3, [pc, #136]	@ (8002eb8 <ConfigureRadio+0x90>)
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	4822      	ldr	r0, [pc, #136]	@ (8002ebc <ConfigureRadio+0x94>)
 8002e34:	4798      	blx	r3
                                   LORA_CODINGRATE, 0, LORA_PREAMBLE_LENGTH,
                                   LORA_SYMBOL_TIMEOUT, LORA_FIX_LENGTH_PAYLOAD_ON,
                                   0, true, 0, 0, LORA_IQ_INVERSION_ON, true );

#elif defined( USE_MODEM_FSK )
    printf("Konfiguracja radia: FSK\r\n");
 8002e36:	4822      	ldr	r0, [pc, #136]	@ (8002ec0 <ConfigureRadio+0x98>)
 8002e38:	f00e f9b4 	bl	80111a4 <puts>
    Radio.SetTxConfig( MODEM_FSK, TX_OUTPUT_POWER, FSK_FDEV, 0, FSK_DATARATE, 0,
 8002e3c:	4b1e      	ldr	r3, [pc, #120]	@ (8002eb8 <ConfigureRadio+0x90>)
 8002e3e:	69dc      	ldr	r4, [r3, #28]
 8002e40:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8002e44:	9308      	str	r3, [sp, #32]
 8002e46:	2300      	movs	r3, #0
 8002e48:	9307      	str	r3, [sp, #28]
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	9306      	str	r3, [sp, #24]
 8002e4e:	2300      	movs	r3, #0
 8002e50:	9305      	str	r3, [sp, #20]
 8002e52:	2301      	movs	r3, #1
 8002e54:	9304      	str	r3, [sp, #16]
 8002e56:	2300      	movs	r3, #0
 8002e58:	9303      	str	r3, [sp, #12]
 8002e5a:	2305      	movs	r3, #5
 8002e5c:	9302      	str	r3, [sp, #8]
 8002e5e:	2300      	movs	r3, #0
 8002e60:	9301      	str	r3, [sp, #4]
 8002e62:	f24c 3350 	movw	r3, #50000	@ 0xc350
 8002e66:	9300      	str	r3, [sp, #0]
 8002e68:	2300      	movs	r3, #0
 8002e6a:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8002e6e:	2100      	movs	r1, #0
 8002e70:	2000      	movs	r0, #0
 8002e72:	47a0      	blx	r4
                       FSK_PREAMBLE_LENGTH, FSK_FIX_LENGTH_PAYLOAD_ON, true, 0, 0, 0, FSK_TX_TIMEOUT_MS );

    // Konfiguracja RX (opcjonalna dla trybu TX-only)
    Radio.SetRxConfig( MODEM_FSK, FSK_BANDWIDTH, FSK_DATARATE, 0, FSK_AFC_BANDWIDTH,
 8002e74:	4b10      	ldr	r3, [pc, #64]	@ (8002eb8 <ConfigureRadio+0x90>)
 8002e76:	699c      	ldr	r4, [r3, #24]
 8002e78:	2300      	movs	r3, #0
 8002e7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	9308      	str	r3, [sp, #32]
 8002e80:	2300      	movs	r3, #0
 8002e82:	9307      	str	r3, [sp, #28]
 8002e84:	2300      	movs	r3, #0
 8002e86:	9306      	str	r3, [sp, #24]
 8002e88:	2301      	movs	r3, #1
 8002e8a:	9305      	str	r3, [sp, #20]
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	9304      	str	r3, [sp, #16]
 8002e90:	2300      	movs	r3, #0
 8002e92:	9303      	str	r3, [sp, #12]
 8002e94:	2300      	movs	r3, #0
 8002e96:	9302      	str	r3, [sp, #8]
 8002e98:	2305      	movs	r3, #5
 8002e9a:	9301      	str	r3, [sp, #4]
 8002e9c:	4b09      	ldr	r3, [pc, #36]	@ (8002ec4 <ConfigureRadio+0x9c>)
 8002e9e:	9300      	str	r3, [sp, #0]
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8002ea6:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8002eaa:	2000      	movs	r0, #0
 8002eac:	47a0      	blx	r4
                       FSK_PREAMBLE_LENGTH, 0, FSK_FIX_LENGTH_PAYLOAD_ON, 0, true, 0, 0, false, false );
#endif
}
 8002eae:	bf00      	nop
 8002eb0:	3704      	adds	r7, #4
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd90      	pop	{r4, r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	080164b8 	.word	0x080164b8
 8002ebc:	33bfae40 	.word	0x33bfae40
 8002ec0:	08015264 	.word	0x08015264
 8002ec4:	00014585 	.word	0x00014585

08002ec8 <IncrementCounter>:


static void IncrementCounter(uint8_t* counter) {
 8002ec8:	b480      	push	{r7}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
    int i = EEPROM_COUNTER_SIZE - 1;
 8002ed0:	2307      	movs	r3, #7
 8002ed2:	60fb      	str	r3, [r7, #12]
    while (i >= 0) {
 8002ed4:	e00f      	b.n	8002ef6 <IncrementCounter+0x2e>
        counter[i]++;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	4413      	add	r3, r2
 8002edc:	781a      	ldrb	r2, [r3, #0]
 8002ede:	3201      	adds	r2, #1
 8002ee0:	b2d2      	uxtb	r2, r2
 8002ee2:	701a      	strb	r2, [r3, #0]
        if (counter[i] != 0) {
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	4413      	add	r3, r2
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d106      	bne.n	8002efe <IncrementCounter+0x36>
            break;
        }
        i--;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	60fb      	str	r3, [r7, #12]
    while (i >= 0) {
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	daec      	bge.n	8002ed6 <IncrementCounter+0xe>
    }
}
 8002efc:	e000      	b.n	8002f00 <IncrementCounter+0x38>
            break;
 8002efe:	bf00      	nop
}
 8002f00:	bf00      	nop
 8002f02:	3714      	adds	r7, #20
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <SendCommandFrame>:


static bool SendCommandFrame(const uint8_t* counter_val)
{
 8002f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f0e:	b0ab      	sub	sp, #172	@ 0xac
 8002f10:	af06      	add	r7, sp, #24
 8002f12:	6078      	str	r0, [r7, #4]
    uint8_t secure_frame[MAX_FRAME_SIZE];
    size_t secure_frame_size = 0; // Inicjalizuj rozmiarem 0
 8002f14:	2300      	movs	r3, #0
 8002f16:	60fb      	str	r3, [r7, #12]

    printf("SendCommandFrame: Tworzenie ramki z licznikiem: %02X %02X %02X %02X %02X %02X %02X %02X\r\n",
           counter_val[0], counter_val[1], counter_val[2], counter_val[3],
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	781b      	ldrb	r3, [r3, #0]
    printf("SendCommandFrame: Tworzenie ramki z licznikiem: %02X %02X %02X %02X %02X %02X %02X %02X\r\n",
 8002f1c:	461d      	mov	r5, r3
           counter_val[0], counter_val[1], counter_val[2], counter_val[3],
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	3301      	adds	r3, #1
 8002f22:	781b      	ldrb	r3, [r3, #0]
    printf("SendCommandFrame: Tworzenie ramki z licznikiem: %02X %02X %02X %02X %02X %02X %02X %02X\r\n",
 8002f24:	461e      	mov	r6, r3
           counter_val[0], counter_val[1], counter_val[2], counter_val[3],
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	3302      	adds	r3, #2
 8002f2a:	781b      	ldrb	r3, [r3, #0]
    printf("SendCommandFrame: Tworzenie ramki z licznikiem: %02X %02X %02X %02X %02X %02X %02X %02X\r\n",
 8002f2c:	469c      	mov	ip, r3
           counter_val[0], counter_val[1], counter_val[2], counter_val[3],
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	3303      	adds	r3, #3
 8002f32:	781b      	ldrb	r3, [r3, #0]
    printf("SendCommandFrame: Tworzenie ramki z licznikiem: %02X %02X %02X %02X %02X %02X %02X %02X\r\n",
 8002f34:	461a      	mov	r2, r3
           counter_val[4], counter_val[5], counter_val[6], counter_val[7]);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	3304      	adds	r3, #4
 8002f3a:	781b      	ldrb	r3, [r3, #0]
    printf("SendCommandFrame: Tworzenie ramki z licznikiem: %02X %02X %02X %02X %02X %02X %02X %02X\r\n",
 8002f3c:	4619      	mov	r1, r3
           counter_val[4], counter_val[5], counter_val[6], counter_val[7]);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	3305      	adds	r3, #5
 8002f42:	781b      	ldrb	r3, [r3, #0]
    printf("SendCommandFrame: Tworzenie ramki z licznikiem: %02X %02X %02X %02X %02X %02X %02X %02X\r\n",
 8002f44:	4618      	mov	r0, r3
           counter_val[4], counter_val[5], counter_val[6], counter_val[7]);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	3306      	adds	r3, #6
 8002f4a:	781b      	ldrb	r3, [r3, #0]
    printf("SendCommandFrame: Tworzenie ramki z licznikiem: %02X %02X %02X %02X %02X %02X %02X %02X\r\n",
 8002f4c:	461c      	mov	r4, r3
           counter_val[4], counter_val[5], counter_val[6], counter_val[7]);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	3307      	adds	r3, #7
 8002f52:	781b      	ldrb	r3, [r3, #0]
    printf("SendCommandFrame: Tworzenie ramki z licznikiem: %02X %02X %02X %02X %02X %02X %02X %02X\r\n",
 8002f54:	9304      	str	r3, [sp, #16]
 8002f56:	9403      	str	r4, [sp, #12]
 8002f58:	9002      	str	r0, [sp, #8]
 8002f5a:	9101      	str	r1, [sp, #4]
 8002f5c:	9200      	str	r2, [sp, #0]
 8002f5e:	4663      	mov	r3, ip
 8002f60:	4632      	mov	r2, r6
 8002f62:	4629      	mov	r1, r5
 8002f64:	4822      	ldr	r0, [pc, #136]	@ (8002ff0 <SendCommandFrame+0xe4>)
 8002f66:	f00e f8b5 	bl	80110d4 <iprintf>

    create_secure_command_frame(
 8002f6a:	f107 030c 	add.w	r3, r7, #12
 8002f6e:	9305      	str	r3, [sp, #20]
 8002f70:	f107 0310 	add.w	r3, r7, #16
 8002f74:	9304      	str	r3, [sp, #16]
 8002f76:	2310      	movs	r3, #16
 8002f78:	9303      	str	r3, [sp, #12]
 8002f7a:	4b1e      	ldr	r3, [pc, #120]	@ (8002ff4 <SendCommandFrame+0xe8>)
 8002f7c:	9302      	str	r3, [sp, #8]
 8002f7e:	2320      	movs	r3, #32
 8002f80:	9301      	str	r3, [sp, #4]
 8002f82:	4b1d      	ldr	r3, [pc, #116]	@ (8002ff8 <SendCommandFrame+0xec>)
 8002f84:	9300      	str	r3, [sp, #0]
 8002f86:	2310      	movs	r3, #16
 8002f88:	4a1c      	ldr	r2, [pc, #112]	@ (8002ffc <SendCommandFrame+0xf0>)
 8002f8a:	6879      	ldr	r1, [r7, #4]
 8002f8c:	481c      	ldr	r0, [pc, #112]	@ (8003000 <SendCommandFrame+0xf4>)
 8002f8e:	f000 fb27 	bl	80035e0 <create_secure_command_frame>
            CRYPTO_AES_KEY, sizeof(CRYPTO_AES_KEY),  // Klucz AES
            CRYPTO_HMAC_KEY, sizeof(CRYPTO_HMAC_KEY),// Klucz HMAC
            CRYPTO_IV, sizeof(CRYPTO_IV),            // Wektor inicjalizacyjny IV
            secure_frame, &secure_frame_size);       // Bufor wyjściowy i wskaźnik na rozmiar

    if (secure_frame_size == 0)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d104      	bne.n	8002fa2 <SendCommandFrame+0x96>
    {
         printf("SendCommandFrame: KRYTYCZNY BŁĄD tworzenia bezpiecznej ramki (rozmiar 0)!\r\n");
 8002f98:	481a      	ldr	r0, [pc, #104]	@ (8003004 <SendCommandFrame+0xf8>)
 8002f9a:	f00e f903 	bl	80111a4 <puts>
         return false; // Zwróć błąd
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	e021      	b.n	8002fe6 <SendCommandFrame+0xda>
    }

    if (secure_frame_size > BUFFER_SIZE) {
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2b40      	cmp	r3, #64	@ 0x40
 8002fa6:	d907      	bls.n	8002fb8 <SendCommandFrame+0xac>
         printf("SendCommandFrame: BŁĄD - Wygenerowana ramka (%u B) jest za duża dla bufora radia (%d B)!\r\n",
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2240      	movs	r2, #64	@ 0x40
 8002fac:	4619      	mov	r1, r3
 8002fae:	4816      	ldr	r0, [pc, #88]	@ (8003008 <SendCommandFrame+0xfc>)
 8002fb0:	f00e f890 	bl	80110d4 <iprintf>
                (unsigned)secure_frame_size, BUFFER_SIZE);
         return false;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	e016      	b.n	8002fe6 <SendCommandFrame+0xda>
    }

    printf("SendCommandFrame: Rozpoczynam transmisję radiową ramki (%u bajtów)...\r\n", (unsigned)secure_frame_size);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	4619      	mov	r1, r3
 8002fbc:	4813      	ldr	r0, [pc, #76]	@ (800300c <SendCommandFrame+0x100>)
 8002fbe:	f00e f889 	bl	80110d4 <iprintf>

    TransmissionCompleteFlag = false;
 8002fc2:	4b13      	ldr	r3, [pc, #76]	@ (8003010 <SendCommandFrame+0x104>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	701a      	strb	r2, [r3, #0]
    TransmissionTimedOutFlag = false;
 8002fc8:	4b12      	ldr	r3, [pc, #72]	@ (8003014 <SendCommandFrame+0x108>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	701a      	strb	r2, [r3, #0]
    WriteCounterRequestFlag = false;
 8002fce:	4b12      	ldr	r3, [pc, #72]	@ (8003018 <SendCommandFrame+0x10c>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	701a      	strb	r2, [r3, #0]

    Radio.Send(secure_frame, secure_frame_size);
 8002fd4:	4b11      	ldr	r3, [pc, #68]	@ (800301c <SendCommandFrame+0x110>)
 8002fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fd8:	68fa      	ldr	r2, [r7, #12]
 8002fda:	b2d1      	uxtb	r1, r2
 8002fdc:	f107 0210 	add.w	r2, r7, #16
 8002fe0:	4610      	mov	r0, r2
 8002fe2:	4798      	blx	r3


    return true;
 8002fe4:	2301      	movs	r3, #1
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3794      	adds	r7, #148	@ 0x94
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	08015280 	.word	0x08015280
 8002ff4:	08016390 	.word	0x08016390
 8002ff8:	08016370 	.word	0x08016370
 8002ffc:	08016360 	.word	0x08016360
 8003000:	08016358 	.word	0x08016358
 8003004:	080152dc 	.word	0x080152dc
 8003008:	0801532c 	.word	0x0801532c
 800300c:	0801538c 	.word	0x0801538c
 8003010:	20000264 	.word	0x20000264
 8003014:	20000265 	.word	0x20000265
 8003018:	20000266 	.word	0x20000266
 800301c:	080164b8 	.word	0x080164b8

08003020 <OnRadioTxDone>:


static void OnRadioTxDone( void )
{
 8003020:	b580      	push	{r7, lr}
 8003022:	af00      	add	r7, sp, #0
    printf("Callback: OnRadioTxDone!\r\n");
 8003024:	4807      	ldr	r0, [pc, #28]	@ (8003044 <OnRadioTxDone+0x24>)
 8003026:	f00e f8bd 	bl	80111a4 <puts>
    RadioTrxEventsCounter.txdone++;
 800302a:	4b07      	ldr	r3, [pc, #28]	@ (8003048 <OnRadioTxDone+0x28>)
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	3301      	adds	r3, #1
 8003030:	4a05      	ldr	r2, [pc, #20]	@ (8003048 <OnRadioTxDone+0x28>)
 8003032:	60d3      	str	r3, [r2, #12]
    TransmissionCompleteFlag = true;  // Ustaw flagę sukcesu
 8003034:	4b05      	ldr	r3, [pc, #20]	@ (800304c <OnRadioTxDone+0x2c>)
 8003036:	2201      	movs	r2, #1
 8003038:	701a      	strb	r2, [r3, #0]
    TransmissionTimedOutFlag = false; // Upewnij się, że flaga timeout jest skasowana
 800303a:	4b05      	ldr	r3, [pc, #20]	@ (8003050 <OnRadioTxDone+0x30>)
 800303c:	2200      	movs	r2, #0
 800303e:	701a      	strb	r2, [r3, #0]
}
 8003040:	bf00      	nop
 8003042:	bd80      	pop	{r7, pc}
 8003044:	080153d8 	.word	0x080153d8
 8003048:	20000250 	.word	0x20000250
 800304c:	20000264 	.word	0x20000264
 8003050:	20000265 	.word	0x20000265

08003054 <OnRadioTxTimeout>:
static void OnRadioTxTimeout( void )
{
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
    printf("Callback: OnRadioTxTimeout!\r\n");
 8003058:	4809      	ldr	r0, [pc, #36]	@ (8003080 <OnRadioTxTimeout+0x2c>)
 800305a:	f00e f8a3 	bl	80111a4 <puts>

    Radio.Sleep();
 800305e:	4b09      	ldr	r3, [pc, #36]	@ (8003084 <OnRadioTxTimeout+0x30>)
 8003060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003062:	4798      	blx	r3
    RadioTrxEventsCounter.txtimeout++;
 8003064:	4b08      	ldr	r3, [pc, #32]	@ (8003088 <OnRadioTxTimeout+0x34>)
 8003066:	691b      	ldr	r3, [r3, #16]
 8003068:	3301      	adds	r3, #1
 800306a:	4a07      	ldr	r2, [pc, #28]	@ (8003088 <OnRadioTxTimeout+0x34>)
 800306c:	6113      	str	r3, [r2, #16]
    TransmissionTimedOutFlag = true;  // Ustaw flagę timeoutu
 800306e:	4b07      	ldr	r3, [pc, #28]	@ (800308c <OnRadioTxTimeout+0x38>)
 8003070:	2201      	movs	r2, #1
 8003072:	701a      	strb	r2, [r3, #0]
    TransmissionCompleteFlag = false; // Upewnij się, że flaga sukcesu jest skasowana
 8003074:	4b06      	ldr	r3, [pc, #24]	@ (8003090 <OnRadioTxTimeout+0x3c>)
 8003076:	2200      	movs	r2, #0
 8003078:	701a      	strb	r2, [r3, #0]
}
 800307a:	bf00      	nop
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	080153f4 	.word	0x080153f4
 8003084:	080164b8 	.word	0x080164b8
 8003088:	20000250 	.word	0x20000250
 800308c:	20000265 	.word	0x20000265
 8003090:	20000264 	.word	0x20000264

08003094 <OnRadioRxDone>:
static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	4608      	mov	r0, r1
 800309e:	4611      	mov	r1, r2
 80030a0:	461a      	mov	r2, r3
 80030a2:	4603      	mov	r3, r0
 80030a4:	817b      	strh	r3, [r7, #10]
 80030a6:	460b      	mov	r3, r1
 80030a8:	813b      	strh	r3, [r7, #8]
 80030aa:	4613      	mov	r3, r2
 80030ac:	71fb      	strb	r3, [r7, #7]
    printf("Callback: OnRadioRxDone (Odebrano %u bajtów, RSSI:%d, SNR:%d) - Niespodziewane.\r\n", size, rssi, snr);
 80030ae:	8979      	ldrh	r1, [r7, #10]
 80030b0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80030b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030b8:	4814      	ldr	r0, [pc, #80]	@ (800310c <OnRadioRxDone+0x78>)
 80030ba:	f00e f80b 	bl	80110d4 <iprintf>
    if (size > 0 && size <= BUFFER_SIZE) {
 80030be:	897b      	ldrh	r3, [r7, #10]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d00c      	beq.n	80030de <OnRadioRxDone+0x4a>
 80030c4:	897b      	ldrh	r3, [r7, #10]
 80030c6:	2b40      	cmp	r3, #64	@ 0x40
 80030c8:	d809      	bhi.n	80030de <OnRadioRxDone+0x4a>
        memcpy( RxDataBuffer, payload, size );
 80030ca:	897b      	ldrh	r3, [r7, #10]
 80030cc:	461a      	mov	r2, r3
 80030ce:	68f9      	ldr	r1, [r7, #12]
 80030d0:	480f      	ldr	r0, [pc, #60]	@ (8003110 <OnRadioRxDone+0x7c>)
 80030d2:	f00e fa0b 	bl	80114ec <memcpy>
        RxDataBufferSize = size;
 80030d6:	4a0f      	ldr	r2, [pc, #60]	@ (8003114 <OnRadioRxDone+0x80>)
 80030d8:	897b      	ldrh	r3, [r7, #10]
 80030da:	8013      	strh	r3, [r2, #0]
 80030dc:	e002      	b.n	80030e4 <OnRadioRxDone+0x50>
    } else {
        RxDataBufferSize = 0;
 80030de:	4b0d      	ldr	r3, [pc, #52]	@ (8003114 <OnRadioRxDone+0x80>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	801a      	strh	r2, [r3, #0]
    }
    LastRssiValue = rssi;
 80030e4:	893b      	ldrh	r3, [r7, #8]
 80030e6:	b25a      	sxtb	r2, r3
 80030e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003118 <OnRadioRxDone+0x84>)
 80030ea:	701a      	strb	r2, [r3, #0]
    LastSnrValue = snr;
 80030ec:	4a0b      	ldr	r2, [pc, #44]	@ (800311c <OnRadioRxDone+0x88>)
 80030ee:	79fb      	ldrb	r3, [r7, #7]
 80030f0:	7013      	strb	r3, [r2, #0]
    AppState = APP_STATE_RX_DONE;
 80030f2:	4b0b      	ldr	r3, [pc, #44]	@ (8003120 <OnRadioRxDone+0x8c>)
 80030f4:	2204      	movs	r2, #4
 80030f6:	701a      	strb	r2, [r3, #0]
    RadioTrxEventsCounter.rxdone++;
 80030f8:	4b0a      	ldr	r3, [pc, #40]	@ (8003124 <OnRadioRxDone+0x90>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	3301      	adds	r3, #1
 80030fe:	4a09      	ldr	r2, [pc, #36]	@ (8003124 <OnRadioRxDone+0x90>)
 8003100:	6013      	str	r3, [r2, #0]

}
 8003102:	bf00      	nop
 8003104:	3710      	adds	r7, #16
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	08015414 	.word	0x08015414
 8003110:	20000210 	.word	0x20000210
 8003114:	20000000 	.word	0x20000000
 8003118:	2000020e 	.word	0x2000020e
 800311c:	2000020f 	.word	0x2000020f
 8003120:	2000020d 	.word	0x2000020d
 8003124:	20000250 	.word	0x20000250

08003128 <OnRadioRxTimeout>:


static void OnRadioRxTimeout( void )
{
 8003128:	b580      	push	{r7, lr}
 800312a:	af00      	add	r7, sp, #0
    printf("Callback: OnRadioRxTimeout - Niespodziewane.\r\n");
 800312c:	4806      	ldr	r0, [pc, #24]	@ (8003148 <OnRadioRxTimeout+0x20>)
 800312e:	f00e f839 	bl	80111a4 <puts>
    AppState = APP_STATE_RX_TIMEOUT;
 8003132:	4b06      	ldr	r3, [pc, #24]	@ (800314c <OnRadioRxTimeout+0x24>)
 8003134:	2205      	movs	r2, #5
 8003136:	701a      	strb	r2, [r3, #0]
    RadioTrxEventsCounter.rxtimeout++;
 8003138:	4b05      	ldr	r3, [pc, #20]	@ (8003150 <OnRadioRxTimeout+0x28>)
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	3301      	adds	r3, #1
 800313e:	4a04      	ldr	r2, [pc, #16]	@ (8003150 <OnRadioRxTimeout+0x28>)
 8003140:	6053      	str	r3, [r2, #4]

}
 8003142:	bf00      	nop
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	08015468 	.word	0x08015468
 800314c:	2000020d 	.word	0x2000020d
 8003150:	20000250 	.word	0x20000250

08003154 <OnRadioRxError>:


static void OnRadioRxError( void )
{
 8003154:	b580      	push	{r7, lr}
 8003156:	af00      	add	r7, sp, #0
    printf("Callback: OnRadioRxError - Niespodziewane.\r\n");
 8003158:	4806      	ldr	r0, [pc, #24]	@ (8003174 <OnRadioRxError+0x20>)
 800315a:	f00e f823 	bl	80111a4 <puts>
    AppState = APP_STATE_RX_ERROR;
 800315e:	4b06      	ldr	r3, [pc, #24]	@ (8003178 <OnRadioRxError+0x24>)
 8003160:	2206      	movs	r2, #6
 8003162:	701a      	strb	r2, [r3, #0]
    RadioTrxEventsCounter.rxerror++;
 8003164:	4b05      	ldr	r3, [pc, #20]	@ (800317c <OnRadioRxError+0x28>)
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	3301      	adds	r3, #1
 800316a:	4a04      	ldr	r2, [pc, #16]	@ (800317c <OnRadioRxError+0x28>)
 800316c:	6093      	str	r3, [r2, #8]

}
 800316e:	bf00      	nop
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	08015498 	.word	0x08015498
 8003178:	2000020d 	.word	0x2000020d
 800317c:	20000250 	.word	0x20000250

08003180 <cmox_ll_init>:
  * @brief          CMOX library low level initialization
  * @param          pArg User defined parameter that is transmitted from initialize service
  * @retval         Initialization status: @ref CMOX_INIT_SUCCESS / @ref CMOX_INIT_FAIL
  */
cmox_init_retval_t cmox_ll_init(void *pArg)
{
 8003180:	b480      	push	{r7}
 8003182:	b085      	sub	sp, #20
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  (void)pArg;
  /* Ensure CRC is enabled for cryptographic processing */
  __HAL_RCC_CRC_RELEASE_RESET();
 8003188:	4b0d      	ldr	r3, [pc, #52]	@ (80031c0 <cmox_ll_init+0x40>)
 800318a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800318c:	4a0c      	ldr	r2, [pc, #48]	@ (80031c0 <cmox_ll_init+0x40>)
 800318e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003192:	6613      	str	r3, [r2, #96]	@ 0x60
  __HAL_RCC_CRC_CLK_ENABLE();
 8003194:	4b0a      	ldr	r3, [pc, #40]	@ (80031c0 <cmox_ll_init+0x40>)
 8003196:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800319a:	4a09      	ldr	r2, [pc, #36]	@ (80031c0 <cmox_ll_init+0x40>)
 800319c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80031a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80031a4:	4b06      	ldr	r3, [pc, #24]	@ (80031c0 <cmox_ll_init+0x40>)
 80031a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031ae:	60fb      	str	r3, [r7, #12]
 80031b0:	68fb      	ldr	r3, [r7, #12]
  return CMOX_INIT_SUCCESS;
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3714      	adds	r7, #20
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr
 80031c0:	46020c00 	.word	0x46020c00

080031c4 <cmox_ll_deInit>:
  * @brief          CMOX library low level de-initialization
  * @param          pArg User defined parameter that is transmitted from finalize service
  * @retval         De-initialization status: @ref CMOX_INIT_SUCCESS / @ref CMOX_INIT_FAIL
  */
cmox_init_retval_t cmox_ll_deInit(void *pArg)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  (void)pArg;
  /* Do not turn off CRC to avoid side effect on other SW parts using it */
  return CMOX_INIT_SUCCESS;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	370c      	adds	r7, #12
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
	...

080031dc <btox>:
#include "config.h"  // Dodane odwołanie do pliku konfiguracyjnego
#include "cmox_crypto.h"  // Główny plik nagłówkowy biblioteki kryptograficznej

/* Function to convert binary to hex string */
void btox(uint8_t *hexbuf, const uint8_t *binbuf, int n)
{
 80031dc:	b4b0      	push	{r4, r5, r7}
 80031de:	b08b      	sub	sp, #44	@ 0x2c
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	607a      	str	r2, [r7, #4]
    n *= 2;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	005b      	lsls	r3, r3, #1
 80031ec:	607b      	str	r3, [r7, #4]
    hexbuf[n] = 0x00;       // string null termination
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	68fa      	ldr	r2, [r7, #12]
 80031f2:	4413      	add	r3, r2
 80031f4:	2200      	movs	r2, #0
 80031f6:	701a      	strb	r2, [r3, #0]
    const char hex[]= "0123456789abcdef";
 80031f8:	4b17      	ldr	r3, [pc, #92]	@ (8003258 <btox+0x7c>)
 80031fa:	f107 0414 	add.w	r4, r7, #20
 80031fe:	461d      	mov	r5, r3
 8003200:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003202:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003204:	682b      	ldr	r3, [r5, #0]
 8003206:	7023      	strb	r3, [r4, #0]
    while (--n >= 0)
 8003208:	e01a      	b.n	8003240 <btox+0x64>
        hexbuf[n] = hex[(binbuf[n>>1] >> ((1 - (n&1)) << 2)) & 0xF];
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	105b      	asrs	r3, r3, #1
 800320e:	461a      	mov	r2, r3
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	4413      	add	r3, r2
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	461a      	mov	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	2b00      	cmp	r3, #0
 8003220:	d101      	bne.n	8003226 <btox+0x4a>
 8003222:	2304      	movs	r3, #4
 8003224:	e000      	b.n	8003228 <btox+0x4c>
 8003226:	2300      	movs	r3, #0
 8003228:	fa42 f303 	asr.w	r3, r2, r3
 800322c:	f003 020f 	and.w	r2, r3, #15
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	68f9      	ldr	r1, [r7, #12]
 8003234:	440b      	add	r3, r1
 8003236:	3228      	adds	r2, #40	@ 0x28
 8003238:	443a      	add	r2, r7
 800323a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800323e:	701a      	strb	r2, [r3, #0]
    while (--n >= 0)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	3b01      	subs	r3, #1
 8003244:	607b      	str	r3, [r7, #4]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2b00      	cmp	r3, #0
 800324a:	dade      	bge.n	800320a <btox+0x2e>
}
 800324c:	bf00      	nop
 800324e:	bf00      	nop
 8003250:	372c      	adds	r7, #44	@ 0x2c
 8003252:	46bd      	mov	sp, r7
 8003254:	bcb0      	pop	{r4, r5, r7}
 8003256:	4770      	bx	lr
 8003258:	08015670 	.word	0x08015670

0800325c <validate_and_process_command>:
                                   const uint8_t *aes_key, size_t aes_key_size,
                                   const uint8_t *hmac_key, size_t hmac_key_size,
                                   const uint8_t *iv, size_t iv_size,
                                   uint8_t *output_pilot_id, uint8_t *output_counter,
                                   uint8_t *output_command, size_t *output_command_size)
{
 800325c:	b5b0      	push	{r4, r5, r7, lr}
 800325e:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8003262:	af06      	add	r7, sp, #24
 8003264:	f507 741c 	add.w	r4, r7, #624	@ 0x270
 8003268:	f5a4 7419 	sub.w	r4, r4, #612	@ 0x264
 800326c:	6020      	str	r0, [r4, #0]
 800326e:	f507 701c 	add.w	r0, r7, #624	@ 0x270
 8003272:	f5a0 701a 	sub.w	r0, r0, #616	@ 0x268
 8003276:	6001      	str	r1, [r0, #0]
 8003278:	f507 711c 	add.w	r1, r7, #624	@ 0x270
 800327c:	f5a1 711b 	sub.w	r1, r1, #620	@ 0x26c
 8003280:	600a      	str	r2, [r1, #0]
 8003282:	f507 721c 	add.w	r2, r7, #624	@ 0x270
 8003286:	f5a2 721c 	sub.w	r2, r2, #624	@ 0x270
 800328a:	6013      	str	r3, [r2, #0]
    cmox_cipher_retval_t cipher_retval;
    cmox_mac_retval_t mac_retval;
    size_t computed_size;
    uint8_t result = 0; // 0 = błąd, 1 = sukces
 800328c:	2300      	movs	r3, #0
 800328e:	f887 326f 	strb.w	r3, [r7, #623]	@ 0x26f
    uint8_t computed_hmac[CMOX_SHA256_SIZE];               // Bufor na obliczony HMAC
    uint8_t decrypted_frame[MAX_FRAME_SIZE];               // Bufor na odszyfrowaną ramkę
    uint8_t buffer[MAX_FRAME_SIZE*2];                      // Bufor pomocniczy na wydruk hex
    size_t computed_hmac_size;

    printf("\n\r===== Walidacja i przetwarzanie odebranej ramki =====\n\r");
 8003292:	48bf      	ldr	r0, [pc, #764]	@ (8003590 <validate_and_process_command+0x334>)
 8003294:	f00d ff1e 	bl	80110d4 <iprintf>

    /* Sprawdź minimalny rozmiar danych */
    if (data_size < (16 + CMOX_SHA256_SIZE)) { // 16 bajtów data + HMAC
 8003298:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800329c:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2b2f      	cmp	r3, #47	@ 0x2f
 80032a4:	d804      	bhi.n	80032b0 <validate_and_process_command+0x54>
        printf("Błąd: Otrzymano zbyt mało danych!\n\r");
 80032a6:	48bb      	ldr	r0, [pc, #748]	@ (8003594 <validate_and_process_command+0x338>)
 80032a8:	f00d ff14 	bl	80110d4 <iprintf>
        return 0;
 80032ac:	2300      	movs	r3, #0
 80032ae:	e16a      	b.n	8003586 <validate_and_process_command+0x32a>
    }

    /* Rozdziel dane na zaszyfrowaną ramkę i HMAC */
    size_t encrypted_size = data_size - CMOX_SHA256_SIZE;
 80032b0:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80032b4:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	3b20      	subs	r3, #32
 80032bc:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
    memcpy(encrypted_frame, received_data, encrypted_size);
 80032c0:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80032c4:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80032c8:	f507 70ec 	add.w	r0, r7, #472	@ 0x1d8
 80032cc:	f8d7 2268 	ldr.w	r2, [r7, #616]	@ 0x268
 80032d0:	6819      	ldr	r1, [r3, #0]
 80032d2:	f00e f90b 	bl	80114ec <memcpy>
    memcpy(received_hmac, received_data + encrypted_size, CMOX_SHA256_SIZE);
 80032d6:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80032da:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 80032e4:	4413      	add	r3, r2
 80032e6:	f507 74dc 	add.w	r4, r7, #440	@ 0x1b8
 80032ea:	461d      	mov	r5, r3
 80032ec:	6828      	ldr	r0, [r5, #0]
 80032ee:	6869      	ldr	r1, [r5, #4]
 80032f0:	68aa      	ldr	r2, [r5, #8]
 80032f2:	68eb      	ldr	r3, [r5, #12]
 80032f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032f6:	6928      	ldr	r0, [r5, #16]
 80032f8:	6969      	ldr	r1, [r5, #20]
 80032fa:	69aa      	ldr	r2, [r5, #24]
 80032fc:	69eb      	ldr	r3, [r5, #28]
 80032fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}

    printf("Otrzymana zaszyfrowana ramka (hex): ");
 8003300:	48a5      	ldr	r0, [pc, #660]	@ (8003598 <validate_and_process_command+0x33c>)
 8003302:	f00d fee7 	bl	80110d4 <iprintf>
    btox(buffer, encrypted_frame, encrypted_size);
 8003306:	f8d7 2268 	ldr.w	r2, [r7, #616]	@ 0x268
 800330a:	f507 71ec 	add.w	r1, r7, #472	@ 0x1d8
 800330e:	f107 0318 	add.w	r3, r7, #24
 8003312:	4618      	mov	r0, r3
 8003314:	f7ff ff62 	bl	80031dc <btox>
    printf("%s\n\r", buffer);
 8003318:	f107 0318 	add.w	r3, r7, #24
 800331c:	4619      	mov	r1, r3
 800331e:	489f      	ldr	r0, [pc, #636]	@ (800359c <validate_and_process_command+0x340>)
 8003320:	f00d fed8 	bl	80110d4 <iprintf>

    printf("Otrzymany HMAC (hex): ");
 8003324:	489e      	ldr	r0, [pc, #632]	@ (80035a0 <validate_and_process_command+0x344>)
 8003326:	f00d fed5 	bl	80110d4 <iprintf>
    btox(buffer, received_hmac, CMOX_SHA256_SIZE);
 800332a:	f507 71dc 	add.w	r1, r7, #440	@ 0x1b8
 800332e:	f107 0318 	add.w	r3, r7, #24
 8003332:	2220      	movs	r2, #32
 8003334:	4618      	mov	r0, r3
 8003336:	f7ff ff51 	bl	80031dc <btox>
    printf("%s\n\r", buffer);
 800333a:	f107 0318 	add.w	r3, r7, #24
 800333e:	4619      	mov	r1, r3
 8003340:	4896      	ldr	r0, [pc, #600]	@ (800359c <validate_and_process_command+0x340>)
 8003342:	f00d fec7 	bl	80110d4 <iprintf>

    /* Inicjalizuj bibliotekę kryptograficzną */
    if (cmox_initialize(NULL) != CMOX_INIT_SUCCESS)
 8003346:	2000      	movs	r0, #0
 8003348:	f7fd f8c6 	bl	80004d8 <cmox_initialize>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d001      	beq.n	8003356 <validate_and_process_command+0xfa>
        Error_Handler();
 8003352:	f000 fe07 	bl	8003f64 <Error_Handler>

    /* 1. Obliczenie HMAC i porównanie z otrzymanym - używając osobnego klucza HMAC */
    printf("\n\r>> Weryfikacja HMAC <<\n\r");
 8003356:	4893      	ldr	r0, [pc, #588]	@ (80035a4 <validate_and_process_command+0x348>)
 8003358:	f00d febc 	bl	80110d4 <iprintf>

    /* Użyj funkcji cmox_mac_compute z kluczem HMAC */
    mac_retval = cmox_mac_compute(CMOX_HMAC_SHA256_ALGO,            /* Algorytm HMAC-SHA256 */
 800335c:	4b92      	ldr	r3, [pc, #584]	@ (80035a8 <validate_and_process_command+0x34c>)
 800335e:	6818      	ldr	r0, [r3, #0]
 8003360:	f507 71ec 	add.w	r1, r7, #472	@ 0x1d8
 8003364:	f107 0314 	add.w	r3, r7, #20
 8003368:	9305      	str	r3, [sp, #20]
 800336a:	2320      	movs	r3, #32
 800336c:	9304      	str	r3, [sp, #16]
 800336e:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8003372:	9303      	str	r3, [sp, #12]
 8003374:	2300      	movs	r3, #0
 8003376:	9302      	str	r3, [sp, #8]
 8003378:	2300      	movs	r3, #0
 800337a:	9301      	str	r3, [sp, #4]
 800337c:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8003380:	9300      	str	r3, [sp, #0]
 8003382:	f8d7 3280 	ldr.w	r3, [r7, #640]	@ 0x280
 8003386:	f8d7 2268 	ldr.w	r2, [r7, #616]	@ 0x268
 800338a:	f7fd f941 	bl	8000610 <cmox_mac_compute>
 800338e:	f8c7 0264 	str.w	r0, [r7, #612]	@ 0x264
                              hmac_key, hmac_key_size,               /* Klucz HMAC */
                              NULL, 0,                               /* Brak danych niestandardowych */
                              computed_hmac, CMOX_SHA256_SIZE, &computed_hmac_size);  /* Bufor na podpis HMAC */

    /* Sprawdź czy obliczenie HMAC się powiodło */
    if (mac_retval != CMOX_MAC_SUCCESS)
 8003392:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 8003396:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800339a:	d001      	beq.n	80033a0 <validate_and_process_command+0x144>
        Error_Handler();
 800339c:	f000 fde2 	bl	8003f64 <Error_Handler>

    /* Wydrukuj obliczony HMAC */
    printf("Obliczony HMAC (hex): ");
 80033a0:	4882      	ldr	r0, [pc, #520]	@ (80035ac <validate_and_process_command+0x350>)
 80033a2:	f00d fe97 	bl	80110d4 <iprintf>
    btox(buffer, computed_hmac, computed_hmac_size);
 80033a6:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80033aa:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	461a      	mov	r2, r3
 80033b2:	f507 71cc 	add.w	r1, r7, #408	@ 0x198
 80033b6:	f107 0318 	add.w	r3, r7, #24
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7ff ff0e 	bl	80031dc <btox>
    printf("%s\n\r", buffer);
 80033c0:	f107 0318 	add.w	r3, r7, #24
 80033c4:	4619      	mov	r1, r3
 80033c6:	4875      	ldr	r0, [pc, #468]	@ (800359c <validate_and_process_command+0x340>)
 80033c8:	f00d fe84 	bl	80110d4 <iprintf>

    /* Porównaj otrzymany HMAC z obliczonym */
    if (memcmp(received_hmac, computed_hmac, CMOX_SHA256_SIZE) != 0) {
 80033cc:	f507 71cc 	add.w	r1, r7, #408	@ 0x198
 80033d0:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80033d4:	2220      	movs	r2, #32
 80033d6:	4618      	mov	r0, r3
 80033d8:	f00d ffe6 	bl	80113a8 <memcmp>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d006      	beq.n	80033f0 <validate_and_process_command+0x194>
        printf("Błąd: Podpis HMAC nie zgadza się! Możliwa manipulacja danymi.\n\r");
 80033e2:	4873      	ldr	r0, [pc, #460]	@ (80035b0 <validate_and_process_command+0x354>)
 80033e4:	f00d fe76 	bl	80110d4 <iprintf>
        result = 0;  // Błąd weryfikacji HMAC
 80033e8:	2300      	movs	r3, #0
 80033ea:	f887 326f 	strb.w	r3, [r7, #623]	@ 0x26f
 80033ee:	e0c0      	b.n	8003572 <validate_and_process_command+0x316>
    } else {
        printf("Weryfikacja HMAC poprawna.\n\r");
 80033f0:	4870      	ldr	r0, [pc, #448]	@ (80035b4 <validate_and_process_command+0x358>)
 80033f2:	f00d fe6f 	bl	80110d4 <iprintf>

        /* 2. Deszyfrowanie ramki przy użyciu klucza AES */
        printf("\n\r>> Deszyfrowanie ramki <<\n\r");
 80033f6:	4870      	ldr	r0, [pc, #448]	@ (80035b8 <validate_and_process_command+0x35c>)
 80033f8:	f00d fe6c 	bl	80110d4 <iprintf>

        cipher_retval = cmox_cipher_decrypt(CMOX_AESFAST_CTR_DEC_ALGO,   /* Algorytm AES-CTR */
 80033fc:	4b6f      	ldr	r3, [pc, #444]	@ (80035bc <validate_and_process_command+0x360>)
 80033fe:	6818      	ldr	r0, [r3, #0]
 8003400:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8003404:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 8003408:	f507 71ec 	add.w	r1, r7, #472	@ 0x1d8
 800340c:	f507 7216 	add.w	r2, r7, #600	@ 0x258
 8003410:	9204      	str	r2, [sp, #16]
 8003412:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8003416:	9203      	str	r2, [sp, #12]
 8003418:	f8d7 228c 	ldr.w	r2, [r7, #652]	@ 0x28c
 800341c:	9202      	str	r2, [sp, #8]
 800341e:	f8d7 2288 	ldr.w	r2, [r7, #648]	@ 0x288
 8003422:	9201      	str	r2, [sp, #4]
 8003424:	f507 721c 	add.w	r2, r7, #624	@ 0x270
 8003428:	f5a2 721c 	sub.w	r2, r2, #624	@ 0x270
 800342c:	6812      	ldr	r2, [r2, #0]
 800342e:	9200      	str	r2, [sp, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f8d7 2268 	ldr.w	r2, [r7, #616]	@ 0x268
 8003436:	f7fc ff4b 	bl	80002d0 <cmox_cipher_decrypt>
 800343a:	f8c7 0260 	str.w	r0, [r7, #608]	@ 0x260
                                  aes_key, aes_key_size,                  /* Klucz AES */
                                  iv, iv_size,                            /* Wektor inicjalizacyjny */
                                  decrypted_frame, &computed_size);       /* Bufor na odszyfrowane dane */

        /* Sprawdź czy deszyfrowanie się powiodło */
        if (cipher_retval != CMOX_CIPHER_SUCCESS) {
 800343e:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 8003442:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003446:	d006      	beq.n	8003456 <validate_and_process_command+0x1fa>
            printf("Błąd: Deszyfrowanie nie powiodło się!\n\r");
 8003448:	485d      	ldr	r0, [pc, #372]	@ (80035c0 <validate_and_process_command+0x364>)
 800344a:	f00d fe43 	bl	80110d4 <iprintf>
            result = 0;  // Błąd deszyfrowania
 800344e:	2300      	movs	r3, #0
 8003450:	f887 326f 	strb.w	r3, [r7, #623]	@ 0x26f
 8003454:	e08d      	b.n	8003572 <validate_and_process_command+0x316>
        } else {
            /* Zapewnij null-terminator dla bezpiecznego wydruku */
            decrypted_frame[computed_size] = '\0';
 8003456:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 800345a:	f507 721c 	add.w	r2, r7, #624	@ 0x270
 800345e:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003462:	2100      	movs	r1, #0
 8003464:	54d1      	strb	r1, [r2, r3]

            printf("Odszyfrowana ramka (hex): ");
 8003466:	4857      	ldr	r0, [pc, #348]	@ (80035c4 <validate_and_process_command+0x368>)
 8003468:	f00d fe34 	bl	80110d4 <iprintf>
            btox(buffer, decrypted_frame, computed_size);
 800346c:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8003470:	461a      	mov	r2, r3
 8003472:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8003476:	f107 0318 	add.w	r3, r7, #24
 800347a:	4618      	mov	r0, r3
 800347c:	f7ff feae 	bl	80031dc <btox>
            printf("%s\n\r", buffer);
 8003480:	f107 0318 	add.w	r3, r7, #24
 8003484:	4619      	mov	r1, r3
 8003486:	4845      	ldr	r0, [pc, #276]	@ (800359c <validate_and_process_command+0x340>)
 8003488:	f00d fe24 	bl	80110d4 <iprintf>

            /* 3. Analiza odszyfrowanej ramki */
            printf("\n\r>> Analiza odszyfrowanej ramki <<\n\r");
 800348c:	484e      	ldr	r0, [pc, #312]	@ (80035c8 <validate_and_process_command+0x36c>)
 800348e:	f00d fe21 	bl	80110d4 <iprintf>

            /* Sprawdź czy rozmiar ramki jest wystarczający */
            if (computed_size < 16) {  // co najmniej 8+8 bajtów na ID i licznik
 8003492:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8003496:	2b0f      	cmp	r3, #15
 8003498:	d806      	bhi.n	80034a8 <validate_and_process_command+0x24c>
                printf("Błąd: Odszyfrowana ramka jest zbyt mała!\n\r");
 800349a:	484c      	ldr	r0, [pc, #304]	@ (80035cc <validate_and_process_command+0x370>)
 800349c:	f00d fe1a 	bl	80110d4 <iprintf>
                result = 0;  // Błąd rozmiaru ramki
 80034a0:	2300      	movs	r3, #0
 80034a2:	f887 326f 	strb.w	r3, [r7, #623]	@ 0x26f
 80034a6:	e064      	b.n	8003572 <validate_and_process_command+0x316>
            } else {
                /* Pobierz ID pilota (8 bajtów) */
                memcpy(output_pilot_id, decrypted_frame, PILOT_ID_LENGTH);
 80034a8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80034ac:	2208      	movs	r2, #8
 80034ae:	4619      	mov	r1, r3
 80034b0:	f8d7 0290 	ldr.w	r0, [r7, #656]	@ 0x290
 80034b4:	f00e f81a 	bl	80114ec <memcpy>
                printf("- ID pilota (8B): ");
 80034b8:	4845      	ldr	r0, [pc, #276]	@ (80035d0 <validate_and_process_command+0x374>)
 80034ba:	f00d fe0b 	bl	80110d4 <iprintf>
                btox(buffer, output_pilot_id, PILOT_ID_LENGTH);
 80034be:	f107 0318 	add.w	r3, r7, #24
 80034c2:	2208      	movs	r2, #8
 80034c4:	f8d7 1290 	ldr.w	r1, [r7, #656]	@ 0x290
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7ff fe87 	bl	80031dc <btox>
                printf("%s\n\r", buffer);
 80034ce:	f107 0318 	add.w	r3, r7, #24
 80034d2:	4619      	mov	r1, r3
 80034d4:	4831      	ldr	r0, [pc, #196]	@ (800359c <validate_and_process_command+0x340>)
 80034d6:	f00d fdfd 	bl	80110d4 <iprintf>

                /* Pobierz licznik (8 bajtów) */
                memcpy(output_counter, decrypted_frame + PILOT_ID_LENGTH, 8);
 80034da:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80034de:	3308      	adds	r3, #8
 80034e0:	2208      	movs	r2, #8
 80034e2:	4619      	mov	r1, r3
 80034e4:	f8d7 0294 	ldr.w	r0, [r7, #660]	@ 0x294
 80034e8:	f00e f800 	bl	80114ec <memcpy>
                printf("- Licznik (8B): ");
 80034ec:	4839      	ldr	r0, [pc, #228]	@ (80035d4 <validate_and_process_command+0x378>)
 80034ee:	f00d fdf1 	bl	80110d4 <iprintf>
                btox(buffer, output_counter, 8);
 80034f2:	f107 0318 	add.w	r3, r7, #24
 80034f6:	2208      	movs	r2, #8
 80034f8:	f8d7 1294 	ldr.w	r1, [r7, #660]	@ 0x294
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7ff fe6d 	bl	80031dc <btox>
                printf("%s\n\r", buffer);
 8003502:	f107 0318 	add.w	r3, r7, #24
 8003506:	4619      	mov	r1, r3
 8003508:	4824      	ldr	r0, [pc, #144]	@ (800359c <validate_and_process_command+0x340>)
 800350a:	f00d fde3 	bl	80110d4 <iprintf>

                /* Pobierz komendę (reszta danych) */
                size_t command_size = computed_size - 16;  // 16 bajtów to ID + licznik
 800350e:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8003512:	3b10      	subs	r3, #16
 8003514:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
                if (command_size > 0) {
 8003518:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 800351c:	2b00      	cmp	r3, #0
 800351e:	d01e      	beq.n	800355e <validate_and_process_command+0x302>
                    memcpy(output_command, decrypted_frame + 16, command_size);
 8003520:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003524:	3310      	adds	r3, #16
 8003526:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 800352a:	4619      	mov	r1, r3
 800352c:	f8d7 0298 	ldr.w	r0, [r7, #664]	@ 0x298
 8003530:	f00d ffdc 	bl	80114ec <memcpy>
                    output_command[command_size] = '\0';  // Dodaj null-terminator dla bezpiecznego wydruku
 8003534:	f8d7 2298 	ldr.w	r2, [r7, #664]	@ 0x298
 8003538:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 800353c:	4413      	add	r3, r2
 800353e:	2200      	movs	r2, #0
 8003540:	701a      	strb	r2, [r3, #0]
                    *output_command_size = command_size;
 8003542:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8003546:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 800354a:	601a      	str	r2, [r3, #0]

                    printf("- Komenda: %s\n\r", output_command);
 800354c:	f8d7 1298 	ldr.w	r1, [r7, #664]	@ 0x298
 8003550:	4821      	ldr	r0, [pc, #132]	@ (80035d8 <validate_and_process_command+0x37c>)
 8003552:	f00d fdbf 	bl	80110d4 <iprintf>
                    result = 1;  // Wszystko OK
 8003556:	2301      	movs	r3, #1
 8003558:	f887 326f 	strb.w	r3, [r7, #623]	@ 0x26f
 800355c:	e009      	b.n	8003572 <validate_and_process_command+0x316>
                } else {
                    printf("Ostrzeżenie: Brak komendy w ramce!\n\r");
 800355e:	481f      	ldr	r0, [pc, #124]	@ (80035dc <validate_and_process_command+0x380>)
 8003560:	f00d fdb8 	bl	80110d4 <iprintf>
                    *output_command_size = 0;
 8003564:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8003568:	2200      	movs	r2, #0
 800356a:	601a      	str	r2, [r3, #0]
                    result = 0;  // Brak komendy
 800356c:	2300      	movs	r3, #0
 800356e:	f887 326f 	strb.w	r3, [r7, #623]	@ 0x26f
            }
        }
    }

    /* Zwolnij zasoby biblioteki kryptograficznej */
    if (cmox_finalize(NULL) != CMOX_INIT_SUCCESS)
 8003572:	2000      	movs	r0, #0
 8003574:	f7fc ffc0 	bl	80004f8 <cmox_finalize>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d001      	beq.n	8003582 <validate_and_process_command+0x326>
        Error_Handler();
 800357e:	f000 fcf1 	bl	8003f64 <Error_Handler>

    return result;
 8003582:	f897 326f 	ldrb.w	r3, [r7, #623]	@ 0x26f
}
 8003586:	4618      	mov	r0, r3
 8003588:	f507 771c 	add.w	r7, r7, #624	@ 0x270
 800358c:	46bd      	mov	sp, r7
 800358e:	bdb0      	pop	{r4, r5, r7, pc}
 8003590:	080157b0 	.word	0x080157b0
 8003594:	080157ec 	.word	0x080157ec
 8003598:	08015814 	.word	0x08015814
 800359c:	0801583c 	.word	0x0801583c
 80035a0:	08015844 	.word	0x08015844
 80035a4:	0801585c 	.word	0x0801585c
 80035a8:	080161d8 	.word	0x080161d8
 80035ac:	08015878 	.word	0x08015878
 80035b0:	08015890 	.word	0x08015890
 80035b4:	080158d4 	.word	0x080158d4
 80035b8:	080158f4 	.word	0x080158f4
 80035bc:	080161cc 	.word	0x080161cc
 80035c0:	08015914 	.word	0x08015914
 80035c4:	08015940 	.word	0x08015940
 80035c8:	0801595c 	.word	0x0801595c
 80035cc:	08015984 	.word	0x08015984
 80035d0:	080159b4 	.word	0x080159b4
 80035d4:	080159c8 	.word	0x080159c8
 80035d8:	080159dc 	.word	0x080159dc
 80035dc:	080159ec 	.word	0x080159ec

080035e0 <create_secure_command_frame>:
void create_secure_command_frame(const uint8_t *pilot_id, const uint8_t *counter,
                               const uint8_t *aes_key, size_t aes_key_size,
                               const uint8_t *hmac_key, size_t hmac_key_size,
                               const uint8_t *iv, size_t iv_size,
                               uint8_t *output, size_t *output_size)
{
 80035e0:	b590      	push	{r4, r7, lr}
 80035e2:	f5ad 7d1d 	sub.w	sp, sp, #628	@ 0x274
 80035e6:	af06      	add	r7, sp, #24
 80035e8:	f507 7416 	add.w	r4, r7, #600	@ 0x258
 80035ec:	f5a4 7413 	sub.w	r4, r4, #588	@ 0x24c
 80035f0:	6020      	str	r0, [r4, #0]
 80035f2:	f507 7016 	add.w	r0, r7, #600	@ 0x258
 80035f6:	f5a0 7014 	sub.w	r0, r0, #592	@ 0x250
 80035fa:	6001      	str	r1, [r0, #0]
 80035fc:	f507 7116 	add.w	r1, r7, #600	@ 0x258
 8003600:	f5a1 7115 	sub.w	r1, r1, #596	@ 0x254
 8003604:	600a      	str	r2, [r1, #0]
 8003606:	f507 7216 	add.w	r2, r7, #600	@ 0x258
 800360a:	f5a2 7216 	sub.w	r2, r2, #600	@ 0x258
 800360e:	6013      	str	r3, [r2, #0]
    cmox_mac_retval_t mac_retval;
    size_t computed_size;
    size_t mac_size;

    /* Stałe dla komendy */
    const uint8_t command[] = "eszp_open";
 8003610:	4aa3      	ldr	r2, [pc, #652]	@ (80038a0 <create_secure_command_frame+0x2c0>)
 8003612:	f507 730d 	add.w	r3, r7, #564	@ 0x234
 8003616:	ca07      	ldmia	r2, {r0, r1, r2}
 8003618:	c303      	stmia	r3!, {r0, r1}
 800361a:	801a      	strh	r2, [r3, #0]
    uint8_t encrypted_frame[MAX_FRAME_SIZE];         // Bufor na zaszyfrowaną ramkę
    uint8_t hmac[CMOX_SHA256_SIZE];                  // Bufor na podpis HMAC
    uint8_t buffer[MAX_FRAME_SIZE*2];                // Bufor pomocniczy na wydruk hex

    /* Utwórz ramkę danych: [pilot_id (8B) | counter (8B) | command (zmienna długość)] */
    size_t frame_size = 0;
 800361c:	2300      	movs	r3, #0
 800361e:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254

    /* Skopiuj ID pilota (8 bajtów) */
    memcpy(frame, pilot_id, PILOT_ID_LENGTH);
 8003622:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003626:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800362a:	f507 70da 	add.w	r0, r7, #436	@ 0x1b4
 800362e:	2208      	movs	r2, #8
 8003630:	6819      	ldr	r1, [r3, #0]
 8003632:	f00d ff5b 	bl	80114ec <memcpy>
    frame_size += PILOT_ID_LENGTH;
 8003636:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800363a:	3308      	adds	r3, #8
 800363c:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254

    /* Skopiuj licznik (8 bajtów) */
    memcpy(frame + frame_size, counter, 8);
 8003640:	f507 72da 	add.w	r2, r7, #436	@ 0x1b4
 8003644:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8003648:	18d0      	adds	r0, r2, r3
 800364a:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800364e:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8003652:	2208      	movs	r2, #8
 8003654:	6819      	ldr	r1, [r3, #0]
 8003656:	f00d ff49 	bl	80114ec <memcpy>
    frame_size += 8;
 800365a:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800365e:	3308      	adds	r3, #8
 8003660:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254

    /* Skopiuj komendę */
    memcpy(frame + frame_size, command, strlen((char*)command));
 8003664:	f507 72da 	add.w	r2, r7, #436	@ 0x1b4
 8003668:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800366c:	4413      	add	r3, r2
 800366e:	f507 710d 	add.w	r1, r7, #564	@ 0x234
 8003672:	2209      	movs	r2, #9
 8003674:	4618      	mov	r0, r3
 8003676:	f00d ff39 	bl	80114ec <memcpy>
    frame_size += strlen((char*)command);
 800367a:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800367e:	3309      	adds	r3, #9
 8003680:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254

    printf("\n\r===== Tworzenie bezpiecznej ramki danych =====\n\r");
 8003684:	4887      	ldr	r0, [pc, #540]	@ (80038a4 <create_secure_command_frame+0x2c4>)
 8003686:	f00d fd25 	bl	80110d4 <iprintf>

    /* Wyświetl utworzoną ramkę */
    printf("Ramka danych:\n\r");
 800368a:	4887      	ldr	r0, [pc, #540]	@ (80038a8 <create_secure_command_frame+0x2c8>)
 800368c:	f00d fd22 	bl	80110d4 <iprintf>
    printf("- ID pilota (8B): ");
 8003690:	4886      	ldr	r0, [pc, #536]	@ (80038ac <create_secure_command_frame+0x2cc>)
 8003692:	f00d fd1f 	bl	80110d4 <iprintf>
    btox(buffer, pilot_id, PILOT_ID_LENGTH);
 8003696:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800369a:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800369e:	f107 0014 	add.w	r0, r7, #20
 80036a2:	2208      	movs	r2, #8
 80036a4:	6819      	ldr	r1, [r3, #0]
 80036a6:	f7ff fd99 	bl	80031dc <btox>
    printf("%s\n\r", buffer);
 80036aa:	f107 0314 	add.w	r3, r7, #20
 80036ae:	4619      	mov	r1, r3
 80036b0:	487f      	ldr	r0, [pc, #508]	@ (80038b0 <create_secure_command_frame+0x2d0>)
 80036b2:	f00d fd0f 	bl	80110d4 <iprintf>

    printf("- Licznik (8B): ");
 80036b6:	487f      	ldr	r0, [pc, #508]	@ (80038b4 <create_secure_command_frame+0x2d4>)
 80036b8:	f00d fd0c 	bl	80110d4 <iprintf>
    btox(buffer, counter, 8);
 80036bc:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80036c0:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 80036c4:	f107 0014 	add.w	r0, r7, #20
 80036c8:	2208      	movs	r2, #8
 80036ca:	6819      	ldr	r1, [r3, #0]
 80036cc:	f7ff fd86 	bl	80031dc <btox>
    printf("%s\n\r", buffer);
 80036d0:	f107 0314 	add.w	r3, r7, #20
 80036d4:	4619      	mov	r1, r3
 80036d6:	4876      	ldr	r0, [pc, #472]	@ (80038b0 <create_secure_command_frame+0x2d0>)
 80036d8:	f00d fcfc 	bl	80110d4 <iprintf>

    printf("- Komenda: %s\n\r", command);
 80036dc:	f507 730d 	add.w	r3, r7, #564	@ 0x234
 80036e0:	4619      	mov	r1, r3
 80036e2:	4875      	ldr	r0, [pc, #468]	@ (80038b8 <create_secure_command_frame+0x2d8>)
 80036e4:	f00d fcf6 	bl	80110d4 <iprintf>

    printf("Pełna ramka (hex): ");
 80036e8:	4874      	ldr	r0, [pc, #464]	@ (80038bc <create_secure_command_frame+0x2dc>)
 80036ea:	f00d fcf3 	bl	80110d4 <iprintf>
    btox(buffer, frame, frame_size);
 80036ee:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 80036f2:	f507 71da 	add.w	r1, r7, #436	@ 0x1b4
 80036f6:	f107 0314 	add.w	r3, r7, #20
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7ff fd6e 	bl	80031dc <btox>
    printf("%s\n\r", buffer);
 8003700:	f107 0314 	add.w	r3, r7, #20
 8003704:	4619      	mov	r1, r3
 8003706:	486a      	ldr	r0, [pc, #424]	@ (80038b0 <create_secure_command_frame+0x2d0>)
 8003708:	f00d fce4 	bl	80110d4 <iprintf>

    /* Inicjalizuj bibliotekę kryptograficzną */
    if (cmox_initialize(NULL) != CMOX_INIT_SUCCESS)
 800370c:	2000      	movs	r0, #0
 800370e:	f7fc fee3 	bl	80004d8 <cmox_initialize>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d001      	beq.n	800371c <create_secure_command_frame+0x13c>
        Error_Handler();
 8003718:	f000 fc24 	bl	8003f64 <Error_Handler>

    /* 1. Szyfrowanie ramki za pomocą AES-CTR */
    printf("\n\r>> Szyfrowanie ramki danych <<\n\r");
 800371c:	4868      	ldr	r0, [pc, #416]	@ (80038c0 <create_secure_command_frame+0x2e0>)
 800371e:	f00d fcd9 	bl	80110d4 <iprintf>

    cipher_retval = cmox_cipher_encrypt(CMOX_AESFAST_CTR_ENC_ALGO,    /* Algorytm AES-CTR */
 8003722:	4b68      	ldr	r3, [pc, #416]	@ (80038c4 <create_secure_command_frame+0x2e4>)
 8003724:	6818      	ldr	r0, [r3, #0]
 8003726:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800372a:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 800372e:	f507 71da 	add.w	r1, r7, #436	@ 0x1b4
 8003732:	f507 7211 	add.w	r2, r7, #580	@ 0x244
 8003736:	9204      	str	r2, [sp, #16]
 8003738:	f507 729a 	add.w	r2, r7, #308	@ 0x134
 800373c:	9203      	str	r2, [sp, #12]
 800373e:	f8d7 2274 	ldr.w	r2, [r7, #628]	@ 0x274
 8003742:	9202      	str	r2, [sp, #8]
 8003744:	f8d7 2270 	ldr.w	r2, [r7, #624]	@ 0x270
 8003748:	9201      	str	r2, [sp, #4]
 800374a:	f507 7216 	add.w	r2, r7, #600	@ 0x258
 800374e:	f5a2 7216 	sub.w	r2, r2, #600	@ 0x258
 8003752:	6812      	ldr	r2, [r2, #0]
 8003754:	9200      	str	r2, [sp, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 800375c:	f7fc fd8c 	bl	8000278 <cmox_cipher_encrypt>
 8003760:	f8c7 0250 	str.w	r0, [r7, #592]	@ 0x250
                               aes_key, aes_key_size,                  /* Klucz AES */
                               iv, iv_size,                            /* Wektor inicjalizacyjny */
                               encrypted_frame, &computed_size);       /* Bufor na zaszyfrowane dane */

    /* Sprawdź czy szyfrowanie się powiodło */
    if (cipher_retval != CMOX_CIPHER_SUCCESS)
 8003764:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8003768:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800376c:	d001      	beq.n	8003772 <create_secure_command_frame+0x192>
        Error_Handler();
 800376e:	f000 fbf9 	bl	8003f64 <Error_Handler>

    printf("Zaszyfrowana ramka (hex): ");
 8003772:	4855      	ldr	r0, [pc, #340]	@ (80038c8 <create_secure_command_frame+0x2e8>)
 8003774:	f00d fcae 	bl	80110d4 <iprintf>
    btox(buffer, encrypted_frame, computed_size);
 8003778:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 800377c:	461a      	mov	r2, r3
 800377e:	f507 719a 	add.w	r1, r7, #308	@ 0x134
 8003782:	f107 0314 	add.w	r3, r7, #20
 8003786:	4618      	mov	r0, r3
 8003788:	f7ff fd28 	bl	80031dc <btox>
    printf("%s\n\r", buffer);
 800378c:	f107 0314 	add.w	r3, r7, #20
 8003790:	4619      	mov	r1, r3
 8003792:	4847      	ldr	r0, [pc, #284]	@ (80038b0 <create_secure_command_frame+0x2d0>)
 8003794:	f00d fc9e 	bl	80110d4 <iprintf>

    /* 2. Obliczenie podpisu HMAC - używając osobnego klucza do HMAC */
    printf("\n\r>> Obliczanie podpisu HMAC <<\n\r");
 8003798:	484c      	ldr	r0, [pc, #304]	@ (80038cc <create_secure_command_frame+0x2ec>)
 800379a:	f00d fc9b 	bl	80110d4 <iprintf>

    /* Użyj funkcji cmox_mac_compute z kluczem HMAC */
    mac_retval = cmox_mac_compute(CMOX_HMAC_SHA256_ALGO,            /* Algorytm HMAC-SHA256 */
 800379e:	4b4c      	ldr	r3, [pc, #304]	@ (80038d0 <create_secure_command_frame+0x2f0>)
 80037a0:	6818      	ldr	r0, [r3, #0]
 80037a2:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 80037a6:	f507 719a 	add.w	r1, r7, #308	@ 0x134
 80037aa:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80037ae:	9305      	str	r3, [sp, #20]
 80037b0:	2320      	movs	r3, #32
 80037b2:	9304      	str	r3, [sp, #16]
 80037b4:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 80037b8:	9303      	str	r3, [sp, #12]
 80037ba:	2300      	movs	r3, #0
 80037bc:	9302      	str	r3, [sp, #8]
 80037be:	2300      	movs	r3, #0
 80037c0:	9301      	str	r3, [sp, #4]
 80037c2:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 80037c6:	9300      	str	r3, [sp, #0]
 80037c8:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 80037cc:	f7fc ff20 	bl	8000610 <cmox_mac_compute>
 80037d0:	f8c7 024c 	str.w	r0, [r7, #588]	@ 0x24c
                              hmac_key, hmac_key_size,               /* Klucz HMAC */
                              NULL, 0,                               /* Brak danych niestandardowych */
                              hmac, CMOX_SHA256_SIZE, &mac_size);    /* Bufor na podpis HMAC */

    /* Sprawdź czy obliczenie HMAC się powiodło */
    if (mac_retval != CMOX_MAC_SUCCESS)
 80037d4:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 80037d8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80037dc:	d001      	beq.n	80037e2 <create_secure_command_frame+0x202>
        Error_Handler();
 80037de:	f000 fbc1 	bl	8003f64 <Error_Handler>

    printf("Podpis HMAC (hex): ");
 80037e2:	483c      	ldr	r0, [pc, #240]	@ (80038d4 <create_secure_command_frame+0x2f4>)
 80037e4:	f00d fc76 	bl	80110d4 <iprintf>
    btox(buffer, hmac, mac_size);
 80037e8:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 80037ec:	461a      	mov	r2, r3
 80037ee:	f507 718a 	add.w	r1, r7, #276	@ 0x114
 80037f2:	f107 0314 	add.w	r3, r7, #20
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7ff fcf0 	bl	80031dc <btox>
    printf("%s\n\r", buffer);
 80037fc:	f107 0314 	add.w	r3, r7, #20
 8003800:	4619      	mov	r1, r3
 8003802:	482b      	ldr	r0, [pc, #172]	@ (80038b0 <create_secure_command_frame+0x2d0>)
 8003804:	f00d fc66 	bl	80110d4 <iprintf>

    /* 3. Kompletna zaszyfrowana wiadomość do wysłania: [encrypted_frame | hmac] */
    printf("\n\r>> Przygotowanie kompletnej ramki danych <<\n\r");
 8003808:	4833      	ldr	r0, [pc, #204]	@ (80038d8 <create_secure_command_frame+0x2f8>)
 800380a:	f00d fc63 	bl	80110d4 <iprintf>

    /* Skopiuj zaszyfrowaną ramkę */
    memcpy(output, encrypted_frame, computed_size);
 800380e:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 8003812:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8003816:	4619      	mov	r1, r3
 8003818:	f8d7 0278 	ldr.w	r0, [r7, #632]	@ 0x278
 800381c:	f00d fe66 	bl	80114ec <memcpy>
    size_t output_frame_size = computed_size;
 8003820:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8003824:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248

    /* Skopiuj podpis HMAC */
    memcpy(output + output_frame_size, hmac, mac_size);
 8003828:	f8d7 2278 	ldr.w	r2, [r7, #632]	@ 0x278
 800382c:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8003830:	4413      	add	r3, r2
 8003832:	f8d7 2240 	ldr.w	r2, [r7, #576]	@ 0x240
 8003836:	f507 718a 	add.w	r1, r7, #276	@ 0x114
 800383a:	4618      	mov	r0, r3
 800383c:	f00d fe56 	bl	80114ec <memcpy>
    output_frame_size += mac_size;
 8003840:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 8003844:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 8003848:	4413      	add	r3, r2
 800384a:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248

    /* Ustaw rozmiar wyjściowy */
    *output_size = output_frame_size;
 800384e:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8003852:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 8003856:	601a      	str	r2, [r3, #0]

    printf("Kompletna ramka do wysyłki (hex): ");
 8003858:	4820      	ldr	r0, [pc, #128]	@ (80038dc <create_secure_command_frame+0x2fc>)
 800385a:	f00d fc3b 	bl	80110d4 <iprintf>
    btox(buffer, output, output_frame_size);
 800385e:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 8003862:	f107 0314 	add.w	r3, r7, #20
 8003866:	f8d7 1278 	ldr.w	r1, [r7, #632]	@ 0x278
 800386a:	4618      	mov	r0, r3
 800386c:	f7ff fcb6 	bl	80031dc <btox>
    printf("%s\n\r", buffer);
 8003870:	f107 0314 	add.w	r3, r7, #20
 8003874:	4619      	mov	r1, r3
 8003876:	480e      	ldr	r0, [pc, #56]	@ (80038b0 <create_secure_command_frame+0x2d0>)
 8003878:	f00d fc2c 	bl	80110d4 <iprintf>
    printf("Całkowity rozmiar ramki: %u bajtów\n\r", (unsigned int)output_frame_size);
 800387c:	f8d7 1248 	ldr.w	r1, [r7, #584]	@ 0x248
 8003880:	4817      	ldr	r0, [pc, #92]	@ (80038e0 <create_secure_command_frame+0x300>)
 8003882:	f00d fc27 	bl	80110d4 <iprintf>

    /* Zwolnij zasoby biblioteki kryptograficznej */
    if (cmox_finalize(NULL) != CMOX_INIT_SUCCESS)
 8003886:	2000      	movs	r0, #0
 8003888:	f7fc fe36 	bl	80004f8 <cmox_finalize>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d001      	beq.n	8003896 <create_secure_command_frame+0x2b6>
        Error_Handler();
 8003892:	f000 fb67 	bl	8003f64 <Error_Handler>
}
 8003896:	bf00      	nop
 8003898:	f507 7717 	add.w	r7, r7, #604	@ 0x25c
 800389c:	46bd      	mov	sp, r7
 800389e:	bd90      	pop	{r4, r7, pc}
 80038a0:	08015b64 	.word	0x08015b64
 80038a4:	08015a14 	.word	0x08015a14
 80038a8:	08015a48 	.word	0x08015a48
 80038ac:	080159b4 	.word	0x080159b4
 80038b0:	0801583c 	.word	0x0801583c
 80038b4:	080159c8 	.word	0x080159c8
 80038b8:	080159dc 	.word	0x080159dc
 80038bc:	08015a58 	.word	0x08015a58
 80038c0:	08015a70 	.word	0x08015a70
 80038c4:	080161c8 	.word	0x080161c8
 80038c8:	08015a94 	.word	0x08015a94
 80038cc:	08015ab0 	.word	0x08015ab0
 80038d0:	080161d8 	.word	0x080161d8
 80038d4:	08015ad4 	.word	0x08015ad4
 80038d8:	08015ae8 	.word	0x08015ae8
 80038dc:	08015b18 	.word	0x08015b18
 80038e0:	08015b3c 	.word	0x08015b3c

080038e4 <__io_putchar>:

UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */
int __io_putchar(int ch)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
	if (ch == '\n') {
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2b0a      	cmp	r3, #10
 80038f0:	d109      	bne.n	8003906 <__io_putchar+0x22>
		uint8_t ch2 = '\r';
 80038f2:	230d      	movs	r3, #13
 80038f4:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart1, &ch2, 1, HAL_MAX_DELAY);
 80038f6:	f107 010f 	add.w	r1, r7, #15
 80038fa:	f04f 33ff 	mov.w	r3, #4294967295
 80038fe:	2201      	movs	r2, #1
 8003900:	4807      	ldr	r0, [pc, #28]	@ (8003920 <__io_putchar+0x3c>)
 8003902:	f008 f8dd 	bl	800bac0 <HAL_UART_Transmit>
	}

	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8003906:	1d39      	adds	r1, r7, #4
 8003908:	f04f 33ff 	mov.w	r3, #4294967295
 800390c:	2201      	movs	r2, #1
 800390e:	4804      	ldr	r0, [pc, #16]	@ (8003920 <__io_putchar+0x3c>)
 8003910:	f008 f8d6 	bl	800bac0 <HAL_UART_Transmit>
	return 1;
 8003914:	2301      	movs	r3, #1
}
 8003916:	4618      	mov	r0, r3
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	200003c4 	.word	0x200003c4

08003924 <HAL_GPIO_EXTI_Falling_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile uint8_t buttonPressed = 0; // Flaga sygnalizująca naciśnięcie
volatile bool transmission_in_progress = false; // Flaga blokująca kolejne przerwania
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	4603      	mov	r3, r0
 800392c:	80fb      	strh	r3, [r7, #6]
    // Sprawdź czy to właściwy pin ORAZ czy transmisja nie jest już w toku
    if(GPIO_Pin == BUTTON_TRANSMIT_Pin && !transmission_in_progress)
 800392e:	88fb      	ldrh	r3, [r7, #6]
 8003930:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003934:	d132      	bne.n	800399c <HAL_GPIO_EXTI_Falling_Callback+0x78>
 8003936:	4b1b      	ldr	r3, [pc, #108]	@ (80039a4 <HAL_GPIO_EXTI_Falling_Callback+0x80>)
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	b2db      	uxtb	r3, r3
 800393c:	f083 0301 	eor.w	r3, r3, #1
 8003940:	b2db      	uxtb	r3, r3
 8003942:	2b00      	cmp	r3, #0
 8003944:	d02a      	beq.n	800399c <HAL_GPIO_EXTI_Falling_Callback+0x78>
    {
        // Zastosuj prosty software debounce - opóźnienie czasowe
        // (Można też użyć HAL_GetTick() do bardziej precyzyjnego pomiaru)
        uint32_t last_tick = HAL_GetTick();
 8003946:	f001 f865 	bl	8004a14 <HAL_GetTick>
 800394a:	60f8      	str	r0, [r7, #12]
        while (HAL_GPIO_ReadPin(BUTTON_TRANSMIT_GPIO_Port, BUTTON_TRANSMIT_Pin) == GPIO_PIN_RESET) {
 800394c:	e006      	b.n	800395c <HAL_GPIO_EXTI_Falling_Callback+0x38>
             // Czekaj aż przycisk zostanie puszczony LUB minie krótki czas (np. 50ms)
             if (HAL_GetTick() - last_tick > 50) break;
 800394e:	f001 f861 	bl	8004a14 <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	2b32      	cmp	r3, #50	@ 0x32
 800395a:	d808      	bhi.n	800396e <HAL_GPIO_EXTI_Falling_Callback+0x4a>
        while (HAL_GPIO_ReadPin(BUTTON_TRANSMIT_GPIO_Port, BUTTON_TRANSMIT_Pin) == GPIO_PIN_RESET) {
 800395c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003960:	4811      	ldr	r0, [pc, #68]	@ (80039a8 <HAL_GPIO_EXTI_Falling_Callback+0x84>)
 8003962:	f001 fce5 	bl	8005330 <HAL_GPIO_ReadPin>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d0f0      	beq.n	800394e <HAL_GPIO_EXTI_Falling_Callback+0x2a>
 800396c:	e000      	b.n	8003970 <HAL_GPIO_EXTI_Falling_Callback+0x4c>
             if (HAL_GetTick() - last_tick > 50) break;
 800396e:	bf00      	nop
        }

        // Sprawdź ponownie, czy flaga nie została ustawiona w międzyczasie
        // i czy przycisk jest faktycznie nieaktywny (puszczony - stan wysoki dla PULLUP)
         if (!transmission_in_progress && HAL_GPIO_ReadPin(BUTTON_TRANSMIT_GPIO_Port, BUTTON_TRANSMIT_Pin) == GPIO_PIN_SET) {
 8003970:	4b0c      	ldr	r3, [pc, #48]	@ (80039a4 <HAL_GPIO_EXTI_Falling_Callback+0x80>)
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	b2db      	uxtb	r3, r3
 8003976:	f083 0301 	eor.w	r3, r3, #1
 800397a:	b2db      	uxtb	r3, r3
 800397c:	2b00      	cmp	r3, #0
 800397e:	d00d      	beq.n	800399c <HAL_GPIO_EXTI_Falling_Callback+0x78>
 8003980:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003984:	4808      	ldr	r0, [pc, #32]	@ (80039a8 <HAL_GPIO_EXTI_Falling_Callback+0x84>)
 8003986:	f001 fcd3 	bl	8005330 <HAL_GPIO_ReadPin>
 800398a:	4603      	mov	r3, r0
 800398c:	2b01      	cmp	r3, #1
 800398e:	d105      	bne.n	800399c <HAL_GPIO_EXTI_Falling_Callback+0x78>
             buttonPressed = 1; // Ustaw flagę żądania transmisji
 8003990:	4b06      	ldr	r3, [pc, #24]	@ (80039ac <HAL_GPIO_EXTI_Falling_Callback+0x88>)
 8003992:	2201      	movs	r2, #1
 8003994:	701a      	strb	r2, [r3, #0]
             transmission_in_progress = true; // Zablokuj możliwość kolejnego przerwania do końca cyklu
 8003996:	4b03      	ldr	r3, [pc, #12]	@ (80039a4 <HAL_GPIO_EXTI_Falling_Callback+0x80>)
 8003998:	2201      	movs	r2, #1
 800399a:	701a      	strb	r2, [r3, #0]
         }
    }
}
 800399c:	bf00      	nop
 800399e:	3710      	adds	r7, #16
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	20000459 	.word	0x20000459
 80039a8:	42020800 	.word	0x42020800
 80039ac:	20000458 	.word	0x20000458

080039b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b0ba      	sub	sp, #232	@ 0xe8
 80039b4:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80039b6:	f000 ff73 	bl	80048a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80039ba:	f000 f8b3 	bl	8003b24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80039be:	f000 fa67 	bl	8003e90 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80039c2:	f000 fa19 	bl	8003df8 <MX_USART1_UART_Init>
  MX_RTC_Init();
 80039c6:	f000 f95b 	bl	8003c80 <MX_RTC_Init>
  MX_SPI1_Init();
 80039ca:	f000 f9a7 	bl	8003d1c <MX_SPI1_Init>
  MX_CRC_Init();
 80039ce:	f000 f8f7 	bl	8003bc0 <MX_CRC_Init>
  MX_I2C1_Init();
 80039d2:	f000 f917 	bl	8003c04 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  printf("===== Test funkcji kryptograficznych =====\n\r");
 80039d6:	4844      	ldr	r0, [pc, #272]	@ (8003ae8 <main+0x138>)
 80039d8:	f00d fb7c 	bl	80110d4 <iprintf>

  printf("\n\r>> Test funkcji bezpiecznej ramki z komendą:\n\r");
 80039dc:	4843      	ldr	r0, [pc, #268]	@ (8003aec <main+0x13c>)
 80039de:	f00d fb79 	bl	80110d4 <iprintf>

  /* Zmienna na licznik - teraz tylko ta wartość jest definiowana lokalnie */
  uint8_t counter[8] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01};
 80039e2:	4a43      	ldr	r2, [pc, #268]	@ (8003af0 <main+0x140>)
 80039e4:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 80039e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80039ec:	e883 0003 	stmia.w	r3, {r0, r1}

  /* Bufory na ramkę i wyniki */
  uint8_t secure_frame[MAX_FRAME_SIZE];
  size_t secure_frame_size;

  create_secure_command_frame(
 80039f0:	f107 01b8 	add.w	r1, r7, #184	@ 0xb8
 80039f4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80039f8:	9305      	str	r3, [sp, #20]
 80039fa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80039fe:	9304      	str	r3, [sp, #16]
 8003a00:	2310      	movs	r3, #16
 8003a02:	9303      	str	r3, [sp, #12]
 8003a04:	4b3b      	ldr	r3, [pc, #236]	@ (8003af4 <main+0x144>)
 8003a06:	9302      	str	r3, [sp, #8]
 8003a08:	2320      	movs	r3, #32
 8003a0a:	9301      	str	r3, [sp, #4]
 8003a0c:	4b3a      	ldr	r3, [pc, #232]	@ (8003af8 <main+0x148>)
 8003a0e:	9300      	str	r3, [sp, #0]
 8003a10:	2310      	movs	r3, #16
 8003a12:	4a3a      	ldr	r2, [pc, #232]	@ (8003afc <main+0x14c>)
 8003a14:	483a      	ldr	r0, [pc, #232]	@ (8003b00 <main+0x150>)
 8003a16:	f7ff fde3 	bl	80035e0 <create_secure_command_frame>
  uint8_t received_pilot_id[PILOT_ID_LENGTH];
  uint8_t received_counter[8];
  uint8_t received_command[MAX_COMMAND_LENGTH];
  size_t received_command_size;

  uint8_t result = validate_and_process_command(
 8003a1a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003a1c:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8003a20:	463b      	mov	r3, r7
 8003a22:	9307      	str	r3, [sp, #28]
 8003a24:	1d3b      	adds	r3, r7, #4
 8003a26:	9306      	str	r3, [sp, #24]
 8003a28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a2c:	9305      	str	r3, [sp, #20]
 8003a2e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003a32:	9304      	str	r3, [sp, #16]
 8003a34:	2310      	movs	r3, #16
 8003a36:	9303      	str	r3, [sp, #12]
 8003a38:	4b2e      	ldr	r3, [pc, #184]	@ (8003af4 <main+0x144>)
 8003a3a:	9302      	str	r3, [sp, #8]
 8003a3c:	2320      	movs	r3, #32
 8003a3e:	9301      	str	r3, [sp, #4]
 8003a40:	4b2d      	ldr	r3, [pc, #180]	@ (8003af8 <main+0x148>)
 8003a42:	9300      	str	r3, [sp, #0]
 8003a44:	2310      	movs	r3, #16
 8003a46:	4a2d      	ldr	r2, [pc, #180]	@ (8003afc <main+0x14c>)
 8003a48:	f7ff fc08 	bl	800325c <validate_and_process_command>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
      CRYPTO_HMAC_KEY, sizeof(CRYPTO_HMAC_KEY),  // Klucz do podpisu HMAC
      CRYPTO_IV, sizeof(CRYPTO_IV),              // Wektor inicjalizacyjny
      received_pilot_id, received_counter,
      received_command, &received_command_size);

  if (result) {
 8003a52:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d014      	beq.n	8003a84 <main+0xd4>
      printf("\n\r>> Odebrana komenda została pomyślnie zweryfikowana i przetworzona!\n\r");
 8003a5a:	482a      	ldr	r0, [pc, #168]	@ (8003b04 <main+0x154>)
 8003a5c:	f00d fb3a 	bl	80110d4 <iprintf>

      /* Weryfikacja czy odebrane ID pilota zgadza się z konfiguracyjnym */
      if (memcmp(received_pilot_id, PILOT_ID, PILOT_ID_LENGTH) == 0) {
 8003a60:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003a64:	2208      	movs	r2, #8
 8003a66:	4926      	ldr	r1, [pc, #152]	@ (8003b00 <main+0x150>)
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f00d fc9d 	bl	80113a8 <memcmp>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d103      	bne.n	8003a7c <main+0xcc>
          printf(">> ID pilota zweryfikowane poprawnie.\n\r");
 8003a74:	4824      	ldr	r0, [pc, #144]	@ (8003b08 <main+0x158>)
 8003a76:	f00d fb2d 	bl	80110d4 <iprintf>
 8003a7a:	e006      	b.n	8003a8a <main+0xda>
      } else {
          printf(">> Błąd: Odebrane ID pilota nie zgadza się z oczekiwanym.\n\r");
 8003a7c:	4823      	ldr	r0, [pc, #140]	@ (8003b0c <main+0x15c>)
 8003a7e:	f00d fb29 	bl	80110d4 <iprintf>
 8003a82:	e002      	b.n	8003a8a <main+0xda>
      }
  } else {
      printf("\n\r>> Błąd podczas weryfikacji lub przetwarzania odebranej komendy!\n\r");
 8003a84:	4822      	ldr	r0, [pc, #136]	@ (8003b10 <main+0x160>)
 8003a86:	f00d fb25 	bl	80110d4 <iprintf>
  }


  printf("\n\r===== Koniec testów =====\n\r");
 8003a8a:	4822      	ldr	r0, [pc, #136]	@ (8003b14 <main+0x164>)
 8003a8c:	f00d fb22 	bl	80110d4 <iprintf>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (buttonPressed)
 8003a90:	4b21      	ldr	r3, [pc, #132]	@ (8003b18 <main+0x168>)
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d0fa      	beq.n	8003a90 <main+0xe0>
	  {
	      buttonPressed = 0;
 8003a9a:	4b1f      	ldr	r3, [pc, #124]	@ (8003b18 <main+0x168>)
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	701a      	strb	r2, [r3, #0]
	      transmission_in_progress = true;
 8003aa0:	4b1e      	ldr	r3, [pc, #120]	@ (8003b1c <main+0x16c>)
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	701a      	strb	r2, [r3, #0]

	      app_main();
 8003aa6:	f7ff f875 	bl	8002b94 <app_main>

	      transmission_in_progress = false;
 8003aaa:	4b1c      	ldr	r3, [pc, #112]	@ (8003b1c <main+0x16c>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	701a      	strb	r2, [r3, #0]
	        for(int i = 0; i < 10; i++)
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003ab6:	e012      	b.n	8003ade <main+0x12e>
	        {
	            HAL_GPIO_TogglePin(LED_TX_GPIO_Port, LED_TX_Pin); // Włącz diodę
 8003ab8:	2180      	movs	r1, #128	@ 0x80
 8003aba:	4819      	ldr	r0, [pc, #100]	@ (8003b20 <main+0x170>)
 8003abc:	f001 fc68 	bl	8005390 <HAL_GPIO_TogglePin>
	            HAL_Delay(100);
 8003ac0:	2064      	movs	r0, #100	@ 0x64
 8003ac2:	f000 ffb3 	bl	8004a2c <HAL_Delay>
	            HAL_GPIO_TogglePin(LED_TX_GPIO_Port, LED_TX_Pin); // Wyłącz diodę
 8003ac6:	2180      	movs	r1, #128	@ 0x80
 8003ac8:	4815      	ldr	r0, [pc, #84]	@ (8003b20 <main+0x170>)
 8003aca:	f001 fc61 	bl	8005390 <HAL_GPIO_TogglePin>
	            HAL_Delay(100);
 8003ace:	2064      	movs	r0, #100	@ 0x64
 8003ad0:	f000 ffac 	bl	8004a2c <HAL_Delay>
	        for(int i = 0; i < 10; i++)
 8003ad4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003ad8:	3301      	adds	r3, #1
 8003ada:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003ade:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003ae2:	2b09      	cmp	r3, #9
 8003ae4:	dde8      	ble.n	8003ab8 <main+0x108>
	  if (buttonPressed)
 8003ae6:	e7d3      	b.n	8003a90 <main+0xe0>
 8003ae8:	08015b70 	.word	0x08015b70
 8003aec:	08015ba0 	.word	0x08015ba0
 8003af0:	08015cf0 	.word	0x08015cf0
 8003af4:	08016390 	.word	0x08016390
 8003af8:	08016370 	.word	0x08016370
 8003afc:	08016360 	.word	0x08016360
 8003b00:	08016358 	.word	0x08016358
 8003b04:	08015bd4 	.word	0x08015bd4
 8003b08:	08015c20 	.word	0x08015c20
 8003b0c:	08015c48 	.word	0x08015c48
 8003b10:	08015c88 	.word	0x08015c88
 8003b14:	08015cd0 	.word	0x08015cd0
 8003b18:	20000458 	.word	0x20000458
 8003b1c:	20000459 	.word	0x20000459
 8003b20:	42020800 	.word	0x42020800

08003b24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b09e      	sub	sp, #120	@ 0x78
 8003b28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003b2a:	f107 0318 	add.w	r3, r7, #24
 8003b2e:	2260      	movs	r2, #96	@ 0x60
 8003b30:	2100      	movs	r1, #0
 8003b32:	4618      	mov	r0, r3
 8003b34:	f00d fc48 	bl	80113c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003b38:	463b      	mov	r3, r7
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	601a      	str	r2, [r3, #0]
 8003b3e:	605a      	str	r2, [r3, #4]
 8003b40:	609a      	str	r2, [r3, #8]
 8003b42:	60da      	str	r2, [r3, #12]
 8003b44:	611a      	str	r2, [r3, #16]
 8003b46:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE4) != HAL_OK)
 8003b48:	2000      	movs	r0, #0
 8003b4a:	f002 fb8b 	bl	8006264 <HAL_PWREx_ControlVoltageScaling>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d001      	beq.n	8003b58 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8003b54:	f000 fa06 	bl	8003f64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8003b58:	2318      	movs	r3, #24
 8003b5a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003b5c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003b60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003b62:	2301      	movs	r3, #1
 8003b64:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8003b66:	2310      	movs	r3, #16
 8003b68:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8003b6a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003b6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 8003b70:	2300      	movs	r3, #0
 8003b72:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003b74:	2300      	movs	r3, #0
 8003b76:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003b78:	f107 0318 	add.w	r3, r7, #24
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f002 fbfd 	bl	800637c <HAL_RCC_OscConfig>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d001      	beq.n	8003b8c <SystemClock_Config+0x68>
  {
    Error_Handler();
 8003b88:	f000 f9ec 	bl	8003f64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003b8c:	231f      	movs	r3, #31
 8003b8e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8003b90:	2300      	movs	r3, #0
 8003b92:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b94:	2300      	movs	r3, #0
 8003b96:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003ba4:	463b      	mov	r3, r7
 8003ba6:	2100      	movs	r1, #0
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f003 fac3 	bl	8007134 <HAL_RCC_ClockConfig>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d001      	beq.n	8003bb8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003bb4:	f000 f9d6 	bl	8003f64 <Error_Handler>
  }
}
 8003bb8:	bf00      	nop
 8003bba:	3778      	adds	r7, #120	@ 0x78
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8003bc4:	4b0d      	ldr	r3, [pc, #52]	@ (8003bfc <MX_CRC_Init+0x3c>)
 8003bc6:	4a0e      	ldr	r2, [pc, #56]	@ (8003c00 <MX_CRC_Init+0x40>)
 8003bc8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8003bca:	4b0c      	ldr	r3, [pc, #48]	@ (8003bfc <MX_CRC_Init+0x3c>)
 8003bcc:	2200      	movs	r2, #0
 8003bce:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8003bd0:	4b0a      	ldr	r3, [pc, #40]	@ (8003bfc <MX_CRC_Init+0x3c>)
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8003bd6:	4b09      	ldr	r3, [pc, #36]	@ (8003bfc <MX_CRC_Init+0x3c>)
 8003bd8:	2200      	movs	r2, #0
 8003bda:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8003bdc:	4b07      	ldr	r3, [pc, #28]	@ (8003bfc <MX_CRC_Init+0x3c>)
 8003bde:	2200      	movs	r2, #0
 8003be0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8003be2:	4b06      	ldr	r3, [pc, #24]	@ (8003bfc <MX_CRC_Init+0x3c>)
 8003be4:	2201      	movs	r2, #1
 8003be6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8003be8:	4804      	ldr	r0, [pc, #16]	@ (8003bfc <MX_CRC_Init+0x3c>)
 8003bea:	f001 f8d7 	bl	8004d9c <HAL_CRC_Init>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d001      	beq.n	8003bf8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8003bf4:	f000 f9b6 	bl	8003f64 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8003bf8:	bf00      	nop
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	2000028c 	.word	0x2000028c
 8003c00:	40023000 	.word	0x40023000

08003c04 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003c08:	4b1b      	ldr	r3, [pc, #108]	@ (8003c78 <MX_I2C1_Init+0x74>)
 8003c0a:	4a1c      	ldr	r2, [pc, #112]	@ (8003c7c <MX_I2C1_Init+0x78>)
 8003c0c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 8003c0e:	4b1a      	ldr	r3, [pc, #104]	@ (8003c78 <MX_I2C1_Init+0x74>)
 8003c10:	f640 6214 	movw	r2, #3604	@ 0xe14
 8003c14:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003c16:	4b18      	ldr	r3, [pc, #96]	@ (8003c78 <MX_I2C1_Init+0x74>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003c1c:	4b16      	ldr	r3, [pc, #88]	@ (8003c78 <MX_I2C1_Init+0x74>)
 8003c1e:	2201      	movs	r2, #1
 8003c20:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003c22:	4b15      	ldr	r3, [pc, #84]	@ (8003c78 <MX_I2C1_Init+0x74>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003c28:	4b13      	ldr	r3, [pc, #76]	@ (8003c78 <MX_I2C1_Init+0x74>)
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003c2e:	4b12      	ldr	r3, [pc, #72]	@ (8003c78 <MX_I2C1_Init+0x74>)
 8003c30:	2200      	movs	r2, #0
 8003c32:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003c34:	4b10      	ldr	r3, [pc, #64]	@ (8003c78 <MX_I2C1_Init+0x74>)
 8003c36:	2200      	movs	r2, #0
 8003c38:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003c3a:	4b0f      	ldr	r3, [pc, #60]	@ (8003c78 <MX_I2C1_Init+0x74>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003c40:	480d      	ldr	r0, [pc, #52]	@ (8003c78 <MX_I2C1_Init+0x74>)
 8003c42:	f001 fbe5 	bl	8005410 <HAL_I2C_Init>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d001      	beq.n	8003c50 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003c4c:	f000 f98a 	bl	8003f64 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003c50:	2100      	movs	r1, #0
 8003c52:	4809      	ldr	r0, [pc, #36]	@ (8003c78 <MX_I2C1_Init+0x74>)
 8003c54:	f002 fa6e 	bl	8006134 <HAL_I2CEx_ConfigAnalogFilter>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d001      	beq.n	8003c62 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8003c5e:	f000 f981 	bl	8003f64 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003c62:	2100      	movs	r1, #0
 8003c64:	4804      	ldr	r0, [pc, #16]	@ (8003c78 <MX_I2C1_Init+0x74>)
 8003c66:	f002 fab0 	bl	80061ca <HAL_I2CEx_ConfigDigitalFilter>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d001      	beq.n	8003c74 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8003c70:	f000 f978 	bl	8003f64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003c74:	bf00      	nop
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	200002b0 	.word	0x200002b0
 8003c7c:	40005400 	.word	0x40005400

08003c80 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b088      	sub	sp, #32
 8003c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8003c86:	1d3b      	adds	r3, r7, #4
 8003c88:	2200      	movs	r2, #0
 8003c8a:	601a      	str	r2, [r3, #0]
 8003c8c:	605a      	str	r2, [r3, #4]
 8003c8e:	609a      	str	r2, [r3, #8]
 8003c90:	60da      	str	r2, [r3, #12]
 8003c92:	611a      	str	r2, [r3, #16]
 8003c94:	615a      	str	r2, [r3, #20]
 8003c96:	619a      	str	r2, [r3, #24]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003c98:	4b1e      	ldr	r3, [pc, #120]	@ (8003d14 <MX_RTC_Init+0x94>)
 8003c9a:	4a1f      	ldr	r2, [pc, #124]	@ (8003d18 <MX_RTC_Init+0x98>)
 8003c9c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003c9e:	4b1d      	ldr	r3, [pc, #116]	@ (8003d14 <MX_RTC_Init+0x94>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003ca4:	4b1b      	ldr	r3, [pc, #108]	@ (8003d14 <MX_RTC_Init+0x94>)
 8003ca6:	227f      	movs	r2, #127	@ 0x7f
 8003ca8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003caa:	4b1a      	ldr	r3, [pc, #104]	@ (8003d14 <MX_RTC_Init+0x94>)
 8003cac:	22ff      	movs	r2, #255	@ 0xff
 8003cae:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003cb0:	4b18      	ldr	r3, [pc, #96]	@ (8003d14 <MX_RTC_Init+0x94>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003cb6:	4b17      	ldr	r3, [pc, #92]	@ (8003d14 <MX_RTC_Init+0x94>)
 8003cb8:	2200      	movs	r2, #0
 8003cba:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003cbc:	4b15      	ldr	r3, [pc, #84]	@ (8003d14 <MX_RTC_Init+0x94>)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003cc2:	4b14      	ldr	r3, [pc, #80]	@ (8003d14 <MX_RTC_Init+0x94>)
 8003cc4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003cc8:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8003cca:	4b12      	ldr	r3, [pc, #72]	@ (8003d14 <MX_RTC_Init+0x94>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8003cd0:	4b10      	ldr	r3, [pc, #64]	@ (8003d14 <MX_RTC_Init+0x94>)
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003cd6:	480f      	ldr	r0, [pc, #60]	@ (8003d14 <MX_RTC_Init+0x94>)
 8003cd8:	f006 f9ba 	bl	800a050 <HAL_RTC_Init>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d001      	beq.n	8003ce6 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8003ce2:	f000 f93f 	bl	8003f64 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	607b      	str	r3, [r7, #4]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8003cea:	2300      	movs	r3, #0
 8003cec:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	617b      	str	r3, [r7, #20]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	61bb      	str	r3, [r7, #24]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8003cf6:	1d3b      	adds	r3, r7, #4
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	4806      	ldr	r0, [pc, #24]	@ (8003d14 <MX_RTC_Init+0x94>)
 8003cfc:	f006 ff66 	bl	800abcc <HAL_RTCEx_PrivilegeModeSet>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d001      	beq.n	8003d0a <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 8003d06:	f000 f92d 	bl	8003f64 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003d0a:	bf00      	nop
 8003d0c:	3720      	adds	r7, #32
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	20000304 	.word	0x20000304
 8003d18:	46007800 	.word	0x46007800

08003d1c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8003d22:	1d3b      	adds	r3, r7, #4
 8003d24:	2200      	movs	r2, #0
 8003d26:	601a      	str	r2, [r3, #0]
 8003d28:	605a      	str	r2, [r3, #4]
 8003d2a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003d2c:	4b30      	ldr	r3, [pc, #192]	@ (8003df0 <MX_SPI1_Init+0xd4>)
 8003d2e:	4a31      	ldr	r2, [pc, #196]	@ (8003df4 <MX_SPI1_Init+0xd8>)
 8003d30:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003d32:	4b2f      	ldr	r3, [pc, #188]	@ (8003df0 <MX_SPI1_Init+0xd4>)
 8003d34:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8003d38:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003d3a:	4b2d      	ldr	r3, [pc, #180]	@ (8003df0 <MX_SPI1_Init+0xd4>)
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8003d40:	4b2b      	ldr	r3, [pc, #172]	@ (8003df0 <MX_SPI1_Init+0xd4>)
 8003d42:	2203      	movs	r2, #3
 8003d44:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d46:	4b2a      	ldr	r3, [pc, #168]	@ (8003df0 <MX_SPI1_Init+0xd4>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003d4c:	4b28      	ldr	r3, [pc, #160]	@ (8003df0 <MX_SPI1_Init+0xd4>)
 8003d4e:	2200      	movs	r2, #0
 8003d50:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003d52:	4b27      	ldr	r3, [pc, #156]	@ (8003df0 <MX_SPI1_Init+0xd4>)
 8003d54:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003d58:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d5a:	4b25      	ldr	r3, [pc, #148]	@ (8003df0 <MX_SPI1_Init+0xd4>)
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003d60:	4b23      	ldr	r3, [pc, #140]	@ (8003df0 <MX_SPI1_Init+0xd4>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003d66:	4b22      	ldr	r3, [pc, #136]	@ (8003df0 <MX_SPI1_Init+0xd4>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d6c:	4b20      	ldr	r3, [pc, #128]	@ (8003df0 <MX_SPI1_Init+0xd4>)
 8003d6e:	2200      	movs	r2, #0
 8003d70:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8003d72:	4b1f      	ldr	r3, [pc, #124]	@ (8003df0 <MX_SPI1_Init+0xd4>)
 8003d74:	2207      	movs	r2, #7
 8003d76:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003d78:	4b1d      	ldr	r3, [pc, #116]	@ (8003df0 <MX_SPI1_Init+0xd4>)
 8003d7a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003d7e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003d80:	4b1b      	ldr	r3, [pc, #108]	@ (8003df0 <MX_SPI1_Init+0xd4>)
 8003d82:	2200      	movs	r2, #0
 8003d84:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8003d86:	4b1a      	ldr	r3, [pc, #104]	@ (8003df0 <MX_SPI1_Init+0xd4>)
 8003d88:	2200      	movs	r2, #0
 8003d8a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003d8c:	4b18      	ldr	r3, [pc, #96]	@ (8003df0 <MX_SPI1_Init+0xd4>)
 8003d8e:	2200      	movs	r2, #0
 8003d90:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003d92:	4b17      	ldr	r3, [pc, #92]	@ (8003df0 <MX_SPI1_Init+0xd4>)
 8003d94:	2200      	movs	r2, #0
 8003d96:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003d98:	4b15      	ldr	r3, [pc, #84]	@ (8003df0 <MX_SPI1_Init+0xd4>)
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003d9e:	4b14      	ldr	r3, [pc, #80]	@ (8003df0 <MX_SPI1_Init+0xd4>)
 8003da0:	2200      	movs	r2, #0
 8003da2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003da4:	4b12      	ldr	r3, [pc, #72]	@ (8003df0 <MX_SPI1_Init+0xd4>)
 8003da6:	2200      	movs	r2, #0
 8003da8:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8003daa:	4b11      	ldr	r3, [pc, #68]	@ (8003df0 <MX_SPI1_Init+0xd4>)
 8003dac:	2200      	movs	r2, #0
 8003dae:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8003db0:	4b0f      	ldr	r3, [pc, #60]	@ (8003df0 <MX_SPI1_Init+0xd4>)
 8003db2:	2200      	movs	r2, #0
 8003db4:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003db6:	480e      	ldr	r0, [pc, #56]	@ (8003df0 <MX_SPI1_Init+0xd4>)
 8003db8:	f006 ff36 	bl	800ac28 <HAL_SPI_Init>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d001      	beq.n	8003dc6 <MX_SPI1_Init+0xaa>
  {
    Error_Handler();
 8003dc2:	f000 f8cf 	bl	8003f64 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8003dca:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003dce:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8003dd4:	1d3b      	adds	r3, r7, #4
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	4805      	ldr	r0, [pc, #20]	@ (8003df0 <MX_SPI1_Init+0xd4>)
 8003dda:	f007 fde0 	bl	800b99e <HAL_SPIEx_SetConfigAutonomousMode>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d001      	beq.n	8003de8 <MX_SPI1_Init+0xcc>
  {
    Error_Handler();
 8003de4:	f000 f8be 	bl	8003f64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003de8:	bf00      	nop
 8003dea:	3710      	adds	r7, #16
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	20000334 	.word	0x20000334
 8003df4:	40013000 	.word	0x40013000

08003df8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003dfc:	4b22      	ldr	r3, [pc, #136]	@ (8003e88 <MX_USART1_UART_Init+0x90>)
 8003dfe:	4a23      	ldr	r2, [pc, #140]	@ (8003e8c <MX_USART1_UART_Init+0x94>)
 8003e00:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003e02:	4b21      	ldr	r3, [pc, #132]	@ (8003e88 <MX_USART1_UART_Init+0x90>)
 8003e04:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003e08:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003e0a:	4b1f      	ldr	r3, [pc, #124]	@ (8003e88 <MX_USART1_UART_Init+0x90>)
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003e10:	4b1d      	ldr	r3, [pc, #116]	@ (8003e88 <MX_USART1_UART_Init+0x90>)
 8003e12:	2200      	movs	r2, #0
 8003e14:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003e16:	4b1c      	ldr	r3, [pc, #112]	@ (8003e88 <MX_USART1_UART_Init+0x90>)
 8003e18:	2200      	movs	r2, #0
 8003e1a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003e1c:	4b1a      	ldr	r3, [pc, #104]	@ (8003e88 <MX_USART1_UART_Init+0x90>)
 8003e1e:	220c      	movs	r2, #12
 8003e20:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e22:	4b19      	ldr	r3, [pc, #100]	@ (8003e88 <MX_USART1_UART_Init+0x90>)
 8003e24:	2200      	movs	r2, #0
 8003e26:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e28:	4b17      	ldr	r3, [pc, #92]	@ (8003e88 <MX_USART1_UART_Init+0x90>)
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003e2e:	4b16      	ldr	r3, [pc, #88]	@ (8003e88 <MX_USART1_UART_Init+0x90>)
 8003e30:	2200      	movs	r2, #0
 8003e32:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003e34:	4b14      	ldr	r3, [pc, #80]	@ (8003e88 <MX_USART1_UART_Init+0x90>)
 8003e36:	2200      	movs	r2, #0
 8003e38:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003e3a:	4b13      	ldr	r3, [pc, #76]	@ (8003e88 <MX_USART1_UART_Init+0x90>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003e40:	4811      	ldr	r0, [pc, #68]	@ (8003e88 <MX_USART1_UART_Init+0x90>)
 8003e42:	f007 fded 	bl	800ba20 <HAL_UART_Init>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d001      	beq.n	8003e50 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003e4c:	f000 f88a 	bl	8003f64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003e50:	2100      	movs	r1, #0
 8003e52:	480d      	ldr	r0, [pc, #52]	@ (8003e88 <MX_USART1_UART_Init+0x90>)
 8003e54:	f008 fab2 	bl	800c3bc <HAL_UARTEx_SetTxFifoThreshold>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d001      	beq.n	8003e62 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003e5e:	f000 f881 	bl	8003f64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003e62:	2100      	movs	r1, #0
 8003e64:	4808      	ldr	r0, [pc, #32]	@ (8003e88 <MX_USART1_UART_Init+0x90>)
 8003e66:	f008 fae7 	bl	800c438 <HAL_UARTEx_SetRxFifoThreshold>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d001      	beq.n	8003e74 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003e70:	f000 f878 	bl	8003f64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003e74:	4804      	ldr	r0, [pc, #16]	@ (8003e88 <MX_USART1_UART_Init+0x90>)
 8003e76:	f008 fa68 	bl	800c34a <HAL_UARTEx_DisableFifoMode>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d001      	beq.n	8003e84 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003e80:	f000 f870 	bl	8003f64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003e84:	bf00      	nop
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	200003c4 	.word	0x200003c4
 8003e8c:	40013800 	.word	0x40013800

08003e90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b088      	sub	sp, #32
 8003e94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e96:	f107 030c 	add.w	r3, r7, #12
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	601a      	str	r2, [r3, #0]
 8003e9e:	605a      	str	r2, [r3, #4]
 8003ea0:	609a      	str	r2, [r3, #8]
 8003ea2:	60da      	str	r2, [r3, #12]
 8003ea4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ea6:	4b2c      	ldr	r3, [pc, #176]	@ (8003f58 <MX_GPIO_Init+0xc8>)
 8003ea8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003eac:	4a2a      	ldr	r2, [pc, #168]	@ (8003f58 <MX_GPIO_Init+0xc8>)
 8003eae:	f043 0301 	orr.w	r3, r3, #1
 8003eb2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003eb6:	4b28      	ldr	r3, [pc, #160]	@ (8003f58 <MX_GPIO_Init+0xc8>)
 8003eb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ebc:	f003 0301 	and.w	r3, r3, #1
 8003ec0:	60bb      	str	r3, [r7, #8]
 8003ec2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ec4:	4b24      	ldr	r3, [pc, #144]	@ (8003f58 <MX_GPIO_Init+0xc8>)
 8003ec6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003eca:	4a23      	ldr	r2, [pc, #140]	@ (8003f58 <MX_GPIO_Init+0xc8>)
 8003ecc:	f043 0304 	orr.w	r3, r3, #4
 8003ed0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003ed4:	4b20      	ldr	r3, [pc, #128]	@ (8003f58 <MX_GPIO_Init+0xc8>)
 8003ed6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003eda:	f003 0304 	and.w	r3, r3, #4
 8003ede:	607b      	str	r3, [r7, #4]
 8003ee0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ee2:	4b1d      	ldr	r3, [pc, #116]	@ (8003f58 <MX_GPIO_Init+0xc8>)
 8003ee4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ee8:	4a1b      	ldr	r2, [pc, #108]	@ (8003f58 <MX_GPIO_Init+0xc8>)
 8003eea:	f043 0302 	orr.w	r3, r3, #2
 8003eee:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003ef2:	4b19      	ldr	r3, [pc, #100]	@ (8003f58 <MX_GPIO_Init+0xc8>)
 8003ef4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ef8:	f003 0302 	and.w	r3, r3, #2
 8003efc:	603b      	str	r3, [r7, #0]
 8003efe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_TX_GPIO_Port, LED_TX_Pin, GPIO_PIN_RESET);
 8003f00:	2200      	movs	r2, #0
 8003f02:	2180      	movs	r1, #128	@ 0x80
 8003f04:	4815      	ldr	r0, [pc, #84]	@ (8003f5c <MX_GPIO_Init+0xcc>)
 8003f06:	f001 fa2b 	bl	8005360 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_TX_Pin */
  GPIO_InitStruct.Pin = LED_TX_Pin;
 8003f0a:	2380      	movs	r3, #128	@ 0x80
 8003f0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f12:	2300      	movs	r3, #0
 8003f14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f16:	2300      	movs	r3, #0
 8003f18:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_TX_GPIO_Port, &GPIO_InitStruct);
 8003f1a:	f107 030c 	add.w	r3, r7, #12
 8003f1e:	4619      	mov	r1, r3
 8003f20:	480e      	ldr	r0, [pc, #56]	@ (8003f5c <MX_GPIO_Init+0xcc>)
 8003f22:	f001 f82d 	bl	8004f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_TRANSMIT_Pin */
  GPIO_InitStruct.Pin = BUTTON_TRANSMIT_Pin;
 8003f26:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003f2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003f2c:	4b0c      	ldr	r3, [pc, #48]	@ (8003f60 <MX_GPIO_Init+0xd0>)
 8003f2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003f30:	2302      	movs	r3, #2
 8003f32:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_TRANSMIT_GPIO_Port, &GPIO_InitStruct);
 8003f34:	f107 030c 	add.w	r3, r7, #12
 8003f38:	4619      	mov	r1, r3
 8003f3a:	4808      	ldr	r0, [pc, #32]	@ (8003f5c <MX_GPIO_Init+0xcc>)
 8003f3c:	f001 f820 	bl	8004f80 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI8_IRQn, 0, 0);
 8003f40:	2200      	movs	r2, #0
 8003f42:	2100      	movs	r1, #0
 8003f44:	2013      	movs	r0, #19
 8003f46:	f000 fe4d 	bl	8004be4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI8_IRQn);
 8003f4a:	2013      	movs	r0, #19
 8003f4c:	f000 fe64 	bl	8004c18 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8003f50:	bf00      	nop
 8003f52:	3720      	adds	r7, #32
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	46020c00 	.word	0x46020c00
 8003f5c:	42020800 	.word	0x42020800
 8003f60:	10210000 	.word	0x10210000

08003f64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003f64:	b480      	push	{r7}
 8003f66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003f68:	b672      	cpsid	i
}
 8003f6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003f6c:	bf00      	nop
 8003f6e:	e7fd      	b.n	8003f6c <Error_Handler+0x8>

08003f70 <IsEepromReady>:
#include <stdio.h>

extern I2C_HandleTypeDef hi2c1;

static bool IsEepromReady(uint32_t Trials)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
    return (HAL_I2C_IsDeviceReady(&hi2c1, EEPROM_I2C_ADDR, Trials, EEPROM_I2C_TIMEOUT) == HAL_OK);
 8003f78:	2364      	movs	r3, #100	@ 0x64
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	21a0      	movs	r1, #160	@ 0xa0
 8003f7e:	4806      	ldr	r0, [pc, #24]	@ (8003f98 <IsEepromReady+0x28>)
 8003f80:	f001 fd10 	bl	80059a4 <HAL_I2C_IsDeviceReady>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	bf0c      	ite	eq
 8003f8a:	2301      	moveq	r3, #1
 8003f8c:	2300      	movne	r3, #0
 8003f8e:	b2db      	uxtb	r3, r3
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3708      	adds	r7, #8
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	200002b0 	.word	0x200002b0

08003f9c <Memory_Init>:

bool Memory_Init(void)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	af00      	add	r7, sp, #0
    printf("Memory_Init: Sprawdzanie gotowości EEPROM...\r\n");
 8003fa0:	4809      	ldr	r0, [pc, #36]	@ (8003fc8 <Memory_Init+0x2c>)
 8003fa2:	f00d f8ff 	bl	80111a4 <puts>
    if (IsEepromReady(5)) {
 8003fa6:	2005      	movs	r0, #5
 8003fa8:	f7ff ffe2 	bl	8003f70 <IsEepromReady>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d004      	beq.n	8003fbc <Memory_Init+0x20>
        printf("Memory_Init: EEPROM gotowy.\r\n");
 8003fb2:	4806      	ldr	r0, [pc, #24]	@ (8003fcc <Memory_Init+0x30>)
 8003fb4:	f00d f8f6 	bl	80111a4 <puts>
        return true;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e003      	b.n	8003fc4 <Memory_Init+0x28>
    } else {
        printf("Memory_Init: BŁĄD - EEPROM nie odpowiada!\r\n");
 8003fbc:	4804      	ldr	r0, [pc, #16]	@ (8003fd0 <Memory_Init+0x34>)
 8003fbe:	f00d f8f1 	bl	80111a4 <puts>
        return false;
 8003fc2:	2300      	movs	r3, #0
    }
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	08015cf8 	.word	0x08015cf8
 8003fcc:	08015d28 	.word	0x08015d28
 8003fd0:	08015d48 	.word	0x08015d48

08003fd4 <Memory_ReadCounter>:

bool Memory_ReadCounter(uint8_t* counter_buffer)
{
 8003fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fd6:	b08b      	sub	sp, #44	@ 0x2c
 8003fd8:	af06      	add	r7, sp, #24
 8003fda:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status;
    printf("Memory_ReadCounter: Odczyt licznika z adresu 0x%02X...\r\n", EEPROM_COUNTER_ADDRESS);
 8003fdc:	2100      	movs	r1, #0
 8003fde:	4824      	ldr	r0, [pc, #144]	@ (8004070 <Memory_ReadCounter+0x9c>)
 8003fe0:	f00d f878 	bl	80110d4 <iprintf>
    status = HAL_I2C_Mem_Read(&hi2c1,
 8003fe4:	2364      	movs	r3, #100	@ 0x64
 8003fe6:	9302      	str	r3, [sp, #8]
 8003fe8:	2308      	movs	r3, #8
 8003fea:	9301      	str	r3, [sp, #4]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	9300      	str	r3, [sp, #0]
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	21a0      	movs	r1, #160	@ 0xa0
 8003ff6:	481f      	ldr	r0, [pc, #124]	@ (8004074 <Memory_ReadCounter+0xa0>)
 8003ff8:	f001 fbba 	bl	8005770 <HAL_I2C_Mem_Read>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	73fb      	strb	r3, [r7, #15]
                              EEPROM_COUNTER_ADDRESS,
                              I2C_MEMADD_SIZE_8BIT,
                              counter_buffer,
                              EEPROM_COUNTER_SIZE,
                              EEPROM_I2C_TIMEOUT);
    if (status == HAL_OK) {
 8004000:	7bfb      	ldrb	r3, [r7, #15]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d12a      	bne.n	800405c <Memory_ReadCounter+0x88>
        printf("Memory_ReadCounter: Odczyt OK. Wartość: %02X %02X %02X %02X %02X %02X %02X %02X\r\n",
               counter_buffer[0], counter_buffer[1], counter_buffer[2], counter_buffer[3],
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	781b      	ldrb	r3, [r3, #0]
        printf("Memory_ReadCounter: Odczyt OK. Wartość: %02X %02X %02X %02X %02X %02X %02X %02X\r\n",
 800400a:	461d      	mov	r5, r3
               counter_buffer[0], counter_buffer[1], counter_buffer[2], counter_buffer[3],
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	3301      	adds	r3, #1
 8004010:	781b      	ldrb	r3, [r3, #0]
        printf("Memory_ReadCounter: Odczyt OK. Wartość: %02X %02X %02X %02X %02X %02X %02X %02X\r\n",
 8004012:	461e      	mov	r6, r3
               counter_buffer[0], counter_buffer[1], counter_buffer[2], counter_buffer[3],
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	3302      	adds	r3, #2
 8004018:	781b      	ldrb	r3, [r3, #0]
        printf("Memory_ReadCounter: Odczyt OK. Wartość: %02X %02X %02X %02X %02X %02X %02X %02X\r\n",
 800401a:	469c      	mov	ip, r3
               counter_buffer[0], counter_buffer[1], counter_buffer[2], counter_buffer[3],
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	3303      	adds	r3, #3
 8004020:	781b      	ldrb	r3, [r3, #0]
        printf("Memory_ReadCounter: Odczyt OK. Wartość: %02X %02X %02X %02X %02X %02X %02X %02X\r\n",
 8004022:	461a      	mov	r2, r3
               counter_buffer[4], counter_buffer[5], counter_buffer[6], counter_buffer[7]);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	3304      	adds	r3, #4
 8004028:	781b      	ldrb	r3, [r3, #0]
        printf("Memory_ReadCounter: Odczyt OK. Wartość: %02X %02X %02X %02X %02X %02X %02X %02X\r\n",
 800402a:	4619      	mov	r1, r3
               counter_buffer[4], counter_buffer[5], counter_buffer[6], counter_buffer[7]);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	3305      	adds	r3, #5
 8004030:	781b      	ldrb	r3, [r3, #0]
        printf("Memory_ReadCounter: Odczyt OK. Wartość: %02X %02X %02X %02X %02X %02X %02X %02X\r\n",
 8004032:	4618      	mov	r0, r3
               counter_buffer[4], counter_buffer[5], counter_buffer[6], counter_buffer[7]);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	3306      	adds	r3, #6
 8004038:	781b      	ldrb	r3, [r3, #0]
        printf("Memory_ReadCounter: Odczyt OK. Wartość: %02X %02X %02X %02X %02X %02X %02X %02X\r\n",
 800403a:	461c      	mov	r4, r3
               counter_buffer[4], counter_buffer[5], counter_buffer[6], counter_buffer[7]);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	3307      	adds	r3, #7
 8004040:	781b      	ldrb	r3, [r3, #0]
        printf("Memory_ReadCounter: Odczyt OK. Wartość: %02X %02X %02X %02X %02X %02X %02X %02X\r\n",
 8004042:	9304      	str	r3, [sp, #16]
 8004044:	9403      	str	r4, [sp, #12]
 8004046:	9002      	str	r0, [sp, #8]
 8004048:	9101      	str	r1, [sp, #4]
 800404a:	9200      	str	r2, [sp, #0]
 800404c:	4663      	mov	r3, ip
 800404e:	4632      	mov	r2, r6
 8004050:	4629      	mov	r1, r5
 8004052:	4809      	ldr	r0, [pc, #36]	@ (8004078 <Memory_ReadCounter+0xa4>)
 8004054:	f00d f83e 	bl	80110d4 <iprintf>
        return true;
 8004058:	2301      	movs	r3, #1
 800405a:	e005      	b.n	8004068 <Memory_ReadCounter+0x94>
    } else {
        printf("Memory_ReadCounter: BŁĄD odczytu licznika! Status HAL: %d\r\n", status);
 800405c:	7bfb      	ldrb	r3, [r7, #15]
 800405e:	4619      	mov	r1, r3
 8004060:	4806      	ldr	r0, [pc, #24]	@ (800407c <Memory_ReadCounter+0xa8>)
 8004062:	f00d f837 	bl	80110d4 <iprintf>
        return false;
 8004066:	2300      	movs	r3, #0
    }
}
 8004068:	4618      	mov	r0, r3
 800406a:	3714      	adds	r7, #20
 800406c:	46bd      	mov	sp, r7
 800406e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004070:	08015d78 	.word	0x08015d78
 8004074:	200002b0 	.word	0x200002b0
 8004078:	08015db4 	.word	0x08015db4
 800407c:	08015e08 	.word	0x08015e08

08004080 <Memory_WriteCounter>:

bool Memory_WriteCounter(const uint8_t* counter_buffer)
{
 8004080:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004082:	b08b      	sub	sp, #44	@ 0x2c
 8004084:	af06      	add	r7, sp, #24
 8004086:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status;
    printf("Memory_WriteCounter: Zapis licznika pod adresem 0x%02X. Wartość: %02X %02X %02X %02X %02X %02X %02X %02X\r\n",
           EEPROM_COUNTER_ADDRESS,
           counter_buffer[0], counter_buffer[1], counter_buffer[2], counter_buffer[3],
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	781b      	ldrb	r3, [r3, #0]
    printf("Memory_WriteCounter: Zapis licznika pod adresem 0x%02X. Wartość: %02X %02X %02X %02X %02X %02X %02X %02X\r\n",
 800408c:	461e      	mov	r6, r3
           counter_buffer[0], counter_buffer[1], counter_buffer[2], counter_buffer[3],
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	3301      	adds	r3, #1
 8004092:	781b      	ldrb	r3, [r3, #0]
    printf("Memory_WriteCounter: Zapis licznika pod adresem 0x%02X. Wartość: %02X %02X %02X %02X %02X %02X %02X %02X\r\n",
 8004094:	469c      	mov	ip, r3
           counter_buffer[0], counter_buffer[1], counter_buffer[2], counter_buffer[3],
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	3302      	adds	r3, #2
 800409a:	781b      	ldrb	r3, [r3, #0]
    printf("Memory_WriteCounter: Zapis licznika pod adresem 0x%02X. Wartość: %02X %02X %02X %02X %02X %02X %02X %02X\r\n",
 800409c:	461a      	mov	r2, r3
           counter_buffer[0], counter_buffer[1], counter_buffer[2], counter_buffer[3],
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	3303      	adds	r3, #3
 80040a2:	781b      	ldrb	r3, [r3, #0]
    printf("Memory_WriteCounter: Zapis licznika pod adresem 0x%02X. Wartość: %02X %02X %02X %02X %02X %02X %02X %02X\r\n",
 80040a4:	4619      	mov	r1, r3
           counter_buffer[4], counter_buffer[5], counter_buffer[6], counter_buffer[7]);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	3304      	adds	r3, #4
 80040aa:	781b      	ldrb	r3, [r3, #0]
    printf("Memory_WriteCounter: Zapis licznika pod adresem 0x%02X. Wartość: %02X %02X %02X %02X %02X %02X %02X %02X\r\n",
 80040ac:	4618      	mov	r0, r3
           counter_buffer[4], counter_buffer[5], counter_buffer[6], counter_buffer[7]);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	3305      	adds	r3, #5
 80040b2:	781b      	ldrb	r3, [r3, #0]
    printf("Memory_WriteCounter: Zapis licznika pod adresem 0x%02X. Wartość: %02X %02X %02X %02X %02X %02X %02X %02X\r\n",
 80040b4:	461c      	mov	r4, r3
           counter_buffer[4], counter_buffer[5], counter_buffer[6], counter_buffer[7]);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	3306      	adds	r3, #6
 80040ba:	781b      	ldrb	r3, [r3, #0]
    printf("Memory_WriteCounter: Zapis licznika pod adresem 0x%02X. Wartość: %02X %02X %02X %02X %02X %02X %02X %02X\r\n",
 80040bc:	461d      	mov	r5, r3
           counter_buffer[4], counter_buffer[5], counter_buffer[6], counter_buffer[7]);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	3307      	adds	r3, #7
 80040c2:	781b      	ldrb	r3, [r3, #0]
    printf("Memory_WriteCounter: Zapis licznika pod adresem 0x%02X. Wartość: %02X %02X %02X %02X %02X %02X %02X %02X\r\n",
 80040c4:	9305      	str	r3, [sp, #20]
 80040c6:	9504      	str	r5, [sp, #16]
 80040c8:	9403      	str	r4, [sp, #12]
 80040ca:	9002      	str	r0, [sp, #8]
 80040cc:	9101      	str	r1, [sp, #4]
 80040ce:	9200      	str	r2, [sp, #0]
 80040d0:	4663      	mov	r3, ip
 80040d2:	4632      	mov	r2, r6
 80040d4:	2100      	movs	r1, #0
 80040d6:	481b      	ldr	r0, [pc, #108]	@ (8004144 <Memory_WriteCounter+0xc4>)
 80040d8:	f00c fffc 	bl	80110d4 <iprintf>

    status = HAL_I2C_Mem_Write(&hi2c1,
 80040dc:	2364      	movs	r3, #100	@ 0x64
 80040de:	9302      	str	r3, [sp, #8]
 80040e0:	2308      	movs	r3, #8
 80040e2:	9301      	str	r3, [sp, #4]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	9300      	str	r3, [sp, #0]
 80040e8:	2301      	movs	r3, #1
 80040ea:	2200      	movs	r2, #0
 80040ec:	21a0      	movs	r1, #160	@ 0xa0
 80040ee:	4816      	ldr	r0, [pc, #88]	@ (8004148 <Memory_WriteCounter+0xc8>)
 80040f0:	f001 fa2a 	bl	8005548 <HAL_I2C_Mem_Write>
 80040f4:	4603      	mov	r3, r0
 80040f6:	73fb      	strb	r3, [r7, #15]
                               EEPROM_COUNTER_ADDRESS,
                               I2C_MEMADD_SIZE_8BIT,
                               (uint8_t*)counter_buffer,
                               EEPROM_COUNTER_SIZE,
                               EEPROM_I2C_TIMEOUT);
    if (status == HAL_OK) {
 80040f8:	7bfb      	ldrb	r3, [r7, #15]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d118      	bne.n	8004130 <Memory_WriteCounter+0xb0>
        printf("Memory_WriteCounter: Transmisja I2C OK. Oczekiwanie na tW (%d ms)...\r\n", EEPROM_WRITE_TIME_MS);
 80040fe:	2105      	movs	r1, #5
 8004100:	4812      	ldr	r0, [pc, #72]	@ (800414c <Memory_WriteCounter+0xcc>)
 8004102:	f00c ffe7 	bl	80110d4 <iprintf>
        HAL_Delay(EEPROM_WRITE_TIME_MS);
 8004106:	2005      	movs	r0, #5
 8004108:	f000 fc90 	bl	8004a2c <HAL_Delay>
        if (!IsEepromReady(2)) {
 800410c:	2002      	movs	r0, #2
 800410e:	f7ff ff2f 	bl	8003f70 <IsEepromReady>
 8004112:	4603      	mov	r3, r0
 8004114:	f083 0301 	eor.w	r3, r3, #1
 8004118:	b2db      	uxtb	r3, r3
 800411a:	2b00      	cmp	r3, #0
 800411c:	d003      	beq.n	8004126 <Memory_WriteCounter+0xa6>
             printf("Memory_WriteCounter: UWAGA - EEPROM nie potwierdził gotowości po tW.\r\n");
 800411e:	480c      	ldr	r0, [pc, #48]	@ (8004150 <Memory_WriteCounter+0xd0>)
 8004120:	f00d f840 	bl	80111a4 <puts>
 8004124:	e002      	b.n	800412c <Memory_WriteCounter+0xac>
        } else {
             printf("Memory_WriteCounter: Zapis licznika zakończony.\r\n");
 8004126:	480b      	ldr	r0, [pc, #44]	@ (8004154 <Memory_WriteCounter+0xd4>)
 8004128:	f00d f83c 	bl	80111a4 <puts>
        }
        return true;
 800412c:	2301      	movs	r3, #1
 800412e:	e005      	b.n	800413c <Memory_WriteCounter+0xbc>
    } else {
        printf("Memory_WriteCounter: BŁĄD zapisu licznika! Status HAL: %d\r\n", status);
 8004130:	7bfb      	ldrb	r3, [r7, #15]
 8004132:	4619      	mov	r1, r3
 8004134:	4808      	ldr	r0, [pc, #32]	@ (8004158 <Memory_WriteCounter+0xd8>)
 8004136:	f00c ffcd 	bl	80110d4 <iprintf>
        return false;
 800413a:	2300      	movs	r3, #0
    }
}
 800413c:	4618      	mov	r0, r3
 800413e:	3714      	adds	r7, #20
 8004140:	46bd      	mov	sp, r7
 8004142:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004144:	08015e48 	.word	0x08015e48
 8004148:	200002b0 	.word	0x200002b0
 800414c:	08015eb8 	.word	0x08015eb8
 8004150:	08015f00 	.word	0x08015f00
 8004154:	08015f48 	.word	0x08015f48
 8004158:	08015f7c 	.word	0x08015f7c

0800415c <Memory_ReadInitFlag>:

// --- Nowe funkcje dla flagi inicjalizacji ---

bool Memory_ReadInitFlag(uint8_t* flag_value)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b088      	sub	sp, #32
 8004160:	af04      	add	r7, sp, #16
 8004162:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status;
    printf("Memory_ReadInitFlag: Odczyt flagi z adresu 0x%02X...\r\n", EEPROM_INIT_FLAG_ADDRESS);
 8004164:	2108      	movs	r1, #8
 8004166:	4813      	ldr	r0, [pc, #76]	@ (80041b4 <Memory_ReadInitFlag+0x58>)
 8004168:	f00c ffb4 	bl	80110d4 <iprintf>
    status = HAL_I2C_Mem_Read(&hi2c1,
 800416c:	2364      	movs	r3, #100	@ 0x64
 800416e:	9302      	str	r3, [sp, #8]
 8004170:	2301      	movs	r3, #1
 8004172:	9301      	str	r3, [sp, #4]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	9300      	str	r3, [sp, #0]
 8004178:	2301      	movs	r3, #1
 800417a:	2208      	movs	r2, #8
 800417c:	21a0      	movs	r1, #160	@ 0xa0
 800417e:	480e      	ldr	r0, [pc, #56]	@ (80041b8 <Memory_ReadInitFlag+0x5c>)
 8004180:	f001 faf6 	bl	8005770 <HAL_I2C_Mem_Read>
 8004184:	4603      	mov	r3, r0
 8004186:	73fb      	strb	r3, [r7, #15]
                              EEPROM_INIT_FLAG_ADDRESS,
                              I2C_MEMADD_SIZE_8BIT, // Adres flagi też ma 1 bajt
                              flag_value,           // Odczytaj 1 bajt
                              1,
                              EEPROM_I2C_TIMEOUT);
    if (status == HAL_OK) {
 8004188:	7bfb      	ldrb	r3, [r7, #15]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d107      	bne.n	800419e <Memory_ReadInitFlag+0x42>
        printf("Memory_ReadInitFlag: Odczyt OK. Wartość flagi: 0x%02X\r\n", *flag_value);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	4619      	mov	r1, r3
 8004194:	4809      	ldr	r0, [pc, #36]	@ (80041bc <Memory_ReadInitFlag+0x60>)
 8004196:	f00c ff9d 	bl	80110d4 <iprintf>
        return true;
 800419a:	2301      	movs	r3, #1
 800419c:	e005      	b.n	80041aa <Memory_ReadInitFlag+0x4e>
    } else {
        printf("Memory_ReadInitFlag: BŁĄD odczytu flagi! Status HAL: %d\r\n", status);
 800419e:	7bfb      	ldrb	r3, [r7, #15]
 80041a0:	4619      	mov	r1, r3
 80041a2:	4807      	ldr	r0, [pc, #28]	@ (80041c0 <Memory_ReadInitFlag+0x64>)
 80041a4:	f00c ff96 	bl	80110d4 <iprintf>
        return false;
 80041a8:	2300      	movs	r3, #0
    }
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3710      	adds	r7, #16
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	08015fbc 	.word	0x08015fbc
 80041b8:	200002b0 	.word	0x200002b0
 80041bc:	08015ff4 	.word	0x08015ff4
 80041c0:	08016030 	.word	0x08016030

080041c4 <Memory_WriteInitFlag>:

bool Memory_WriteInitFlag(uint8_t flag_value)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b088      	sub	sp, #32
 80041c8:	af04      	add	r7, sp, #16
 80041ca:	4603      	mov	r3, r0
 80041cc:	71fb      	strb	r3, [r7, #7]
    HAL_StatusTypeDef status;
    printf("Memory_WriteInitFlag: Zapis flagi pod adresem 0x%02X. Wartość: 0x%02X\r\n",
 80041ce:	79fb      	ldrb	r3, [r7, #7]
 80041d0:	461a      	mov	r2, r3
 80041d2:	2108      	movs	r1, #8
 80041d4:	481b      	ldr	r0, [pc, #108]	@ (8004244 <Memory_WriteInitFlag+0x80>)
 80041d6:	f00c ff7d 	bl	80110d4 <iprintf>
           EEPROM_INIT_FLAG_ADDRESS, flag_value);

    status = HAL_I2C_Mem_Write(&hi2c1,
 80041da:	2364      	movs	r3, #100	@ 0x64
 80041dc:	9302      	str	r3, [sp, #8]
 80041de:	2301      	movs	r3, #1
 80041e0:	9301      	str	r3, [sp, #4]
 80041e2:	1dfb      	adds	r3, r7, #7
 80041e4:	9300      	str	r3, [sp, #0]
 80041e6:	2301      	movs	r3, #1
 80041e8:	2208      	movs	r2, #8
 80041ea:	21a0      	movs	r1, #160	@ 0xa0
 80041ec:	4816      	ldr	r0, [pc, #88]	@ (8004248 <Memory_WriteInitFlag+0x84>)
 80041ee:	f001 f9ab 	bl	8005548 <HAL_I2C_Mem_Write>
 80041f2:	4603      	mov	r3, r0
 80041f4:	73fb      	strb	r3, [r7, #15]
                               EEPROM_INIT_FLAG_ADDRESS,
                               I2C_MEMADD_SIZE_8BIT,
                               &flag_value,       // Zapisz 1 bajt
                               1,
                               EEPROM_I2C_TIMEOUT);
    if (status == HAL_OK) {
 80041f6:	7bfb      	ldrb	r3, [r7, #15]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d118      	bne.n	800422e <Memory_WriteInitFlag+0x6a>
        printf("Memory_WriteInitFlag: Transmisja I2C OK. Oczekiwanie na tW (%d ms)...\r\n", EEPROM_WRITE_TIME_MS);
 80041fc:	2105      	movs	r1, #5
 80041fe:	4813      	ldr	r0, [pc, #76]	@ (800424c <Memory_WriteInitFlag+0x88>)
 8004200:	f00c ff68 	bl	80110d4 <iprintf>
        HAL_Delay(EEPROM_WRITE_TIME_MS); // Odczekaj tW także po zapisie flagi
 8004204:	2005      	movs	r0, #5
 8004206:	f000 fc11 	bl	8004a2c <HAL_Delay>
         if (!IsEepromReady(2)) {
 800420a:	2002      	movs	r0, #2
 800420c:	f7ff feb0 	bl	8003f70 <IsEepromReady>
 8004210:	4603      	mov	r3, r0
 8004212:	f083 0301 	eor.w	r3, r3, #1
 8004216:	b2db      	uxtb	r3, r3
 8004218:	2b00      	cmp	r3, #0
 800421a:	d003      	beq.n	8004224 <Memory_WriteInitFlag+0x60>
             printf("Memory_WriteInitFlag: UWAGA - EEPROM nie potwierdził gotowości po tW.\r\n");
 800421c:	480c      	ldr	r0, [pc, #48]	@ (8004250 <Memory_WriteInitFlag+0x8c>)
 800421e:	f00c ffc1 	bl	80111a4 <puts>
 8004222:	e002      	b.n	800422a <Memory_WriteInitFlag+0x66>
        } else {
             printf("Memory_WriteInitFlag: Zapis flagi zakończony.\r\n");
 8004224:	480b      	ldr	r0, [pc, #44]	@ (8004254 <Memory_WriteInitFlag+0x90>)
 8004226:	f00c ffbd 	bl	80111a4 <puts>
        }
        return true;
 800422a:	2301      	movs	r3, #1
 800422c:	e005      	b.n	800423a <Memory_WriteInitFlag+0x76>
    } else {
        printf("Memory_WriteInitFlag: BŁĄD zapisu flagi! Status HAL: %d\r\n", status);
 800422e:	7bfb      	ldrb	r3, [r7, #15]
 8004230:	4619      	mov	r1, r3
 8004232:	4809      	ldr	r0, [pc, #36]	@ (8004258 <Memory_WriteInitFlag+0x94>)
 8004234:	f00c ff4e 	bl	80110d4 <iprintf>
        return false;
 8004238:	2300      	movs	r3, #0
    }
}
 800423a:	4618      	mov	r0, r3
 800423c:	3710      	adds	r7, #16
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	0801606c 	.word	0x0801606c
 8004248:	200002b0 	.word	0x200002b0
 800424c:	080160b8 	.word	0x080160b8
 8004250:	08016100 	.word	0x08016100
 8004254:	0801614c 	.word	0x0801614c
 8004258:	0801617c 	.word	0x0801617c

0800425c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004262:	4b0a      	ldr	r3, [pc, #40]	@ (800428c <HAL_MspInit+0x30>)
 8004264:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004268:	4a08      	ldr	r2, [pc, #32]	@ (800428c <HAL_MspInit+0x30>)
 800426a:	f043 0304 	orr.w	r3, r3, #4
 800426e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004272:	4b06      	ldr	r3, [pc, #24]	@ (800428c <HAL_MspInit+0x30>)
 8004274:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004278:	f003 0304 	and.w	r3, r3, #4
 800427c:	607b      	str	r3, [r7, #4]
 800427e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004280:	bf00      	nop
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr
 800428c:	46020c00 	.word	0x46020c00

08004290 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8004290:	b480      	push	{r7}
 8004292:	b085      	sub	sp, #20
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a0b      	ldr	r2, [pc, #44]	@ (80042cc <HAL_CRC_MspInit+0x3c>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d10e      	bne.n	80042c0 <HAL_CRC_MspInit+0x30>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80042a2:	4b0b      	ldr	r3, [pc, #44]	@ (80042d0 <HAL_CRC_MspInit+0x40>)
 80042a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042a8:	4a09      	ldr	r2, [pc, #36]	@ (80042d0 <HAL_CRC_MspInit+0x40>)
 80042aa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80042ae:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80042b2:	4b07      	ldr	r3, [pc, #28]	@ (80042d0 <HAL_CRC_MspInit+0x40>)
 80042b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80042bc:	60fb      	str	r3, [r7, #12]
 80042be:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 80042c0:	bf00      	nop
 80042c2:	3714      	adds	r7, #20
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr
 80042cc:	40023000 	.word	0x40023000
 80042d0:	46020c00 	.word	0x46020c00

080042d4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b0ba      	sub	sp, #232	@ 0xe8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042dc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80042e0:	2200      	movs	r2, #0
 80042e2:	601a      	str	r2, [r3, #0]
 80042e4:	605a      	str	r2, [r3, #4]
 80042e6:	609a      	str	r2, [r3, #8]
 80042e8:	60da      	str	r2, [r3, #12]
 80042ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80042ec:	f107 0310 	add.w	r3, r7, #16
 80042f0:	22c0      	movs	r2, #192	@ 0xc0
 80042f2:	2100      	movs	r1, #0
 80042f4:	4618      	mov	r0, r3
 80042f6:	f00d f867 	bl	80113c8 <memset>
  if(hi2c->Instance==I2C1)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a26      	ldr	r2, [pc, #152]	@ (8004398 <HAL_I2C_MspInit+0xc4>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d144      	bne.n	800438e <HAL_I2C_MspInit+0xba>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004304:	f04f 0240 	mov.w	r2, #64	@ 0x40
 8004308:	f04f 0300 	mov.w	r3, #0
 800430c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004310:	2300      	movs	r3, #0
 8004312:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004314:	f107 0310 	add.w	r3, r7, #16
 8004318:	4618      	mov	r0, r3
 800431a:	f003 fadb 	bl	80078d4 <HAL_RCCEx_PeriphCLKConfig>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d001      	beq.n	8004328 <HAL_I2C_MspInit+0x54>
    {
      Error_Handler();
 8004324:	f7ff fe1e 	bl	8003f64 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004328:	4b1c      	ldr	r3, [pc, #112]	@ (800439c <HAL_I2C_MspInit+0xc8>)
 800432a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800432e:	4a1b      	ldr	r2, [pc, #108]	@ (800439c <HAL_I2C_MspInit+0xc8>)
 8004330:	f043 0302 	orr.w	r3, r3, #2
 8004334:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004338:	4b18      	ldr	r3, [pc, #96]	@ (800439c <HAL_I2C_MspInit+0xc8>)
 800433a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800433e:	f003 0302 	and.w	r3, r3, #2
 8004342:	60fb      	str	r3, [r7, #12]
 8004344:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004346:	23c0      	movs	r3, #192	@ 0xc0
 8004348:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800434c:	2312      	movs	r3, #18
 800434e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004352:	2300      	movs	r3, #0
 8004354:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004358:	2300      	movs	r3, #0
 800435a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800435e:	2304      	movs	r3, #4
 8004360:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004364:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8004368:	4619      	mov	r1, r3
 800436a:	480d      	ldr	r0, [pc, #52]	@ (80043a0 <HAL_I2C_MspInit+0xcc>)
 800436c:	f000 fe08 	bl	8004f80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004370:	4b0a      	ldr	r3, [pc, #40]	@ (800439c <HAL_I2C_MspInit+0xc8>)
 8004372:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004376:	4a09      	ldr	r2, [pc, #36]	@ (800439c <HAL_I2C_MspInit+0xc8>)
 8004378:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800437c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004380:	4b06      	ldr	r3, [pc, #24]	@ (800439c <HAL_I2C_MspInit+0xc8>)
 8004382:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004386:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800438a:	60bb      	str	r3, [r7, #8]
 800438c:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800438e:	bf00      	nop
 8004390:	37e8      	adds	r7, #232	@ 0xe8
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	40005400 	.word	0x40005400
 800439c:	46020c00 	.word	0x46020c00
 80043a0:	42020400 	.word	0x42020400

080043a4 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b0b4      	sub	sp, #208	@ 0xd0
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80043ac:	f107 0310 	add.w	r3, r7, #16
 80043b0:	22c0      	movs	r2, #192	@ 0xc0
 80043b2:	2100      	movs	r1, #0
 80043b4:	4618      	mov	r0, r3
 80043b6:	f00d f807 	bl	80113c8 <memset>
  if(hrtc->Instance==RTC)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a1d      	ldr	r2, [pc, #116]	@ (8004434 <HAL_RTC_MspInit+0x90>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d132      	bne.n	800442a <HAL_RTC_MspInit+0x86>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80043c4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80043c8:	f04f 0300 	mov.w	r3, #0
 80043cc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80043d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80043d4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80043d8:	f107 0310 	add.w	r3, r7, #16
 80043dc:	4618      	mov	r0, r3
 80043de:	f003 fa79 	bl	80078d4 <HAL_RCCEx_PeriphCLKConfig>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d001      	beq.n	80043ec <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 80043e8:	f7ff fdbc 	bl	8003f64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80043ec:	4b12      	ldr	r3, [pc, #72]	@ (8004438 <HAL_RTC_MspInit+0x94>)
 80043ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80043f2:	4a11      	ldr	r2, [pc, #68]	@ (8004438 <HAL_RTC_MspInit+0x94>)
 80043f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043f8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80043fc:	4b0e      	ldr	r3, [pc, #56]	@ (8004438 <HAL_RTC_MspInit+0x94>)
 80043fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004402:	4a0d      	ldr	r2, [pc, #52]	@ (8004438 <HAL_RTC_MspInit+0x94>)
 8004404:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004408:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 800440c:	4b0a      	ldr	r3, [pc, #40]	@ (8004438 <HAL_RTC_MspInit+0x94>)
 800440e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004412:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004416:	60fb      	str	r3, [r7, #12]
 8004418:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 800441a:	4b07      	ldr	r3, [pc, #28]	@ (8004438 <HAL_RTC_MspInit+0x94>)
 800441c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004420:	4a05      	ldr	r2, [pc, #20]	@ (8004438 <HAL_RTC_MspInit+0x94>)
 8004422:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004426:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8

    /* USER CODE END RTC_MspInit 1 */

  }

}
 800442a:	bf00      	nop
 800442c:	37d0      	adds	r7, #208	@ 0xd0
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	46007800 	.word	0x46007800
 8004438:	46020c00 	.word	0x46020c00

0800443c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b0ba      	sub	sp, #232	@ 0xe8
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004444:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8004448:	2200      	movs	r2, #0
 800444a:	601a      	str	r2, [r3, #0]
 800444c:	605a      	str	r2, [r3, #4]
 800444e:	609a      	str	r2, [r3, #8]
 8004450:	60da      	str	r2, [r3, #12]
 8004452:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004454:	f107 0310 	add.w	r3, r7, #16
 8004458:	22c0      	movs	r2, #192	@ 0xc0
 800445a:	2100      	movs	r1, #0
 800445c:	4618      	mov	r0, r3
 800445e:	f00c ffb3 	bl	80113c8 <memset>
  if(hspi->Instance==SPI1)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a27      	ldr	r2, [pc, #156]	@ (8004504 <HAL_SPI_MspInit+0xc8>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d146      	bne.n	80044fa <HAL_SPI_MspInit+0xbe>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800446c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004470:	f04f 0300 	mov.w	r3, #0
 8004474:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 8004478:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800447c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004480:	f107 0310 	add.w	r3, r7, #16
 8004484:	4618      	mov	r0, r3
 8004486:	f003 fa25 	bl	80078d4 <HAL_RCCEx_PeriphCLKConfig>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d001      	beq.n	8004494 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8004490:	f7ff fd68 	bl	8003f64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004494:	4b1c      	ldr	r3, [pc, #112]	@ (8004508 <HAL_SPI_MspInit+0xcc>)
 8004496:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800449a:	4a1b      	ldr	r2, [pc, #108]	@ (8004508 <HAL_SPI_MspInit+0xcc>)
 800449c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80044a0:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80044a4:	4b18      	ldr	r3, [pc, #96]	@ (8004508 <HAL_SPI_MspInit+0xcc>)
 80044a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80044aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80044ae:	60fb      	str	r3, [r7, #12]
 80044b0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044b2:	4b15      	ldr	r3, [pc, #84]	@ (8004508 <HAL_SPI_MspInit+0xcc>)
 80044b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80044b8:	4a13      	ldr	r2, [pc, #76]	@ (8004508 <HAL_SPI_MspInit+0xcc>)
 80044ba:	f043 0301 	orr.w	r3, r3, #1
 80044be:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80044c2:	4b11      	ldr	r3, [pc, #68]	@ (8004508 <HAL_SPI_MspInit+0xcc>)
 80044c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80044c8:	f003 0301 	and.w	r3, r3, #1
 80044cc:	60bb      	str	r3, [r7, #8]
 80044ce:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 80044d0:	23c2      	movs	r3, #194	@ 0xc2
 80044d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044d6:	2302      	movs	r3, #2
 80044d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044dc:	2300      	movs	r3, #0
 80044de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044e2:	2300      	movs	r3, #0
 80044e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80044e8:	2305      	movs	r3, #5
 80044ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044ee:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80044f2:	4619      	mov	r1, r3
 80044f4:	4805      	ldr	r0, [pc, #20]	@ (800450c <HAL_SPI_MspInit+0xd0>)
 80044f6:	f000 fd43 	bl	8004f80 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80044fa:	bf00      	nop
 80044fc:	37e8      	adds	r7, #232	@ 0xe8
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	40013000 	.word	0x40013000
 8004508:	46020c00 	.word	0x46020c00
 800450c:	42020000 	.word	0x42020000

08004510 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b0ba      	sub	sp, #232	@ 0xe8
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004518:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800451c:	2200      	movs	r2, #0
 800451e:	601a      	str	r2, [r3, #0]
 8004520:	605a      	str	r2, [r3, #4]
 8004522:	609a      	str	r2, [r3, #8]
 8004524:	60da      	str	r2, [r3, #12]
 8004526:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004528:	f107 0310 	add.w	r3, r7, #16
 800452c:	22c0      	movs	r2, #192	@ 0xc0
 800452e:	2100      	movs	r1, #0
 8004530:	4618      	mov	r0, r3
 8004532:	f00c ff49 	bl	80113c8 <memset>
  if(huart->Instance==USART1)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a26      	ldr	r2, [pc, #152]	@ (80045d4 <HAL_UART_MspInit+0xc4>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d145      	bne.n	80045cc <HAL_UART_MspInit+0xbc>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004540:	f04f 0201 	mov.w	r2, #1
 8004544:	f04f 0300 	mov.w	r3, #0
 8004548:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800454c:	2300      	movs	r3, #0
 800454e:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004550:	f107 0310 	add.w	r3, r7, #16
 8004554:	4618      	mov	r0, r3
 8004556:	f003 f9bd 	bl	80078d4 <HAL_RCCEx_PeriphCLKConfig>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d001      	beq.n	8004564 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8004560:	f7ff fd00 	bl	8003f64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004564:	4b1c      	ldr	r3, [pc, #112]	@ (80045d8 <HAL_UART_MspInit+0xc8>)
 8004566:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800456a:	4a1b      	ldr	r2, [pc, #108]	@ (80045d8 <HAL_UART_MspInit+0xc8>)
 800456c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004570:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8004574:	4b18      	ldr	r3, [pc, #96]	@ (80045d8 <HAL_UART_MspInit+0xc8>)
 8004576:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800457a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800457e:	60fb      	str	r3, [r7, #12]
 8004580:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004582:	4b15      	ldr	r3, [pc, #84]	@ (80045d8 <HAL_UART_MspInit+0xc8>)
 8004584:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004588:	4a13      	ldr	r2, [pc, #76]	@ (80045d8 <HAL_UART_MspInit+0xc8>)
 800458a:	f043 0301 	orr.w	r3, r3, #1
 800458e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004592:	4b11      	ldr	r3, [pc, #68]	@ (80045d8 <HAL_UART_MspInit+0xc8>)
 8004594:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004598:	f003 0301 	and.w	r3, r3, #1
 800459c:	60bb      	str	r3, [r7, #8]
 800459e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80045a0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80045a4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045a8:	2302      	movs	r3, #2
 80045aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045ae:	2300      	movs	r3, #0
 80045b0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045b4:	2300      	movs	r3, #0
 80045b6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80045ba:	2307      	movs	r3, #7
 80045bc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045c0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80045c4:	4619      	mov	r1, r3
 80045c6:	4805      	ldr	r0, [pc, #20]	@ (80045dc <HAL_UART_MspInit+0xcc>)
 80045c8:	f000 fcda 	bl	8004f80 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80045cc:	bf00      	nop
 80045ce:	37e8      	adds	r7, #232	@ 0xe8
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	40013800 	.word	0x40013800
 80045d8:	46020c00 	.word	0x46020c00
 80045dc:	42020000 	.word	0x42020000

080045e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80045e0:	b480      	push	{r7}
 80045e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80045e4:	bf00      	nop
 80045e6:	e7fd      	b.n	80045e4 <NMI_Handler+0x4>

080045e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80045e8:	b480      	push	{r7}
 80045ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80045ec:	bf00      	nop
 80045ee:	e7fd      	b.n	80045ec <HardFault_Handler+0x4>

080045f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80045f0:	b480      	push	{r7}
 80045f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80045f4:	bf00      	nop
 80045f6:	e7fd      	b.n	80045f4 <MemManage_Handler+0x4>

080045f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80045f8:	b480      	push	{r7}
 80045fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80045fc:	bf00      	nop
 80045fe:	e7fd      	b.n	80045fc <BusFault_Handler+0x4>

08004600 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004600:	b480      	push	{r7}
 8004602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004604:	bf00      	nop
 8004606:	e7fd      	b.n	8004604 <UsageFault_Handler+0x4>

08004608 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004608:	b480      	push	{r7}
 800460a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800460c:	bf00      	nop
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr

08004616 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004616:	b480      	push	{r7}
 8004618:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800461a:	bf00      	nop
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004624:	b480      	push	{r7}
 8004626:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004628:	bf00      	nop
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr

08004632 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004632:	b580      	push	{r7, lr}
 8004634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004636:	f000 f9d9 	bl	80049ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800463a:	bf00      	nop
 800463c:	bd80      	pop	{r7, pc}

0800463e <EXTI8_IRQHandler>:

/**
  * @brief This function handles EXTI Line8 interrupt.
  */
void EXTI8_IRQHandler(void)
{
 800463e:	b580      	push	{r7, lr}
 8004640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI8_IRQn 0 */

  /* USER CODE END EXTI8_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_TRANSMIT_Pin);
 8004642:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8004646:	f000 febd 	bl	80053c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI8_IRQn 1 */

  /* USER CODE END EXTI8_IRQn 1 */
}
 800464a:	bf00      	nop
 800464c:	bd80      	pop	{r7, pc}

0800464e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800464e:	b480      	push	{r7}
 8004650:	af00      	add	r7, sp, #0
  return 1;
 8004652:	2301      	movs	r3, #1
}
 8004654:	4618      	mov	r0, r3
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr

0800465e <_kill>:

int _kill(int pid, int sig)
{
 800465e:	b580      	push	{r7, lr}
 8004660:	b082      	sub	sp, #8
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
 8004666:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004668:	f00c ff00 	bl	801146c <__errno>
 800466c:	4603      	mov	r3, r0
 800466e:	2216      	movs	r2, #22
 8004670:	601a      	str	r2, [r3, #0]
  return -1;
 8004672:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004676:	4618      	mov	r0, r3
 8004678:	3708      	adds	r7, #8
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}

0800467e <_exit>:

void _exit (int status)
{
 800467e:	b580      	push	{r7, lr}
 8004680:	b082      	sub	sp, #8
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004686:	f04f 31ff 	mov.w	r1, #4294967295
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f7ff ffe7 	bl	800465e <_kill>
  while (1) {}    /* Make sure we hang here */
 8004690:	bf00      	nop
 8004692:	e7fd      	b.n	8004690 <_exit+0x12>

08004694 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b086      	sub	sp, #24
 8004698:	af00      	add	r7, sp, #0
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	60b9      	str	r1, [r7, #8]
 800469e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046a0:	2300      	movs	r3, #0
 80046a2:	617b      	str	r3, [r7, #20]
 80046a4:	e00a      	b.n	80046bc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80046a6:	f3af 8000 	nop.w
 80046aa:	4601      	mov	r1, r0
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	1c5a      	adds	r2, r3, #1
 80046b0:	60ba      	str	r2, [r7, #8]
 80046b2:	b2ca      	uxtb	r2, r1
 80046b4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	3301      	adds	r3, #1
 80046ba:	617b      	str	r3, [r7, #20]
 80046bc:	697a      	ldr	r2, [r7, #20]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	dbf0      	blt.n	80046a6 <_read+0x12>
  }

  return len;
 80046c4:	687b      	ldr	r3, [r7, #4]
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3718      	adds	r7, #24
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}

080046ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80046ce:	b580      	push	{r7, lr}
 80046d0:	b086      	sub	sp, #24
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	60f8      	str	r0, [r7, #12]
 80046d6:	60b9      	str	r1, [r7, #8]
 80046d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046da:	2300      	movs	r3, #0
 80046dc:	617b      	str	r3, [r7, #20]
 80046de:	e009      	b.n	80046f4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	1c5a      	adds	r2, r3, #1
 80046e4:	60ba      	str	r2, [r7, #8]
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	4618      	mov	r0, r3
 80046ea:	f7ff f8fb 	bl	80038e4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	3301      	adds	r3, #1
 80046f2:	617b      	str	r3, [r7, #20]
 80046f4:	697a      	ldr	r2, [r7, #20]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	dbf1      	blt.n	80046e0 <_write+0x12>
  }
  return len;
 80046fc:	687b      	ldr	r3, [r7, #4]
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3718      	adds	r7, #24
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}

08004706 <_close>:

int _close(int file)
{
 8004706:	b480      	push	{r7}
 8004708:	b083      	sub	sp, #12
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800470e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004712:	4618      	mov	r0, r3
 8004714:	370c      	adds	r7, #12
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr

0800471e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800471e:	b480      	push	{r7}
 8004720:	b083      	sub	sp, #12
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
 8004726:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800472e:	605a      	str	r2, [r3, #4]
  return 0;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	370c      	adds	r7, #12
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr

0800473e <_isatty>:

int _isatty(int file)
{
 800473e:	b480      	push	{r7}
 8004740:	b083      	sub	sp, #12
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004746:	2301      	movs	r3, #1
}
 8004748:	4618      	mov	r0, r3
 800474a:	370c      	adds	r7, #12
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr

08004754 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004754:	b480      	push	{r7}
 8004756:	b085      	sub	sp, #20
 8004758:	af00      	add	r7, sp, #0
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	60b9      	str	r1, [r7, #8]
 800475e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	3714      	adds	r7, #20
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
	...

08004770 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b086      	sub	sp, #24
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004778:	4a14      	ldr	r2, [pc, #80]	@ (80047cc <_sbrk+0x5c>)
 800477a:	4b15      	ldr	r3, [pc, #84]	@ (80047d0 <_sbrk+0x60>)
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004784:	4b13      	ldr	r3, [pc, #76]	@ (80047d4 <_sbrk+0x64>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d102      	bne.n	8004792 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800478c:	4b11      	ldr	r3, [pc, #68]	@ (80047d4 <_sbrk+0x64>)
 800478e:	4a12      	ldr	r2, [pc, #72]	@ (80047d8 <_sbrk+0x68>)
 8004790:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004792:	4b10      	ldr	r3, [pc, #64]	@ (80047d4 <_sbrk+0x64>)
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4413      	add	r3, r2
 800479a:	693a      	ldr	r2, [r7, #16]
 800479c:	429a      	cmp	r2, r3
 800479e:	d207      	bcs.n	80047b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80047a0:	f00c fe64 	bl	801146c <__errno>
 80047a4:	4603      	mov	r3, r0
 80047a6:	220c      	movs	r2, #12
 80047a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80047aa:	f04f 33ff 	mov.w	r3, #4294967295
 80047ae:	e009      	b.n	80047c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80047b0:	4b08      	ldr	r3, [pc, #32]	@ (80047d4 <_sbrk+0x64>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80047b6:	4b07      	ldr	r3, [pc, #28]	@ (80047d4 <_sbrk+0x64>)
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4413      	add	r3, r2
 80047be:	4a05      	ldr	r2, [pc, #20]	@ (80047d4 <_sbrk+0x64>)
 80047c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80047c2:	68fb      	ldr	r3, [r7, #12]
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3718      	adds	r7, #24
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	20040000 	.word	0x20040000
 80047d0:	00000400 	.word	0x00000400
 80047d4:	2000045c 	.word	0x2000045c
 80047d8:	20000950 	.word	0x20000950

080047dc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80047dc:	b480      	push	{r7}
 80047de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80047e0:	4b18      	ldr	r3, [pc, #96]	@ (8004844 <SystemInit+0x68>)
 80047e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047e6:	4a17      	ldr	r2, [pc, #92]	@ (8004844 <SystemInit+0x68>)
 80047e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80047ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80047f0:	4b15      	ldr	r3, [pc, #84]	@ (8004848 <SystemInit+0x6c>)
 80047f2:	2201      	movs	r2, #1
 80047f4:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80047f6:	4b14      	ldr	r3, [pc, #80]	@ (8004848 <SystemInit+0x6c>)
 80047f8:	2200      	movs	r2, #0
 80047fa:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80047fc:	4b12      	ldr	r3, [pc, #72]	@ (8004848 <SystemInit+0x6c>)
 80047fe:	2200      	movs	r2, #0
 8004800:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8004802:	4b11      	ldr	r3, [pc, #68]	@ (8004848 <SystemInit+0x6c>)
 8004804:	2200      	movs	r2, #0
 8004806:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8004808:	4b0f      	ldr	r3, [pc, #60]	@ (8004848 <SystemInit+0x6c>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a0e      	ldr	r2, [pc, #56]	@ (8004848 <SystemInit+0x6c>)
 800480e:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8004812:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8004816:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8004818:	4b0b      	ldr	r3, [pc, #44]	@ (8004848 <SystemInit+0x6c>)
 800481a:	2200      	movs	r2, #0
 800481c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800481e:	4b0a      	ldr	r3, [pc, #40]	@ (8004848 <SystemInit+0x6c>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a09      	ldr	r2, [pc, #36]	@ (8004848 <SystemInit+0x6c>)
 8004824:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004828:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800482a:	4b07      	ldr	r3, [pc, #28]	@ (8004848 <SystemInit+0x6c>)
 800482c:	2200      	movs	r2, #0
 800482e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004830:	4b04      	ldr	r3, [pc, #16]	@ (8004844 <SystemInit+0x68>)
 8004832:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004836:	609a      	str	r2, [r3, #8]
  #endif
}
 8004838:	bf00      	nop
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop
 8004844:	e000ed00 	.word	0xe000ed00
 8004848:	46020c00 	.word	0x46020c00

0800484c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800484c:	480d      	ldr	r0, [pc, #52]	@ (8004884 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800484e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004850:	f7ff ffc4 	bl	80047dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004854:	480c      	ldr	r0, [pc, #48]	@ (8004888 <LoopForever+0x6>)
  ldr r1, =_edata
 8004856:	490d      	ldr	r1, [pc, #52]	@ (800488c <LoopForever+0xa>)
  ldr r2, =_sidata
 8004858:	4a0d      	ldr	r2, [pc, #52]	@ (8004890 <LoopForever+0xe>)
  movs r3, #0
 800485a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800485c:	e002      	b.n	8004864 <LoopCopyDataInit>

0800485e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800485e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004860:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004862:	3304      	adds	r3, #4

08004864 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004864:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004866:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004868:	d3f9      	bcc.n	800485e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800486a:	4a0a      	ldr	r2, [pc, #40]	@ (8004894 <LoopForever+0x12>)
  ldr r4, =_ebss
 800486c:	4c0a      	ldr	r4, [pc, #40]	@ (8004898 <LoopForever+0x16>)
  movs r3, #0
 800486e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004870:	e001      	b.n	8004876 <LoopFillZerobss>

08004872 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004872:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004874:	3204      	adds	r2, #4

08004876 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004876:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004878:	d3fb      	bcc.n	8004872 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800487a:	f00c fdfd 	bl	8011478 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800487e:	f7ff f897 	bl	80039b0 <main>

08004882 <LoopForever>:

LoopForever:
    b LoopForever
 8004882:	e7fe      	b.n	8004882 <LoopForever>
  ldr   r0, =_estack
 8004884:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8004888:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800488c:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8004890:	08016f2c 	.word	0x08016f2c
  ldr r2, =_sbss
 8004894:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8004898:	2000094c 	.word	0x2000094c

0800489c <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800489c:	e7fe      	b.n	800489c <ADC1_IRQHandler>
	...

080048a0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80048a4:	4b12      	ldr	r3, [pc, #72]	@ (80048f0 <HAL_Init+0x50>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a11      	ldr	r2, [pc, #68]	@ (80048f0 <HAL_Init+0x50>)
 80048aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80048b0:	2003      	movs	r0, #3
 80048b2:	f000 f98c 	bl	8004bce <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80048b6:	f002 fe2f 	bl	8007518 <HAL_RCC_GetSysClockFreq>
 80048ba:	4602      	mov	r2, r0
 80048bc:	4b0d      	ldr	r3, [pc, #52]	@ (80048f4 <HAL_Init+0x54>)
 80048be:	6a1b      	ldr	r3, [r3, #32]
 80048c0:	f003 030f 	and.w	r3, r3, #15
 80048c4:	490c      	ldr	r1, [pc, #48]	@ (80048f8 <HAL_Init+0x58>)
 80048c6:	5ccb      	ldrb	r3, [r1, r3]
 80048c8:	fa22 f303 	lsr.w	r3, r2, r3
 80048cc:	4a0b      	ldr	r2, [pc, #44]	@ (80048fc <HAL_Init+0x5c>)
 80048ce:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80048d0:	2004      	movs	r0, #4
 80048d2:	f000 f9d1 	bl	8004c78 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80048d6:	200f      	movs	r0, #15
 80048d8:	f000 f812 	bl	8004900 <HAL_InitTick>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d001      	beq.n	80048e6 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e002      	b.n	80048ec <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80048e6:	f7ff fcb9 	bl	800425c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	40022000 	.word	0x40022000
 80048f4:	46020c00 	.word	0x46020c00
 80048f8:	080163a0 	.word	0x080163a0
 80048fc:	20000004 	.word	0x20000004

08004900 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8004908:	2300      	movs	r3, #0
 800490a:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 800490c:	4b33      	ldr	r3, [pc, #204]	@ (80049dc <HAL_InitTick+0xdc>)
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d101      	bne.n	8004918 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e05c      	b.n	80049d2 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8004918:	4b31      	ldr	r3, [pc, #196]	@ (80049e0 <HAL_InitTick+0xe0>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0304 	and.w	r3, r3, #4
 8004920:	2b04      	cmp	r3, #4
 8004922:	d10c      	bne.n	800493e <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8004924:	4b2f      	ldr	r3, [pc, #188]	@ (80049e4 <HAL_InitTick+0xe4>)
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	4b2c      	ldr	r3, [pc, #176]	@ (80049dc <HAL_InitTick+0xdc>)
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	4619      	mov	r1, r3
 800492e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004932:	fbb3 f3f1 	udiv	r3, r3, r1
 8004936:	fbb2 f3f3 	udiv	r3, r2, r3
 800493a:	60fb      	str	r3, [r7, #12]
 800493c:	e037      	b.n	80049ae <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 800493e:	f000 f9f3 	bl	8004d28 <HAL_SYSTICK_GetCLKSourceConfig>
 8004942:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	2b02      	cmp	r3, #2
 8004948:	d023      	beq.n	8004992 <HAL_InitTick+0x92>
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	2b02      	cmp	r3, #2
 800494e:	d82d      	bhi.n	80049ac <HAL_InitTick+0xac>
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d003      	beq.n	800495e <HAL_InitTick+0x5e>
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	2b01      	cmp	r3, #1
 800495a:	d00d      	beq.n	8004978 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 800495c:	e026      	b.n	80049ac <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 800495e:	4b21      	ldr	r3, [pc, #132]	@ (80049e4 <HAL_InitTick+0xe4>)
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	4b1e      	ldr	r3, [pc, #120]	@ (80049dc <HAL_InitTick+0xdc>)
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	4619      	mov	r1, r3
 8004968:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 800496c:	fbb3 f3f1 	udiv	r3, r3, r1
 8004970:	fbb2 f3f3 	udiv	r3, r2, r3
 8004974:	60fb      	str	r3, [r7, #12]
        break;
 8004976:	e01a      	b.n	80049ae <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8004978:	4b18      	ldr	r3, [pc, #96]	@ (80049dc <HAL_InitTick+0xdc>)
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	461a      	mov	r2, r3
 800497e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004982:	fbb3 f3f2 	udiv	r3, r3, r2
 8004986:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800498a:	fbb2 f3f3 	udiv	r3, r2, r3
 800498e:	60fb      	str	r3, [r7, #12]
        break;
 8004990:	e00d      	b.n	80049ae <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8004992:	4b12      	ldr	r3, [pc, #72]	@ (80049dc <HAL_InitTick+0xdc>)
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	461a      	mov	r2, r3
 8004998:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800499c:	fbb3 f3f2 	udiv	r3, r3, r2
 80049a0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80049a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049a8:	60fb      	str	r3, [r7, #12]
        break;
 80049aa:	e000      	b.n	80049ae <HAL_InitTick+0xae>
        break;
 80049ac:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 80049ae:	68f8      	ldr	r0, [r7, #12]
 80049b0:	f000 f940 	bl	8004c34 <HAL_SYSTICK_Config>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d001      	beq.n	80049be <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e009      	b.n	80049d2 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80049be:	2200      	movs	r2, #0
 80049c0:	6879      	ldr	r1, [r7, #4]
 80049c2:	f04f 30ff 	mov.w	r0, #4294967295
 80049c6:	f000 f90d 	bl	8004be4 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 80049ca:	4a07      	ldr	r2, [pc, #28]	@ (80049e8 <HAL_InitTick+0xe8>)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3710      	adds	r7, #16
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	2000000c 	.word	0x2000000c
 80049e0:	e000e010 	.word	0xe000e010
 80049e4:	20000004 	.word	0x20000004
 80049e8:	20000008 	.word	0x20000008

080049ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80049ec:	b480      	push	{r7}
 80049ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80049f0:	4b06      	ldr	r3, [pc, #24]	@ (8004a0c <HAL_IncTick+0x20>)
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	461a      	mov	r2, r3
 80049f6:	4b06      	ldr	r3, [pc, #24]	@ (8004a10 <HAL_IncTick+0x24>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4413      	add	r3, r2
 80049fc:	4a04      	ldr	r2, [pc, #16]	@ (8004a10 <HAL_IncTick+0x24>)
 80049fe:	6013      	str	r3, [r2, #0]
}
 8004a00:	bf00      	nop
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop
 8004a0c:	2000000c 	.word	0x2000000c
 8004a10:	20000460 	.word	0x20000460

08004a14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004a14:	b480      	push	{r7}
 8004a16:	af00      	add	r7, sp, #0
  return uwTick;
 8004a18:	4b03      	ldr	r3, [pc, #12]	@ (8004a28 <HAL_GetTick+0x14>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	20000460 	.word	0x20000460

08004a2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004a34:	f7ff ffee 	bl	8004a14 <HAL_GetTick>
 8004a38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a44:	d005      	beq.n	8004a52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004a46:	4b0a      	ldr	r3, [pc, #40]	@ (8004a70 <HAL_Delay+0x44>)
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	4413      	add	r3, r2
 8004a50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004a52:	bf00      	nop
 8004a54:	f7ff ffde 	bl	8004a14 <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d8f7      	bhi.n	8004a54 <HAL_Delay+0x28>
  {
  }
}
 8004a64:	bf00      	nop
 8004a66:	bf00      	nop
 8004a68:	3710      	adds	r7, #16
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	2000000c 	.word	0x2000000c

08004a74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b085      	sub	sp, #20
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f003 0307 	and.w	r3, r3, #7
 8004a82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a84:	4b0c      	ldr	r3, [pc, #48]	@ (8004ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a8a:	68ba      	ldr	r2, [r7, #8]
 8004a8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004a90:	4013      	ands	r3, r2
 8004a92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004aa0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004aa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004aa6:	4a04      	ldr	r2, [pc, #16]	@ (8004ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	60d3      	str	r3, [r2, #12]
}
 8004aac:	bf00      	nop
 8004aae:	3714      	adds	r7, #20
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr
 8004ab8:	e000ed00 	.word	0xe000ed00

08004abc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004abc:	b480      	push	{r7}
 8004abe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ac0:	4b04      	ldr	r3, [pc, #16]	@ (8004ad4 <__NVIC_GetPriorityGrouping+0x18>)
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	0a1b      	lsrs	r3, r3, #8
 8004ac6:	f003 0307 	and.w	r3, r3, #7
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr
 8004ad4:	e000ed00 	.word	0xe000ed00

08004ad8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	4603      	mov	r3, r0
 8004ae0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	db0b      	blt.n	8004b02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004aea:	79fb      	ldrb	r3, [r7, #7]
 8004aec:	f003 021f 	and.w	r2, r3, #31
 8004af0:	4907      	ldr	r1, [pc, #28]	@ (8004b10 <__NVIC_EnableIRQ+0x38>)
 8004af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004af6:	095b      	lsrs	r3, r3, #5
 8004af8:	2001      	movs	r0, #1
 8004afa:	fa00 f202 	lsl.w	r2, r0, r2
 8004afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004b02:	bf00      	nop
 8004b04:	370c      	adds	r7, #12
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	e000e100 	.word	0xe000e100

08004b14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	6039      	str	r1, [r7, #0]
 8004b1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	db0a      	blt.n	8004b3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	b2da      	uxtb	r2, r3
 8004b2c:	490c      	ldr	r1, [pc, #48]	@ (8004b60 <__NVIC_SetPriority+0x4c>)
 8004b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b32:	0112      	lsls	r2, r2, #4
 8004b34:	b2d2      	uxtb	r2, r2
 8004b36:	440b      	add	r3, r1
 8004b38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b3c:	e00a      	b.n	8004b54 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	b2da      	uxtb	r2, r3
 8004b42:	4908      	ldr	r1, [pc, #32]	@ (8004b64 <__NVIC_SetPriority+0x50>)
 8004b44:	79fb      	ldrb	r3, [r7, #7]
 8004b46:	f003 030f 	and.w	r3, r3, #15
 8004b4a:	3b04      	subs	r3, #4
 8004b4c:	0112      	lsls	r2, r2, #4
 8004b4e:	b2d2      	uxtb	r2, r2
 8004b50:	440b      	add	r3, r1
 8004b52:	761a      	strb	r2, [r3, #24]
}
 8004b54:	bf00      	nop
 8004b56:	370c      	adds	r7, #12
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr
 8004b60:	e000e100 	.word	0xe000e100
 8004b64:	e000ed00 	.word	0xe000ed00

08004b68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b089      	sub	sp, #36	@ 0x24
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	60b9      	str	r1, [r7, #8]
 8004b72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f003 0307 	and.w	r3, r3, #7
 8004b7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	f1c3 0307 	rsb	r3, r3, #7
 8004b82:	2b04      	cmp	r3, #4
 8004b84:	bf28      	it	cs
 8004b86:	2304      	movcs	r3, #4
 8004b88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	3304      	adds	r3, #4
 8004b8e:	2b06      	cmp	r3, #6
 8004b90:	d902      	bls.n	8004b98 <NVIC_EncodePriority+0x30>
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	3b03      	subs	r3, #3
 8004b96:	e000      	b.n	8004b9a <NVIC_EncodePriority+0x32>
 8004b98:	2300      	movs	r3, #0
 8004b9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba6:	43da      	mvns	r2, r3
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	401a      	ands	r2, r3
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8004bba:	43d9      	mvns	r1, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bc0:	4313      	orrs	r3, r2
         );
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3724      	adds	r7, #36	@ 0x24
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr

08004bce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bce:	b580      	push	{r7, lr}
 8004bd0:	b082      	sub	sp, #8
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f7ff ff4c 	bl	8004a74 <__NVIC_SetPriorityGrouping>
}
 8004bdc:	bf00      	nop
 8004bde:	3708      	adds	r7, #8
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b086      	sub	sp, #24
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	4603      	mov	r3, r0
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	607a      	str	r2, [r7, #4]
 8004bf0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004bf2:	f7ff ff63 	bl	8004abc <__NVIC_GetPriorityGrouping>
 8004bf6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	68b9      	ldr	r1, [r7, #8]
 8004bfc:	6978      	ldr	r0, [r7, #20]
 8004bfe:	f7ff ffb3 	bl	8004b68 <NVIC_EncodePriority>
 8004c02:	4602      	mov	r2, r0
 8004c04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c08:	4611      	mov	r1, r2
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f7ff ff82 	bl	8004b14 <__NVIC_SetPriority>
}
 8004c10:	bf00      	nop
 8004c12:	3718      	adds	r7, #24
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b082      	sub	sp, #8
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	4603      	mov	r3, r0
 8004c20:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c26:	4618      	mov	r0, r3
 8004c28:	f7ff ff56 	bl	8004ad8 <__NVIC_EnableIRQ>
}
 8004c2c:	bf00      	nop
 8004c2e:	3708      	adds	r7, #8
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	3b01      	subs	r3, #1
 8004c40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c44:	d301      	bcc.n	8004c4a <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8004c46:	2301      	movs	r3, #1
 8004c48:	e00d      	b.n	8004c66 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8004c4a:	4a0a      	ldr	r2, [pc, #40]	@ (8004c74 <HAL_SYSTICK_Config+0x40>)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8004c52:	4b08      	ldr	r3, [pc, #32]	@ (8004c74 <HAL_SYSTICK_Config+0x40>)
 8004c54:	2200      	movs	r2, #0
 8004c56:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8004c58:	4b06      	ldr	r3, [pc, #24]	@ (8004c74 <HAL_SYSTICK_Config+0x40>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a05      	ldr	r2, [pc, #20]	@ (8004c74 <HAL_SYSTICK_Config+0x40>)
 8004c5e:	f043 0303 	orr.w	r3, r3, #3
 8004c62:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	370c      	adds	r7, #12
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr
 8004c72:	bf00      	nop
 8004c74:	e000e010 	.word	0xe000e010

08004c78 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2b04      	cmp	r3, #4
 8004c84:	d844      	bhi.n	8004d10 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8004c86:	a201      	add	r2, pc, #4	@ (adr r2, 8004c8c <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8004c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c8c:	08004caf 	.word	0x08004caf
 8004c90:	08004ccd 	.word	0x08004ccd
 8004c94:	08004cef 	.word	0x08004cef
 8004c98:	08004d11 	.word	0x08004d11
 8004c9c:	08004ca1 	.word	0x08004ca1
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8004ca0:	4b1f      	ldr	r3, [pc, #124]	@ (8004d20 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a1e      	ldr	r2, [pc, #120]	@ (8004d20 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004ca6:	f043 0304 	orr.w	r3, r3, #4
 8004caa:	6013      	str	r3, [r2, #0]
      break;
 8004cac:	e031      	b.n	8004d12 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8004cae:	4b1c      	ldr	r3, [pc, #112]	@ (8004d20 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a1b      	ldr	r2, [pc, #108]	@ (8004d20 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004cb4:	f023 0304 	bic.w	r3, r3, #4
 8004cb8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8004cba:	4b1a      	ldr	r3, [pc, #104]	@ (8004d24 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004cbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004cc0:	4a18      	ldr	r2, [pc, #96]	@ (8004d24 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004cc2:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8004cc6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8004cca:	e022      	b.n	8004d12 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8004ccc:	4b14      	ldr	r3, [pc, #80]	@ (8004d20 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a13      	ldr	r2, [pc, #76]	@ (8004d20 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004cd2:	f023 0304 	bic.w	r3, r3, #4
 8004cd6:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8004cd8:	4b12      	ldr	r3, [pc, #72]	@ (8004d24 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004cda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004cde:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8004ce2:	4a10      	ldr	r2, [pc, #64]	@ (8004d24 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004ce4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004ce8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8004cec:	e011      	b.n	8004d12 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8004cee:	4b0c      	ldr	r3, [pc, #48]	@ (8004d20 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a0b      	ldr	r2, [pc, #44]	@ (8004d20 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004cf4:	f023 0304 	bic.w	r3, r3, #4
 8004cf8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8004cfa:	4b0a      	ldr	r3, [pc, #40]	@ (8004d24 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004cfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d00:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8004d04:	4a07      	ldr	r2, [pc, #28]	@ (8004d24 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004d06:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004d0a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8004d0e:	e000      	b.n	8004d12 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8004d10:	bf00      	nop
  }
}
 8004d12:	bf00      	nop
 8004d14:	370c      	adds	r7, #12
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	e000e010 	.word	0xe000e010
 8004d24:	46020c00 	.word	0x46020c00

08004d28 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8004d2e:	4b19      	ldr	r3, [pc, #100]	@ (8004d94 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 0304 	and.w	r3, r3, #4
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d002      	beq.n	8004d40 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8004d3a:	2304      	movs	r3, #4
 8004d3c:	607b      	str	r3, [r7, #4]
 8004d3e:	e021      	b.n	8004d84 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8004d40:	4b15      	ldr	r3, [pc, #84]	@ (8004d98 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 8004d42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d46:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8004d4a:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004d52:	d011      	beq.n	8004d78 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004d5a:	d810      	bhi.n	8004d7e <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d004      	beq.n	8004d6c <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d68:	d003      	beq.n	8004d72 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8004d6a:	e008      	b.n	8004d7e <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	607b      	str	r3, [r7, #4]
        break;
 8004d70:	e008      	b.n	8004d84 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8004d72:	2301      	movs	r3, #1
 8004d74:	607b      	str	r3, [r7, #4]
        break;
 8004d76:	e005      	b.n	8004d84 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8004d78:	2302      	movs	r3, #2
 8004d7a:	607b      	str	r3, [r7, #4]
        break;
 8004d7c:	e002      	b.n	8004d84 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	607b      	str	r3, [r7, #4]
        break;
 8004d82:	bf00      	nop
    }
  }
  return systick_source;
 8004d84:	687b      	ldr	r3, [r7, #4]
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	370c      	adds	r7, #12
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr
 8004d92:	bf00      	nop
 8004d94:	e000e010 	.word	0xe000e010
 8004d98:	46020c00 	.word	0x46020c00

08004d9c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d101      	bne.n	8004dae <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e054      	b.n	8004e58 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	7f5b      	ldrb	r3, [r3, #29]
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d105      	bne.n	8004dc4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f7ff fa66 	bl	8004290 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2202      	movs	r2, #2
 8004dc8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	791b      	ldrb	r3, [r3, #4]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d10c      	bne.n	8004dec <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a22      	ldr	r2, [pc, #136]	@ (8004e60 <HAL_CRC_Init+0xc4>)
 8004dd8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	689a      	ldr	r2, [r3, #8]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f022 0218 	bic.w	r2, r2, #24
 8004de8:	609a      	str	r2, [r3, #8]
 8004dea:	e00c      	b.n	8004e06 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6899      	ldr	r1, [r3, #8]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	461a      	mov	r2, r3
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 f834 	bl	8004e64 <HAL_CRCEx_Polynomial_Set>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d001      	beq.n	8004e06 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e028      	b.n	8004e58 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	795b      	ldrb	r3, [r3, #5]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d105      	bne.n	8004e1a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f04f 32ff 	mov.w	r2, #4294967295
 8004e16:	611a      	str	r2, [r3, #16]
 8004e18:	e004      	b.n	8004e24 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	6912      	ldr	r2, [r2, #16]
 8004e22:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	695a      	ldr	r2, [r3, #20]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	430a      	orrs	r2, r1
 8004e38:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	699a      	ldr	r2, [r3, #24]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	430a      	orrs	r2, r1
 8004e4e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004e56:	2300      	movs	r3, #0
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3708      	adds	r7, #8
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	04c11db7 	.word	0x04c11db7

08004e64 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b087      	sub	sp, #28
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e70:	2300      	movs	r3, #0
 8004e72:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004e74:	231f      	movs	r3, #31
 8004e76:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	f003 0301 	and.w	r3, r3, #1
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d102      	bne.n	8004e88 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	75fb      	strb	r3, [r7, #23]
 8004e86:	e063      	b.n	8004f50 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004e88:	bf00      	nop
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	1e5a      	subs	r2, r3, #1
 8004e8e:	613a      	str	r2, [r7, #16]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d009      	beq.n	8004ea8 <HAL_CRCEx_Polynomial_Set+0x44>
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	f003 031f 	and.w	r3, r3, #31
 8004e9a:	68ba      	ldr	r2, [r7, #8]
 8004e9c:	fa22 f303 	lsr.w	r3, r2, r3
 8004ea0:	f003 0301 	and.w	r3, r3, #1
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d0f0      	beq.n	8004e8a <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2b18      	cmp	r3, #24
 8004eac:	d846      	bhi.n	8004f3c <HAL_CRCEx_Polynomial_Set+0xd8>
 8004eae:	a201      	add	r2, pc, #4	@ (adr r2, 8004eb4 <HAL_CRCEx_Polynomial_Set+0x50>)
 8004eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eb4:	08004f43 	.word	0x08004f43
 8004eb8:	08004f3d 	.word	0x08004f3d
 8004ebc:	08004f3d 	.word	0x08004f3d
 8004ec0:	08004f3d 	.word	0x08004f3d
 8004ec4:	08004f3d 	.word	0x08004f3d
 8004ec8:	08004f3d 	.word	0x08004f3d
 8004ecc:	08004f3d 	.word	0x08004f3d
 8004ed0:	08004f3d 	.word	0x08004f3d
 8004ed4:	08004f31 	.word	0x08004f31
 8004ed8:	08004f3d 	.word	0x08004f3d
 8004edc:	08004f3d 	.word	0x08004f3d
 8004ee0:	08004f3d 	.word	0x08004f3d
 8004ee4:	08004f3d 	.word	0x08004f3d
 8004ee8:	08004f3d 	.word	0x08004f3d
 8004eec:	08004f3d 	.word	0x08004f3d
 8004ef0:	08004f3d 	.word	0x08004f3d
 8004ef4:	08004f25 	.word	0x08004f25
 8004ef8:	08004f3d 	.word	0x08004f3d
 8004efc:	08004f3d 	.word	0x08004f3d
 8004f00:	08004f3d 	.word	0x08004f3d
 8004f04:	08004f3d 	.word	0x08004f3d
 8004f08:	08004f3d 	.word	0x08004f3d
 8004f0c:	08004f3d 	.word	0x08004f3d
 8004f10:	08004f3d 	.word	0x08004f3d
 8004f14:	08004f19 	.word	0x08004f19
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	2b06      	cmp	r3, #6
 8004f1c:	d913      	bls.n	8004f46 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004f22:	e010      	b.n	8004f46 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	2b07      	cmp	r3, #7
 8004f28:	d90f      	bls.n	8004f4a <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004f2e:	e00c      	b.n	8004f4a <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	2b0f      	cmp	r3, #15
 8004f34:	d90b      	bls.n	8004f4e <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004f3a:	e008      	b.n	8004f4e <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	75fb      	strb	r3, [r7, #23]
        break;
 8004f40:	e006      	b.n	8004f50 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004f42:	bf00      	nop
 8004f44:	e004      	b.n	8004f50 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004f46:	bf00      	nop
 8004f48:	e002      	b.n	8004f50 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004f4a:	bf00      	nop
 8004f4c:	e000      	b.n	8004f50 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004f4e:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8004f50:	7dfb      	ldrb	r3, [r7, #23]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d10d      	bne.n	8004f72 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68ba      	ldr	r2, [r7, #8]
 8004f5c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	f023 0118 	bic.w	r1, r3, #24
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004f72:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	371c      	adds	r7, #28
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b089      	sub	sp, #36	@ 0x24
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004f92:	e1ba      	b.n	800530a <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	2101      	movs	r1, #1
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	f000 81aa 	beq.w	8005304 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a55      	ldr	r2, [pc, #340]	@ (8005108 <HAL_GPIO_Init+0x188>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d15d      	bne.n	8005074 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc6:	43db      	mvns	r3, r3
 8004fc8:	69fa      	ldr	r2, [r7, #28]
 8004fca:	4013      	ands	r3, r2
 8004fcc:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	f003 0201 	and.w	r2, r3, #1
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fdc:	69fa      	ldr	r2, [r7, #28]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	69fa      	ldr	r2, [r7, #28]
 8004fe6:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8004fe8:	4a48      	ldr	r2, [pc, #288]	@ (800510c <HAL_GPIO_Init+0x18c>)
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004ff0:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8004ff2:	4a46      	ldr	r2, [pc, #280]	@ (800510c <HAL_GPIO_Init+0x18c>)
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	00db      	lsls	r3, r3, #3
 8004ff8:	4413      	add	r3, r2
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	08da      	lsrs	r2, r3, #3
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	3208      	adds	r2, #8
 8005006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800500a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	f003 0307 	and.w	r3, r3, #7
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	220f      	movs	r2, #15
 8005016:	fa02 f303 	lsl.w	r3, r2, r3
 800501a:	43db      	mvns	r3, r3
 800501c:	69fa      	ldr	r2, [r7, #28]
 800501e:	4013      	ands	r3, r2
 8005020:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	f003 0307 	and.w	r3, r3, #7
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	220b      	movs	r2, #11
 800502c:	fa02 f303 	lsl.w	r3, r2, r3
 8005030:	69fa      	ldr	r2, [r7, #28]
 8005032:	4313      	orrs	r3, r2
 8005034:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	08da      	lsrs	r2, r3, #3
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	3208      	adds	r2, #8
 800503e:	69f9      	ldr	r1, [r7, #28]
 8005040:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	005b      	lsls	r3, r3, #1
 800504e:	2203      	movs	r2, #3
 8005050:	fa02 f303 	lsl.w	r3, r2, r3
 8005054:	43db      	mvns	r3, r3
 8005056:	69fa      	ldr	r2, [r7, #28]
 8005058:	4013      	ands	r3, r2
 800505a:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	005b      	lsls	r3, r3, #1
 8005060:	2202      	movs	r2, #2
 8005062:	fa02 f303 	lsl.w	r3, r2, r3
 8005066:	69fa      	ldr	r2, [r7, #28]
 8005068:	4313      	orrs	r3, r2
 800506a:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	69fa      	ldr	r2, [r7, #28]
 8005070:	601a      	str	r2, [r3, #0]
 8005072:	e067      	b.n	8005144 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	2b02      	cmp	r3, #2
 800507a:	d003      	beq.n	8005084 <HAL_GPIO_Init+0x104>
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	2b12      	cmp	r3, #18
 8005082:	d145      	bne.n	8005110 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	08da      	lsrs	r2, r3, #3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	3208      	adds	r2, #8
 800508c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005090:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	f003 0307 	and.w	r3, r3, #7
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	220f      	movs	r2, #15
 800509c:	fa02 f303 	lsl.w	r3, r2, r3
 80050a0:	43db      	mvns	r3, r3
 80050a2:	69fa      	ldr	r2, [r7, #28]
 80050a4:	4013      	ands	r3, r2
 80050a6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	691b      	ldr	r3, [r3, #16]
 80050ac:	f003 020f 	and.w	r2, r3, #15
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	f003 0307 	and.w	r3, r3, #7
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	fa02 f303 	lsl.w	r3, r2, r3
 80050bc:	69fa      	ldr	r2, [r7, #28]
 80050be:	4313      	orrs	r3, r2
 80050c0:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	08da      	lsrs	r2, r3, #3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	3208      	adds	r2, #8
 80050ca:	69f9      	ldr	r1, [r7, #28]
 80050cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80050d6:	69bb      	ldr	r3, [r7, #24]
 80050d8:	005b      	lsls	r3, r3, #1
 80050da:	2203      	movs	r2, #3
 80050dc:	fa02 f303 	lsl.w	r3, r2, r3
 80050e0:	43db      	mvns	r3, r3
 80050e2:	69fa      	ldr	r2, [r7, #28]
 80050e4:	4013      	ands	r3, r2
 80050e6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	f003 0203 	and.w	r2, r3, #3
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	005b      	lsls	r3, r3, #1
 80050f4:	fa02 f303 	lsl.w	r3, r2, r3
 80050f8:	69fa      	ldr	r2, [r7, #28]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	69fa      	ldr	r2, [r7, #28]
 8005102:	601a      	str	r2, [r3, #0]
 8005104:	e01e      	b.n	8005144 <HAL_GPIO_Init+0x1c4>
 8005106:	bf00      	nop
 8005108:	46020000 	.word	0x46020000
 800510c:	080163f8 	.word	0x080163f8
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	005b      	lsls	r3, r3, #1
 800511a:	2203      	movs	r2, #3
 800511c:	fa02 f303 	lsl.w	r3, r2, r3
 8005120:	43db      	mvns	r3, r3
 8005122:	69fa      	ldr	r2, [r7, #28]
 8005124:	4013      	ands	r3, r2
 8005126:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	f003 0203 	and.w	r2, r3, #3
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	005b      	lsls	r3, r3, #1
 8005134:	fa02 f303 	lsl.w	r3, r2, r3
 8005138:	69fa      	ldr	r2, [r7, #28]
 800513a:	4313      	orrs	r3, r2
 800513c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	69fa      	ldr	r2, [r7, #28]
 8005142:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	2b01      	cmp	r3, #1
 800514a:	d00b      	beq.n	8005164 <HAL_GPIO_Init+0x1e4>
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	2b02      	cmp	r3, #2
 8005152:	d007      	beq.n	8005164 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005158:	2b11      	cmp	r3, #17
 800515a:	d003      	beq.n	8005164 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	2b12      	cmp	r3, #18
 8005162:	d130      	bne.n	80051c6 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	005b      	lsls	r3, r3, #1
 800516e:	2203      	movs	r2, #3
 8005170:	fa02 f303 	lsl.w	r3, r2, r3
 8005174:	43db      	mvns	r3, r3
 8005176:	69fa      	ldr	r2, [r7, #28]
 8005178:	4013      	ands	r3, r2
 800517a:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	68da      	ldr	r2, [r3, #12]
 8005180:	69bb      	ldr	r3, [r7, #24]
 8005182:	005b      	lsls	r3, r3, #1
 8005184:	fa02 f303 	lsl.w	r3, r2, r3
 8005188:	69fa      	ldr	r2, [r7, #28]
 800518a:	4313      	orrs	r3, r2
 800518c:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	69fa      	ldr	r2, [r7, #28]
 8005192:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800519a:	2201      	movs	r2, #1
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	fa02 f303 	lsl.w	r3, r2, r3
 80051a2:	43db      	mvns	r3, r3
 80051a4:	69fa      	ldr	r2, [r7, #28]
 80051a6:	4013      	ands	r3, r2
 80051a8:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	091b      	lsrs	r3, r3, #4
 80051b0:	f003 0201 	and.w	r2, r3, #1
 80051b4:	69bb      	ldr	r3, [r7, #24]
 80051b6:	fa02 f303 	lsl.w	r3, r2, r3
 80051ba:	69fa      	ldr	r2, [r7, #28]
 80051bc:	4313      	orrs	r3, r2
 80051be:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	69fa      	ldr	r2, [r7, #28]
 80051c4:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	2b03      	cmp	r3, #3
 80051cc:	d017      	beq.n	80051fe <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	005b      	lsls	r3, r3, #1
 80051d8:	2203      	movs	r2, #3
 80051da:	fa02 f303 	lsl.w	r3, r2, r3
 80051de:	43db      	mvns	r3, r3
 80051e0:	69fa      	ldr	r2, [r7, #28]
 80051e2:	4013      	ands	r3, r2
 80051e4:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	689a      	ldr	r2, [r3, #8]
 80051ea:	69bb      	ldr	r3, [r7, #24]
 80051ec:	005b      	lsls	r3, r3, #1
 80051ee:	fa02 f303 	lsl.w	r3, r2, r3
 80051f2:	69fa      	ldr	r2, [r7, #28]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	69fa      	ldr	r2, [r7, #28]
 80051fc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005206:	2b00      	cmp	r3, #0
 8005208:	d07c      	beq.n	8005304 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800520a:	4a47      	ldr	r2, [pc, #284]	@ (8005328 <HAL_GPIO_Init+0x3a8>)
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	089b      	lsrs	r3, r3, #2
 8005210:	3318      	adds	r3, #24
 8005212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005216:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	f003 0303 	and.w	r3, r3, #3
 800521e:	00db      	lsls	r3, r3, #3
 8005220:	220f      	movs	r2, #15
 8005222:	fa02 f303 	lsl.w	r3, r2, r3
 8005226:	43db      	mvns	r3, r3
 8005228:	69fa      	ldr	r2, [r7, #28]
 800522a:	4013      	ands	r3, r2
 800522c:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	0a9a      	lsrs	r2, r3, #10
 8005232:	4b3e      	ldr	r3, [pc, #248]	@ (800532c <HAL_GPIO_Init+0x3ac>)
 8005234:	4013      	ands	r3, r2
 8005236:	697a      	ldr	r2, [r7, #20]
 8005238:	f002 0203 	and.w	r2, r2, #3
 800523c:	00d2      	lsls	r2, r2, #3
 800523e:	4093      	lsls	r3, r2
 8005240:	69fa      	ldr	r2, [r7, #28]
 8005242:	4313      	orrs	r3, r2
 8005244:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8005246:	4938      	ldr	r1, [pc, #224]	@ (8005328 <HAL_GPIO_Init+0x3a8>)
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	089b      	lsrs	r3, r3, #2
 800524c:	3318      	adds	r3, #24
 800524e:	69fa      	ldr	r2, [r7, #28]
 8005250:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8005254:	4b34      	ldr	r3, [pc, #208]	@ (8005328 <HAL_GPIO_Init+0x3a8>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	43db      	mvns	r3, r3
 800525e:	69fa      	ldr	r2, [r7, #28]
 8005260:	4013      	ands	r3, r2
 8005262:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800526c:	2b00      	cmp	r3, #0
 800526e:	d003      	beq.n	8005278 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8005270:	69fa      	ldr	r2, [r7, #28]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	4313      	orrs	r3, r2
 8005276:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8005278:	4a2b      	ldr	r2, [pc, #172]	@ (8005328 <HAL_GPIO_Init+0x3a8>)
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800527e:	4b2a      	ldr	r3, [pc, #168]	@ (8005328 <HAL_GPIO_Init+0x3a8>)
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	43db      	mvns	r3, r3
 8005288:	69fa      	ldr	r2, [r7, #28]
 800528a:	4013      	ands	r3, r2
 800528c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005296:	2b00      	cmp	r3, #0
 8005298:	d003      	beq.n	80052a2 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 800529a:	69fa      	ldr	r2, [r7, #28]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	4313      	orrs	r3, r2
 80052a0:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80052a2:	4a21      	ldr	r2, [pc, #132]	@ (8005328 <HAL_GPIO_Init+0x3a8>)
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80052a8:	4b1f      	ldr	r3, [pc, #124]	@ (8005328 <HAL_GPIO_Init+0x3a8>)
 80052aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80052ae:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	43db      	mvns	r3, r3
 80052b4:	69fa      	ldr	r2, [r7, #28]
 80052b6:	4013      	ands	r3, r2
 80052b8:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d003      	beq.n	80052ce <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 80052c6:	69fa      	ldr	r2, [r7, #28]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80052ce:	4a16      	ldr	r2, [pc, #88]	@ (8005328 <HAL_GPIO_Init+0x3a8>)
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80052d6:	4b14      	ldr	r3, [pc, #80]	@ (8005328 <HAL_GPIO_Init+0x3a8>)
 80052d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052dc:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	43db      	mvns	r3, r3
 80052e2:	69fa      	ldr	r2, [r7, #28]
 80052e4:	4013      	ands	r3, r2
 80052e6:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d003      	beq.n	80052fc <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 80052f4:	69fa      	ldr	r2, [r7, #28]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80052fc:	4a0a      	ldr	r2, [pc, #40]	@ (8005328 <HAL_GPIO_Init+0x3a8>)
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	3301      	adds	r3, #1
 8005308:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	fa22 f303 	lsr.w	r3, r2, r3
 8005314:	2b00      	cmp	r3, #0
 8005316:	f47f ae3d 	bne.w	8004f94 <HAL_GPIO_Init+0x14>
  }
}
 800531a:	bf00      	nop
 800531c:	bf00      	nop
 800531e:	3724      	adds	r7, #36	@ 0x24
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr
 8005328:	46022000 	.word	0x46022000
 800532c:	002f7f7f 	.word	0x002f7f7f

08005330 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005330:	b480      	push	{r7}
 8005332:	b085      	sub	sp, #20
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	460b      	mov	r3, r1
 800533a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	691a      	ldr	r2, [r3, #16]
 8005340:	887b      	ldrh	r3, [r7, #2]
 8005342:	4013      	ands	r3, r2
 8005344:	2b00      	cmp	r3, #0
 8005346:	d002      	beq.n	800534e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005348:	2301      	movs	r3, #1
 800534a:	73fb      	strb	r3, [r7, #15]
 800534c:	e001      	b.n	8005352 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800534e:	2300      	movs	r3, #0
 8005350:	73fb      	strb	r3, [r7, #15]
  }

  return bitstatus;
 8005352:	7bfb      	ldrb	r3, [r7, #15]
}
 8005354:	4618      	mov	r0, r3
 8005356:	3714      	adds	r7, #20
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr

08005360 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	460b      	mov	r3, r1
 800536a:	807b      	strh	r3, [r7, #2]
 800536c:	4613      	mov	r3, r2
 800536e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005370:	787b      	ldrb	r3, [r7, #1]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d003      	beq.n	800537e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005376:	887a      	ldrh	r2, [r7, #2]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 800537c:	e002      	b.n	8005384 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800537e:	887a      	ldrh	r2, [r7, #2]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005384:	bf00      	nop
 8005386:	370c      	adds	r7, #12
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005390:	b480      	push	{r7}
 8005392:	b085      	sub	sp, #20
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	460b      	mov	r3, r1
 800539a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	695b      	ldr	r3, [r3, #20]
 80053a0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80053a2:	887a      	ldrh	r2, [r7, #2]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	4013      	ands	r3, r2
 80053a8:	041a      	lsls	r2, r3, #16
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	43d9      	mvns	r1, r3
 80053ae:	887b      	ldrh	r3, [r7, #2]
 80053b0:	400b      	ands	r3, r1
 80053b2:	431a      	orrs	r2, r3
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	619a      	str	r2, [r3, #24]
}
 80053b8:	bf00      	nop
 80053ba:	3714      	adds	r7, #20
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr

080053c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b082      	sub	sp, #8
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	4603      	mov	r3, r0
 80053cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 80053ce:	4b0f      	ldr	r3, [pc, #60]	@ (800540c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80053d0:	68da      	ldr	r2, [r3, #12]
 80053d2:	88fb      	ldrh	r3, [r7, #6]
 80053d4:	4013      	ands	r3, r2
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d006      	beq.n	80053e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80053da:	4a0c      	ldr	r2, [pc, #48]	@ (800540c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80053dc:	88fb      	ldrh	r3, [r7, #6]
 80053de:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80053e0:	88fb      	ldrh	r3, [r7, #6]
 80053e2:	4618      	mov	r0, r3
 80053e4:	f007 fbe6 	bl	800cbb4 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 80053e8:	4b08      	ldr	r3, [pc, #32]	@ (800540c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80053ea:	691a      	ldr	r2, [r3, #16]
 80053ec:	88fb      	ldrh	r3, [r7, #6]
 80053ee:	4013      	ands	r3, r2
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d006      	beq.n	8005402 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80053f4:	4a05      	ldr	r2, [pc, #20]	@ (800540c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80053f6:	88fb      	ldrh	r3, [r7, #6]
 80053f8:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80053fa:	88fb      	ldrh	r3, [r7, #6]
 80053fc:	4618      	mov	r0, r3
 80053fe:	f7fe fa91 	bl	8003924 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8005402:	bf00      	nop
 8005404:	3708      	adds	r7, #8
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop
 800540c:	46022000 	.word	0x46022000

08005410 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b082      	sub	sp, #8
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d101      	bne.n	8005422 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e08d      	b.n	800553e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005428:	b2db      	uxtb	r3, r3
 800542a:	2b00      	cmp	r3, #0
 800542c:	d106      	bne.n	800543c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f7fe ff4c 	bl	80042d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2224      	movs	r2, #36	@ 0x24
 8005440:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f022 0201 	bic.w	r2, r2, #1
 8005452:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	685a      	ldr	r2, [r3, #4]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005460:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	689a      	ldr	r2, [r3, #8]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005470:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	2b01      	cmp	r3, #1
 8005478:	d107      	bne.n	800548a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	689a      	ldr	r2, [r3, #8]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005486:	609a      	str	r2, [r3, #8]
 8005488:	e006      	b.n	8005498 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	689a      	ldr	r2, [r3, #8]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005496:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	2b02      	cmp	r3, #2
 800549e:	d108      	bne.n	80054b2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	685a      	ldr	r2, [r3, #4]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80054ae:	605a      	str	r2, [r3, #4]
 80054b0:	e007      	b.n	80054c2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	685a      	ldr	r2, [r3, #4]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80054c0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	6812      	ldr	r2, [r2, #0]
 80054cc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80054d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054d4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	68da      	ldr	r2, [r3, #12]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80054e4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	691a      	ldr	r2, [r3, #16]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	695b      	ldr	r3, [r3, #20]
 80054ee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	699b      	ldr	r3, [r3, #24]
 80054f6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	430a      	orrs	r2, r1
 80054fe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	69d9      	ldr	r1, [r3, #28]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6a1a      	ldr	r2, [r3, #32]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	430a      	orrs	r2, r1
 800550e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f042 0201 	orr.w	r2, r2, #1
 800551e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2220      	movs	r2, #32
 800552a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800553c:	2300      	movs	r3, #0
}
 800553e:	4618      	mov	r0, r3
 8005540:	3708      	adds	r7, #8
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
	...

08005548 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b088      	sub	sp, #32
 800554c:	af02      	add	r7, sp, #8
 800554e:	60f8      	str	r0, [r7, #12]
 8005550:	4608      	mov	r0, r1
 8005552:	4611      	mov	r1, r2
 8005554:	461a      	mov	r2, r3
 8005556:	4603      	mov	r3, r0
 8005558:	817b      	strh	r3, [r7, #10]
 800555a:	460b      	mov	r3, r1
 800555c:	813b      	strh	r3, [r7, #8]
 800555e:	4613      	mov	r3, r2
 8005560:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005568:	b2db      	uxtb	r3, r3
 800556a:	2b20      	cmp	r3, #32
 800556c:	f040 80f9 	bne.w	8005762 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005570:	6a3b      	ldr	r3, [r7, #32]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d002      	beq.n	800557c <HAL_I2C_Mem_Write+0x34>
 8005576:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005578:	2b00      	cmp	r3, #0
 800557a:	d105      	bne.n	8005588 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005582:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	e0ed      	b.n	8005764 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800558e:	2b01      	cmp	r3, #1
 8005590:	d101      	bne.n	8005596 <HAL_I2C_Mem_Write+0x4e>
 8005592:	2302      	movs	r3, #2
 8005594:	e0e6      	b.n	8005764 <HAL_I2C_Mem_Write+0x21c>
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2201      	movs	r2, #1
 800559a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800559e:	f7ff fa39 	bl	8004a14 <HAL_GetTick>
 80055a2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	9300      	str	r3, [sp, #0]
 80055a8:	2319      	movs	r3, #25
 80055aa:	2201      	movs	r2, #1
 80055ac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80055b0:	68f8      	ldr	r0, [r7, #12]
 80055b2:	f000 fbc9 	bl	8005d48 <I2C_WaitOnFlagUntilTimeout>
 80055b6:	4603      	mov	r3, r0
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d001      	beq.n	80055c0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	e0d1      	b.n	8005764 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2221      	movs	r2, #33	@ 0x21
 80055c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2240      	movs	r2, #64	@ 0x40
 80055cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2200      	movs	r2, #0
 80055d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	6a3a      	ldr	r2, [r7, #32]
 80055da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80055e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2200      	movs	r2, #0
 80055e6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80055e8:	88f8      	ldrh	r0, [r7, #6]
 80055ea:	893a      	ldrh	r2, [r7, #8]
 80055ec:	8979      	ldrh	r1, [r7, #10]
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	9301      	str	r3, [sp, #4]
 80055f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055f4:	9300      	str	r3, [sp, #0]
 80055f6:	4603      	mov	r3, r0
 80055f8:	68f8      	ldr	r0, [r7, #12]
 80055fa:	f000 fad9 	bl	8005bb0 <I2C_RequestMemoryWrite>
 80055fe:	4603      	mov	r3, r0
 8005600:	2b00      	cmp	r3, #0
 8005602:	d005      	beq.n	8005610 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2200      	movs	r2, #0
 8005608:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e0a9      	b.n	8005764 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005614:	b29b      	uxth	r3, r3
 8005616:	2bff      	cmp	r3, #255	@ 0xff
 8005618:	d90e      	bls.n	8005638 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	22ff      	movs	r2, #255	@ 0xff
 800561e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005624:	b2da      	uxtb	r2, r3
 8005626:	8979      	ldrh	r1, [r7, #10]
 8005628:	2300      	movs	r3, #0
 800562a:	9300      	str	r3, [sp, #0]
 800562c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005630:	68f8      	ldr	r0, [r7, #12]
 8005632:	f000 fd4d 	bl	80060d0 <I2C_TransferConfig>
 8005636:	e00f      	b.n	8005658 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800563c:	b29a      	uxth	r2, r3
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005646:	b2da      	uxtb	r2, r3
 8005648:	8979      	ldrh	r1, [r7, #10]
 800564a:	2300      	movs	r3, #0
 800564c:	9300      	str	r3, [sp, #0]
 800564e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005652:	68f8      	ldr	r0, [r7, #12]
 8005654:	f000 fd3c 	bl	80060d0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005658:	697a      	ldr	r2, [r7, #20]
 800565a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800565c:	68f8      	ldr	r0, [r7, #12]
 800565e:	f000 fbcc 	bl	8005dfa <I2C_WaitOnTXISFlagUntilTimeout>
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d001      	beq.n	800566c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	e07b      	b.n	8005764 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005670:	781a      	ldrb	r2, [r3, #0]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800567c:	1c5a      	adds	r2, r3, #1
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005686:	b29b      	uxth	r3, r3
 8005688:	3b01      	subs	r3, #1
 800568a:	b29a      	uxth	r2, r3
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005694:	3b01      	subs	r3, #1
 8005696:	b29a      	uxth	r2, r3
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d034      	beq.n	8005710 <HAL_I2C_Mem_Write+0x1c8>
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d130      	bne.n	8005710 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	9300      	str	r3, [sp, #0]
 80056b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056b4:	2200      	movs	r2, #0
 80056b6:	2180      	movs	r1, #128	@ 0x80
 80056b8:	68f8      	ldr	r0, [r7, #12]
 80056ba:	f000 fb45 	bl	8005d48 <I2C_WaitOnFlagUntilTimeout>
 80056be:	4603      	mov	r3, r0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d001      	beq.n	80056c8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	e04d      	b.n	8005764 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	2bff      	cmp	r3, #255	@ 0xff
 80056d0:	d90e      	bls.n	80056f0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	22ff      	movs	r2, #255	@ 0xff
 80056d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056dc:	b2da      	uxtb	r2, r3
 80056de:	8979      	ldrh	r1, [r7, #10]
 80056e0:	2300      	movs	r3, #0
 80056e2:	9300      	str	r3, [sp, #0]
 80056e4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80056e8:	68f8      	ldr	r0, [r7, #12]
 80056ea:	f000 fcf1 	bl	80060d0 <I2C_TransferConfig>
 80056ee:	e00f      	b.n	8005710 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056f4:	b29a      	uxth	r2, r3
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056fe:	b2da      	uxtb	r2, r3
 8005700:	8979      	ldrh	r1, [r7, #10]
 8005702:	2300      	movs	r3, #0
 8005704:	9300      	str	r3, [sp, #0]
 8005706:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800570a:	68f8      	ldr	r0, [r7, #12]
 800570c:	f000 fce0 	bl	80060d0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005714:	b29b      	uxth	r3, r3
 8005716:	2b00      	cmp	r3, #0
 8005718:	d19e      	bne.n	8005658 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800571a:	697a      	ldr	r2, [r7, #20]
 800571c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800571e:	68f8      	ldr	r0, [r7, #12]
 8005720:	f000 fbb2 	bl	8005e88 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d001      	beq.n	800572e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e01a      	b.n	8005764 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	2220      	movs	r2, #32
 8005734:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	6859      	ldr	r1, [r3, #4]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	4b0a      	ldr	r3, [pc, #40]	@ (800576c <HAL_I2C_Mem_Write+0x224>)
 8005742:	400b      	ands	r3, r1
 8005744:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2220      	movs	r2, #32
 800574a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2200      	movs	r2, #0
 8005752:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2200      	movs	r2, #0
 800575a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800575e:	2300      	movs	r3, #0
 8005760:	e000      	b.n	8005764 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005762:	2302      	movs	r3, #2
  }
}
 8005764:	4618      	mov	r0, r3
 8005766:	3718      	adds	r7, #24
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}
 800576c:	fe00e800 	.word	0xfe00e800

08005770 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b088      	sub	sp, #32
 8005774:	af02      	add	r7, sp, #8
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	4608      	mov	r0, r1
 800577a:	4611      	mov	r1, r2
 800577c:	461a      	mov	r2, r3
 800577e:	4603      	mov	r3, r0
 8005780:	817b      	strh	r3, [r7, #10]
 8005782:	460b      	mov	r3, r1
 8005784:	813b      	strh	r3, [r7, #8]
 8005786:	4613      	mov	r3, r2
 8005788:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005790:	b2db      	uxtb	r3, r3
 8005792:	2b20      	cmp	r3, #32
 8005794:	f040 80fd 	bne.w	8005992 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005798:	6a3b      	ldr	r3, [r7, #32]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d002      	beq.n	80057a4 <HAL_I2C_Mem_Read+0x34>
 800579e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d105      	bne.n	80057b0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80057aa:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	e0f1      	b.n	8005994 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d101      	bne.n	80057be <HAL_I2C_Mem_Read+0x4e>
 80057ba:	2302      	movs	r3, #2
 80057bc:	e0ea      	b.n	8005994 <HAL_I2C_Mem_Read+0x224>
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2201      	movs	r2, #1
 80057c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80057c6:	f7ff f925 	bl	8004a14 <HAL_GetTick>
 80057ca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	9300      	str	r3, [sp, #0]
 80057d0:	2319      	movs	r3, #25
 80057d2:	2201      	movs	r2, #1
 80057d4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80057d8:	68f8      	ldr	r0, [r7, #12]
 80057da:	f000 fab5 	bl	8005d48 <I2C_WaitOnFlagUntilTimeout>
 80057de:	4603      	mov	r3, r0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d001      	beq.n	80057e8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	e0d5      	b.n	8005994 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2222      	movs	r2, #34	@ 0x22
 80057ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2240      	movs	r2, #64	@ 0x40
 80057f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2200      	movs	r2, #0
 80057fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6a3a      	ldr	r2, [r7, #32]
 8005802:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005808:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2200      	movs	r2, #0
 800580e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005810:	88f8      	ldrh	r0, [r7, #6]
 8005812:	893a      	ldrh	r2, [r7, #8]
 8005814:	8979      	ldrh	r1, [r7, #10]
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	9301      	str	r3, [sp, #4]
 800581a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800581c:	9300      	str	r3, [sp, #0]
 800581e:	4603      	mov	r3, r0
 8005820:	68f8      	ldr	r0, [r7, #12]
 8005822:	f000 fa19 	bl	8005c58 <I2C_RequestMemoryRead>
 8005826:	4603      	mov	r3, r0
 8005828:	2b00      	cmp	r3, #0
 800582a:	d005      	beq.n	8005838 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2200      	movs	r2, #0
 8005830:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	e0ad      	b.n	8005994 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800583c:	b29b      	uxth	r3, r3
 800583e:	2bff      	cmp	r3, #255	@ 0xff
 8005840:	d90e      	bls.n	8005860 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	22ff      	movs	r2, #255	@ 0xff
 8005846:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800584c:	b2da      	uxtb	r2, r3
 800584e:	8979      	ldrh	r1, [r7, #10]
 8005850:	4b52      	ldr	r3, [pc, #328]	@ (800599c <HAL_I2C_Mem_Read+0x22c>)
 8005852:	9300      	str	r3, [sp, #0]
 8005854:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005858:	68f8      	ldr	r0, [r7, #12]
 800585a:	f000 fc39 	bl	80060d0 <I2C_TransferConfig>
 800585e:	e00f      	b.n	8005880 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005864:	b29a      	uxth	r2, r3
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800586e:	b2da      	uxtb	r2, r3
 8005870:	8979      	ldrh	r1, [r7, #10]
 8005872:	4b4a      	ldr	r3, [pc, #296]	@ (800599c <HAL_I2C_Mem_Read+0x22c>)
 8005874:	9300      	str	r3, [sp, #0]
 8005876:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800587a:	68f8      	ldr	r0, [r7, #12]
 800587c:	f000 fc28 	bl	80060d0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	9300      	str	r3, [sp, #0]
 8005884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005886:	2200      	movs	r2, #0
 8005888:	2104      	movs	r1, #4
 800588a:	68f8      	ldr	r0, [r7, #12]
 800588c:	f000 fa5c 	bl	8005d48 <I2C_WaitOnFlagUntilTimeout>
 8005890:	4603      	mov	r3, r0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d001      	beq.n	800589a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e07c      	b.n	8005994 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058a4:	b2d2      	uxtb	r2, r2
 80058a6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ac:	1c5a      	adds	r2, r3, #1
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058b6:	3b01      	subs	r3, #1
 80058b8:	b29a      	uxth	r2, r3
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	3b01      	subs	r3, #1
 80058c6:	b29a      	uxth	r2, r3
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d034      	beq.n	8005940 <HAL_I2C_Mem_Read+0x1d0>
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d130      	bne.n	8005940 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	9300      	str	r3, [sp, #0]
 80058e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058e4:	2200      	movs	r2, #0
 80058e6:	2180      	movs	r1, #128	@ 0x80
 80058e8:	68f8      	ldr	r0, [r7, #12]
 80058ea:	f000 fa2d 	bl	8005d48 <I2C_WaitOnFlagUntilTimeout>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d001      	beq.n	80058f8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e04d      	b.n	8005994 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	2bff      	cmp	r3, #255	@ 0xff
 8005900:	d90e      	bls.n	8005920 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	22ff      	movs	r2, #255	@ 0xff
 8005906:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800590c:	b2da      	uxtb	r2, r3
 800590e:	8979      	ldrh	r1, [r7, #10]
 8005910:	2300      	movs	r3, #0
 8005912:	9300      	str	r3, [sp, #0]
 8005914:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005918:	68f8      	ldr	r0, [r7, #12]
 800591a:	f000 fbd9 	bl	80060d0 <I2C_TransferConfig>
 800591e:	e00f      	b.n	8005940 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005924:	b29a      	uxth	r2, r3
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800592e:	b2da      	uxtb	r2, r3
 8005930:	8979      	ldrh	r1, [r7, #10]
 8005932:	2300      	movs	r3, #0
 8005934:	9300      	str	r3, [sp, #0]
 8005936:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800593a:	68f8      	ldr	r0, [r7, #12]
 800593c:	f000 fbc8 	bl	80060d0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005944:	b29b      	uxth	r3, r3
 8005946:	2b00      	cmp	r3, #0
 8005948:	d19a      	bne.n	8005880 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800594a:	697a      	ldr	r2, [r7, #20]
 800594c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800594e:	68f8      	ldr	r0, [r7, #12]
 8005950:	f000 fa9a 	bl	8005e88 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005954:	4603      	mov	r3, r0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d001      	beq.n	800595e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e01a      	b.n	8005994 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	2220      	movs	r2, #32
 8005964:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	6859      	ldr	r1, [r3, #4]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	4b0b      	ldr	r3, [pc, #44]	@ (80059a0 <HAL_I2C_Mem_Read+0x230>)
 8005972:	400b      	ands	r3, r1
 8005974:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2220      	movs	r2, #32
 800597a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2200      	movs	r2, #0
 8005982:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2200      	movs	r2, #0
 800598a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800598e:	2300      	movs	r3, #0
 8005990:	e000      	b.n	8005994 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005992:	2302      	movs	r3, #2
  }
}
 8005994:	4618      	mov	r0, r3
 8005996:	3718      	adds	r7, #24
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}
 800599c:	80002400 	.word	0x80002400
 80059a0:	fe00e800 	.word	0xfe00e800

080059a4 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b08a      	sub	sp, #40	@ 0x28
 80059a8:	af02      	add	r7, sp, #8
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	607a      	str	r2, [r7, #4]
 80059ae:	603b      	str	r3, [r7, #0]
 80059b0:	460b      	mov	r3, r1
 80059b2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80059b4:	2300      	movs	r3, #0
 80059b6:	617b      	str	r3, [r7, #20]

  HAL_StatusTypeDef status = HAL_OK;
 80059b8:	2300      	movs	r3, #0
 80059ba:	77fb      	strb	r3, [r7, #31]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	2b20      	cmp	r3, #32
 80059c6:	f040 80ed 	bne.w	8005ba4 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	699b      	ldr	r3, [r3, #24]
 80059d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80059d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059d8:	d101      	bne.n	80059de <HAL_I2C_IsDeviceReady+0x3a>
    {
      return HAL_BUSY;
 80059da:	2302      	movs	r3, #2
 80059dc:	e0e3      	b.n	8005ba6 <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d101      	bne.n	80059ec <HAL_I2C_IsDeviceReady+0x48>
 80059e8:	2302      	movs	r3, #2
 80059ea:	e0dc      	b.n	8005ba6 <HAL_I2C_IsDeviceReady+0x202>
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2224      	movs	r2, #36	@ 0x24
 80059f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2200      	movs	r2, #0
 8005a00:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d107      	bne.n	8005a1a <HAL_I2C_IsDeviceReady+0x76>
 8005a0a:	897b      	ldrh	r3, [r7, #10]
 8005a0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a10:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005a14:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005a18:	e006      	b.n	8005a28 <HAL_I2C_IsDeviceReady+0x84>
 8005a1a:	897b      	ldrh	r3, [r7, #10]
 8005a1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a20:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005a24:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8005a28:	68fa      	ldr	r2, [r7, #12]
 8005a2a:	6812      	ldr	r2, [r2, #0]
 8005a2c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8005a2e:	f7fe fff1 	bl	8004a14 <HAL_GetTick>
 8005a32:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	699b      	ldr	r3, [r3, #24]
 8005a3a:	f003 0320 	and.w	r3, r3, #32
 8005a3e:	2b20      	cmp	r3, #32
 8005a40:	bf0c      	ite	eq
 8005a42:	2301      	moveq	r3, #1
 8005a44:	2300      	movne	r3, #0
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	77bb      	strb	r3, [r7, #30]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	699b      	ldr	r3, [r3, #24]
 8005a50:	f003 0310 	and.w	r3, r3, #16
 8005a54:	2b10      	cmp	r3, #16
 8005a56:	bf0c      	ite	eq
 8005a58:	2301      	moveq	r3, #1
 8005a5a:	2300      	movne	r3, #0
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	777b      	strb	r3, [r7, #29]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005a60:	e034      	b.n	8005acc <HAL_I2C_IsDeviceReady+0x128>
      {
        if (Timeout != HAL_MAX_DELAY)
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a68:	d01a      	beq.n	8005aa0 <HAL_I2C_IsDeviceReady+0xfc>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005a6a:	f7fe ffd3 	bl	8004a14 <HAL_GetTick>
 8005a6e:	4602      	mov	r2, r0
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	1ad3      	subs	r3, r2, r3
 8005a74:	683a      	ldr	r2, [r7, #0]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d302      	bcc.n	8005a80 <HAL_I2C_IsDeviceReady+0xdc>
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d10f      	bne.n	8005aa0 <HAL_I2C_IsDeviceReady+0xfc>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2220      	movs	r2, #32
 8005a84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a8c:	f043 0220 	orr.w	r2, r3, #32
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2200      	movs	r2, #0
 8005a98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e082      	b.n	8005ba6 <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	699b      	ldr	r3, [r3, #24]
 8005aa6:	f003 0320 	and.w	r3, r3, #32
 8005aaa:	2b20      	cmp	r3, #32
 8005aac:	bf0c      	ite	eq
 8005aae:	2301      	moveq	r3, #1
 8005ab0:	2300      	movne	r3, #0
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	77bb      	strb	r3, [r7, #30]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	699b      	ldr	r3, [r3, #24]
 8005abc:	f003 0310 	and.w	r3, r3, #16
 8005ac0:	2b10      	cmp	r3, #16
 8005ac2:	bf0c      	ite	eq
 8005ac4:	2301      	moveq	r3, #1
 8005ac6:	2300      	movne	r3, #0
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	777b      	strb	r3, [r7, #29]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005acc:	7fbb      	ldrb	r3, [r7, #30]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d102      	bne.n	8005ad8 <HAL_I2C_IsDeviceReady+0x134>
 8005ad2:	7f7b      	ldrb	r3, [r7, #29]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d0c4      	beq.n	8005a62 <HAL_I2C_IsDeviceReady+0xbe>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	699b      	ldr	r3, [r3, #24]
 8005ade:	f003 0310 	and.w	r3, r3, #16
 8005ae2:	2b10      	cmp	r3, #16
 8005ae4:	d027      	beq.n	8005b36 <HAL_I2C_IsDeviceReady+0x192>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	9300      	str	r3, [sp, #0]
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	2200      	movs	r2, #0
 8005aee:	2120      	movs	r1, #32
 8005af0:	68f8      	ldr	r0, [r7, #12]
 8005af2:	f000 f929 	bl	8005d48 <I2C_WaitOnFlagUntilTimeout>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d00e      	beq.n	8005b1a <HAL_I2C_IsDeviceReady+0x176>
        {
          /* A non acknowledge appear during STOP Flag waiting process, a new trial must be performed */
          if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b00:	2b04      	cmp	r3, #4
 8005b02:	d107      	bne.n	8005b14 <HAL_I2C_IsDeviceReady+0x170>
          {
            /* Clear STOP Flag */
            __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	2220      	movs	r2, #32
 8005b0a:	61da      	str	r2, [r3, #28]

            /* Reset the error code for next trial */
            hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	645a      	str	r2, [r3, #68]	@ 0x44
 8005b12:	e026      	b.n	8005b62 <HAL_I2C_IsDeviceReady+0x1be>
          }
          else
          {
            status = HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	77fb      	strb	r3, [r7, #31]
 8005b18:	e023      	b.n	8005b62 <HAL_I2C_IsDeviceReady+0x1be>
        else
        {
          /* A acknowledge appear during STOP Flag waiting process, this mean that device respond to its address */

          /* Clear STOP Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	2220      	movs	r2, #32
 8005b20:	61da      	str	r2, [r3, #28]

          /* Device is ready */
          hi2c->State = HAL_I2C_STATE_READY;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2220      	movs	r2, #32
 8005b26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_OK;
 8005b32:	2300      	movs	r3, #0
 8005b34:	e037      	b.n	8005ba6 <HAL_I2C_IsDeviceReady+0x202>
      {
        /* A non acknowledge is detected, this mean that device not respond to its address,
           a new trial must be performed */

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	2210      	movs	r2, #16
 8005b3c:	61da      	str	r2, [r3, #28]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005b3e:	69bb      	ldr	r3, [r7, #24]
 8005b40:	9300      	str	r3, [sp, #0]
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	2200      	movs	r2, #0
 8005b46:	2120      	movs	r1, #32
 8005b48:	68f8      	ldr	r0, [r7, #12]
 8005b4a:	f000 f8fd 	bl	8005d48 <I2C_WaitOnFlagUntilTimeout>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d002      	beq.n	8005b5a <HAL_I2C_IsDeviceReady+0x1b6>
        {
          status = HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	77fb      	strb	r3, [r7, #31]
 8005b58:	e003      	b.n	8005b62 <HAL_I2C_IsDeviceReady+0x1be>
        }
        else
        {
          /* Clear STOP Flag, auto generated with autoend*/
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	2220      	movs	r2, #32
 8005b60:	61da      	str	r2, [r3, #28]
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	3301      	adds	r3, #1
 8005b66:	617b      	str	r3, [r7, #20]

      if ((I2C_Trials < Trials) && (status == HAL_ERROR))
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d904      	bls.n	8005b7a <HAL_I2C_IsDeviceReady+0x1d6>
 8005b70:	7ffb      	ldrb	r3, [r7, #31]
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d101      	bne.n	8005b7a <HAL_I2C_IsDeviceReady+0x1d6>
      {
        status = HAL_OK;
 8005b76:	2300      	movs	r3, #0
 8005b78:	77fb      	strb	r3, [r7, #31]
      }

    } while (I2C_Trials < Trials);
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	687a      	ldr	r2, [r7, #4]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	f63f af3f 	bhi.w	8005a02 <HAL_I2C_IsDeviceReady+0x5e>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2220      	movs	r2, #32
 8005b88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b90:	f043 0220 	orr.w	r2, r3, #32
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e000      	b.n	8005ba6 <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8005ba4:	2302      	movs	r3, #2
  }
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3720      	adds	r7, #32
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
	...

08005bb0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b086      	sub	sp, #24
 8005bb4:	af02      	add	r7, sp, #8
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	4608      	mov	r0, r1
 8005bba:	4611      	mov	r1, r2
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	817b      	strh	r3, [r7, #10]
 8005bc2:	460b      	mov	r3, r1
 8005bc4:	813b      	strh	r3, [r7, #8]
 8005bc6:	4613      	mov	r3, r2
 8005bc8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005bca:	88fb      	ldrh	r3, [r7, #6]
 8005bcc:	b2da      	uxtb	r2, r3
 8005bce:	8979      	ldrh	r1, [r7, #10]
 8005bd0:	4b20      	ldr	r3, [pc, #128]	@ (8005c54 <I2C_RequestMemoryWrite+0xa4>)
 8005bd2:	9300      	str	r3, [sp, #0]
 8005bd4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005bd8:	68f8      	ldr	r0, [r7, #12]
 8005bda:	f000 fa79 	bl	80060d0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bde:	69fa      	ldr	r2, [r7, #28]
 8005be0:	69b9      	ldr	r1, [r7, #24]
 8005be2:	68f8      	ldr	r0, [r7, #12]
 8005be4:	f000 f909 	bl	8005dfa <I2C_WaitOnTXISFlagUntilTimeout>
 8005be8:	4603      	mov	r3, r0
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d001      	beq.n	8005bf2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e02c      	b.n	8005c4c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005bf2:	88fb      	ldrh	r3, [r7, #6]
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d105      	bne.n	8005c04 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005bf8:	893b      	ldrh	r3, [r7, #8]
 8005bfa:	b2da      	uxtb	r2, r3
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	629a      	str	r2, [r3, #40]	@ 0x28
 8005c02:	e015      	b.n	8005c30 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005c04:	893b      	ldrh	r3, [r7, #8]
 8005c06:	0a1b      	lsrs	r3, r3, #8
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	b2da      	uxtb	r2, r3
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c12:	69fa      	ldr	r2, [r7, #28]
 8005c14:	69b9      	ldr	r1, [r7, #24]
 8005c16:	68f8      	ldr	r0, [r7, #12]
 8005c18:	f000 f8ef 	bl	8005dfa <I2C_WaitOnTXISFlagUntilTimeout>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d001      	beq.n	8005c26 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e012      	b.n	8005c4c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005c26:	893b      	ldrh	r3, [r7, #8]
 8005c28:	b2da      	uxtb	r2, r3
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	9300      	str	r3, [sp, #0]
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	2200      	movs	r2, #0
 8005c38:	2180      	movs	r1, #128	@ 0x80
 8005c3a:	68f8      	ldr	r0, [r7, #12]
 8005c3c:	f000 f884 	bl	8005d48 <I2C_WaitOnFlagUntilTimeout>
 8005c40:	4603      	mov	r3, r0
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d001      	beq.n	8005c4a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e000      	b.n	8005c4c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3710      	adds	r7, #16
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}
 8005c54:	80002000 	.word	0x80002000

08005c58 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b086      	sub	sp, #24
 8005c5c:	af02      	add	r7, sp, #8
 8005c5e:	60f8      	str	r0, [r7, #12]
 8005c60:	4608      	mov	r0, r1
 8005c62:	4611      	mov	r1, r2
 8005c64:	461a      	mov	r2, r3
 8005c66:	4603      	mov	r3, r0
 8005c68:	817b      	strh	r3, [r7, #10]
 8005c6a:	460b      	mov	r3, r1
 8005c6c:	813b      	strh	r3, [r7, #8]
 8005c6e:	4613      	mov	r3, r2
 8005c70:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005c72:	88fb      	ldrh	r3, [r7, #6]
 8005c74:	b2da      	uxtb	r2, r3
 8005c76:	8979      	ldrh	r1, [r7, #10]
 8005c78:	4b20      	ldr	r3, [pc, #128]	@ (8005cfc <I2C_RequestMemoryRead+0xa4>)
 8005c7a:	9300      	str	r3, [sp, #0]
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	68f8      	ldr	r0, [r7, #12]
 8005c80:	f000 fa26 	bl	80060d0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c84:	69fa      	ldr	r2, [r7, #28]
 8005c86:	69b9      	ldr	r1, [r7, #24]
 8005c88:	68f8      	ldr	r0, [r7, #12]
 8005c8a:	f000 f8b6 	bl	8005dfa <I2C_WaitOnTXISFlagUntilTimeout>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d001      	beq.n	8005c98 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	e02c      	b.n	8005cf2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c98:	88fb      	ldrh	r3, [r7, #6]
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d105      	bne.n	8005caa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005c9e:	893b      	ldrh	r3, [r7, #8]
 8005ca0:	b2da      	uxtb	r2, r3
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	629a      	str	r2, [r3, #40]	@ 0x28
 8005ca8:	e015      	b.n	8005cd6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005caa:	893b      	ldrh	r3, [r7, #8]
 8005cac:	0a1b      	lsrs	r3, r3, #8
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	b2da      	uxtb	r2, r3
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cb8:	69fa      	ldr	r2, [r7, #28]
 8005cba:	69b9      	ldr	r1, [r7, #24]
 8005cbc:	68f8      	ldr	r0, [r7, #12]
 8005cbe:	f000 f89c 	bl	8005dfa <I2C_WaitOnTXISFlagUntilTimeout>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d001      	beq.n	8005ccc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e012      	b.n	8005cf2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005ccc:	893b      	ldrh	r3, [r7, #8]
 8005cce:	b2da      	uxtb	r2, r3
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	9300      	str	r3, [sp, #0]
 8005cda:	69bb      	ldr	r3, [r7, #24]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	2140      	movs	r1, #64	@ 0x40
 8005ce0:	68f8      	ldr	r0, [r7, #12]
 8005ce2:	f000 f831 	bl	8005d48 <I2C_WaitOnFlagUntilTimeout>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d001      	beq.n	8005cf0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	e000      	b.n	8005cf2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005cf0:	2300      	movs	r3, #0
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3710      	adds	r7, #16
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}
 8005cfa:	bf00      	nop
 8005cfc:	80002000 	.word	0x80002000

08005d00 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	699b      	ldr	r3, [r3, #24]
 8005d0e:	f003 0302 	and.w	r3, r3, #2
 8005d12:	2b02      	cmp	r3, #2
 8005d14:	d103      	bne.n	8005d1e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	699b      	ldr	r3, [r3, #24]
 8005d24:	f003 0301 	and.w	r3, r3, #1
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d007      	beq.n	8005d3c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	699a      	ldr	r2, [r3, #24]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f042 0201 	orr.w	r2, r2, #1
 8005d3a:	619a      	str	r2, [r3, #24]
  }
}
 8005d3c:	bf00      	nop
 8005d3e:	370c      	adds	r7, #12
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	60b9      	str	r1, [r7, #8]
 8005d52:	603b      	str	r3, [r7, #0]
 8005d54:	4613      	mov	r3, r2
 8005d56:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d58:	e03b      	b.n	8005dd2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d5a:	69ba      	ldr	r2, [r7, #24]
 8005d5c:	6839      	ldr	r1, [r7, #0]
 8005d5e:	68f8      	ldr	r0, [r7, #12]
 8005d60:	f000 f8d6 	bl	8005f10 <I2C_IsErrorOccurred>
 8005d64:	4603      	mov	r3, r0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d001      	beq.n	8005d6e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e041      	b.n	8005df2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d74:	d02d      	beq.n	8005dd2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d76:	f7fe fe4d 	bl	8004a14 <HAL_GetTick>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	1ad3      	subs	r3, r2, r3
 8005d80:	683a      	ldr	r2, [r7, #0]
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d302      	bcc.n	8005d8c <I2C_WaitOnFlagUntilTimeout+0x44>
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d122      	bne.n	8005dd2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	699a      	ldr	r2, [r3, #24]
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	4013      	ands	r3, r2
 8005d96:	68ba      	ldr	r2, [r7, #8]
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	bf0c      	ite	eq
 8005d9c:	2301      	moveq	r3, #1
 8005d9e:	2300      	movne	r3, #0
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	461a      	mov	r2, r3
 8005da4:	79fb      	ldrb	r3, [r7, #7]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d113      	bne.n	8005dd2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dae:	f043 0220 	orr.w	r2, r3, #32
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2220      	movs	r2, #32
 8005dba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e00f      	b.n	8005df2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	699a      	ldr	r2, [r3, #24]
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	4013      	ands	r3, r2
 8005ddc:	68ba      	ldr	r2, [r7, #8]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	bf0c      	ite	eq
 8005de2:	2301      	moveq	r3, #1
 8005de4:	2300      	movne	r3, #0
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	461a      	mov	r2, r3
 8005dea:	79fb      	ldrb	r3, [r7, #7]
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d0b4      	beq.n	8005d5a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005df0:	2300      	movs	r3, #0
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3710      	adds	r7, #16
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}

08005dfa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005dfa:	b580      	push	{r7, lr}
 8005dfc:	b084      	sub	sp, #16
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	60f8      	str	r0, [r7, #12]
 8005e02:	60b9      	str	r1, [r7, #8]
 8005e04:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005e06:	e033      	b.n	8005e70 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	68b9      	ldr	r1, [r7, #8]
 8005e0c:	68f8      	ldr	r0, [r7, #12]
 8005e0e:	f000 f87f 	bl	8005f10 <I2C_IsErrorOccurred>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d001      	beq.n	8005e1c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e031      	b.n	8005e80 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e22:	d025      	beq.n	8005e70 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e24:	f7fe fdf6 	bl	8004a14 <HAL_GetTick>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	68ba      	ldr	r2, [r7, #8]
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d302      	bcc.n	8005e3a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d11a      	bne.n	8005e70 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	699b      	ldr	r3, [r3, #24]
 8005e40:	f003 0302 	and.w	r3, r3, #2
 8005e44:	2b02      	cmp	r3, #2
 8005e46:	d013      	beq.n	8005e70 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e4c:	f043 0220 	orr.w	r2, r3, #32
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2220      	movs	r2, #32
 8005e58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2200      	movs	r2, #0
 8005e68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e007      	b.n	8005e80 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	699b      	ldr	r3, [r3, #24]
 8005e76:	f003 0302 	and.w	r3, r3, #2
 8005e7a:	2b02      	cmp	r3, #2
 8005e7c:	d1c4      	bne.n	8005e08 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3710      	adds	r7, #16
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	60b9      	str	r1, [r7, #8]
 8005e92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e94:	e02f      	b.n	8005ef6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	68b9      	ldr	r1, [r7, #8]
 8005e9a:	68f8      	ldr	r0, [r7, #12]
 8005e9c:	f000 f838 	bl	8005f10 <I2C_IsErrorOccurred>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d001      	beq.n	8005eaa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e02d      	b.n	8005f06 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005eaa:	f7fe fdb3 	bl	8004a14 <HAL_GetTick>
 8005eae:	4602      	mov	r2, r0
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	1ad3      	subs	r3, r2, r3
 8005eb4:	68ba      	ldr	r2, [r7, #8]
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d302      	bcc.n	8005ec0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d11a      	bne.n	8005ef6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	699b      	ldr	r3, [r3, #24]
 8005ec6:	f003 0320 	and.w	r3, r3, #32
 8005eca:	2b20      	cmp	r3, #32
 8005ecc:	d013      	beq.n	8005ef6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ed2:	f043 0220 	orr.w	r2, r3, #32
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2220      	movs	r2, #32
 8005ede:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2200      	movs	r2, #0
 8005eee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e007      	b.n	8005f06 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	699b      	ldr	r3, [r3, #24]
 8005efc:	f003 0320 	and.w	r3, r3, #32
 8005f00:	2b20      	cmp	r3, #32
 8005f02:	d1c8      	bne.n	8005e96 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005f04:	2300      	movs	r3, #0
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3710      	adds	r7, #16
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}
	...

08005f10 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b08a      	sub	sp, #40	@ 0x28
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	60b9      	str	r1, [r7, #8]
 8005f1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	699b      	ldr	r3, [r3, #24]
 8005f28:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005f32:	69bb      	ldr	r3, [r7, #24]
 8005f34:	f003 0310 	and.w	r3, r3, #16
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d068      	beq.n	800600e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2210      	movs	r2, #16
 8005f42:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005f44:	e049      	b.n	8005fda <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f4c:	d045      	beq.n	8005fda <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005f4e:	f7fe fd61 	bl	8004a14 <HAL_GetTick>
 8005f52:	4602      	mov	r2, r0
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	1ad3      	subs	r3, r2, r3
 8005f58:	68ba      	ldr	r2, [r7, #8]
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d302      	bcc.n	8005f64 <I2C_IsErrorOccurred+0x54>
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d13a      	bne.n	8005fda <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f6e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f76:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	699b      	ldr	r3, [r3, #24]
 8005f7e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f82:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f86:	d121      	bne.n	8005fcc <I2C_IsErrorOccurred+0xbc>
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005f8e:	d01d      	beq.n	8005fcc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005f90:	7cfb      	ldrb	r3, [r7, #19]
 8005f92:	2b20      	cmp	r3, #32
 8005f94:	d01a      	beq.n	8005fcc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	685a      	ldr	r2, [r3, #4]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005fa4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005fa6:	f7fe fd35 	bl	8004a14 <HAL_GetTick>
 8005faa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005fac:	e00e      	b.n	8005fcc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005fae:	f7fe fd31 	bl	8004a14 <HAL_GetTick>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	69fb      	ldr	r3, [r7, #28]
 8005fb6:	1ad3      	subs	r3, r2, r3
 8005fb8:	2b19      	cmp	r3, #25
 8005fba:	d907      	bls.n	8005fcc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005fbc:	6a3b      	ldr	r3, [r7, #32]
 8005fbe:	f043 0320 	orr.w	r3, r3, #32
 8005fc2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005fca:	e006      	b.n	8005fda <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	699b      	ldr	r3, [r3, #24]
 8005fd2:	f003 0320 	and.w	r3, r3, #32
 8005fd6:	2b20      	cmp	r3, #32
 8005fd8:	d1e9      	bne.n	8005fae <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	699b      	ldr	r3, [r3, #24]
 8005fe0:	f003 0320 	and.w	r3, r3, #32
 8005fe4:	2b20      	cmp	r3, #32
 8005fe6:	d003      	beq.n	8005ff0 <I2C_IsErrorOccurred+0xe0>
 8005fe8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d0aa      	beq.n	8005f46 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005ff0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d103      	bne.n	8006000 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2220      	movs	r2, #32
 8005ffe:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006000:	6a3b      	ldr	r3, [r7, #32]
 8006002:	f043 0304 	orr.w	r3, r3, #4
 8006006:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	699b      	ldr	r3, [r3, #24]
 8006014:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006016:	69bb      	ldr	r3, [r7, #24]
 8006018:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800601c:	2b00      	cmp	r3, #0
 800601e:	d00b      	beq.n	8006038 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006020:	6a3b      	ldr	r3, [r7, #32]
 8006022:	f043 0301 	orr.w	r3, r3, #1
 8006026:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006030:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006038:	69bb      	ldr	r3, [r7, #24]
 800603a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800603e:	2b00      	cmp	r3, #0
 8006040:	d00b      	beq.n	800605a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006042:	6a3b      	ldr	r3, [r7, #32]
 8006044:	f043 0308 	orr.w	r3, r3, #8
 8006048:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006052:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006060:	2b00      	cmp	r3, #0
 8006062:	d00b      	beq.n	800607c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006064:	6a3b      	ldr	r3, [r7, #32]
 8006066:	f043 0302 	orr.w	r3, r3, #2
 800606a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006074:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800607c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006080:	2b00      	cmp	r3, #0
 8006082:	d01c      	beq.n	80060be <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006084:	68f8      	ldr	r0, [r7, #12]
 8006086:	f7ff fe3b 	bl	8005d00 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	6859      	ldr	r1, [r3, #4]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	4b0d      	ldr	r3, [pc, #52]	@ (80060cc <I2C_IsErrorOccurred+0x1bc>)
 8006096:	400b      	ands	r3, r1
 8006098:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800609e:	6a3b      	ldr	r3, [r7, #32]
 80060a0:	431a      	orrs	r2, r3
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2220      	movs	r2, #32
 80060aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2200      	movs	r2, #0
 80060ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80060be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3728      	adds	r7, #40	@ 0x28
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop
 80060cc:	fe00e800 	.word	0xfe00e800

080060d0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b087      	sub	sp, #28
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	60f8      	str	r0, [r7, #12]
 80060d8:	607b      	str	r3, [r7, #4]
 80060da:	460b      	mov	r3, r1
 80060dc:	817b      	strh	r3, [r7, #10]
 80060de:	4613      	mov	r3, r2
 80060e0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80060e2:	897b      	ldrh	r3, [r7, #10]
 80060e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80060e8:	7a7b      	ldrb	r3, [r7, #9]
 80060ea:	041b      	lsls	r3, r3, #16
 80060ec:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80060f0:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80060f6:	6a3b      	ldr	r3, [r7, #32]
 80060f8:	4313      	orrs	r3, r2
 80060fa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80060fe:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	685a      	ldr	r2, [r3, #4]
 8006106:	6a3b      	ldr	r3, [r7, #32]
 8006108:	0d5b      	lsrs	r3, r3, #21
 800610a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800610e:	4b08      	ldr	r3, [pc, #32]	@ (8006130 <I2C_TransferConfig+0x60>)
 8006110:	430b      	orrs	r3, r1
 8006112:	43db      	mvns	r3, r3
 8006114:	ea02 0103 	and.w	r1, r2, r3
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	697a      	ldr	r2, [r7, #20]
 800611e:	430a      	orrs	r2, r1
 8006120:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006122:	bf00      	nop
 8006124:	371c      	adds	r7, #28
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr
 800612e:	bf00      	nop
 8006130:	03ff63ff 	.word	0x03ff63ff

08006134 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006144:	b2db      	uxtb	r3, r3
 8006146:	2b20      	cmp	r3, #32
 8006148:	d138      	bne.n	80061bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006150:	2b01      	cmp	r3, #1
 8006152:	d101      	bne.n	8006158 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006154:	2302      	movs	r3, #2
 8006156:	e032      	b.n	80061be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2201      	movs	r2, #1
 800615c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2224      	movs	r2, #36	@ 0x24
 8006164:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f022 0201 	bic.w	r2, r2, #1
 8006176:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006186:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	6819      	ldr	r1, [r3, #0]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	683a      	ldr	r2, [r7, #0]
 8006194:	430a      	orrs	r2, r1
 8006196:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f042 0201 	orr.w	r2, r2, #1
 80061a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2220      	movs	r2, #32
 80061ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80061b8:	2300      	movs	r3, #0
 80061ba:	e000      	b.n	80061be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80061bc:	2302      	movs	r3, #2
  }
}
 80061be:	4618      	mov	r0, r3
 80061c0:	370c      	adds	r7, #12
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr

080061ca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80061ca:	b480      	push	{r7}
 80061cc:	b085      	sub	sp, #20
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	6078      	str	r0, [r7, #4]
 80061d2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	2b20      	cmp	r3, #32
 80061de:	d139      	bne.n	8006254 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d101      	bne.n	80061ee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80061ea:	2302      	movs	r3, #2
 80061ec:	e033      	b.n	8006256 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2201      	movs	r2, #1
 80061f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2224      	movs	r2, #36	@ 0x24
 80061fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f022 0201 	bic.w	r2, r2, #1
 800620c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800621c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	021b      	lsls	r3, r3, #8
 8006222:	68fa      	ldr	r2, [r7, #12]
 8006224:	4313      	orrs	r3, r2
 8006226:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f042 0201 	orr.w	r2, r2, #1
 800623e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2220      	movs	r2, #32
 8006244:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006250:	2300      	movs	r3, #0
 8006252:	e000      	b.n	8006256 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006254:	2302      	movs	r3, #2
  }
}
 8006256:	4618      	mov	r0, r3
 8006258:	3714      	adds	r7, #20
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr
	...

08006264 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006264:	b480      	push	{r7}
 8006266:	b085      	sub	sp, #20
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 800626c:	4b39      	ldr	r3, [pc, #228]	@ (8006354 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800626e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006270:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006274:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8006276:	68ba      	ldr	r2, [r7, #8]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	429a      	cmp	r2, r3
 800627c:	d10b      	bne.n	8006296 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006284:	d905      	bls.n	8006292 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8006286:	4b33      	ldr	r3, [pc, #204]	@ (8006354 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006288:	68db      	ldr	r3, [r3, #12]
 800628a:	4a32      	ldr	r2, [pc, #200]	@ (8006354 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800628c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006290:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8006292:	2300      	movs	r3, #0
 8006294:	e057      	b.n	8006346 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800629c:	d90a      	bls.n	80062b4 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800629e:	4b2d      	ldr	r3, [pc, #180]	@ (8006354 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80062a0:	68db      	ldr	r3, [r3, #12]
 80062a2:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	4313      	orrs	r3, r2
 80062aa:	4a2a      	ldr	r2, [pc, #168]	@ (8006354 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80062ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80062b0:	60d3      	str	r3, [r2, #12]
 80062b2:	e007      	b.n	80062c4 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80062b4:	4b27      	ldr	r3, [pc, #156]	@ (8006354 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80062bc:	4925      	ldr	r1, [pc, #148]	@ (8006354 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80062c4:	4b24      	ldr	r3, [pc, #144]	@ (8006358 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a24      	ldr	r2, [pc, #144]	@ (800635c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80062ca:	fba2 2303 	umull	r2, r3, r2, r3
 80062ce:	099b      	lsrs	r3, r3, #6
 80062d0:	2232      	movs	r2, #50	@ 0x32
 80062d2:	fb02 f303 	mul.w	r3, r2, r3
 80062d6:	4a21      	ldr	r2, [pc, #132]	@ (800635c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80062d8:	fba2 2303 	umull	r2, r3, r2, r3
 80062dc:	099b      	lsrs	r3, r3, #6
 80062de:	3301      	adds	r3, #1
 80062e0:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80062e2:	e002      	b.n	80062ea <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	3b01      	subs	r3, #1
 80062e8:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80062ea:	4b1a      	ldr	r3, [pc, #104]	@ (8006354 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80062ec:	68db      	ldr	r3, [r3, #12]
 80062ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d102      	bne.n	80062fc <HAL_PWREx_ControlVoltageScaling+0x98>
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d1f3      	bne.n	80062e4 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d01b      	beq.n	800633a <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8006302:	4b15      	ldr	r3, [pc, #84]	@ (8006358 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a15      	ldr	r2, [pc, #84]	@ (800635c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8006308:	fba2 2303 	umull	r2, r3, r2, r3
 800630c:	099b      	lsrs	r3, r3, #6
 800630e:	2232      	movs	r2, #50	@ 0x32
 8006310:	fb02 f303 	mul.w	r3, r2, r3
 8006314:	4a11      	ldr	r2, [pc, #68]	@ (800635c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8006316:	fba2 2303 	umull	r2, r3, r2, r3
 800631a:	099b      	lsrs	r3, r3, #6
 800631c:	3301      	adds	r3, #1
 800631e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8006320:	e002      	b.n	8006328 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	3b01      	subs	r3, #1
 8006326:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8006328:	4b0a      	ldr	r3, [pc, #40]	@ (8006354 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800632a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800632c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006330:	2b00      	cmp	r3, #0
 8006332:	d102      	bne.n	800633a <HAL_PWREx_ControlVoltageScaling+0xd6>
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d1f3      	bne.n	8006322 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d101      	bne.n	8006344 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8006340:	2303      	movs	r3, #3
 8006342:	e000      	b.n	8006346 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8006344:	2300      	movs	r3, #0
}
 8006346:	4618      	mov	r0, r3
 8006348:	3714      	adds	r7, #20
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr
 8006352:	bf00      	nop
 8006354:	46020800 	.word	0x46020800
 8006358:	20000004 	.word	0x20000004
 800635c:	10624dd3 	.word	0x10624dd3

08006360 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006360:	b480      	push	{r7}
 8006362:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8006364:	4b04      	ldr	r3, [pc, #16]	@ (8006378 <HAL_PWREx_GetVoltageRange+0x18>)
 8006366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006368:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 800636c:	4618      	mov	r0, r3
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr
 8006376:	bf00      	nop
 8006378:	46020800 	.word	0x46020800

0800637c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b08e      	sub	sp, #56	@ 0x38
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8006384:	2300      	movs	r3, #0
 8006386:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d102      	bne.n	8006396 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	f000 bec8 	b.w	8007126 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006396:	4b99      	ldr	r3, [pc, #612]	@ (80065fc <HAL_RCC_OscConfig+0x280>)
 8006398:	69db      	ldr	r3, [r3, #28]
 800639a:	f003 030c 	and.w	r3, r3, #12
 800639e:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80063a0:	4b96      	ldr	r3, [pc, #600]	@ (80065fc <HAL_RCC_OscConfig+0x280>)
 80063a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063a4:	f003 0303 	and.w	r3, r3, #3
 80063a8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f003 0310 	and.w	r3, r3, #16
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	f000 816c 	beq.w	8006690 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80063b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d007      	beq.n	80063ce <HAL_RCC_OscConfig+0x52>
 80063be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063c0:	2b0c      	cmp	r3, #12
 80063c2:	f040 80de 	bne.w	8006582 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80063c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	f040 80da 	bne.w	8006582 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	69db      	ldr	r3, [r3, #28]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d102      	bne.n	80063dc <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	f000 bea5 	b.w	8007126 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80063e0:	4b86      	ldr	r3, [pc, #536]	@ (80065fc <HAL_RCC_OscConfig+0x280>)
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d004      	beq.n	80063f6 <HAL_RCC_OscConfig+0x7a>
 80063ec:	4b83      	ldr	r3, [pc, #524]	@ (80065fc <HAL_RCC_OscConfig+0x280>)
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80063f4:	e005      	b.n	8006402 <HAL_RCC_OscConfig+0x86>
 80063f6:	4b81      	ldr	r3, [pc, #516]	@ (80065fc <HAL_RCC_OscConfig+0x280>)
 80063f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80063fc:	041b      	lsls	r3, r3, #16
 80063fe:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006402:	4293      	cmp	r3, r2
 8006404:	d255      	bcs.n	80064b2 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006408:	2b00      	cmp	r3, #0
 800640a:	d10a      	bne.n	8006422 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006410:	4618      	mov	r0, r3
 8006412:	f001 f9d9 	bl	80077c8 <RCC_SetFlashLatencyFromMSIRange>
 8006416:	4603      	mov	r3, r0
 8006418:	2b00      	cmp	r3, #0
 800641a:	d002      	beq.n	8006422 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	f000 be82 	b.w	8007126 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8006422:	4b76      	ldr	r3, [pc, #472]	@ (80065fc <HAL_RCC_OscConfig+0x280>)
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	4a75      	ldr	r2, [pc, #468]	@ (80065fc <HAL_RCC_OscConfig+0x280>)
 8006428:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800642c:	6093      	str	r3, [r2, #8]
 800642e:	4b73      	ldr	r3, [pc, #460]	@ (80065fc <HAL_RCC_OscConfig+0x280>)
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800643a:	4970      	ldr	r1, [pc, #448]	@ (80065fc <HAL_RCC_OscConfig+0x280>)
 800643c:	4313      	orrs	r3, r2
 800643e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006444:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8006448:	d309      	bcc.n	800645e <HAL_RCC_OscConfig+0xe2>
 800644a:	4b6c      	ldr	r3, [pc, #432]	@ (80065fc <HAL_RCC_OscConfig+0x280>)
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	f023 021f 	bic.w	r2, r3, #31
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6a1b      	ldr	r3, [r3, #32]
 8006456:	4969      	ldr	r1, [pc, #420]	@ (80065fc <HAL_RCC_OscConfig+0x280>)
 8006458:	4313      	orrs	r3, r2
 800645a:	60cb      	str	r3, [r1, #12]
 800645c:	e07e      	b.n	800655c <HAL_RCC_OscConfig+0x1e0>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006462:	2b00      	cmp	r3, #0
 8006464:	da0a      	bge.n	800647c <HAL_RCC_OscConfig+0x100>
 8006466:	4b65      	ldr	r3, [pc, #404]	@ (80065fc <HAL_RCC_OscConfig+0x280>)
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6a1b      	ldr	r3, [r3, #32]
 8006472:	015b      	lsls	r3, r3, #5
 8006474:	4961      	ldr	r1, [pc, #388]	@ (80065fc <HAL_RCC_OscConfig+0x280>)
 8006476:	4313      	orrs	r3, r2
 8006478:	60cb      	str	r3, [r1, #12]
 800647a:	e06f      	b.n	800655c <HAL_RCC_OscConfig+0x1e0>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006480:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006484:	d30a      	bcc.n	800649c <HAL_RCC_OscConfig+0x120>
 8006486:	4b5d      	ldr	r3, [pc, #372]	@ (80065fc <HAL_RCC_OscConfig+0x280>)
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a1b      	ldr	r3, [r3, #32]
 8006492:	029b      	lsls	r3, r3, #10
 8006494:	4959      	ldr	r1, [pc, #356]	@ (80065fc <HAL_RCC_OscConfig+0x280>)
 8006496:	4313      	orrs	r3, r2
 8006498:	60cb      	str	r3, [r1, #12]
 800649a:	e05f      	b.n	800655c <HAL_RCC_OscConfig+0x1e0>
 800649c:	4b57      	ldr	r3, [pc, #348]	@ (80065fc <HAL_RCC_OscConfig+0x280>)
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6a1b      	ldr	r3, [r3, #32]
 80064a8:	03db      	lsls	r3, r3, #15
 80064aa:	4954      	ldr	r1, [pc, #336]	@ (80065fc <HAL_RCC_OscConfig+0x280>)
 80064ac:	4313      	orrs	r3, r2
 80064ae:	60cb      	str	r3, [r1, #12]
 80064b0:	e054      	b.n	800655c <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80064b2:	4b52      	ldr	r3, [pc, #328]	@ (80065fc <HAL_RCC_OscConfig+0x280>)
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	4a51      	ldr	r2, [pc, #324]	@ (80065fc <HAL_RCC_OscConfig+0x280>)
 80064b8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80064bc:	6093      	str	r3, [r2, #8]
 80064be:	4b4f      	ldr	r3, [pc, #316]	@ (80065fc <HAL_RCC_OscConfig+0x280>)
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064ca:	494c      	ldr	r1, [pc, #304]	@ (80065fc <HAL_RCC_OscConfig+0x280>)
 80064cc:	4313      	orrs	r3, r2
 80064ce:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064d4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80064d8:	d309      	bcc.n	80064ee <HAL_RCC_OscConfig+0x172>
 80064da:	4b48      	ldr	r3, [pc, #288]	@ (80065fc <HAL_RCC_OscConfig+0x280>)
 80064dc:	68db      	ldr	r3, [r3, #12]
 80064de:	f023 021f 	bic.w	r2, r3, #31
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6a1b      	ldr	r3, [r3, #32]
 80064e6:	4945      	ldr	r1, [pc, #276]	@ (80065fc <HAL_RCC_OscConfig+0x280>)
 80064e8:	4313      	orrs	r3, r2
 80064ea:	60cb      	str	r3, [r1, #12]
 80064ec:	e028      	b.n	8006540 <HAL_RCC_OscConfig+0x1c4>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	da0a      	bge.n	800650c <HAL_RCC_OscConfig+0x190>
 80064f6:	4b41      	ldr	r3, [pc, #260]	@ (80065fc <HAL_RCC_OscConfig+0x280>)
 80064f8:	68db      	ldr	r3, [r3, #12]
 80064fa:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6a1b      	ldr	r3, [r3, #32]
 8006502:	015b      	lsls	r3, r3, #5
 8006504:	493d      	ldr	r1, [pc, #244]	@ (80065fc <HAL_RCC_OscConfig+0x280>)
 8006506:	4313      	orrs	r3, r2
 8006508:	60cb      	str	r3, [r1, #12]
 800650a:	e019      	b.n	8006540 <HAL_RCC_OscConfig+0x1c4>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006510:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006514:	d30a      	bcc.n	800652c <HAL_RCC_OscConfig+0x1b0>
 8006516:	4b39      	ldr	r3, [pc, #228]	@ (80065fc <HAL_RCC_OscConfig+0x280>)
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6a1b      	ldr	r3, [r3, #32]
 8006522:	029b      	lsls	r3, r3, #10
 8006524:	4935      	ldr	r1, [pc, #212]	@ (80065fc <HAL_RCC_OscConfig+0x280>)
 8006526:	4313      	orrs	r3, r2
 8006528:	60cb      	str	r3, [r1, #12]
 800652a:	e009      	b.n	8006540 <HAL_RCC_OscConfig+0x1c4>
 800652c:	4b33      	ldr	r3, [pc, #204]	@ (80065fc <HAL_RCC_OscConfig+0x280>)
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6a1b      	ldr	r3, [r3, #32]
 8006538:	03db      	lsls	r3, r3, #15
 800653a:	4930      	ldr	r1, [pc, #192]	@ (80065fc <HAL_RCC_OscConfig+0x280>)
 800653c:	4313      	orrs	r3, r2
 800653e:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006542:	2b00      	cmp	r3, #0
 8006544:	d10a      	bne.n	800655c <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800654a:	4618      	mov	r0, r3
 800654c:	f001 f93c 	bl	80077c8 <RCC_SetFlashLatencyFromMSIRange>
 8006550:	4603      	mov	r3, r0
 8006552:	2b00      	cmp	r3, #0
 8006554:	d002      	beq.n	800655c <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	f000 bde5 	b.w	8007126 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 800655c:	f001 f8de 	bl	800771c <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006560:	4b27      	ldr	r3, [pc, #156]	@ (8006600 <HAL_RCC_OscConfig+0x284>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4618      	mov	r0, r3
 8006566:	f7fe f9cb 	bl	8004900 <HAL_InitTick>
 800656a:	4603      	mov	r3, r0
 800656c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8006570:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006574:	2b00      	cmp	r3, #0
 8006576:	f000 808a 	beq.w	800668e <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800657a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800657e:	f000 bdd2 	b.w	8007126 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	69db      	ldr	r3, [r3, #28]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d066      	beq.n	8006658 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800658a:	4b1c      	ldr	r3, [pc, #112]	@ (80065fc <HAL_RCC_OscConfig+0x280>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a1b      	ldr	r2, [pc, #108]	@ (80065fc <HAL_RCC_OscConfig+0x280>)
 8006590:	f043 0301 	orr.w	r3, r3, #1
 8006594:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006596:	f7fe fa3d 	bl	8004a14 <HAL_GetTick>
 800659a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800659c:	e009      	b.n	80065b2 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800659e:	f7fe fa39 	bl	8004a14 <HAL_GetTick>
 80065a2:	4602      	mov	r2, r0
 80065a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065a6:	1ad3      	subs	r3, r2, r3
 80065a8:	2b02      	cmp	r3, #2
 80065aa:	d902      	bls.n	80065b2 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80065ac:	2303      	movs	r3, #3
 80065ae:	f000 bdba 	b.w	8007126 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80065b2:	4b12      	ldr	r3, [pc, #72]	@ (80065fc <HAL_RCC_OscConfig+0x280>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f003 0304 	and.w	r3, r3, #4
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d0ef      	beq.n	800659e <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80065be:	4b0f      	ldr	r3, [pc, #60]	@ (80065fc <HAL_RCC_OscConfig+0x280>)
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	4a0e      	ldr	r2, [pc, #56]	@ (80065fc <HAL_RCC_OscConfig+0x280>)
 80065c4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80065c8:	6093      	str	r3, [r2, #8]
 80065ca:	4b0c      	ldr	r3, [pc, #48]	@ (80065fc <HAL_RCC_OscConfig+0x280>)
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065d6:	4909      	ldr	r1, [pc, #36]	@ (80065fc <HAL_RCC_OscConfig+0x280>)
 80065d8:	4313      	orrs	r3, r2
 80065da:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065e0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80065e4:	d30e      	bcc.n	8006604 <HAL_RCC_OscConfig+0x288>
 80065e6:	4b05      	ldr	r3, [pc, #20]	@ (80065fc <HAL_RCC_OscConfig+0x280>)
 80065e8:	68db      	ldr	r3, [r3, #12]
 80065ea:	f023 021f 	bic.w	r2, r3, #31
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6a1b      	ldr	r3, [r3, #32]
 80065f2:	4902      	ldr	r1, [pc, #8]	@ (80065fc <HAL_RCC_OscConfig+0x280>)
 80065f4:	4313      	orrs	r3, r2
 80065f6:	60cb      	str	r3, [r1, #12]
 80065f8:	e04a      	b.n	8006690 <HAL_RCC_OscConfig+0x314>
 80065fa:	bf00      	nop
 80065fc:	46020c00 	.word	0x46020c00
 8006600:	20000008 	.word	0x20000008
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006608:	2b00      	cmp	r3, #0
 800660a:	da0a      	bge.n	8006622 <HAL_RCC_OscConfig+0x2a6>
 800660c:	4b98      	ldr	r3, [pc, #608]	@ (8006870 <HAL_RCC_OscConfig+0x4f4>)
 800660e:	68db      	ldr	r3, [r3, #12]
 8006610:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6a1b      	ldr	r3, [r3, #32]
 8006618:	015b      	lsls	r3, r3, #5
 800661a:	4995      	ldr	r1, [pc, #596]	@ (8006870 <HAL_RCC_OscConfig+0x4f4>)
 800661c:	4313      	orrs	r3, r2
 800661e:	60cb      	str	r3, [r1, #12]
 8006620:	e036      	b.n	8006690 <HAL_RCC_OscConfig+0x314>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006626:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800662a:	d30a      	bcc.n	8006642 <HAL_RCC_OscConfig+0x2c6>
 800662c:	4b90      	ldr	r3, [pc, #576]	@ (8006870 <HAL_RCC_OscConfig+0x4f4>)
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6a1b      	ldr	r3, [r3, #32]
 8006638:	029b      	lsls	r3, r3, #10
 800663a:	498d      	ldr	r1, [pc, #564]	@ (8006870 <HAL_RCC_OscConfig+0x4f4>)
 800663c:	4313      	orrs	r3, r2
 800663e:	60cb      	str	r3, [r1, #12]
 8006640:	e026      	b.n	8006690 <HAL_RCC_OscConfig+0x314>
 8006642:	4b8b      	ldr	r3, [pc, #556]	@ (8006870 <HAL_RCC_OscConfig+0x4f4>)
 8006644:	68db      	ldr	r3, [r3, #12]
 8006646:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a1b      	ldr	r3, [r3, #32]
 800664e:	03db      	lsls	r3, r3, #15
 8006650:	4987      	ldr	r1, [pc, #540]	@ (8006870 <HAL_RCC_OscConfig+0x4f4>)
 8006652:	4313      	orrs	r3, r2
 8006654:	60cb      	str	r3, [r1, #12]
 8006656:	e01b      	b.n	8006690 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8006658:	4b85      	ldr	r3, [pc, #532]	@ (8006870 <HAL_RCC_OscConfig+0x4f4>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a84      	ldr	r2, [pc, #528]	@ (8006870 <HAL_RCC_OscConfig+0x4f4>)
 800665e:	f023 0301 	bic.w	r3, r3, #1
 8006662:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006664:	f7fe f9d6 	bl	8004a14 <HAL_GetTick>
 8006668:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800666a:	e009      	b.n	8006680 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800666c:	f7fe f9d2 	bl	8004a14 <HAL_GetTick>
 8006670:	4602      	mov	r2, r0
 8006672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006674:	1ad3      	subs	r3, r2, r3
 8006676:	2b02      	cmp	r3, #2
 8006678:	d902      	bls.n	8006680 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 800667a:	2303      	movs	r3, #3
 800667c:	f000 bd53 	b.w	8007126 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8006680:	4b7b      	ldr	r3, [pc, #492]	@ (8006870 <HAL_RCC_OscConfig+0x4f4>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f003 0304 	and.w	r3, r3, #4
 8006688:	2b00      	cmp	r3, #0
 800668a:	d1ef      	bne.n	800666c <HAL_RCC_OscConfig+0x2f0>
 800668c:	e000      	b.n	8006690 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800668e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 0301 	and.w	r3, r3, #1
 8006698:	2b00      	cmp	r3, #0
 800669a:	f000 808b 	beq.w	80067b4 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800669e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066a0:	2b08      	cmp	r3, #8
 80066a2:	d005      	beq.n	80066b0 <HAL_RCC_OscConfig+0x334>
 80066a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066a6:	2b0c      	cmp	r3, #12
 80066a8:	d109      	bne.n	80066be <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80066aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066ac:	2b03      	cmp	r3, #3
 80066ae:	d106      	bne.n	80066be <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d17d      	bne.n	80067b4 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	f000 bd34 	b.w	8007126 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066c6:	d106      	bne.n	80066d6 <HAL_RCC_OscConfig+0x35a>
 80066c8:	4b69      	ldr	r3, [pc, #420]	@ (8006870 <HAL_RCC_OscConfig+0x4f4>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a68      	ldr	r2, [pc, #416]	@ (8006870 <HAL_RCC_OscConfig+0x4f4>)
 80066ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066d2:	6013      	str	r3, [r2, #0]
 80066d4:	e041      	b.n	800675a <HAL_RCC_OscConfig+0x3de>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80066de:	d112      	bne.n	8006706 <HAL_RCC_OscConfig+0x38a>
 80066e0:	4b63      	ldr	r3, [pc, #396]	@ (8006870 <HAL_RCC_OscConfig+0x4f4>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a62      	ldr	r2, [pc, #392]	@ (8006870 <HAL_RCC_OscConfig+0x4f4>)
 80066e6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80066ea:	6013      	str	r3, [r2, #0]
 80066ec:	4b60      	ldr	r3, [pc, #384]	@ (8006870 <HAL_RCC_OscConfig+0x4f4>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a5f      	ldr	r2, [pc, #380]	@ (8006870 <HAL_RCC_OscConfig+0x4f4>)
 80066f2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80066f6:	6013      	str	r3, [r2, #0]
 80066f8:	4b5d      	ldr	r3, [pc, #372]	@ (8006870 <HAL_RCC_OscConfig+0x4f4>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a5c      	ldr	r2, [pc, #368]	@ (8006870 <HAL_RCC_OscConfig+0x4f4>)
 80066fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006702:	6013      	str	r3, [r2, #0]
 8006704:	e029      	b.n	800675a <HAL_RCC_OscConfig+0x3de>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800670e:	d112      	bne.n	8006736 <HAL_RCC_OscConfig+0x3ba>
 8006710:	4b57      	ldr	r3, [pc, #348]	@ (8006870 <HAL_RCC_OscConfig+0x4f4>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a56      	ldr	r2, [pc, #344]	@ (8006870 <HAL_RCC_OscConfig+0x4f4>)
 8006716:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800671a:	6013      	str	r3, [r2, #0]
 800671c:	4b54      	ldr	r3, [pc, #336]	@ (8006870 <HAL_RCC_OscConfig+0x4f4>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a53      	ldr	r2, [pc, #332]	@ (8006870 <HAL_RCC_OscConfig+0x4f4>)
 8006722:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006726:	6013      	str	r3, [r2, #0]
 8006728:	4b51      	ldr	r3, [pc, #324]	@ (8006870 <HAL_RCC_OscConfig+0x4f4>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a50      	ldr	r2, [pc, #320]	@ (8006870 <HAL_RCC_OscConfig+0x4f4>)
 800672e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006732:	6013      	str	r3, [r2, #0]
 8006734:	e011      	b.n	800675a <HAL_RCC_OscConfig+0x3de>
 8006736:	4b4e      	ldr	r3, [pc, #312]	@ (8006870 <HAL_RCC_OscConfig+0x4f4>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a4d      	ldr	r2, [pc, #308]	@ (8006870 <HAL_RCC_OscConfig+0x4f4>)
 800673c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006740:	6013      	str	r3, [r2, #0]
 8006742:	4b4b      	ldr	r3, [pc, #300]	@ (8006870 <HAL_RCC_OscConfig+0x4f4>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a4a      	ldr	r2, [pc, #296]	@ (8006870 <HAL_RCC_OscConfig+0x4f4>)
 8006748:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800674c:	6013      	str	r3, [r2, #0]
 800674e:	4b48      	ldr	r3, [pc, #288]	@ (8006870 <HAL_RCC_OscConfig+0x4f4>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a47      	ldr	r2, [pc, #284]	@ (8006870 <HAL_RCC_OscConfig+0x4f4>)
 8006754:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006758:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d014      	beq.n	800678c <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8006762:	f7fe f957 	bl	8004a14 <HAL_GetTick>
 8006766:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006768:	e009      	b.n	800677e <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800676a:	f7fe f953 	bl	8004a14 <HAL_GetTick>
 800676e:	4602      	mov	r2, r0
 8006770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006772:	1ad3      	subs	r3, r2, r3
 8006774:	2b64      	cmp	r3, #100	@ 0x64
 8006776:	d902      	bls.n	800677e <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8006778:	2303      	movs	r3, #3
 800677a:	f000 bcd4 	b.w	8007126 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800677e:	4b3c      	ldr	r3, [pc, #240]	@ (8006870 <HAL_RCC_OscConfig+0x4f4>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006786:	2b00      	cmp	r3, #0
 8006788:	d0ef      	beq.n	800676a <HAL_RCC_OscConfig+0x3ee>
 800678a:	e013      	b.n	80067b4 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 800678c:	f7fe f942 	bl	8004a14 <HAL_GetTick>
 8006790:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006792:	e009      	b.n	80067a8 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006794:	f7fe f93e 	bl	8004a14 <HAL_GetTick>
 8006798:	4602      	mov	r2, r0
 800679a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800679c:	1ad3      	subs	r3, r2, r3
 800679e:	2b64      	cmp	r3, #100	@ 0x64
 80067a0:	d902      	bls.n	80067a8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80067a2:	2303      	movs	r3, #3
 80067a4:	f000 bcbf 	b.w	8007126 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80067a8:	4b31      	ldr	r3, [pc, #196]	@ (8006870 <HAL_RCC_OscConfig+0x4f4>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d1ef      	bne.n	8006794 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f003 0302 	and.w	r3, r3, #2
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d05f      	beq.n	8006880 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80067c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067c2:	2b04      	cmp	r3, #4
 80067c4:	d005      	beq.n	80067d2 <HAL_RCC_OscConfig+0x456>
 80067c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067c8:	2b0c      	cmp	r3, #12
 80067ca:	d114      	bne.n	80067f6 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80067cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067ce:	2b02      	cmp	r3, #2
 80067d0:	d111      	bne.n	80067f6 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	68db      	ldr	r3, [r3, #12]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d102      	bne.n	80067e0 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 80067da:	2301      	movs	r3, #1
 80067dc:	f000 bca3 	b.w	8007126 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80067e0:	4b23      	ldr	r3, [pc, #140]	@ (8006870 <HAL_RCC_OscConfig+0x4f4>)
 80067e2:	691b      	ldr	r3, [r3, #16]
 80067e4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	691b      	ldr	r3, [r3, #16]
 80067ec:	041b      	lsls	r3, r3, #16
 80067ee:	4920      	ldr	r1, [pc, #128]	@ (8006870 <HAL_RCC_OscConfig+0x4f4>)
 80067f0:	4313      	orrs	r3, r2
 80067f2:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80067f4:	e044      	b.n	8006880 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	68db      	ldr	r3, [r3, #12]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d024      	beq.n	8006848 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80067fe:	4b1c      	ldr	r3, [pc, #112]	@ (8006870 <HAL_RCC_OscConfig+0x4f4>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a1b      	ldr	r2, [pc, #108]	@ (8006870 <HAL_RCC_OscConfig+0x4f4>)
 8006804:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006808:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800680a:	f7fe f903 	bl	8004a14 <HAL_GetTick>
 800680e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006810:	e009      	b.n	8006826 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006812:	f7fe f8ff 	bl	8004a14 <HAL_GetTick>
 8006816:	4602      	mov	r2, r0
 8006818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800681a:	1ad3      	subs	r3, r2, r3
 800681c:	2b02      	cmp	r3, #2
 800681e:	d902      	bls.n	8006826 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006820:	2303      	movs	r3, #3
 8006822:	f000 bc80 	b.w	8007126 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006826:	4b12      	ldr	r3, [pc, #72]	@ (8006870 <HAL_RCC_OscConfig+0x4f4>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800682e:	2b00      	cmp	r3, #0
 8006830:	d0ef      	beq.n	8006812 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8006832:	4b0f      	ldr	r3, [pc, #60]	@ (8006870 <HAL_RCC_OscConfig+0x4f4>)
 8006834:	691b      	ldr	r3, [r3, #16]
 8006836:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	691b      	ldr	r3, [r3, #16]
 800683e:	041b      	lsls	r3, r3, #16
 8006840:	490b      	ldr	r1, [pc, #44]	@ (8006870 <HAL_RCC_OscConfig+0x4f4>)
 8006842:	4313      	orrs	r3, r2
 8006844:	610b      	str	r3, [r1, #16]
 8006846:	e01b      	b.n	8006880 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8006848:	4b09      	ldr	r3, [pc, #36]	@ (8006870 <HAL_RCC_OscConfig+0x4f4>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a08      	ldr	r2, [pc, #32]	@ (8006870 <HAL_RCC_OscConfig+0x4f4>)
 800684e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006852:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006854:	f7fe f8de 	bl	8004a14 <HAL_GetTick>
 8006858:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800685a:	e00b      	b.n	8006874 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800685c:	f7fe f8da 	bl	8004a14 <HAL_GetTick>
 8006860:	4602      	mov	r2, r0
 8006862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006864:	1ad3      	subs	r3, r2, r3
 8006866:	2b02      	cmp	r3, #2
 8006868:	d904      	bls.n	8006874 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800686a:	2303      	movs	r3, #3
 800686c:	f000 bc5b 	b.w	8007126 <HAL_RCC_OscConfig+0xdaa>
 8006870:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006874:	4baf      	ldr	r3, [pc, #700]	@ (8006b34 <HAL_RCC_OscConfig+0x7b8>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800687c:	2b00      	cmp	r3, #0
 800687e:	d1ed      	bne.n	800685c <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f003 0308 	and.w	r3, r3, #8
 8006888:	2b00      	cmp	r3, #0
 800688a:	f000 80c8 	beq.w	8006a1e <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800688e:	2300      	movs	r3, #0
 8006890:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006894:	4ba7      	ldr	r3, [pc, #668]	@ (8006b34 <HAL_RCC_OscConfig+0x7b8>)
 8006896:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800689a:	f003 0304 	and.w	r3, r3, #4
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d111      	bne.n	80068c6 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068a2:	4ba4      	ldr	r3, [pc, #656]	@ (8006b34 <HAL_RCC_OscConfig+0x7b8>)
 80068a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80068a8:	4aa2      	ldr	r2, [pc, #648]	@ (8006b34 <HAL_RCC_OscConfig+0x7b8>)
 80068aa:	f043 0304 	orr.w	r3, r3, #4
 80068ae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80068b2:	4ba0      	ldr	r3, [pc, #640]	@ (8006b34 <HAL_RCC_OscConfig+0x7b8>)
 80068b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80068b8:	f003 0304 	and.w	r3, r3, #4
 80068bc:	617b      	str	r3, [r7, #20]
 80068be:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 80068c0:	2301      	movs	r3, #1
 80068c2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80068c6:	4b9c      	ldr	r3, [pc, #624]	@ (8006b38 <HAL_RCC_OscConfig+0x7bc>)
 80068c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068ca:	f003 0301 	and.w	r3, r3, #1
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d119      	bne.n	8006906 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80068d2:	4b99      	ldr	r3, [pc, #612]	@ (8006b38 <HAL_RCC_OscConfig+0x7bc>)
 80068d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068d6:	4a98      	ldr	r2, [pc, #608]	@ (8006b38 <HAL_RCC_OscConfig+0x7bc>)
 80068d8:	f043 0301 	orr.w	r3, r3, #1
 80068dc:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80068de:	f7fe f899 	bl	8004a14 <HAL_GetTick>
 80068e2:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80068e4:	e009      	b.n	80068fa <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068e6:	f7fe f895 	bl	8004a14 <HAL_GetTick>
 80068ea:	4602      	mov	r2, r0
 80068ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ee:	1ad3      	subs	r3, r2, r3
 80068f0:	2b02      	cmp	r3, #2
 80068f2:	d902      	bls.n	80068fa <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 80068f4:	2303      	movs	r3, #3
 80068f6:	f000 bc16 	b.w	8007126 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80068fa:	4b8f      	ldr	r3, [pc, #572]	@ (8006b38 <HAL_RCC_OscConfig+0x7bc>)
 80068fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068fe:	f003 0301 	and.w	r3, r3, #1
 8006902:	2b00      	cmp	r3, #0
 8006904:	d0ef      	beq.n	80068e6 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	695b      	ldr	r3, [r3, #20]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d05f      	beq.n	80069ce <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800690e:	4b89      	ldr	r3, [pc, #548]	@ (8006b34 <HAL_RCC_OscConfig+0x7b8>)
 8006910:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006914:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	699a      	ldr	r2, [r3, #24]
 800691a:	6a3b      	ldr	r3, [r7, #32]
 800691c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006920:	429a      	cmp	r2, r3
 8006922:	d037      	beq.n	8006994 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8006924:	6a3b      	ldr	r3, [r7, #32]
 8006926:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800692a:	2b00      	cmp	r3, #0
 800692c:	d006      	beq.n	800693c <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800692e:	6a3b      	ldr	r3, [r7, #32]
 8006930:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8006934:	2b00      	cmp	r3, #0
 8006936:	d101      	bne.n	800693c <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8006938:	2301      	movs	r3, #1
 800693a:	e3f4      	b.n	8007126 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 800693c:	6a3b      	ldr	r3, [r7, #32]
 800693e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006942:	2b00      	cmp	r3, #0
 8006944:	d01b      	beq.n	800697e <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8006946:	4b7b      	ldr	r3, [pc, #492]	@ (8006b34 <HAL_RCC_OscConfig+0x7b8>)
 8006948:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800694c:	4a79      	ldr	r2, [pc, #484]	@ (8006b34 <HAL_RCC_OscConfig+0x7b8>)
 800694e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8006952:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8006956:	f7fe f85d 	bl	8004a14 <HAL_GetTick>
 800695a:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800695c:	e008      	b.n	8006970 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800695e:	f7fe f859 	bl	8004a14 <HAL_GetTick>
 8006962:	4602      	mov	r2, r0
 8006964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006966:	1ad3      	subs	r3, r2, r3
 8006968:	2b05      	cmp	r3, #5
 800696a:	d901      	bls.n	8006970 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 800696c:	2303      	movs	r3, #3
 800696e:	e3da      	b.n	8007126 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006970:	4b70      	ldr	r3, [pc, #448]	@ (8006b34 <HAL_RCC_OscConfig+0x7b8>)
 8006972:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006976:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800697a:	2b00      	cmp	r3, #0
 800697c:	d1ef      	bne.n	800695e <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800697e:	4b6d      	ldr	r3, [pc, #436]	@ (8006b34 <HAL_RCC_OscConfig+0x7b8>)
 8006980:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006984:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	699b      	ldr	r3, [r3, #24]
 800698c:	4969      	ldr	r1, [pc, #420]	@ (8006b34 <HAL_RCC_OscConfig+0x7b8>)
 800698e:	4313      	orrs	r3, r2
 8006990:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8006994:	4b67      	ldr	r3, [pc, #412]	@ (8006b34 <HAL_RCC_OscConfig+0x7b8>)
 8006996:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800699a:	4a66      	ldr	r2, [pc, #408]	@ (8006b34 <HAL_RCC_OscConfig+0x7b8>)
 800699c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80069a0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80069a4:	f7fe f836 	bl	8004a14 <HAL_GetTick>
 80069a8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80069aa:	e008      	b.n	80069be <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069ac:	f7fe f832 	bl	8004a14 <HAL_GetTick>
 80069b0:	4602      	mov	r2, r0
 80069b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069b4:	1ad3      	subs	r3, r2, r3
 80069b6:	2b05      	cmp	r3, #5
 80069b8:	d901      	bls.n	80069be <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 80069ba:	2303      	movs	r3, #3
 80069bc:	e3b3      	b.n	8007126 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80069be:	4b5d      	ldr	r3, [pc, #372]	@ (8006b34 <HAL_RCC_OscConfig+0x7b8>)
 80069c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80069c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d0ef      	beq.n	80069ac <HAL_RCC_OscConfig+0x630>
 80069cc:	e01b      	b.n	8006a06 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 80069ce:	4b59      	ldr	r3, [pc, #356]	@ (8006b34 <HAL_RCC_OscConfig+0x7b8>)
 80069d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80069d4:	4a57      	ldr	r2, [pc, #348]	@ (8006b34 <HAL_RCC_OscConfig+0x7b8>)
 80069d6:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80069da:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80069de:	f7fe f819 	bl	8004a14 <HAL_GetTick>
 80069e2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80069e4:	e008      	b.n	80069f8 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069e6:	f7fe f815 	bl	8004a14 <HAL_GetTick>
 80069ea:	4602      	mov	r2, r0
 80069ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069ee:	1ad3      	subs	r3, r2, r3
 80069f0:	2b05      	cmp	r3, #5
 80069f2:	d901      	bls.n	80069f8 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 80069f4:	2303      	movs	r3, #3
 80069f6:	e396      	b.n	8007126 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80069f8:	4b4e      	ldr	r3, [pc, #312]	@ (8006b34 <HAL_RCC_OscConfig+0x7b8>)
 80069fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80069fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d1ef      	bne.n	80069e6 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006a06:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	d107      	bne.n	8006a1e <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a0e:	4b49      	ldr	r3, [pc, #292]	@ (8006b34 <HAL_RCC_OscConfig+0x7b8>)
 8006a10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a14:	4a47      	ldr	r2, [pc, #284]	@ (8006b34 <HAL_RCC_OscConfig+0x7b8>)
 8006a16:	f023 0304 	bic.w	r3, r3, #4
 8006a1a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f003 0304 	and.w	r3, r3, #4
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	f000 8111 	beq.w	8006c4e <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a32:	4b40      	ldr	r3, [pc, #256]	@ (8006b34 <HAL_RCC_OscConfig+0x7b8>)
 8006a34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a38:	f003 0304 	and.w	r3, r3, #4
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d111      	bne.n	8006a64 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a40:	4b3c      	ldr	r3, [pc, #240]	@ (8006b34 <HAL_RCC_OscConfig+0x7b8>)
 8006a42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a46:	4a3b      	ldr	r2, [pc, #236]	@ (8006b34 <HAL_RCC_OscConfig+0x7b8>)
 8006a48:	f043 0304 	orr.w	r3, r3, #4
 8006a4c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006a50:	4b38      	ldr	r3, [pc, #224]	@ (8006b34 <HAL_RCC_OscConfig+0x7b8>)
 8006a52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a56:	f003 0304 	and.w	r3, r3, #4
 8006a5a:	613b      	str	r3, [r7, #16]
 8006a5c:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006a64:	4b34      	ldr	r3, [pc, #208]	@ (8006b38 <HAL_RCC_OscConfig+0x7bc>)
 8006a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a68:	f003 0301 	and.w	r3, r3, #1
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d118      	bne.n	8006aa2 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006a70:	4b31      	ldr	r3, [pc, #196]	@ (8006b38 <HAL_RCC_OscConfig+0x7bc>)
 8006a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a74:	4a30      	ldr	r2, [pc, #192]	@ (8006b38 <HAL_RCC_OscConfig+0x7bc>)
 8006a76:	f043 0301 	orr.w	r3, r3, #1
 8006a7a:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a7c:	f7fd ffca 	bl	8004a14 <HAL_GetTick>
 8006a80:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006a82:	e008      	b.n	8006a96 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a84:	f7fd ffc6 	bl	8004a14 <HAL_GetTick>
 8006a88:	4602      	mov	r2, r0
 8006a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a8c:	1ad3      	subs	r3, r2, r3
 8006a8e:	2b02      	cmp	r3, #2
 8006a90:	d901      	bls.n	8006a96 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8006a92:	2303      	movs	r3, #3
 8006a94:	e347      	b.n	8007126 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006a96:	4b28      	ldr	r3, [pc, #160]	@ (8006b38 <HAL_RCC_OscConfig+0x7bc>)
 8006a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a9a:	f003 0301 	and.w	r3, r3, #1
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d0f0      	beq.n	8006a84 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	689b      	ldr	r3, [r3, #8]
 8006aa6:	f003 0301 	and.w	r3, r3, #1
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d01f      	beq.n	8006aee <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	f003 0304 	and.w	r3, r3, #4
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d010      	beq.n	8006adc <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006aba:	4b1e      	ldr	r3, [pc, #120]	@ (8006b34 <HAL_RCC_OscConfig+0x7b8>)
 8006abc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ac0:	4a1c      	ldr	r2, [pc, #112]	@ (8006b34 <HAL_RCC_OscConfig+0x7b8>)
 8006ac2:	f043 0304 	orr.w	r3, r3, #4
 8006ac6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006aca:	4b1a      	ldr	r3, [pc, #104]	@ (8006b34 <HAL_RCC_OscConfig+0x7b8>)
 8006acc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ad0:	4a18      	ldr	r2, [pc, #96]	@ (8006b34 <HAL_RCC_OscConfig+0x7b8>)
 8006ad2:	f043 0301 	orr.w	r3, r3, #1
 8006ad6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006ada:	e018      	b.n	8006b0e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006adc:	4b15      	ldr	r3, [pc, #84]	@ (8006b34 <HAL_RCC_OscConfig+0x7b8>)
 8006ade:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ae2:	4a14      	ldr	r2, [pc, #80]	@ (8006b34 <HAL_RCC_OscConfig+0x7b8>)
 8006ae4:	f043 0301 	orr.w	r3, r3, #1
 8006ae8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006aec:	e00f      	b.n	8006b0e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006aee:	4b11      	ldr	r3, [pc, #68]	@ (8006b34 <HAL_RCC_OscConfig+0x7b8>)
 8006af0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006af4:	4a0f      	ldr	r2, [pc, #60]	@ (8006b34 <HAL_RCC_OscConfig+0x7b8>)
 8006af6:	f023 0301 	bic.w	r3, r3, #1
 8006afa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006afe:	4b0d      	ldr	r3, [pc, #52]	@ (8006b34 <HAL_RCC_OscConfig+0x7b8>)
 8006b00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b04:	4a0b      	ldr	r2, [pc, #44]	@ (8006b34 <HAL_RCC_OscConfig+0x7b8>)
 8006b06:	f023 0304 	bic.w	r3, r3, #4
 8006b0a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d057      	beq.n	8006bc6 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8006b16:	f7fd ff7d 	bl	8004a14 <HAL_GetTick>
 8006b1a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b1c:	e00e      	b.n	8006b3c <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b1e:	f7fd ff79 	bl	8004a14 <HAL_GetTick>
 8006b22:	4602      	mov	r2, r0
 8006b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b26:	1ad3      	subs	r3, r2, r3
 8006b28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d905      	bls.n	8006b3c <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8006b30:	2303      	movs	r3, #3
 8006b32:	e2f8      	b.n	8007126 <HAL_RCC_OscConfig+0xdaa>
 8006b34:	46020c00 	.word	0x46020c00
 8006b38:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b3c:	4b9c      	ldr	r3, [pc, #624]	@ (8006db0 <HAL_RCC_OscConfig+0xa34>)
 8006b3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b42:	f003 0302 	and.w	r3, r3, #2
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d0e9      	beq.n	8006b1e <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d01b      	beq.n	8006b8e <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006b56:	4b96      	ldr	r3, [pc, #600]	@ (8006db0 <HAL_RCC_OscConfig+0xa34>)
 8006b58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b5c:	4a94      	ldr	r2, [pc, #592]	@ (8006db0 <HAL_RCC_OscConfig+0xa34>)
 8006b5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b62:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006b66:	e00a      	b.n	8006b7e <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b68:	f7fd ff54 	bl	8004a14 <HAL_GetTick>
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b70:	1ad3      	subs	r3, r2, r3
 8006b72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d901      	bls.n	8006b7e <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8006b7a:	2303      	movs	r3, #3
 8006b7c:	e2d3      	b.n	8007126 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006b7e:	4b8c      	ldr	r3, [pc, #560]	@ (8006db0 <HAL_RCC_OscConfig+0xa34>)
 8006b80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d0ed      	beq.n	8006b68 <HAL_RCC_OscConfig+0x7ec>
 8006b8c:	e053      	b.n	8006c36 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006b8e:	4b88      	ldr	r3, [pc, #544]	@ (8006db0 <HAL_RCC_OscConfig+0xa34>)
 8006b90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b94:	4a86      	ldr	r2, [pc, #536]	@ (8006db0 <HAL_RCC_OscConfig+0xa34>)
 8006b96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b9a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006b9e:	e00a      	b.n	8006bb6 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ba0:	f7fd ff38 	bl	8004a14 <HAL_GetTick>
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ba8:	1ad3      	subs	r3, r2, r3
 8006baa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d901      	bls.n	8006bb6 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8006bb2:	2303      	movs	r3, #3
 8006bb4:	e2b7      	b.n	8007126 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006bb6:	4b7e      	ldr	r3, [pc, #504]	@ (8006db0 <HAL_RCC_OscConfig+0xa34>)
 8006bb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006bbc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d1ed      	bne.n	8006ba0 <HAL_RCC_OscConfig+0x824>
 8006bc4:	e037      	b.n	8006c36 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8006bc6:	f7fd ff25 	bl	8004a14 <HAL_GetTick>
 8006bca:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006bcc:	e00a      	b.n	8006be4 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bce:	f7fd ff21 	bl	8004a14 <HAL_GetTick>
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bd6:	1ad3      	subs	r3, r2, r3
 8006bd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d901      	bls.n	8006be4 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8006be0:	2303      	movs	r3, #3
 8006be2:	e2a0      	b.n	8007126 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006be4:	4b72      	ldr	r3, [pc, #456]	@ (8006db0 <HAL_RCC_OscConfig+0xa34>)
 8006be6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006bea:	f003 0302 	and.w	r3, r3, #2
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d1ed      	bne.n	8006bce <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8006bf2:	4b6f      	ldr	r3, [pc, #444]	@ (8006db0 <HAL_RCC_OscConfig+0xa34>)
 8006bf4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006bf8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d01a      	beq.n	8006c36 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006c00:	4b6b      	ldr	r3, [pc, #428]	@ (8006db0 <HAL_RCC_OscConfig+0xa34>)
 8006c02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c06:	4a6a      	ldr	r2, [pc, #424]	@ (8006db0 <HAL_RCC_OscConfig+0xa34>)
 8006c08:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c0c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006c10:	e00a      	b.n	8006c28 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c12:	f7fd feff 	bl	8004a14 <HAL_GetTick>
 8006c16:	4602      	mov	r2, r0
 8006c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c1a:	1ad3      	subs	r3, r2, r3
 8006c1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d901      	bls.n	8006c28 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8006c24:	2303      	movs	r3, #3
 8006c26:	e27e      	b.n	8007126 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006c28:	4b61      	ldr	r3, [pc, #388]	@ (8006db0 <HAL_RCC_OscConfig+0xa34>)
 8006c2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c2e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d1ed      	bne.n	8006c12 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006c36:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d107      	bne.n	8006c4e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c3e:	4b5c      	ldr	r3, [pc, #368]	@ (8006db0 <HAL_RCC_OscConfig+0xa34>)
 8006c40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c44:	4a5a      	ldr	r2, [pc, #360]	@ (8006db0 <HAL_RCC_OscConfig+0xa34>)
 8006c46:	f023 0304 	bic.w	r3, r3, #4
 8006c4a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f003 0320 	and.w	r3, r3, #32
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d036      	beq.n	8006cc8 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d019      	beq.n	8006c96 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8006c62:	4b53      	ldr	r3, [pc, #332]	@ (8006db0 <HAL_RCC_OscConfig+0xa34>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a52      	ldr	r2, [pc, #328]	@ (8006db0 <HAL_RCC_OscConfig+0xa34>)
 8006c68:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006c6c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006c6e:	f7fd fed1 	bl	8004a14 <HAL_GetTick>
 8006c72:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006c74:	e008      	b.n	8006c88 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006c76:	f7fd fecd 	bl	8004a14 <HAL_GetTick>
 8006c7a:	4602      	mov	r2, r0
 8006c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c7e:	1ad3      	subs	r3, r2, r3
 8006c80:	2b02      	cmp	r3, #2
 8006c82:	d901      	bls.n	8006c88 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8006c84:	2303      	movs	r3, #3
 8006c86:	e24e      	b.n	8007126 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006c88:	4b49      	ldr	r3, [pc, #292]	@ (8006db0 <HAL_RCC_OscConfig+0xa34>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d0f0      	beq.n	8006c76 <HAL_RCC_OscConfig+0x8fa>
 8006c94:	e018      	b.n	8006cc8 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8006c96:	4b46      	ldr	r3, [pc, #280]	@ (8006db0 <HAL_RCC_OscConfig+0xa34>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a45      	ldr	r2, [pc, #276]	@ (8006db0 <HAL_RCC_OscConfig+0xa34>)
 8006c9c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006ca0:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006ca2:	f7fd feb7 	bl	8004a14 <HAL_GetTick>
 8006ca6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8006ca8:	e008      	b.n	8006cbc <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006caa:	f7fd feb3 	bl	8004a14 <HAL_GetTick>
 8006cae:	4602      	mov	r2, r0
 8006cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cb2:	1ad3      	subs	r3, r2, r3
 8006cb4:	2b02      	cmp	r3, #2
 8006cb6:	d901      	bls.n	8006cbc <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8006cb8:	2303      	movs	r3, #3
 8006cba:	e234      	b.n	8007126 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8006cbc:	4b3c      	ldr	r3, [pc, #240]	@ (8006db0 <HAL_RCC_OscConfig+0xa34>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d1f0      	bne.n	8006caa <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d036      	beq.n	8006d42 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d019      	beq.n	8006d10 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8006cdc:	4b34      	ldr	r3, [pc, #208]	@ (8006db0 <HAL_RCC_OscConfig+0xa34>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a33      	ldr	r2, [pc, #204]	@ (8006db0 <HAL_RCC_OscConfig+0xa34>)
 8006ce2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006ce6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006ce8:	f7fd fe94 	bl	8004a14 <HAL_GetTick>
 8006cec:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8006cee:	e008      	b.n	8006d02 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8006cf0:	f7fd fe90 	bl	8004a14 <HAL_GetTick>
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cf8:	1ad3      	subs	r3, r2, r3
 8006cfa:	2b02      	cmp	r3, #2
 8006cfc:	d901      	bls.n	8006d02 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8006cfe:	2303      	movs	r3, #3
 8006d00:	e211      	b.n	8007126 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8006d02:	4b2b      	ldr	r3, [pc, #172]	@ (8006db0 <HAL_RCC_OscConfig+0xa34>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d0f0      	beq.n	8006cf0 <HAL_RCC_OscConfig+0x974>
 8006d0e:	e018      	b.n	8006d42 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8006d10:	4b27      	ldr	r3, [pc, #156]	@ (8006db0 <HAL_RCC_OscConfig+0xa34>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a26      	ldr	r2, [pc, #152]	@ (8006db0 <HAL_RCC_OscConfig+0xa34>)
 8006d16:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d1a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006d1c:	f7fd fe7a 	bl	8004a14 <HAL_GetTick>
 8006d20:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8006d22:	e008      	b.n	8006d36 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8006d24:	f7fd fe76 	bl	8004a14 <HAL_GetTick>
 8006d28:	4602      	mov	r2, r0
 8006d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d2c:	1ad3      	subs	r3, r2, r3
 8006d2e:	2b02      	cmp	r3, #2
 8006d30:	d901      	bls.n	8006d36 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8006d32:	2303      	movs	r3, #3
 8006d34:	e1f7      	b.n	8007126 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8006d36:	4b1e      	ldr	r3, [pc, #120]	@ (8006db0 <HAL_RCC_OscConfig+0xa34>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d1f0      	bne.n	8006d24 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d07f      	beq.n	8006e4e <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d062      	beq.n	8006e1c <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8006d56:	4b16      	ldr	r3, [pc, #88]	@ (8006db0 <HAL_RCC_OscConfig+0xa34>)
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	4a15      	ldr	r2, [pc, #84]	@ (8006db0 <HAL_RCC_OscConfig+0xa34>)
 8006d5c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006d60:	6093      	str	r3, [r2, #8]
 8006d62:	4b13      	ldr	r3, [pc, #76]	@ (8006db0 <HAL_RCC_OscConfig+0xa34>)
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d6e:	4910      	ldr	r1, [pc, #64]	@ (8006db0 <HAL_RCC_OscConfig+0xa34>)
 8006d70:	4313      	orrs	r3, r2
 8006d72:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d78:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8006d7c:	d309      	bcc.n	8006d92 <HAL_RCC_OscConfig+0xa16>
 8006d7e:	4b0c      	ldr	r3, [pc, #48]	@ (8006db0 <HAL_RCC_OscConfig+0xa34>)
 8006d80:	68db      	ldr	r3, [r3, #12]
 8006d82:	f023 021f 	bic.w	r2, r3, #31
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6a1b      	ldr	r3, [r3, #32]
 8006d8a:	4909      	ldr	r1, [pc, #36]	@ (8006db0 <HAL_RCC_OscConfig+0xa34>)
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	60cb      	str	r3, [r1, #12]
 8006d90:	e02a      	b.n	8006de8 <HAL_RCC_OscConfig+0xa6c>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	da0c      	bge.n	8006db4 <HAL_RCC_OscConfig+0xa38>
 8006d9a:	4b05      	ldr	r3, [pc, #20]	@ (8006db0 <HAL_RCC_OscConfig+0xa34>)
 8006d9c:	68db      	ldr	r3, [r3, #12]
 8006d9e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6a1b      	ldr	r3, [r3, #32]
 8006da6:	015b      	lsls	r3, r3, #5
 8006da8:	4901      	ldr	r1, [pc, #4]	@ (8006db0 <HAL_RCC_OscConfig+0xa34>)
 8006daa:	4313      	orrs	r3, r2
 8006dac:	60cb      	str	r3, [r1, #12]
 8006dae:	e01b      	b.n	8006de8 <HAL_RCC_OscConfig+0xa6c>
 8006db0:	46020c00 	.word	0x46020c00
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006db8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dbc:	d30a      	bcc.n	8006dd4 <HAL_RCC_OscConfig+0xa58>
 8006dbe:	4ba1      	ldr	r3, [pc, #644]	@ (8007044 <HAL_RCC_OscConfig+0xcc8>)
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6a1b      	ldr	r3, [r3, #32]
 8006dca:	029b      	lsls	r3, r3, #10
 8006dcc:	499d      	ldr	r1, [pc, #628]	@ (8007044 <HAL_RCC_OscConfig+0xcc8>)
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	60cb      	str	r3, [r1, #12]
 8006dd2:	e009      	b.n	8006de8 <HAL_RCC_OscConfig+0xa6c>
 8006dd4:	4b9b      	ldr	r3, [pc, #620]	@ (8007044 <HAL_RCC_OscConfig+0xcc8>)
 8006dd6:	68db      	ldr	r3, [r3, #12]
 8006dd8:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6a1b      	ldr	r3, [r3, #32]
 8006de0:	03db      	lsls	r3, r3, #15
 8006de2:	4998      	ldr	r1, [pc, #608]	@ (8007044 <HAL_RCC_OscConfig+0xcc8>)
 8006de4:	4313      	orrs	r3, r2
 8006de6:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8006de8:	4b96      	ldr	r3, [pc, #600]	@ (8007044 <HAL_RCC_OscConfig+0xcc8>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a95      	ldr	r2, [pc, #596]	@ (8007044 <HAL_RCC_OscConfig+0xcc8>)
 8006dee:	f043 0310 	orr.w	r3, r3, #16
 8006df2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006df4:	f7fd fe0e 	bl	8004a14 <HAL_GetTick>
 8006df8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8006dfa:	e008      	b.n	8006e0e <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8006dfc:	f7fd fe0a 	bl	8004a14 <HAL_GetTick>
 8006e00:	4602      	mov	r2, r0
 8006e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e04:	1ad3      	subs	r3, r2, r3
 8006e06:	2b02      	cmp	r3, #2
 8006e08:	d901      	bls.n	8006e0e <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8006e0a:	2303      	movs	r3, #3
 8006e0c:	e18b      	b.n	8007126 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8006e0e:	4b8d      	ldr	r3, [pc, #564]	@ (8007044 <HAL_RCC_OscConfig+0xcc8>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f003 0320 	and.w	r3, r3, #32
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d0f0      	beq.n	8006dfc <HAL_RCC_OscConfig+0xa80>
 8006e1a:	e018      	b.n	8006e4e <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8006e1c:	4b89      	ldr	r3, [pc, #548]	@ (8007044 <HAL_RCC_OscConfig+0xcc8>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a88      	ldr	r2, [pc, #544]	@ (8007044 <HAL_RCC_OscConfig+0xcc8>)
 8006e22:	f023 0310 	bic.w	r3, r3, #16
 8006e26:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006e28:	f7fd fdf4 	bl	8004a14 <HAL_GetTick>
 8006e2c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8006e2e:	e008      	b.n	8006e42 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8006e30:	f7fd fdf0 	bl	8004a14 <HAL_GetTick>
 8006e34:	4602      	mov	r2, r0
 8006e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e38:	1ad3      	subs	r3, r2, r3
 8006e3a:	2b02      	cmp	r3, #2
 8006e3c:	d901      	bls.n	8006e42 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8006e3e:	2303      	movs	r3, #3
 8006e40:	e171      	b.n	8007126 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8006e42:	4b80      	ldr	r3, [pc, #512]	@ (8007044 <HAL_RCC_OscConfig+0xcc8>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f003 0320 	and.w	r3, r3, #32
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d1f0      	bne.n	8006e30 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	f000 8166 	beq.w	8007124 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006e5e:	4b79      	ldr	r3, [pc, #484]	@ (8007044 <HAL_RCC_OscConfig+0xcc8>)
 8006e60:	69db      	ldr	r3, [r3, #28]
 8006e62:	f003 030c 	and.w	r3, r3, #12
 8006e66:	2b0c      	cmp	r3, #12
 8006e68:	f000 80f2 	beq.w	8007050 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e70:	2b02      	cmp	r3, #2
 8006e72:	f040 80c5 	bne.w	8007000 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8006e76:	4b73      	ldr	r3, [pc, #460]	@ (8007044 <HAL_RCC_OscConfig+0xcc8>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a72      	ldr	r2, [pc, #456]	@ (8007044 <HAL_RCC_OscConfig+0xcc8>)
 8006e7c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006e80:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006e82:	f7fd fdc7 	bl	8004a14 <HAL_GetTick>
 8006e86:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006e88:	e008      	b.n	8006e9c <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e8a:	f7fd fdc3 	bl	8004a14 <HAL_GetTick>
 8006e8e:	4602      	mov	r2, r0
 8006e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e92:	1ad3      	subs	r3, r2, r3
 8006e94:	2b02      	cmp	r3, #2
 8006e96:	d901      	bls.n	8006e9c <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8006e98:	2303      	movs	r3, #3
 8006e9a:	e144      	b.n	8007126 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006e9c:	4b69      	ldr	r3, [pc, #420]	@ (8007044 <HAL_RCC_OscConfig+0xcc8>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d1f0      	bne.n	8006e8a <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ea8:	4b66      	ldr	r3, [pc, #408]	@ (8007044 <HAL_RCC_OscConfig+0xcc8>)
 8006eaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006eae:	f003 0304 	and.w	r3, r3, #4
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d111      	bne.n	8006eda <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8006eb6:	4b63      	ldr	r3, [pc, #396]	@ (8007044 <HAL_RCC_OscConfig+0xcc8>)
 8006eb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ebc:	4a61      	ldr	r2, [pc, #388]	@ (8007044 <HAL_RCC_OscConfig+0xcc8>)
 8006ebe:	f043 0304 	orr.w	r3, r3, #4
 8006ec2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006ec6:	4b5f      	ldr	r3, [pc, #380]	@ (8007044 <HAL_RCC_OscConfig+0xcc8>)
 8006ec8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ecc:	f003 0304 	and.w	r3, r3, #4
 8006ed0:	60fb      	str	r3, [r7, #12]
 8006ed2:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8006eda:	4b5b      	ldr	r3, [pc, #364]	@ (8007048 <HAL_RCC_OscConfig+0xccc>)
 8006edc:	68db      	ldr	r3, [r3, #12]
 8006ede:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006ee2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006ee6:	d102      	bne.n	8006eee <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8006eee:	4b56      	ldr	r3, [pc, #344]	@ (8007048 <HAL_RCC_OscConfig+0xccc>)
 8006ef0:	68db      	ldr	r3, [r3, #12]
 8006ef2:	4a55      	ldr	r2, [pc, #340]	@ (8007048 <HAL_RCC_OscConfig+0xccc>)
 8006ef4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006ef8:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8006efa:	4b52      	ldr	r3, [pc, #328]	@ (8007044 <HAL_RCC_OscConfig+0xcc8>)
 8006efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006efe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006f02:	f023 0303 	bic.w	r3, r3, #3
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8006f0a:	687a      	ldr	r2, [r7, #4]
 8006f0c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006f0e:	3a01      	subs	r2, #1
 8006f10:	0212      	lsls	r2, r2, #8
 8006f12:	4311      	orrs	r1, r2
 8006f14:	687a      	ldr	r2, [r7, #4]
 8006f16:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8006f18:	430a      	orrs	r2, r1
 8006f1a:	494a      	ldr	r1, [pc, #296]	@ (8007044 <HAL_RCC_OscConfig+0xcc8>)
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	628b      	str	r3, [r1, #40]	@ 0x28
 8006f20:	4b48      	ldr	r3, [pc, #288]	@ (8007044 <HAL_RCC_OscConfig+0xcc8>)
 8006f22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f24:	4b49      	ldr	r3, [pc, #292]	@ (800704c <HAL_RCC_OscConfig+0xcd0>)
 8006f26:	4013      	ands	r3, r2
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006f2c:	3a01      	subs	r2, #1
 8006f2e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8006f36:	3a01      	subs	r2, #1
 8006f38:	0252      	lsls	r2, r2, #9
 8006f3a:	b292      	uxth	r2, r2
 8006f3c:	4311      	orrs	r1, r2
 8006f3e:	687a      	ldr	r2, [r7, #4]
 8006f40:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006f42:	3a01      	subs	r2, #1
 8006f44:	0412      	lsls	r2, r2, #16
 8006f46:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8006f4a:	4311      	orrs	r1, r2
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8006f50:	3a01      	subs	r2, #1
 8006f52:	0612      	lsls	r2, r2, #24
 8006f54:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8006f58:	430a      	orrs	r2, r1
 8006f5a:	493a      	ldr	r1, [pc, #232]	@ (8007044 <HAL_RCC_OscConfig+0xcc8>)
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8006f60:	4b38      	ldr	r3, [pc, #224]	@ (8007044 <HAL_RCC_OscConfig+0xcc8>)
 8006f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f64:	4a37      	ldr	r2, [pc, #220]	@ (8007044 <HAL_RCC_OscConfig+0xcc8>)
 8006f66:	f023 0310 	bic.w	r3, r3, #16
 8006f6a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f70:	4a34      	ldr	r2, [pc, #208]	@ (8007044 <HAL_RCC_OscConfig+0xcc8>)
 8006f72:	00db      	lsls	r3, r3, #3
 8006f74:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8006f76:	4b33      	ldr	r3, [pc, #204]	@ (8007044 <HAL_RCC_OscConfig+0xcc8>)
 8006f78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f7a:	4a32      	ldr	r2, [pc, #200]	@ (8007044 <HAL_RCC_OscConfig+0xcc8>)
 8006f7c:	f043 0310 	orr.w	r3, r3, #16
 8006f80:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8006f82:	4b30      	ldr	r3, [pc, #192]	@ (8007044 <HAL_RCC_OscConfig+0xcc8>)
 8006f84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f86:	f023 020c 	bic.w	r2, r3, #12
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f8e:	492d      	ldr	r1, [pc, #180]	@ (8007044 <HAL_RCC_OscConfig+0xcc8>)
 8006f90:	4313      	orrs	r3, r2
 8006f92:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8006f94:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d105      	bne.n	8006fa8 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8006f9c:	4b2a      	ldr	r3, [pc, #168]	@ (8007048 <HAL_RCC_OscConfig+0xccc>)
 8006f9e:	68db      	ldr	r3, [r3, #12]
 8006fa0:	4a29      	ldr	r2, [pc, #164]	@ (8007048 <HAL_RCC_OscConfig+0xccc>)
 8006fa2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006fa6:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8006fa8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d107      	bne.n	8006fc0 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8006fb0:	4b24      	ldr	r3, [pc, #144]	@ (8007044 <HAL_RCC_OscConfig+0xcc8>)
 8006fb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006fb6:	4a23      	ldr	r2, [pc, #140]	@ (8007044 <HAL_RCC_OscConfig+0xcc8>)
 8006fb8:	f023 0304 	bic.w	r3, r3, #4
 8006fbc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8006fc0:	4b20      	ldr	r3, [pc, #128]	@ (8007044 <HAL_RCC_OscConfig+0xcc8>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a1f      	ldr	r2, [pc, #124]	@ (8007044 <HAL_RCC_OscConfig+0xcc8>)
 8006fc6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006fca:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006fcc:	f7fd fd22 	bl	8004a14 <HAL_GetTick>
 8006fd0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006fd2:	e008      	b.n	8006fe6 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fd4:	f7fd fd1e 	bl	8004a14 <HAL_GetTick>
 8006fd8:	4602      	mov	r2, r0
 8006fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fdc:	1ad3      	subs	r3, r2, r3
 8006fde:	2b02      	cmp	r3, #2
 8006fe0:	d901      	bls.n	8006fe6 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8006fe2:	2303      	movs	r3, #3
 8006fe4:	e09f      	b.n	8007126 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006fe6:	4b17      	ldr	r3, [pc, #92]	@ (8007044 <HAL_RCC_OscConfig+0xcc8>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d0f0      	beq.n	8006fd4 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006ff2:	4b14      	ldr	r3, [pc, #80]	@ (8007044 <HAL_RCC_OscConfig+0xcc8>)
 8006ff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ff6:	4a13      	ldr	r2, [pc, #76]	@ (8007044 <HAL_RCC_OscConfig+0xcc8>)
 8006ff8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006ffc:	6293      	str	r3, [r2, #40]	@ 0x28
 8006ffe:	e091      	b.n	8007124 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8007000:	4b10      	ldr	r3, [pc, #64]	@ (8007044 <HAL_RCC_OscConfig+0xcc8>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a0f      	ldr	r2, [pc, #60]	@ (8007044 <HAL_RCC_OscConfig+0xcc8>)
 8007006:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800700a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800700c:	f7fd fd02 	bl	8004a14 <HAL_GetTick>
 8007010:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007012:	e008      	b.n	8007026 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007014:	f7fd fcfe 	bl	8004a14 <HAL_GetTick>
 8007018:	4602      	mov	r2, r0
 800701a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800701c:	1ad3      	subs	r3, r2, r3
 800701e:	2b02      	cmp	r3, #2
 8007020:	d901      	bls.n	8007026 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8007022:	2303      	movs	r3, #3
 8007024:	e07f      	b.n	8007126 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007026:	4b07      	ldr	r3, [pc, #28]	@ (8007044 <HAL_RCC_OscConfig+0xcc8>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800702e:	2b00      	cmp	r3, #0
 8007030:	d1f0      	bne.n	8007014 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8007032:	4b04      	ldr	r3, [pc, #16]	@ (8007044 <HAL_RCC_OscConfig+0xcc8>)
 8007034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007036:	4a03      	ldr	r2, [pc, #12]	@ (8007044 <HAL_RCC_OscConfig+0xcc8>)
 8007038:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800703c:	f023 0303 	bic.w	r3, r3, #3
 8007040:	6293      	str	r3, [r2, #40]	@ 0x28
 8007042:	e06f      	b.n	8007124 <HAL_RCC_OscConfig+0xda8>
 8007044:	46020c00 	.word	0x46020c00
 8007048:	46020800 	.word	0x46020800
 800704c:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8007050:	4b37      	ldr	r3, [pc, #220]	@ (8007130 <HAL_RCC_OscConfig+0xdb4>)
 8007052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007054:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007056:	4b36      	ldr	r3, [pc, #216]	@ (8007130 <HAL_RCC_OscConfig+0xdb4>)
 8007058:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800705a:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007060:	2b01      	cmp	r3, #1
 8007062:	d039      	beq.n	80070d8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8007064:	69fb      	ldr	r3, [r7, #28]
 8007066:	f003 0203 	and.w	r2, r3, #3
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800706e:	429a      	cmp	r2, r3
 8007070:	d132      	bne.n	80070d8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8007072:	69fb      	ldr	r3, [r7, #28]
 8007074:	0a1b      	lsrs	r3, r3, #8
 8007076:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800707e:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8007080:	429a      	cmp	r2, r3
 8007082:	d129      	bne.n	80070d8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8007084:	69fb      	ldr	r3, [r7, #28]
 8007086:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800708e:	429a      	cmp	r2, r3
 8007090:	d122      	bne.n	80070d8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007092:	69bb      	ldr	r3, [r7, #24]
 8007094:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800709c:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800709e:	429a      	cmp	r2, r3
 80070a0:	d11a      	bne.n	80070d8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80070a2:	69bb      	ldr	r3, [r7, #24]
 80070a4:	0a5b      	lsrs	r3, r3, #9
 80070a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070ae:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d111      	bne.n	80070d8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80070b4:	69bb      	ldr	r3, [r7, #24]
 80070b6:	0c1b      	lsrs	r3, r3, #16
 80070b8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070c0:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d108      	bne.n	80070d8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80070c6:	69bb      	ldr	r3, [r7, #24]
 80070c8:	0e1b      	lsrs	r3, r3, #24
 80070ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070d2:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80070d4:	429a      	cmp	r2, r3
 80070d6:	d001      	beq.n	80070dc <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 80070d8:	2301      	movs	r3, #1
 80070da:	e024      	b.n	8007126 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80070dc:	4b14      	ldr	r3, [pc, #80]	@ (8007130 <HAL_RCC_OscConfig+0xdb4>)
 80070de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070e0:	08db      	lsrs	r3, r3, #3
 80070e2:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80070ea:	429a      	cmp	r2, r3
 80070ec:	d01a      	beq.n	8007124 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80070ee:	4b10      	ldr	r3, [pc, #64]	@ (8007130 <HAL_RCC_OscConfig+0xdb4>)
 80070f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070f2:	4a0f      	ldr	r2, [pc, #60]	@ (8007130 <HAL_RCC_OscConfig+0xdb4>)
 80070f4:	f023 0310 	bic.w	r3, r3, #16
 80070f8:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070fa:	f7fd fc8b 	bl	8004a14 <HAL_GetTick>
 80070fe:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8007100:	bf00      	nop
 8007102:	f7fd fc87 	bl	8004a14 <HAL_GetTick>
 8007106:	4602      	mov	r2, r0
 8007108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800710a:	4293      	cmp	r3, r2
 800710c:	d0f9      	beq.n	8007102 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007112:	4a07      	ldr	r2, [pc, #28]	@ (8007130 <HAL_RCC_OscConfig+0xdb4>)
 8007114:	00db      	lsls	r3, r3, #3
 8007116:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8007118:	4b05      	ldr	r3, [pc, #20]	@ (8007130 <HAL_RCC_OscConfig+0xdb4>)
 800711a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800711c:	4a04      	ldr	r2, [pc, #16]	@ (8007130 <HAL_RCC_OscConfig+0xdb4>)
 800711e:	f043 0310 	orr.w	r3, r3, #16
 8007122:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8007124:	2300      	movs	r3, #0
}
 8007126:	4618      	mov	r0, r3
 8007128:	3738      	adds	r7, #56	@ 0x38
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}
 800712e:	bf00      	nop
 8007130:	46020c00 	.word	0x46020c00

08007134 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b086      	sub	sp, #24
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d101      	bne.n	8007148 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007144:	2301      	movs	r3, #1
 8007146:	e1d9      	b.n	80074fc <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007148:	4b9b      	ldr	r3, [pc, #620]	@ (80073b8 <HAL_RCC_ClockConfig+0x284>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f003 030f 	and.w	r3, r3, #15
 8007150:	683a      	ldr	r2, [r7, #0]
 8007152:	429a      	cmp	r2, r3
 8007154:	d910      	bls.n	8007178 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007156:	4b98      	ldr	r3, [pc, #608]	@ (80073b8 <HAL_RCC_ClockConfig+0x284>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f023 020f 	bic.w	r2, r3, #15
 800715e:	4996      	ldr	r1, [pc, #600]	@ (80073b8 <HAL_RCC_ClockConfig+0x284>)
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	4313      	orrs	r3, r2
 8007164:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007166:	4b94      	ldr	r3, [pc, #592]	@ (80073b8 <HAL_RCC_ClockConfig+0x284>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f003 030f 	and.w	r3, r3, #15
 800716e:	683a      	ldr	r2, [r7, #0]
 8007170:	429a      	cmp	r2, r3
 8007172:	d001      	beq.n	8007178 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007174:	2301      	movs	r3, #1
 8007176:	e1c1      	b.n	80074fc <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f003 0310 	and.w	r3, r3, #16
 8007180:	2b00      	cmp	r3, #0
 8007182:	d010      	beq.n	80071a6 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	695a      	ldr	r2, [r3, #20]
 8007188:	4b8c      	ldr	r3, [pc, #560]	@ (80073bc <HAL_RCC_ClockConfig+0x288>)
 800718a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800718c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007190:	429a      	cmp	r2, r3
 8007192:	d908      	bls.n	80071a6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8007194:	4b89      	ldr	r3, [pc, #548]	@ (80073bc <HAL_RCC_ClockConfig+0x288>)
 8007196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007198:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	695b      	ldr	r3, [r3, #20]
 80071a0:	4986      	ldr	r1, [pc, #536]	@ (80073bc <HAL_RCC_ClockConfig+0x288>)
 80071a2:	4313      	orrs	r3, r2
 80071a4:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f003 0308 	and.w	r3, r3, #8
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d012      	beq.n	80071d8 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	691a      	ldr	r2, [r3, #16]
 80071b6:	4b81      	ldr	r3, [pc, #516]	@ (80073bc <HAL_RCC_ClockConfig+0x288>)
 80071b8:	6a1b      	ldr	r3, [r3, #32]
 80071ba:	091b      	lsrs	r3, r3, #4
 80071bc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d909      	bls.n	80071d8 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80071c4:	4b7d      	ldr	r3, [pc, #500]	@ (80073bc <HAL_RCC_ClockConfig+0x288>)
 80071c6:	6a1b      	ldr	r3, [r3, #32]
 80071c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	691b      	ldr	r3, [r3, #16]
 80071d0:	011b      	lsls	r3, r3, #4
 80071d2:	497a      	ldr	r1, [pc, #488]	@ (80073bc <HAL_RCC_ClockConfig+0x288>)
 80071d4:	4313      	orrs	r3, r2
 80071d6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f003 0304 	and.w	r3, r3, #4
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d010      	beq.n	8007206 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	68da      	ldr	r2, [r3, #12]
 80071e8:	4b74      	ldr	r3, [pc, #464]	@ (80073bc <HAL_RCC_ClockConfig+0x288>)
 80071ea:	6a1b      	ldr	r3, [r3, #32]
 80071ec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d908      	bls.n	8007206 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80071f4:	4b71      	ldr	r3, [pc, #452]	@ (80073bc <HAL_RCC_ClockConfig+0x288>)
 80071f6:	6a1b      	ldr	r3, [r3, #32]
 80071f8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	68db      	ldr	r3, [r3, #12]
 8007200:	496e      	ldr	r1, [pc, #440]	@ (80073bc <HAL_RCC_ClockConfig+0x288>)
 8007202:	4313      	orrs	r3, r2
 8007204:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f003 0302 	and.w	r3, r3, #2
 800720e:	2b00      	cmp	r3, #0
 8007210:	d010      	beq.n	8007234 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	689a      	ldr	r2, [r3, #8]
 8007216:	4b69      	ldr	r3, [pc, #420]	@ (80073bc <HAL_RCC_ClockConfig+0x288>)
 8007218:	6a1b      	ldr	r3, [r3, #32]
 800721a:	f003 030f 	and.w	r3, r3, #15
 800721e:	429a      	cmp	r2, r3
 8007220:	d908      	bls.n	8007234 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8007222:	4b66      	ldr	r3, [pc, #408]	@ (80073bc <HAL_RCC_ClockConfig+0x288>)
 8007224:	6a1b      	ldr	r3, [r3, #32]
 8007226:	f023 020f 	bic.w	r2, r3, #15
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	689b      	ldr	r3, [r3, #8]
 800722e:	4963      	ldr	r1, [pc, #396]	@ (80073bc <HAL_RCC_ClockConfig+0x288>)
 8007230:	4313      	orrs	r3, r2
 8007232:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f003 0301 	and.w	r3, r3, #1
 800723c:	2b00      	cmp	r3, #0
 800723e:	f000 80d2 	beq.w	80073e6 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8007242:	2300      	movs	r3, #0
 8007244:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	2b03      	cmp	r3, #3
 800724c:	d143      	bne.n	80072d6 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800724e:	4b5b      	ldr	r3, [pc, #364]	@ (80073bc <HAL_RCC_ClockConfig+0x288>)
 8007250:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007254:	f003 0304 	and.w	r3, r3, #4
 8007258:	2b00      	cmp	r3, #0
 800725a:	d110      	bne.n	800727e <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800725c:	4b57      	ldr	r3, [pc, #348]	@ (80073bc <HAL_RCC_ClockConfig+0x288>)
 800725e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007262:	4a56      	ldr	r2, [pc, #344]	@ (80073bc <HAL_RCC_ClockConfig+0x288>)
 8007264:	f043 0304 	orr.w	r3, r3, #4
 8007268:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800726c:	4b53      	ldr	r3, [pc, #332]	@ (80073bc <HAL_RCC_ClockConfig+0x288>)
 800726e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007272:	f003 0304 	and.w	r3, r3, #4
 8007276:	60bb      	str	r3, [r7, #8]
 8007278:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800727a:	2301      	movs	r3, #1
 800727c:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800727e:	f7fd fbc9 	bl	8004a14 <HAL_GetTick>
 8007282:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8007284:	4b4e      	ldr	r3, [pc, #312]	@ (80073c0 <HAL_RCC_ClockConfig+0x28c>)
 8007286:	68db      	ldr	r3, [r3, #12]
 8007288:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800728c:	2b00      	cmp	r3, #0
 800728e:	d00f      	beq.n	80072b0 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8007290:	e008      	b.n	80072a4 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8007292:	f7fd fbbf 	bl	8004a14 <HAL_GetTick>
 8007296:	4602      	mov	r2, r0
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	1ad3      	subs	r3, r2, r3
 800729c:	2b02      	cmp	r3, #2
 800729e:	d901      	bls.n	80072a4 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80072a0:	2303      	movs	r3, #3
 80072a2:	e12b      	b.n	80074fc <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80072a4:	4b46      	ldr	r3, [pc, #280]	@ (80073c0 <HAL_RCC_ClockConfig+0x28c>)
 80072a6:	68db      	ldr	r3, [r3, #12]
 80072a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d0f0      	beq.n	8007292 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80072b0:	7dfb      	ldrb	r3, [r7, #23]
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	d107      	bne.n	80072c6 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80072b6:	4b41      	ldr	r3, [pc, #260]	@ (80073bc <HAL_RCC_ClockConfig+0x288>)
 80072b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80072bc:	4a3f      	ldr	r2, [pc, #252]	@ (80073bc <HAL_RCC_ClockConfig+0x288>)
 80072be:	f023 0304 	bic.w	r3, r3, #4
 80072c2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80072c6:	4b3d      	ldr	r3, [pc, #244]	@ (80073bc <HAL_RCC_ClockConfig+0x288>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d121      	bne.n	8007316 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80072d2:	2301      	movs	r3, #1
 80072d4:	e112      	b.n	80074fc <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	2b02      	cmp	r3, #2
 80072dc:	d107      	bne.n	80072ee <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80072de:	4b37      	ldr	r3, [pc, #220]	@ (80073bc <HAL_RCC_ClockConfig+0x288>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d115      	bne.n	8007316 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80072ea:	2301      	movs	r3, #1
 80072ec:	e106      	b.n	80074fc <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d107      	bne.n	8007306 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80072f6:	4b31      	ldr	r3, [pc, #196]	@ (80073bc <HAL_RCC_ClockConfig+0x288>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f003 0304 	and.w	r3, r3, #4
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d109      	bne.n	8007316 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8007302:	2301      	movs	r3, #1
 8007304:	e0fa      	b.n	80074fc <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007306:	4b2d      	ldr	r3, [pc, #180]	@ (80073bc <HAL_RCC_ClockConfig+0x288>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800730e:	2b00      	cmp	r3, #0
 8007310:	d101      	bne.n	8007316 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8007312:	2301      	movs	r3, #1
 8007314:	e0f2      	b.n	80074fc <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8007316:	4b29      	ldr	r3, [pc, #164]	@ (80073bc <HAL_RCC_ClockConfig+0x288>)
 8007318:	69db      	ldr	r3, [r3, #28]
 800731a:	f023 0203 	bic.w	r2, r3, #3
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	4926      	ldr	r1, [pc, #152]	@ (80073bc <HAL_RCC_ClockConfig+0x288>)
 8007324:	4313      	orrs	r3, r2
 8007326:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8007328:	f7fd fb74 	bl	8004a14 <HAL_GetTick>
 800732c:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	2b03      	cmp	r3, #3
 8007334:	d112      	bne.n	800735c <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007336:	e00a      	b.n	800734e <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007338:	f7fd fb6c 	bl	8004a14 <HAL_GetTick>
 800733c:	4602      	mov	r2, r0
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	1ad3      	subs	r3, r2, r3
 8007342:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007346:	4293      	cmp	r3, r2
 8007348:	d901      	bls.n	800734e <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800734a:	2303      	movs	r3, #3
 800734c:	e0d6      	b.n	80074fc <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800734e:	4b1b      	ldr	r3, [pc, #108]	@ (80073bc <HAL_RCC_ClockConfig+0x288>)
 8007350:	69db      	ldr	r3, [r3, #28]
 8007352:	f003 030c 	and.w	r3, r3, #12
 8007356:	2b0c      	cmp	r3, #12
 8007358:	d1ee      	bne.n	8007338 <HAL_RCC_ClockConfig+0x204>
 800735a:	e044      	b.n	80073e6 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	2b02      	cmp	r3, #2
 8007362:	d112      	bne.n	800738a <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007364:	e00a      	b.n	800737c <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007366:	f7fd fb55 	bl	8004a14 <HAL_GetTick>
 800736a:	4602      	mov	r2, r0
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	1ad3      	subs	r3, r2, r3
 8007370:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007374:	4293      	cmp	r3, r2
 8007376:	d901      	bls.n	800737c <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8007378:	2303      	movs	r3, #3
 800737a:	e0bf      	b.n	80074fc <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800737c:	4b0f      	ldr	r3, [pc, #60]	@ (80073bc <HAL_RCC_ClockConfig+0x288>)
 800737e:	69db      	ldr	r3, [r3, #28]
 8007380:	f003 030c 	and.w	r3, r3, #12
 8007384:	2b08      	cmp	r3, #8
 8007386:	d1ee      	bne.n	8007366 <HAL_RCC_ClockConfig+0x232>
 8007388:	e02d      	b.n	80073e6 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d123      	bne.n	80073da <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8007392:	e00a      	b.n	80073aa <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007394:	f7fd fb3e 	bl	8004a14 <HAL_GetTick>
 8007398:	4602      	mov	r2, r0
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	1ad3      	subs	r3, r2, r3
 800739e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d901      	bls.n	80073aa <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80073a6:	2303      	movs	r3, #3
 80073a8:	e0a8      	b.n	80074fc <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80073aa:	4b04      	ldr	r3, [pc, #16]	@ (80073bc <HAL_RCC_ClockConfig+0x288>)
 80073ac:	69db      	ldr	r3, [r3, #28]
 80073ae:	f003 030c 	and.w	r3, r3, #12
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d1ee      	bne.n	8007394 <HAL_RCC_ClockConfig+0x260>
 80073b6:	e016      	b.n	80073e6 <HAL_RCC_ClockConfig+0x2b2>
 80073b8:	40022000 	.word	0x40022000
 80073bc:	46020c00 	.word	0x46020c00
 80073c0:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80073c4:	f7fd fb26 	bl	8004a14 <HAL_GetTick>
 80073c8:	4602      	mov	r2, r0
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	1ad3      	subs	r3, r2, r3
 80073ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d901      	bls.n	80073da <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80073d6:	2303      	movs	r3, #3
 80073d8:	e090      	b.n	80074fc <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80073da:	4b4a      	ldr	r3, [pc, #296]	@ (8007504 <HAL_RCC_ClockConfig+0x3d0>)
 80073dc:	69db      	ldr	r3, [r3, #28]
 80073de:	f003 030c 	and.w	r3, r3, #12
 80073e2:	2b04      	cmp	r3, #4
 80073e4:	d1ee      	bne.n	80073c4 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f003 0302 	and.w	r3, r3, #2
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d010      	beq.n	8007414 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	689a      	ldr	r2, [r3, #8]
 80073f6:	4b43      	ldr	r3, [pc, #268]	@ (8007504 <HAL_RCC_ClockConfig+0x3d0>)
 80073f8:	6a1b      	ldr	r3, [r3, #32]
 80073fa:	f003 030f 	and.w	r3, r3, #15
 80073fe:	429a      	cmp	r2, r3
 8007400:	d208      	bcs.n	8007414 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8007402:	4b40      	ldr	r3, [pc, #256]	@ (8007504 <HAL_RCC_ClockConfig+0x3d0>)
 8007404:	6a1b      	ldr	r3, [r3, #32]
 8007406:	f023 020f 	bic.w	r2, r3, #15
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	493d      	ldr	r1, [pc, #244]	@ (8007504 <HAL_RCC_ClockConfig+0x3d0>)
 8007410:	4313      	orrs	r3, r2
 8007412:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007414:	4b3c      	ldr	r3, [pc, #240]	@ (8007508 <HAL_RCC_ClockConfig+0x3d4>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f003 030f 	and.w	r3, r3, #15
 800741c:	683a      	ldr	r2, [r7, #0]
 800741e:	429a      	cmp	r2, r3
 8007420:	d210      	bcs.n	8007444 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007422:	4b39      	ldr	r3, [pc, #228]	@ (8007508 <HAL_RCC_ClockConfig+0x3d4>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f023 020f 	bic.w	r2, r3, #15
 800742a:	4937      	ldr	r1, [pc, #220]	@ (8007508 <HAL_RCC_ClockConfig+0x3d4>)
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	4313      	orrs	r3, r2
 8007430:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007432:	4b35      	ldr	r3, [pc, #212]	@ (8007508 <HAL_RCC_ClockConfig+0x3d4>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f003 030f 	and.w	r3, r3, #15
 800743a:	683a      	ldr	r2, [r7, #0]
 800743c:	429a      	cmp	r2, r3
 800743e:	d001      	beq.n	8007444 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8007440:	2301      	movs	r3, #1
 8007442:	e05b      	b.n	80074fc <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f003 0304 	and.w	r3, r3, #4
 800744c:	2b00      	cmp	r3, #0
 800744e:	d010      	beq.n	8007472 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	68da      	ldr	r2, [r3, #12]
 8007454:	4b2b      	ldr	r3, [pc, #172]	@ (8007504 <HAL_RCC_ClockConfig+0x3d0>)
 8007456:	6a1b      	ldr	r3, [r3, #32]
 8007458:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800745c:	429a      	cmp	r2, r3
 800745e:	d208      	bcs.n	8007472 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8007460:	4b28      	ldr	r3, [pc, #160]	@ (8007504 <HAL_RCC_ClockConfig+0x3d0>)
 8007462:	6a1b      	ldr	r3, [r3, #32]
 8007464:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	68db      	ldr	r3, [r3, #12]
 800746c:	4925      	ldr	r1, [pc, #148]	@ (8007504 <HAL_RCC_ClockConfig+0x3d0>)
 800746e:	4313      	orrs	r3, r2
 8007470:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f003 0308 	and.w	r3, r3, #8
 800747a:	2b00      	cmp	r3, #0
 800747c:	d012      	beq.n	80074a4 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	691a      	ldr	r2, [r3, #16]
 8007482:	4b20      	ldr	r3, [pc, #128]	@ (8007504 <HAL_RCC_ClockConfig+0x3d0>)
 8007484:	6a1b      	ldr	r3, [r3, #32]
 8007486:	091b      	lsrs	r3, r3, #4
 8007488:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800748c:	429a      	cmp	r2, r3
 800748e:	d209      	bcs.n	80074a4 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8007490:	4b1c      	ldr	r3, [pc, #112]	@ (8007504 <HAL_RCC_ClockConfig+0x3d0>)
 8007492:	6a1b      	ldr	r3, [r3, #32]
 8007494:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	691b      	ldr	r3, [r3, #16]
 800749c:	011b      	lsls	r3, r3, #4
 800749e:	4919      	ldr	r1, [pc, #100]	@ (8007504 <HAL_RCC_ClockConfig+0x3d0>)
 80074a0:	4313      	orrs	r3, r2
 80074a2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f003 0310 	and.w	r3, r3, #16
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d010      	beq.n	80074d2 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	695a      	ldr	r2, [r3, #20]
 80074b4:	4b13      	ldr	r3, [pc, #76]	@ (8007504 <HAL_RCC_ClockConfig+0x3d0>)
 80074b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074b8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80074bc:	429a      	cmp	r2, r3
 80074be:	d208      	bcs.n	80074d2 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80074c0:	4b10      	ldr	r3, [pc, #64]	@ (8007504 <HAL_RCC_ClockConfig+0x3d0>)
 80074c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074c4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	695b      	ldr	r3, [r3, #20]
 80074cc:	490d      	ldr	r1, [pc, #52]	@ (8007504 <HAL_RCC_ClockConfig+0x3d0>)
 80074ce:	4313      	orrs	r3, r2
 80074d0:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80074d2:	f000 f821 	bl	8007518 <HAL_RCC_GetSysClockFreq>
 80074d6:	4602      	mov	r2, r0
 80074d8:	4b0a      	ldr	r3, [pc, #40]	@ (8007504 <HAL_RCC_ClockConfig+0x3d0>)
 80074da:	6a1b      	ldr	r3, [r3, #32]
 80074dc:	f003 030f 	and.w	r3, r3, #15
 80074e0:	490a      	ldr	r1, [pc, #40]	@ (800750c <HAL_RCC_ClockConfig+0x3d8>)
 80074e2:	5ccb      	ldrb	r3, [r1, r3]
 80074e4:	fa22 f303 	lsr.w	r3, r2, r3
 80074e8:	4a09      	ldr	r2, [pc, #36]	@ (8007510 <HAL_RCC_ClockConfig+0x3dc>)
 80074ea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80074ec:	4b09      	ldr	r3, [pc, #36]	@ (8007514 <HAL_RCC_ClockConfig+0x3e0>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4618      	mov	r0, r3
 80074f2:	f7fd fa05 	bl	8004900 <HAL_InitTick>
 80074f6:	4603      	mov	r3, r0
 80074f8:	73fb      	strb	r3, [r7, #15]

  return status;
 80074fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3718      	adds	r7, #24
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}
 8007504:	46020c00 	.word	0x46020c00
 8007508:	40022000 	.word	0x40022000
 800750c:	080163a0 	.word	0x080163a0
 8007510:	20000004 	.word	0x20000004
 8007514:	20000008 	.word	0x20000008

08007518 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007518:	b480      	push	{r7}
 800751a:	b08b      	sub	sp, #44	@ 0x2c
 800751c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800751e:	2300      	movs	r3, #0
 8007520:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8007522:	2300      	movs	r3, #0
 8007524:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007526:	4b78      	ldr	r3, [pc, #480]	@ (8007708 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007528:	69db      	ldr	r3, [r3, #28]
 800752a:	f003 030c 	and.w	r3, r3, #12
 800752e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007530:	4b75      	ldr	r3, [pc, #468]	@ (8007708 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007534:	f003 0303 	and.w	r3, r3, #3
 8007538:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800753a:	69bb      	ldr	r3, [r7, #24]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d005      	beq.n	800754c <HAL_RCC_GetSysClockFreq+0x34>
 8007540:	69bb      	ldr	r3, [r7, #24]
 8007542:	2b0c      	cmp	r3, #12
 8007544:	d121      	bne.n	800758a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	2b01      	cmp	r3, #1
 800754a:	d11e      	bne.n	800758a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800754c:	4b6e      	ldr	r3, [pc, #440]	@ (8007708 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800754e:	689b      	ldr	r3, [r3, #8]
 8007550:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007554:	2b00      	cmp	r3, #0
 8007556:	d107      	bne.n	8007568 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8007558:	4b6b      	ldr	r3, [pc, #428]	@ (8007708 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800755a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800755e:	0b1b      	lsrs	r3, r3, #12
 8007560:	f003 030f 	and.w	r3, r3, #15
 8007564:	627b      	str	r3, [r7, #36]	@ 0x24
 8007566:	e005      	b.n	8007574 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8007568:	4b67      	ldr	r3, [pc, #412]	@ (8007708 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	0f1b      	lsrs	r3, r3, #28
 800756e:	f003 030f 	and.w	r3, r3, #15
 8007572:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007574:	4a65      	ldr	r2, [pc, #404]	@ (800770c <HAL_RCC_GetSysClockFreq+0x1f4>)
 8007576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800757c:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800757e:	69bb      	ldr	r3, [r7, #24]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d110      	bne.n	80075a6 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007586:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007588:	e00d      	b.n	80075a6 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800758a:	4b5f      	ldr	r3, [pc, #380]	@ (8007708 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800758c:	69db      	ldr	r3, [r3, #28]
 800758e:	f003 030c 	and.w	r3, r3, #12
 8007592:	2b04      	cmp	r3, #4
 8007594:	d102      	bne.n	800759c <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007596:	4b5e      	ldr	r3, [pc, #376]	@ (8007710 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8007598:	623b      	str	r3, [r7, #32]
 800759a:	e004      	b.n	80075a6 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800759c:	69bb      	ldr	r3, [r7, #24]
 800759e:	2b08      	cmp	r3, #8
 80075a0:	d101      	bne.n	80075a6 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80075a2:	4b5b      	ldr	r3, [pc, #364]	@ (8007710 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80075a4:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80075a6:	69bb      	ldr	r3, [r7, #24]
 80075a8:	2b0c      	cmp	r3, #12
 80075aa:	f040 80a5 	bne.w	80076f8 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80075ae:	4b56      	ldr	r3, [pc, #344]	@ (8007708 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80075b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075b2:	f003 0303 	and.w	r3, r3, #3
 80075b6:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80075b8:	4b53      	ldr	r3, [pc, #332]	@ (8007708 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80075ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075bc:	0a1b      	lsrs	r3, r3, #8
 80075be:	f003 030f 	and.w	r3, r3, #15
 80075c2:	3301      	adds	r3, #1
 80075c4:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80075c6:	4b50      	ldr	r3, [pc, #320]	@ (8007708 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80075c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075ca:	091b      	lsrs	r3, r3, #4
 80075cc:	f003 0301 	and.w	r3, r3, #1
 80075d0:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80075d2:	4b4d      	ldr	r3, [pc, #308]	@ (8007708 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80075d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075d6:	08db      	lsrs	r3, r3, #3
 80075d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80075dc:	68ba      	ldr	r2, [r7, #8]
 80075de:	fb02 f303 	mul.w	r3, r2, r3
 80075e2:	ee07 3a90 	vmov	s15, r3
 80075e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075ea:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	2b02      	cmp	r3, #2
 80075f2:	d003      	beq.n	80075fc <HAL_RCC_GetSysClockFreq+0xe4>
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	2b03      	cmp	r3, #3
 80075f8:	d022      	beq.n	8007640 <HAL_RCC_GetSysClockFreq+0x128>
 80075fa:	e043      	b.n	8007684 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	ee07 3a90 	vmov	s15, r3
 8007602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007606:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8007714 <HAL_RCC_GetSysClockFreq+0x1fc>
 800760a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800760e:	4b3e      	ldr	r3, [pc, #248]	@ (8007708 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007610:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007612:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007616:	ee07 3a90 	vmov	s15, r3
 800761a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800761e:	ed97 6a01 	vldr	s12, [r7, #4]
 8007622:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8007718 <HAL_RCC_GetSysClockFreq+0x200>
 8007626:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800762a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800762e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007632:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007636:	ee67 7a27 	vmul.f32	s15, s14, s15
 800763a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800763e:	e046      	b.n	80076ce <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	ee07 3a90 	vmov	s15, r3
 8007646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800764a:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8007714 <HAL_RCC_GetSysClockFreq+0x1fc>
 800764e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007652:	4b2d      	ldr	r3, [pc, #180]	@ (8007708 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007654:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007656:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800765a:	ee07 3a90 	vmov	s15, r3
 800765e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007662:	ed97 6a01 	vldr	s12, [r7, #4]
 8007666:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8007718 <HAL_RCC_GetSysClockFreq+0x200>
 800766a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800766e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007672:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007676:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800767a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800767e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007682:	e024      	b.n	80076ce <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007686:	ee07 3a90 	vmov	s15, r3
 800768a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	ee07 3a90 	vmov	s15, r3
 8007694:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007698:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800769c:	4b1a      	ldr	r3, [pc, #104]	@ (8007708 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800769e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076a4:	ee07 3a90 	vmov	s15, r3
 80076a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80076ac:	ed97 6a01 	vldr	s12, [r7, #4]
 80076b0:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8007718 <HAL_RCC_GetSysClockFreq+0x200>
 80076b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80076b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80076bc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80076c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076c8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076cc:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80076ce:	4b0e      	ldr	r3, [pc, #56]	@ (8007708 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80076d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076d2:	0e1b      	lsrs	r3, r3, #24
 80076d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076d8:	3301      	adds	r3, #1
 80076da:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	ee07 3a90 	vmov	s15, r3
 80076e2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80076e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80076ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076f2:	ee17 3a90 	vmov	r3, s15
 80076f6:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 80076f8:	6a3b      	ldr	r3, [r7, #32]
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	372c      	adds	r7, #44	@ 0x2c
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr
 8007706:	bf00      	nop
 8007708:	46020c00 	.word	0x46020c00
 800770c:	080163b8 	.word	0x080163b8
 8007710:	00f42400 	.word	0x00f42400
 8007714:	4b742400 	.word	0x4b742400
 8007718:	46000000 	.word	0x46000000

0800771c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8007720:	f7ff fefa 	bl	8007518 <HAL_RCC_GetSysClockFreq>
 8007724:	4602      	mov	r2, r0
 8007726:	4b07      	ldr	r3, [pc, #28]	@ (8007744 <HAL_RCC_GetHCLKFreq+0x28>)
 8007728:	6a1b      	ldr	r3, [r3, #32]
 800772a:	f003 030f 	and.w	r3, r3, #15
 800772e:	4906      	ldr	r1, [pc, #24]	@ (8007748 <HAL_RCC_GetHCLKFreq+0x2c>)
 8007730:	5ccb      	ldrb	r3, [r1, r3]
 8007732:	fa22 f303 	lsr.w	r3, r2, r3
 8007736:	4a05      	ldr	r2, [pc, #20]	@ (800774c <HAL_RCC_GetHCLKFreq+0x30>)
 8007738:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800773a:	4b04      	ldr	r3, [pc, #16]	@ (800774c <HAL_RCC_GetHCLKFreq+0x30>)
 800773c:	681b      	ldr	r3, [r3, #0]
}
 800773e:	4618      	mov	r0, r3
 8007740:	bd80      	pop	{r7, pc}
 8007742:	bf00      	nop
 8007744:	46020c00 	.word	0x46020c00
 8007748:	080163a0 	.word	0x080163a0
 800774c:	20000004 	.word	0x20000004

08007750 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8007754:	f7ff ffe2 	bl	800771c <HAL_RCC_GetHCLKFreq>
 8007758:	4602      	mov	r2, r0
 800775a:	4b05      	ldr	r3, [pc, #20]	@ (8007770 <HAL_RCC_GetPCLK1Freq+0x20>)
 800775c:	6a1b      	ldr	r3, [r3, #32]
 800775e:	091b      	lsrs	r3, r3, #4
 8007760:	f003 0307 	and.w	r3, r3, #7
 8007764:	4903      	ldr	r1, [pc, #12]	@ (8007774 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007766:	5ccb      	ldrb	r3, [r1, r3]
 8007768:	fa22 f303 	lsr.w	r3, r2, r3
}
 800776c:	4618      	mov	r0, r3
 800776e:	bd80      	pop	{r7, pc}
 8007770:	46020c00 	.word	0x46020c00
 8007774:	080163b0 	.word	0x080163b0

08007778 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800777c:	f7ff ffce 	bl	800771c <HAL_RCC_GetHCLKFreq>
 8007780:	4602      	mov	r2, r0
 8007782:	4b05      	ldr	r3, [pc, #20]	@ (8007798 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007784:	6a1b      	ldr	r3, [r3, #32]
 8007786:	0a1b      	lsrs	r3, r3, #8
 8007788:	f003 0307 	and.w	r3, r3, #7
 800778c:	4903      	ldr	r1, [pc, #12]	@ (800779c <HAL_RCC_GetPCLK2Freq+0x24>)
 800778e:	5ccb      	ldrb	r3, [r1, r3]
 8007790:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007794:	4618      	mov	r0, r3
 8007796:	bd80      	pop	{r7, pc}
 8007798:	46020c00 	.word	0x46020c00
 800779c:	080163b0 	.word	0x080163b0

080077a0 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 80077a4:	f7ff ffba 	bl	800771c <HAL_RCC_GetHCLKFreq>
 80077a8:	4602      	mov	r2, r0
 80077aa:	4b05      	ldr	r3, [pc, #20]	@ (80077c0 <HAL_RCC_GetPCLK3Freq+0x20>)
 80077ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077ae:	091b      	lsrs	r3, r3, #4
 80077b0:	f003 0307 	and.w	r3, r3, #7
 80077b4:	4903      	ldr	r1, [pc, #12]	@ (80077c4 <HAL_RCC_GetPCLK3Freq+0x24>)
 80077b6:	5ccb      	ldrb	r3, [r1, r3]
 80077b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80077bc:	4618      	mov	r0, r3
 80077be:	bd80      	pop	{r7, pc}
 80077c0:	46020c00 	.word	0x46020c00
 80077c4:	080163b0 	.word	0x080163b0

080077c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b086      	sub	sp, #24
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80077d0:	4b3e      	ldr	r3, [pc, #248]	@ (80078cc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80077d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80077d6:	f003 0304 	and.w	r3, r3, #4
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d003      	beq.n	80077e6 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80077de:	f7fe fdbf 	bl	8006360 <HAL_PWREx_GetVoltageRange>
 80077e2:	6178      	str	r0, [r7, #20]
 80077e4:	e019      	b.n	800781a <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80077e6:	4b39      	ldr	r3, [pc, #228]	@ (80078cc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80077e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80077ec:	4a37      	ldr	r2, [pc, #220]	@ (80078cc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80077ee:	f043 0304 	orr.w	r3, r3, #4
 80077f2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80077f6:	4b35      	ldr	r3, [pc, #212]	@ (80078cc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80077f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80077fc:	f003 0304 	and.w	r3, r3, #4
 8007800:	60fb      	str	r3, [r7, #12]
 8007802:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007804:	f7fe fdac 	bl	8006360 <HAL_PWREx_GetVoltageRange>
 8007808:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800780a:	4b30      	ldr	r3, [pc, #192]	@ (80078cc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800780c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007810:	4a2e      	ldr	r2, [pc, #184]	@ (80078cc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007812:	f023 0304 	bic.w	r3, r3, #4
 8007816:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007820:	d003      	beq.n	800782a <RCC_SetFlashLatencyFromMSIRange+0x62>
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007828:	d109      	bne.n	800783e <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007830:	d202      	bcs.n	8007838 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8007832:	2301      	movs	r3, #1
 8007834:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8007836:	e033      	b.n	80078a0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8007838:	2300      	movs	r3, #0
 800783a:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800783c:	e030      	b.n	80078a0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007844:	d208      	bcs.n	8007858 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800784c:	d102      	bne.n	8007854 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800784e:	2303      	movs	r3, #3
 8007850:	613b      	str	r3, [r7, #16]
 8007852:	e025      	b.n	80078a0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8007854:	2301      	movs	r3, #1
 8007856:	e035      	b.n	80078c4 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800785e:	d90f      	bls.n	8007880 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d109      	bne.n	800787a <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800786c:	d902      	bls.n	8007874 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800786e:	2300      	movs	r3, #0
 8007870:	613b      	str	r3, [r7, #16]
 8007872:	e015      	b.n	80078a0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8007874:	2301      	movs	r3, #1
 8007876:	613b      	str	r3, [r7, #16]
 8007878:	e012      	b.n	80078a0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800787a:	2300      	movs	r3, #0
 800787c:	613b      	str	r3, [r7, #16]
 800787e:	e00f      	b.n	80078a0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007886:	d109      	bne.n	800789c <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800788e:	d102      	bne.n	8007896 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8007890:	2301      	movs	r3, #1
 8007892:	613b      	str	r3, [r7, #16]
 8007894:	e004      	b.n	80078a0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8007896:	2302      	movs	r3, #2
 8007898:	613b      	str	r3, [r7, #16]
 800789a:	e001      	b.n	80078a0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800789c:	2301      	movs	r3, #1
 800789e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80078a0:	4b0b      	ldr	r3, [pc, #44]	@ (80078d0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f023 020f 	bic.w	r2, r3, #15
 80078a8:	4909      	ldr	r1, [pc, #36]	@ (80078d0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	4313      	orrs	r3, r2
 80078ae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80078b0:	4b07      	ldr	r3, [pc, #28]	@ (80078d0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f003 030f 	and.w	r3, r3, #15
 80078b8:	693a      	ldr	r2, [r7, #16]
 80078ba:	429a      	cmp	r2, r3
 80078bc:	d001      	beq.n	80078c2 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 80078be:	2301      	movs	r3, #1
 80078c0:	e000      	b.n	80078c4 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 80078c2:	2300      	movs	r3, #0
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3718      	adds	r7, #24
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}
 80078cc:	46020c00 	.word	0x46020c00
 80078d0:	40022000 	.word	0x40022000

080078d4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80078d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80078d8:	b0b6      	sub	sp, #216	@ 0xd8
 80078da:	af00      	add	r7, sp, #0
 80078dc:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80078e0:	2300      	movs	r3, #0
 80078e2:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80078e6:	2300      	movs	r3, #0
 80078e8:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80078ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80078f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f4:	f002 0401 	and.w	r4, r2, #1
 80078f8:	2500      	movs	r5, #0
 80078fa:	ea54 0305 	orrs.w	r3, r4, r5
 80078fe:	d00b      	beq.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8007900:	4bc5      	ldr	r3, [pc, #788]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8007902:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007906:	f023 0103 	bic.w	r1, r3, #3
 800790a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800790e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007910:	4ac1      	ldr	r2, [pc, #772]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8007912:	430b      	orrs	r3, r1
 8007914:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007918:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800791c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007920:	f002 0804 	and.w	r8, r2, #4
 8007924:	f04f 0900 	mov.w	r9, #0
 8007928:	ea58 0309 	orrs.w	r3, r8, r9
 800792c:	d00b      	beq.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800792e:	4bba      	ldr	r3, [pc, #744]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8007930:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007934:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007938:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800793c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800793e:	4ab6      	ldr	r2, [pc, #728]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8007940:	430b      	orrs	r3, r1
 8007942:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007946:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800794a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800794e:	f002 0a08 	and.w	sl, r2, #8
 8007952:	f04f 0b00 	mov.w	fp, #0
 8007956:	ea5a 030b 	orrs.w	r3, sl, fp
 800795a:	d00b      	beq.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800795c:	4bae      	ldr	r3, [pc, #696]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800795e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007962:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007966:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800796a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800796c:	4aaa      	ldr	r2, [pc, #680]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800796e:	430b      	orrs	r3, r1
 8007970:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007974:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800797c:	f002 0310 	and.w	r3, r2, #16
 8007980:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007984:	2300      	movs	r3, #0
 8007986:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800798a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800798e:	460b      	mov	r3, r1
 8007990:	4313      	orrs	r3, r2
 8007992:	d00b      	beq.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8007994:	4ba0      	ldr	r3, [pc, #640]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8007996:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800799a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800799e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80079a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079a4:	4a9c      	ldr	r2, [pc, #624]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80079a6:	430b      	orrs	r3, r1
 80079a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80079ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80079b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b4:	f002 0320 	and.w	r3, r2, #32
 80079b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80079bc:	2300      	movs	r3, #0
 80079be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80079c2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80079c6:	460b      	mov	r3, r1
 80079c8:	4313      	orrs	r3, r2
 80079ca:	d00b      	beq.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80079cc:	4b92      	ldr	r3, [pc, #584]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80079ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80079d2:	f023 0107 	bic.w	r1, r3, #7
 80079d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80079da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80079dc:	4a8e      	ldr	r2, [pc, #568]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80079de:	430b      	orrs	r3, r1
 80079e0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80079e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80079e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ec:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80079f0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80079f4:	2300      	movs	r3, #0
 80079f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80079fa:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80079fe:	460b      	mov	r3, r1
 8007a00:	4313      	orrs	r3, r2
 8007a02:	d00b      	beq.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8007a04:	4b84      	ldr	r3, [pc, #528]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8007a06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007a0a:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8007a0e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007a12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a14:	4a80      	ldr	r2, [pc, #512]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8007a16:	430b      	orrs	r3, r1
 8007a18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007a1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a24:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007a28:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007a32:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007a36:	460b      	mov	r3, r1
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	d00b      	beq.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8007a3c:	4b76      	ldr	r3, [pc, #472]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8007a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007a42:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007a46:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007a4a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007a4c:	4a72      	ldr	r2, [pc, #456]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8007a4e:	430b      	orrs	r3, r1
 8007a50:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007a54:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a5c:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8007a60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007a64:	2300      	movs	r3, #0
 8007a66:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007a6a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007a6e:	460b      	mov	r3, r1
 8007a70:	4313      	orrs	r3, r2
 8007a72:	d00b      	beq.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8007a74:	4b68      	ldr	r3, [pc, #416]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8007a76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007a7a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007a7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007a82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a84:	4a64      	ldr	r2, [pc, #400]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8007a86:	430b      	orrs	r3, r1
 8007a88:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007a8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a94:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007a98:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007aa2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007aa6:	460b      	mov	r3, r1
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	d00b      	beq.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8007aac:	4b5a      	ldr	r3, [pc, #360]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8007aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007ab2:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8007ab6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007aba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007abc:	4a56      	ldr	r2, [pc, #344]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8007abe:	430b      	orrs	r3, r1
 8007ac0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007ac4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007acc:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8007ad0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007ada:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007ade:	460b      	mov	r3, r1
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	d00b      	beq.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8007ae4:	4b4c      	ldr	r3, [pc, #304]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8007ae6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007aea:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8007aee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007af2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007af4:	4a48      	ldr	r2, [pc, #288]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8007af6:	430b      	orrs	r3, r1
 8007af8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007afc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b04:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007b08:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007b12:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007b16:	460b      	mov	r3, r1
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	d00b      	beq.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8007b1c:	4b3e      	ldr	r3, [pc, #248]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8007b1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007b22:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8007b26:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007b2a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007b2c:	4a3a      	ldr	r2, [pc, #232]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8007b2e:	430b      	orrs	r3, r1
 8007b30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8007b34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b3c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007b40:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007b42:	2300      	movs	r3, #0
 8007b44:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007b46:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007b4a:	460b      	mov	r3, r1
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	d00b      	beq.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8007b50:	4b31      	ldr	r3, [pc, #196]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8007b52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007b56:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007b5a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007b5e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007b60:	4a2d      	ldr	r2, [pc, #180]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8007b62:	430b      	orrs	r3, r1
 8007b64:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007b68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b70:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007b74:	673b      	str	r3, [r7, #112]	@ 0x70
 8007b76:	2300      	movs	r3, #0
 8007b78:	677b      	str	r3, [r7, #116]	@ 0x74
 8007b7a:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007b7e:	460b      	mov	r3, r1
 8007b80:	4313      	orrs	r3, r2
 8007b82:	d04f      	beq.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8007b84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007b88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007b8c:	2b80      	cmp	r3, #128	@ 0x80
 8007b8e:	d02d      	beq.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x318>
 8007b90:	2b80      	cmp	r3, #128	@ 0x80
 8007b92:	d827      	bhi.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8007b94:	2b60      	cmp	r3, #96	@ 0x60
 8007b96:	d02b      	beq.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8007b98:	2b60      	cmp	r3, #96	@ 0x60
 8007b9a:	d823      	bhi.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8007b9c:	2b40      	cmp	r3, #64	@ 0x40
 8007b9e:	d006      	beq.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8007ba0:	2b40      	cmp	r3, #64	@ 0x40
 8007ba2:	d81f      	bhi.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d009      	beq.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8007ba8:	2b20      	cmp	r3, #32
 8007baa:	d011      	beq.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8007bac:	e01a      	b.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x310>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007bae:	4b1a      	ldr	r3, [pc, #104]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8007bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bb2:	4a19      	ldr	r2, [pc, #100]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8007bb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007bb8:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007bba:	e01a      	b.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007bbc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007bc0:	3308      	adds	r3, #8
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f002 f914 	bl	8009df0 <RCCEx_PLL2_Config>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007bce:	e010      	b.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007bd0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007bd4:	332c      	adds	r3, #44	@ 0x2c
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f002 f9a2 	bl	8009f20 <RCCEx_PLL3_Config>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007be2:	e006      	b.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007be4:	2301      	movs	r3, #1
 8007be6:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8007bea:	e002      	b.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
        break;
 8007bec:	bf00      	nop
 8007bee:	e000      	b.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
        break;
 8007bf0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bf2:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d110      	bne.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0x348>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8007bfa:	4b07      	ldr	r3, [pc, #28]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8007bfc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007c00:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8007c04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007c08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c0c:	4a02      	ldr	r2, [pc, #8]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8007c0e:	430b      	orrs	r3, r1
 8007c10:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007c14:	e006      	b.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8007c16:	bf00      	nop
 8007c18:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c1c:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8007c20:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8007c24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c2c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007c30:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007c32:	2300      	movs	r3, #0
 8007c34:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007c36:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007c3a:	460b      	mov	r3, r1
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	d046      	beq.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x3fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8007c40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007c44:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007c48:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007c4c:	d028      	beq.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8007c4e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007c52:	d821      	bhi.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8007c54:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007c58:	d022      	beq.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8007c5a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007c5e:	d81b      	bhi.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8007c60:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007c64:	d01c      	beq.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8007c66:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007c6a:	d815      	bhi.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8007c6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c70:	d008      	beq.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 8007c72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c76:	d80f      	bhi.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d011      	beq.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8007c7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c80:	d00e      	beq.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8007c82:	e009      	b.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007c84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007c88:	3308      	adds	r3, #8
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f002 f8b0 	bl	8009df0 <RCCEx_PLL2_Config>
 8007c90:	4603      	mov	r3, r0
 8007c92:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8007c96:	e004      	b.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8007c9e:	e000      	b.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
        break;
 8007ca0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ca2:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d10d      	bne.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8007caa:	4bb6      	ldr	r3, [pc, #728]	@ (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8007cac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007cb0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007cb4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007cb8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007cbc:	4ab1      	ldr	r2, [pc, #708]	@ (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8007cbe:	430b      	orrs	r3, r1
 8007cc0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007cc4:	e003      	b.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x3fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cc6:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8007cca:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8007cce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007cda:	663b      	str	r3, [r7, #96]	@ 0x60
 8007cdc:	2300      	movs	r3, #0
 8007cde:	667b      	str	r3, [r7, #100]	@ 0x64
 8007ce0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007ce4:	460b      	mov	r3, r1
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	d03e      	beq.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8007cea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007cee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007cf2:	2b04      	cmp	r3, #4
 8007cf4:	d81d      	bhi.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8007cf6:	a201      	add	r2, pc, #4	@ (adr r2, 8007cfc <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8007cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cfc:	08007d3b 	.word	0x08007d3b
 8007d00:	08007d11 	.word	0x08007d11
 8007d04:	08007d1f 	.word	0x08007d1f
 8007d08:	08007d3b 	.word	0x08007d3b
 8007d0c:	08007d3b 	.word	0x08007d3b
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007d10:	4b9c      	ldr	r3, [pc, #624]	@ (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8007d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d14:	4a9b      	ldr	r2, [pc, #620]	@ (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8007d16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d1a:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8007d1c:	e00e      	b.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0x468>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007d1e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007d22:	332c      	adds	r3, #44	@ 0x2c
 8007d24:	4618      	mov	r0, r3
 8007d26:	f002 f8fb 	bl	8009f20 <RCCEx_PLL3_Config>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8007d30:	e004      	b.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0x468>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8007d32:	2301      	movs	r3, #1
 8007d34:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8007d38:	e000      	b.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0x468>
        break;
 8007d3a:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007d3c:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d10d      	bne.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8007d44:	4b8f      	ldr	r3, [pc, #572]	@ (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8007d46:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007d4a:	f023 0107 	bic.w	r1, r3, #7
 8007d4e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007d52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d56:	4a8b      	ldr	r2, [pc, #556]	@ (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8007d58:	430b      	orrs	r3, r1
 8007d5a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007d5e:	e003      	b.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x494>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d60:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8007d64:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8007d68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d70:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007d74:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007d76:	2300      	movs	r3, #0
 8007d78:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007d7a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007d7e:	460b      	mov	r3, r1
 8007d80:	4313      	orrs	r3, r2
 8007d82:	d04a      	beq.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x546>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8007d84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d8c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007d90:	d028      	beq.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8007d92:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007d96:	d821      	bhi.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0x508>
 8007d98:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007d9c:	d024      	beq.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8007d9e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007da2:	d81b      	bhi.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0x508>
 8007da4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007da8:	d00e      	beq.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8007daa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007dae:	d815      	bhi.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0x508>
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d01b      	beq.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007db4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007db8:	d110      	bne.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007dba:	4b72      	ldr	r3, [pc, #456]	@ (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8007dbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dbe:	4a71      	ldr	r2, [pc, #452]	@ (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8007dc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007dc4:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8007dc6:	e012      	b.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x51a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007dc8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007dcc:	332c      	adds	r3, #44	@ 0x2c
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f002 f8a6 	bl	8009f20 <RCCEx_PLL3_Config>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8007dda:	e008      	b.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x51a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8007ddc:	2301      	movs	r3, #1
 8007dde:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8007de2:	e004      	b.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 8007de4:	bf00      	nop
 8007de6:	e002      	b.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 8007de8:	bf00      	nop
 8007dea:	e000      	b.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 8007dec:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007dee:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d10d      	bne.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0x53e>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8007df6:	4b63      	ldr	r3, [pc, #396]	@ (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8007df8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007dfc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007e00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e08:	4a5e      	ldr	r2, [pc, #376]	@ (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8007e0a:	430b      	orrs	r3, r1
 8007e0c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007e10:	e003      	b.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x546>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e12:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8007e16:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007e1a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e22:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007e26:	653b      	str	r3, [r7, #80]	@ 0x50
 8007e28:	2300      	movs	r3, #0
 8007e2a:	657b      	str	r3, [r7, #84]	@ 0x54
 8007e2c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007e30:	460b      	mov	r3, r1
 8007e32:	4313      	orrs	r3, r2
 8007e34:	f000 80ba 	beq.w	8007fac <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	f887 30d1 	strb.w	r3, [r7, #209]	@ 0xd1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007e3e:	4b51      	ldr	r3, [pc, #324]	@ (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8007e40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007e44:	f003 0304 	and.w	r3, r3, #4
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d113      	bne.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e4c:	4b4d      	ldr	r3, [pc, #308]	@ (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8007e4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007e52:	4a4c      	ldr	r2, [pc, #304]	@ (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8007e54:	f043 0304 	orr.w	r3, r3, #4
 8007e58:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8007e5c:	4b49      	ldr	r3, [pc, #292]	@ (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8007e5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007e62:	f003 0304 	and.w	r3, r3, #4
 8007e66:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007e6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
      pwrclkchanged = SET;
 8007e6e:	2301      	movs	r3, #1
 8007e70:	f887 30d1 	strb.w	r3, [r7, #209]	@ 0xd1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8007e74:	4b44      	ldr	r3, [pc, #272]	@ (8007f88 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 8007e76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e78:	4a43      	ldr	r2, [pc, #268]	@ (8007f88 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 8007e7a:	f043 0301 	orr.w	r3, r3, #1
 8007e7e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007e80:	f7fc fdc8 	bl	8004a14 <HAL_GetTick>
 8007e84:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007e88:	e00b      	b.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e8a:	f7fc fdc3 	bl	8004a14 <HAL_GetTick>
 8007e8e:	4602      	mov	r2, r0
 8007e90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007e94:	1ad3      	subs	r3, r2, r3
 8007e96:	2b02      	cmp	r3, #2
 8007e98:	d903      	bls.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        ret = HAL_TIMEOUT;
 8007e9a:	2303      	movs	r3, #3
 8007e9c:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8007ea0:	e005      	b.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x5da>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007ea2:	4b39      	ldr	r3, [pc, #228]	@ (8007f88 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 8007ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ea6:	f003 0301 	and.w	r3, r3, #1
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d0ed      	beq.n	8007e8a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
      }
    }

    if (ret == HAL_OK)
 8007eae:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d16a      	bne.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007eb6:	4b33      	ldr	r3, [pc, #204]	@ (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8007eb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007ebc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ec0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8007ec4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d023      	beq.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0x640>
 8007ecc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007ed0:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8007ed4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d01b      	beq.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0x640>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007edc:	4b29      	ldr	r3, [pc, #164]	@ (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8007ede:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007ee2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ee6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007eea:	4b26      	ldr	r3, [pc, #152]	@ (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8007eec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007ef0:	4a24      	ldr	r2, [pc, #144]	@ (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8007ef2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007ef6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007efa:	4b22      	ldr	r3, [pc, #136]	@ (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8007efc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007f00:	4a20      	ldr	r2, [pc, #128]	@ (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8007f02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007f06:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007f0a:	4a1e      	ldr	r2, [pc, #120]	@ (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8007f0c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007f10:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007f14:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007f18:	f003 0301 	and.w	r3, r3, #1
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d019      	beq.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0x680>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f20:	f7fc fd78 	bl	8004a14 <HAL_GetTick>
 8007f24:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007f28:	e00d      	b.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f2a:	f7fc fd73 	bl	8004a14 <HAL_GetTick>
 8007f2e:	4602      	mov	r2, r0
 8007f30:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007f34:	1ad2      	subs	r2, r2, r3
 8007f36:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007f3a:	429a      	cmp	r2, r3
 8007f3c:	d903      	bls.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8007f3e:	2303      	movs	r3, #3
 8007f40:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
            break;
 8007f44:	e006      	b.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0x680>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007f46:	4b0f      	ldr	r3, [pc, #60]	@ (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8007f48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007f4c:	f003 0302 	and.w	r3, r3, #2
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d0ea      	beq.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if (ret == HAL_OK)
 8007f54:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d10d      	bne.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8007f5c:	4b09      	ldr	r3, [pc, #36]	@ (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8007f5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007f62:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007f66:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007f6a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007f6e:	4a05      	ldr	r2, [pc, #20]	@ (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8007f70:	430b      	orrs	r3, r1
 8007f72:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007f76:	e00d      	b.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007f78:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8007f7c:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
 8007f80:	e008      	b.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 8007f82:	bf00      	nop
 8007f84:	46020c00 	.word	0x46020c00
 8007f88:	46020800 	.word	0x46020800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f8c:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8007f90:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007f94:	f897 30d1 	ldrb.w	r3, [r7, #209]	@ 0xd1
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d107      	bne.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007f9c:	4bb2      	ldr	r3, [pc, #712]	@ (8008268 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8007f9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007fa2:	4ab1      	ldr	r2, [pc, #708]	@ (8008268 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8007fa4:	f023 0304 	bic.w	r3, r3, #4
 8007fa8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8007fac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007fb8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007fba:	2300      	movs	r3, #0
 8007fbc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007fbe:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007fc2:	460b      	mov	r3, r1
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	d042      	beq.n	800804e <HAL_RCCEx_PeriphCLKConfig+0x77a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8007fc8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007fcc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007fd0:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007fd4:	d022      	beq.n	800801c <HAL_RCCEx_PeriphCLKConfig+0x748>
 8007fd6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007fda:	d81b      	bhi.n	8008014 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8007fdc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007fe0:	d011      	beq.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0x732>
 8007fe2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007fe6:	d815      	bhi.n	8008014 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d019      	beq.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8007fec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007ff0:	d110      	bne.n	8008014 <HAL_RCCEx_PeriphCLKConfig+0x740>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007ff2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007ff6:	3308      	adds	r3, #8
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f001 fef9 	bl	8009df0 <RCCEx_PLL2_Config>
 8007ffe:	4603      	mov	r3, r0
 8008000:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8008004:	e00d      	b.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x74e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008006:	4b98      	ldr	r3, [pc, #608]	@ (8008268 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8008008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800800a:	4a97      	ldr	r2, [pc, #604]	@ (8008268 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800800c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008010:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8008012:	e006      	b.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x74e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8008014:	2301      	movs	r3, #1
 8008016:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 800801a:	e002      	b.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x74e>
        break;
 800801c:	bf00      	nop
 800801e:	e000      	b.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x74e>
        break;
 8008020:	bf00      	nop
    }
    if (ret == HAL_OK)
 8008022:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8008026:	2b00      	cmp	r3, #0
 8008028:	d10d      	bne.n	8008046 <HAL_RCCEx_PeriphCLKConfig+0x772>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800802a:	4b8f      	ldr	r3, [pc, #572]	@ (8008268 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800802c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008030:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8008034:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008038:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800803c:	4a8a      	ldr	r2, [pc, #552]	@ (8008268 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800803e:	430b      	orrs	r3, r1
 8008040:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008044:	e003      	b.n	800804e <HAL_RCCEx_PeriphCLKConfig+0x77a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008046:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800804a:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800804e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008056:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800805a:	643b      	str	r3, [r7, #64]	@ 0x40
 800805c:	2300      	movs	r3, #0
 800805e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008060:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008064:	460b      	mov	r3, r1
 8008066:	4313      	orrs	r3, r2
 8008068:	d02d      	beq.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800806a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800806e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008072:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008076:	d00b      	beq.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8008078:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800807c:	d804      	bhi.n	8008088 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
 800807e:	2b00      	cmp	r3, #0
 8008080:	d008      	beq.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8008082:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008086:	d007      	beq.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8008088:	2301      	movs	r3, #1
 800808a:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 800808e:	e004      	b.n	800809a <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 8008090:	bf00      	nop
 8008092:	e002      	b.n	800809a <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 8008094:	bf00      	nop
 8008096:	e000      	b.n	800809a <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 8008098:	bf00      	nop
    }
    if (ret == HAL_OK)
 800809a:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d10d      	bne.n	80080be <HAL_RCCEx_PeriphCLKConfig+0x7ea>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80080a2:	4b71      	ldr	r3, [pc, #452]	@ (8008268 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80080a4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80080a8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80080ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80080b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080b4:	4a6c      	ldr	r2, [pc, #432]	@ (8008268 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80080b6:	430b      	orrs	r3, r1
 80080b8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80080bc:	e003      	b.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080be:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80080c2:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 80080c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80080ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ce:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80080d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80080d4:	2300      	movs	r3, #0
 80080d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80080d8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80080dc:	460b      	mov	r3, r1
 80080de:	4313      	orrs	r3, r2
 80080e0:	d00c      	beq.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x828>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 80080e2:	4b61      	ldr	r3, [pc, #388]	@ (8008268 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80080e4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80080e8:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 80080ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80080f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80080f4:	4a5c      	ldr	r2, [pc, #368]	@ (8008268 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80080f6:	430b      	orrs	r3, r1
 80080f8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 80080fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008104:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008108:	633b      	str	r3, [r7, #48]	@ 0x30
 800810a:	2300      	movs	r3, #0
 800810c:	637b      	str	r3, [r7, #52]	@ 0x34
 800810e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008112:	460b      	mov	r3, r1
 8008114:	4313      	orrs	r3, r2
 8008116:	d019      	beq.n	800814c <HAL_RCCEx_PeriphCLKConfig+0x878>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8008118:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800811c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008120:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008124:	d105      	bne.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008126:	4b50      	ldr	r3, [pc, #320]	@ (8008268 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8008128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800812a:	4a4f      	ldr	r2, [pc, #316]	@ (8008268 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800812c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008130:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8008132:	4b4d      	ldr	r3, [pc, #308]	@ (8008268 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8008134:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008138:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800813c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008140:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008144:	4a48      	ldr	r2, [pc, #288]	@ (8008268 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8008146:	430b      	orrs	r3, r1
 8008148:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800814c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008154:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008158:	62bb      	str	r3, [r7, #40]	@ 0x28
 800815a:	2300      	movs	r3, #0
 800815c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800815e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008162:	460b      	mov	r3, r1
 8008164:	4313      	orrs	r3, r2
 8008166:	d00c      	beq.n	8008182 <HAL_RCCEx_PeriphCLKConfig+0x8ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8008168:	4b3f      	ldr	r3, [pc, #252]	@ (8008268 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800816a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800816e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008172:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008176:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800817a:	493b      	ldr	r1, [pc, #236]	@ (8008268 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800817c:	4313      	orrs	r3, r2
 800817e:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8008182:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800818a:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800818e:	623b      	str	r3, [r7, #32]
 8008190:	2300      	movs	r3, #0
 8008192:	627b      	str	r3, [r7, #36]	@ 0x24
 8008194:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008198:	460b      	mov	r3, r1
 800819a:	4313      	orrs	r3, r2
 800819c:	d00c      	beq.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800819e:	4b32      	ldr	r3, [pc, #200]	@ (8008268 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80081a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80081a4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80081a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80081ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80081b0:	492d      	ldr	r1, [pc, #180]	@ (8008268 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80081b2:	4313      	orrs	r3, r2
 80081b4:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80081b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80081bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80081c4:	61bb      	str	r3, [r7, #24]
 80081c6:	2300      	movs	r3, #0
 80081c8:	61fb      	str	r3, [r7, #28]
 80081ca:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80081ce:	460b      	mov	r3, r1
 80081d0:	4313      	orrs	r3, r2
 80081d2:	d00c      	beq.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0x91a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80081d4:	4b24      	ldr	r3, [pc, #144]	@ (8008268 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80081d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80081da:	f023 0218 	bic.w	r2, r3, #24
 80081de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80081e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80081e6:	4920      	ldr	r1, [pc, #128]	@ (8008268 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80081e8:	4313      	orrs	r3, r2
 80081ea:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80081ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80081f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f6:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80081fa:	613b      	str	r3, [r7, #16]
 80081fc:	2300      	movs	r3, #0
 80081fe:	617b      	str	r3, [r7, #20]
 8008200:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008204:	460b      	mov	r3, r1
 8008206:	4313      	orrs	r3, r2
 8008208:	d034      	beq.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800820a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800820e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008212:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008216:	d105      	bne.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x950>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008218:	4b13      	ldr	r3, [pc, #76]	@ (8008268 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800821a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800821c:	4a12      	ldr	r2, [pc, #72]	@ (8008268 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800821e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008222:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8008224:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008228:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800822c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008230:	d108      	bne.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0x970>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008232:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008236:	3308      	adds	r3, #8
 8008238:	4618      	mov	r0, r3
 800823a:	f001 fdd9 	bl	8009df0 <RCCEx_PLL2_Config>
 800823e:	4603      	mov	r3, r0
 8008240:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
    }
    if (ret == HAL_OK)
 8008244:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8008248:	2b00      	cmp	r3, #0
 800824a:	d10f      	bne.n	800826c <HAL_RCCEx_PeriphCLKConfig+0x998>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800824c:	4b06      	ldr	r3, [pc, #24]	@ (8008268 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800824e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008252:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008256:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800825a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800825e:	4902      	ldr	r1, [pc, #8]	@ (8008268 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8008260:	4313      	orrs	r3, r2
 8008262:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8008266:	e005      	b.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 8008268:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800826c:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8008270:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8008274:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800827c:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8008280:	60bb      	str	r3, [r7, #8]
 8008282:	2300      	movs	r3, #0
 8008284:	60fb      	str	r3, [r7, #12]
 8008286:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800828a:	460b      	mov	r3, r1
 800828c:	4313      	orrs	r3, r2
 800828e:	d03a      	beq.n	8008306 <HAL_RCCEx_PeriphCLKConfig+0xa32>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8008290:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008294:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008298:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800829c:	d00e      	beq.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800829e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80082a2:	d815      	bhi.n	80082d0 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d017      	beq.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80082a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80082ac:	d110      	bne.n	80082d0 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082ae:	4b27      	ldr	r3, [pc, #156]	@ (800834c <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 80082b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082b2:	4a26      	ldr	r2, [pc, #152]	@ (800834c <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 80082b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80082b8:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80082ba:	e00e      	b.n	80082da <HAL_RCCEx_PeriphCLKConfig+0xa06>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80082bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80082c0:	3308      	adds	r3, #8
 80082c2:	4618      	mov	r0, r3
 80082c4:	f001 fd94 	bl	8009df0 <RCCEx_PLL2_Config>
 80082c8:	4603      	mov	r3, r0
 80082ca:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80082ce:	e004      	b.n	80082da <HAL_RCCEx_PeriphCLKConfig+0xa06>
      default:
        ret = HAL_ERROR;
 80082d0:	2301      	movs	r3, #1
 80082d2:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 80082d6:	e000      	b.n	80082da <HAL_RCCEx_PeriphCLKConfig+0xa06>
        break;
 80082d8:	bf00      	nop
    }
    if (ret == HAL_OK)
 80082da:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d10d      	bne.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0xa2a>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 80082e2:	4b1a      	ldr	r3, [pc, #104]	@ (800834c <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 80082e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80082e8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80082ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80082f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082f4:	4915      	ldr	r1, [pc, #84]	@ (800834c <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 80082f6:	4313      	orrs	r3, r2
 80082f8:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80082fc:	e003      	b.n	8008306 <HAL_RCCEx_PeriphCLKConfig+0xa32>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082fe:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8008302:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8008306:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800830a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800830e:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008312:	603b      	str	r3, [r7, #0]
 8008314:	2300      	movs	r3, #0
 8008316:	607b      	str	r3, [r7, #4]
 8008318:	e9d7 1200 	ldrd	r1, r2, [r7]
 800831c:	460b      	mov	r3, r1
 800831e:	4313      	orrs	r3, r2
 8008320:	d00c      	beq.n	800833c <HAL_RCCEx_PeriphCLKConfig+0xa68>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8008322:	4b0a      	ldr	r3, [pc, #40]	@ (800834c <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8008324:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008328:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800832c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008330:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008334:	4905      	ldr	r1, [pc, #20]	@ (800834c <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8008336:	4313      	orrs	r3, r2
 8008338:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800833c:	f897 30d2 	ldrb.w	r3, [r7, #210]	@ 0xd2
}
 8008340:	4618      	mov	r0, r3
 8008342:	37d8      	adds	r7, #216	@ 0xd8
 8008344:	46bd      	mov	sp, r7
 8008346:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800834a:	bf00      	nop
 800834c:	46020c00 	.word	0x46020c00

08008350 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008350:	b480      	push	{r7}
 8008352:	b089      	sub	sp, #36	@ 0x24
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8008358:	4ba6      	ldr	r3, [pc, #664]	@ (80085f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800835a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800835c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008360:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8008362:	4ba4      	ldr	r3, [pc, #656]	@ (80085f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008366:	f003 0303 	and.w	r3, r3, #3
 800836a:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800836c:	4ba1      	ldr	r3, [pc, #644]	@ (80085f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800836e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008370:	0a1b      	lsrs	r3, r3, #8
 8008372:	f003 030f 	and.w	r3, r3, #15
 8008376:	3301      	adds	r3, #1
 8008378:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800837a:	4b9e      	ldr	r3, [pc, #632]	@ (80085f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800837c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800837e:	091b      	lsrs	r3, r3, #4
 8008380:	f003 0301 	and.w	r3, r3, #1
 8008384:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8008386:	4b9b      	ldr	r3, [pc, #620]	@ (80085f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008388:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800838a:	08db      	lsrs	r3, r3, #3
 800838c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008390:	68fa      	ldr	r2, [r7, #12]
 8008392:	fb02 f303 	mul.w	r3, r2, r3
 8008396:	ee07 3a90 	vmov	s15, r3
 800839a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800839e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	2b03      	cmp	r3, #3
 80083a6:	d062      	beq.n	800846e <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	2b03      	cmp	r3, #3
 80083ac:	f200 8081 	bhi.w	80084b2 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	2b01      	cmp	r3, #1
 80083b4:	d024      	beq.n	8008400 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	2b02      	cmp	r3, #2
 80083ba:	d17a      	bne.n	80084b2 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	ee07 3a90 	vmov	s15, r3
 80083c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083c6:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80085f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 80083ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083ce:	4b89      	ldr	r3, [pc, #548]	@ (80085f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80083d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083d6:	ee07 3a90 	vmov	s15, r3
 80083da:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80083de:	ed97 6a02 	vldr	s12, [r7, #8]
 80083e2:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80085fc <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80083e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80083ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80083ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80083f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80083f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80083fe:	e08f      	b.n	8008520 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8008400:	4b7c      	ldr	r3, [pc, #496]	@ (80085f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008402:	689b      	ldr	r3, [r3, #8]
 8008404:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008408:	2b00      	cmp	r3, #0
 800840a:	d005      	beq.n	8008418 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 800840c:	4b79      	ldr	r3, [pc, #484]	@ (80085f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800840e:	689b      	ldr	r3, [r3, #8]
 8008410:	0f1b      	lsrs	r3, r3, #28
 8008412:	f003 030f 	and.w	r3, r3, #15
 8008416:	e006      	b.n	8008426 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8008418:	4b76      	ldr	r3, [pc, #472]	@ (80085f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800841a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800841e:	041b      	lsls	r3, r3, #16
 8008420:	0f1b      	lsrs	r3, r3, #28
 8008422:	f003 030f 	and.w	r3, r3, #15
 8008426:	4a76      	ldr	r2, [pc, #472]	@ (8008600 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8008428:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800842c:	ee07 3a90 	vmov	s15, r3
 8008430:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	ee07 3a90 	vmov	s15, r3
 800843a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800843e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008442:	69bb      	ldr	r3, [r7, #24]
 8008444:	ee07 3a90 	vmov	s15, r3
 8008448:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800844c:	ed97 6a02 	vldr	s12, [r7, #8]
 8008450:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80085fc <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8008454:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008458:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800845c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008460:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8008464:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008468:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800846c:	e058      	b.n	8008520 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	ee07 3a90 	vmov	s15, r3
 8008474:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008478:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80085f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800847c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008480:	4b5c      	ldr	r3, [pc, #368]	@ (80085f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008482:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008484:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008488:	ee07 3a90 	vmov	s15, r3
 800848c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8008490:	ed97 6a02 	vldr	s12, [r7, #8]
 8008494:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80085fc <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8008498:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800849c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80084a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80084a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80084a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084ac:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80084b0:	e036      	b.n	8008520 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80084b2:	4b50      	ldr	r3, [pc, #320]	@ (80085f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80084b4:	689b      	ldr	r3, [r3, #8]
 80084b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d005      	beq.n	80084ca <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 80084be:	4b4d      	ldr	r3, [pc, #308]	@ (80085f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80084c0:	689b      	ldr	r3, [r3, #8]
 80084c2:	0f1b      	lsrs	r3, r3, #28
 80084c4:	f003 030f 	and.w	r3, r3, #15
 80084c8:	e006      	b.n	80084d8 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 80084ca:	4b4a      	ldr	r3, [pc, #296]	@ (80085f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80084cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80084d0:	041b      	lsls	r3, r3, #16
 80084d2:	0f1b      	lsrs	r3, r3, #28
 80084d4:	f003 030f 	and.w	r3, r3, #15
 80084d8:	4a49      	ldr	r2, [pc, #292]	@ (8008600 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 80084da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084de:	ee07 3a90 	vmov	s15, r3
 80084e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	ee07 3a90 	vmov	s15, r3
 80084ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80084f4:	69bb      	ldr	r3, [r7, #24]
 80084f6:	ee07 3a90 	vmov	s15, r3
 80084fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8008502:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80085fc <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8008506:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800850a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800850e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008512:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8008516:	ee67 7a27 	vmul.f32	s15, s14, s15
 800851a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800851e:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8008520:	4b34      	ldr	r3, [pc, #208]	@ (80085f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008524:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008528:	2b00      	cmp	r3, #0
 800852a:	d017      	beq.n	800855c <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800852c:	4b31      	ldr	r3, [pc, #196]	@ (80085f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800852e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008530:	0a5b      	lsrs	r3, r3, #9
 8008532:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008536:	ee07 3a90 	vmov	s15, r3
 800853a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800853e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008542:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008546:	edd7 6a07 	vldr	s13, [r7, #28]
 800854a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800854e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008552:	ee17 2a90 	vmov	r2, s15
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	601a      	str	r2, [r3, #0]
 800855a:	e002      	b.n	8008562 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2200      	movs	r2, #0
 8008560:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8008562:	4b24      	ldr	r3, [pc, #144]	@ (80085f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800856a:	2b00      	cmp	r3, #0
 800856c:	d017      	beq.n	800859e <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800856e:	4b21      	ldr	r3, [pc, #132]	@ (80085f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008570:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008572:	0c1b      	lsrs	r3, r3, #16
 8008574:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008578:	ee07 3a90 	vmov	s15, r3
 800857c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8008580:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008584:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008588:	edd7 6a07 	vldr	s13, [r7, #28]
 800858c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008590:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008594:	ee17 2a90 	vmov	r2, s15
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	605a      	str	r2, [r3, #4]
 800859c:	e002      	b.n	80085a4 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2200      	movs	r2, #0
 80085a2:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80085a4:	4b13      	ldr	r3, [pc, #76]	@ (80085f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80085a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d017      	beq.n	80085e0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80085b0:	4b10      	ldr	r3, [pc, #64]	@ (80085f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80085b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085b4:	0e1b      	lsrs	r3, r3, #24
 80085b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80085ba:	ee07 3a90 	vmov	s15, r3
 80085be:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 80085c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80085c6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80085ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80085ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085d6:	ee17 2a90 	vmov	r2, s15
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80085de:	e002      	b.n	80085e6 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2200      	movs	r2, #0
 80085e4:	609a      	str	r2, [r3, #8]
}
 80085e6:	bf00      	nop
 80085e8:	3724      	adds	r7, #36	@ 0x24
 80085ea:	46bd      	mov	sp, r7
 80085ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f0:	4770      	bx	lr
 80085f2:	bf00      	nop
 80085f4:	46020c00 	.word	0x46020c00
 80085f8:	4b742400 	.word	0x4b742400
 80085fc:	46000000 	.word	0x46000000
 8008600:	080163b8 	.word	0x080163b8

08008604 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008604:	b480      	push	{r7}
 8008606:	b089      	sub	sp, #36	@ 0x24
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800860c:	4ba6      	ldr	r3, [pc, #664]	@ (80088a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800860e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008610:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008614:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8008616:	4ba4      	ldr	r3, [pc, #656]	@ (80088a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800861a:	f003 0303 	and.w	r3, r3, #3
 800861e:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8008620:	4ba1      	ldr	r3, [pc, #644]	@ (80088a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008624:	0a1b      	lsrs	r3, r3, #8
 8008626:	f003 030f 	and.w	r3, r3, #15
 800862a:	3301      	adds	r3, #1
 800862c:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800862e:	4b9e      	ldr	r3, [pc, #632]	@ (80088a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008632:	091b      	lsrs	r3, r3, #4
 8008634:	f003 0301 	and.w	r3, r3, #1
 8008638:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800863a:	4b9b      	ldr	r3, [pc, #620]	@ (80088a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800863c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800863e:	08db      	lsrs	r3, r3, #3
 8008640:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008644:	68fa      	ldr	r2, [r7, #12]
 8008646:	fb02 f303 	mul.w	r3, r2, r3
 800864a:	ee07 3a90 	vmov	s15, r3
 800864e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008652:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	2b03      	cmp	r3, #3
 800865a:	d062      	beq.n	8008722 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	2b03      	cmp	r3, #3
 8008660:	f200 8081 	bhi.w	8008766 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	2b01      	cmp	r3, #1
 8008668:	d024      	beq.n	80086b4 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	2b02      	cmp	r3, #2
 800866e:	d17a      	bne.n	8008766 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	ee07 3a90 	vmov	s15, r3
 8008676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800867a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80088ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800867e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008682:	4b89      	ldr	r3, [pc, #548]	@ (80088a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008684:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008686:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800868a:	ee07 3a90 	vmov	s15, r3
 800868e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8008692:	ed97 6a02 	vldr	s12, [r7, #8]
 8008696:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80088b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800869a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800869e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80086a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80086a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80086aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80086b2:	e08f      	b.n	80087d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80086b4:	4b7c      	ldr	r3, [pc, #496]	@ (80088a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80086b6:	689b      	ldr	r3, [r3, #8]
 80086b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d005      	beq.n	80086cc <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 80086c0:	4b79      	ldr	r3, [pc, #484]	@ (80088a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80086c2:	689b      	ldr	r3, [r3, #8]
 80086c4:	0f1b      	lsrs	r3, r3, #28
 80086c6:	f003 030f 	and.w	r3, r3, #15
 80086ca:	e006      	b.n	80086da <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 80086cc:	4b76      	ldr	r3, [pc, #472]	@ (80088a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80086ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80086d2:	041b      	lsls	r3, r3, #16
 80086d4:	0f1b      	lsrs	r3, r3, #28
 80086d6:	f003 030f 	and.w	r3, r3, #15
 80086da:	4a76      	ldr	r2, [pc, #472]	@ (80088b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 80086dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80086e0:	ee07 3a90 	vmov	s15, r3
 80086e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	ee07 3a90 	vmov	s15, r3
 80086ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80086f6:	69bb      	ldr	r3, [r7, #24]
 80086f8:	ee07 3a90 	vmov	s15, r3
 80086fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008700:	ed97 6a02 	vldr	s12, [r7, #8]
 8008704:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80088b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8008708:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800870c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008710:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008714:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8008718:	ee67 7a27 	vmul.f32	s15, s14, s15
 800871c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008720:	e058      	b.n	80087d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	ee07 3a90 	vmov	s15, r3
 8008728:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800872c:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80088ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8008730:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008734:	4b5c      	ldr	r3, [pc, #368]	@ (80088a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008736:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008738:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800873c:	ee07 3a90 	vmov	s15, r3
 8008740:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8008744:	ed97 6a02 	vldr	s12, [r7, #8]
 8008748:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80088b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800874c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008750:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8008754:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008758:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800875c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008760:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008764:	e036      	b.n	80087d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8008766:	4b50      	ldr	r3, [pc, #320]	@ (80088a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008768:	689b      	ldr	r3, [r3, #8]
 800876a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800876e:	2b00      	cmp	r3, #0
 8008770:	d005      	beq.n	800877e <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8008772:	4b4d      	ldr	r3, [pc, #308]	@ (80088a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008774:	689b      	ldr	r3, [r3, #8]
 8008776:	0f1b      	lsrs	r3, r3, #28
 8008778:	f003 030f 	and.w	r3, r3, #15
 800877c:	e006      	b.n	800878c <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 800877e:	4b4a      	ldr	r3, [pc, #296]	@ (80088a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008780:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008784:	041b      	lsls	r3, r3, #16
 8008786:	0f1b      	lsrs	r3, r3, #28
 8008788:	f003 030f 	and.w	r3, r3, #15
 800878c:	4a49      	ldr	r2, [pc, #292]	@ (80088b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800878e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008792:	ee07 3a90 	vmov	s15, r3
 8008796:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800879a:	693b      	ldr	r3, [r7, #16]
 800879c:	ee07 3a90 	vmov	s15, r3
 80087a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80087a8:	69bb      	ldr	r3, [r7, #24]
 80087aa:	ee07 3a90 	vmov	s15, r3
 80087ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80087b6:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80088b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80087ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80087c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80087ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80087d2:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80087d4:	4b34      	ldr	r3, [pc, #208]	@ (80088a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80087d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d017      	beq.n	8008810 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80087e0:	4b31      	ldr	r3, [pc, #196]	@ (80088a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80087e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087e4:	0a5b      	lsrs	r3, r3, #9
 80087e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80087ea:	ee07 3a90 	vmov	s15, r3
 80087ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 80087f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80087f6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80087fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80087fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008802:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008806:	ee17 2a90 	vmov	r2, s15
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	601a      	str	r2, [r3, #0]
 800880e:	e002      	b.n	8008816 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2200      	movs	r2, #0
 8008814:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8008816:	4b24      	ldr	r3, [pc, #144]	@ (80088a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800881a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800881e:	2b00      	cmp	r3, #0
 8008820:	d017      	beq.n	8008852 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008822:	4b21      	ldr	r3, [pc, #132]	@ (80088a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008824:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008826:	0c1b      	lsrs	r3, r3, #16
 8008828:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800882c:	ee07 3a90 	vmov	s15, r3
 8008830:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8008834:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008838:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800883c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008840:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008844:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008848:	ee17 2a90 	vmov	r2, s15
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	605a      	str	r2, [r3, #4]
 8008850:	e002      	b.n	8008858 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2200      	movs	r2, #0
 8008856:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8008858:	4b13      	ldr	r3, [pc, #76]	@ (80088a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800885a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800885c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008860:	2b00      	cmp	r3, #0
 8008862:	d017      	beq.n	8008894 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008864:	4b10      	ldr	r3, [pc, #64]	@ (80088a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008866:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008868:	0e1b      	lsrs	r3, r3, #24
 800886a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800886e:	ee07 3a90 	vmov	s15, r3
 8008872:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8008876:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800887a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800887e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008882:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008886:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800888a:	ee17 2a90 	vmov	r2, s15
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008892:	e002      	b.n	800889a <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2200      	movs	r2, #0
 8008898:	609a      	str	r2, [r3, #8]
}
 800889a:	bf00      	nop
 800889c:	3724      	adds	r7, #36	@ 0x24
 800889e:	46bd      	mov	sp, r7
 80088a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a4:	4770      	bx	lr
 80088a6:	bf00      	nop
 80088a8:	46020c00 	.word	0x46020c00
 80088ac:	4b742400 	.word	0x4b742400
 80088b0:	46000000 	.word	0x46000000
 80088b4:	080163b8 	.word	0x080163b8

080088b8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b089      	sub	sp, #36	@ 0x24
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80088c0:	4ba6      	ldr	r3, [pc, #664]	@ (8008b5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80088c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088c8:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80088ca:	4ba4      	ldr	r3, [pc, #656]	@ (8008b5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80088cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088ce:	f003 0303 	and.w	r3, r3, #3
 80088d2:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 80088d4:	4ba1      	ldr	r3, [pc, #644]	@ (8008b5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80088d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088d8:	0a1b      	lsrs	r3, r3, #8
 80088da:	f003 030f 	and.w	r3, r3, #15
 80088de:	3301      	adds	r3, #1
 80088e0:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 80088e2:	4b9e      	ldr	r3, [pc, #632]	@ (8008b5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80088e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088e6:	091b      	lsrs	r3, r3, #4
 80088e8:	f003 0301 	and.w	r3, r3, #1
 80088ec:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80088ee:	4b9b      	ldr	r3, [pc, #620]	@ (8008b5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80088f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80088f2:	08db      	lsrs	r3, r3, #3
 80088f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80088f8:	68fa      	ldr	r2, [r7, #12]
 80088fa:	fb02 f303 	mul.w	r3, r2, r3
 80088fe:	ee07 3a90 	vmov	s15, r3
 8008902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008906:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	2b03      	cmp	r3, #3
 800890e:	d062      	beq.n	80089d6 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8008910:	697b      	ldr	r3, [r7, #20]
 8008912:	2b03      	cmp	r3, #3
 8008914:	f200 8081 	bhi.w	8008a1a <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	2b01      	cmp	r3, #1
 800891c:	d024      	beq.n	8008968 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	2b02      	cmp	r3, #2
 8008922:	d17a      	bne.n	8008a1a <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008924:	693b      	ldr	r3, [r7, #16]
 8008926:	ee07 3a90 	vmov	s15, r3
 800892a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800892e:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8008b60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8008932:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008936:	4b89      	ldr	r3, [pc, #548]	@ (8008b5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800893a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800893e:	ee07 3a90 	vmov	s15, r3
 8008942:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8008946:	ed97 6a02 	vldr	s12, [r7, #8]
 800894a:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8008b64 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800894e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008952:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8008956:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800895a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800895e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008962:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8008966:	e08f      	b.n	8008a88 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008968:	4b7c      	ldr	r3, [pc, #496]	@ (8008b5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800896a:	689b      	ldr	r3, [r3, #8]
 800896c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008970:	2b00      	cmp	r3, #0
 8008972:	d005      	beq.n	8008980 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8008974:	4b79      	ldr	r3, [pc, #484]	@ (8008b5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008976:	689b      	ldr	r3, [r3, #8]
 8008978:	0f1b      	lsrs	r3, r3, #28
 800897a:	f003 030f 	and.w	r3, r3, #15
 800897e:	e006      	b.n	800898e <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8008980:	4b76      	ldr	r3, [pc, #472]	@ (8008b5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008982:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008986:	041b      	lsls	r3, r3, #16
 8008988:	0f1b      	lsrs	r3, r3, #28
 800898a:	f003 030f 	and.w	r3, r3, #15
 800898e:	4a76      	ldr	r2, [pc, #472]	@ (8008b68 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8008990:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008994:	ee07 3a90 	vmov	s15, r3
 8008998:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800899c:	693b      	ldr	r3, [r7, #16]
 800899e:	ee07 3a90 	vmov	s15, r3
 80089a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80089aa:	69bb      	ldr	r3, [r7, #24]
 80089ac:	ee07 3a90 	vmov	s15, r3
 80089b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089b4:	ed97 6a02 	vldr	s12, [r7, #8]
 80089b8:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8008b64 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80089bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80089c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80089cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089d0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80089d4:	e058      	b.n	8008a88 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	ee07 3a90 	vmov	s15, r3
 80089dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089e0:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008b60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 80089e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089e8:	4b5c      	ldr	r3, [pc, #368]	@ (8008b5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80089ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089f0:	ee07 3a90 	vmov	s15, r3
 80089f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80089f8:	ed97 6a02 	vldr	s12, [r7, #8]
 80089fc:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8008b64 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8008a00:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008a04:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8008a08:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008a10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a14:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008a18:	e036      	b.n	8008a88 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008a1a:	4b50      	ldr	r3, [pc, #320]	@ (8008b5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008a1c:	689b      	ldr	r3, [r3, #8]
 8008a1e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d005      	beq.n	8008a32 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8008a26:	4b4d      	ldr	r3, [pc, #308]	@ (8008b5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008a28:	689b      	ldr	r3, [r3, #8]
 8008a2a:	0f1b      	lsrs	r3, r3, #28
 8008a2c:	f003 030f 	and.w	r3, r3, #15
 8008a30:	e006      	b.n	8008a40 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8008a32:	4b4a      	ldr	r3, [pc, #296]	@ (8008b5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008a34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008a38:	041b      	lsls	r3, r3, #16
 8008a3a:	0f1b      	lsrs	r3, r3, #28
 8008a3c:	f003 030f 	and.w	r3, r3, #15
 8008a40:	4a49      	ldr	r2, [pc, #292]	@ (8008b68 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8008a42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a46:	ee07 3a90 	vmov	s15, r3
 8008a4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a4e:	693b      	ldr	r3, [r7, #16]
 8008a50:	ee07 3a90 	vmov	s15, r3
 8008a54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008a5c:	69bb      	ldr	r3, [r7, #24]
 8008a5e:	ee07 3a90 	vmov	s15, r3
 8008a62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a66:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a6a:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8008b64 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8008a6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a82:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008a86:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8008a88:	4b34      	ldr	r3, [pc, #208]	@ (8008b5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d017      	beq.n	8008ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008a94:	4b31      	ldr	r3, [pc, #196]	@ (8008b5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008a96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a98:	0a5b      	lsrs	r3, r3, #9
 8008a9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a9e:	ee07 3a90 	vmov	s15, r3
 8008aa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8008aa6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008aaa:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008aae:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ab2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ab6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008aba:	ee17 2a90 	vmov	r2, s15
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	601a      	str	r2, [r3, #0]
 8008ac2:	e002      	b.n	8008aca <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8008aca:	4b24      	ldr	r3, [pc, #144]	@ (8008b5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ace:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d017      	beq.n	8008b06 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008ad6:	4b21      	ldr	r3, [pc, #132]	@ (8008b5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ada:	0c1b      	lsrs	r3, r3, #16
 8008adc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ae0:	ee07 3a90 	vmov	s15, r3
 8008ae4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8008ae8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008aec:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008af0:	edd7 6a07 	vldr	s13, [r7, #28]
 8008af4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008af8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008afc:	ee17 2a90 	vmov	r2, s15
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	605a      	str	r2, [r3, #4]
 8008b04:	e002      	b.n	8008b0c <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8008b0c:	4b13      	ldr	r3, [pc, #76]	@ (8008b5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008b0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b10:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d017      	beq.n	8008b48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008b18:	4b10      	ldr	r3, [pc, #64]	@ (8008b5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008b1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b1c:	0e1b      	lsrs	r3, r3, #24
 8008b1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b22:	ee07 3a90 	vmov	s15, r3
 8008b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8008b2a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008b2e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008b32:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b3e:	ee17 2a90 	vmov	r2, s15
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008b46:	e002      	b.n	8008b4e <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	609a      	str	r2, [r3, #8]
}
 8008b4e:	bf00      	nop
 8008b50:	3724      	adds	r7, #36	@ 0x24
 8008b52:	46bd      	mov	sp, r7
 8008b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b58:	4770      	bx	lr
 8008b5a:	bf00      	nop
 8008b5c:	46020c00 	.word	0x46020c00
 8008b60:	4b742400 	.word	0x4b742400
 8008b64:	46000000 	.word	0x46000000
 8008b68:	080163b8 	.word	0x080163b8

08008b6c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b08e      	sub	sp, #56	@ 0x38
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8008b76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b7a:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8008b7e:	430b      	orrs	r3, r1
 8008b80:	d145      	bne.n	8008c0e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8008b82:	4b9b      	ldr	r3, [pc, #620]	@ (8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8008b84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008b88:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008b8c:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8008b8e:	4b98      	ldr	r3, [pc, #608]	@ (8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8008b90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008b94:	f003 0302 	and.w	r3, r3, #2
 8008b98:	2b02      	cmp	r3, #2
 8008b9a:	d108      	bne.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8008b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ba2:	d104      	bne.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8008ba4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008ba8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008baa:	f001 b912 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8008bae:	4b90      	ldr	r3, [pc, #576]	@ (8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8008bb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008bb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008bb8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008bbc:	d114      	bne.n	8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8008bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008bc4:	d110      	bne.n	8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008bc6:	4b8a      	ldr	r3, [pc, #552]	@ (8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8008bc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008bcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008bd0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008bd4:	d103      	bne.n	8008bde <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8008bd6:	23fa      	movs	r3, #250	@ 0xfa
 8008bd8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008bda:	f001 b8fa 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8008bde:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008be2:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008be4:	f001 b8f5 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8008be8:	4b81      	ldr	r3, [pc, #516]	@ (8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008bf0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008bf4:	d107      	bne.n	8008c06 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8008bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bf8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008bfc:	d103      	bne.n	8008c06 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8008bfe:	4b7d      	ldr	r3, [pc, #500]	@ (8008df4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008c00:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c02:	f001 b8e6 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8008c06:	2300      	movs	r3, #0
 8008c08:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c0a:	f001 b8e2 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008c0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c12:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8008c16:	430b      	orrs	r3, r1
 8008c18:	d151      	bne.n	8008cbe <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8008c1a:	4b75      	ldr	r3, [pc, #468]	@ (8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8008c1c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008c20:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8008c24:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c28:	2b80      	cmp	r3, #128	@ 0x80
 8008c2a:	d035      	beq.n	8008c98 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8008c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c2e:	2b80      	cmp	r3, #128	@ 0x80
 8008c30:	d841      	bhi.n	8008cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8008c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c34:	2b60      	cmp	r3, #96	@ 0x60
 8008c36:	d02a      	beq.n	8008c8e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8008c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c3a:	2b60      	cmp	r3, #96	@ 0x60
 8008c3c:	d83b      	bhi.n	8008cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8008c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c40:	2b40      	cmp	r3, #64	@ 0x40
 8008c42:	d009      	beq.n	8008c58 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c46:	2b40      	cmp	r3, #64	@ 0x40
 8008c48:	d835      	bhi.n	8008cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8008c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d00c      	beq.n	8008c6a <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8008c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c52:	2b20      	cmp	r3, #32
 8008c54:	d012      	beq.n	8008c7c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8008c56:	e02e      	b.n	8008cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008c58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	f7ff fb77 	bl	8008350 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8008c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c64:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008c66:	f001 b8b4 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c6a:	f107 0318 	add.w	r3, r7, #24
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f7ff fcc8 	bl	8008604 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8008c74:	69bb      	ldr	r3, [r7, #24]
 8008c76:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008c78:	f001 b8ab 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c7c:	f107 030c 	add.w	r3, r7, #12
 8008c80:	4618      	mov	r0, r3
 8008c82:	f7ff fe19 	bl	80088b8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008c8a:	f001 b8a2 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008c8e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8008c92:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008c94:	f001 b89d 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008c98:	4b55      	ldr	r3, [pc, #340]	@ (8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008ca0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ca4:	d103      	bne.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8008ca6:	4b54      	ldr	r3, [pc, #336]	@ (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8008ca8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008caa:	f001 b892 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008cb2:	f001 b88e 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default :
      {
        frequency = 0U;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008cba:	f001 b88a 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        break;
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8008cbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008cc2:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8008cc6:	430b      	orrs	r3, r1
 8008cc8:	d126      	bne.n	8008d18 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8008cca:	4b49      	ldr	r3, [pc, #292]	@ (8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8008ccc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008cd0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008cd4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8008cd6:	4b46      	ldr	r3, [pc, #280]	@ (8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008cde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ce2:	d106      	bne.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8008ce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d103      	bne.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
    {
      frequency = HSI_VALUE;
 8008cea:	4b43      	ldr	r3, [pc, #268]	@ (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8008cec:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cee:	f001 b870 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8008cf2:	4b3f      	ldr	r3, [pc, #252]	@ (8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008cfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008cfe:	d107      	bne.n	8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8008d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d02:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008d06:	d103      	bne.n	8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
    {
      frequency = HSI_VALUE >> 1U;
 8008d08:	4b3c      	ldr	r3, [pc, #240]	@ (8008dfc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008d0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d0c:	f001 b861 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8008d10:	2300      	movs	r3, #0
 8008d12:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d14:	f001 b85d 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8008d18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d1c:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8008d20:	430b      	orrs	r3, r1
 8008d22:	d171      	bne.n	8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8008d24:	4b32      	ldr	r3, [pc, #200]	@ (8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8008d26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008d2a:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8008d2e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d32:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008d36:	d034      	beq.n	8008da2 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8008d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d3a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008d3e:	d853      	bhi.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8008d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d42:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008d46:	d00b      	beq.n	8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8008d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d4a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008d4e:	d84b      	bhi.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8008d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d016      	beq.n	8008d84 <HAL_RCCEx_GetPeriphCLKFreq+0x218>
 8008d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d58:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008d5c:	d009      	beq.n	8008d72 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
 8008d5e:	e043      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008d60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008d64:	4618      	mov	r0, r3
 8008d66:	f7ff faf3 	bl	8008350 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8008d6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d6c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008d6e:	f001 b830 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d72:	f107 0318 	add.w	r3, r7, #24
 8008d76:	4618      	mov	r0, r3
 8008d78:	f7ff fc44 	bl	8008604 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8008d7c:	69fb      	ldr	r3, [r7, #28]
 8008d7e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008d80:	f001 b827 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8008d84:	4b1a      	ldr	r3, [pc, #104]	@ (8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008d8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008d90:	d103      	bne.n	8008d9a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
        {
          frequency = HSI48_VALUE;
 8008d92:	4b1b      	ldr	r3, [pc, #108]	@ (8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008d94:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008d96:	f001 b81c 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008d9e:	f001 b818 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008da2:	4b13      	ldr	r3, [pc, #76]	@ (8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f003 0320 	and.w	r3, r3, #32
 8008daa:	2b20      	cmp	r3, #32
 8008dac:	d118      	bne.n	8008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008dae:	4b10      	ldr	r3, [pc, #64]	@ (8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8008db0:	689b      	ldr	r3, [r3, #8]
 8008db2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d005      	beq.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8008dba:	4b0d      	ldr	r3, [pc, #52]	@ (8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8008dbc:	689b      	ldr	r3, [r3, #8]
 8008dbe:	0e1b      	lsrs	r3, r3, #24
 8008dc0:	f003 030f 	and.w	r3, r3, #15
 8008dc4:	e006      	b.n	8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
 8008dc6:	4b0a      	ldr	r3, [pc, #40]	@ (8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8008dc8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008dcc:	041b      	lsls	r3, r3, #16
 8008dce:	0e1b      	lsrs	r3, r3, #24
 8008dd0:	f003 030f 	and.w	r3, r3, #15
 8008dd4:	4a0b      	ldr	r2, [pc, #44]	@ (8008e04 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008dd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008dda:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008ddc:	f000 bff9 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8008de0:	2300      	movs	r3, #0
 8008de2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008de4:	f000 bff5 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default :

        frequency = 0U;
 8008de8:	2300      	movs	r3, #0
 8008dea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008dec:	f000 bff1 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8008df0:	46020c00 	.word	0x46020c00
 8008df4:	0007a120 	.word	0x0007a120
 8008df8:	00f42400 	.word	0x00f42400
 8008dfc:	007a1200 	.word	0x007a1200
 8008e00:	02dc6c00 	.word	0x02dc6c00
 8008e04:	080163b8 	.word	0x080163b8
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008e08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e0c:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8008e10:	430b      	orrs	r3, r1
 8008e12:	d17f      	bne.n	8008f14 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008e14:	4ba8      	ldr	r3, [pc, #672]	@ (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8008e16:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008e1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008e1e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8008e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d165      	bne.n	8008ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8008e26:	4ba4      	ldr	r3, [pc, #656]	@ (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8008e28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008e2c:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8008e30:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 8008e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e34:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008e38:	d034      	beq.n	8008ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8008e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e3c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008e40:	d853      	bhi.n	8008eea <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8008e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e44:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008e48:	d00b      	beq.n	8008e62 <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
 8008e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e4c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008e50:	d84b      	bhi.n	8008eea <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8008e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d016      	beq.n	8008e86 <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
 8008e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e5a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008e5e:	d009      	beq.n	8008e74 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8008e60:	e043      	b.n	8008eea <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008e66:	4618      	mov	r0, r3
 8008e68:	f7ff fa72 	bl	8008350 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e6e:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008e70:	f000 bfaf 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e74:	f107 0318 	add.w	r3, r7, #24
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f7ff fbc3 	bl	8008604 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008e7e:	69fb      	ldr	r3, [r7, #28]
 8008e80:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008e82:	f000 bfa6 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8008e86:	4b8c      	ldr	r3, [pc, #560]	@ (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008e8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008e92:	d103      	bne.n	8008e9c <HAL_RCCEx_GetPeriphCLKFreq+0x330>
          {
            frequency = HSI48_VALUE;
 8008e94:	4b89      	ldr	r3, [pc, #548]	@ (80090bc <HAL_RCCEx_GetPeriphCLKFreq+0x550>)
 8008e96:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8008e98:	f000 bf9b 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
            frequency = 0U;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008ea0:	f000 bf97 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008ea4:	4b84      	ldr	r3, [pc, #528]	@ (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f003 0320 	and.w	r3, r3, #32
 8008eac:	2b20      	cmp	r3, #32
 8008eae:	d118      	bne.n	8008ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008eb0:	4b81      	ldr	r3, [pc, #516]	@ (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8008eb2:	689b      	ldr	r3, [r3, #8]
 8008eb4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d005      	beq.n	8008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
 8008ebc:	4b7e      	ldr	r3, [pc, #504]	@ (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8008ebe:	689b      	ldr	r3, [r3, #8]
 8008ec0:	0e1b      	lsrs	r3, r3, #24
 8008ec2:	f003 030f 	and.w	r3, r3, #15
 8008ec6:	e006      	b.n	8008ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
 8008ec8:	4b7b      	ldr	r3, [pc, #492]	@ (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8008eca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008ece:	041b      	lsls	r3, r3, #16
 8008ed0:	0e1b      	lsrs	r3, r3, #24
 8008ed2:	f003 030f 	and.w	r3, r3, #15
 8008ed6:	4a7a      	ldr	r2, [pc, #488]	@ (80090c0 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8008ed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008edc:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8008ede:	f000 bf78 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
            frequency = 0U;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008ee6:	f000 bf74 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        default :
        {
          frequency = 0U;
 8008eea:	2300      	movs	r3, #0
 8008eec:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008eee:	f000 bf70 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8008ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ef4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008ef8:	d108      	bne.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008efa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008efe:	4618      	mov	r0, r3
 8008f00:	f7ff fa26 	bl	8008350 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8008f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f06:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f08:	f000 bf63 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else
    {
      frequency = 0U;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f10:	f000 bf5f 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8008f14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f18:	1e51      	subs	r1, r2, #1
 8008f1a:	430b      	orrs	r3, r1
 8008f1c:	d136      	bne.n	8008f8c <HAL_RCCEx_GetPeriphCLKFreq+0x420>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8008f1e:	4b66      	ldr	r3, [pc, #408]	@ (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8008f20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008f24:	f003 0303 	and.w	r3, r3, #3
 8008f28:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8008f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d104      	bne.n	8008f3a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8008f30:	f7fe fc22 	bl	8007778 <HAL_RCC_GetPCLK2Freq>
 8008f34:	6378      	str	r0, [r7, #52]	@ 0x34
 8008f36:	f000 bf4c 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8008f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f3c:	2b01      	cmp	r3, #1
 8008f3e:	d104      	bne.n	8008f4a <HAL_RCCEx_GetPeriphCLKFreq+0x3de>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008f40:	f7fe faea 	bl	8007518 <HAL_RCC_GetSysClockFreq>
 8008f44:	6378      	str	r0, [r7, #52]	@ 0x34
 8008f46:	f000 bf44 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8008f4a:	4b5b      	ldr	r3, [pc, #364]	@ (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008f52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f56:	d106      	bne.n	8008f66 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 8008f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f5a:	2b02      	cmp	r3, #2
 8008f5c:	d103      	bne.n	8008f66 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
    {
      frequency = HSI_VALUE;
 8008f5e:	4b59      	ldr	r3, [pc, #356]	@ (80090c4 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8008f60:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f62:	f000 bf36 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8008f66:	4b54      	ldr	r3, [pc, #336]	@ (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8008f68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008f6c:	f003 0302 	and.w	r3, r3, #2
 8008f70:	2b02      	cmp	r3, #2
 8008f72:	d107      	bne.n	8008f84 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8008f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f76:	2b03      	cmp	r3, #3
 8008f78:	d104      	bne.n	8008f84 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
    {
      frequency = LSE_VALUE;
 8008f7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f80:	f000 bf27 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8008f84:	2300      	movs	r3, #0
 8008f86:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f88:	f000 bf23 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      frequency = 0U;
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8008f8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f90:	1f11      	subs	r1, r2, #4
 8008f92:	430b      	orrs	r3, r1
 8008f94:	d136      	bne.n	8009004 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8008f96:	4b48      	ldr	r3, [pc, #288]	@ (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8008f98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008f9c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008fa0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8008fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d104      	bne.n	8008fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008fa8:	f7fe fbd2 	bl	8007750 <HAL_RCC_GetPCLK1Freq>
 8008fac:	6378      	str	r0, [r7, #52]	@ 0x34
 8008fae:	f000 bf10 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8008fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fb4:	2b10      	cmp	r3, #16
 8008fb6:	d104      	bne.n	8008fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008fb8:	f7fe faae 	bl	8007518 <HAL_RCC_GetSysClockFreq>
 8008fbc:	6378      	str	r0, [r7, #52]	@ 0x34
 8008fbe:	f000 bf08 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8008fc2:	4b3d      	ldr	r3, [pc, #244]	@ (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008fca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008fce:	d106      	bne.n	8008fde <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8008fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fd2:	2b20      	cmp	r3, #32
 8008fd4:	d103      	bne.n	8008fde <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    {
      frequency = HSI_VALUE;
 8008fd6:	4b3b      	ldr	r3, [pc, #236]	@ (80090c4 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8008fd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fda:	f000 befa 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8008fde:	4b36      	ldr	r3, [pc, #216]	@ (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8008fe0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008fe4:	f003 0302 	and.w	r3, r3, #2
 8008fe8:	2b02      	cmp	r3, #2
 8008fea:	d107      	bne.n	8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x490>
 8008fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fee:	2b30      	cmp	r3, #48	@ 0x30
 8008ff0:	d104      	bne.n	8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x490>
    {
      frequency = LSE_VALUE;
 8008ff2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008ff6:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ff8:	f000 beeb 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	637b      	str	r3, [r7, #52]	@ 0x34
 8009000:	f000 bee7 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8009004:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009008:	f1a2 0108 	sub.w	r1, r2, #8
 800900c:	430b      	orrs	r3, r1
 800900e:	d136      	bne.n	800907e <HAL_RCCEx_GetPeriphCLKFreq+0x512>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8009010:	4b29      	ldr	r3, [pc, #164]	@ (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8009012:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009016:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800901a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800901c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800901e:	2b00      	cmp	r3, #0
 8009020:	d104      	bne.n	800902c <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009022:	f7fe fb95 	bl	8007750 <HAL_RCC_GetPCLK1Freq>
 8009026:	6378      	str	r0, [r7, #52]	@ 0x34
 8009028:	f000 bed3 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800902c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800902e:	2b40      	cmp	r3, #64	@ 0x40
 8009030:	d104      	bne.n	800903c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009032:	f7fe fa71 	bl	8007518 <HAL_RCC_GetSysClockFreq>
 8009036:	6378      	str	r0, [r7, #52]	@ 0x34
 8009038:	f000 becb 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800903c:	4b1e      	ldr	r3, [pc, #120]	@ (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009044:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009048:	d106      	bne.n	8009058 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 800904a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800904c:	2b80      	cmp	r3, #128	@ 0x80
 800904e:	d103      	bne.n	8009058 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
    {
      frequency = HSI_VALUE;
 8009050:	4b1c      	ldr	r3, [pc, #112]	@ (80090c4 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8009052:	637b      	str	r3, [r7, #52]	@ 0x34
 8009054:	f000 bebd 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8009058:	4b17      	ldr	r3, [pc, #92]	@ (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800905a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800905e:	f003 0302 	and.w	r3, r3, #2
 8009062:	2b02      	cmp	r3, #2
 8009064:	d107      	bne.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 8009066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009068:	2bc0      	cmp	r3, #192	@ 0xc0
 800906a:	d104      	bne.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {
      frequency = LSE_VALUE;
 800906c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009070:	637b      	str	r3, [r7, #52]	@ 0x34
 8009072:	f000 beae 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8009076:	2300      	movs	r3, #0
 8009078:	637b      	str	r3, [r7, #52]	@ 0x34
 800907a:	f000 beaa 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800907e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009082:	f1a2 0110 	sub.w	r1, r2, #16
 8009086:	430b      	orrs	r3, r1
 8009088:	d141      	bne.n	800910e <HAL_RCCEx_GetPeriphCLKFreq+0x5a2>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800908a:	4b0b      	ldr	r3, [pc, #44]	@ (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800908c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009090:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009094:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8009096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009098:	2b00      	cmp	r3, #0
 800909a:	d104      	bne.n	80090a6 <HAL_RCCEx_GetPeriphCLKFreq+0x53a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800909c:	f7fe fb58 	bl	8007750 <HAL_RCC_GetPCLK1Freq>
 80090a0:	6378      	str	r0, [r7, #52]	@ 0x34
 80090a2:	f000 be96 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 80090a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80090ac:	d10c      	bne.n	80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80090ae:	f7fe fa33 	bl	8007518 <HAL_RCC_GetSysClockFreq>
 80090b2:	6378      	str	r0, [r7, #52]	@ 0x34
 80090b4:	f000 be8d 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 80090b8:	46020c00 	.word	0x46020c00
 80090bc:	02dc6c00 	.word	0x02dc6c00
 80090c0:	080163b8 	.word	0x080163b8
 80090c4:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80090c8:	4baa      	ldr	r3, [pc, #680]	@ (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80090d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80090d4:	d107      	bne.n	80090e6 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 80090d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80090dc:	d103      	bne.n	80090e6 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 80090de:	4ba6      	ldr	r3, [pc, #664]	@ (8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 80090e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80090e2:	f000 be76 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80090e6:	4ba3      	ldr	r3, [pc, #652]	@ (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80090e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80090ec:	f003 0302 	and.w	r3, r3, #2
 80090f0:	2b02      	cmp	r3, #2
 80090f2:	d108      	bne.n	8009106 <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
 80090f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80090fa:	d104      	bne.n	8009106 <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
    {
      frequency = LSE_VALUE;
 80090fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009100:	637b      	str	r3, [r7, #52]	@ 0x34
 8009102:	f000 be66 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8009106:	2300      	movs	r3, #0
 8009108:	637b      	str	r3, [r7, #52]	@ 0x34
 800910a:	f000 be62 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800910e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009112:	f1a2 0120 	sub.w	r1, r2, #32
 8009116:	430b      	orrs	r3, r1
 8009118:	d158      	bne.n	80091cc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800911a:	4b96      	ldr	r3, [pc, #600]	@ (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800911c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009120:	f003 0307 	and.w	r3, r3, #7
 8009124:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8009126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009128:	2b00      	cmp	r3, #0
 800912a:	d104      	bne.n	8009136 <HAL_RCCEx_GetPeriphCLKFreq+0x5ca>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800912c:	f7fe fb38 	bl	80077a0 <HAL_RCC_GetPCLK3Freq>
 8009130:	6378      	str	r0, [r7, #52]	@ 0x34
 8009132:	f000 be4e 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8009136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009138:	2b01      	cmp	r3, #1
 800913a:	d104      	bne.n	8009146 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800913c:	f7fe f9ec 	bl	8007518 <HAL_RCC_GetSysClockFreq>
 8009140:	6378      	str	r0, [r7, #52]	@ 0x34
 8009142:	f000 be46 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8009146:	4b8b      	ldr	r3, [pc, #556]	@ (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800914e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009152:	d106      	bne.n	8009162 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8009154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009156:	2b02      	cmp	r3, #2
 8009158:	d103      	bne.n	8009162 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      frequency = HSI_VALUE;
 800915a:	4b87      	ldr	r3, [pc, #540]	@ (8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 800915c:	637b      	str	r3, [r7, #52]	@ 0x34
 800915e:	f000 be38 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8009162:	4b84      	ldr	r3, [pc, #528]	@ (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8009164:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009168:	f003 0302 	and.w	r3, r3, #2
 800916c:	2b02      	cmp	r3, #2
 800916e:	d107      	bne.n	8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8009170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009172:	2b03      	cmp	r3, #3
 8009174:	d104      	bne.n	8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
    {
      frequency = LSE_VALUE;
 8009176:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800917a:	637b      	str	r3, [r7, #52]	@ 0x34
 800917c:	f000 be29 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8009180:	4b7c      	ldr	r3, [pc, #496]	@ (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f003 0320 	and.w	r3, r3, #32
 8009188:	2b20      	cmp	r3, #32
 800918a:	d11b      	bne.n	80091c4 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 800918c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800918e:	2b04      	cmp	r3, #4
 8009190:	d118      	bne.n	80091c4 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009192:	4b78      	ldr	r3, [pc, #480]	@ (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8009194:	689b      	ldr	r3, [r3, #8]
 8009196:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800919a:	2b00      	cmp	r3, #0
 800919c:	d005      	beq.n	80091aa <HAL_RCCEx_GetPeriphCLKFreq+0x63e>
 800919e:	4b75      	ldr	r3, [pc, #468]	@ (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80091a0:	689b      	ldr	r3, [r3, #8]
 80091a2:	0e1b      	lsrs	r3, r3, #24
 80091a4:	f003 030f 	and.w	r3, r3, #15
 80091a8:	e006      	b.n	80091b8 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80091aa:	4b72      	ldr	r3, [pc, #456]	@ (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80091ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80091b0:	041b      	lsls	r3, r3, #16
 80091b2:	0e1b      	lsrs	r3, r3, #24
 80091b4:	f003 030f 	and.w	r3, r3, #15
 80091b8:	4a70      	ldr	r2, [pc, #448]	@ (800937c <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 80091ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091be:	637b      	str	r3, [r7, #52]	@ 0x34
 80091c0:	f000 be07 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 80091c4:	2300      	movs	r3, #0
 80091c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80091c8:	f000 be03 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 80091cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091d0:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80091d4:	430b      	orrs	r3, r1
 80091d6:	d16c      	bne.n	80092b2 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80091d8:	4b66      	ldr	r3, [pc, #408]	@ (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80091da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80091de:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80091e2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80091e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80091ea:	d104      	bne.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80091ec:	f7fe f994 	bl	8007518 <HAL_RCC_GetSysClockFreq>
 80091f0:	6378      	str	r0, [r7, #52]	@ 0x34
 80091f2:	f000 bdee 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 80091f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80091fc:	d108      	bne.n	8009210 <HAL_RCCEx_GetPeriphCLKFreq+0x6a4>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091fe:	f107 0318 	add.w	r3, r7, #24
 8009202:	4618      	mov	r0, r3
 8009204:	f7ff f9fe 	bl	8008604 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8009208:	6a3b      	ldr	r3, [r7, #32]
 800920a:	637b      	str	r3, [r7, #52]	@ 0x34
 800920c:	f000 bde1 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8009210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009212:	2b00      	cmp	r3, #0
 8009214:	d104      	bne.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8009216:	f7fe fa81 	bl	800771c <HAL_RCC_GetHCLKFreq>
 800921a:	6378      	str	r0, [r7, #52]	@ 0x34
 800921c:	f000 bdd9 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8009220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009222:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8009226:	d122      	bne.n	800926e <HAL_RCCEx_GetPeriphCLKFreq+0x702>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009228:	4b52      	ldr	r3, [pc, #328]	@ (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f003 0320 	and.w	r3, r3, #32
 8009230:	2b20      	cmp	r3, #32
 8009232:	d118      	bne.n	8009266 <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009234:	4b4f      	ldr	r3, [pc, #316]	@ (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8009236:	689b      	ldr	r3, [r3, #8]
 8009238:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800923c:	2b00      	cmp	r3, #0
 800923e:	d005      	beq.n	800924c <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8009240:	4b4c      	ldr	r3, [pc, #304]	@ (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8009242:	689b      	ldr	r3, [r3, #8]
 8009244:	0e1b      	lsrs	r3, r3, #24
 8009246:	f003 030f 	and.w	r3, r3, #15
 800924a:	e006      	b.n	800925a <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 800924c:	4b49      	ldr	r3, [pc, #292]	@ (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800924e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009252:	041b      	lsls	r3, r3, #16
 8009254:	0e1b      	lsrs	r3, r3, #24
 8009256:	f003 030f 	and.w	r3, r3, #15
 800925a:	4a48      	ldr	r2, [pc, #288]	@ (800937c <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 800925c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009260:	637b      	str	r3, [r7, #52]	@ 0x34
 8009262:	f000 bdb6 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = 0U;
 8009266:	2300      	movs	r3, #0
 8009268:	637b      	str	r3, [r7, #52]	@ 0x34
 800926a:	f000 bdb2 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800926e:	4b41      	ldr	r3, [pc, #260]	@ (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009276:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800927a:	d107      	bne.n	800928c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800927c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800927e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009282:	d103      	bne.n	800928c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
    {
      frequency = HSE_VALUE;
 8009284:	4b3c      	ldr	r3, [pc, #240]	@ (8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8009286:	637b      	str	r3, [r7, #52]	@ 0x34
 8009288:	f000 bda3 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800928c:	4b39      	ldr	r3, [pc, #228]	@ (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009294:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009298:	d107      	bne.n	80092aa <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
 800929a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800929c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80092a0:	d103      	bne.n	80092aa <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
    {
      frequency = HSI_VALUE;
 80092a2:	4b35      	ldr	r3, [pc, #212]	@ (8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 80092a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80092a6:	f000 bd94 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 80092aa:	2300      	movs	r3, #0
 80092ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80092ae:	f000 bd90 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 80092b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092b6:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80092ba:	430b      	orrs	r3, r1
 80092bc:	d160      	bne.n	8009380 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 80092be:	4b2d      	ldr	r3, [pc, #180]	@ (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80092c0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80092c4:	f003 0307 	and.w	r3, r3, #7
 80092c8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80092ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092cc:	2b04      	cmp	r3, #4
 80092ce:	d84c      	bhi.n	800936a <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 80092d0:	a201      	add	r2, pc, #4	@ (adr r2, 80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 80092d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092d6:	bf00      	nop
 80092d8:	08009311 	.word	0x08009311
 80092dc:	080092ed 	.word	0x080092ed
 80092e0:	080092ff 	.word	0x080092ff
 80092e4:	0800931b 	.word	0x0800931b
 80092e8:	08009325 	.word	0x08009325
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80092ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80092f0:	4618      	mov	r0, r3
 80092f2:	f7ff f82d 	bl	8008350 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80092f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092f8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80092fa:	f000 bd6a 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80092fe:	f107 030c 	add.w	r3, r7, #12
 8009302:	4618      	mov	r0, r3
 8009304:	f7ff fad8 	bl	80088b8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800930c:	f000 bd61 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8009310:	f7fe fa04 	bl	800771c <HAL_RCC_GetHCLKFreq>
 8009314:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009316:	f000 bd5c 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800931a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800931e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009320:	f000 bd57 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009324:	4b13      	ldr	r3, [pc, #76]	@ (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f003 0320 	and.w	r3, r3, #32
 800932c:	2b20      	cmp	r3, #32
 800932e:	d118      	bne.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009330:	4b10      	ldr	r3, [pc, #64]	@ (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8009332:	689b      	ldr	r3, [r3, #8]
 8009334:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009338:	2b00      	cmp	r3, #0
 800933a:	d005      	beq.n	8009348 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 800933c:	4b0d      	ldr	r3, [pc, #52]	@ (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800933e:	689b      	ldr	r3, [r3, #8]
 8009340:	0e1b      	lsrs	r3, r3, #24
 8009342:	f003 030f 	and.w	r3, r3, #15
 8009346:	e006      	b.n	8009356 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 8009348:	4b0a      	ldr	r3, [pc, #40]	@ (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800934a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800934e:	041b      	lsls	r3, r3, #16
 8009350:	0e1b      	lsrs	r3, r3, #24
 8009352:	f003 030f 	and.w	r3, r3, #15
 8009356:	4a09      	ldr	r2, [pc, #36]	@ (800937c <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8009358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800935c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800935e:	f000 bd38 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8009362:	2300      	movs	r3, #0
 8009364:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009366:	f000 bd34 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 800936a:	2300      	movs	r3, #0
 800936c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800936e:	f000 bd30 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8009372:	bf00      	nop
 8009374:	46020c00 	.word	0x46020c00
 8009378:	00f42400 	.word	0x00f42400
 800937c:	080163b8 	.word	0x080163b8
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8009380:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009384:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8009388:	430b      	orrs	r3, r1
 800938a:	d167      	bne.n	800945c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800938c:	4ba0      	ldr	r3, [pc, #640]	@ (8009610 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800938e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009392:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8009396:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8009398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800939a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800939e:	d036      	beq.n	800940e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80093a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093a2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80093a6:	d855      	bhi.n	8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 80093a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093aa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80093ae:	d029      	beq.n	8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
 80093b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093b2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80093b6:	d84d      	bhi.n	8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 80093b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80093be:	d013      	beq.n	80093e8 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 80093c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80093c6:	d845      	bhi.n	8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 80093c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d015      	beq.n	80093fa <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
 80093ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80093d4:	d13e      	bne.n	8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80093d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80093da:	4618      	mov	r0, r3
 80093dc:	f7fe ffb8 	bl	8008350 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80093e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093e2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80093e4:	f000 bcf5 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80093e8:	f107 030c 	add.w	r3, r7, #12
 80093ec:	4618      	mov	r0, r3
 80093ee:	f7ff fa63 	bl	80088b8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80093f2:	693b      	ldr	r3, [r7, #16]
 80093f4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80093f6:	f000 bcec 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80093fa:	f7fe f98f 	bl	800771c <HAL_RCC_GetHCLKFreq>
 80093fe:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009400:	f000 bce7 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8009404:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8009408:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800940a:	f000 bce2 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800940e:	4b80      	ldr	r3, [pc, #512]	@ (8009610 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f003 0320 	and.w	r3, r3, #32
 8009416:	2b20      	cmp	r3, #32
 8009418:	d118      	bne.n	800944c <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800941a:	4b7d      	ldr	r3, [pc, #500]	@ (8009610 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800941c:	689b      	ldr	r3, [r3, #8]
 800941e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009422:	2b00      	cmp	r3, #0
 8009424:	d005      	beq.n	8009432 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 8009426:	4b7a      	ldr	r3, [pc, #488]	@ (8009610 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8009428:	689b      	ldr	r3, [r3, #8]
 800942a:	0e1b      	lsrs	r3, r3, #24
 800942c:	f003 030f 	and.w	r3, r3, #15
 8009430:	e006      	b.n	8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
 8009432:	4b77      	ldr	r3, [pc, #476]	@ (8009610 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8009434:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009438:	041b      	lsls	r3, r3, #16
 800943a:	0e1b      	lsrs	r3, r3, #24
 800943c:	f003 030f 	and.w	r3, r3, #15
 8009440:	4a74      	ldr	r2, [pc, #464]	@ (8009614 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 8009442:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009446:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009448:	f000 bcc3 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 800944c:	2300      	movs	r3, #0
 800944e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009450:	f000 bcbf 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8009454:	2300      	movs	r3, #0
 8009456:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009458:	f000 bcbb 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800945c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009460:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8009464:	430b      	orrs	r3, r1
 8009466:	d14c      	bne.n	8009502 <HAL_RCCEx_GetPeriphCLKFreq+0x996>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8009468:	4b69      	ldr	r3, [pc, #420]	@ (8009610 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800946a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800946e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009472:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8009474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009476:	2b00      	cmp	r3, #0
 8009478:	d104      	bne.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800947a:	f7fe f969 	bl	8007750 <HAL_RCC_GetPCLK1Freq>
 800947e:	6378      	str	r0, [r7, #52]	@ 0x34
 8009480:	f000 bca7 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8009484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009486:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800948a:	d104      	bne.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x92a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800948c:	f7fe f844 	bl	8007518 <HAL_RCC_GetSysClockFreq>
 8009490:	6378      	str	r0, [r7, #52]	@ 0x34
 8009492:	f000 bc9e 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8009496:	4b5e      	ldr	r3, [pc, #376]	@ (8009610 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800949e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80094a2:	d107      	bne.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
 80094a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80094aa:	d103      	bne.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
    {
      frequency = HSI_VALUE;
 80094ac:	4b5a      	ldr	r3, [pc, #360]	@ (8009618 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80094ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80094b0:	f000 bc8f 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 80094b4:	4b56      	ldr	r3, [pc, #344]	@ (8009610 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f003 0320 	and.w	r3, r3, #32
 80094bc:	2b20      	cmp	r3, #32
 80094be:	d11c      	bne.n	80094fa <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
 80094c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094c2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80094c6:	d118      	bne.n	80094fa <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80094c8:	4b51      	ldr	r3, [pc, #324]	@ (8009610 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80094ca:	689b      	ldr	r3, [r3, #8]
 80094cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d005      	beq.n	80094e0 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
 80094d4:	4b4e      	ldr	r3, [pc, #312]	@ (8009610 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80094d6:	689b      	ldr	r3, [r3, #8]
 80094d8:	0e1b      	lsrs	r3, r3, #24
 80094da:	f003 030f 	and.w	r3, r3, #15
 80094de:	e006      	b.n	80094ee <HAL_RCCEx_GetPeriphCLKFreq+0x982>
 80094e0:	4b4b      	ldr	r3, [pc, #300]	@ (8009610 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80094e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80094e6:	041b      	lsls	r3, r3, #16
 80094e8:	0e1b      	lsrs	r3, r3, #24
 80094ea:	f003 030f 	and.w	r3, r3, #15
 80094ee:	4a49      	ldr	r2, [pc, #292]	@ (8009614 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 80094f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80094f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80094f6:	f000 bc6c 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 80094fa:	2300      	movs	r3, #0
 80094fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80094fe:	f000 bc68 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8009502:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009506:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 800950a:	430b      	orrs	r3, r1
 800950c:	d14c      	bne.n	80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800950e:	4b40      	ldr	r3, [pc, #256]	@ (8009610 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8009510:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009514:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8009518:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800951a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800951c:	2b00      	cmp	r3, #0
 800951e:	d104      	bne.n	800952a <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009520:	f7fe f916 	bl	8007750 <HAL_RCC_GetPCLK1Freq>
 8009524:	6378      	str	r0, [r7, #52]	@ 0x34
 8009526:	f000 bc54 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800952a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800952c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009530:	d104      	bne.n	800953c <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009532:	f7fd fff1 	bl	8007518 <HAL_RCC_GetSysClockFreq>
 8009536:	6378      	str	r0, [r7, #52]	@ 0x34
 8009538:	f000 bc4b 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800953c:	4b34      	ldr	r3, [pc, #208]	@ (8009610 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009544:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009548:	d107      	bne.n	800955a <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
 800954a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800954c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009550:	d103      	bne.n	800955a <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HSI_VALUE;
 8009552:	4b31      	ldr	r3, [pc, #196]	@ (8009618 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8009554:	637b      	str	r3, [r7, #52]	@ 0x34
 8009556:	f000 bc3c 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800955a:	4b2d      	ldr	r3, [pc, #180]	@ (8009610 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f003 0320 	and.w	r3, r3, #32
 8009562:	2b20      	cmp	r3, #32
 8009564:	d11c      	bne.n	80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa34>
 8009566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009568:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800956c:	d118      	bne.n	80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa34>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800956e:	4b28      	ldr	r3, [pc, #160]	@ (8009610 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8009570:	689b      	ldr	r3, [r3, #8]
 8009572:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009576:	2b00      	cmp	r3, #0
 8009578:	d005      	beq.n	8009586 <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 800957a:	4b25      	ldr	r3, [pc, #148]	@ (8009610 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800957c:	689b      	ldr	r3, [r3, #8]
 800957e:	0e1b      	lsrs	r3, r3, #24
 8009580:	f003 030f 	and.w	r3, r3, #15
 8009584:	e006      	b.n	8009594 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>
 8009586:	4b22      	ldr	r3, [pc, #136]	@ (8009610 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8009588:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800958c:	041b      	lsls	r3, r3, #16
 800958e:	0e1b      	lsrs	r3, r3, #24
 8009590:	f003 030f 	and.w	r3, r3, #15
 8009594:	4a1f      	ldr	r2, [pc, #124]	@ (8009614 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 8009596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800959a:	637b      	str	r3, [r7, #52]	@ 0x34
 800959c:	f000 bc19 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 80095a0:	2300      	movs	r3, #0
 80095a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80095a4:	f000 bc15 	b.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 80095a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095ac:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80095b0:	430b      	orrs	r3, r1
 80095b2:	d157      	bne.n	8009664 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80095b4:	4b16      	ldr	r3, [pc, #88]	@ (8009610 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80095b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80095ba:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80095be:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80095c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80095c4:	d02a      	beq.n	800961c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 80095c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095c8:	2bc0      	cmp	r3, #192	@ 0xc0
 80095ca:	d848      	bhi.n	800965e <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 80095cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095ce:	2b80      	cmp	r3, #128	@ 0x80
 80095d0:	d00d      	beq.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80095d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095d4:	2b80      	cmp	r3, #128	@ 0x80
 80095d6:	d842      	bhi.n	800965e <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 80095d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d003      	beq.n	80095e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa7a>
 80095de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095e0:	2b40      	cmp	r3, #64	@ 0x40
 80095e2:	d011      	beq.n	8009608 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80095e4:	e03b      	b.n	800965e <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 80095e6:	f7fe f8db 	bl	80077a0 <HAL_RCC_GetPCLK3Freq>
 80095ea:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80095ec:	e3f1      	b.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80095ee:	4b08      	ldr	r3, [pc, #32]	@ (8009610 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80095f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80095fa:	d102      	bne.n	8009602 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSI_VALUE;
 80095fc:	4b06      	ldr	r3, [pc, #24]	@ (8009618 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80095fe:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009600:	e3e7      	b.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8009602:	2300      	movs	r3, #0
 8009604:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009606:	e3e4      	b.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8009608:	f7fd ff86 	bl	8007518 <HAL_RCC_GetSysClockFreq>
 800960c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800960e:	e3e0      	b.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8009610:	46020c00 	.word	0x46020c00
 8009614:	080163b8 	.word	0x080163b8
 8009618:	00f42400 	.word	0x00f42400
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800961c:	4ba3      	ldr	r3, [pc, #652]	@ (80098ac <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f003 0320 	and.w	r3, r3, #32
 8009624:	2b20      	cmp	r3, #32
 8009626:	d117      	bne.n	8009658 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009628:	4ba0      	ldr	r3, [pc, #640]	@ (80098ac <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800962a:	689b      	ldr	r3, [r3, #8]
 800962c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009630:	2b00      	cmp	r3, #0
 8009632:	d005      	beq.n	8009640 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>
 8009634:	4b9d      	ldr	r3, [pc, #628]	@ (80098ac <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8009636:	689b      	ldr	r3, [r3, #8]
 8009638:	0e1b      	lsrs	r3, r3, #24
 800963a:	f003 030f 	and.w	r3, r3, #15
 800963e:	e006      	b.n	800964e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
 8009640:	4b9a      	ldr	r3, [pc, #616]	@ (80098ac <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8009642:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009646:	041b      	lsls	r3, r3, #16
 8009648:	0e1b      	lsrs	r3, r3, #24
 800964a:	f003 030f 	and.w	r3, r3, #15
 800964e:	4a98      	ldr	r2, [pc, #608]	@ (80098b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8009650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009654:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009656:	e3bc      	b.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8009658:	2300      	movs	r3, #0
 800965a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800965c:	e3b9      	b.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      default:
      {
        frequency = 0U;
 800965e:	2300      	movs	r3, #0
 8009660:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009662:	e3b6      	b.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8009664:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009668:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 800966c:	430b      	orrs	r3, r1
 800966e:	d147      	bne.n	8009700 <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8009670:	4b8e      	ldr	r3, [pc, #568]	@ (80098ac <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8009672:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009676:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800967a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800967c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800967e:	2b00      	cmp	r3, #0
 8009680:	d103      	bne.n	800968a <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009682:	f7fe f865 	bl	8007750 <HAL_RCC_GetPCLK1Freq>
 8009686:	6378      	str	r0, [r7, #52]	@ 0x34
 8009688:	e3a3      	b.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800968a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800968c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009690:	d103      	bne.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0xb2e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009692:	f7fd ff41 	bl	8007518 <HAL_RCC_GetSysClockFreq>
 8009696:	6378      	str	r0, [r7, #52]	@ 0x34
 8009698:	e39b      	b.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800969a:	4b84      	ldr	r3, [pc, #528]	@ (80098ac <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80096a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80096a6:	d106      	bne.n	80096b6 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 80096a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80096ae:	d102      	bne.n	80096b6 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
    {
      frequency = HSI_VALUE;
 80096b0:	4b80      	ldr	r3, [pc, #512]	@ (80098b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 80096b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80096b4:	e38d      	b.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 80096b6:	4b7d      	ldr	r3, [pc, #500]	@ (80098ac <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f003 0320 	and.w	r3, r3, #32
 80096be:	2b20      	cmp	r3, #32
 80096c0:	d11b      	bne.n	80096fa <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
 80096c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096c4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80096c8:	d117      	bne.n	80096fa <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80096ca:	4b78      	ldr	r3, [pc, #480]	@ (80098ac <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80096cc:	689b      	ldr	r3, [r3, #8]
 80096ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d005      	beq.n	80096e2 <HAL_RCCEx_GetPeriphCLKFreq+0xb76>
 80096d6:	4b75      	ldr	r3, [pc, #468]	@ (80098ac <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80096d8:	689b      	ldr	r3, [r3, #8]
 80096da:	0e1b      	lsrs	r3, r3, #24
 80096dc:	f003 030f 	and.w	r3, r3, #15
 80096e0:	e006      	b.n	80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 80096e2:	4b72      	ldr	r3, [pc, #456]	@ (80098ac <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80096e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80096e8:	041b      	lsls	r3, r3, #16
 80096ea:	0e1b      	lsrs	r3, r3, #24
 80096ec:	f003 030f 	and.w	r3, r3, #15
 80096f0:	4a6f      	ldr	r2, [pc, #444]	@ (80098b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 80096f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80096f8:	e36b      	b.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 80096fa:	2300      	movs	r3, #0
 80096fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80096fe:	e368      	b.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8009700:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009704:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8009708:	430b      	orrs	r3, r1
 800970a:	d164      	bne.n	80097d6 <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800970c:	4b67      	ldr	r3, [pc, #412]	@ (80098ac <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800970e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009712:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009716:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8009718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800971a:	2b00      	cmp	r3, #0
 800971c:	d120      	bne.n	8009760 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800971e:	4b63      	ldr	r3, [pc, #396]	@ (80098ac <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f003 0320 	and.w	r3, r3, #32
 8009726:	2b20      	cmp	r3, #32
 8009728:	d117      	bne.n	800975a <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800972a:	4b60      	ldr	r3, [pc, #384]	@ (80098ac <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800972c:	689b      	ldr	r3, [r3, #8]
 800972e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009732:	2b00      	cmp	r3, #0
 8009734:	d005      	beq.n	8009742 <HAL_RCCEx_GetPeriphCLKFreq+0xbd6>
 8009736:	4b5d      	ldr	r3, [pc, #372]	@ (80098ac <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8009738:	689b      	ldr	r3, [r3, #8]
 800973a:	0e1b      	lsrs	r3, r3, #24
 800973c:	f003 030f 	and.w	r3, r3, #15
 8009740:	e006      	b.n	8009750 <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
 8009742:	4b5a      	ldr	r3, [pc, #360]	@ (80098ac <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8009744:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009748:	041b      	lsls	r3, r3, #16
 800974a:	0e1b      	lsrs	r3, r3, #24
 800974c:	f003 030f 	and.w	r3, r3, #15
 8009750:	4a57      	ldr	r2, [pc, #348]	@ (80098b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8009752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009756:	637b      	str	r3, [r7, #52]	@ 0x34
 8009758:	e33b      	b.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = 0U;
 800975a:	2300      	movs	r3, #0
 800975c:	637b      	str	r3, [r7, #52]	@ 0x34
 800975e:	e338      	b.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8009760:	4b52      	ldr	r3, [pc, #328]	@ (80098ac <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8009762:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009766:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800976a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800976e:	d112      	bne.n	8009796 <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
 8009770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009772:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009776:	d10e      	bne.n	8009796 <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009778:	4b4c      	ldr	r3, [pc, #304]	@ (80098ac <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800977a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800977e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009782:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009786:	d102      	bne.n	800978e <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
      {
        frequency = LSI_VALUE / 128U;
 8009788:	23fa      	movs	r3, #250	@ 0xfa
 800978a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800978c:	e321      	b.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 800978e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009792:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009794:	e31d      	b.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8009796:	4b45      	ldr	r3, [pc, #276]	@ (80098ac <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800979e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80097a2:	d106      	bne.n	80097b2 <HAL_RCCEx_GetPeriphCLKFreq+0xc46>
 80097a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80097aa:	d102      	bne.n	80097b2 <HAL_RCCEx_GetPeriphCLKFreq+0xc46>
    {
      frequency = HSI_VALUE;
 80097ac:	4b41      	ldr	r3, [pc, #260]	@ (80098b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 80097ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80097b0:	e30f      	b.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 80097b2:	4b3e      	ldr	r3, [pc, #248]	@ (80098ac <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80097b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80097b8:	f003 0302 	and.w	r3, r3, #2
 80097bc:	2b02      	cmp	r3, #2
 80097be:	d107      	bne.n	80097d0 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 80097c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80097c6:	d103      	bne.n	80097d0 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = LSE_VALUE;
 80097c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80097cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80097ce:	e300      	b.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 80097d0:	2300      	movs	r3, #0
 80097d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80097d4:	e2fd      	b.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 80097d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097da:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80097de:	430b      	orrs	r3, r1
 80097e0:	d16a      	bne.n	80098b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80097e2:	4b32      	ldr	r3, [pc, #200]	@ (80098ac <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80097e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80097e8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80097ec:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 80097ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d120      	bne.n	8009836 <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80097f4:	4b2d      	ldr	r3, [pc, #180]	@ (80098ac <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f003 0320 	and.w	r3, r3, #32
 80097fc:	2b20      	cmp	r3, #32
 80097fe:	d117      	bne.n	8009830 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009800:	4b2a      	ldr	r3, [pc, #168]	@ (80098ac <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8009802:	689b      	ldr	r3, [r3, #8]
 8009804:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009808:	2b00      	cmp	r3, #0
 800980a:	d005      	beq.n	8009818 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800980c:	4b27      	ldr	r3, [pc, #156]	@ (80098ac <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800980e:	689b      	ldr	r3, [r3, #8]
 8009810:	0e1b      	lsrs	r3, r3, #24
 8009812:	f003 030f 	and.w	r3, r3, #15
 8009816:	e006      	b.n	8009826 <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 8009818:	4b24      	ldr	r3, [pc, #144]	@ (80098ac <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800981a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800981e:	041b      	lsls	r3, r3, #16
 8009820:	0e1b      	lsrs	r3, r3, #24
 8009822:	f003 030f 	and.w	r3, r3, #15
 8009826:	4a22      	ldr	r2, [pc, #136]	@ (80098b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8009828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800982c:	637b      	str	r3, [r7, #52]	@ 0x34
 800982e:	e2d0      	b.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = 0U;
 8009830:	2300      	movs	r3, #0
 8009832:	637b      	str	r3, [r7, #52]	@ 0x34
 8009834:	e2cd      	b.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8009836:	4b1d      	ldr	r3, [pc, #116]	@ (80098ac <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8009838:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800983c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009840:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009844:	d112      	bne.n	800986c <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 8009846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009848:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800984c:	d10e      	bne.n	800986c <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800984e:	4b17      	ldr	r3, [pc, #92]	@ (80098ac <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8009850:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009854:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009858:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800985c:	d102      	bne.n	8009864 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 800985e:	23fa      	movs	r3, #250	@ 0xfa
 8009860:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009862:	e2b6      	b.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8009864:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009868:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800986a:	e2b2      	b.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800986c:	4b0f      	ldr	r3, [pc, #60]	@ (80098ac <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009874:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009878:	d106      	bne.n	8009888 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 800987a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800987c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009880:	d102      	bne.n	8009888 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 8009882:	4b0c      	ldr	r3, [pc, #48]	@ (80098b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 8009884:	637b      	str	r3, [r7, #52]	@ 0x34
 8009886:	e2a4      	b.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8009888:	4b08      	ldr	r3, [pc, #32]	@ (80098ac <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800988a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800988e:	f003 0302 	and.w	r3, r3, #2
 8009892:	2b02      	cmp	r3, #2
 8009894:	d107      	bne.n	80098a6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8009896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009898:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800989c:	d103      	bne.n	80098a6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 800989e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80098a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80098a4:	e295      	b.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 80098a6:	2300      	movs	r3, #0
 80098a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80098aa:	e292      	b.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 80098ac:	46020c00 	.word	0x46020c00
 80098b0:	080163b8 	.word	0x080163b8
 80098b4:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 80098b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80098bc:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80098c0:	430b      	orrs	r3, r1
 80098c2:	d147      	bne.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80098c4:	4b9a      	ldr	r3, [pc, #616]	@ (8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80098c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80098ca:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80098ce:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 80098d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d103      	bne.n	80098de <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80098d6:	f7fd ff3b 	bl	8007750 <HAL_RCC_GetPCLK1Freq>
 80098da:	6378      	str	r0, [r7, #52]	@ 0x34
 80098dc:	e279      	b.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 80098de:	4b94      	ldr	r3, [pc, #592]	@ (8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80098e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80098e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80098e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80098ec:	d112      	bne.n	8009914 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
 80098ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098f0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80098f4:	d10e      	bne.n	8009914 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80098f6:	4b8e      	ldr	r3, [pc, #568]	@ (8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80098f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80098fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009900:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009904:	d102      	bne.n	800990c <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
      {
        frequency = LSI_VALUE / 128U;
 8009906:	23fa      	movs	r3, #250	@ 0xfa
 8009908:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800990a:	e262      	b.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 800990c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009910:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009912:	e25e      	b.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8009914:	4b86      	ldr	r3, [pc, #536]	@ (8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800991c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009920:	d106      	bne.n	8009930 <HAL_RCCEx_GetPeriphCLKFreq+0xdc4>
 8009922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009924:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009928:	d102      	bne.n	8009930 <HAL_RCCEx_GetPeriphCLKFreq+0xdc4>
    {
      frequency = HSI_VALUE;
 800992a:	4b82      	ldr	r3, [pc, #520]	@ (8009b34 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 800992c:	637b      	str	r3, [r7, #52]	@ 0x34
 800992e:	e250      	b.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8009930:	4b7f      	ldr	r3, [pc, #508]	@ (8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8009932:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009936:	f003 0302 	and.w	r3, r3, #2
 800993a:	2b02      	cmp	r3, #2
 800993c:	d107      	bne.n	800994e <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
 800993e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009940:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8009944:	d103      	bne.n	800994e <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
    {
      frequency = LSE_VALUE;
 8009946:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800994a:	637b      	str	r3, [r7, #52]	@ 0x34
 800994c:	e241      	b.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800994e:	2300      	movs	r3, #0
 8009950:	637b      	str	r3, [r7, #52]	@ 0x34
 8009952:	e23e      	b.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8009954:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009958:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 800995c:	430b      	orrs	r3, r1
 800995e:	d12d      	bne.n	80099bc <HAL_RCCEx_GetPeriphCLKFreq+0xe50>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8009960:	4b73      	ldr	r3, [pc, #460]	@ (8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8009962:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009966:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800996a:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800996c:	4b70      	ldr	r3, [pc, #448]	@ (8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009974:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009978:	d105      	bne.n	8009986 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 800997a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800997c:	2b00      	cmp	r3, #0
 800997e:	d102      	bne.n	8009986 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
    {
      frequency = HSE_VALUE;
 8009980:	4b6c      	ldr	r3, [pc, #432]	@ (8009b34 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8009982:	637b      	str	r3, [r7, #52]	@ 0x34
 8009984:	e225      	b.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8009986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009988:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800998c:	d107      	bne.n	800999e <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800998e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009992:	4618      	mov	r0, r3
 8009994:	f7fe fcdc 	bl	8008350 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8009998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800999a:	637b      	str	r3, [r7, #52]	@ 0x34
 800999c:	e219      	b.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800999e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099a0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80099a4:	d107      	bne.n	80099b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80099a6:	f107 0318 	add.w	r3, r7, #24
 80099aa:	4618      	mov	r0, r3
 80099ac:	f7fe fe2a 	bl	8008604 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 80099b0:	69bb      	ldr	r3, [r7, #24]
 80099b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80099b4:	e20d      	b.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 80099b6:	2300      	movs	r3, #0
 80099b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80099ba:	e20a      	b.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 80099bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80099c0:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 80099c4:	430b      	orrs	r3, r1
 80099c6:	d156      	bne.n	8009a76 <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80099c8:	4b59      	ldr	r3, [pc, #356]	@ (8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80099ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80099ce:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80099d2:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80099d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099d6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80099da:	d028      	beq.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xec2>
 80099dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099de:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80099e2:	d845      	bhi.n	8009a70 <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
 80099e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099e6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80099ea:	d013      	beq.n	8009a14 <HAL_RCCEx_GetPeriphCLKFreq+0xea8>
 80099ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80099f2:	d83d      	bhi.n	8009a70 <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
 80099f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d004      	beq.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0xe98>
 80099fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009a00:	d004      	beq.n	8009a0c <HAL_RCCEx_GetPeriphCLKFreq+0xea0>
 8009a02:	e035      	b.n	8009a70 <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8009a04:	f7fd feb8 	bl	8007778 <HAL_RCC_GetPCLK2Freq>
 8009a08:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009a0a:	e1e2      	b.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009a0c:	f7fd fd84 	bl	8007518 <HAL_RCC_GetSysClockFreq>
 8009a10:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009a12:	e1de      	b.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009a14:	4b46      	ldr	r3, [pc, #280]	@ (8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009a1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a20:	d102      	bne.n	8009a28 <HAL_RCCEx_GetPeriphCLKFreq+0xebc>
        {
          frequency = HSI_VALUE;
 8009a22:	4b44      	ldr	r3, [pc, #272]	@ (8009b34 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8009a24:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009a26:	e1d4      	b.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8009a28:	2300      	movs	r3, #0
 8009a2a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009a2c:	e1d1      	b.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009a2e:	4b40      	ldr	r3, [pc, #256]	@ (8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f003 0320 	and.w	r3, r3, #32
 8009a36:	2b20      	cmp	r3, #32
 8009a38:	d117      	bne.n	8009a6a <HAL_RCCEx_GetPeriphCLKFreq+0xefe>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009a3a:	4b3d      	ldr	r3, [pc, #244]	@ (8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8009a3c:	689b      	ldr	r3, [r3, #8]
 8009a3e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d005      	beq.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xee6>
 8009a46:	4b3a      	ldr	r3, [pc, #232]	@ (8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8009a48:	689b      	ldr	r3, [r3, #8]
 8009a4a:	0e1b      	lsrs	r3, r3, #24
 8009a4c:	f003 030f 	and.w	r3, r3, #15
 8009a50:	e006      	b.n	8009a60 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 8009a52:	4b37      	ldr	r3, [pc, #220]	@ (8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8009a54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009a58:	041b      	lsls	r3, r3, #16
 8009a5a:	0e1b      	lsrs	r3, r3, #24
 8009a5c:	f003 030f 	and.w	r3, r3, #15
 8009a60:	4a35      	ldr	r2, [pc, #212]	@ (8009b38 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>)
 8009a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a66:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009a68:	e1b3      	b.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009a6e:	e1b0      	b.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8009a70:	2300      	movs	r3, #0
 8009a72:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009a74:	e1ad      	b.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8009a76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a7a:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8009a7e:	430b      	orrs	r3, r1
 8009a80:	d15c      	bne.n	8009b3c <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8009a82:	4b2b      	ldr	r3, [pc, #172]	@ (8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8009a84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009a88:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009a8c:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8009a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a90:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009a94:	d028      	beq.n	8009ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xf7c>
 8009a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a98:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009a9c:	d845      	bhi.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 8009a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aa0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009aa4:	d013      	beq.n	8009ace <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
 8009aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aa8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009aac:	d83d      	bhi.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 8009aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d004      	beq.n	8009abe <HAL_RCCEx_GetPeriphCLKFreq+0xf52>
 8009ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ab6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009aba:	d004      	beq.n	8009ac6 <HAL_RCCEx_GetPeriphCLKFreq+0xf5a>
 8009abc:	e035      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8009abe:	f7fd fe47 	bl	8007750 <HAL_RCC_GetPCLK1Freq>
 8009ac2:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009ac4:	e185      	b.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009ac6:	f7fd fd27 	bl	8007518 <HAL_RCC_GetSysClockFreq>
 8009aca:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009acc:	e181      	b.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009ace:	4b18      	ldr	r3, [pc, #96]	@ (8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009ad6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009ada:	d102      	bne.n	8009ae2 <HAL_RCCEx_GetPeriphCLKFreq+0xf76>
        {
          frequency = HSI_VALUE;
 8009adc:	4b15      	ldr	r3, [pc, #84]	@ (8009b34 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8009ade:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009ae0:	e177      	b.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009ae6:	e174      	b.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009ae8:	4b11      	ldr	r3, [pc, #68]	@ (8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f003 0320 	and.w	r3, r3, #32
 8009af0:	2b20      	cmp	r3, #32
 8009af2:	d117      	bne.n	8009b24 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009af4:	4b0e      	ldr	r3, [pc, #56]	@ (8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8009af6:	689b      	ldr	r3, [r3, #8]
 8009af8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d005      	beq.n	8009b0c <HAL_RCCEx_GetPeriphCLKFreq+0xfa0>
 8009b00:	4b0b      	ldr	r3, [pc, #44]	@ (8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8009b02:	689b      	ldr	r3, [r3, #8]
 8009b04:	0e1b      	lsrs	r3, r3, #24
 8009b06:	f003 030f 	and.w	r3, r3, #15
 8009b0a:	e006      	b.n	8009b1a <HAL_RCCEx_GetPeriphCLKFreq+0xfae>
 8009b0c:	4b08      	ldr	r3, [pc, #32]	@ (8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8009b0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009b12:	041b      	lsls	r3, r3, #16
 8009b14:	0e1b      	lsrs	r3, r3, #24
 8009b16:	f003 030f 	and.w	r3, r3, #15
 8009b1a:	4a07      	ldr	r2, [pc, #28]	@ (8009b38 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>)
 8009b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b20:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009b22:	e156      	b.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8009b24:	2300      	movs	r3, #0
 8009b26:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009b28:	e153      	b.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009b2e:	e150      	b.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8009b30:	46020c00 	.word	0x46020c00
 8009b34:	00f42400 	.word	0x00f42400
 8009b38:	080163b8 	.word	0x080163b8
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8009b3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b40:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8009b44:	430b      	orrs	r3, r1
 8009b46:	d176      	bne.n	8009c36 <HAL_RCCEx_GetPeriphCLKFreq+0x10ca>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8009b48:	4ba4      	ldr	r3, [pc, #656]	@ (8009ddc <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8009b4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009b4e:	f003 0318 	and.w	r3, r3, #24
 8009b52:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8009b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b56:	2b18      	cmp	r3, #24
 8009b58:	d86a      	bhi.n	8009c30 <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
 8009b5a:	a201      	add	r2, pc, #4	@ (adr r2, 8009b60 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8009b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b60:	08009bc5 	.word	0x08009bc5
 8009b64:	08009c31 	.word	0x08009c31
 8009b68:	08009c31 	.word	0x08009c31
 8009b6c:	08009c31 	.word	0x08009c31
 8009b70:	08009c31 	.word	0x08009c31
 8009b74:	08009c31 	.word	0x08009c31
 8009b78:	08009c31 	.word	0x08009c31
 8009b7c:	08009c31 	.word	0x08009c31
 8009b80:	08009bcd 	.word	0x08009bcd
 8009b84:	08009c31 	.word	0x08009c31
 8009b88:	08009c31 	.word	0x08009c31
 8009b8c:	08009c31 	.word	0x08009c31
 8009b90:	08009c31 	.word	0x08009c31
 8009b94:	08009c31 	.word	0x08009c31
 8009b98:	08009c31 	.word	0x08009c31
 8009b9c:	08009c31 	.word	0x08009c31
 8009ba0:	08009bd5 	.word	0x08009bd5
 8009ba4:	08009c31 	.word	0x08009c31
 8009ba8:	08009c31 	.word	0x08009c31
 8009bac:	08009c31 	.word	0x08009c31
 8009bb0:	08009c31 	.word	0x08009c31
 8009bb4:	08009c31 	.word	0x08009c31
 8009bb8:	08009c31 	.word	0x08009c31
 8009bbc:	08009c31 	.word	0x08009c31
 8009bc0:	08009bef 	.word	0x08009bef
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8009bc4:	f7fd fdec 	bl	80077a0 <HAL_RCC_GetPCLK3Freq>
 8009bc8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009bca:	e102      	b.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009bcc:	f7fd fca4 	bl	8007518 <HAL_RCC_GetSysClockFreq>
 8009bd0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009bd2:	e0fe      	b.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009bd4:	4b81      	ldr	r3, [pc, #516]	@ (8009ddc <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009bdc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009be0:	d102      	bne.n	8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0x107c>
        {
          frequency = HSI_VALUE;
 8009be2:	4b7f      	ldr	r3, [pc, #508]	@ (8009de0 <HAL_RCCEx_GetPeriphCLKFreq+0x1274>)
 8009be4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009be6:	e0f4      	b.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8009be8:	2300      	movs	r3, #0
 8009bea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009bec:	e0f1      	b.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009bee:	4b7b      	ldr	r3, [pc, #492]	@ (8009ddc <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f003 0320 	and.w	r3, r3, #32
 8009bf6:	2b20      	cmp	r3, #32
 8009bf8:	d117      	bne.n	8009c2a <HAL_RCCEx_GetPeriphCLKFreq+0x10be>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009bfa:	4b78      	ldr	r3, [pc, #480]	@ (8009ddc <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8009bfc:	689b      	ldr	r3, [r3, #8]
 8009bfe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d005      	beq.n	8009c12 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 8009c06:	4b75      	ldr	r3, [pc, #468]	@ (8009ddc <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8009c08:	689b      	ldr	r3, [r3, #8]
 8009c0a:	0e1b      	lsrs	r3, r3, #24
 8009c0c:	f003 030f 	and.w	r3, r3, #15
 8009c10:	e006      	b.n	8009c20 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
 8009c12:	4b72      	ldr	r3, [pc, #456]	@ (8009ddc <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8009c14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009c18:	041b      	lsls	r3, r3, #16
 8009c1a:	0e1b      	lsrs	r3, r3, #24
 8009c1c:	f003 030f 	and.w	r3, r3, #15
 8009c20:	4a70      	ldr	r2, [pc, #448]	@ (8009de4 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 8009c22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c26:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009c28:	e0d3      	b.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009c2e:	e0d0      	b.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8009c30:	2300      	movs	r3, #0
 8009c32:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009c34:	e0cd      	b.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8009c36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c3a:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8009c3e:	430b      	orrs	r3, r1
 8009c40:	d155      	bne.n	8009cee <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8009c42:	4b66      	ldr	r3, [pc, #408]	@ (8009ddc <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8009c44:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009c48:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8009c4c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8009c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c50:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009c54:	d013      	beq.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
 8009c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c58:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009c5c:	d844      	bhi.n	8009ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x117c>
 8009c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c60:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009c64:	d013      	beq.n	8009c8e <HAL_RCCEx_GetPeriphCLKFreq+0x1122>
 8009c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c68:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009c6c:	d83c      	bhi.n	8009ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x117c>
 8009c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d014      	beq.n	8009c9e <HAL_RCCEx_GetPeriphCLKFreq+0x1132>
 8009c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009c7a:	d014      	beq.n	8009ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 8009c7c:	e034      	b.n	8009ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x117c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c7e:	f107 0318 	add.w	r3, r7, #24
 8009c82:	4618      	mov	r0, r3
 8009c84:	f7fe fcbe 	bl	8008604 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8009c88:	69fb      	ldr	r3, [r7, #28]
 8009c8a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009c8c:	e0a1      	b.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009c8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009c92:	4618      	mov	r0, r3
 8009c94:	f7fe fb5c 	bl	8008350 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8009c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c9a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009c9c:	e099      	b.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009c9e:	f7fd fc3b 	bl	8007518 <HAL_RCC_GetSysClockFreq>
 8009ca2:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009ca4:	e095      	b.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009ca6:	4b4d      	ldr	r3, [pc, #308]	@ (8009ddc <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f003 0320 	and.w	r3, r3, #32
 8009cae:	2b20      	cmp	r3, #32
 8009cb0:	d117      	bne.n	8009ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x1176>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009cb2:	4b4a      	ldr	r3, [pc, #296]	@ (8009ddc <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8009cb4:	689b      	ldr	r3, [r3, #8]
 8009cb6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d005      	beq.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x115e>
 8009cbe:	4b47      	ldr	r3, [pc, #284]	@ (8009ddc <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8009cc0:	689b      	ldr	r3, [r3, #8]
 8009cc2:	0e1b      	lsrs	r3, r3, #24
 8009cc4:	f003 030f 	and.w	r3, r3, #15
 8009cc8:	e006      	b.n	8009cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x116c>
 8009cca:	4b44      	ldr	r3, [pc, #272]	@ (8009ddc <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8009ccc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009cd0:	041b      	lsls	r3, r3, #16
 8009cd2:	0e1b      	lsrs	r3, r3, #24
 8009cd4:	f003 030f 	and.w	r3, r3, #15
 8009cd8:	4a42      	ldr	r2, [pc, #264]	@ (8009de4 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 8009cda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009cde:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009ce0:	e077      	b.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009ce6:	e074      	b.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8009ce8:	2300      	movs	r3, #0
 8009cea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009cec:	e071      	b.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8009cee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009cf2:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8009cf6:	430b      	orrs	r3, r1
 8009cf8:	d131      	bne.n	8009d5e <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8009cfa:	4b38      	ldr	r3, [pc, #224]	@ (8009ddc <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8009cfc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009d00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009d04:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8009d06:	4b35      	ldr	r3, [pc, #212]	@ (8009ddc <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8009d08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009d0c:	f003 0302 	and.w	r3, r3, #2
 8009d10:	2b02      	cmp	r3, #2
 8009d12:	d106      	bne.n	8009d22 <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 8009d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d103      	bne.n	8009d22 <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
    {
      frequency = LSE_VALUE;
 8009d1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009d1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d20:	e057      	b.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8009d22:	4b2e      	ldr	r3, [pc, #184]	@ (8009ddc <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8009d24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009d28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009d2c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009d30:	d112      	bne.n	8009d58 <HAL_RCCEx_GetPeriphCLKFreq+0x11ec>
 8009d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009d38:	d10e      	bne.n	8009d58 <HAL_RCCEx_GetPeriphCLKFreq+0x11ec>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009d3a:	4b28      	ldr	r3, [pc, #160]	@ (8009ddc <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8009d3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009d40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009d44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009d48:	d102      	bne.n	8009d50 <HAL_RCCEx_GetPeriphCLKFreq+0x11e4>
      {
        frequency = LSI_VALUE / 128U;
 8009d4a:	23fa      	movs	r3, #250	@ 0xfa
 8009d4c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009d4e:	e040      	b.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8009d50:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009d54:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009d56:	e03c      	b.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8009d58:	2300      	movs	r3, #0
 8009d5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d5c:	e039      	b.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8009d5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d62:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8009d66:	430b      	orrs	r3, r1
 8009d68:	d131      	bne.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8009d6a:	4b1c      	ldr	r3, [pc, #112]	@ (8009ddc <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8009d6c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009d70:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8009d74:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8009d76:	4b19      	ldr	r3, [pc, #100]	@ (8009ddc <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009d7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d82:	d105      	bne.n	8009d90 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 8009d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d102      	bne.n	8009d90 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      frequency = HSI48_VALUE;
 8009d8a:	4b17      	ldr	r3, [pc, #92]	@ (8009de8 <HAL_RCCEx_GetPeriphCLKFreq+0x127c>)
 8009d8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d8e:	e020      	b.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8009d90:	4b12      	ldr	r3, [pc, #72]	@ (8009ddc <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009d98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d9c:	d106      	bne.n	8009dac <HAL_RCCEx_GetPeriphCLKFreq+0x1240>
 8009d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009da0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009da4:	d102      	bne.n	8009dac <HAL_RCCEx_GetPeriphCLKFreq+0x1240>
    {
      frequency = HSI48_VALUE >> 1U ;
 8009da6:	4b11      	ldr	r3, [pc, #68]	@ (8009dec <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009da8:	637b      	str	r3, [r7, #52]	@ 0x34
 8009daa:	e012      	b.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8009dac:	4b0b      	ldr	r3, [pc, #44]	@ (8009ddc <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009db4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009db8:	d106      	bne.n	8009dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>
 8009dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dbc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009dc0:	d102      	bne.n	8009dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>
    {
      frequency = HSI_VALUE;
 8009dc2:	4b07      	ldr	r3, [pc, #28]	@ (8009de0 <HAL_RCCEx_GetPeriphCLKFreq+0x1274>)
 8009dc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8009dc6:	e004      	b.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8009dc8:	2300      	movs	r3, #0
 8009dca:	637b      	str	r3, [r7, #52]	@ 0x34
 8009dcc:	e001      	b.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8009dd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	3738      	adds	r7, #56	@ 0x38
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}
 8009ddc:	46020c00 	.word	0x46020c00
 8009de0:	00f42400 	.word	0x00f42400
 8009de4:	080163b8 	.word	0x080163b8
 8009de8:	02dc6c00 	.word	0x02dc6c00
 8009dec:	016e3600 	.word	0x016e3600

08009df0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b084      	sub	sp, #16
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8009df8:	4b47      	ldr	r3, [pc, #284]	@ (8009f18 <RCCEx_PLL2_Config+0x128>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	4a46      	ldr	r2, [pc, #280]	@ (8009f18 <RCCEx_PLL2_Config+0x128>)
 8009dfe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009e02:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009e04:	f7fa fe06 	bl	8004a14 <HAL_GetTick>
 8009e08:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009e0a:	e008      	b.n	8009e1e <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009e0c:	f7fa fe02 	bl	8004a14 <HAL_GetTick>
 8009e10:	4602      	mov	r2, r0
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	1ad3      	subs	r3, r2, r3
 8009e16:	2b02      	cmp	r3, #2
 8009e18:	d901      	bls.n	8009e1e <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009e1a:	2303      	movs	r3, #3
 8009e1c:	e077      	b.n	8009f0e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009e1e:	4b3e      	ldr	r3, [pc, #248]	@ (8009f18 <RCCEx_PLL2_Config+0x128>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d1f0      	bne.n	8009e0c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8009e2a:	4b3b      	ldr	r3, [pc, #236]	@ (8009f18 <RCCEx_PLL2_Config+0x128>)
 8009e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e2e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009e32:	f023 0303 	bic.w	r3, r3, #3
 8009e36:	687a      	ldr	r2, [r7, #4]
 8009e38:	6811      	ldr	r1, [r2, #0]
 8009e3a:	687a      	ldr	r2, [r7, #4]
 8009e3c:	6852      	ldr	r2, [r2, #4]
 8009e3e:	3a01      	subs	r2, #1
 8009e40:	0212      	lsls	r2, r2, #8
 8009e42:	430a      	orrs	r2, r1
 8009e44:	4934      	ldr	r1, [pc, #208]	@ (8009f18 <RCCEx_PLL2_Config+0x128>)
 8009e46:	4313      	orrs	r3, r2
 8009e48:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8009e4a:	4b33      	ldr	r3, [pc, #204]	@ (8009f18 <RCCEx_PLL2_Config+0x128>)
 8009e4c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009e4e:	4b33      	ldr	r3, [pc, #204]	@ (8009f1c <RCCEx_PLL2_Config+0x12c>)
 8009e50:	4013      	ands	r3, r2
 8009e52:	687a      	ldr	r2, [r7, #4]
 8009e54:	6892      	ldr	r2, [r2, #8]
 8009e56:	3a01      	subs	r2, #1
 8009e58:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8009e5c:	687a      	ldr	r2, [r7, #4]
 8009e5e:	68d2      	ldr	r2, [r2, #12]
 8009e60:	3a01      	subs	r2, #1
 8009e62:	0252      	lsls	r2, r2, #9
 8009e64:	b292      	uxth	r2, r2
 8009e66:	4311      	orrs	r1, r2
 8009e68:	687a      	ldr	r2, [r7, #4]
 8009e6a:	6912      	ldr	r2, [r2, #16]
 8009e6c:	3a01      	subs	r2, #1
 8009e6e:	0412      	lsls	r2, r2, #16
 8009e70:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8009e74:	4311      	orrs	r1, r2
 8009e76:	687a      	ldr	r2, [r7, #4]
 8009e78:	6952      	ldr	r2, [r2, #20]
 8009e7a:	3a01      	subs	r2, #1
 8009e7c:	0612      	lsls	r2, r2, #24
 8009e7e:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8009e82:	430a      	orrs	r2, r1
 8009e84:	4924      	ldr	r1, [pc, #144]	@ (8009f18 <RCCEx_PLL2_Config+0x128>)
 8009e86:	4313      	orrs	r3, r2
 8009e88:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8009e8a:	4b23      	ldr	r3, [pc, #140]	@ (8009f18 <RCCEx_PLL2_Config+0x128>)
 8009e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e8e:	f023 020c 	bic.w	r2, r3, #12
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	699b      	ldr	r3, [r3, #24]
 8009e96:	4920      	ldr	r1, [pc, #128]	@ (8009f18 <RCCEx_PLL2_Config+0x128>)
 8009e98:	4313      	orrs	r3, r2
 8009e9a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8009e9c:	4b1e      	ldr	r3, [pc, #120]	@ (8009f18 <RCCEx_PLL2_Config+0x128>)
 8009e9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	6a1b      	ldr	r3, [r3, #32]
 8009ea4:	491c      	ldr	r1, [pc, #112]	@ (8009f18 <RCCEx_PLL2_Config+0x128>)
 8009ea6:	4313      	orrs	r3, r2
 8009ea8:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8009eaa:	4b1b      	ldr	r3, [pc, #108]	@ (8009f18 <RCCEx_PLL2_Config+0x128>)
 8009eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009eae:	4a1a      	ldr	r2, [pc, #104]	@ (8009f18 <RCCEx_PLL2_Config+0x128>)
 8009eb0:	f023 0310 	bic.w	r3, r3, #16
 8009eb4:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009eb6:	4b18      	ldr	r3, [pc, #96]	@ (8009f18 <RCCEx_PLL2_Config+0x128>)
 8009eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009eba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009ebe:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009ec2:	687a      	ldr	r2, [r7, #4]
 8009ec4:	69d2      	ldr	r2, [r2, #28]
 8009ec6:	00d2      	lsls	r2, r2, #3
 8009ec8:	4913      	ldr	r1, [pc, #76]	@ (8009f18 <RCCEx_PLL2_Config+0x128>)
 8009eca:	4313      	orrs	r3, r2
 8009ecc:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8009ece:	4b12      	ldr	r3, [pc, #72]	@ (8009f18 <RCCEx_PLL2_Config+0x128>)
 8009ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ed2:	4a11      	ldr	r2, [pc, #68]	@ (8009f18 <RCCEx_PLL2_Config+0x128>)
 8009ed4:	f043 0310 	orr.w	r3, r3, #16
 8009ed8:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8009eda:	4b0f      	ldr	r3, [pc, #60]	@ (8009f18 <RCCEx_PLL2_Config+0x128>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	4a0e      	ldr	r2, [pc, #56]	@ (8009f18 <RCCEx_PLL2_Config+0x128>)
 8009ee0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009ee4:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009ee6:	f7fa fd95 	bl	8004a14 <HAL_GetTick>
 8009eea:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009eec:	e008      	b.n	8009f00 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009eee:	f7fa fd91 	bl	8004a14 <HAL_GetTick>
 8009ef2:	4602      	mov	r2, r0
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	1ad3      	subs	r3, r2, r3
 8009ef8:	2b02      	cmp	r3, #2
 8009efa:	d901      	bls.n	8009f00 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8009efc:	2303      	movs	r3, #3
 8009efe:	e006      	b.n	8009f0e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009f00:	4b05      	ldr	r3, [pc, #20]	@ (8009f18 <RCCEx_PLL2_Config+0x128>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d0f0      	beq.n	8009eee <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8009f0c:	2300      	movs	r3, #0

}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	3710      	adds	r7, #16
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}
 8009f16:	bf00      	nop
 8009f18:	46020c00 	.word	0x46020c00
 8009f1c:	80800000 	.word	0x80800000

08009f20 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b084      	sub	sp, #16
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8009f28:	4b47      	ldr	r3, [pc, #284]	@ (800a048 <RCCEx_PLL3_Config+0x128>)
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	4a46      	ldr	r2, [pc, #280]	@ (800a048 <RCCEx_PLL3_Config+0x128>)
 8009f2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009f32:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009f34:	f7fa fd6e 	bl	8004a14 <HAL_GetTick>
 8009f38:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009f3a:	e008      	b.n	8009f4e <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009f3c:	f7fa fd6a 	bl	8004a14 <HAL_GetTick>
 8009f40:	4602      	mov	r2, r0
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	1ad3      	subs	r3, r2, r3
 8009f46:	2b02      	cmp	r3, #2
 8009f48:	d901      	bls.n	8009f4e <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009f4a:	2303      	movs	r3, #3
 8009f4c:	e077      	b.n	800a03e <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009f4e:	4b3e      	ldr	r3, [pc, #248]	@ (800a048 <RCCEx_PLL3_Config+0x128>)
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d1f0      	bne.n	8009f3c <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8009f5a:	4b3b      	ldr	r3, [pc, #236]	@ (800a048 <RCCEx_PLL3_Config+0x128>)
 8009f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f5e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009f62:	f023 0303 	bic.w	r3, r3, #3
 8009f66:	687a      	ldr	r2, [r7, #4]
 8009f68:	6811      	ldr	r1, [r2, #0]
 8009f6a:	687a      	ldr	r2, [r7, #4]
 8009f6c:	6852      	ldr	r2, [r2, #4]
 8009f6e:	3a01      	subs	r2, #1
 8009f70:	0212      	lsls	r2, r2, #8
 8009f72:	430a      	orrs	r2, r1
 8009f74:	4934      	ldr	r1, [pc, #208]	@ (800a048 <RCCEx_PLL3_Config+0x128>)
 8009f76:	4313      	orrs	r3, r2
 8009f78:	630b      	str	r3, [r1, #48]	@ 0x30
 8009f7a:	4b33      	ldr	r3, [pc, #204]	@ (800a048 <RCCEx_PLL3_Config+0x128>)
 8009f7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009f7e:	4b33      	ldr	r3, [pc, #204]	@ (800a04c <RCCEx_PLL3_Config+0x12c>)
 8009f80:	4013      	ands	r3, r2
 8009f82:	687a      	ldr	r2, [r7, #4]
 8009f84:	6892      	ldr	r2, [r2, #8]
 8009f86:	3a01      	subs	r2, #1
 8009f88:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8009f8c:	687a      	ldr	r2, [r7, #4]
 8009f8e:	68d2      	ldr	r2, [r2, #12]
 8009f90:	3a01      	subs	r2, #1
 8009f92:	0252      	lsls	r2, r2, #9
 8009f94:	b292      	uxth	r2, r2
 8009f96:	4311      	orrs	r1, r2
 8009f98:	687a      	ldr	r2, [r7, #4]
 8009f9a:	6912      	ldr	r2, [r2, #16]
 8009f9c:	3a01      	subs	r2, #1
 8009f9e:	0412      	lsls	r2, r2, #16
 8009fa0:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8009fa4:	4311      	orrs	r1, r2
 8009fa6:	687a      	ldr	r2, [r7, #4]
 8009fa8:	6952      	ldr	r2, [r2, #20]
 8009faa:	3a01      	subs	r2, #1
 8009fac:	0612      	lsls	r2, r2, #24
 8009fae:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8009fb2:	430a      	orrs	r2, r1
 8009fb4:	4924      	ldr	r1, [pc, #144]	@ (800a048 <RCCEx_PLL3_Config+0x128>)
 8009fb6:	4313      	orrs	r3, r2
 8009fb8:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8009fba:	4b23      	ldr	r3, [pc, #140]	@ (800a048 <RCCEx_PLL3_Config+0x128>)
 8009fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fbe:	f023 020c 	bic.w	r2, r3, #12
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	699b      	ldr	r3, [r3, #24]
 8009fc6:	4920      	ldr	r1, [pc, #128]	@ (800a048 <RCCEx_PLL3_Config+0x128>)
 8009fc8:	4313      	orrs	r3, r2
 8009fca:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8009fcc:	4b1e      	ldr	r3, [pc, #120]	@ (800a048 <RCCEx_PLL3_Config+0x128>)
 8009fce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6a1b      	ldr	r3, [r3, #32]
 8009fd4:	491c      	ldr	r1, [pc, #112]	@ (800a048 <RCCEx_PLL3_Config+0x128>)
 8009fd6:	4313      	orrs	r3, r2
 8009fd8:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8009fda:	4b1b      	ldr	r3, [pc, #108]	@ (800a048 <RCCEx_PLL3_Config+0x128>)
 8009fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fde:	4a1a      	ldr	r2, [pc, #104]	@ (800a048 <RCCEx_PLL3_Config+0x128>)
 8009fe0:	f023 0310 	bic.w	r3, r3, #16
 8009fe4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009fe6:	4b18      	ldr	r3, [pc, #96]	@ (800a048 <RCCEx_PLL3_Config+0x128>)
 8009fe8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009fea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009fee:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009ff2:	687a      	ldr	r2, [r7, #4]
 8009ff4:	69d2      	ldr	r2, [r2, #28]
 8009ff6:	00d2      	lsls	r2, r2, #3
 8009ff8:	4913      	ldr	r1, [pc, #76]	@ (800a048 <RCCEx_PLL3_Config+0x128>)
 8009ffa:	4313      	orrs	r3, r2
 8009ffc:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8009ffe:	4b12      	ldr	r3, [pc, #72]	@ (800a048 <RCCEx_PLL3_Config+0x128>)
 800a000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a002:	4a11      	ldr	r2, [pc, #68]	@ (800a048 <RCCEx_PLL3_Config+0x128>)
 800a004:	f043 0310 	orr.w	r3, r3, #16
 800a008:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800a00a:	4b0f      	ldr	r3, [pc, #60]	@ (800a048 <RCCEx_PLL3_Config+0x128>)
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	4a0e      	ldr	r2, [pc, #56]	@ (800a048 <RCCEx_PLL3_Config+0x128>)
 800a010:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a014:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a016:	f7fa fcfd 	bl	8004a14 <HAL_GetTick>
 800a01a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a01c:	e008      	b.n	800a030 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a01e:	f7fa fcf9 	bl	8004a14 <HAL_GetTick>
 800a022:	4602      	mov	r2, r0
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	1ad3      	subs	r3, r2, r3
 800a028:	2b02      	cmp	r3, #2
 800a02a:	d901      	bls.n	800a030 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800a02c:	2303      	movs	r3, #3
 800a02e:	e006      	b.n	800a03e <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a030:	4b05      	ldr	r3, [pc, #20]	@ (800a048 <RCCEx_PLL3_Config+0x128>)
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d0f0      	beq.n	800a01e <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800a03c:	2300      	movs	r3, #0
}
 800a03e:	4618      	mov	r0, r3
 800a040:	3710      	adds	r7, #16
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}
 800a046:	bf00      	nop
 800a048:	46020c00 	.word	0x46020c00
 800a04c:	80800000 	.word	0x80800000

0800a050 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b084      	sub	sp, #16
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a058:	2301      	movs	r3, #1
 800a05a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d078      	beq.n	800a154 <HAL_RTC_Init+0x104>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a068:	b2db      	uxtb	r3, r3
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d106      	bne.n	800a07c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	2200      	movs	r2, #0
 800a072:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800a076:	6878      	ldr	r0, [r7, #4]
 800a078:	f7fa f994 	bl	80043a4 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2202      	movs	r2, #2
 800a080:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800a084:	4b36      	ldr	r3, [pc, #216]	@ (800a160 <HAL_RTC_Init+0x110>)
 800a086:	68db      	ldr	r3, [r3, #12]
 800a088:	f003 0310 	and.w	r3, r3, #16
 800a08c:	2b10      	cmp	r3, #16
 800a08e:	d058      	beq.n	800a142 <HAL_RTC_Init+0xf2>
    {
      /* Check that the RTC mode is not 'binary only' */
      if (__HAL_RTC_GET_BINARY_MODE(hrtc) != RTC_BINARY_ONLY)
 800a090:	4b33      	ldr	r3, [pc, #204]	@ (800a160 <HAL_RTC_Init+0x110>)
 800a092:	68db      	ldr	r3, [r3, #12]
 800a094:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a098:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a09c:	d053      	beq.n	800a146 <HAL_RTC_Init+0xf6>
      {
        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a09e:	4b30      	ldr	r3, [pc, #192]	@ (800a160 <HAL_RTC_Init+0x110>)
 800a0a0:	22ca      	movs	r2, #202	@ 0xca
 800a0a2:	625a      	str	r2, [r3, #36]	@ 0x24
 800a0a4:	4b2e      	ldr	r3, [pc, #184]	@ (800a160 <HAL_RTC_Init+0x110>)
 800a0a6:	2253      	movs	r2, #83	@ 0x53
 800a0a8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Enter Initialization mode */
        status = RTC_EnterInitMode(hrtc);
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f000 fca0 	bl	800a9f0 <RTC_EnterInitMode>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	73fb      	strb	r3, [r7, #15]

        if (status == HAL_OK)
 800a0b4:	7bfb      	ldrb	r3, [r7, #15]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d13f      	bne.n	800a13a <HAL_RTC_Init+0xea>
        {
          /* Clear RTC_CR FMT, OSEL and POL Bits */
          CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800a0ba:	4b29      	ldr	r3, [pc, #164]	@ (800a160 <HAL_RTC_Init+0x110>)
 800a0bc:	699b      	ldr	r3, [r3, #24]
 800a0be:	4a28      	ldr	r2, [pc, #160]	@ (800a160 <HAL_RTC_Init+0x110>)
 800a0c0:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800a0c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a0c8:	6193      	str	r3, [r2, #24]
          /* Set RTC_CR register */
          SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800a0ca:	4b25      	ldr	r3, [pc, #148]	@ (800a160 <HAL_RTC_Init+0x110>)
 800a0cc:	699a      	ldr	r2, [r3, #24]
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6859      	ldr	r1, [r3, #4]
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	691b      	ldr	r3, [r3, #16]
 800a0d6:	4319      	orrs	r1, r3
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	699b      	ldr	r3, [r3, #24]
 800a0dc:	430b      	orrs	r3, r1
 800a0de:	4920      	ldr	r1, [pc, #128]	@ (800a160 <HAL_RTC_Init+0x110>)
 800a0e0:	4313      	orrs	r3, r2
 800a0e2:	618b      	str	r3, [r1, #24]

          /* Configure the RTC PRER */
          WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	68da      	ldr	r2, [r3, #12]
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	689b      	ldr	r3, [r3, #8]
 800a0ec:	041b      	lsls	r3, r3, #16
 800a0ee:	491c      	ldr	r1, [pc, #112]	@ (800a160 <HAL_RTC_Init+0x110>)
 800a0f0:	4313      	orrs	r3, r2
 800a0f2:	610b      	str	r3, [r1, #16]

          /* Configure the Binary mode */
          MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800a0f4:	4b1a      	ldr	r3, [pc, #104]	@ (800a160 <HAL_RTC_Init+0x110>)
 800a0f6:	68db      	ldr	r3, [r3, #12]
 800a0f8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a104:	430b      	orrs	r3, r1
 800a106:	4916      	ldr	r1, [pc, #88]	@ (800a160 <HAL_RTC_Init+0x110>)
 800a108:	4313      	orrs	r3, r2
 800a10a:	60cb      	str	r3, [r1, #12]

          /* Exit Initialization mode */
          status = RTC_ExitInitMode(hrtc);
 800a10c:	6878      	ldr	r0, [r7, #4]
 800a10e:	f000 fcab 	bl	800aa68 <RTC_ExitInitMode>
 800a112:	4603      	mov	r3, r0
 800a114:	73fb      	strb	r3, [r7, #15]

          if (status == HAL_OK)
 800a116:	7bfb      	ldrb	r3, [r7, #15]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d10e      	bne.n	800a13a <HAL_RTC_Init+0xea>
          {
            MODIFY_REG(RTC->CR, \
 800a11c:	4b10      	ldr	r3, [pc, #64]	@ (800a160 <HAL_RTC_Init+0x110>)
 800a11e:	699b      	ldr	r3, [r3, #24]
 800a120:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6a19      	ldr	r1, [r3, #32]
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	69db      	ldr	r3, [r3, #28]
 800a12c:	4319      	orrs	r1, r3
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	695b      	ldr	r3, [r3, #20]
 800a132:	430b      	orrs	r3, r1
 800a134:	490a      	ldr	r1, [pc, #40]	@ (800a160 <HAL_RTC_Init+0x110>)
 800a136:	4313      	orrs	r3, r2
 800a138:	618b      	str	r3, [r1, #24]
                       hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
          }
        }

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a13a:	4b09      	ldr	r3, [pc, #36]	@ (800a160 <HAL_RTC_Init+0x110>)
 800a13c:	22ff      	movs	r2, #255	@ 0xff
 800a13e:	625a      	str	r2, [r3, #36]	@ 0x24
 800a140:	e001      	b.n	800a146 <HAL_RTC_Init+0xf6>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800a142:	2300      	movs	r3, #0
 800a144:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800a146:	7bfb      	ldrb	r3, [r7, #15]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d103      	bne.n	800a154 <HAL_RTC_Init+0x104>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2201      	movs	r2, #1
 800a150:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 800a154:	7bfb      	ldrb	r3, [r7, #15]
}
 800a156:	4618      	mov	r0, r3
 800a158:	3710      	adds	r7, #16
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}
 800a15e:	bf00      	nop
 800a160:	46007800 	.word	0x46007800

0800a164 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a164:	b590      	push	{r4, r7, lr}
 800a166:	b087      	sub	sp, #28
 800a168:	af00      	add	r7, sp, #0
 800a16a:	60f8      	str	r0, [r7, #12]
 800a16c:	60b9      	str	r1, [r7, #8]
 800a16e:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a176:	2b01      	cmp	r3, #1
 800a178:	d101      	bne.n	800a17e <HAL_RTC_SetTime+0x1a>
 800a17a:	2302      	movs	r3, #2
 800a17c:	e088      	b.n	800a290 <HAL_RTC_SetTime+0x12c>
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	2201      	movs	r2, #1
 800a182:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	2202      	movs	r2, #2
 800a18a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a18e:	4b42      	ldr	r3, [pc, #264]	@ (800a298 <HAL_RTC_SetTime+0x134>)
 800a190:	22ca      	movs	r2, #202	@ 0xca
 800a192:	625a      	str	r2, [r3, #36]	@ 0x24
 800a194:	4b40      	ldr	r3, [pc, #256]	@ (800a298 <HAL_RTC_SetTime+0x134>)
 800a196:	2253      	movs	r2, #83	@ 0x53
 800a198:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a19a:	68f8      	ldr	r0, [r7, #12]
 800a19c:	f000 fc28 	bl	800a9f0 <RTC_EnterInitMode>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800a1a4:	7cfb      	ldrb	r3, [r7, #19]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d163      	bne.n	800a272 <HAL_RTC_SetTime+0x10e>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800a1aa:	4b3b      	ldr	r3, [pc, #236]	@ (800a298 <HAL_RTC_SetTime+0x134>)
 800a1ac:	68db      	ldr	r3, [r3, #12]
 800a1ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a1b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a1b6:	d057      	beq.n	800a268 <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d125      	bne.n	800a20a <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800a1be:	4b36      	ldr	r3, [pc, #216]	@ (800a298 <HAL_RTC_SetTime+0x134>)
 800a1c0:	699b      	ldr	r3, [r3, #24]
 800a1c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d102      	bne.n	800a1d0 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800a1ca:	68bb      	ldr	r3, [r7, #8]
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a1d0:	68bb      	ldr	r3, [r7, #8]
 800a1d2:	781b      	ldrb	r3, [r3, #0]
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	f000 fc85 	bl	800aae4 <RTC_ByteToBcd2>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	785b      	ldrb	r3, [r3, #1]
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	f000 fc7e 	bl	800aae4 <RTC_ByteToBcd2>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a1ec:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800a1ee:	68bb      	ldr	r3, [r7, #8]
 800a1f0:	789b      	ldrb	r3, [r3, #2]
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f000 fc76 	bl	800aae4 <RTC_ByteToBcd2>
 800a1f8:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a1fa:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	78db      	ldrb	r3, [r3, #3]
 800a202:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a204:	4313      	orrs	r3, r2
 800a206:	617b      	str	r3, [r7, #20]
 800a208:	e017      	b.n	800a23a <HAL_RTC_SetTime+0xd6>
      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800a20a:	4b23      	ldr	r3, [pc, #140]	@ (800a298 <HAL_RTC_SetTime+0x134>)
 800a20c:	699b      	ldr	r3, [r3, #24]
 800a20e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a212:	2b00      	cmp	r3, #0
 800a214:	d102      	bne.n	800a21c <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	2200      	movs	r2, #0
 800a21a:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	781b      	ldrb	r3, [r3, #0]
 800a220:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	785b      	ldrb	r3, [r3, #1]
 800a226:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a228:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800a22a:	68ba      	ldr	r2, [r7, #8]
 800a22c:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a22e:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	78db      	ldrb	r3, [r3, #3]
 800a234:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a236:	4313      	orrs	r3, r2
 800a238:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800a23a:	4a17      	ldr	r2, [pc, #92]	@ (800a298 <HAL_RTC_SetTime+0x134>)
 800a23c:	697b      	ldr	r3, [r7, #20]
 800a23e:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800a242:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800a246:	6013      	str	r3, [r2, #0]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 800a248:	4b13      	ldr	r3, [pc, #76]	@ (800a298 <HAL_RTC_SetTime+0x134>)
 800a24a:	699b      	ldr	r3, [r3, #24]
 800a24c:	4a12      	ldr	r2, [pc, #72]	@ (800a298 <HAL_RTC_SetTime+0x134>)
 800a24e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a252:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 800a254:	4b10      	ldr	r3, [pc, #64]	@ (800a298 <HAL_RTC_SetTime+0x134>)
 800a256:	699a      	ldr	r2, [r3, #24]
 800a258:	68bb      	ldr	r3, [r7, #8]
 800a25a:	68d9      	ldr	r1, [r3, #12]
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	691b      	ldr	r3, [r3, #16]
 800a260:	430b      	orrs	r3, r1
 800a262:	490d      	ldr	r1, [pc, #52]	@ (800a298 <HAL_RTC_SetTime+0x134>)
 800a264:	4313      	orrs	r3, r2
 800a266:	618b      	str	r3, [r1, #24]
    }

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a268:	68f8      	ldr	r0, [r7, #12]
 800a26a:	f000 fbfd 	bl	800aa68 <RTC_ExitInitMode>
 800a26e:	4603      	mov	r3, r0
 800a270:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a272:	4b09      	ldr	r3, [pc, #36]	@ (800a298 <HAL_RTC_SetTime+0x134>)
 800a274:	22ff      	movs	r2, #255	@ 0xff
 800a276:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800a278:	7cfb      	ldrb	r3, [r7, #19]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d103      	bne.n	800a286 <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	2201      	movs	r2, #1
 800a282:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	2200      	movs	r2, #0
 800a28a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 800a28e:	7cfb      	ldrb	r3, [r7, #19]
}
 800a290:	4618      	mov	r0, r3
 800a292:	371c      	adds	r7, #28
 800a294:	46bd      	mov	sp, r7
 800a296:	bd90      	pop	{r4, r7, pc}
 800a298:	46007800 	.word	0x46007800

0800a29c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(const RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b086      	sub	sp, #24
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	60f8      	str	r0, [r7, #12]
 800a2a4:	60b9      	str	r1, [r7, #8]
 800a2a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = READ_REG(RTC->SSR);
 800a2a8:	4b34      	ldr	r3, [pc, #208]	@ (800a37c <HAL_RTC_GetTime+0xe0>)
 800a2aa:	689a      	ldr	r2, [r3, #8]
 800a2ac:	68bb      	ldr	r3, [r7, #8]
 800a2ae:	605a      	str	r2, [r3, #4]


  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800a2b0:	4b32      	ldr	r3, [pc, #200]	@ (800a37c <HAL_RTC_GetTime+0xe0>)
 800a2b2:	68db      	ldr	r3, [r3, #12]
 800a2b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a2b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a2bc:	d04a      	beq.n	800a354 <HAL_RTC_GetTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field */
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 800a2be:	4b2f      	ldr	r3, [pc, #188]	@ (800a37c <HAL_RTC_GetTime+0xe0>)
 800a2c0:	691b      	ldr	r3, [r3, #16]
 800a2c2:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800a2c6:	68bb      	ldr	r3, [r7, #8]
 800a2c8:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 800a2ca:	4b2c      	ldr	r3, [pc, #176]	@ (800a37c <HAL_RTC_GetTime+0xe0>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800a2d2:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800a2d6:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800a2d8:	697b      	ldr	r3, [r7, #20]
 800a2da:	0c1b      	lsrs	r3, r3, #16
 800a2dc:	b2db      	uxtb	r3, r3
 800a2de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a2e2:	b2da      	uxtb	r2, r3
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800a2e8:	697b      	ldr	r3, [r7, #20]
 800a2ea:	0a1b      	lsrs	r3, r3, #8
 800a2ec:	b2db      	uxtb	r3, r3
 800a2ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a2f2:	b2da      	uxtb	r2, r3
 800a2f4:	68bb      	ldr	r3, [r7, #8]
 800a2f6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800a2f8:	697b      	ldr	r3, [r7, #20]
 800a2fa:	b2db      	uxtb	r3, r3
 800a2fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a300:	b2da      	uxtb	r2, r3
 800a302:	68bb      	ldr	r3, [r7, #8]
 800a304:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800a306:	697b      	ldr	r3, [r7, #20]
 800a308:	0d9b      	lsrs	r3, r3, #22
 800a30a:	b2db      	uxtb	r3, r3
 800a30c:	f003 0301 	and.w	r3, r3, #1
 800a310:	b2da      	uxtb	r2, r3
 800a312:	68bb      	ldr	r3, [r7, #8]
 800a314:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d12a      	bne.n	800a372 <HAL_RTC_GetTime+0xd6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800a31c:	68bb      	ldr	r3, [r7, #8]
 800a31e:	781b      	ldrb	r3, [r3, #0]
 800a320:	4618      	mov	r0, r3
 800a322:	f000 fbff 	bl	800ab24 <RTC_Bcd2ToByte>
 800a326:	4603      	mov	r3, r0
 800a328:	461a      	mov	r2, r3
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800a32e:	68bb      	ldr	r3, [r7, #8]
 800a330:	785b      	ldrb	r3, [r3, #1]
 800a332:	4618      	mov	r0, r3
 800a334:	f000 fbf6 	bl	800ab24 <RTC_Bcd2ToByte>
 800a338:	4603      	mov	r3, r0
 800a33a:	461a      	mov	r2, r3
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	789b      	ldrb	r3, [r3, #2]
 800a344:	4618      	mov	r0, r3
 800a346:	f000 fbed 	bl	800ab24 <RTC_Bcd2ToByte>
 800a34a:	4603      	mov	r3, r0
 800a34c:	461a      	mov	r2, r3
 800a34e:	68bb      	ldr	r3, [r7, #8]
 800a350:	709a      	strb	r2, [r3, #2]
 800a352:	e00e      	b.n	800a372 <HAL_RTC_GetTime+0xd6>
    }
  }
  else
  {
    /* Initialize structure fields */
    sTime->Hours = 0U;
 800a354:	68bb      	ldr	r3, [r7, #8]
 800a356:	2200      	movs	r2, #0
 800a358:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = 0U;
 800a35a:	68bb      	ldr	r3, [r7, #8]
 800a35c:	2200      	movs	r2, #0
 800a35e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = 0U;
 800a360:	68bb      	ldr	r3, [r7, #8]
 800a362:	2200      	movs	r2, #0
 800a364:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = 0U;
 800a366:	68bb      	ldr	r3, [r7, #8]
 800a368:	2200      	movs	r2, #0
 800a36a:	70da      	strb	r2, [r3, #3]
    sTime->SecondFraction = 0U;
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	2200      	movs	r2, #0
 800a370:	609a      	str	r2, [r3, #8]
  }

  return HAL_OK;
 800a372:	2300      	movs	r3, #0
}
 800a374:	4618      	mov	r0, r3
 800a376:	3718      	adds	r7, #24
 800a378:	46bd      	mov	sp, r7
 800a37a:	bd80      	pop	{r7, pc}
 800a37c:	46007800 	.word	0x46007800

0800a380 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a380:	b590      	push	{r4, r7, lr}
 800a382:	b087      	sub	sp, #28
 800a384:	af00      	add	r7, sp, #0
 800a386:	60f8      	str	r0, [r7, #12]
 800a388:	60b9      	str	r1, [r7, #8]
 800a38a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a392:	2b01      	cmp	r3, #1
 800a394:	d101      	bne.n	800a39a <HAL_RTC_SetDate+0x1a>
 800a396:	2302      	movs	r3, #2
 800a398:	e071      	b.n	800a47e <HAL_RTC_SetDate+0xfe>
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	2201      	movs	r2, #1
 800a39e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	2202      	movs	r2, #2
 800a3a6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d10e      	bne.n	800a3ce <HAL_RTC_SetDate+0x4e>
 800a3b0:	68bb      	ldr	r3, [r7, #8]
 800a3b2:	785b      	ldrb	r3, [r3, #1]
 800a3b4:	f003 0310 	and.w	r3, r3, #16
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d008      	beq.n	800a3ce <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	785b      	ldrb	r3, [r3, #1]
 800a3c0:	f023 0310 	bic.w	r3, r3, #16
 800a3c4:	b2db      	uxtb	r3, r3
 800a3c6:	330a      	adds	r3, #10
 800a3c8:	b2da      	uxtb	r2, r3
 800a3ca:	68bb      	ldr	r3, [r7, #8]
 800a3cc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d11c      	bne.n	800a40e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	78db      	ldrb	r3, [r3, #3]
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f000 fb83 	bl	800aae4 <RTC_ByteToBcd2>
 800a3de:	4603      	mov	r3, r0
 800a3e0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	785b      	ldrb	r3, [r3, #1]
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f000 fb7c 	bl	800aae4 <RTC_ByteToBcd2>
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800a3f0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	789b      	ldrb	r3, [r3, #2]
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f000 fb74 	bl	800aae4 <RTC_ByteToBcd2>
 800a3fc:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a3fe:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800a402:	68bb      	ldr	r3, [r7, #8]
 800a404:	781b      	ldrb	r3, [r3, #0]
 800a406:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800a408:	4313      	orrs	r3, r2
 800a40a:	617b      	str	r3, [r7, #20]
 800a40c:	e00e      	b.n	800a42c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	78db      	ldrb	r3, [r3, #3]
 800a412:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	785b      	ldrb	r3, [r3, #1]
 800a418:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800a41a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800a41c:	68ba      	ldr	r2, [r7, #8]
 800a41e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800a420:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	781b      	ldrb	r3, [r3, #0]
 800a426:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800a428:	4313      	orrs	r3, r2
 800a42a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a42c:	4b16      	ldr	r3, [pc, #88]	@ (800a488 <HAL_RTC_SetDate+0x108>)
 800a42e:	22ca      	movs	r2, #202	@ 0xca
 800a430:	625a      	str	r2, [r3, #36]	@ 0x24
 800a432:	4b15      	ldr	r3, [pc, #84]	@ (800a488 <HAL_RTC_SetDate+0x108>)
 800a434:	2253      	movs	r2, #83	@ 0x53
 800a436:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a438:	68f8      	ldr	r0, [r7, #12]
 800a43a:	f000 fad9 	bl	800a9f0 <RTC_EnterInitMode>
 800a43e:	4603      	mov	r3, r0
 800a440:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800a442:	7cfb      	ldrb	r3, [r7, #19]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d10b      	bne.n	800a460 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800a448:	4a0f      	ldr	r2, [pc, #60]	@ (800a488 <HAL_RTC_SetDate+0x108>)
 800a44a:	697b      	ldr	r3, [r7, #20]
 800a44c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800a450:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a454:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a456:	68f8      	ldr	r0, [r7, #12]
 800a458:	f000 fb06 	bl	800aa68 <RTC_ExitInitMode>
 800a45c:	4603      	mov	r3, r0
 800a45e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a460:	4b09      	ldr	r3, [pc, #36]	@ (800a488 <HAL_RTC_SetDate+0x108>)
 800a462:	22ff      	movs	r2, #255	@ 0xff
 800a464:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800a466:	7cfb      	ldrb	r3, [r7, #19]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d103      	bne.n	800a474 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	2201      	movs	r2, #1
 800a470:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	2200      	movs	r2, #0
 800a478:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 800a47c:	7cfb      	ldrb	r3, [r7, #19]
}
 800a47e:	4618      	mov	r0, r3
 800a480:	371c      	adds	r7, #28
 800a482:	46bd      	mov	sp, r7
 800a484:	bd90      	pop	{r4, r7, pc}
 800a486:	bf00      	nop
 800a488:	46007800 	.word	0x46007800

0800a48c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(const RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b086      	sub	sp, #24
 800a490:	af00      	add	r7, sp, #0
 800a492:	60f8      	str	r0, [r7, #12]
 800a494:	60b9      	str	r1, [r7, #8]
 800a496:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 800a498:	4b22      	ldr	r3, [pc, #136]	@ (800a524 <HAL_RTC_GetDate+0x98>)
 800a49a:	685b      	ldr	r3, [r3, #4]
 800a49c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800a4a0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a4a4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800a4a6:	697b      	ldr	r3, [r7, #20]
 800a4a8:	0c1b      	lsrs	r3, r3, #16
 800a4aa:	b2da      	uxtb	r2, r3
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800a4b0:	697b      	ldr	r3, [r7, #20]
 800a4b2:	0a1b      	lsrs	r3, r3, #8
 800a4b4:	b2db      	uxtb	r3, r3
 800a4b6:	f003 031f 	and.w	r3, r3, #31
 800a4ba:	b2da      	uxtb	r2, r3
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800a4c0:	697b      	ldr	r3, [r7, #20]
 800a4c2:	b2db      	uxtb	r3, r3
 800a4c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a4c8:	b2da      	uxtb	r2, r3
 800a4ca:	68bb      	ldr	r3, [r7, #8]
 800a4cc:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800a4ce:	697b      	ldr	r3, [r7, #20]
 800a4d0:	0b5b      	lsrs	r3, r3, #13
 800a4d2:	b2db      	uxtb	r3, r3
 800a4d4:	f003 0307 	and.w	r3, r3, #7
 800a4d8:	b2da      	uxtb	r2, r3
 800a4da:	68bb      	ldr	r3, [r7, #8]
 800a4dc:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d11a      	bne.n	800a51a <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	78db      	ldrb	r3, [r3, #3]
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	f000 fb1b 	bl	800ab24 <RTC_Bcd2ToByte>
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	461a      	mov	r2, r3
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	785b      	ldrb	r3, [r3, #1]
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	f000 fb12 	bl	800ab24 <RTC_Bcd2ToByte>
 800a500:	4603      	mov	r3, r0
 800a502:	461a      	mov	r2, r3
 800a504:	68bb      	ldr	r3, [r7, #8]
 800a506:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	789b      	ldrb	r3, [r3, #2]
 800a50c:	4618      	mov	r0, r3
 800a50e:	f000 fb09 	bl	800ab24 <RTC_Bcd2ToByte>
 800a512:	4603      	mov	r3, r0
 800a514:	461a      	mov	r2, r3
 800a516:	68bb      	ldr	r3, [r7, #8]
 800a518:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800a51a:	2300      	movs	r3, #0
}
 800a51c:	4618      	mov	r0, r3
 800a51e:	3718      	adds	r7, #24
 800a520:	46bd      	mov	sp, r7
 800a522:	bd80      	pop	{r7, pc}
 800a524:	46007800 	.word	0x46007800

0800a528 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800a528:	b590      	push	{r4, r7, lr}
 800a52a:	b087      	sub	sp, #28
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	60f8      	str	r0, [r7, #12]
 800a530:	60b9      	str	r1, [r7, #8]
 800a532:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800a534:	2300      	movs	r3, #0
 800a536:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a53e:	2b01      	cmp	r3, #1
 800a540:	d101      	bne.n	800a546 <HAL_RTC_SetAlarm_IT+0x1e>
 800a542:	2302      	movs	r3, #2
 800a544:	e0ea      	b.n	800a71c <HAL_RTC_SetAlarm_IT+0x1f4>
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	2201      	movs	r2, #1
 800a54a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	2202      	movs	r2, #2
 800a552:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
                 (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif /* USE_FULL_ASSERT */

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 800a556:	4b73      	ldr	r3, [pc, #460]	@ (800a724 <HAL_RTC_SetAlarm_IT+0x1fc>)
 800a558:	68db      	ldr	r3, [r3, #12]
 800a55a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a55e:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 800a560:	693b      	ldr	r3, [r7, #16]
 800a562:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a566:	d05c      	beq.n	800a622 <HAL_RTC_SetAlarm_IT+0xfa>
  {
    if (Format == RTC_FORMAT_BIN)
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d136      	bne.n	800a5dc <HAL_RTC_SetAlarm_IT+0xb4>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800a56e:	4b6d      	ldr	r3, [pc, #436]	@ (800a724 <HAL_RTC_SetAlarm_IT+0x1fc>)
 800a570:	699b      	ldr	r3, [r3, #24]
 800a572:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a576:	2b00      	cmp	r3, #0
 800a578:	d102      	bne.n	800a580 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	2200      	movs	r2, #0
 800a57e:	70da      	strb	r2, [r3, #3]
      }
      else
      {
        assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
      }
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	781b      	ldrb	r3, [r3, #0]
 800a584:	4618      	mov	r0, r3
 800a586:	f000 faad 	bl	800aae4 <RTC_ByteToBcd2>
 800a58a:	4603      	mov	r3, r0
 800a58c:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800a58e:	68bb      	ldr	r3, [r7, #8]
 800a590:	785b      	ldrb	r3, [r3, #1]
 800a592:	4618      	mov	r0, r3
 800a594:	f000 faa6 	bl	800aae4 <RTC_ByteToBcd2>
 800a598:	4603      	mov	r3, r0
 800a59a:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800a59c:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800a59e:	68bb      	ldr	r3, [r7, #8]
 800a5a0:	789b      	ldrb	r3, [r3, #2]
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	f000 fa9e 	bl	800aae4 <RTC_ByteToBcd2>
 800a5a8:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800a5aa:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	78db      	ldrb	r3, [r3, #3]
 800a5b2:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800a5b4:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a5be:	4618      	mov	r0, r3
 800a5c0:	f000 fa90 	bl	800aae4 <RTC_ByteToBcd2>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800a5c8:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800a5d0:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800a5d2:	68bb      	ldr	r3, [r7, #8]
 800a5d4:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800a5d6:	4313      	orrs	r3, r2
 800a5d8:	617b      	str	r3, [r7, #20]
 800a5da:	e022      	b.n	800a622 <HAL_RTC_SetAlarm_IT+0xfa>
    }
    else /* Format BCD */
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800a5dc:	4b51      	ldr	r3, [pc, #324]	@ (800a724 <HAL_RTC_SetAlarm_IT+0x1fc>)
 800a5de:	699b      	ldr	r3, [r3, #24]
 800a5e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d102      	bne.n	800a5ee <HAL_RTC_SetAlarm_IT+0xc6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 800a5e8:	68bb      	ldr	r3, [r7, #8]
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	70da      	strb	r2, [r3, #3]
      {
        assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
      }

#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800a5ee:	68bb      	ldr	r3, [r7, #8]
 800a5f0:	781b      	ldrb	r3, [r3, #0]
 800a5f2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800a5f4:	68bb      	ldr	r3, [r7, #8]
 800a5f6:	785b      	ldrb	r3, [r3, #1]
 800a5f8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800a5fa:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800a5fc:	68ba      	ldr	r2, [r7, #8]
 800a5fe:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800a600:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800a602:	68bb      	ldr	r3, [r7, #8]
 800a604:	78db      	ldrb	r3, [r3, #3]
 800a606:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800a608:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a610:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800a612:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800a618:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800a61e:	4313      	orrs	r3, r2
 800a620:	617b      	str	r3, [r7, #20]
    }
  }


  /* Configure the Alarm registers */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800a622:	68bb      	ldr	r3, [r7, #8]
 800a624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a626:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a62a:	d137      	bne.n	800a69c <HAL_RTC_SetAlarm_IT+0x174>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800a62c:	4b3d      	ldr	r3, [pc, #244]	@ (800a724 <HAL_RTC_SetAlarm_IT+0x1fc>)
 800a62e:	699b      	ldr	r3, [r3, #24]
 800a630:	4a3c      	ldr	r2, [pc, #240]	@ (800a724 <HAL_RTC_SetAlarm_IT+0x1fc>)
 800a632:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800a636:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800a638:	4b3a      	ldr	r3, [pc, #232]	@ (800a724 <HAL_RTC_SetAlarm_IT+0x1fc>)
 800a63a:	2201      	movs	r2, #1
 800a63c:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 800a63e:	693b      	ldr	r3, [r7, #16]
 800a640:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a644:	d107      	bne.n	800a656 <HAL_RTC_SetAlarm_IT+0x12e>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 800a646:	68bb      	ldr	r3, [r7, #8]
 800a648:	699a      	ldr	r2, [r3, #24]
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	69db      	ldr	r3, [r3, #28]
 800a64e:	4935      	ldr	r1, [pc, #212]	@ (800a724 <HAL_RTC_SetAlarm_IT+0x1fc>)
 800a650:	4313      	orrs	r3, r2
 800a652:	644b      	str	r3, [r1, #68]	@ 0x44
 800a654:	e006      	b.n	800a664 <HAL_RTC_SetAlarm_IT+0x13c>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 800a656:	4a33      	ldr	r2, [pc, #204]	@ (800a724 <HAL_RTC_SetAlarm_IT+0x1fc>)
 800a658:	697b      	ldr	r3, [r7, #20]
 800a65a:	6413      	str	r3, [r2, #64]	@ 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 800a65c:	4a31      	ldr	r2, [pc, #196]	@ (800a724 <HAL_RTC_SetAlarm_IT+0x1fc>)
 800a65e:	68bb      	ldr	r3, [r7, #8]
 800a660:	699b      	ldr	r3, [r3, #24]
 800a662:	6453      	str	r3, [r2, #68]	@ 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 800a664:	4a2f      	ldr	r2, [pc, #188]	@ (800a724 <HAL_RTC_SetAlarm_IT+0x1fc>)
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	685b      	ldr	r3, [r3, #4]
 800a66a:	6713      	str	r3, [r2, #112]	@ 0x70

    if (sAlarm->FlagAutoClr == ALARM_FLAG_AUTOCLR_ENABLE)
 800a66c:	68bb      	ldr	r3, [r7, #8]
 800a66e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a670:	2b01      	cmp	r3, #1
 800a672:	d106      	bne.n	800a682 <HAL_RTC_SetAlarm_IT+0x15a>
    {
      /* Configure the  Alarm A output clear */
      SET_BIT(RTC->CR, RTC_CR_ALRAFCLR);
 800a674:	4b2b      	ldr	r3, [pc, #172]	@ (800a724 <HAL_RTC_SetAlarm_IT+0x1fc>)
 800a676:	699b      	ldr	r3, [r3, #24]
 800a678:	4a2a      	ldr	r2, [pc, #168]	@ (800a724 <HAL_RTC_SetAlarm_IT+0x1fc>)
 800a67a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a67e:	6193      	str	r3, [r2, #24]
 800a680:	e005      	b.n	800a68e <HAL_RTC_SetAlarm_IT+0x166>
    }
    else
    {
      /* Disable the  Alarm A output clear*/
      CLEAR_BIT(RTC->CR, RTC_CR_ALRAFCLR);
 800a682:	4b28      	ldr	r3, [pc, #160]	@ (800a724 <HAL_RTC_SetAlarm_IT+0x1fc>)
 800a684:	699b      	ldr	r3, [r3, #24]
 800a686:	4a27      	ldr	r2, [pc, #156]	@ (800a724 <HAL_RTC_SetAlarm_IT+0x1fc>)
 800a688:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 800a68c:	6193      	str	r3, [r2, #24]
    }

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800a68e:	4b25      	ldr	r3, [pc, #148]	@ (800a724 <HAL_RTC_SetAlarm_IT+0x1fc>)
 800a690:	699b      	ldr	r3, [r3, #24]
 800a692:	4a24      	ldr	r2, [pc, #144]	@ (800a724 <HAL_RTC_SetAlarm_IT+0x1fc>)
 800a694:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 800a698:	6193      	str	r3, [r2, #24]
 800a69a:	e036      	b.n	800a70a <HAL_RTC_SetAlarm_IT+0x1e2>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800a69c:	4b21      	ldr	r3, [pc, #132]	@ (800a724 <HAL_RTC_SetAlarm_IT+0x1fc>)
 800a69e:	699b      	ldr	r3, [r3, #24]
 800a6a0:	4a20      	ldr	r2, [pc, #128]	@ (800a724 <HAL_RTC_SetAlarm_IT+0x1fc>)
 800a6a2:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 800a6a6:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800a6a8:	4b1e      	ldr	r3, [pc, #120]	@ (800a724 <HAL_RTC_SetAlarm_IT+0x1fc>)
 800a6aa:	2202      	movs	r2, #2
 800a6ac:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 800a6ae:	693b      	ldr	r3, [r7, #16]
 800a6b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a6b4:	d107      	bne.n	800a6c6 <HAL_RTC_SetAlarm_IT+0x19e>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	699a      	ldr	r2, [r3, #24]
 800a6ba:	68bb      	ldr	r3, [r7, #8]
 800a6bc:	69db      	ldr	r3, [r3, #28]
 800a6be:	4919      	ldr	r1, [pc, #100]	@ (800a724 <HAL_RTC_SetAlarm_IT+0x1fc>)
 800a6c0:	4313      	orrs	r3, r2
 800a6c2:	64cb      	str	r3, [r1, #76]	@ 0x4c
 800a6c4:	e006      	b.n	800a6d4 <HAL_RTC_SetAlarm_IT+0x1ac>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 800a6c6:	4a17      	ldr	r2, [pc, #92]	@ (800a724 <HAL_RTC_SetAlarm_IT+0x1fc>)
 800a6c8:	697b      	ldr	r3, [r7, #20]
 800a6ca:	6493      	str	r3, [r2, #72]	@ 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 800a6cc:	4a15      	ldr	r2, [pc, #84]	@ (800a724 <HAL_RTC_SetAlarm_IT+0x1fc>)
 800a6ce:	68bb      	ldr	r3, [r7, #8]
 800a6d0:	699b      	ldr	r3, [r3, #24]
 800a6d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 800a6d4:	4a13      	ldr	r2, [pc, #76]	@ (800a724 <HAL_RTC_SetAlarm_IT+0x1fc>)
 800a6d6:	68bb      	ldr	r3, [r7, #8]
 800a6d8:	685b      	ldr	r3, [r3, #4]
 800a6da:	6753      	str	r3, [r2, #116]	@ 0x74

    if (sAlarm->FlagAutoClr == ALARM_FLAG_AUTOCLR_ENABLE)
 800a6dc:	68bb      	ldr	r3, [r7, #8]
 800a6de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6e0:	2b01      	cmp	r3, #1
 800a6e2:	d106      	bne.n	800a6f2 <HAL_RTC_SetAlarm_IT+0x1ca>
    {
      /* Configure the  Alarm B Output clear */
      SET_BIT(RTC->CR, RTC_CR_ALRBFCLR);
 800a6e4:	4b0f      	ldr	r3, [pc, #60]	@ (800a724 <HAL_RTC_SetAlarm_IT+0x1fc>)
 800a6e6:	699b      	ldr	r3, [r3, #24]
 800a6e8:	4a0e      	ldr	r2, [pc, #56]	@ (800a724 <HAL_RTC_SetAlarm_IT+0x1fc>)
 800a6ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a6ee:	6193      	str	r3, [r2, #24]
 800a6f0:	e005      	b.n	800a6fe <HAL_RTC_SetAlarm_IT+0x1d6>
    }
    else
    {
      /* Disable the  Alarm B Output clear */
      CLEAR_BIT(RTC->CR, RTC_CR_ALRBFCLR);
 800a6f2:	4b0c      	ldr	r3, [pc, #48]	@ (800a724 <HAL_RTC_SetAlarm_IT+0x1fc>)
 800a6f4:	699b      	ldr	r3, [r3, #24]
 800a6f6:	4a0b      	ldr	r2, [pc, #44]	@ (800a724 <HAL_RTC_SetAlarm_IT+0x1fc>)
 800a6f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a6fc:	6193      	str	r3, [r2, #24]
    }

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800a6fe:	4b09      	ldr	r3, [pc, #36]	@ (800a724 <HAL_RTC_SetAlarm_IT+0x1fc>)
 800a700:	699b      	ldr	r3, [r3, #24]
 800a702:	4a08      	ldr	r2, [pc, #32]	@ (800a724 <HAL_RTC_SetAlarm_IT+0x1fc>)
 800a704:	f443 5308 	orr.w	r3, r3, #8704	@ 0x2200
 800a708:	6193      	str	r3, [r2, #24]
  }


  hrtc->State = HAL_RTC_STATE_READY;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	2201      	movs	r2, #1
 800a70e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	2200      	movs	r2, #0
 800a716:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800a71a:	2300      	movs	r3, #0
}
 800a71c:	4618      	mov	r0, r3
 800a71e:	371c      	adds	r7, #28
 800a720:	46bd      	mov	sp, r7
 800a722:	bd90      	pop	{r4, r7, pc}
 800a724:	46007800 	.word	0x46007800

0800a728 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 800a728:	b480      	push	{r7}
 800a72a:	b083      	sub	sp, #12
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
 800a730:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a738:	2b01      	cmp	r3, #1
 800a73a:	d101      	bne.n	800a740 <HAL_RTC_DeactivateAlarm+0x18>
 800a73c:	2302      	movs	r3, #2
 800a73e:	e02d      	b.n	800a79c <HAL_RTC_DeactivateAlarm+0x74>
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2201      	movs	r2, #1
 800a744:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2202      	movs	r2, #2
 800a74c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d


  /* In case of interrupt mode is used, the interrupt source must disabled */
  if (Alarm == RTC_ALARM_A)
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a756:	d10c      	bne.n	800a772 <HAL_RTC_DeactivateAlarm+0x4a>
  {
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800a758:	4b13      	ldr	r3, [pc, #76]	@ (800a7a8 <HAL_RTC_DeactivateAlarm+0x80>)
 800a75a:	699b      	ldr	r3, [r3, #24]
 800a75c:	4a12      	ldr	r2, [pc, #72]	@ (800a7a8 <HAL_RTC_DeactivateAlarm+0x80>)
 800a75e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800a762:	6193      	str	r3, [r2, #24]
    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 800a764:	4b10      	ldr	r3, [pc, #64]	@ (800a7a8 <HAL_RTC_DeactivateAlarm+0x80>)
 800a766:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a768:	4a0f      	ldr	r2, [pc, #60]	@ (800a7a8 <HAL_RTC_DeactivateAlarm+0x80>)
 800a76a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a76e:	6453      	str	r3, [r2, #68]	@ 0x44
 800a770:	e00b      	b.n	800a78a <HAL_RTC_DeactivateAlarm+0x62>
  }
  else
  {
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800a772:	4b0d      	ldr	r3, [pc, #52]	@ (800a7a8 <HAL_RTC_DeactivateAlarm+0x80>)
 800a774:	699b      	ldr	r3, [r3, #24]
 800a776:	4a0c      	ldr	r2, [pc, #48]	@ (800a7a8 <HAL_RTC_DeactivateAlarm+0x80>)
 800a778:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 800a77c:	6193      	str	r3, [r2, #24]
    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 800a77e:	4b0a      	ldr	r3, [pc, #40]	@ (800a7a8 <HAL_RTC_DeactivateAlarm+0x80>)
 800a780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a782:	4a09      	ldr	r2, [pc, #36]	@ (800a7a8 <HAL_RTC_DeactivateAlarm+0x80>)
 800a784:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a788:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }


  hrtc->State = HAL_RTC_STATE_READY;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2201      	movs	r2, #1
 800a78e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2200      	movs	r2, #0
 800a796:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800a79a:	2300      	movs	r3, #0
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	370c      	adds	r7, #12
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a6:	4770      	bx	lr
 800a7a8:	46007800 	.word	0x46007800

0800a7ac <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(const RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm,
                                   uint32_t Format)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b086      	sub	sp, #24
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	60f8      	str	r0, [r7, #12]
 800a7b4:	60b9      	str	r1, [r7, #8]
 800a7b6:	607a      	str	r2, [r7, #4]
 800a7b8:	603b      	str	r3, [r7, #0]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if (Alarm == RTC_ALARM_A)
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a7c0:	d141      	bne.n	800a846 <HAL_RTC_GetAlarm+0x9a>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a7c8:	62da      	str	r2, [r3, #44]	@ 0x2c

    tmpreg = READ_REG(RTC->ALRMAR);
 800a7ca:	4b56      	ldr	r3, [pc, #344]	@ (800a924 <HAL_RTC_GetAlarm+0x178>)
 800a7cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7ce:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)(READ_REG(RTC->ALRMASSR) & RTC_ALRMASSR_SS);
 800a7d0:	4b54      	ldr	r3, [pc, #336]	@ (800a924 <HAL_RTC_GetAlarm+0x178>)
 800a7d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a7d4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800a7d8:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 800a7da:	697b      	ldr	r3, [r7, #20]
 800a7dc:	0c1b      	lsrs	r3, r3, #16
 800a7de:	b2db      	uxtb	r3, r3
 800a7e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a7e4:	b2da      	uxtb	r2, r3
 800a7e6:	68bb      	ldr	r3, [r7, #8]
 800a7e8:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 800a7ea:	697b      	ldr	r3, [r7, #20]
 800a7ec:	0a1b      	lsrs	r3, r3, #8
 800a7ee:	b2db      	uxtb	r3, r3
 800a7f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a7f4:	b2da      	uxtb	r2, r3
 800a7f6:	68bb      	ldr	r3, [r7, #8]
 800a7f8:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 800a7fa:	697b      	ldr	r3, [r7, #20]
 800a7fc:	b2db      	uxtb	r3, r3
 800a7fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a802:	b2da      	uxtb	r2, r3
 800a804:	68bb      	ldr	r3, [r7, #8]
 800a806:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 800a808:	697b      	ldr	r3, [r7, #20]
 800a80a:	0d9b      	lsrs	r3, r3, #22
 800a80c:	b2db      	uxtb	r3, r3
 800a80e:	f003 0301 	and.w	r3, r3, #1
 800a812:	b2da      	uxtb	r2, r3
 800a814:	68bb      	ldr	r3, [r7, #8]
 800a816:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 800a818:	68bb      	ldr	r3, [r7, #8]
 800a81a:	693a      	ldr	r2, [r7, #16]
 800a81c:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 800a81e:	697b      	ldr	r3, [r7, #20]
 800a820:	0e1b      	lsrs	r3, r3, #24
 800a822:	b2db      	uxtb	r3, r3
 800a824:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a828:	b2da      	uxtb	r2, r3
 800a82a:	68bb      	ldr	r3, [r7, #8]
 800a82c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 800a830:	697b      	ldr	r3, [r7, #20]
 800a832:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 800a836:	68bb      	ldr	r3, [r7, #8]
 800a838:	621a      	str	r2, [r3, #32]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 800a83a:	697b      	ldr	r3, [r7, #20]
 800a83c:	f003 3280 	and.w	r2, r3, #2155905152	@ 0x80808080
 800a840:	68bb      	ldr	r3, [r7, #8]
 800a842:	615a      	str	r2, [r3, #20]
 800a844:	e040      	b.n	800a8c8 <HAL_RTC_GetAlarm+0x11c>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 800a846:	68bb      	ldr	r3, [r7, #8]
 800a848:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a84c:	62da      	str	r2, [r3, #44]	@ 0x2c

    tmpreg = READ_REG(RTC->ALRMBR);
 800a84e:	4b35      	ldr	r3, [pc, #212]	@ (800a924 <HAL_RTC_GetAlarm+0x178>)
 800a850:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a852:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)(READ_REG(RTC->ALRMBSSR) & RTC_ALRMBSSR_SS);
 800a854:	4b33      	ldr	r3, [pc, #204]	@ (800a924 <HAL_RTC_GetAlarm+0x178>)
 800a856:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a858:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800a85c:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 800a85e:	697b      	ldr	r3, [r7, #20]
 800a860:	0c1b      	lsrs	r3, r3, #16
 800a862:	b2db      	uxtb	r3, r3
 800a864:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a868:	b2da      	uxtb	r2, r3
 800a86a:	68bb      	ldr	r3, [r7, #8]
 800a86c:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 800a86e:	697b      	ldr	r3, [r7, #20]
 800a870:	0a1b      	lsrs	r3, r3, #8
 800a872:	b2db      	uxtb	r3, r3
 800a874:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a878:	b2da      	uxtb	r2, r3
 800a87a:	68bb      	ldr	r3, [r7, #8]
 800a87c:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 800a87e:	697b      	ldr	r3, [r7, #20]
 800a880:	b2db      	uxtb	r3, r3
 800a882:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a886:	b2da      	uxtb	r2, r3
 800a888:	68bb      	ldr	r3, [r7, #8]
 800a88a:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 800a88c:	697b      	ldr	r3, [r7, #20]
 800a88e:	0d9b      	lsrs	r3, r3, #22
 800a890:	b2db      	uxtb	r3, r3
 800a892:	f003 0301 	and.w	r3, r3, #1
 800a896:	b2da      	uxtb	r2, r3
 800a898:	68bb      	ldr	r3, [r7, #8]
 800a89a:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	693a      	ldr	r2, [r7, #16]
 800a8a0:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 800a8a2:	697b      	ldr	r3, [r7, #20]
 800a8a4:	0e1b      	lsrs	r3, r3, #24
 800a8a6:	b2db      	uxtb	r3, r3
 800a8a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a8ac:	b2da      	uxtb	r2, r3
 800a8ae:	68bb      	ldr	r3, [r7, #8]
 800a8b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 800a8b4:	697b      	ldr	r3, [r7, #20]
 800a8b6:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 800a8ba:	68bb      	ldr	r3, [r7, #8]
 800a8bc:	621a      	str	r2, [r3, #32]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 800a8be:	697b      	ldr	r3, [r7, #20]
 800a8c0:	f003 3280 	and.w	r2, r3, #2155905152	@ 0x80808080
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	615a      	str	r2, [r3, #20]
  }

  if (Format == RTC_FORMAT_BIN)
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d125      	bne.n	800a91a <HAL_RTC_GetAlarm+0x16e>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 800a8ce:	68bb      	ldr	r3, [r7, #8]
 800a8d0:	781b      	ldrb	r3, [r3, #0]
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	f000 f926 	bl	800ab24 <RTC_Bcd2ToByte>
 800a8d8:	4603      	mov	r3, r0
 800a8da:	461a      	mov	r2, r3
 800a8dc:	68bb      	ldr	r3, [r7, #8]
 800a8de:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 800a8e0:	68bb      	ldr	r3, [r7, #8]
 800a8e2:	785b      	ldrb	r3, [r3, #1]
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	f000 f91d 	bl	800ab24 <RTC_Bcd2ToByte>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	461a      	mov	r2, r3
 800a8ee:	68bb      	ldr	r3, [r7, #8]
 800a8f0:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 800a8f2:	68bb      	ldr	r3, [r7, #8]
 800a8f4:	789b      	ldrb	r3, [r3, #2]
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f000 f914 	bl	800ab24 <RTC_Bcd2ToByte>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	461a      	mov	r2, r3
 800a900:	68bb      	ldr	r3, [r7, #8]
 800a902:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 800a904:	68bb      	ldr	r3, [r7, #8]
 800a906:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a90a:	4618      	mov	r0, r3
 800a90c:	f000 f90a 	bl	800ab24 <RTC_Bcd2ToByte>
 800a910:	4603      	mov	r3, r0
 800a912:	461a      	mov	r2, r3
 800a914:	68bb      	ldr	r3, [r7, #8]
 800a916:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 800a91a:	2300      	movs	r3, #0
}
 800a91c:	4618      	mov	r0, r3
 800a91e:	3718      	adds	r7, #24
 800a920:	46bd      	mov	sp, r7
 800a922:	bd80      	pop	{r7, pc}
 800a924:	46007800 	.word	0x46007800

0800a928 <HAL_RTC_AlarmIRQHandler>:
  * @note   Alarm non-secure is available in non-secure driver.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b084      	sub	sp, #16
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
  /* Get interrupt status */
  uint32_t tmp = READ_REG(RTC->MISR);
 800a930:	4b10      	ldr	r3, [pc, #64]	@ (800a974 <HAL_RTC_AlarmIRQHandler+0x4c>)
 800a932:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a934:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	f003 0301 	and.w	r3, r3, #1
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d005      	beq.n	800a94c <HAL_RTC_AlarmIRQHandler+0x24>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800a940:	4b0c      	ldr	r3, [pc, #48]	@ (800a974 <HAL_RTC_AlarmIRQHandler+0x4c>)
 800a942:	2201      	movs	r2, #1
 800a944:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	f000 f816 	bl	800a978 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	f003 0302 	and.w	r3, r3, #2
 800a952:	2b00      	cmp	r3, #0
 800a954:	d005      	beq.n	800a962 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800a956:	4b07      	ldr	r3, [pc, #28]	@ (800a974 <HAL_RTC_AlarmIRQHandler+0x4c>)
 800a958:	2202      	movs	r2, #2
 800a95a:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	f000 f92b 	bl	800abb8 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2201      	movs	r2, #1
 800a966:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 800a96a:	bf00      	nop
 800a96c:	3710      	adds	r7, #16
 800a96e:	46bd      	mov	sp, r7
 800a970:	bd80      	pop	{r7, pc}
 800a972:	bf00      	nop
 800a974:	46007800 	.word	0x46007800

0800a978 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A secure secure callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800a978:	b480      	push	{r7}
 800a97a:	b083      	sub	sp, #12
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the secure secure callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 800a980:	bf00      	nop
 800a982:	370c      	adds	r7, #12
 800a984:	46bd      	mov	sp, r7
 800a986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98a:	4770      	bx	lr

0800a98c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b084      	sub	sp, #16
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800a994:	4b15      	ldr	r3, [pc, #84]	@ (800a9ec <HAL_RTC_WaitForSynchro+0x60>)
 800a996:	68db      	ldr	r3, [r3, #12]
 800a998:	4a14      	ldr	r2, [pc, #80]	@ (800a9ec <HAL_RTC_WaitForSynchro+0x60>)
 800a99a:	f023 0320 	bic.w	r3, r3, #32
 800a99e:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800a9a0:	f7fa f838 	bl	8004a14 <HAL_GetTick>
 800a9a4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800a9a6:	e013      	b.n	800a9d0 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a9a8:	f7fa f834 	bl	8004a14 <HAL_GetTick>
 800a9ac:	4602      	mov	r2, r0
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	1ad3      	subs	r3, r2, r3
 800a9b2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a9b6:	d90b      	bls.n	800a9d0 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800a9b8:	4b0c      	ldr	r3, [pc, #48]	@ (800a9ec <HAL_RTC_WaitForSynchro+0x60>)
 800a9ba:	68db      	ldr	r3, [r3, #12]
 800a9bc:	f003 0320 	and.w	r3, r3, #32
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d10c      	bne.n	800a9de <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2203      	movs	r2, #3
 800a9c8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 800a9cc:	2303      	movs	r3, #3
 800a9ce:	e008      	b.n	800a9e2 <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800a9d0:	4b06      	ldr	r3, [pc, #24]	@ (800a9ec <HAL_RTC_WaitForSynchro+0x60>)
 800a9d2:	68db      	ldr	r3, [r3, #12]
 800a9d4:	f003 0320 	and.w	r3, r3, #32
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d0e5      	beq.n	800a9a8 <HAL_RTC_WaitForSynchro+0x1c>
 800a9dc:	e000      	b.n	800a9e0 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800a9de:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800a9e0:	2300      	movs	r3, #0
}
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	3710      	adds	r7, #16
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}
 800a9ea:	bf00      	nop
 800a9ec:	46007800 	.word	0x46007800

0800a9f0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b084      	sub	sp, #16
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800a9fc:	4b19      	ldr	r3, [pc, #100]	@ (800aa64 <RTC_EnterInitMode+0x74>)
 800a9fe:	68db      	ldr	r3, [r3, #12]
 800aa00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d128      	bne.n	800aa5a <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800aa08:	4b16      	ldr	r3, [pc, #88]	@ (800aa64 <RTC_EnterInitMode+0x74>)
 800aa0a:	68db      	ldr	r3, [r3, #12]
 800aa0c:	4a15      	ldr	r2, [pc, #84]	@ (800aa64 <RTC_EnterInitMode+0x74>)
 800aa0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa12:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800aa14:	f7f9 fffe 	bl	8004a14 <HAL_GetTick>
 800aa18:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800aa1a:	e013      	b.n	800aa44 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800aa1c:	f7f9 fffa 	bl	8004a14 <HAL_GetTick>
 800aa20:	4602      	mov	r2, r0
 800aa22:	68bb      	ldr	r3, [r7, #8]
 800aa24:	1ad3      	subs	r3, r2, r3
 800aa26:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800aa2a:	d90b      	bls.n	800aa44 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800aa2c:	4b0d      	ldr	r3, [pc, #52]	@ (800aa64 <RTC_EnterInitMode+0x74>)
 800aa2e:	68db      	ldr	r3, [r3, #12]
 800aa30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d10f      	bne.n	800aa58 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800aa38:	2303      	movs	r3, #3
 800aa3a:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2203      	movs	r2, #3
 800aa40:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800aa44:	4b07      	ldr	r3, [pc, #28]	@ (800aa64 <RTC_EnterInitMode+0x74>)
 800aa46:	68db      	ldr	r3, [r3, #12]
 800aa48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d104      	bne.n	800aa5a <RTC_EnterInitMode+0x6a>
 800aa50:	7bfb      	ldrb	r3, [r7, #15]
 800aa52:	2b03      	cmp	r3, #3
 800aa54:	d1e2      	bne.n	800aa1c <RTC_EnterInitMode+0x2c>
 800aa56:	e000      	b.n	800aa5a <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800aa58:	bf00      	nop
        }
      }
    }
  }

  return status;
 800aa5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	3710      	adds	r7, #16
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bd80      	pop	{r7, pc}
 800aa64:	46007800 	.word	0x46007800

0800aa68 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b084      	sub	sp, #16
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aa70:	2300      	movs	r3, #0
 800aa72:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800aa74:	4b1a      	ldr	r3, [pc, #104]	@ (800aae0 <RTC_ExitInitMode+0x78>)
 800aa76:	68db      	ldr	r3, [r3, #12]
 800aa78:	4a19      	ldr	r2, [pc, #100]	@ (800aae0 <RTC_ExitInitMode+0x78>)
 800aa7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aa7e:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800aa80:	4b17      	ldr	r3, [pc, #92]	@ (800aae0 <RTC_ExitInitMode+0x78>)
 800aa82:	699b      	ldr	r3, [r3, #24]
 800aa84:	f003 0320 	and.w	r3, r3, #32
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d10c      	bne.n	800aaa6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800aa8c:	6878      	ldr	r0, [r7, #4]
 800aa8e:	f7ff ff7d 	bl	800a98c <HAL_RTC_WaitForSynchro>
 800aa92:	4603      	mov	r3, r0
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d01e      	beq.n	800aad6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2203      	movs	r2, #3
 800aa9c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800aaa0:	2303      	movs	r3, #3
 800aaa2:	73fb      	strb	r3, [r7, #15]
 800aaa4:	e017      	b.n	800aad6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800aaa6:	4b0e      	ldr	r3, [pc, #56]	@ (800aae0 <RTC_ExitInitMode+0x78>)
 800aaa8:	699b      	ldr	r3, [r3, #24]
 800aaaa:	4a0d      	ldr	r2, [pc, #52]	@ (800aae0 <RTC_ExitInitMode+0x78>)
 800aaac:	f023 0320 	bic.w	r3, r3, #32
 800aab0:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800aab2:	6878      	ldr	r0, [r7, #4]
 800aab4:	f7ff ff6a 	bl	800a98c <HAL_RTC_WaitForSynchro>
 800aab8:	4603      	mov	r3, r0
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d005      	beq.n	800aaca <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	2203      	movs	r2, #3
 800aac2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800aac6:	2303      	movs	r3, #3
 800aac8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800aaca:	4b05      	ldr	r3, [pc, #20]	@ (800aae0 <RTC_ExitInitMode+0x78>)
 800aacc:	699b      	ldr	r3, [r3, #24]
 800aace:	4a04      	ldr	r2, [pc, #16]	@ (800aae0 <RTC_ExitInitMode+0x78>)
 800aad0:	f043 0320 	orr.w	r3, r3, #32
 800aad4:	6193      	str	r3, [r2, #24]
  }
  return status;
 800aad6:	7bfb      	ldrb	r3, [r7, #15]
}
 800aad8:	4618      	mov	r0, r3
 800aada:	3710      	adds	r7, #16
 800aadc:	46bd      	mov	sp, r7
 800aade:	bd80      	pop	{r7, pc}
 800aae0:	46007800 	.word	0x46007800

0800aae4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800aae4:	b480      	push	{r7}
 800aae6:	b085      	sub	sp, #20
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	4603      	mov	r3, r0
 800aaec:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800aaee:	2300      	movs	r3, #0
 800aaf0:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 800aaf2:	79fb      	ldrb	r3, [r7, #7]
 800aaf4:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 800aaf6:	e005      	b.n	800ab04 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	3301      	adds	r3, #1
 800aafc:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800aafe:	7afb      	ldrb	r3, [r7, #11]
 800ab00:	3b0a      	subs	r3, #10
 800ab02:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 800ab04:	7afb      	ldrb	r3, [r7, #11]
 800ab06:	2b09      	cmp	r3, #9
 800ab08:	d8f6      	bhi.n	800aaf8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	b2db      	uxtb	r3, r3
 800ab0e:	011b      	lsls	r3, r3, #4
 800ab10:	b2da      	uxtb	r2, r3
 800ab12:	7afb      	ldrb	r3, [r7, #11]
 800ab14:	4313      	orrs	r3, r2
 800ab16:	b2db      	uxtb	r3, r3
}
 800ab18:	4618      	mov	r0, r3
 800ab1a:	3714      	adds	r7, #20
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab22:	4770      	bx	lr

0800ab24 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800ab24:	b480      	push	{r7}
 800ab26:	b085      	sub	sp, #20
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 800ab2e:	79fb      	ldrb	r3, [r7, #7]
 800ab30:	091b      	lsrs	r3, r3, #4
 800ab32:	b2db      	uxtb	r3, r3
 800ab34:	461a      	mov	r2, r3
 800ab36:	4613      	mov	r3, r2
 800ab38:	009b      	lsls	r3, r3, #2
 800ab3a:	4413      	add	r3, r2
 800ab3c:	005b      	lsls	r3, r3, #1
 800ab3e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	b2da      	uxtb	r2, r3
 800ab44:	79fb      	ldrb	r3, [r7, #7]
 800ab46:	f003 030f 	and.w	r3, r3, #15
 800ab4a:	b2db      	uxtb	r3, r3
 800ab4c:	4413      	add	r3, r2
 800ab4e:	b2db      	uxtb	r3, r3
}
 800ab50:	4618      	mov	r0, r3
 800ab52:	3714      	adds	r7, #20
 800ab54:	46bd      	mov	sp, r7
 800ab56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5a:	4770      	bx	lr

0800ab5c <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 800ab5c:	b480      	push	{r7}
 800ab5e:	b083      	sub	sp, #12
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800ab6a:	2b01      	cmp	r3, #1
 800ab6c:	d101      	bne.n	800ab72 <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 800ab6e:	2302      	movs	r3, #2
 800ab70:	e019      	b.n	800aba6 <HAL_RTCEx_DeactivateWakeUpTimer+0x4a>
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	2201      	movs	r2, #1
 800ab76:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2202      	movs	r2, #2
 800ab7e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d


  /* Disable the Wakeup Timer */
  /* In case of interrupt mode is used, the interrupt source must disabled */
  CLEAR_BIT(RTC->CR, (RTC_CR_WUTE | RTC_CR_WUTIE));
 800ab82:	4b0c      	ldr	r3, [pc, #48]	@ (800abb4 <HAL_RTCEx_DeactivateWakeUpTimer+0x58>)
 800ab84:	699b      	ldr	r3, [r3, #24]
 800ab86:	4a0b      	ldr	r2, [pc, #44]	@ (800abb4 <HAL_RTCEx_DeactivateWakeUpTimer+0x58>)
 800ab88:	f423 4388 	bic.w	r3, r3, #17408	@ 0x4400
 800ab8c:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ab8e:	4b09      	ldr	r3, [pc, #36]	@ (800abb4 <HAL_RTCEx_DeactivateWakeUpTimer+0x58>)
 800ab90:	22ff      	movs	r2, #255	@ 0xff
 800ab92:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2201      	movs	r2, #1
 800ab98:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2200      	movs	r2, #0
 800aba0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800aba4:	2300      	movs	r3, #0
}
 800aba6:	4618      	mov	r0, r3
 800aba8:	370c      	adds	r7, #12
 800abaa:	46bd      	mov	sp, r7
 800abac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb0:	4770      	bx	lr
 800abb2:	bf00      	nop
 800abb4:	46007800 	.word	0x46007800

0800abb8 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800abb8:	b480      	push	{r7}
 800abba:	b083      	sub	sp, #12
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800abc0:	bf00      	nop
 800abc2:	370c      	adds	r7, #12
 800abc4:	46bd      	mov	sp, r7
 800abc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abca:	4770      	bx	lr

0800abcc <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 800abcc:	b480      	push	{r7}
 800abce:	b083      	sub	sp, #12
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
 800abd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	681a      	ldr	r2, [r3, #0]
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	685b      	ldr	r3, [r3, #4]
 800abde:	4910      	ldr	r1, [pc, #64]	@ (800ac20 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800abe0:	4313      	orrs	r3, r2
 800abe2:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	689a      	ldr	r2, [r3, #8]
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	68db      	ldr	r3, [r3, #12]
 800abec:	431a      	orrs	r2, r3
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	699b      	ldr	r3, [r3, #24]
 800abf2:	490c      	ldr	r1, [pc, #48]	@ (800ac24 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800abf4:	4313      	orrs	r3, r2
 800abf6:	624b      	str	r3, [r1, #36]	@ 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 800abf8:	4b0a      	ldr	r3, [pc, #40]	@ (800ac24 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800abfa:	6a1b      	ldr	r3, [r3, #32]
 800abfc:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	6919      	ldr	r1, [r3, #16]
 800ac04:	683b      	ldr	r3, [r7, #0]
 800ac06:	695b      	ldr	r3, [r3, #20]
 800ac08:	041b      	lsls	r3, r3, #16
 800ac0a:	430b      	orrs	r3, r1
 800ac0c:	4905      	ldr	r1, [pc, #20]	@ (800ac24 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800ac0e:	4313      	orrs	r3, r2
 800ac10:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 800ac12:	2300      	movs	r3, #0
}
 800ac14:	4618      	mov	r0, r3
 800ac16:	370c      	adds	r7, #12
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1e:	4770      	bx	lr
 800ac20:	46007800 	.word	0x46007800
 800ac24:	46007c00 	.word	0x46007c00

0800ac28 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b084      	sub	sp, #16
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d101      	bne.n	800ac3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ac36:	2301      	movs	r3, #1
 800ac38:	e0fb      	b.n	800ae32 <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	4a7f      	ldr	r2, [pc, #508]	@ (800ae3c <HAL_SPI_Init+0x214>)
 800ac40:	4293      	cmp	r3, r2
 800ac42:	d004      	beq.n	800ac4e <HAL_SPI_Init+0x26>
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	4a7d      	ldr	r2, [pc, #500]	@ (800ae40 <HAL_SPI_Init+0x218>)
 800ac4a:	4293      	cmp	r3, r2
 800ac4c:	e000      	b.n	800ac50 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800ac4e:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2200      	movs	r2, #0
 800ac54:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	4a78      	ldr	r2, [pc, #480]	@ (800ae3c <HAL_SPI_Init+0x214>)
 800ac5c:	4293      	cmp	r3, r2
 800ac5e:	d004      	beq.n	800ac6a <HAL_SPI_Init+0x42>
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	4a76      	ldr	r2, [pc, #472]	@ (800ae40 <HAL_SPI_Init+0x218>)
 800ac66:	4293      	cmp	r3, r2
 800ac68:	d105      	bne.n	800ac76 <HAL_SPI_Init+0x4e>
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	68db      	ldr	r3, [r3, #12]
 800ac6e:	2b0f      	cmp	r3, #15
 800ac70:	d901      	bls.n	800ac76 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 800ac72:	2301      	movs	r3, #1
 800ac74:	e0dd      	b.n	800ae32 <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800ac76:	6878      	ldr	r0, [r7, #4]
 800ac78:	f000 fe76 	bl	800b968 <SPI_GetPacketSize>
 800ac7c:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	4a6e      	ldr	r2, [pc, #440]	@ (800ae3c <HAL_SPI_Init+0x214>)
 800ac84:	4293      	cmp	r3, r2
 800ac86:	d004      	beq.n	800ac92 <HAL_SPI_Init+0x6a>
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	4a6c      	ldr	r2, [pc, #432]	@ (800ae40 <HAL_SPI_Init+0x218>)
 800ac8e:	4293      	cmp	r3, r2
 800ac90:	d102      	bne.n	800ac98 <HAL_SPI_Init+0x70>
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	2b08      	cmp	r3, #8
 800ac96:	d816      	bhi.n	800acc6 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ac9c:	4a69      	ldr	r2, [pc, #420]	@ (800ae44 <HAL_SPI_Init+0x21c>)
 800ac9e:	4293      	cmp	r3, r2
 800aca0:	d00e      	beq.n	800acc0 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	4a68      	ldr	r2, [pc, #416]	@ (800ae48 <HAL_SPI_Init+0x220>)
 800aca8:	4293      	cmp	r3, r2
 800acaa:	d009      	beq.n	800acc0 <HAL_SPI_Init+0x98>
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	4a66      	ldr	r2, [pc, #408]	@ (800ae4c <HAL_SPI_Init+0x224>)
 800acb2:	4293      	cmp	r3, r2
 800acb4:	d004      	beq.n	800acc0 <HAL_SPI_Init+0x98>
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	4a65      	ldr	r2, [pc, #404]	@ (800ae50 <HAL_SPI_Init+0x228>)
 800acbc:	4293      	cmp	r3, r2
 800acbe:	d104      	bne.n	800acca <HAL_SPI_Init+0xa2>
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	2b10      	cmp	r3, #16
 800acc4:	d901      	bls.n	800acca <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 800acc6:	2301      	movs	r3, #1
 800acc8:	e0b3      	b.n	800ae32 <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800acd0:	b2db      	uxtb	r3, r3
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d106      	bne.n	800ace4 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	2200      	movs	r2, #0
 800acda:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	f7f9 fbac 	bl	800443c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2202      	movs	r2, #2
 800ace8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	681a      	ldr	r2, [r3, #0]
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	f022 0201 	bic.w	r2, r2, #1
 800acfa:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	689b      	ldr	r3, [r3, #8]
 800ad02:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800ad06:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	699b      	ldr	r3, [r3, #24]
 800ad0c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ad10:	d119      	bne.n	800ad46 <HAL_SPI_Init+0x11e>
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	685b      	ldr	r3, [r3, #4]
 800ad16:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ad1a:	d103      	bne.n	800ad24 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d008      	beq.n	800ad36 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d10c      	bne.n	800ad46 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ad30:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ad34:	d107      	bne.n	800ad46 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	681a      	ldr	r2, [r3, #0]
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800ad44:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	685b      	ldr	r3, [r3, #4]
 800ad4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d00f      	beq.n	800ad72 <HAL_SPI_Init+0x14a>
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	68db      	ldr	r3, [r3, #12]
 800ad56:	2b06      	cmp	r3, #6
 800ad58:	d90b      	bls.n	800ad72 <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	430a      	orrs	r2, r1
 800ad6e:	601a      	str	r2, [r3, #0]
 800ad70:	e007      	b.n	800ad82 <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	681a      	ldr	r2, [r3, #0]
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ad80:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	69da      	ldr	r2, [r3, #28]
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad8a:	431a      	orrs	r2, r3
 800ad8c:	68bb      	ldr	r3, [r7, #8]
 800ad8e:	431a      	orrs	r2, r3
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad94:	ea42 0103 	orr.w	r1, r2, r3
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	68da      	ldr	r2, [r3, #12]
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	430a      	orrs	r2, r1
 800ada2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adac:	431a      	orrs	r2, r3
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800adb2:	431a      	orrs	r2, r3
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	699b      	ldr	r3, [r3, #24]
 800adb8:	431a      	orrs	r2, r3
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	691b      	ldr	r3, [r3, #16]
 800adbe:	431a      	orrs	r2, r3
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	695b      	ldr	r3, [r3, #20]
 800adc4:	431a      	orrs	r2, r3
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6a1b      	ldr	r3, [r3, #32]
 800adca:	431a      	orrs	r2, r3
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	685b      	ldr	r3, [r3, #4]
 800add0:	431a      	orrs	r2, r3
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800add6:	431a      	orrs	r2, r3
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	689b      	ldr	r3, [r3, #8]
 800addc:	431a      	orrs	r2, r3
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ade2:	431a      	orrs	r2, r3
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ade8:	431a      	orrs	r2, r3
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800adee:	ea42 0103 	orr.w	r1, r2, r3
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	430a      	orrs	r2, r1
 800adfc:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	685b      	ldr	r3, [r3, #4]
 800ae02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d00a      	beq.n	800ae20 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	68db      	ldr	r3, [r3, #12]
 800ae10:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	430a      	orrs	r2, r1
 800ae1e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2200      	movs	r2, #0
 800ae24:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2201      	movs	r2, #1
 800ae2c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 800ae30:	2300      	movs	r3, #0
}
 800ae32:	4618      	mov	r0, r3
 800ae34:	3710      	adds	r7, #16
 800ae36:	46bd      	mov	sp, r7
 800ae38:	bd80      	pop	{r7, pc}
 800ae3a:	bf00      	nop
 800ae3c:	46002000 	.word	0x46002000
 800ae40:	56002000 	.word	0x56002000
 800ae44:	40013000 	.word	0x40013000
 800ae48:	50013000 	.word	0x50013000
 800ae4c:	40003800 	.word	0x40003800
 800ae50:	50003800 	.word	0x50003800

0800ae54 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b088      	sub	sp, #32
 800ae58:	af02      	add	r7, sp, #8
 800ae5a:	60f8      	str	r0, [r7, #12]
 800ae5c:	60b9      	str	r1, [r7, #8]
 800ae5e:	603b      	str	r3, [r7, #0]
 800ae60:	4613      	mov	r3, r2
 800ae62:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	3320      	adds	r3, #32
 800ae6a:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Check transfer size parameter */
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	4a90      	ldr	r2, [pc, #576]	@ (800b0b4 <HAL_SPI_Transmit+0x260>)
 800ae72:	4293      	cmp	r3, r2
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ae74:	f7f9 fdce 	bl	8004a14 <HAL_GetTick>
 800ae78:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800ae80:	b2db      	uxtb	r3, r3
 800ae82:	2b01      	cmp	r3, #1
 800ae84:	d001      	beq.n	800ae8a <HAL_SPI_Transmit+0x36>
  {
    return HAL_BUSY;
 800ae86:	2302      	movs	r3, #2
 800ae88:	e1f4      	b.n	800b274 <HAL_SPI_Transmit+0x420>
  }

  if ((pData == NULL) || (Size == 0UL))
 800ae8a:	68bb      	ldr	r3, [r7, #8]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d002      	beq.n	800ae96 <HAL_SPI_Transmit+0x42>
 800ae90:	88fb      	ldrh	r3, [r7, #6]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d101      	bne.n	800ae9a <HAL_SPI_Transmit+0x46>
  {
    return HAL_ERROR;
 800ae96:	2301      	movs	r3, #1
 800ae98:	e1ec      	b.n	800b274 <HAL_SPI_Transmit+0x420>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800aea0:	2b01      	cmp	r3, #1
 800aea2:	d101      	bne.n	800aea8 <HAL_SPI_Transmit+0x54>
 800aea4:	2302      	movs	r3, #2
 800aea6:	e1e5      	b.n	800b274 <HAL_SPI_Transmit+0x420>
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	2201      	movs	r2, #1
 800aeac:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	2203      	movs	r2, #3
 800aeb4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	2200      	movs	r2, #0
 800aebc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	68ba      	ldr	r2, [r7, #8]
 800aec4:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	88fa      	ldrh	r2, [r7, #6]
 800aeca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	88fa      	ldrh	r2, [r7, #6]
 800aed2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	2200      	movs	r2, #0
 800aeda:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	2200      	movs	r2, #0
 800aee0:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	2200      	movs	r2, #0
 800aee8:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	2200      	movs	r2, #0
 800aef0:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	2200      	movs	r2, #0
 800aef6:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	689b      	ldr	r3, [r3, #8]
 800aefc:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800af00:	d108      	bne.n	800af14 <HAL_SPI_Transmit+0xc0>
  {
    SPI_1LINE_TX(hspi);
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	681a      	ldr	r2, [r3, #0]
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800af10:	601a      	str	r2, [r3, #0]
 800af12:	e009      	b.n	800af28 <HAL_SPI_Transmit+0xd4>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	68db      	ldr	r3, [r3, #12]
 800af1a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800af26:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	685b      	ldr	r3, [r3, #4]
 800af2e:	0c1b      	lsrs	r3, r3, #16
 800af30:	041b      	lsls	r3, r3, #16
 800af32:	88f9      	ldrh	r1, [r7, #6]
 800af34:	68fa      	ldr	r2, [r7, #12]
 800af36:	6812      	ldr	r2, [r2, #0]
 800af38:	430b      	orrs	r3, r1
 800af3a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	681a      	ldr	r2, [r3, #0]
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	f042 0201 	orr.w	r2, r2, #1
 800af4a:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	69db      	ldr	r3, [r3, #28]
 800af52:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800af56:	2b00      	cmp	r3, #0
 800af58:	d10c      	bne.n	800af74 <HAL_SPI_Transmit+0x120>
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	685b      	ldr	r3, [r3, #4]
 800af5e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800af62:	d107      	bne.n	800af74 <HAL_SPI_Transmit+0x120>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	681a      	ldr	r2, [r3, #0]
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800af72:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	68db      	ldr	r3, [r3, #12]
 800af78:	2b0f      	cmp	r3, #15
 800af7a:	d95b      	bls.n	800b034 <HAL_SPI_Transmit+0x1e0>
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	4a4d      	ldr	r2, [pc, #308]	@ (800b0b8 <HAL_SPI_Transmit+0x264>)
 800af82:	4293      	cmp	r3, r2
 800af84:	d04f      	beq.n	800b026 <HAL_SPI_Transmit+0x1d2>
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	4a4c      	ldr	r2, [pc, #304]	@ (800b0bc <HAL_SPI_Transmit+0x268>)
 800af8c:	4293      	cmp	r3, r2
 800af8e:	d04a      	beq.n	800b026 <HAL_SPI_Transmit+0x1d2>
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	4a4a      	ldr	r2, [pc, #296]	@ (800b0c0 <HAL_SPI_Transmit+0x26c>)
 800af96:	4293      	cmp	r3, r2
 800af98:	d045      	beq.n	800b026 <HAL_SPI_Transmit+0x1d2>
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	4a49      	ldr	r2, [pc, #292]	@ (800b0c4 <HAL_SPI_Transmit+0x270>)
 800afa0:	4293      	cmp	r3, r2
 800afa2:	d147      	bne.n	800b034 <HAL_SPI_Transmit+0x1e0>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800afa4:	e03f      	b.n	800b026 <HAL_SPI_Transmit+0x1d2>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	695b      	ldr	r3, [r3, #20]
 800afac:	f003 0302 	and.w	r3, r3, #2
 800afb0:	2b02      	cmp	r3, #2
 800afb2:	d114      	bne.n	800afde <HAL_SPI_Transmit+0x18a>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	6812      	ldr	r2, [r2, #0]
 800afbe:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800afc4:	1d1a      	adds	r2, r3, #4
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800afd0:	b29b      	uxth	r3, r3
 800afd2:	3b01      	subs	r3, #1
 800afd4:	b29a      	uxth	r2, r3
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800afdc:	e023      	b.n	800b026 <HAL_SPI_Transmit+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800afde:	f7f9 fd19 	bl	8004a14 <HAL_GetTick>
 800afe2:	4602      	mov	r2, r0
 800afe4:	693b      	ldr	r3, [r7, #16]
 800afe6:	1ad3      	subs	r3, r2, r3
 800afe8:	683a      	ldr	r2, [r7, #0]
 800afea:	429a      	cmp	r2, r3
 800afec:	d803      	bhi.n	800aff6 <HAL_SPI_Transmit+0x1a2>
 800afee:	683b      	ldr	r3, [r7, #0]
 800aff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aff4:	d102      	bne.n	800affc <HAL_SPI_Transmit+0x1a8>
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d114      	bne.n	800b026 <HAL_SPI_Transmit+0x1d2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800affc:	68f8      	ldr	r0, [r7, #12]
 800affe:	f000 fbe5 	bl	800b7cc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b008:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	2201      	movs	r2, #1
 800b016:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	2200      	movs	r2, #0
 800b01e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800b022:	2303      	movs	r3, #3
 800b024:	e126      	b.n	800b274 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b02c:	b29b      	uxth	r3, r3
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d1b9      	bne.n	800afa6 <HAL_SPI_Transmit+0x152>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800b032:	e0f9      	b.n	800b228 <HAL_SPI_Transmit+0x3d4>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	68db      	ldr	r3, [r3, #12]
 800b038:	2b07      	cmp	r3, #7
 800b03a:	f240 80ee 	bls.w	800b21a <HAL_SPI_Transmit+0x3c6>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800b03e:	e067      	b.n	800b110 <HAL_SPI_Transmit+0x2bc>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	695b      	ldr	r3, [r3, #20]
 800b046:	f003 0302 	and.w	r3, r3, #2
 800b04a:	2b02      	cmp	r3, #2
 800b04c:	d13c      	bne.n	800b0c8 <HAL_SPI_Transmit+0x274>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b054:	b29b      	uxth	r3, r3
 800b056:	2b01      	cmp	r3, #1
 800b058:	d918      	bls.n	800b08c <HAL_SPI_Transmit+0x238>
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d014      	beq.n	800b08c <HAL_SPI_Transmit+0x238>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	6812      	ldr	r2, [r2, #0]
 800b06c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b072:	1d1a      	adds	r2, r3, #4
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b07e:	b29b      	uxth	r3, r3
 800b080:	3b02      	subs	r3, #2
 800b082:	b29a      	uxth	r2, r3
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b08a:	e041      	b.n	800b110 <HAL_SPI_Transmit+0x2bc>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b090:	881a      	ldrh	r2, [r3, #0]
 800b092:	697b      	ldr	r3, [r7, #20]
 800b094:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b09a:	1c9a      	adds	r2, r3, #2
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b0a6:	b29b      	uxth	r3, r3
 800b0a8:	3b01      	subs	r3, #1
 800b0aa:	b29a      	uxth	r2, r3
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b0b2:	e02d      	b.n	800b110 <HAL_SPI_Transmit+0x2bc>
 800b0b4:	46002000 	.word	0x46002000
 800b0b8:	40013000 	.word	0x40013000
 800b0bc:	50013000 	.word	0x50013000
 800b0c0:	40003800 	.word	0x40003800
 800b0c4:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b0c8:	f7f9 fca4 	bl	8004a14 <HAL_GetTick>
 800b0cc:	4602      	mov	r2, r0
 800b0ce:	693b      	ldr	r3, [r7, #16]
 800b0d0:	1ad3      	subs	r3, r2, r3
 800b0d2:	683a      	ldr	r2, [r7, #0]
 800b0d4:	429a      	cmp	r2, r3
 800b0d6:	d803      	bhi.n	800b0e0 <HAL_SPI_Transmit+0x28c>
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0de:	d102      	bne.n	800b0e6 <HAL_SPI_Transmit+0x292>
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d114      	bne.n	800b110 <HAL_SPI_Transmit+0x2bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b0e6:	68f8      	ldr	r0, [r7, #12]
 800b0e8:	f000 fb70 	bl	800b7cc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b0f2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	2201      	movs	r2, #1
 800b100:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	2200      	movs	r2, #0
 800b108:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800b10c:	2303      	movs	r3, #3
 800b10e:	e0b1      	b.n	800b274 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b116:	b29b      	uxth	r3, r3
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d191      	bne.n	800b040 <HAL_SPI_Transmit+0x1ec>
 800b11c:	e084      	b.n	800b228 <HAL_SPI_Transmit+0x3d4>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	695b      	ldr	r3, [r3, #20]
 800b124:	f003 0302 	and.w	r3, r3, #2
 800b128:	2b02      	cmp	r3, #2
 800b12a:	d152      	bne.n	800b1d2 <HAL_SPI_Transmit+0x37e>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b132:	b29b      	uxth	r3, r3
 800b134:	2b03      	cmp	r3, #3
 800b136:	d918      	bls.n	800b16a <HAL_SPI_Transmit+0x316>
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b13c:	2b40      	cmp	r3, #64	@ 0x40
 800b13e:	d914      	bls.n	800b16a <HAL_SPI_Transmit+0x316>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	6812      	ldr	r2, [r2, #0]
 800b14a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b150:	1d1a      	adds	r2, r3, #4
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b15c:	b29b      	uxth	r3, r3
 800b15e:	3b04      	subs	r3, #4
 800b160:	b29a      	uxth	r2, r3
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b168:	e057      	b.n	800b21a <HAL_SPI_Transmit+0x3c6>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b170:	b29b      	uxth	r3, r3
 800b172:	2b01      	cmp	r3, #1
 800b174:	d917      	bls.n	800b1a6 <HAL_SPI_Transmit+0x352>
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d013      	beq.n	800b1a6 <HAL_SPI_Transmit+0x352>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b182:	881a      	ldrh	r2, [r3, #0]
 800b184:	697b      	ldr	r3, [r7, #20]
 800b186:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b18c:	1c9a      	adds	r2, r3, #2
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b198:	b29b      	uxth	r3, r3
 800b19a:	3b02      	subs	r3, #2
 800b19c:	b29a      	uxth	r2, r3
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b1a4:	e039      	b.n	800b21a <HAL_SPI_Transmit+0x3c6>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	3320      	adds	r3, #32
 800b1b0:	7812      	ldrb	r2, [r2, #0]
 800b1b2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b1b8:	1c5a      	adds	r2, r3, #1
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b1c4:	b29b      	uxth	r3, r3
 800b1c6:	3b01      	subs	r3, #1
 800b1c8:	b29a      	uxth	r2, r3
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b1d0:	e023      	b.n	800b21a <HAL_SPI_Transmit+0x3c6>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b1d2:	f7f9 fc1f 	bl	8004a14 <HAL_GetTick>
 800b1d6:	4602      	mov	r2, r0
 800b1d8:	693b      	ldr	r3, [r7, #16]
 800b1da:	1ad3      	subs	r3, r2, r3
 800b1dc:	683a      	ldr	r2, [r7, #0]
 800b1de:	429a      	cmp	r2, r3
 800b1e0:	d803      	bhi.n	800b1ea <HAL_SPI_Transmit+0x396>
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1e8:	d102      	bne.n	800b1f0 <HAL_SPI_Transmit+0x39c>
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d114      	bne.n	800b21a <HAL_SPI_Transmit+0x3c6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b1f0:	68f8      	ldr	r0, [r7, #12]
 800b1f2:	f000 faeb 	bl	800b7cc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b1fc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	2201      	movs	r2, #1
 800b20a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	2200      	movs	r2, #0
 800b212:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800b216:	2303      	movs	r3, #3
 800b218:	e02c      	b.n	800b274 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b220:	b29b      	uxth	r3, r3
 800b222:	2b00      	cmp	r3, #0
 800b224:	f47f af7b 	bne.w	800b11e <HAL_SPI_Transmit+0x2ca>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800b228:	693b      	ldr	r3, [r7, #16]
 800b22a:	9300      	str	r3, [sp, #0]
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	2200      	movs	r2, #0
 800b230:	2108      	movs	r1, #8
 800b232:	68f8      	ldr	r0, [r7, #12]
 800b234:	f000 fb6a 	bl	800b90c <SPI_WaitOnFlagUntilTimeout>
 800b238:	4603      	mov	r3, r0
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d007      	beq.n	800b24e <HAL_SPI_Transmit+0x3fa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b244:	f043 0220 	orr.w	r2, r3, #32
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800b24e:	68f8      	ldr	r0, [r7, #12]
 800b250:	f000 fabc 	bl	800b7cc <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	2201      	movs	r2, #1
 800b258:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	2200      	movs	r2, #0
 800b260:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d001      	beq.n	800b272 <HAL_SPI_Transmit+0x41e>
  {
    return HAL_ERROR;
 800b26e:	2301      	movs	r3, #1
 800b270:	e000      	b.n	800b274 <HAL_SPI_Transmit+0x420>
  }
  else
  {
    return HAL_OK;
 800b272:	2300      	movs	r3, #0
  }
}
 800b274:	4618      	mov	r0, r3
 800b276:	3718      	adds	r7, #24
 800b278:	46bd      	mov	sp, r7
 800b27a:	bd80      	pop	{r7, pc}

0800b27c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b088      	sub	sp, #32
 800b280:	af00      	add	r7, sp, #0
 800b282:	60f8      	str	r0, [r7, #12]
 800b284:	60b9      	str	r1, [r7, #8]
 800b286:	603b      	str	r3, [r7, #0]
 800b288:	4613      	mov	r3, r2
 800b28a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b290:	095b      	lsrs	r3, r3, #5
 800b292:	b29b      	uxth	r3, r3
 800b294:	3301      	adds	r3, #1
 800b296:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	3330      	adds	r3, #48	@ 0x30
 800b29e:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Check transfer size parameter */
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	4a96      	ldr	r2, [pc, #600]	@ (800b500 <HAL_SPI_Receive+0x284>)
 800b2a6:	4293      	cmp	r3, r2
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b2a8:	f7f9 fbb4 	bl	8004a14 <HAL_GetTick>
 800b2ac:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800b2b4:	b2db      	uxtb	r3, r3
 800b2b6:	2b01      	cmp	r3, #1
 800b2b8:	d001      	beq.n	800b2be <HAL_SPI_Receive+0x42>
  {
    return HAL_BUSY;
 800b2ba:	2302      	movs	r3, #2
 800b2bc:	e274      	b.n	800b7a8 <HAL_SPI_Receive+0x52c>
  }

  if ((pData == NULL) || (Size == 0UL))
 800b2be:	68bb      	ldr	r3, [r7, #8]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d002      	beq.n	800b2ca <HAL_SPI_Receive+0x4e>
 800b2c4:	88fb      	ldrh	r3, [r7, #6]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d101      	bne.n	800b2ce <HAL_SPI_Receive+0x52>
  {
    return HAL_ERROR;
 800b2ca:	2301      	movs	r3, #1
 800b2cc:	e26c      	b.n	800b7a8 <HAL_SPI_Receive+0x52c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800b2d4:	2b01      	cmp	r3, #1
 800b2d6:	d101      	bne.n	800b2dc <HAL_SPI_Receive+0x60>
 800b2d8:	2302      	movs	r3, #2
 800b2da:	e265      	b.n	800b7a8 <HAL_SPI_Receive+0x52c>
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	2201      	movs	r2, #1
 800b2e0:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	2204      	movs	r2, #4
 800b2e8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	68ba      	ldr	r2, [r7, #8]
 800b2f8:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = Size;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	88fa      	ldrh	r2, [r7, #6]
 800b2fe:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = Size;
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	88fa      	ldrh	r2, [r7, #6]
 800b306:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	2200      	movs	r2, #0
 800b30e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = (uint16_t) 0UL;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	2200      	movs	r2, #0
 800b314:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = (uint16_t) 0UL;
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	2200      	movs	r2, #0
 800b31c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxISR       = NULL;
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	2200      	movs	r2, #0
 800b324:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	2200      	movs	r2, #0
 800b32a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	689b      	ldr	r3, [r3, #8]
 800b330:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800b334:	d108      	bne.n	800b348 <HAL_SPI_Receive+0xcc>
  {
    SPI_1LINE_RX(hspi);
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	681a      	ldr	r2, [r3, #0]
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b344:	601a      	str	r2, [r3, #0]
 800b346:	e009      	b.n	800b35c <HAL_SPI_Receive+0xe0>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	68db      	ldr	r3, [r3, #12]
 800b34e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800b35a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	685b      	ldr	r3, [r3, #4]
 800b362:	0c1b      	lsrs	r3, r3, #16
 800b364:	041b      	lsls	r3, r3, #16
 800b366:	88f9      	ldrh	r1, [r7, #6]
 800b368:	68fa      	ldr	r2, [r7, #12]
 800b36a:	6812      	ldr	r2, [r2, #0]
 800b36c:	430b      	orrs	r3, r1
 800b36e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	681a      	ldr	r2, [r3, #0]
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	f042 0201 	orr.w	r2, r2, #1
 800b37e:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	69db      	ldr	r3, [r3, #28]
 800b386:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d10c      	bne.n	800b3a8 <HAL_SPI_Receive+0x12c>
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	685b      	ldr	r3, [r3, #4]
 800b392:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b396:	d107      	bne.n	800b3a8 <HAL_SPI_Receive+0x12c>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	681a      	ldr	r2, [r3, #0]
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b3a6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	68db      	ldr	r3, [r3, #12]
 800b3ac:	2b0f      	cmp	r3, #15
 800b3ae:	f240 8081 	bls.w	800b4b4 <HAL_SPI_Receive+0x238>
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	4a53      	ldr	r2, [pc, #332]	@ (800b504 <HAL_SPI_Receive+0x288>)
 800b3b8:	4293      	cmp	r3, r2
 800b3ba:	d074      	beq.n	800b4a6 <HAL_SPI_Receive+0x22a>
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	4a51      	ldr	r2, [pc, #324]	@ (800b508 <HAL_SPI_Receive+0x28c>)
 800b3c2:	4293      	cmp	r3, r2
 800b3c4:	d06f      	beq.n	800b4a6 <HAL_SPI_Receive+0x22a>
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	4a50      	ldr	r2, [pc, #320]	@ (800b50c <HAL_SPI_Receive+0x290>)
 800b3cc:	4293      	cmp	r3, r2
 800b3ce:	d06a      	beq.n	800b4a6 <HAL_SPI_Receive+0x22a>
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	4a4e      	ldr	r2, [pc, #312]	@ (800b510 <HAL_SPI_Receive+0x294>)
 800b3d6:	4293      	cmp	r3, r2
 800b3d8:	d16c      	bne.n	800b4b4 <HAL_SPI_Receive+0x238>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800b3da:	e064      	b.n	800b4a6 <HAL_SPI_Receive+0x22a>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	695b      	ldr	r3, [r3, #20]
 800b3e2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	695b      	ldr	r3, [r3, #20]
 800b3ea:	f003 0301 	and.w	r3, r3, #1
 800b3ee:	2b01      	cmp	r3, #1
 800b3f0:	d114      	bne.n	800b41c <HAL_SPI_Receive+0x1a0>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	681a      	ldr	r2, [r3, #0]
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b3fa:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800b3fc:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b402:	1d1a      	adds	r2, r3, #4
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800b40e:	b29b      	uxth	r3, r3
 800b410:	3b01      	subs	r3, #1
 800b412:	b29a      	uxth	r2, r3
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800b41a:	e044      	b.n	800b4a6 <HAL_SPI_Receive+0x22a>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800b422:	b29b      	uxth	r3, r3
 800b424:	8bfa      	ldrh	r2, [r7, #30]
 800b426:	429a      	cmp	r2, r3
 800b428:	d919      	bls.n	800b45e <HAL_SPI_Receive+0x1e2>
 800b42a:	693b      	ldr	r3, [r7, #16]
 800b42c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b430:	2b00      	cmp	r3, #0
 800b432:	d014      	beq.n	800b45e <HAL_SPI_Receive+0x1e2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	681a      	ldr	r2, [r3, #0]
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b43c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800b43e:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b444:	1d1a      	adds	r2, r3, #4
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800b450:	b29b      	uxth	r3, r3
 800b452:	3b01      	subs	r3, #1
 800b454:	b29a      	uxth	r2, r3
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800b45c:	e023      	b.n	800b4a6 <HAL_SPI_Receive+0x22a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b45e:	f7f9 fad9 	bl	8004a14 <HAL_GetTick>
 800b462:	4602      	mov	r2, r0
 800b464:	697b      	ldr	r3, [r7, #20]
 800b466:	1ad3      	subs	r3, r2, r3
 800b468:	683a      	ldr	r2, [r7, #0]
 800b46a:	429a      	cmp	r2, r3
 800b46c:	d803      	bhi.n	800b476 <HAL_SPI_Receive+0x1fa>
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b474:	d102      	bne.n	800b47c <HAL_SPI_Receive+0x200>
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d114      	bne.n	800b4a6 <HAL_SPI_Receive+0x22a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b47c:	68f8      	ldr	r0, [r7, #12]
 800b47e:	f000 f9a5 	bl	800b7cc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b488:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	2201      	movs	r2, #1
 800b496:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	2200      	movs	r2, #0
 800b49e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800b4a2:	2303      	movs	r3, #3
 800b4a4:	e180      	b.n	800b7a8 <HAL_SPI_Receive+0x52c>
    while (hspi->RxXferCount > 0UL)
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800b4ac:	b29b      	uxth	r3, r3
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d194      	bne.n	800b3dc <HAL_SPI_Receive+0x160>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800b4b2:	e166      	b.n	800b782 <HAL_SPI_Receive+0x506>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	68db      	ldr	r3, [r3, #12]
 800b4b8:	2b07      	cmp	r3, #7
 800b4ba:	f240 815b 	bls.w	800b774 <HAL_SPI_Receive+0x4f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800b4be:	e099      	b.n	800b5f4 <HAL_SPI_Receive+0x378>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	695b      	ldr	r3, [r3, #20]
 800b4c6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	695b      	ldr	r3, [r3, #20]
 800b4ce:	f003 0301 	and.w	r3, r3, #1
 800b4d2:	2b01      	cmp	r3, #1
 800b4d4:	d11e      	bne.n	800b514 <HAL_SPI_Receive+0x298>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b4da:	69ba      	ldr	r2, [r7, #24]
 800b4dc:	8812      	ldrh	r2, [r2, #0]
 800b4de:	b292      	uxth	r2, r2
 800b4e0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b4e6:	1c9a      	adds	r2, r3, #2
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800b4f2:	b29b      	uxth	r3, r3
 800b4f4:	3b01      	subs	r3, #1
 800b4f6:	b29a      	uxth	r2, r3
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800b4fe:	e079      	b.n	800b5f4 <HAL_SPI_Receive+0x378>
 800b500:	46002000 	.word	0x46002000
 800b504:	40013000 	.word	0x40013000
 800b508:	50013000 	.word	0x50013000
 800b50c:	40003800 	.word	0x40003800
 800b510:	50003800 	.word	0x50003800
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800b51a:	b29b      	uxth	r3, r3
 800b51c:	8bfa      	ldrh	r2, [r7, #30]
 800b51e:	429a      	cmp	r2, r3
 800b520:	d924      	bls.n	800b56c <HAL_SPI_Receive+0x2f0>
 800b522:	693b      	ldr	r3, [r7, #16]
 800b524:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d01f      	beq.n	800b56c <HAL_SPI_Receive+0x2f0>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b530:	69ba      	ldr	r2, [r7, #24]
 800b532:	8812      	ldrh	r2, [r2, #0]
 800b534:	b292      	uxth	r2, r2
 800b536:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b53c:	1c9a      	adds	r2, r3, #2
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	66da      	str	r2, [r3, #108]	@ 0x6c
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b546:	69ba      	ldr	r2, [r7, #24]
 800b548:	8812      	ldrh	r2, [r2, #0]
 800b54a:	b292      	uxth	r2, r2
 800b54c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b552:	1c9a      	adds	r2, r3, #2
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount -= (uint16_t)2UL;
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800b55e:	b29b      	uxth	r3, r3
 800b560:	3b02      	subs	r3, #2
 800b562:	b29a      	uxth	r2, r3
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800b56a:	e043      	b.n	800b5f4 <HAL_SPI_Receive+0x378>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800b572:	b29b      	uxth	r3, r3
 800b574:	2b01      	cmp	r3, #1
 800b576:	d119      	bne.n	800b5ac <HAL_SPI_Receive+0x330>
 800b578:	693b      	ldr	r3, [r7, #16]
 800b57a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d014      	beq.n	800b5ac <HAL_SPI_Receive+0x330>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b586:	69ba      	ldr	r2, [r7, #24]
 800b588:	8812      	ldrh	r2, [r2, #0]
 800b58a:	b292      	uxth	r2, r2
 800b58c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b592:	1c9a      	adds	r2, r3, #2
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800b59e:	b29b      	uxth	r3, r3
 800b5a0:	3b01      	subs	r3, #1
 800b5a2:	b29a      	uxth	r2, r3
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800b5aa:	e023      	b.n	800b5f4 <HAL_SPI_Receive+0x378>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b5ac:	f7f9 fa32 	bl	8004a14 <HAL_GetTick>
 800b5b0:	4602      	mov	r2, r0
 800b5b2:	697b      	ldr	r3, [r7, #20]
 800b5b4:	1ad3      	subs	r3, r2, r3
 800b5b6:	683a      	ldr	r2, [r7, #0]
 800b5b8:	429a      	cmp	r2, r3
 800b5ba:	d803      	bhi.n	800b5c4 <HAL_SPI_Receive+0x348>
 800b5bc:	683b      	ldr	r3, [r7, #0]
 800b5be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5c2:	d102      	bne.n	800b5ca <HAL_SPI_Receive+0x34e>
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d114      	bne.n	800b5f4 <HAL_SPI_Receive+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b5ca:	68f8      	ldr	r0, [r7, #12]
 800b5cc:	f000 f8fe 	bl	800b7cc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b5d6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	2201      	movs	r2, #1
 800b5e4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800b5f0:	2303      	movs	r3, #3
 800b5f2:	e0d9      	b.n	800b7a8 <HAL_SPI_Receive+0x52c>
    while (hspi->RxXferCount > 0UL)
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800b5fa:	b29b      	uxth	r3, r3
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	f47f af5f 	bne.w	800b4c0 <HAL_SPI_Receive+0x244>
 800b602:	e0be      	b.n	800b782 <HAL_SPI_Receive+0x506>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	695b      	ldr	r3, [r3, #20]
 800b60a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	695b      	ldr	r3, [r3, #20]
 800b612:	f003 0301 	and.w	r3, r3, #1
 800b616:	2b01      	cmp	r3, #1
 800b618:	d117      	bne.n	800b64a <HAL_SPI_Receive+0x3ce>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b626:	7812      	ldrb	r2, [r2, #0]
 800b628:	b2d2      	uxtb	r2, r2
 800b62a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b630:	1c5a      	adds	r2, r3, #1
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800b63c:	b29b      	uxth	r3, r3
 800b63e:	3b01      	subs	r3, #1
 800b640:	b29a      	uxth	r2, r3
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800b648:	e094      	b.n	800b774 <HAL_SPI_Receive+0x4f8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800b650:	b29b      	uxth	r3, r3
 800b652:	8bfa      	ldrh	r2, [r7, #30]
 800b654:	429a      	cmp	r2, r3
 800b656:	d946      	bls.n	800b6e6 <HAL_SPI_Receive+0x46a>
 800b658:	693b      	ldr	r3, [r7, #16]
 800b65a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d041      	beq.n	800b6e6 <HAL_SPI_Receive+0x46a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b66e:	7812      	ldrb	r2, [r2, #0]
 800b670:	b2d2      	uxtb	r2, r2
 800b672:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b678:	1c5a      	adds	r2, r3, #1
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	66da      	str	r2, [r3, #108]	@ 0x6c
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b68a:	7812      	ldrb	r2, [r2, #0]
 800b68c:	b2d2      	uxtb	r2, r2
 800b68e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b694:	1c5a      	adds	r2, r3, #1
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	66da      	str	r2, [r3, #108]	@ 0x6c
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b6a6:	7812      	ldrb	r2, [r2, #0]
 800b6a8:	b2d2      	uxtb	r2, r2
 800b6aa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b6b0:	1c5a      	adds	r2, r3, #1
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	66da      	str	r2, [r3, #108]	@ 0x6c
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b6c2:	7812      	ldrb	r2, [r2, #0]
 800b6c4:	b2d2      	uxtb	r2, r2
 800b6c6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b6cc:	1c5a      	adds	r2, r3, #1
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount -= (uint16_t)4UL;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800b6d8:	b29b      	uxth	r3, r3
 800b6da:	3b04      	subs	r3, #4
 800b6dc:	b29a      	uxth	r2, r3
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800b6e4:	e046      	b.n	800b774 <HAL_SPI_Receive+0x4f8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800b6ec:	b29b      	uxth	r3, r3
 800b6ee:	2b03      	cmp	r3, #3
 800b6f0:	d81c      	bhi.n	800b72c <HAL_SPI_Receive+0x4b0>
 800b6f2:	693b      	ldr	r3, [r7, #16]
 800b6f4:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d017      	beq.n	800b72c <HAL_SPI_Receive+0x4b0>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b708:	7812      	ldrb	r2, [r2, #0]
 800b70a:	b2d2      	uxtb	r2, r2
 800b70c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b712:	1c5a      	adds	r2, r3, #1
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800b71e:	b29b      	uxth	r3, r3
 800b720:	3b01      	subs	r3, #1
 800b722:	b29a      	uxth	r2, r3
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800b72a:	e023      	b.n	800b774 <HAL_SPI_Receive+0x4f8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b72c:	f7f9 f972 	bl	8004a14 <HAL_GetTick>
 800b730:	4602      	mov	r2, r0
 800b732:	697b      	ldr	r3, [r7, #20]
 800b734:	1ad3      	subs	r3, r2, r3
 800b736:	683a      	ldr	r2, [r7, #0]
 800b738:	429a      	cmp	r2, r3
 800b73a:	d803      	bhi.n	800b744 <HAL_SPI_Receive+0x4c8>
 800b73c:	683b      	ldr	r3, [r7, #0]
 800b73e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b742:	d102      	bne.n	800b74a <HAL_SPI_Receive+0x4ce>
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d114      	bne.n	800b774 <HAL_SPI_Receive+0x4f8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b74a:	68f8      	ldr	r0, [r7, #12]
 800b74c:	f000 f83e 	bl	800b7cc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b756:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	2201      	movs	r2, #1
 800b764:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	2200      	movs	r2, #0
 800b76c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800b770:	2303      	movs	r3, #3
 800b772:	e019      	b.n	800b7a8 <HAL_SPI_Receive+0x52c>
    while (hspi->RxXferCount > 0UL)
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800b77a:	b29b      	uxth	r3, r3
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	f47f af41 	bne.w	800b604 <HAL_SPI_Receive+0x388>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800b782:	68f8      	ldr	r0, [r7, #12]
 800b784:	f000 f822 	bl	800b7cc <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	2201      	movs	r2, #1
 800b78c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	2200      	movs	r2, #0
 800b794:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d001      	beq.n	800b7a6 <HAL_SPI_Receive+0x52a>
  {
    return HAL_ERROR;
 800b7a2:	2301      	movs	r3, #1
 800b7a4:	e000      	b.n	800b7a8 <HAL_SPI_Receive+0x52c>
  }
  else
  {
    return HAL_OK;
 800b7a6:	2300      	movs	r3, #0
  }
}
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	3720      	adds	r7, #32
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}

0800b7b0 <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800b7b0:	b480      	push	{r7}
 800b7b2:	b083      	sub	sp, #12
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800b7be:	b2db      	uxtb	r3, r3
}
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	370c      	adds	r7, #12
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ca:	4770      	bx	lr

0800b7cc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800b7cc:	b480      	push	{r7}
 800b7ce:	b085      	sub	sp, #20
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	695b      	ldr	r3, [r3, #20]
 800b7da:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	699a      	ldr	r2, [r3, #24]
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	f042 0208 	orr.w	r2, r2, #8
 800b7ea:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	699a      	ldr	r2, [r3, #24]
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	f042 0210 	orr.w	r2, r2, #16
 800b7fa:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	681a      	ldr	r2, [r3, #0]
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	f022 0201 	bic.w	r2, r2, #1
 800b80a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	691b      	ldr	r3, [r3, #16]
 800b812:	687a      	ldr	r2, [r7, #4]
 800b814:	6812      	ldr	r2, [r2, #0]
 800b816:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 800b81a:	f023 0303 	bic.w	r3, r3, #3
 800b81e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	689a      	ldr	r2, [r3, #8]
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800b82e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800b836:	b2db      	uxtb	r3, r3
 800b838:	2b04      	cmp	r3, #4
 800b83a:	d014      	beq.n	800b866 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	f003 0320 	and.w	r3, r3, #32
 800b842:	2b00      	cmp	r3, #0
 800b844:	d00f      	beq.n	800b866 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b84c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	699a      	ldr	r2, [r3, #24]
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	f042 0220 	orr.w	r2, r2, #32
 800b864:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800b86c:	b2db      	uxtb	r3, r3
 800b86e:	2b03      	cmp	r3, #3
 800b870:	d014      	beq.n	800b89c <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d00f      	beq.n	800b89c <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b882:	f043 0204 	orr.w	r2, r3, #4
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	699a      	ldr	r2, [r3, #24]
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b89a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d00f      	beq.n	800b8c6 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b8ac:	f043 0201 	orr.w	r2, r3, #1
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	699a      	ldr	r2, [r3, #24]
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b8c4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d00f      	beq.n	800b8f0 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b8d6:	f043 0208 	orr.w	r2, r3, #8
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	699a      	ldr	r2, [r3, #24]
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b8ee:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 800b900:	bf00      	nop
 800b902:	3714      	adds	r7, #20
 800b904:	46bd      	mov	sp, r7
 800b906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90a:	4770      	bx	lr

0800b90c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b084      	sub	sp, #16
 800b910:	af00      	add	r7, sp, #0
 800b912:	60f8      	str	r0, [r7, #12]
 800b914:	60b9      	str	r1, [r7, #8]
 800b916:	603b      	str	r3, [r7, #0]
 800b918:	4613      	mov	r3, r2
 800b91a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b91c:	e010      	b.n	800b940 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b91e:	f7f9 f879 	bl	8004a14 <HAL_GetTick>
 800b922:	4602      	mov	r2, r0
 800b924:	69bb      	ldr	r3, [r7, #24]
 800b926:	1ad3      	subs	r3, r2, r3
 800b928:	683a      	ldr	r2, [r7, #0]
 800b92a:	429a      	cmp	r2, r3
 800b92c:	d803      	bhi.n	800b936 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b934:	d102      	bne.n	800b93c <SPI_WaitOnFlagUntilTimeout+0x30>
 800b936:	683b      	ldr	r3, [r7, #0]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d101      	bne.n	800b940 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800b93c:	2303      	movs	r3, #3
 800b93e:	e00f      	b.n	800b960 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	695a      	ldr	r2, [r3, #20]
 800b946:	68bb      	ldr	r3, [r7, #8]
 800b948:	4013      	ands	r3, r2
 800b94a:	68ba      	ldr	r2, [r7, #8]
 800b94c:	429a      	cmp	r2, r3
 800b94e:	bf0c      	ite	eq
 800b950:	2301      	moveq	r3, #1
 800b952:	2300      	movne	r3, #0
 800b954:	b2db      	uxtb	r3, r3
 800b956:	461a      	mov	r2, r3
 800b958:	79fb      	ldrb	r3, [r7, #7]
 800b95a:	429a      	cmp	r2, r3
 800b95c:	d0df      	beq.n	800b91e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800b95e:	2300      	movs	r3, #0
}
 800b960:	4618      	mov	r0, r3
 800b962:	3710      	adds	r7, #16
 800b964:	46bd      	mov	sp, r7
 800b966:	bd80      	pop	{r7, pc}

0800b968 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800b968:	b480      	push	{r7}
 800b96a:	b085      	sub	sp, #20
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b974:	095b      	lsrs	r3, r3, #5
 800b976:	3301      	adds	r3, #1
 800b978:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	68db      	ldr	r3, [r3, #12]
 800b97e:	3301      	adds	r3, #1
 800b980:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b982:	68bb      	ldr	r3, [r7, #8]
 800b984:	3307      	adds	r3, #7
 800b986:	08db      	lsrs	r3, r3, #3
 800b988:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b98a:	68bb      	ldr	r3, [r7, #8]
 800b98c:	68fa      	ldr	r2, [r7, #12]
 800b98e:	fb02 f303 	mul.w	r3, r2, r3
}
 800b992:	4618      	mov	r0, r3
 800b994:	3714      	adds	r7, #20
 800b996:	46bd      	mov	sp, r7
 800b998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99c:	4770      	bx	lr

0800b99e <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 800b99e:	b480      	push	{r7}
 800b9a0:	b083      	sub	sp, #12
 800b9a2:	af00      	add	r7, sp, #0
 800b9a4:	6078      	str	r0, [r7, #4]
 800b9a6:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800b9ae:	b2db      	uxtb	r3, r3
 800b9b0:	2b01      	cmp	r3, #1
 800b9b2:	d12e      	bne.n	800ba12 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800b9ba:	2b01      	cmp	r3, #1
 800b9bc:	d101      	bne.n	800b9c2 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 800b9be:	2302      	movs	r3, #2
 800b9c0:	e028      	b.n	800ba14 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	2201      	movs	r2, #1
 800b9c6:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	2202      	movs	r2, #2
 800b9ce:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	681a      	ldr	r2, [r3, #0]
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	f022 0201 	bic.w	r2, r2, #1
 800b9e0:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	681a      	ldr	r2, [r3, #0]
 800b9e6:	683b      	ldr	r3, [r7, #0]
 800b9e8:	685b      	ldr	r3, [r3, #4]
 800b9ea:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800b9ee:	ea42 0103 	orr.w	r1, r2, r3
 800b9f2:	683b      	ldr	r3, [r7, #0]
 800b9f4:	689a      	ldr	r2, [r3, #8]
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	430a      	orrs	r2, r1
 800b9fc:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	2201      	movs	r2, #1
 800ba02:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	2200      	movs	r2, #0
 800ba0a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800ba0e:	2300      	movs	r3, #0
 800ba10:	e000      	b.n	800ba14 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800ba12:	2301      	movs	r3, #1
  }
}
 800ba14:	4618      	mov	r0, r3
 800ba16:	370c      	adds	r7, #12
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1e:	4770      	bx	lr

0800ba20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b082      	sub	sp, #8
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d101      	bne.n	800ba32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ba2e:	2301      	movs	r3, #1
 800ba30:	e042      	b.n	800bab8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d106      	bne.n	800ba4a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2200      	movs	r2, #0
 800ba40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ba44:	6878      	ldr	r0, [r7, #4]
 800ba46:	f7f8 fd63 	bl	8004510 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	2224      	movs	r2, #36	@ 0x24
 800ba4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	681a      	ldr	r2, [r3, #0]
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	f022 0201 	bic.w	r2, r2, #1
 800ba60:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d002      	beq.n	800ba70 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ba6a:	6878      	ldr	r0, [r7, #4]
 800ba6c:	f000 fa4e 	bl	800bf0c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ba70:	6878      	ldr	r0, [r7, #4]
 800ba72:	f000 f8b3 	bl	800bbdc <UART_SetConfig>
 800ba76:	4603      	mov	r3, r0
 800ba78:	2b01      	cmp	r3, #1
 800ba7a:	d101      	bne.n	800ba80 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800ba7c:	2301      	movs	r3, #1
 800ba7e:	e01b      	b.n	800bab8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	685a      	ldr	r2, [r3, #4]
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ba8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	689a      	ldr	r2, [r3, #8]
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ba9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	681a      	ldr	r2, [r3, #0]
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	f042 0201 	orr.w	r2, r2, #1
 800baae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bab0:	6878      	ldr	r0, [r7, #4]
 800bab2:	f000 facd 	bl	800c050 <UART_CheckIdleState>
 800bab6:	4603      	mov	r3, r0
}
 800bab8:	4618      	mov	r0, r3
 800baba:	3708      	adds	r7, #8
 800babc:	46bd      	mov	sp, r7
 800babe:	bd80      	pop	{r7, pc}

0800bac0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b08a      	sub	sp, #40	@ 0x28
 800bac4:	af02      	add	r7, sp, #8
 800bac6:	60f8      	str	r0, [r7, #12]
 800bac8:	60b9      	str	r1, [r7, #8]
 800baca:	603b      	str	r3, [r7, #0]
 800bacc:	4613      	mov	r3, r2
 800bace:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bad6:	2b20      	cmp	r3, #32
 800bad8:	d17b      	bne.n	800bbd2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800bada:	68bb      	ldr	r3, [r7, #8]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d002      	beq.n	800bae6 <HAL_UART_Transmit+0x26>
 800bae0:	88fb      	ldrh	r3, [r7, #6]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d101      	bne.n	800baea <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800bae6:	2301      	movs	r3, #1
 800bae8:	e074      	b.n	800bbd4 <HAL_UART_Transmit+0x114>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	2200      	movs	r2, #0
 800baee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	2221      	movs	r2, #33	@ 0x21
 800baf6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bafa:	f7f8 ff8b 	bl	8004a14 <HAL_GetTick>
 800bafe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	88fa      	ldrh	r2, [r7, #6]
 800bb04:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	88fa      	ldrh	r2, [r7, #6]
 800bb0c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	689b      	ldr	r3, [r3, #8]
 800bb14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bb18:	d108      	bne.n	800bb2c <HAL_UART_Transmit+0x6c>
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	691b      	ldr	r3, [r3, #16]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d104      	bne.n	800bb2c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800bb22:	2300      	movs	r3, #0
 800bb24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bb26:	68bb      	ldr	r3, [r7, #8]
 800bb28:	61bb      	str	r3, [r7, #24]
 800bb2a:	e003      	b.n	800bb34 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800bb2c:	68bb      	ldr	r3, [r7, #8]
 800bb2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bb30:	2300      	movs	r3, #0
 800bb32:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800bb34:	e030      	b.n	800bb98 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bb36:	683b      	ldr	r3, [r7, #0]
 800bb38:	9300      	str	r3, [sp, #0]
 800bb3a:	697b      	ldr	r3, [r7, #20]
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	2180      	movs	r1, #128	@ 0x80
 800bb40:	68f8      	ldr	r0, [r7, #12]
 800bb42:	f000 fb2f 	bl	800c1a4 <UART_WaitOnFlagUntilTimeout>
 800bb46:	4603      	mov	r3, r0
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d005      	beq.n	800bb58 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	2220      	movs	r2, #32
 800bb50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800bb54:	2303      	movs	r3, #3
 800bb56:	e03d      	b.n	800bbd4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800bb58:	69fb      	ldr	r3, [r7, #28]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d10b      	bne.n	800bb76 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bb5e:	69bb      	ldr	r3, [r7, #24]
 800bb60:	881b      	ldrh	r3, [r3, #0]
 800bb62:	461a      	mov	r2, r3
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bb6c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800bb6e:	69bb      	ldr	r3, [r7, #24]
 800bb70:	3302      	adds	r3, #2
 800bb72:	61bb      	str	r3, [r7, #24]
 800bb74:	e007      	b.n	800bb86 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800bb76:	69fb      	ldr	r3, [r7, #28]
 800bb78:	781a      	ldrb	r2, [r3, #0]
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800bb80:	69fb      	ldr	r3, [r7, #28]
 800bb82:	3301      	adds	r3, #1
 800bb84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800bb8c:	b29b      	uxth	r3, r3
 800bb8e:	3b01      	subs	r3, #1
 800bb90:	b29a      	uxth	r2, r3
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800bb9e:	b29b      	uxth	r3, r3
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d1c8      	bne.n	800bb36 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bba4:	683b      	ldr	r3, [r7, #0]
 800bba6:	9300      	str	r3, [sp, #0]
 800bba8:	697b      	ldr	r3, [r7, #20]
 800bbaa:	2200      	movs	r2, #0
 800bbac:	2140      	movs	r1, #64	@ 0x40
 800bbae:	68f8      	ldr	r0, [r7, #12]
 800bbb0:	f000 faf8 	bl	800c1a4 <UART_WaitOnFlagUntilTimeout>
 800bbb4:	4603      	mov	r3, r0
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d005      	beq.n	800bbc6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	2220      	movs	r2, #32
 800bbbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800bbc2:	2303      	movs	r3, #3
 800bbc4:	e006      	b.n	800bbd4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	2220      	movs	r2, #32
 800bbca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800bbce:	2300      	movs	r3, #0
 800bbd0:	e000      	b.n	800bbd4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800bbd2:	2302      	movs	r3, #2
  }
}
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	3720      	adds	r7, #32
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	bd80      	pop	{r7, pc}

0800bbdc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bbdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bbe0:	b094      	sub	sp, #80	@ 0x50
 800bbe2:	af00      	add	r7, sp, #0
 800bbe4:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800bbec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbee:	681a      	ldr	r2, [r3, #0]
 800bbf0:	4b9b      	ldr	r3, [pc, #620]	@ (800be60 <UART_SetConfig+0x284>)
 800bbf2:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bbf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbf6:	689a      	ldr	r2, [r3, #8]
 800bbf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbfa:	691b      	ldr	r3, [r3, #16]
 800bbfc:	431a      	orrs	r2, r3
 800bbfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc00:	695b      	ldr	r3, [r3, #20]
 800bc02:	431a      	orrs	r2, r3
 800bc04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc06:	69db      	ldr	r3, [r3, #28]
 800bc08:	4313      	orrs	r3, r2
 800bc0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bc0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	4994      	ldr	r1, [pc, #592]	@ (800be64 <UART_SetConfig+0x288>)
 800bc14:	4019      	ands	r1, r3
 800bc16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc18:	681a      	ldr	r2, [r3, #0]
 800bc1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bc1c:	430b      	orrs	r3, r1
 800bc1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bc20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	685b      	ldr	r3, [r3, #4]
 800bc26:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800bc2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc2c:	68d9      	ldr	r1, [r3, #12]
 800bc2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc30:	681a      	ldr	r2, [r3, #0]
 800bc32:	ea40 0301 	orr.w	r3, r0, r1
 800bc36:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bc38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc3a:	699b      	ldr	r3, [r3, #24]
 800bc3c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bc3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc40:	681a      	ldr	r2, [r3, #0]
 800bc42:	4b87      	ldr	r3, [pc, #540]	@ (800be60 <UART_SetConfig+0x284>)
 800bc44:	429a      	cmp	r2, r3
 800bc46:	d009      	beq.n	800bc5c <UART_SetConfig+0x80>
 800bc48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc4a:	681a      	ldr	r2, [r3, #0]
 800bc4c:	4b86      	ldr	r3, [pc, #536]	@ (800be68 <UART_SetConfig+0x28c>)
 800bc4e:	429a      	cmp	r2, r3
 800bc50:	d004      	beq.n	800bc5c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bc52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc54:	6a1a      	ldr	r2, [r3, #32]
 800bc56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bc58:	4313      	orrs	r3, r2
 800bc5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bc5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	689b      	ldr	r3, [r3, #8]
 800bc62:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800bc66:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800bc6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc6c:	681a      	ldr	r2, [r3, #0]
 800bc6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bc70:	430b      	orrs	r3, r1
 800bc72:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bc74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc7a:	f023 000f 	bic.w	r0, r3, #15
 800bc7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc80:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800bc82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc84:	681a      	ldr	r2, [r3, #0]
 800bc86:	ea40 0301 	orr.w	r3, r0, r1
 800bc8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bc8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc8e:	681a      	ldr	r2, [r3, #0]
 800bc90:	4b76      	ldr	r3, [pc, #472]	@ (800be6c <UART_SetConfig+0x290>)
 800bc92:	429a      	cmp	r2, r3
 800bc94:	d102      	bne.n	800bc9c <UART_SetConfig+0xc0>
 800bc96:	2301      	movs	r3, #1
 800bc98:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bc9a:	e021      	b.n	800bce0 <UART_SetConfig+0x104>
 800bc9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc9e:	681a      	ldr	r2, [r3, #0]
 800bca0:	4b73      	ldr	r3, [pc, #460]	@ (800be70 <UART_SetConfig+0x294>)
 800bca2:	429a      	cmp	r2, r3
 800bca4:	d102      	bne.n	800bcac <UART_SetConfig+0xd0>
 800bca6:	2304      	movs	r3, #4
 800bca8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bcaa:	e019      	b.n	800bce0 <UART_SetConfig+0x104>
 800bcac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcae:	681a      	ldr	r2, [r3, #0]
 800bcb0:	4b70      	ldr	r3, [pc, #448]	@ (800be74 <UART_SetConfig+0x298>)
 800bcb2:	429a      	cmp	r2, r3
 800bcb4:	d102      	bne.n	800bcbc <UART_SetConfig+0xe0>
 800bcb6:	2308      	movs	r3, #8
 800bcb8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bcba:	e011      	b.n	800bce0 <UART_SetConfig+0x104>
 800bcbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcbe:	681a      	ldr	r2, [r3, #0]
 800bcc0:	4b6d      	ldr	r3, [pc, #436]	@ (800be78 <UART_SetConfig+0x29c>)
 800bcc2:	429a      	cmp	r2, r3
 800bcc4:	d102      	bne.n	800bccc <UART_SetConfig+0xf0>
 800bcc6:	2310      	movs	r3, #16
 800bcc8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bcca:	e009      	b.n	800bce0 <UART_SetConfig+0x104>
 800bccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcce:	681a      	ldr	r2, [r3, #0]
 800bcd0:	4b63      	ldr	r3, [pc, #396]	@ (800be60 <UART_SetConfig+0x284>)
 800bcd2:	429a      	cmp	r2, r3
 800bcd4:	d102      	bne.n	800bcdc <UART_SetConfig+0x100>
 800bcd6:	2320      	movs	r3, #32
 800bcd8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bcda:	e001      	b.n	800bce0 <UART_SetConfig+0x104>
 800bcdc:	2300      	movs	r3, #0
 800bcde:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bce2:	681a      	ldr	r2, [r3, #0]
 800bce4:	4b5e      	ldr	r3, [pc, #376]	@ (800be60 <UART_SetConfig+0x284>)
 800bce6:	429a      	cmp	r2, r3
 800bce8:	d004      	beq.n	800bcf4 <UART_SetConfig+0x118>
 800bcea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcec:	681a      	ldr	r2, [r3, #0]
 800bcee:	4b5e      	ldr	r3, [pc, #376]	@ (800be68 <UART_SetConfig+0x28c>)
 800bcf0:	429a      	cmp	r2, r3
 800bcf2:	d172      	bne.n	800bdda <UART_SetConfig+0x1fe>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800bcf4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	623b      	str	r3, [r7, #32]
 800bcfa:	627a      	str	r2, [r7, #36]	@ 0x24
 800bcfc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800bd00:	f7fc ff34 	bl	8008b6c <HAL_RCCEx_GetPeriphCLKFreq>
 800bd04:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800bd06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	f000 80e7 	beq.w	800bedc <UART_SetConfig+0x300>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bd0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd12:	4a5a      	ldr	r2, [pc, #360]	@ (800be7c <UART_SetConfig+0x2a0>)
 800bd14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bd18:	461a      	mov	r2, r3
 800bd1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd1c:	fbb3 f3f2 	udiv	r3, r3, r2
 800bd20:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bd22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd24:	685a      	ldr	r2, [r3, #4]
 800bd26:	4613      	mov	r3, r2
 800bd28:	005b      	lsls	r3, r3, #1
 800bd2a:	4413      	add	r3, r2
 800bd2c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bd2e:	429a      	cmp	r2, r3
 800bd30:	d305      	bcc.n	800bd3e <UART_SetConfig+0x162>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bd32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd34:	685b      	ldr	r3, [r3, #4]
 800bd36:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bd38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bd3a:	429a      	cmp	r2, r3
 800bd3c:	d903      	bls.n	800bd46 <UART_SetConfig+0x16a>
      {
        ret = HAL_ERROR;
 800bd3e:	2301      	movs	r3, #1
 800bd40:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800bd44:	e048      	b.n	800bdd8 <UART_SetConfig+0x1fc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bd46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd48:	2200      	movs	r2, #0
 800bd4a:	61bb      	str	r3, [r7, #24]
 800bd4c:	61fa      	str	r2, [r7, #28]
 800bd4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd52:	4a4a      	ldr	r2, [pc, #296]	@ (800be7c <UART_SetConfig+0x2a0>)
 800bd54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bd58:	b29b      	uxth	r3, r3
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	613b      	str	r3, [r7, #16]
 800bd5e:	617a      	str	r2, [r7, #20]
 800bd60:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800bd64:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800bd68:	f7f6 fd20 	bl	80027ac <__aeabi_uldivmod>
 800bd6c:	4602      	mov	r2, r0
 800bd6e:	460b      	mov	r3, r1
 800bd70:	4610      	mov	r0, r2
 800bd72:	4619      	mov	r1, r3
 800bd74:	f04f 0200 	mov.w	r2, #0
 800bd78:	f04f 0300 	mov.w	r3, #0
 800bd7c:	020b      	lsls	r3, r1, #8
 800bd7e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bd82:	0202      	lsls	r2, r0, #8
 800bd84:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bd86:	6849      	ldr	r1, [r1, #4]
 800bd88:	0849      	lsrs	r1, r1, #1
 800bd8a:	2000      	movs	r0, #0
 800bd8c:	460c      	mov	r4, r1
 800bd8e:	4605      	mov	r5, r0
 800bd90:	eb12 0804 	adds.w	r8, r2, r4
 800bd94:	eb43 0905 	adc.w	r9, r3, r5
 800bd98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd9a:	685b      	ldr	r3, [r3, #4]
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	60bb      	str	r3, [r7, #8]
 800bda0:	60fa      	str	r2, [r7, #12]
 800bda2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bda6:	4640      	mov	r0, r8
 800bda8:	4649      	mov	r1, r9
 800bdaa:	f7f6 fcff 	bl	80027ac <__aeabi_uldivmod>
 800bdae:	4602      	mov	r2, r0
 800bdb0:	460b      	mov	r3, r1
 800bdb2:	4613      	mov	r3, r2
 800bdb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bdb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bdb8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bdbc:	d308      	bcc.n	800bdd0 <UART_SetConfig+0x1f4>
 800bdbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bdc0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bdc4:	d204      	bcs.n	800bdd0 <UART_SetConfig+0x1f4>
        {
          huart->Instance->BRR = usartdiv;
 800bdc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800bdcc:	60da      	str	r2, [r3, #12]
 800bdce:	e003      	b.n	800bdd8 <UART_SetConfig+0x1fc>
        }
        else
        {
          ret = HAL_ERROR;
 800bdd0:	2301      	movs	r3, #1
 800bdd2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800bdd6:	e081      	b.n	800bedc <UART_SetConfig+0x300>
 800bdd8:	e080      	b.n	800bedc <UART_SetConfig+0x300>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bdda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bddc:	69db      	ldr	r3, [r3, #28]
 800bdde:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bde2:	d14d      	bne.n	800be80 <UART_SetConfig+0x2a4>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800bde4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bde6:	2200      	movs	r2, #0
 800bde8:	603b      	str	r3, [r7, #0]
 800bdea:	607a      	str	r2, [r7, #4]
 800bdec:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bdf0:	f7fc febc 	bl	8008b6c <HAL_RCCEx_GetPeriphCLKFreq>
 800bdf4:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bdf6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d06f      	beq.n	800bedc <UART_SetConfig+0x300>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bdfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be00:	4a1e      	ldr	r2, [pc, #120]	@ (800be7c <UART_SetConfig+0x2a0>)
 800be02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800be06:	461a      	mov	r2, r3
 800be08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be0a:	fbb3 f3f2 	udiv	r3, r3, r2
 800be0e:	005a      	lsls	r2, r3, #1
 800be10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be12:	685b      	ldr	r3, [r3, #4]
 800be14:	085b      	lsrs	r3, r3, #1
 800be16:	441a      	add	r2, r3
 800be18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be1a:	685b      	ldr	r3, [r3, #4]
 800be1c:	fbb2 f3f3 	udiv	r3, r2, r3
 800be20:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800be22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be24:	2b0f      	cmp	r3, #15
 800be26:	d916      	bls.n	800be56 <UART_SetConfig+0x27a>
 800be28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800be2e:	d212      	bcs.n	800be56 <UART_SetConfig+0x27a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800be30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be32:	b29b      	uxth	r3, r3
 800be34:	f023 030f 	bic.w	r3, r3, #15
 800be38:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800be3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be3c:	085b      	lsrs	r3, r3, #1
 800be3e:	b29b      	uxth	r3, r3
 800be40:	f003 0307 	and.w	r3, r3, #7
 800be44:	b29a      	uxth	r2, r3
 800be46:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800be48:	4313      	orrs	r3, r2
 800be4a:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800be4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800be52:	60da      	str	r2, [r3, #12]
 800be54:	e042      	b.n	800bedc <UART_SetConfig+0x300>
      }
      else
      {
        ret = HAL_ERROR;
 800be56:	2301      	movs	r3, #1
 800be58:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800be5c:	e03e      	b.n	800bedc <UART_SetConfig+0x300>
 800be5e:	bf00      	nop
 800be60:	46002400 	.word	0x46002400
 800be64:	cfff69f3 	.word	0xcfff69f3
 800be68:	56002400 	.word	0x56002400
 800be6c:	40013800 	.word	0x40013800
 800be70:	40004800 	.word	0x40004800
 800be74:	40004c00 	.word	0x40004c00
 800be78:	40005000 	.word	0x40005000
 800be7c:	08016478 	.word	0x08016478
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800be80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800be82:	2200      	movs	r2, #0
 800be84:	469a      	mov	sl, r3
 800be86:	4693      	mov	fp, r2
 800be88:	4650      	mov	r0, sl
 800be8a:	4659      	mov	r1, fp
 800be8c:	f7fc fe6e 	bl	8008b6c <HAL_RCCEx_GetPeriphCLKFreq>
 800be90:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800be92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be94:	2b00      	cmp	r3, #0
 800be96:	d021      	beq.n	800bedc <UART_SetConfig+0x300>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800be98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be9c:	4a1a      	ldr	r2, [pc, #104]	@ (800bf08 <UART_SetConfig+0x32c>)
 800be9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bea2:	461a      	mov	r2, r3
 800bea4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bea6:	fbb3 f2f2 	udiv	r2, r3, r2
 800beaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800beac:	685b      	ldr	r3, [r3, #4]
 800beae:	085b      	lsrs	r3, r3, #1
 800beb0:	441a      	add	r2, r3
 800beb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800beb4:	685b      	ldr	r3, [r3, #4]
 800beb6:	fbb2 f3f3 	udiv	r3, r2, r3
 800beba:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bebc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bebe:	2b0f      	cmp	r3, #15
 800bec0:	d909      	bls.n	800bed6 <UART_SetConfig+0x2fa>
 800bec2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bec4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bec8:	d205      	bcs.n	800bed6 <UART_SetConfig+0x2fa>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800beca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800becc:	b29a      	uxth	r2, r3
 800bece:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	60da      	str	r2, [r3, #12]
 800bed4:	e002      	b.n	800bedc <UART_SetConfig+0x300>
      }
      else
      {
        ret = HAL_ERROR;
 800bed6:	2301      	movs	r3, #1
 800bed8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bedc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bede:	2201      	movs	r2, #1
 800bee0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800bee4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bee6:	2201      	movs	r2, #1
 800bee8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800beec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800beee:	2200      	movs	r2, #0
 800bef0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800bef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bef4:	2200      	movs	r2, #0
 800bef6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800bef8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800befc:	4618      	mov	r0, r3
 800befe:	3750      	adds	r7, #80	@ 0x50
 800bf00:	46bd      	mov	sp, r7
 800bf02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bf06:	bf00      	nop
 800bf08:	08016478 	.word	0x08016478

0800bf0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bf0c:	b480      	push	{r7}
 800bf0e:	b083      	sub	sp, #12
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf18:	f003 0308 	and.w	r3, r3, #8
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d00a      	beq.n	800bf36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	685b      	ldr	r3, [r3, #4]
 800bf26:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	430a      	orrs	r2, r1
 800bf34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf3a:	f003 0301 	and.w	r3, r3, #1
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d00a      	beq.n	800bf58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	685b      	ldr	r3, [r3, #4]
 800bf48:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	430a      	orrs	r2, r1
 800bf56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf5c:	f003 0302 	and.w	r3, r3, #2
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d00a      	beq.n	800bf7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	685b      	ldr	r3, [r3, #4]
 800bf6a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	430a      	orrs	r2, r1
 800bf78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf7e:	f003 0304 	and.w	r3, r3, #4
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d00a      	beq.n	800bf9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	685b      	ldr	r3, [r3, #4]
 800bf8c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	430a      	orrs	r2, r1
 800bf9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfa0:	f003 0310 	and.w	r3, r3, #16
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d00a      	beq.n	800bfbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	689b      	ldr	r3, [r3, #8]
 800bfae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	430a      	orrs	r2, r1
 800bfbc:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfc2:	f003 0320 	and.w	r3, r3, #32
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d00a      	beq.n	800bfe0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	689b      	ldr	r3, [r3, #8]
 800bfd0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	430a      	orrs	r2, r1
 800bfde:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d01a      	beq.n	800c022 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	685b      	ldr	r3, [r3, #4]
 800bff2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	430a      	orrs	r2, r1
 800c000:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c006:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c00a:	d10a      	bne.n	800c022 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	685b      	ldr	r3, [r3, #4]
 800c012:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	430a      	orrs	r2, r1
 800c020:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c026:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d00a      	beq.n	800c044 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	685b      	ldr	r3, [r3, #4]
 800c034:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	430a      	orrs	r2, r1
 800c042:	605a      	str	r2, [r3, #4]
  }
}
 800c044:	bf00      	nop
 800c046:	370c      	adds	r7, #12
 800c048:	46bd      	mov	sp, r7
 800c04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04e:	4770      	bx	lr

0800c050 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b098      	sub	sp, #96	@ 0x60
 800c054:	af02      	add	r7, sp, #8
 800c056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	2200      	movs	r2, #0
 800c05c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c060:	f7f8 fcd8 	bl	8004a14 <HAL_GetTick>
 800c064:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	f003 0308 	and.w	r3, r3, #8
 800c070:	2b08      	cmp	r3, #8
 800c072:	d12f      	bne.n	800c0d4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c074:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c078:	9300      	str	r3, [sp, #0]
 800c07a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c07c:	2200      	movs	r2, #0
 800c07e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c082:	6878      	ldr	r0, [r7, #4]
 800c084:	f000 f88e 	bl	800c1a4 <UART_WaitOnFlagUntilTimeout>
 800c088:	4603      	mov	r3, r0
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d022      	beq.n	800c0d4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c096:	e853 3f00 	ldrex	r3, [r3]
 800c09a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c09c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c09e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c0a2:	653b      	str	r3, [r7, #80]	@ 0x50
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	461a      	mov	r2, r3
 800c0aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c0ac:	647b      	str	r3, [r7, #68]	@ 0x44
 800c0ae:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c0b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c0b4:	e841 2300 	strex	r3, r2, [r1]
 800c0b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c0ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d1e6      	bne.n	800c08e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	2220      	movs	r2, #32
 800c0c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c0d0:	2303      	movs	r3, #3
 800c0d2:	e063      	b.n	800c19c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	f003 0304 	and.w	r3, r3, #4
 800c0de:	2b04      	cmp	r3, #4
 800c0e0:	d149      	bne.n	800c176 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c0e2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c0e6:	9300      	str	r3, [sp, #0]
 800c0e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c0f0:	6878      	ldr	r0, [r7, #4]
 800c0f2:	f000 f857 	bl	800c1a4 <UART_WaitOnFlagUntilTimeout>
 800c0f6:	4603      	mov	r3, r0
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d03c      	beq.n	800c176 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c104:	e853 3f00 	ldrex	r3, [r3]
 800c108:	623b      	str	r3, [r7, #32]
   return(result);
 800c10a:	6a3b      	ldr	r3, [r7, #32]
 800c10c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c110:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	461a      	mov	r2, r3
 800c118:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c11a:	633b      	str	r3, [r7, #48]	@ 0x30
 800c11c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c11e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c120:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c122:	e841 2300 	strex	r3, r2, [r1]
 800c126:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d1e6      	bne.n	800c0fc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	3308      	adds	r3, #8
 800c134:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c136:	693b      	ldr	r3, [r7, #16]
 800c138:	e853 3f00 	ldrex	r3, [r3]
 800c13c:	60fb      	str	r3, [r7, #12]
   return(result);
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	f023 0301 	bic.w	r3, r3, #1
 800c144:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	3308      	adds	r3, #8
 800c14c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c14e:	61fa      	str	r2, [r7, #28]
 800c150:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c152:	69b9      	ldr	r1, [r7, #24]
 800c154:	69fa      	ldr	r2, [r7, #28]
 800c156:	e841 2300 	strex	r3, r2, [r1]
 800c15a:	617b      	str	r3, [r7, #20]
   return(result);
 800c15c:	697b      	ldr	r3, [r7, #20]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d1e5      	bne.n	800c12e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	2220      	movs	r2, #32
 800c166:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	2200      	movs	r2, #0
 800c16e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c172:	2303      	movs	r3, #3
 800c174:	e012      	b.n	800c19c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	2220      	movs	r2, #32
 800c17a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	2220      	movs	r2, #32
 800c182:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	2200      	movs	r2, #0
 800c18a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	2200      	movs	r2, #0
 800c190:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	2200      	movs	r2, #0
 800c196:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c19a:	2300      	movs	r3, #0
}
 800c19c:	4618      	mov	r0, r3
 800c19e:	3758      	adds	r7, #88	@ 0x58
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	bd80      	pop	{r7, pc}

0800c1a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b084      	sub	sp, #16
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	60f8      	str	r0, [r7, #12]
 800c1ac:	60b9      	str	r1, [r7, #8]
 800c1ae:	603b      	str	r3, [r7, #0]
 800c1b0:	4613      	mov	r3, r2
 800c1b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c1b4:	e04f      	b.n	800c256 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c1b6:	69bb      	ldr	r3, [r7, #24]
 800c1b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1bc:	d04b      	beq.n	800c256 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c1be:	f7f8 fc29 	bl	8004a14 <HAL_GetTick>
 800c1c2:	4602      	mov	r2, r0
 800c1c4:	683b      	ldr	r3, [r7, #0]
 800c1c6:	1ad3      	subs	r3, r2, r3
 800c1c8:	69ba      	ldr	r2, [r7, #24]
 800c1ca:	429a      	cmp	r2, r3
 800c1cc:	d302      	bcc.n	800c1d4 <UART_WaitOnFlagUntilTimeout+0x30>
 800c1ce:	69bb      	ldr	r3, [r7, #24]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d101      	bne.n	800c1d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c1d4:	2303      	movs	r3, #3
 800c1d6:	e04e      	b.n	800c276 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	f003 0304 	and.w	r3, r3, #4
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d037      	beq.n	800c256 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c1e6:	68bb      	ldr	r3, [r7, #8]
 800c1e8:	2b80      	cmp	r3, #128	@ 0x80
 800c1ea:	d034      	beq.n	800c256 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c1ec:	68bb      	ldr	r3, [r7, #8]
 800c1ee:	2b40      	cmp	r3, #64	@ 0x40
 800c1f0:	d031      	beq.n	800c256 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	69db      	ldr	r3, [r3, #28]
 800c1f8:	f003 0308 	and.w	r3, r3, #8
 800c1fc:	2b08      	cmp	r3, #8
 800c1fe:	d110      	bne.n	800c222 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	2208      	movs	r2, #8
 800c206:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c208:	68f8      	ldr	r0, [r7, #12]
 800c20a:	f000 f838 	bl	800c27e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	2208      	movs	r2, #8
 800c212:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	2200      	movs	r2, #0
 800c21a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c21e:	2301      	movs	r3, #1
 800c220:	e029      	b.n	800c276 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	69db      	ldr	r3, [r3, #28]
 800c228:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c22c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c230:	d111      	bne.n	800c256 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c23a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c23c:	68f8      	ldr	r0, [r7, #12]
 800c23e:	f000 f81e 	bl	800c27e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	2220      	movs	r2, #32
 800c246:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	2200      	movs	r2, #0
 800c24e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c252:	2303      	movs	r3, #3
 800c254:	e00f      	b.n	800c276 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	69da      	ldr	r2, [r3, #28]
 800c25c:	68bb      	ldr	r3, [r7, #8]
 800c25e:	4013      	ands	r3, r2
 800c260:	68ba      	ldr	r2, [r7, #8]
 800c262:	429a      	cmp	r2, r3
 800c264:	bf0c      	ite	eq
 800c266:	2301      	moveq	r3, #1
 800c268:	2300      	movne	r3, #0
 800c26a:	b2db      	uxtb	r3, r3
 800c26c:	461a      	mov	r2, r3
 800c26e:	79fb      	ldrb	r3, [r7, #7]
 800c270:	429a      	cmp	r2, r3
 800c272:	d0a0      	beq.n	800c1b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c274:	2300      	movs	r3, #0
}
 800c276:	4618      	mov	r0, r3
 800c278:	3710      	adds	r7, #16
 800c27a:	46bd      	mov	sp, r7
 800c27c:	bd80      	pop	{r7, pc}

0800c27e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c27e:	b480      	push	{r7}
 800c280:	b095      	sub	sp, #84	@ 0x54
 800c282:	af00      	add	r7, sp, #0
 800c284:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c28c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c28e:	e853 3f00 	ldrex	r3, [r3]
 800c292:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c296:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c29a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	461a      	mov	r2, r3
 800c2a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c2a4:	643b      	str	r3, [r7, #64]	@ 0x40
 800c2a6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c2aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c2ac:	e841 2300 	strex	r3, r2, [r1]
 800c2b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c2b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d1e6      	bne.n	800c286 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	3308      	adds	r3, #8
 800c2be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2c0:	6a3b      	ldr	r3, [r7, #32]
 800c2c2:	e853 3f00 	ldrex	r3, [r3]
 800c2c6:	61fb      	str	r3, [r7, #28]
   return(result);
 800c2c8:	69fb      	ldr	r3, [r7, #28]
 800c2ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c2ce:	f023 0301 	bic.w	r3, r3, #1
 800c2d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	3308      	adds	r3, #8
 800c2da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c2dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c2de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c2e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c2e4:	e841 2300 	strex	r3, r2, [r1]
 800c2e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c2ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d1e3      	bne.n	800c2b8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c2f4:	2b01      	cmp	r3, #1
 800c2f6:	d118      	bne.n	800c32a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	e853 3f00 	ldrex	r3, [r3]
 800c304:	60bb      	str	r3, [r7, #8]
   return(result);
 800c306:	68bb      	ldr	r3, [r7, #8]
 800c308:	f023 0310 	bic.w	r3, r3, #16
 800c30c:	647b      	str	r3, [r7, #68]	@ 0x44
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	461a      	mov	r2, r3
 800c314:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c316:	61bb      	str	r3, [r7, #24]
 800c318:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c31a:	6979      	ldr	r1, [r7, #20]
 800c31c:	69ba      	ldr	r2, [r7, #24]
 800c31e:	e841 2300 	strex	r3, r2, [r1]
 800c322:	613b      	str	r3, [r7, #16]
   return(result);
 800c324:	693b      	ldr	r3, [r7, #16]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d1e6      	bne.n	800c2f8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	2220      	movs	r2, #32
 800c32e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	2200      	movs	r2, #0
 800c336:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	2200      	movs	r2, #0
 800c33c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c33e:	bf00      	nop
 800c340:	3754      	adds	r7, #84	@ 0x54
 800c342:	46bd      	mov	sp, r7
 800c344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c348:	4770      	bx	lr

0800c34a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c34a:	b480      	push	{r7}
 800c34c:	b085      	sub	sp, #20
 800c34e:	af00      	add	r7, sp, #0
 800c350:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c358:	2b01      	cmp	r3, #1
 800c35a:	d101      	bne.n	800c360 <HAL_UARTEx_DisableFifoMode+0x16>
 800c35c:	2302      	movs	r3, #2
 800c35e:	e027      	b.n	800c3b0 <HAL_UARTEx_DisableFifoMode+0x66>
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	2201      	movs	r2, #1
 800c364:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	2224      	movs	r2, #36	@ 0x24
 800c36c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	681a      	ldr	r2, [r3, #0]
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	f022 0201 	bic.w	r2, r2, #1
 800c386:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c38e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	2200      	movs	r2, #0
 800c394:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	68fa      	ldr	r2, [r7, #12]
 800c39c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	2220      	movs	r2, #32
 800c3a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c3ae:	2300      	movs	r3, #0
}
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	3714      	adds	r7, #20
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ba:	4770      	bx	lr

0800c3bc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b084      	sub	sp, #16
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
 800c3c4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c3cc:	2b01      	cmp	r3, #1
 800c3ce:	d101      	bne.n	800c3d4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c3d0:	2302      	movs	r3, #2
 800c3d2:	e02d      	b.n	800c430 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	2201      	movs	r2, #1
 800c3d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	2224      	movs	r2, #36	@ 0x24
 800c3e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	681a      	ldr	r2, [r3, #0]
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	f022 0201 	bic.w	r2, r2, #1
 800c3fa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	689b      	ldr	r3, [r3, #8]
 800c402:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	683a      	ldr	r2, [r7, #0]
 800c40c:	430a      	orrs	r2, r1
 800c40e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c410:	6878      	ldr	r0, [r7, #4]
 800c412:	f000 f84f 	bl	800c4b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	68fa      	ldr	r2, [r7, #12]
 800c41c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	2220      	movs	r2, #32
 800c422:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	2200      	movs	r2, #0
 800c42a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c42e:	2300      	movs	r3, #0
}
 800c430:	4618      	mov	r0, r3
 800c432:	3710      	adds	r7, #16
 800c434:	46bd      	mov	sp, r7
 800c436:	bd80      	pop	{r7, pc}

0800c438 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	b084      	sub	sp, #16
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
 800c440:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c448:	2b01      	cmp	r3, #1
 800c44a:	d101      	bne.n	800c450 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c44c:	2302      	movs	r3, #2
 800c44e:	e02d      	b.n	800c4ac <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	2201      	movs	r2, #1
 800c454:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	2224      	movs	r2, #36	@ 0x24
 800c45c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	681a      	ldr	r2, [r3, #0]
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	f022 0201 	bic.w	r2, r2, #1
 800c476:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	689b      	ldr	r3, [r3, #8]
 800c47e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	683a      	ldr	r2, [r7, #0]
 800c488:	430a      	orrs	r2, r1
 800c48a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c48c:	6878      	ldr	r0, [r7, #4]
 800c48e:	f000 f811 	bl	800c4b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	68fa      	ldr	r2, [r7, #12]
 800c498:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	2220      	movs	r2, #32
 800c49e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c4aa:	2300      	movs	r3, #0
}
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	3710      	adds	r7, #16
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	bd80      	pop	{r7, pc}

0800c4b4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c4b4:	b480      	push	{r7}
 800c4b6:	b085      	sub	sp, #20
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d108      	bne.n	800c4d6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	2201      	movs	r2, #1
 800c4c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	2201      	movs	r2, #1
 800c4d0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c4d4:	e031      	b.n	800c53a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c4d6:	2308      	movs	r3, #8
 800c4d8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c4da:	2308      	movs	r3, #8
 800c4dc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	689b      	ldr	r3, [r3, #8]
 800c4e4:	0e5b      	lsrs	r3, r3, #25
 800c4e6:	b2db      	uxtb	r3, r3
 800c4e8:	f003 0307 	and.w	r3, r3, #7
 800c4ec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	689b      	ldr	r3, [r3, #8]
 800c4f4:	0f5b      	lsrs	r3, r3, #29
 800c4f6:	b2db      	uxtb	r3, r3
 800c4f8:	f003 0307 	and.w	r3, r3, #7
 800c4fc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c4fe:	7bbb      	ldrb	r3, [r7, #14]
 800c500:	7b3a      	ldrb	r2, [r7, #12]
 800c502:	4911      	ldr	r1, [pc, #68]	@ (800c548 <UARTEx_SetNbDataToProcess+0x94>)
 800c504:	5c8a      	ldrb	r2, [r1, r2]
 800c506:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c50a:	7b3a      	ldrb	r2, [r7, #12]
 800c50c:	490f      	ldr	r1, [pc, #60]	@ (800c54c <UARTEx_SetNbDataToProcess+0x98>)
 800c50e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c510:	fb93 f3f2 	sdiv	r3, r3, r2
 800c514:	b29a      	uxth	r2, r3
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c51c:	7bfb      	ldrb	r3, [r7, #15]
 800c51e:	7b7a      	ldrb	r2, [r7, #13]
 800c520:	4909      	ldr	r1, [pc, #36]	@ (800c548 <UARTEx_SetNbDataToProcess+0x94>)
 800c522:	5c8a      	ldrb	r2, [r1, r2]
 800c524:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c528:	7b7a      	ldrb	r2, [r7, #13]
 800c52a:	4908      	ldr	r1, [pc, #32]	@ (800c54c <UARTEx_SetNbDataToProcess+0x98>)
 800c52c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c52e:	fb93 f3f2 	sdiv	r3, r3, r2
 800c532:	b29a      	uxth	r2, r3
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c53a:	bf00      	nop
 800c53c:	3714      	adds	r7, #20
 800c53e:	46bd      	mov	sp, r7
 800c540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c544:	4770      	bx	lr
 800c546:	bf00      	nop
 800c548:	08016490 	.word	0x08016490
 800c54c:	08016498 	.word	0x08016498

0800c550 <BoardInitPeriph>:
//{
//    SystemWakeupTimeCalibrated = true;
//}

void BoardInitPeriph( void )
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b082      	sub	sp, #8
 800c554:	af02      	add	r7, sp, #8
    /* Init the GPIO extender pins */
#if ( USE_POTENTIOMETER == 0 )
    GpioInit( &Led1, LED_1, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 1 );
#endif
    GpioInit( &Led2, LED_2, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 1 );
 800c556:	2301      	movs	r3, #1
 800c558:	9301      	str	r3, [sp, #4]
 800c55a:	2300      	movs	r3, #0
 800c55c:	9300      	str	r3, [sp, #0]
 800c55e:	2300      	movs	r3, #0
 800c560:	2201      	movs	r2, #1
 800c562:	2100      	movs	r1, #0
 800c564:	4812      	ldr	r0, [pc, #72]	@ (800c5b0 <BoardInitPeriph+0x60>)
 800c566:	f000 fb4b 	bl	800cc00 <GpioInit>
    GpioInit( &Led3, LED_3, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 1 );
 800c56a:	2301      	movs	r3, #1
 800c56c:	9301      	str	r3, [sp, #4]
 800c56e:	2300      	movs	r3, #0
 800c570:	9300      	str	r3, [sp, #0]
 800c572:	2300      	movs	r3, #0
 800c574:	2201      	movs	r2, #1
 800c576:	2101      	movs	r1, #1
 800c578:	480e      	ldr	r0, [pc, #56]	@ (800c5b4 <BoardInitPeriph+0x64>)
 800c57a:	f000 fb41 	bl	800cc00 <GpioInit>
    GpioInit( &Led4, LED_4, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 1 );
 800c57e:	2301      	movs	r3, #1
 800c580:	9301      	str	r3, [sp, #4]
 800c582:	2300      	movs	r3, #0
 800c584:	9300      	str	r3, [sp, #0]
 800c586:	2300      	movs	r3, #0
 800c588:	2201      	movs	r2, #1
 800c58a:	2108      	movs	r1, #8
 800c58c:	480a      	ldr	r0, [pc, #40]	@ (800c5b8 <BoardInitPeriph+0x68>)
 800c58e:	f000 fb37 	bl	800cc00 <GpioInit>

    // Switch LED 1, 2, 3, 4 OFF
#if ( USE_POTENTIOMETER == 0 )
    GpioWrite( &Led1, 0 );
#endif
    GpioWrite( &Led2, 0 );
 800c592:	2100      	movs	r1, #0
 800c594:	4806      	ldr	r0, [pc, #24]	@ (800c5b0 <BoardInitPeriph+0x60>)
 800c596:	f000 fb72 	bl	800cc7e <GpioWrite>
    GpioWrite( &Led3, 0 );
 800c59a:	2100      	movs	r1, #0
 800c59c:	4805      	ldr	r0, [pc, #20]	@ (800c5b4 <BoardInitPeriph+0x64>)
 800c59e:	f000 fb6e 	bl	800cc7e <GpioWrite>
    GpioWrite( &Led4, 0 );
 800c5a2:	2100      	movs	r1, #0
 800c5a4:	4804      	ldr	r0, [pc, #16]	@ (800c5b8 <BoardInitPeriph+0x68>)
 800c5a6:	f000 fb6a 	bl	800cc7e <GpioWrite>
}
 800c5aa:	bf00      	nop
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	bd80      	pop	{r7, pc}
 800c5b0:	20000464 	.word	0x20000464
 800c5b4:	20000470 	.word	0x20000470
 800c5b8:	2000047c 	.word	0x2000047c

0800c5bc <BoardInitMcu>:

void BoardInitMcu( void )
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b082      	sub	sp, #8
 800c5c0:	af02      	add	r7, sp, #8
    if( McuInitialized == false )
 800c5c2:	4b10      	ldr	r3, [pc, #64]	@ (800c604 <BoardInitMcu+0x48>)
 800c5c4:	781b      	ldrb	r3, [r3, #0]
 800c5c6:	f083 0301 	eor.w	r3, r3, #1
 800c5ca:	b2db      	uxtb	r3, r3
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d001      	beq.n	800c5d4 <BoardInitMcu+0x18>
#endif
//        HAL_Init( );

//        SystemClockConfig( );

        RtcInit( );
 800c5d0:	f000 fb6a 	bl	800cca8 <RtcInit>
//        SystemClockReConfig( );
    }

//    AdcInit( &Adc, POTI );

    SpiInit( &SX1276.Spi, RADIO_MOSI, RADIO_MISO, RADIO_SCLK, NC );
 800c5d4:	f04f 33ff 	mov.w	r3, #4294967295
 800c5d8:	9300      	str	r3, [sp, #0]
 800c5da:	2305      	movs	r3, #5
 800c5dc:	2206      	movs	r2, #6
 800c5de:	2107      	movs	r1, #7
 800c5e0:	4809      	ldr	r0, [pc, #36]	@ (800c608 <BoardInitMcu+0x4c>)
 800c5e2:	f001 f82d 	bl	800d640 <SpiInit>
    SX1276IoInit( );
 800c5e6:	f001 f91d 	bl	800d824 <SX1276IoInit>

    if( McuInitialized == false )
 800c5ea:	4b06      	ldr	r3, [pc, #24]	@ (800c604 <BoardInitMcu+0x48>)
 800c5ec:	781b      	ldrb	r3, [r3, #0]
 800c5ee:	f083 0301 	eor.w	r3, r3, #1
 800c5f2:	b2db      	uxtb	r3, r3
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d002      	beq.n	800c5fe <BoardInitMcu+0x42>
    {
        McuInitialized = true;
 800c5f8:	4b02      	ldr	r3, [pc, #8]	@ (800c604 <BoardInitMcu+0x48>)
 800c5fa:	2201      	movs	r2, #1
 800c5fc:	701a      	strb	r2, [r3, #0]
//        if( GetBoardPowerSource( ) == BATTERY_POWER )
//        {
//            CalibrateSystemWakeupTime( );
//        }
    }
}
 800c5fe:	bf00      	nop
 800c600:	46bd      	mov	sp, r7
 800c602:	bd80      	pop	{r7, pc}
 800c604:	20000488 	.word	0x20000488
 800c608:	200006a8 	.word	0x200006a8

0800c60c <DelayMs>:
{
    DelayMs( s * 1000.0f );
}

void DelayMs( uint32_t ms )
{
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b082      	sub	sp, #8
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
    HAL_Delay( ms );
 800c614:	6878      	ldr	r0, [r7, #4]
 800c616:	f7f8 fa09 	bl	8004a2c <HAL_Delay>
}
 800c61a:	bf00      	nop
 800c61c:	3708      	adds	r7, #8
 800c61e:	46bd      	mov	sp, r7
 800c620:	bd80      	pop	{r7, pc}
	...

0800c624 <GpioMcuInit>:
#include "gpio-board.h"

static GpioIrqHandler *GpioIrq[16];

void GpioMcuInit( Gpio_t *obj, PinNames pin, PinModes mode, PinConfigs config, PinTypes type, uint32_t value )
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b08c      	sub	sp, #48	@ 0x30
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
 800c62c:	4608      	mov	r0, r1
 800c62e:	4611      	mov	r1, r2
 800c630:	461a      	mov	r2, r3
 800c632:	4603      	mov	r3, r0
 800c634:	70fb      	strb	r3, [r7, #3]
 800c636:	460b      	mov	r3, r1
 800c638:	70bb      	strb	r3, [r7, #2]
 800c63a:	4613      	mov	r3, r2
 800c63c:	707b      	strb	r3, [r7, #1]
    GPIO_InitTypeDef GPIO_InitStructure;

    if( pin == NC )
 800c63e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c642:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c646:	f000 80c3 	beq.w	800c7d0 <GpioMcuInit+0x1ac>
    {
        return;
    }
    obj->pin = pin;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	78fa      	ldrb	r2, [r7, #3]
 800c64e:	701a      	strb	r2, [r3, #0]
    obj->pinIndex = ( 0x01 << ( obj->pin & 0x0F ) );
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	f993 3000 	ldrsb.w	r3, [r3]
 800c656:	b2db      	uxtb	r3, r3
 800c658:	f003 030f 	and.w	r3, r3, #15
 800c65c:	2201      	movs	r2, #1
 800c65e:	fa02 f303 	lsl.w	r3, r2, r3
 800c662:	b29a      	uxth	r2, r3
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	805a      	strh	r2, [r3, #2]

    if( ( obj->pin & 0xF0 ) == 0x00 )
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	f993 3000 	ldrsb.w	r3, [r3]
 800c66e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c672:	2b00      	cmp	r3, #0
 800c674:	d112      	bne.n	800c69c <GpioMcuInit+0x78>
    {
        obj->port = GPIOA;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	4a57      	ldr	r2, [pc, #348]	@ (800c7d8 <GpioMcuInit+0x1b4>)
 800c67a:	605a      	str	r2, [r3, #4]
        __HAL_RCC_GPIOA_CLK_ENABLE( );
 800c67c:	4b57      	ldr	r3, [pc, #348]	@ (800c7dc <GpioMcuInit+0x1b8>)
 800c67e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c682:	4a56      	ldr	r2, [pc, #344]	@ (800c7dc <GpioMcuInit+0x1b8>)
 800c684:	f043 0301 	orr.w	r3, r3, #1
 800c688:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800c68c:	4b53      	ldr	r3, [pc, #332]	@ (800c7dc <GpioMcuInit+0x1b8>)
 800c68e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c692:	f003 0301 	and.w	r3, r3, #1
 800c696:	61bb      	str	r3, [r7, #24]
 800c698:	69bb      	ldr	r3, [r7, #24]
 800c69a:	e05f      	b.n	800c75c <GpioMcuInit+0x138>
    }
    else if( ( obj->pin & 0xF0 ) == 0x10 )
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	f993 3000 	ldrsb.w	r3, [r3]
 800c6a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c6a6:	2b10      	cmp	r3, #16
 800c6a8:	d112      	bne.n	800c6d0 <GpioMcuInit+0xac>
    {
        obj->port = GPIOB;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	4a4c      	ldr	r2, [pc, #304]	@ (800c7e0 <GpioMcuInit+0x1bc>)
 800c6ae:	605a      	str	r2, [r3, #4]
        __HAL_RCC_GPIOB_CLK_ENABLE( );
 800c6b0:	4b4a      	ldr	r3, [pc, #296]	@ (800c7dc <GpioMcuInit+0x1b8>)
 800c6b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c6b6:	4a49      	ldr	r2, [pc, #292]	@ (800c7dc <GpioMcuInit+0x1b8>)
 800c6b8:	f043 0302 	orr.w	r3, r3, #2
 800c6bc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800c6c0:	4b46      	ldr	r3, [pc, #280]	@ (800c7dc <GpioMcuInit+0x1b8>)
 800c6c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c6c6:	f003 0302 	and.w	r3, r3, #2
 800c6ca:	617b      	str	r3, [r7, #20]
 800c6cc:	697b      	ldr	r3, [r7, #20]
 800c6ce:	e045      	b.n	800c75c <GpioMcuInit+0x138>
    }
    else if( ( obj->pin & 0xF0 ) == 0x20 )
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	f993 3000 	ldrsb.w	r3, [r3]
 800c6d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c6da:	2b20      	cmp	r3, #32
 800c6dc:	d112      	bne.n	800c704 <GpioMcuInit+0xe0>
    {
        obj->port = GPIOC;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	4a40      	ldr	r2, [pc, #256]	@ (800c7e4 <GpioMcuInit+0x1c0>)
 800c6e2:	605a      	str	r2, [r3, #4]
        __HAL_RCC_GPIOC_CLK_ENABLE( );
 800c6e4:	4b3d      	ldr	r3, [pc, #244]	@ (800c7dc <GpioMcuInit+0x1b8>)
 800c6e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c6ea:	4a3c      	ldr	r2, [pc, #240]	@ (800c7dc <GpioMcuInit+0x1b8>)
 800c6ec:	f043 0304 	orr.w	r3, r3, #4
 800c6f0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800c6f4:	4b39      	ldr	r3, [pc, #228]	@ (800c7dc <GpioMcuInit+0x1b8>)
 800c6f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c6fa:	f003 0304 	and.w	r3, r3, #4
 800c6fe:	613b      	str	r3, [r7, #16]
 800c700:	693b      	ldr	r3, [r7, #16]
 800c702:	e02b      	b.n	800c75c <GpioMcuInit+0x138>
    }
    else if( ( obj->pin & 0xF0 ) == 0x30 )
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	f993 3000 	ldrsb.w	r3, [r3]
 800c70a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c70e:	2b30      	cmp	r3, #48	@ 0x30
 800c710:	d112      	bne.n	800c738 <GpioMcuInit+0x114>
    {
        obj->port = GPIOD;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	4a34      	ldr	r2, [pc, #208]	@ (800c7e8 <GpioMcuInit+0x1c4>)
 800c716:	605a      	str	r2, [r3, #4]
        __HAL_RCC_GPIOD_CLK_ENABLE( );
 800c718:	4b30      	ldr	r3, [pc, #192]	@ (800c7dc <GpioMcuInit+0x1b8>)
 800c71a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c71e:	4a2f      	ldr	r2, [pc, #188]	@ (800c7dc <GpioMcuInit+0x1b8>)
 800c720:	f043 0308 	orr.w	r3, r3, #8
 800c724:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800c728:	4b2c      	ldr	r3, [pc, #176]	@ (800c7dc <GpioMcuInit+0x1b8>)
 800c72a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c72e:	f003 0308 	and.w	r3, r3, #8
 800c732:	60fb      	str	r3, [r7, #12]
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	e011      	b.n	800c75c <GpioMcuInit+0x138>
    }
    else
    {
        obj->port = GPIOH;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	4a2c      	ldr	r2, [pc, #176]	@ (800c7ec <GpioMcuInit+0x1c8>)
 800c73c:	605a      	str	r2, [r3, #4]
        __HAL_RCC_GPIOH_CLK_ENABLE( );
 800c73e:	4b27      	ldr	r3, [pc, #156]	@ (800c7dc <GpioMcuInit+0x1b8>)
 800c740:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c744:	4a25      	ldr	r2, [pc, #148]	@ (800c7dc <GpioMcuInit+0x1b8>)
 800c746:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c74a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800c74e:	4b23      	ldr	r3, [pc, #140]	@ (800c7dc <GpioMcuInit+0x1b8>)
 800c750:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c754:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c758:	60bb      	str	r3, [r7, #8]
 800c75a:	68bb      	ldr	r3, [r7, #8]
    }

    GPIO_InitStructure.Pin =  obj->pinIndex ;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	885b      	ldrh	r3, [r3, #2]
 800c760:	61fb      	str	r3, [r7, #28]
    GPIO_InitStructure.Pull = type;
 800c762:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800c766:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 800c768:	2302      	movs	r3, #2
 800c76a:	62bb      	str	r3, [r7, #40]	@ 0x28

    if( mode == PIN_INPUT )
 800c76c:	78bb      	ldrb	r3, [r7, #2]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d102      	bne.n	800c778 <GpioMcuInit+0x154>
    {
        GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 800c772:	2300      	movs	r3, #0
 800c774:	623b      	str	r3, [r7, #32]
 800c776:	e01b      	b.n	800c7b0 <GpioMcuInit+0x18c>
    }
    else if( mode == PIN_ANALOGIC )
 800c778:	78bb      	ldrb	r3, [r7, #2]
 800c77a:	2b03      	cmp	r3, #3
 800c77c:	d102      	bne.n	800c784 <GpioMcuInit+0x160>
    {
        GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
 800c77e:	2303      	movs	r3, #3
 800c780:	623b      	str	r3, [r7, #32]
 800c782:	e015      	b.n	800c7b0 <GpioMcuInit+0x18c>
    }
    else if( mode == PIN_ALTERNATE_FCT )
 800c784:	78bb      	ldrb	r3, [r7, #2]
 800c786:	2b02      	cmp	r3, #2
 800c788:	d10a      	bne.n	800c7a0 <GpioMcuInit+0x17c>
    {
        if( config == PIN_OPEN_DRAIN )
 800c78a:	787b      	ldrb	r3, [r7, #1]
 800c78c:	2b01      	cmp	r3, #1
 800c78e:	d102      	bne.n	800c796 <GpioMcuInit+0x172>
        {
            GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 800c790:	2312      	movs	r3, #18
 800c792:	623b      	str	r3, [r7, #32]
 800c794:	e001      	b.n	800c79a <GpioMcuInit+0x176>
        }
        else
        {
            GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800c796:	2302      	movs	r3, #2
 800c798:	623b      	str	r3, [r7, #32]
        }
        GPIO_InitStructure.Alternate = value;
 800c79a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c79c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c79e:	e007      	b.n	800c7b0 <GpioMcuInit+0x18c>
    }
    else // mode ouptut
    {
        if( config == PIN_OPEN_DRAIN )
 800c7a0:	787b      	ldrb	r3, [r7, #1]
 800c7a2:	2b01      	cmp	r3, #1
 800c7a4:	d102      	bne.n	800c7ac <GpioMcuInit+0x188>
        {
            GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_OD;
 800c7a6:	2311      	movs	r3, #17
 800c7a8:	623b      	str	r3, [r7, #32]
 800c7aa:	e001      	b.n	800c7b0 <GpioMcuInit+0x18c>
        }
        else
        {
            GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800c7ac:	2301      	movs	r3, #1
 800c7ae:	623b      	str	r3, [r7, #32]
        }
    }

    HAL_GPIO_Init( obj->port, &GPIO_InitStructure );
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	685b      	ldr	r3, [r3, #4]
 800c7b4:	f107 021c 	add.w	r2, r7, #28
 800c7b8:	4611      	mov	r1, r2
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	f7f8 fbe0 	bl	8004f80 <HAL_GPIO_Init>

    // Sets initial output value
    if( mode == PIN_OUTPUT )
 800c7c0:	78bb      	ldrb	r3, [r7, #2]
 800c7c2:	2b01      	cmp	r3, #1
 800c7c4:	d105      	bne.n	800c7d2 <GpioMcuInit+0x1ae>
    {
        GpioMcuWrite( obj, value );
 800c7c6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c7c8:	6878      	ldr	r0, [r7, #4]
 800c7ca:	f000 f953 	bl	800ca74 <GpioMcuWrite>
 800c7ce:	e000      	b.n	800c7d2 <GpioMcuInit+0x1ae>
        return;
 800c7d0:	bf00      	nop
    }
}
 800c7d2:	3730      	adds	r7, #48	@ 0x30
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	bd80      	pop	{r7, pc}
 800c7d8:	42020000 	.word	0x42020000
 800c7dc:	46020c00 	.word	0x46020c00
 800c7e0:	42020400 	.word	0x42020400
 800c7e4:	42020800 	.word	0x42020800
 800c7e8:	42020c00 	.word	0x42020c00
 800c7ec:	42021c00 	.word	0x42021c00

0800c7f0 <GpioMcuSetInterrupt>:

void GpioMcuSetInterrupt( Gpio_t *obj, IrqModes irqMode, IrqPriorities irqPriority, GpioIrqHandler *irqHandler )
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b08c      	sub	sp, #48	@ 0x30
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	60f8      	str	r0, [r7, #12]
 800c7f8:	607b      	str	r3, [r7, #4]
 800c7fa:	460b      	mov	r3, r1
 800c7fc:	72fb      	strb	r3, [r7, #11]
 800c7fe:	4613      	mov	r3, r2
 800c800:	72bb      	strb	r3, [r7, #10]
    uint32_t priority = 0;
 800c802:	2300      	movs	r3, #0
 800c804:	62fb      	str	r3, [r7, #44]	@ 0x2c

    IRQn_Type IRQnb = EXTI0_IRQn;
 800c806:	230b      	movs	r3, #11
 800c808:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    GPIO_InitTypeDef   GPIO_InitStructure;

    if( irqHandler == NULL )
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	f000 8123 	beq.w	800ca5a <GpioMcuSetInterrupt+0x26a>
    {
        return;
    }

    GPIO_InitStructure.Pin =  obj->pinIndex;
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	885b      	ldrh	r3, [r3, #2]
 800c818:	617b      	str	r3, [r7, #20]

    if( irqMode == IRQ_RISING_EDGE )
 800c81a:	7afb      	ldrb	r3, [r7, #11]
 800c81c:	2b01      	cmp	r3, #1
 800c81e:	d102      	bne.n	800c826 <GpioMcuSetInterrupt+0x36>
    {
        GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 800c820:	4b90      	ldr	r3, [pc, #576]	@ (800ca64 <GpioMcuSetInterrupt+0x274>)
 800c822:	61bb      	str	r3, [r7, #24]
 800c824:	e007      	b.n	800c836 <GpioMcuSetInterrupt+0x46>
    }
    else if( irqMode == IRQ_FALLING_EDGE )
 800c826:	7afb      	ldrb	r3, [r7, #11]
 800c828:	2b02      	cmp	r3, #2
 800c82a:	d102      	bne.n	800c832 <GpioMcuSetInterrupt+0x42>
    {
        GPIO_InitStructure.Mode = GPIO_MODE_IT_FALLING;
 800c82c:	4b8e      	ldr	r3, [pc, #568]	@ (800ca68 <GpioMcuSetInterrupt+0x278>)
 800c82e:	61bb      	str	r3, [r7, #24]
 800c830:	e001      	b.n	800c836 <GpioMcuSetInterrupt+0x46>
    }
    else
    {
        GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING_FALLING;
 800c832:	4b8e      	ldr	r3, [pc, #568]	@ (800ca6c <GpioMcuSetInterrupt+0x27c>)
 800c834:	61bb      	str	r3, [r7, #24]
    }

    GPIO_InitStructure.Pull = GPIO_NOPULL;
 800c836:	2300      	movs	r3, #0
 800c838:	61fb      	str	r3, [r7, #28]
    GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 800c83a:	2302      	movs	r3, #2
 800c83c:	623b      	str	r3, [r7, #32]

    HAL_GPIO_Init( obj->port, &GPIO_InitStructure );
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	685b      	ldr	r3, [r3, #4]
 800c842:	f107 0214 	add.w	r2, r7, #20
 800c846:	4611      	mov	r1, r2
 800c848:	4618      	mov	r0, r3
 800c84a:	f7f8 fb99 	bl	8004f80 <HAL_GPIO_Init>

    switch( irqPriority )
 800c84e:	7abb      	ldrb	r3, [r7, #10]
 800c850:	2b03      	cmp	r3, #3
 800c852:	d00f      	beq.n	800c874 <GpioMcuSetInterrupt+0x84>
 800c854:	2b03      	cmp	r3, #3
 800c856:	dc10      	bgt.n	800c87a <GpioMcuSetInterrupt+0x8a>
 800c858:	2b01      	cmp	r3, #1
 800c85a:	dc02      	bgt.n	800c862 <GpioMcuSetInterrupt+0x72>
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	da03      	bge.n	800c868 <GpioMcuSetInterrupt+0x78>
 800c860:	e00b      	b.n	800c87a <GpioMcuSetInterrupt+0x8a>
 800c862:	2b02      	cmp	r3, #2
 800c864:	d003      	beq.n	800c86e <GpioMcuSetInterrupt+0x7e>
 800c866:	e008      	b.n	800c87a <GpioMcuSetInterrupt+0x8a>
    {
    case IRQ_VERY_LOW_PRIORITY:
    case IRQ_LOW_PRIORITY:
        priority = 3;
 800c868:	2303      	movs	r3, #3
 800c86a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800c86c:	e008      	b.n	800c880 <GpioMcuSetInterrupt+0x90>
    case IRQ_MEDIUM_PRIORITY:
        priority = 2;
 800c86e:	2302      	movs	r3, #2
 800c870:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800c872:	e005      	b.n	800c880 <GpioMcuSetInterrupt+0x90>
    case IRQ_HIGH_PRIORITY:
        priority = 1;
 800c874:	2301      	movs	r3, #1
 800c876:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800c878:	e002      	b.n	800c880 <GpioMcuSetInterrupt+0x90>
    case IRQ_VERY_HIGH_PRIORITY:
    default:
        priority = 0;
 800c87a:	2300      	movs	r3, #0
 800c87c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800c87e:	bf00      	nop
    }

    switch( obj->pinIndex )		// PK: definicja EXTI rozszerzona do pełnych 16 przerwań
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	885b      	ldrh	r3, [r3, #2]
 800c884:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c888:	f000 80cb 	beq.w	800ca22 <GpioMcuSetInterrupt+0x232>
 800c88c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c890:	f300 80cb 	bgt.w	800ca2a <GpioMcuSetInterrupt+0x23a>
 800c894:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c898:	f000 80bf 	beq.w	800ca1a <GpioMcuSetInterrupt+0x22a>
 800c89c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c8a0:	f300 80c3 	bgt.w	800ca2a <GpioMcuSetInterrupt+0x23a>
 800c8a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c8a8:	f000 80b3 	beq.w	800ca12 <GpioMcuSetInterrupt+0x222>
 800c8ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c8b0:	f300 80bb 	bgt.w	800ca2a <GpioMcuSetInterrupt+0x23a>
 800c8b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c8b8:	f000 80a7 	beq.w	800ca0a <GpioMcuSetInterrupt+0x21a>
 800c8bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c8c0:	f300 80b3 	bgt.w	800ca2a <GpioMcuSetInterrupt+0x23a>
 800c8c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c8c8:	f000 809b 	beq.w	800ca02 <GpioMcuSetInterrupt+0x212>
 800c8cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c8d0:	f300 80ab 	bgt.w	800ca2a <GpioMcuSetInterrupt+0x23a>
 800c8d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c8d8:	f000 808f 	beq.w	800c9fa <GpioMcuSetInterrupt+0x20a>
 800c8dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c8e0:	f300 80a3 	bgt.w	800ca2a <GpioMcuSetInterrupt+0x23a>
 800c8e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c8e8:	f000 8083 	beq.w	800c9f2 <GpioMcuSetInterrupt+0x202>
 800c8ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c8f0:	f300 809b 	bgt.w	800ca2a <GpioMcuSetInterrupt+0x23a>
 800c8f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c8f8:	d077      	beq.n	800c9ea <GpioMcuSetInterrupt+0x1fa>
 800c8fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c8fe:	f300 8094 	bgt.w	800ca2a <GpioMcuSetInterrupt+0x23a>
 800c902:	2b80      	cmp	r3, #128	@ 0x80
 800c904:	d06d      	beq.n	800c9e2 <GpioMcuSetInterrupt+0x1f2>
 800c906:	2b80      	cmp	r3, #128	@ 0x80
 800c908:	f300 808f 	bgt.w	800ca2a <GpioMcuSetInterrupt+0x23a>
 800c90c:	2b20      	cmp	r3, #32
 800c90e:	dc49      	bgt.n	800c9a4 <GpioMcuSetInterrupt+0x1b4>
 800c910:	2b00      	cmp	r3, #0
 800c912:	f340 808a 	ble.w	800ca2a <GpioMcuSetInterrupt+0x23a>
 800c916:	3b01      	subs	r3, #1
 800c918:	2b1f      	cmp	r3, #31
 800c91a:	f200 8086 	bhi.w	800ca2a <GpioMcuSetInterrupt+0x23a>
 800c91e:	a201      	add	r2, pc, #4	@ (adr r2, 800c924 <GpioMcuSetInterrupt+0x134>)
 800c920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c924:	0800c9ab 	.word	0x0800c9ab
 800c928:	0800c9b3 	.word	0x0800c9b3
 800c92c:	0800ca2b 	.word	0x0800ca2b
 800c930:	0800c9bb 	.word	0x0800c9bb
 800c934:	0800ca2b 	.word	0x0800ca2b
 800c938:	0800ca2b 	.word	0x0800ca2b
 800c93c:	0800ca2b 	.word	0x0800ca2b
 800c940:	0800c9c3 	.word	0x0800c9c3
 800c944:	0800ca2b 	.word	0x0800ca2b
 800c948:	0800ca2b 	.word	0x0800ca2b
 800c94c:	0800ca2b 	.word	0x0800ca2b
 800c950:	0800ca2b 	.word	0x0800ca2b
 800c954:	0800ca2b 	.word	0x0800ca2b
 800c958:	0800ca2b 	.word	0x0800ca2b
 800c95c:	0800ca2b 	.word	0x0800ca2b
 800c960:	0800c9cb 	.word	0x0800c9cb
 800c964:	0800ca2b 	.word	0x0800ca2b
 800c968:	0800ca2b 	.word	0x0800ca2b
 800c96c:	0800ca2b 	.word	0x0800ca2b
 800c970:	0800ca2b 	.word	0x0800ca2b
 800c974:	0800ca2b 	.word	0x0800ca2b
 800c978:	0800ca2b 	.word	0x0800ca2b
 800c97c:	0800ca2b 	.word	0x0800ca2b
 800c980:	0800ca2b 	.word	0x0800ca2b
 800c984:	0800ca2b 	.word	0x0800ca2b
 800c988:	0800ca2b 	.word	0x0800ca2b
 800c98c:	0800ca2b 	.word	0x0800ca2b
 800c990:	0800ca2b 	.word	0x0800ca2b
 800c994:	0800ca2b 	.word	0x0800ca2b
 800c998:	0800ca2b 	.word	0x0800ca2b
 800c99c:	0800ca2b 	.word	0x0800ca2b
 800c9a0:	0800c9d3 	.word	0x0800c9d3
 800c9a4:	2b40      	cmp	r3, #64	@ 0x40
 800c9a6:	d018      	beq.n	800c9da <GpioMcuSetInterrupt+0x1ea>
        break;
    case GPIO_PIN_15:
        IRQnb = EXTI15_IRQn;
        break;
    default:
        break;
 800c9a8:	e03f      	b.n	800ca2a <GpioMcuSetInterrupt+0x23a>
        IRQnb = EXTI0_IRQn;
 800c9aa:	230b      	movs	r3, #11
 800c9ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 800c9b0:	e03c      	b.n	800ca2c <GpioMcuSetInterrupt+0x23c>
        IRQnb = EXTI1_IRQn;
 800c9b2:	230c      	movs	r3, #12
 800c9b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 800c9b8:	e038      	b.n	800ca2c <GpioMcuSetInterrupt+0x23c>
        IRQnb = EXTI2_IRQn;
 800c9ba:	230d      	movs	r3, #13
 800c9bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 800c9c0:	e034      	b.n	800ca2c <GpioMcuSetInterrupt+0x23c>
        IRQnb = EXTI3_IRQn;
 800c9c2:	230e      	movs	r3, #14
 800c9c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 800c9c8:	e030      	b.n	800ca2c <GpioMcuSetInterrupt+0x23c>
        IRQnb = EXTI4_IRQn;
 800c9ca:	230f      	movs	r3, #15
 800c9cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 800c9d0:	e02c      	b.n	800ca2c <GpioMcuSetInterrupt+0x23c>
        IRQnb = EXTI5_IRQn;
 800c9d2:	2310      	movs	r3, #16
 800c9d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 800c9d8:	e028      	b.n	800ca2c <GpioMcuSetInterrupt+0x23c>
        IRQnb = EXTI6_IRQn;
 800c9da:	2311      	movs	r3, #17
 800c9dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 800c9e0:	e024      	b.n	800ca2c <GpioMcuSetInterrupt+0x23c>
        IRQnb = EXTI7_IRQn;
 800c9e2:	2312      	movs	r3, #18
 800c9e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 800c9e8:	e020      	b.n	800ca2c <GpioMcuSetInterrupt+0x23c>
        IRQnb = EXTI8_IRQn;
 800c9ea:	2313      	movs	r3, #19
 800c9ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 800c9f0:	e01c      	b.n	800ca2c <GpioMcuSetInterrupt+0x23c>
        IRQnb = EXTI9_IRQn;
 800c9f2:	2314      	movs	r3, #20
 800c9f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 800c9f8:	e018      	b.n	800ca2c <GpioMcuSetInterrupt+0x23c>
        IRQnb = EXTI10_IRQn;
 800c9fa:	2315      	movs	r3, #21
 800c9fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 800ca00:	e014      	b.n	800ca2c <GpioMcuSetInterrupt+0x23c>
        IRQnb = EXTI11_IRQn;
 800ca02:	2316      	movs	r3, #22
 800ca04:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 800ca08:	e010      	b.n	800ca2c <GpioMcuSetInterrupt+0x23c>
        IRQnb = EXTI12_IRQn;
 800ca0a:	2317      	movs	r3, #23
 800ca0c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 800ca10:	e00c      	b.n	800ca2c <GpioMcuSetInterrupt+0x23c>
        IRQnb = EXTI13_IRQn;
 800ca12:	2318      	movs	r3, #24
 800ca14:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 800ca18:	e008      	b.n	800ca2c <GpioMcuSetInterrupt+0x23c>
        IRQnb = EXTI14_IRQn;
 800ca1a:	2319      	movs	r3, #25
 800ca1c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 800ca20:	e004      	b.n	800ca2c <GpioMcuSetInterrupt+0x23c>
        IRQnb = EXTI15_IRQn;
 800ca22:	231a      	movs	r3, #26
 800ca24:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 800ca28:	e000      	b.n	800ca2c <GpioMcuSetInterrupt+0x23c>
        break;
 800ca2a:	bf00      	nop
    }
    //watch

    GpioIrq[(obj->pin ) & 0x0F] = irqHandler;
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	f993 3000 	ldrsb.w	r3, [r3]
 800ca32:	b2db      	uxtb	r3, r3
 800ca34:	f003 030f 	and.w	r3, r3, #15
 800ca38:	490d      	ldr	r1, [pc, #52]	@ (800ca70 <GpioMcuSetInterrupt+0x280>)
 800ca3a:	687a      	ldr	r2, [r7, #4]
 800ca3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    HAL_NVIC_SetPriority( IRQnb , priority, 0 );
 800ca40:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800ca44:	2200      	movs	r2, #0
 800ca46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ca48:	4618      	mov	r0, r3
 800ca4a:	f7f8 f8cb 	bl	8004be4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ( IRQnb );
 800ca4e:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800ca52:	4618      	mov	r0, r3
 800ca54:	f7f8 f8e0 	bl	8004c18 <HAL_NVIC_EnableIRQ>
 800ca58:	e000      	b.n	800ca5c <GpioMcuSetInterrupt+0x26c>
        return;
 800ca5a:	bf00      	nop
}
 800ca5c:	3730      	adds	r7, #48	@ 0x30
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	bd80      	pop	{r7, pc}
 800ca62:	bf00      	nop
 800ca64:	10110000 	.word	0x10110000
 800ca68:	10210000 	.word	0x10210000
 800ca6c:	10310000 	.word	0x10310000
 800ca70:	2000048c 	.word	0x2000048c

0800ca74 <GpioMcuWrite>:
    GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init( obj->port, &GPIO_InitStructure );
}

void GpioMcuWrite( Gpio_t *obj, uint32_t value )
{
 800ca74:	b580      	push	{r7, lr}
 800ca76:	b082      	sub	sp, #8
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
 800ca7c:	6039      	str	r1, [r7, #0]
    if( ( obj == NULL ) || ( obj->port == NULL ) )
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	2b00      	cmp	r3, #0
    {
        assert_param( FAIL );
    }
    // Check if pin is not connected
    if( obj->pin == NC )
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	f993 3000 	ldrsb.w	r3, [r3]
 800ca88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca8c:	d009      	beq.n	800caa2 <GpioMcuWrite+0x2e>
    {
        return;
    }
    HAL_GPIO_WritePin( obj->port, obj->pinIndex , ( GPIO_PinState )value );
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	6858      	ldr	r0, [r3, #4]
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	885b      	ldrh	r3, [r3, #2]
 800ca96:	683a      	ldr	r2, [r7, #0]
 800ca98:	b2d2      	uxtb	r2, r2
 800ca9a:	4619      	mov	r1, r3
 800ca9c:	f7f8 fc60 	bl	8005360 <HAL_GPIO_WritePin>
 800caa0:	e000      	b.n	800caa4 <GpioMcuWrite+0x30>
        return;
 800caa2:	bf00      	nop
}
 800caa4:	3708      	adds	r7, #8
 800caa6:	46bd      	mov	sp, r7
 800caa8:	bd80      	pop	{r7, pc}

0800caaa <EXTI0_IRQHandler>:
    }
    return HAL_GPIO_ReadPin( obj->port, obj->pinIndex );
}

void EXTI0_IRQHandler( void )
{
 800caaa:	b580      	push	{r7, lr}
 800caac:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 800caae:	f000 f9d9 	bl	800ce64 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_0 );
 800cab2:	2001      	movs	r0, #1
 800cab4:	f7f8 fc86 	bl	80053c4 <HAL_GPIO_EXTI_IRQHandler>
}
 800cab8:	bf00      	nop
 800caba:	bd80      	pop	{r7, pc}

0800cabc <EXTI1_IRQHandler>:

void EXTI1_IRQHandler( void )
{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 800cac0:	f000 f9d0 	bl	800ce64 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_1 );
 800cac4:	2002      	movs	r0, #2
 800cac6:	f7f8 fc7d 	bl	80053c4 <HAL_GPIO_EXTI_IRQHandler>
}
 800caca:	bf00      	nop
 800cacc:	bd80      	pop	{r7, pc}

0800cace <EXTI2_IRQHandler>:

void EXTI2_IRQHandler( void )
{
 800cace:	b580      	push	{r7, lr}
 800cad0:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 800cad2:	f000 f9c7 	bl	800ce64 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_2 );
 800cad6:	2004      	movs	r0, #4
 800cad8:	f7f8 fc74 	bl	80053c4 <HAL_GPIO_EXTI_IRQHandler>
}
 800cadc:	bf00      	nop
 800cade:	bd80      	pop	{r7, pc}

0800cae0 <EXTI4_IRQHandler>:
//#endif
//    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_3 );
//}

void EXTI4_IRQHandler( void )
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 800cae4:	f000 f9be 	bl	800ce64 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_4 );
 800cae8:	2010      	movs	r0, #16
 800caea:	f7f8 fc6b 	bl	80053c4 <HAL_GPIO_EXTI_IRQHandler>
}
 800caee:	bf00      	nop
 800caf0:	bd80      	pop	{r7, pc}

0800caf2 <EXTI5_IRQHandler>:

void EXTI5_IRQHandler( void )
{
 800caf2:	b580      	push	{r7, lr}
 800caf4:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 800caf6:	f000 f9b5 	bl	800ce64 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_5 );
 800cafa:	2020      	movs	r0, #32
 800cafc:	f7f8 fc62 	bl	80053c4 <HAL_GPIO_EXTI_IRQHandler>
}
 800cb00:	bf00      	nop
 800cb02:	bd80      	pop	{r7, pc}

0800cb04 <EXTI6_IRQHandler>:

void EXTI6_IRQHandler( void )
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 800cb08:	f000 f9ac 	bl	800ce64 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_6 );
 800cb0c:	2040      	movs	r0, #64	@ 0x40
 800cb0e:	f7f8 fc59 	bl	80053c4 <HAL_GPIO_EXTI_IRQHandler>
}
 800cb12:	bf00      	nop
 800cb14:	bd80      	pop	{r7, pc}

0800cb16 <EXTI7_IRQHandler>:

void EXTI7_IRQHandler( void )
{
 800cb16:	b580      	push	{r7, lr}
 800cb18:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 800cb1a:	f000 f9a3 	bl	800ce64 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_7 );
 800cb1e:	2080      	movs	r0, #128	@ 0x80
 800cb20:	f7f8 fc50 	bl	80053c4 <HAL_GPIO_EXTI_IRQHandler>
}
 800cb24:	bf00      	nop
 800cb26:	bd80      	pop	{r7, pc}

0800cb28 <EXTI9_IRQHandler>:
//#endif
//    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_8 );
//}

void EXTI9_IRQHandler( void )
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 800cb2c:	f000 f99a 	bl	800ce64 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_9 );
 800cb30:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800cb34:	f7f8 fc46 	bl	80053c4 <HAL_GPIO_EXTI_IRQHandler>
}
 800cb38:	bf00      	nop
 800cb3a:	bd80      	pop	{r7, pc}

0800cb3c <EXTI10_IRQHandler>:

void EXTI10_IRQHandler( void )
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 800cb40:	f000 f990 	bl	800ce64 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_10 );
 800cb44:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800cb48:	f7f8 fc3c 	bl	80053c4 <HAL_GPIO_EXTI_IRQHandler>
}
 800cb4c:	bf00      	nop
 800cb4e:	bd80      	pop	{r7, pc}

0800cb50 <EXTI11_IRQHandler>:

void EXTI11_IRQHandler( void )
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 800cb54:	f000 f986 	bl	800ce64 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_11 );
 800cb58:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800cb5c:	f7f8 fc32 	bl	80053c4 <HAL_GPIO_EXTI_IRQHandler>
}
 800cb60:	bf00      	nop
 800cb62:	bd80      	pop	{r7, pc}

0800cb64 <EXTI12_IRQHandler>:

void EXTI12_IRQHandler( void )
{
 800cb64:	b580      	push	{r7, lr}
 800cb66:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 800cb68:	f000 f97c 	bl	800ce64 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_12 );
 800cb6c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800cb70:	f7f8 fc28 	bl	80053c4 <HAL_GPIO_EXTI_IRQHandler>
}
 800cb74:	bf00      	nop
 800cb76:	bd80      	pop	{r7, pc}

0800cb78 <EXTI13_IRQHandler>:

void EXTI13_IRQHandler( void )
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 800cb7c:	f000 f972 	bl	800ce64 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_13 );
 800cb80:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800cb84:	f7f8 fc1e 	bl	80053c4 <HAL_GPIO_EXTI_IRQHandler>
}
 800cb88:	bf00      	nop
 800cb8a:	bd80      	pop	{r7, pc}

0800cb8c <EXTI14_IRQHandler>:

void EXTI14_IRQHandler( void )
{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 800cb90:	f000 f968 	bl	800ce64 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_14 );
 800cb94:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800cb98:	f7f8 fc14 	bl	80053c4 <HAL_GPIO_EXTI_IRQHandler>
}
 800cb9c:	bf00      	nop
 800cb9e:	bd80      	pop	{r7, pc}

0800cba0 <EXTI15_IRQHandler>:

void EXTI15_IRQHandler( void )
{
 800cba0:	b580      	push	{r7, lr}
 800cba2:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 800cba4:	f000 f95e 	bl	800ce64 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_15 );
 800cba8:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800cbac:	f7f8 fc0a 	bl	80053c4 <HAL_GPIO_EXTI_IRQHandler>
}
 800cbb0:	bf00      	nop
 800cbb2:	bd80      	pop	{r7, pc}

0800cbb4 <HAL_GPIO_EXTI_Rising_Callback>:
}
*/

//void HAL_GPIO_EXTI_Callback( uint16_t gpioPin )       // PK: dla L476
void HAL_GPIO_EXTI_Rising_Callback( uint16_t gpioPin )  // PK: dla U545
{
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	b084      	sub	sp, #16
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	4603      	mov	r3, r0
 800cbbc:	80fb      	strh	r3, [r7, #6]
    uint8_t callbackIndex = 0;
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	73fb      	strb	r3, [r7, #15]

    if( gpioPin > 0 )
 800cbc2:	88fb      	ldrh	r3, [r7, #6]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d009      	beq.n	800cbdc <HAL_GPIO_EXTI_Rising_Callback+0x28>
    {
        while( gpioPin != 0x01 )
 800cbc8:	e005      	b.n	800cbd6 <HAL_GPIO_EXTI_Rising_Callback+0x22>
        {
            gpioPin = gpioPin >> 1;
 800cbca:	88fb      	ldrh	r3, [r7, #6]
 800cbcc:	085b      	lsrs	r3, r3, #1
 800cbce:	80fb      	strh	r3, [r7, #6]
            callbackIndex++;
 800cbd0:	7bfb      	ldrb	r3, [r7, #15]
 800cbd2:	3301      	adds	r3, #1
 800cbd4:	73fb      	strb	r3, [r7, #15]
        while( gpioPin != 0x01 )
 800cbd6:	88fb      	ldrh	r3, [r7, #6]
 800cbd8:	2b01      	cmp	r3, #1
 800cbda:	d1f6      	bne.n	800cbca <HAL_GPIO_EXTI_Rising_Callback+0x16>
        }
    }

    if( GpioIrq[callbackIndex] != NULL )
 800cbdc:	7bfb      	ldrb	r3, [r7, #15]
 800cbde:	4a07      	ldr	r2, [pc, #28]	@ (800cbfc <HAL_GPIO_EXTI_Rising_Callback+0x48>)
 800cbe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d004      	beq.n	800cbf2 <HAL_GPIO_EXTI_Rising_Callback+0x3e>
    {
        GpioIrq[callbackIndex]( );
 800cbe8:	7bfb      	ldrb	r3, [r7, #15]
 800cbea:	4a04      	ldr	r2, [pc, #16]	@ (800cbfc <HAL_GPIO_EXTI_Rising_Callback+0x48>)
 800cbec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cbf0:	4798      	blx	r3
    }
}
 800cbf2:	bf00      	nop
 800cbf4:	3710      	adds	r7, #16
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	bd80      	pop	{r7, pc}
 800cbfa:	bf00      	nop
 800cbfc:	2000048c 	.word	0x2000048c

0800cc00 <GpioInit>:
#if defined( BOARD_IOE_EXT )
#include "gpio-ioe.h"
#endif

void GpioInit( Gpio_t *obj, PinNames pin, PinModes mode,  PinConfigs config, PinTypes type, uint32_t value )
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b084      	sub	sp, #16
 800cc04:	af02      	add	r7, sp, #8
 800cc06:	6078      	str	r0, [r7, #4]
 800cc08:	4608      	mov	r0, r1
 800cc0a:	4611      	mov	r1, r2
 800cc0c:	461a      	mov	r2, r3
 800cc0e:	4603      	mov	r3, r0
 800cc10:	70fb      	strb	r3, [r7, #3]
 800cc12:	460b      	mov	r3, r1
 800cc14:	70bb      	strb	r3, [r7, #2]
 800cc16:	4613      	mov	r3, r2
 800cc18:	707b      	strb	r3, [r7, #1]
    if( ( uint32_t )( pin >> 4 ) <= 6 )
 800cc1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cc1e:	111b      	asrs	r3, r3, #4
 800cc20:	b25b      	sxtb	r3, r3
 800cc22:	b2db      	uxtb	r3, r3
 800cc24:	2b06      	cmp	r3, #6
 800cc26:	d80b      	bhi.n	800cc40 <GpioInit+0x40>
    {
        GpioMcuInit( obj, pin, mode, config, type, value );
 800cc28:	7878      	ldrb	r0, [r7, #1]
 800cc2a:	78ba      	ldrb	r2, [r7, #2]
 800cc2c:	f997 1003 	ldrsb.w	r1, [r7, #3]
 800cc30:	697b      	ldr	r3, [r7, #20]
 800cc32:	9301      	str	r3, [sp, #4]
 800cc34:	7c3b      	ldrb	r3, [r7, #16]
 800cc36:	9300      	str	r3, [sp, #0]
 800cc38:	4603      	mov	r3, r0
 800cc3a:	6878      	ldr	r0, [r7, #4]
 800cc3c:	f7ff fcf2 	bl	800c624 <GpioMcuInit>
#if defined( BOARD_IOE_EXT )
        // IOExt Pin
        GpioIoeInit( obj, pin, mode, config, type, value );
#endif
    }
}
 800cc40:	bf00      	nop
 800cc42:	3708      	adds	r7, #8
 800cc44:	46bd      	mov	sp, r7
 800cc46:	bd80      	pop	{r7, pc}

0800cc48 <GpioSetInterrupt>:

void GpioSetInterrupt( Gpio_t *obj, IrqModes irqMode, IrqPriorities irqPriority, GpioIrqHandler *irqHandler )
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b084      	sub	sp, #16
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	60f8      	str	r0, [r7, #12]
 800cc50:	607b      	str	r3, [r7, #4]
 800cc52:	460b      	mov	r3, r1
 800cc54:	72fb      	strb	r3, [r7, #11]
 800cc56:	4613      	mov	r3, r2
 800cc58:	72bb      	strb	r3, [r7, #10]
    if( ( uint32_t )( obj->pin >> 4 ) <= 6 )
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	f993 3000 	ldrsb.w	r3, [r3]
 800cc60:	111b      	asrs	r3, r3, #4
 800cc62:	b25b      	sxtb	r3, r3
 800cc64:	b2db      	uxtb	r3, r3
 800cc66:	2b06      	cmp	r3, #6
 800cc68:	d805      	bhi.n	800cc76 <GpioSetInterrupt+0x2e>
    {
        GpioMcuSetInterrupt( obj, irqMode, irqPriority, irqHandler );
 800cc6a:	7aba      	ldrb	r2, [r7, #10]
 800cc6c:	7af9      	ldrb	r1, [r7, #11]
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	68f8      	ldr	r0, [r7, #12]
 800cc72:	f7ff fdbd 	bl	800c7f0 <GpioMcuSetInterrupt>
#if defined( BOARD_IOE_EXT )
        // IOExt Pin
        GpioIoeSetInterrupt( obj, irqMode, irqPriority, irqHandler );
#endif
    }
}
 800cc76:	bf00      	nop
 800cc78:	3710      	adds	r7, #16
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	bd80      	pop	{r7, pc}

0800cc7e <GpioWrite>:
#endif
    }
}

void GpioWrite( Gpio_t *obj, uint32_t value )
{
 800cc7e:	b580      	push	{r7, lr}
 800cc80:	b082      	sub	sp, #8
 800cc82:	af00      	add	r7, sp, #0
 800cc84:	6078      	str	r0, [r7, #4]
 800cc86:	6039      	str	r1, [r7, #0]
    if( ( uint32_t )( obj->pin >> 4 ) <= 6 )
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	f993 3000 	ldrsb.w	r3, [r3]
 800cc8e:	111b      	asrs	r3, r3, #4
 800cc90:	b25b      	sxtb	r3, r3
 800cc92:	b2db      	uxtb	r3, r3
 800cc94:	2b06      	cmp	r3, #6
 800cc96:	d803      	bhi.n	800cca0 <GpioWrite+0x22>
    {
        GpioMcuWrite( obj, value );
 800cc98:	6839      	ldr	r1, [r7, #0]
 800cc9a:	6878      	ldr	r0, [r7, #4]
 800cc9c:	f7ff feea 	bl	800ca74 <GpioMcuWrite>
#if defined( BOARD_IOE_EXT )
        // IOExt Pin
        GpioIoeWrite( obj, value );
#endif
    }
}
 800cca0:	bf00      	nop
 800cca2:	3708      	adds	r7, #8
 800cca4:	46bd      	mov	sp, r7
 800cca6:	bd80      	pop	{r7, pc}

0800cca8 <RtcInit>:
 * \param[IN] year Calendar current year
 */
static void RtcCheckCalendarRollOver( uint8_t year );

void RtcInit( void )
{
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b088      	sub	sp, #32
 800ccac:	af00      	add	r7, sp, #0
    RtcCalendar_t rtcInit;

    if( RtcInitalized == false )
 800ccae:	4b2c      	ldr	r3, [pc, #176]	@ (800cd60 <RtcInit+0xb8>)
 800ccb0:	781b      	ldrb	r3, [r3, #0]
 800ccb2:	f083 0301 	eor.w	r3, r3, #1
 800ccb6:	b2db      	uxtb	r3, r3
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d04d      	beq.n	800cd58 <RtcInit+0xb0>
    {
        __HAL_RCC_RTC_ENABLE( );
 800ccbc:	4b29      	ldr	r3, [pc, #164]	@ (800cd64 <RtcInit+0xbc>)
 800ccbe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ccc2:	4a28      	ldr	r2, [pc, #160]	@ (800cd64 <RtcInit+0xbc>)
 800ccc4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ccc8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        RtcHandle.Instance = RTC;
 800cccc:	4b26      	ldr	r3, [pc, #152]	@ (800cd68 <RtcInit+0xc0>)
 800ccce:	4a27      	ldr	r2, [pc, #156]	@ (800cd6c <RtcInit+0xc4>)
 800ccd0:	601a      	str	r2, [r3, #0]
        RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800ccd2:	4b25      	ldr	r3, [pc, #148]	@ (800cd68 <RtcInit+0xc0>)
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	605a      	str	r2, [r3, #4]

        RtcHandle.Init.AsynchPrediv = 128; // 4; //128;     // changed from 3 - PK
 800ccd8:	4b23      	ldr	r3, [pc, #140]	@ (800cd68 <RtcInit+0xc0>)
 800ccda:	2280      	movs	r2, #128	@ 0x80
 800ccdc:	609a      	str	r2, [r3, #8]
        RtcHandle.Init.SynchPrediv = 25; //4; //256*64;      // changed from 3 - PK
 800ccde:	4b22      	ldr	r3, [pc, #136]	@ (800cd68 <RtcInit+0xc0>)
 800cce0:	2219      	movs	r2, #25
 800cce2:	60da      	str	r2, [r3, #12]

        RtcHandle.Init.OutPut = RTC_OUTPUT_DISABLE;
 800cce4:	4b20      	ldr	r3, [pc, #128]	@ (800cd68 <RtcInit+0xc0>)
 800cce6:	2200      	movs	r2, #0
 800cce8:	611a      	str	r2, [r3, #16]
        RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800ccea:	4b1f      	ldr	r3, [pc, #124]	@ (800cd68 <RtcInit+0xc0>)
 800ccec:	2200      	movs	r2, #0
 800ccee:	619a      	str	r2, [r3, #24]
        RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800ccf0:	4b1d      	ldr	r3, [pc, #116]	@ (800cd68 <RtcInit+0xc0>)
 800ccf2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800ccf6:	61da      	str	r2, [r3, #28]
        HAL_RTC_Init( &RtcHandle );
 800ccf8:	481b      	ldr	r0, [pc, #108]	@ (800cd68 <RtcInit+0xc0>)
 800ccfa:	f7fd f9a9 	bl	800a050 <HAL_RTC_Init>

        // Set Date: Friday 1st of January 2000
        rtcInit.CalendarDate.Year = 0;
 800ccfe:	2300      	movs	r3, #0
 800cd00:	727b      	strb	r3, [r7, #9]
        rtcInit.CalendarDate.Month = 1;
 800cd02:	2301      	movs	r3, #1
 800cd04:	71fb      	strb	r3, [r7, #7]
        rtcInit.CalendarDate.Date = 1;
 800cd06:	2301      	movs	r3, #1
 800cd08:	723b      	strb	r3, [r7, #8]
        rtcInit.CalendarDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 800cd0a:	2306      	movs	r3, #6
 800cd0c:	71bb      	strb	r3, [r7, #6]
        HAL_RTC_SetDate( &RtcHandle, &rtcInit.CalendarDate, RTC_FORMAT_BIN );
 800cd0e:	1d3b      	adds	r3, r7, #4
 800cd10:	3302      	adds	r3, #2
 800cd12:	2200      	movs	r2, #0
 800cd14:	4619      	mov	r1, r3
 800cd16:	4814      	ldr	r0, [pc, #80]	@ (800cd68 <RtcInit+0xc0>)
 800cd18:	f7fd fb32 	bl	800a380 <HAL_RTC_SetDate>

        // Set Time: 00:00:00
        rtcInit.CalendarTime.Hours = 0;
 800cd1c:	2300      	movs	r3, #0
 800cd1e:	733b      	strb	r3, [r7, #12]
        rtcInit.CalendarTime.Minutes = 0;
 800cd20:	2300      	movs	r3, #0
 800cd22:	737b      	strb	r3, [r7, #13]
        rtcInit.CalendarTime.Seconds = 0;
 800cd24:	2300      	movs	r3, #0
 800cd26:	73bb      	strb	r3, [r7, #14]
        rtcInit.CalendarTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800cd28:	2300      	movs	r3, #0
 800cd2a:	73fb      	strb	r3, [r7, #15]
        rtcInit.CalendarTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	61bb      	str	r3, [r7, #24]
        rtcInit.CalendarTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800cd30:	2300      	movs	r3, #0
 800cd32:	61fb      	str	r3, [r7, #28]
        HAL_RTC_SetTime( &RtcHandle, &rtcInit.CalendarTime, RTC_FORMAT_BIN );
 800cd34:	1d3b      	adds	r3, r7, #4
 800cd36:	3308      	adds	r3, #8
 800cd38:	2200      	movs	r2, #0
 800cd3a:	4619      	mov	r1, r3
 800cd3c:	480a      	ldr	r0, [pc, #40]	@ (800cd68 <RtcInit+0xc0>)
 800cd3e:	f7fd fa11 	bl	800a164 <HAL_RTC_SetTime>

        HAL_NVIC_SetPriority( RTC_IRQn, 4, 0 );
 800cd42:	2200      	movs	r2, #0
 800cd44:	2104      	movs	r1, #4
 800cd46:	2002      	movs	r0, #2
 800cd48:	f7f7 ff4c 	bl	8004be4 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ( RTC_IRQn );
 800cd4c:	2002      	movs	r0, #2
 800cd4e:	f7f7 ff63 	bl	8004c18 <HAL_NVIC_EnableIRQ>
        RtcInitalized = true;
 800cd52:	4b03      	ldr	r3, [pc, #12]	@ (800cd60 <RtcInit+0xb8>)
 800cd54:	2201      	movs	r2, #1
 800cd56:	701a      	strb	r2, [r3, #0]
    }
}
 800cd58:	bf00      	nop
 800cd5a:	3720      	adds	r7, #32
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	bd80      	pop	{r7, pc}
 800cd60:	20000520 	.word	0x20000520
 800cd64:	46020c00 	.word	0x46020c00
 800cd68:	200004f0 	.word	0x200004f0
 800cd6c:	46007800 	.word	0x46007800

0800cd70 <RtcSetTimeout>:

void RtcSetTimeout( uint32_t timeout )
{
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b082      	sub	sp, #8
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	6078      	str	r0, [r7, #4]
    RtcStartWakeUpAlarm( timeout );
 800cd78:	6878      	ldr	r0, [r7, #4]
 800cd7a:	f000 f8e1 	bl	800cf40 <RtcStartWakeUpAlarm>
}
 800cd7e:	bf00      	nop
 800cd80:	3708      	adds	r7, #8
 800cd82:	46bd      	mov	sp, r7
 800cd84:	bd80      	pop	{r7, pc}
	...

0800cd88 <RtcGetAdjustedTimeoutValue>:

TimerTime_t RtcGetAdjustedTimeoutValue( uint32_t timeout )
{
 800cd88:	b480      	push	{r7}
 800cd8a:	b083      	sub	sp, #12
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]
    if( timeout > McuWakeUpTime )
 800cd90:	4b16      	ldr	r3, [pc, #88]	@ (800cdec <RtcGetAdjustedTimeoutValue+0x64>)
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	687a      	ldr	r2, [r7, #4]
 800cd96:	429a      	cmp	r2, r3
 800cd98:	d90c      	bls.n	800cdb4 <RtcGetAdjustedTimeoutValue+0x2c>
    {   // we have waken up from a GPIO and we have lost "McuWakeUpTime" that we need to compensate on next event
        if( NonScheduledWakeUp == true )
 800cd9a:	4b15      	ldr	r3, [pc, #84]	@ (800cdf0 <RtcGetAdjustedTimeoutValue+0x68>)
 800cd9c:	781b      	ldrb	r3, [r3, #0]
 800cd9e:	b2db      	uxtb	r3, r3
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d007      	beq.n	800cdb4 <RtcGetAdjustedTimeoutValue+0x2c>
        {
            NonScheduledWakeUp = false;
 800cda4:	4b12      	ldr	r3, [pc, #72]	@ (800cdf0 <RtcGetAdjustedTimeoutValue+0x68>)
 800cda6:	2200      	movs	r2, #0
 800cda8:	701a      	strb	r2, [r3, #0]
            timeout -= McuWakeUpTime;
 800cdaa:	4b10      	ldr	r3, [pc, #64]	@ (800cdec <RtcGetAdjustedTimeoutValue+0x64>)
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	687a      	ldr	r2, [r7, #4]
 800cdb0:	1ad3      	subs	r3, r2, r3
 800cdb2:	607b      	str	r3, [r7, #4]
        }
    }
    
    if( timeout > McuWakeUpTime )
 800cdb4:	4b0d      	ldr	r3, [pc, #52]	@ (800cdec <RtcGetAdjustedTimeoutValue+0x64>)
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	687a      	ldr	r2, [r7, #4]
 800cdba:	429a      	cmp	r2, r3
 800cdbc:	d90e      	bls.n	800cddc <RtcGetAdjustedTimeoutValue+0x54>
    {   // we don't go in Low Power mode for delay below 50ms (needed for LEDs)        
        if( timeout < 50 ) // 50 ms
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	2b31      	cmp	r3, #49	@ 0x31
 800cdc2:	d803      	bhi.n	800cdcc <RtcGetAdjustedTimeoutValue+0x44>
        {
            RtcTimerEventAllowsLowPower = false;
 800cdc4:	4b0b      	ldr	r3, [pc, #44]	@ (800cdf4 <RtcGetAdjustedTimeoutValue+0x6c>)
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	701a      	strb	r2, [r3, #0]
 800cdca:	e007      	b.n	800cddc <RtcGetAdjustedTimeoutValue+0x54>
        }
        else
        {
            RtcTimerEventAllowsLowPower = true;
 800cdcc:	4b09      	ldr	r3, [pc, #36]	@ (800cdf4 <RtcGetAdjustedTimeoutValue+0x6c>)
 800cdce:	2201      	movs	r2, #1
 800cdd0:	701a      	strb	r2, [r3, #0]
            timeout -= McuWakeUpTime;
 800cdd2:	4b06      	ldr	r3, [pc, #24]	@ (800cdec <RtcGetAdjustedTimeoutValue+0x64>)
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	687a      	ldr	r2, [r7, #4]
 800cdd8:	1ad3      	subs	r3, r2, r3
 800cdda:	607b      	str	r3, [r7, #4]
        }
    }

    return  timeout;
 800cddc:	687b      	ldr	r3, [r7, #4]
}
 800cdde:	4618      	mov	r0, r3
 800cde0:	370c      	adds	r7, #12
 800cde2:	46bd      	mov	sp, r7
 800cde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde8:	4770      	bx	lr
 800cdea:	bf00      	nop
 800cdec:	20000524 	.word	0x20000524
 800cdf0:	200004cf 	.word	0x200004cf
 800cdf4:	200004ec 	.word	0x200004ec

0800cdf8 <RtcGetElapsedAlarmTime>:
{
    return( RtcConvertCalendarTickToTimerTime( NULL ) );
}

TimerTime_t RtcGetElapsedAlarmTime( void )
{
 800cdf8:	b580      	push	{r7, lr}
 800cdfa:	b082      	sub	sp, #8
 800cdfc:	af00      	add	r7, sp, #0
    TimerTime_t currentTime = 0;
 800cdfe:	2300      	movs	r3, #0
 800ce00:	607b      	str	r3, [r7, #4]
    TimerTime_t contextTime = 0;
 800ce02:	2300      	movs	r3, #0
 800ce04:	603b      	str	r3, [r7, #0]

    currentTime = RtcConvertCalendarTickToTimerTime( NULL );
 800ce06:	2000      	movs	r0, #0
 800ce08:	f000 faba 	bl	800d380 <RtcConvertCalendarTickToTimerTime>
 800ce0c:	6078      	str	r0, [r7, #4]
    contextTime = RtcConvertCalendarTickToTimerTime( &RtcCalendarContext );
 800ce0e:	480a      	ldr	r0, [pc, #40]	@ (800ce38 <RtcGetElapsedAlarmTime+0x40>)
 800ce10:	f000 fab6 	bl	800d380 <RtcConvertCalendarTickToTimerTime>
 800ce14:	6038      	str	r0, [r7, #0]

    if( currentTime < contextTime )
 800ce16:	687a      	ldr	r2, [r7, #4]
 800ce18:	683b      	ldr	r3, [r7, #0]
 800ce1a:	429a      	cmp	r2, r3
 800ce1c:	d204      	bcs.n	800ce28 <RtcGetElapsedAlarmTime+0x30>
    {
        return( currentTime + ( 0xFFFFFFFF - contextTime ) );
 800ce1e:	687a      	ldr	r2, [r7, #4]
 800ce20:	683b      	ldr	r3, [r7, #0]
 800ce22:	1ad3      	subs	r3, r2, r3
 800ce24:	3b01      	subs	r3, #1
 800ce26:	e002      	b.n	800ce2e <RtcGetElapsedAlarmTime+0x36>
    }
    else
    {
        return( currentTime - contextTime );
 800ce28:	687a      	ldr	r2, [r7, #4]
 800ce2a:	683b      	ldr	r3, [r7, #0]
 800ce2c:	1ad3      	subs	r3, r2, r3
    }
}
 800ce2e:	4618      	mov	r0, r3
 800ce30:	3708      	adds	r7, #8
 800ce32:	46bd      	mov	sp, r7
 800ce34:	bd80      	pop	{r7, pc}
 800ce36:	bf00      	nop
 800ce38:	200004d0 	.word	0x200004d0

0800ce3c <BlockLowPowerDuringTask>:
        return( elapsedTime - eventInTime );
    }
}

void BlockLowPowerDuringTask ( bool status )
{
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	b082      	sub	sp, #8
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	4603      	mov	r3, r0
 800ce44:	71fb      	strb	r3, [r7, #7]
    if( status == true )
 800ce46:	79fb      	ldrb	r3, [r7, #7]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d001      	beq.n	800ce50 <BlockLowPowerDuringTask+0x14>
    {
        RtcRecoverMcuStatus( );
 800ce4c:	f000 f80a 	bl	800ce64 <RtcRecoverMcuStatus>
    }
    LowPowerDisableDuringTask = status;
 800ce50:	4a03      	ldr	r2, [pc, #12]	@ (800ce60 <BlockLowPowerDuringTask+0x24>)
 800ce52:	79fb      	ldrb	r3, [r7, #7]
 800ce54:	7013      	strb	r3, [r2, #0]
}
 800ce56:	bf00      	nop
 800ce58:	3708      	adds	r7, #8
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	bd80      	pop	{r7, pc}
 800ce5e:	bf00      	nop
 800ce60:	200004ed 	.word	0x200004ed

0800ce64 <RtcRecoverMcuStatus>:
//        HAL_PWR_EnterSTOPMode( PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI );
    }
}

void RtcRecoverMcuStatus( void )
{
 800ce64:	b480      	push	{r7}
 800ce66:	af00      	add	r7, sp, #0
//    {
//        BoardInitMcu( );
//    }


}
 800ce68:	bf00      	nop
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce70:	4770      	bx	lr
	...

0800ce74 <RtcComputeWakeUpTime>:

static void RtcComputeWakeUpTime( void )
{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b096      	sub	sp, #88	@ 0x58
 800ce78:	af00      	add	r7, sp, #0
    uint32_t start = 0;
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	657b      	str	r3, [r7, #84]	@ 0x54
    uint32_t stop = 0;
 800ce7e:	2300      	movs	r3, #0
 800ce80:	653b      	str	r3, [r7, #80]	@ 0x50
    RTC_AlarmTypeDef  alarmRtc;
    RtcCalendar_t now;

    if( WakeUpTimeInitialized == false )
 800ce82:	4b2b      	ldr	r3, [pc, #172]	@ (800cf30 <RtcComputeWakeUpTime+0xbc>)
 800ce84:	781b      	ldrb	r3, [r3, #0]
 800ce86:	f083 0301 	eor.w	r3, r3, #1
 800ce8a:	b2db      	uxtb	r3, r3
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d04b      	beq.n	800cf28 <RtcComputeWakeUpTime+0xb4>
    {
        now = RtcGetCalendar( );
 800ce90:	1d3b      	adds	r3, r7, #4
 800ce92:	4618      	mov	r0, r3
 800ce94:	f000 fb8e 	bl	800d5b4 <RtcGetCalendar>
        HAL_RTC_GetAlarm( &RtcHandle, &alarmRtc, RTC_ALARM_A, RTC_FORMAT_BIN );
 800ce98:	f107 0120 	add.w	r1, r7, #32
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800cea2:	4824      	ldr	r0, [pc, #144]	@ (800cf34 <RtcComputeWakeUpTime+0xc0>)
 800cea4:	f7fd fc82 	bl	800a7ac <HAL_RTC_GetAlarm>

        start = alarmRtc.AlarmTime.Seconds + ( SecondsInMinute * alarmRtc.AlarmTime.Minutes ) + ( SecondsInHour * alarmRtc.AlarmTime.Hours );
 800cea8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800ceac:	461a      	mov	r2, r3
 800ceae:	233c      	movs	r3, #60	@ 0x3c
 800ceb0:	f897 1021 	ldrb.w	r1, [r7, #33]	@ 0x21
 800ceb4:	fb01 f303 	mul.w	r3, r1, r3
 800ceb8:	441a      	add	r2, r3
 800ceba:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 800cebe:	f897 1020 	ldrb.w	r1, [r7, #32]
 800cec2:	fb01 f303 	mul.w	r3, r1, r3
 800cec6:	4413      	add	r3, r2
 800cec8:	657b      	str	r3, [r7, #84]	@ 0x54
        stop = now.CalendarTime.Seconds + ( SecondsInMinute * now.CalendarTime.Minutes ) + ( SecondsInHour * now.CalendarTime.Hours );
 800ceca:	7bbb      	ldrb	r3, [r7, #14]
 800cecc:	461a      	mov	r2, r3
 800cece:	233c      	movs	r3, #60	@ 0x3c
 800ced0:	7b79      	ldrb	r1, [r7, #13]
 800ced2:	fb01 f303 	mul.w	r3, r1, r3
 800ced6:	441a      	add	r2, r3
 800ced8:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 800cedc:	7b39      	ldrb	r1, [r7, #12]
 800cede:	fb01 f303 	mul.w	r3, r1, r3
 800cee2:	4413      	add	r3, r2
 800cee4:	653b      	str	r3, [r7, #80]	@ 0x50

        McuWakeUpTime = ceil ( ( stop - start ) * RTC_ALARM_TICK_DURATION );
 800cee6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cee8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ceea:	1ad3      	subs	r3, r2, r3
 800ceec:	4618      	mov	r0, r3
 800ceee:	f7f5 f89b 	bl	8002028 <__aeabi_ui2d>
 800cef2:	f04f 0200 	mov.w	r2, #0
 800cef6:	4b10      	ldr	r3, [pc, #64]	@ (800cf38 <RtcComputeWakeUpTime+0xc4>)
 800cef8:	f7f5 f910 	bl	800211c <__aeabi_dmul>
 800cefc:	4602      	mov	r2, r0
 800cefe:	460b      	mov	r3, r1
 800cf00:	ec43 2b17 	vmov	d7, r2, r3
 800cf04:	eeb0 0a47 	vmov.f32	s0, s14
 800cf08:	eef0 0a67 	vmov.f32	s1, s15
 800cf0c:	f007 fdc8 	bl	8014aa0 <ceil>
 800cf10:	ec53 2b10 	vmov	r2, r3, d0
 800cf14:	4610      	mov	r0, r2
 800cf16:	4619      	mov	r1, r3
 800cf18:	f7f5 fbd8 	bl	80026cc <__aeabi_d2uiz>
 800cf1c:	4603      	mov	r3, r0
 800cf1e:	4a07      	ldr	r2, [pc, #28]	@ (800cf3c <RtcComputeWakeUpTime+0xc8>)
 800cf20:	6013      	str	r3, [r2, #0]

        WakeUpTimeInitialized = true;
 800cf22:	4b03      	ldr	r3, [pc, #12]	@ (800cf30 <RtcComputeWakeUpTime+0xbc>)
 800cf24:	2201      	movs	r2, #1
 800cf26:	701a      	strb	r2, [r3, #0]
    }
}
 800cf28:	bf00      	nop
 800cf2a:	3758      	adds	r7, #88	@ 0x58
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	bd80      	pop	{r7, pc}
 800cf30:	20000521 	.word	0x20000521
 800cf34:	200004f0 	.word	0x200004f0
 800cf38:	3fdf4000 	.word	0x3fdf4000
 800cf3c:	20000524 	.word	0x20000524

0800cf40 <RtcStartWakeUpAlarm>:

static void RtcStartWakeUpAlarm( uint32_t timeoutValue )
{
 800cf40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf42:	b0a3      	sub	sp, #140	@ 0x8c
 800cf44:	af06      	add	r7, sp, #24
 800cf46:	6078      	str	r0, [r7, #4]
    RtcCalendar_t now;
    RtcCalendar_t alarmTimer;
    RTC_AlarmTypeDef alarmStructure;

    HAL_RTC_DeactivateAlarm( &RtcHandle, RTC_ALARM_A );
 800cf48:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800cf4c:	4822      	ldr	r0, [pc, #136]	@ (800cfd8 <RtcStartWakeUpAlarm+0x98>)
 800cf4e:	f7fd fbeb 	bl	800a728 <HAL_RTC_DeactivateAlarm>
    HAL_RTCEx_DeactivateWakeUpTimer( &RtcHandle );
 800cf52:	4821      	ldr	r0, [pc, #132]	@ (800cfd8 <RtcStartWakeUpAlarm+0x98>)
 800cf54:	f7fd fe02 	bl	800ab5c <HAL_RTCEx_DeactivateWakeUpTimer>

    // Load the RTC calendar
    now = RtcGetCalendar( );
 800cf58:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	f000 fb29 	bl	800d5b4 <RtcGetCalendar>

    // Save the calendar into RtcCalendarContext to be able to calculate the elapsed time
    RtcCalendarContext = now;
 800cf62:	4b1e      	ldr	r3, [pc, #120]	@ (800cfdc <RtcStartWakeUpAlarm+0x9c>)
 800cf64:	461d      	mov	r5, r3
 800cf66:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 800cf6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cf6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cf6e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800cf72:	e885 0007 	stmia.w	r5, {r0, r1, r2}

    // timeoutValue is in ms 
    alarmTimer = RtcComputeTimerTimeToAlarmTick( timeoutValue, now );
 800cf76:	f107 0638 	add.w	r6, r7, #56	@ 0x38
 800cf7a:	466d      	mov	r5, sp
 800cf7c:	f107 045c 	add.w	r4, r7, #92	@ 0x5c
 800cf80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cf82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cf84:	6823      	ldr	r3, [r4, #0]
 800cf86:	602b      	str	r3, [r5, #0]
 800cf88:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800cf8c:	cb0c      	ldmia	r3, {r2, r3}
 800cf8e:	6879      	ldr	r1, [r7, #4]
 800cf90:	4630      	mov	r0, r6
 800cf92:	f000 f825 	bl	800cfe0 <RtcComputeTimerTimeToAlarmTick>

    alarmStructure.Alarm = RTC_ALARM_A;
 800cf96:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cf9a:	637b      	str	r3, [r7, #52]	@ 0x34
    alarmStructure.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	62bb      	str	r3, [r7, #40]	@ 0x28
    alarmStructure.AlarmMask = RTC_ALARMMASK_NONE;
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	61fb      	str	r3, [r7, #28]
    alarmStructure.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	72fb      	strb	r3, [r7, #11]
    
    alarmStructure.AlarmTime.Seconds = alarmTimer.CalendarTime.Seconds;
 800cfa8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 800cfac:	72bb      	strb	r3, [r7, #10]
    alarmStructure.AlarmTime.Minutes = alarmTimer.CalendarTime.Minutes;
 800cfae:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800cfb2:	727b      	strb	r3, [r7, #9]
    alarmStructure.AlarmTime.Hours = alarmTimer.CalendarTime.Hours;
 800cfb4:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800cfb8:	723b      	strb	r3, [r7, #8]
    alarmStructure.AlarmDateWeekDay = alarmTimer.CalendarDate.Date;
 800cfba:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800cfbe:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

    if( HAL_RTC_SetAlarm_IT( &RtcHandle, &alarmStructure, RTC_FORMAT_BIN ) != HAL_OK )
 800cfc2:	f107 0308 	add.w	r3, r7, #8
 800cfc6:	2200      	movs	r2, #0
 800cfc8:	4619      	mov	r1, r3
 800cfca:	4803      	ldr	r0, [pc, #12]	@ (800cfd8 <RtcStartWakeUpAlarm+0x98>)
 800cfcc:	f7fd faac 	bl	800a528 <HAL_RTC_SetAlarm_IT>
    {
        assert_param( FAIL );
    }
}
 800cfd0:	bf00      	nop
 800cfd2:	3774      	adds	r7, #116	@ 0x74
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cfd8:	200004f0 	.word	0x200004f0
 800cfdc:	200004d0 	.word	0x200004d0

0800cfe0 <RtcComputeTimerTimeToAlarmTick>:

static RtcCalendar_t RtcComputeTimerTimeToAlarmTick( TimerTime_t timeCounter, RtcCalendar_t now )
{
 800cfe0:	b082      	sub	sp, #8
 800cfe2:	b5b0      	push	{r4, r5, r7, lr}
 800cfe4:	b092      	sub	sp, #72	@ 0x48
 800cfe6:	af00      	add	r7, sp, #0
 800cfe8:	6078      	str	r0, [r7, #4]
 800cfea:	6039      	str	r1, [r7, #0]
 800cfec:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800cff0:	e881 000c 	stmia.w	r1, {r2, r3}
    RtcCalendar_t calendar = now;
 800cff4:	f107 040c 	add.w	r4, r7, #12
 800cff8:	f107 0558 	add.w	r5, r7, #88	@ 0x58
 800cffc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cffe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d000:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d004:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    uint16_t seconds = now.CalendarTime.Seconds;
 800d008:	f897 3062 	ldrb.w	r3, [r7, #98]	@ 0x62
 800d00c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    uint16_t minutes = now.CalendarTime.Minutes;
 800d010:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 800d014:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    uint16_t hours = now.CalendarTime.Hours;
 800d018:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 800d01c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    uint16_t days = now.CalendarDate.Date;
 800d020:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 800d024:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    double timeoutValueTemp = 0.0;
 800d028:	f04f 0200 	mov.w	r2, #0
 800d02c:	f04f 0300 	mov.w	r3, #0
 800d030:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    double timeoutValue = 0.0;
 800d034:	f04f 0200 	mov.w	r2, #0
 800d038:	f04f 0300 	mov.w	r3, #0
 800d03c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double error = 0.0;
 800d040:	f04f 0200 	mov.w	r2, #0
 800d044:	f04f 0300 	mov.w	r3, #0
 800d048:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    
    timeCounter = MIN( timeCounter, ( TimerTime_t )( RTC_ALARM_MAX_NUMBER_OF_DAYS * SecondsInDay * RTC_ALARM_TICK_DURATION ) );
 800d04c:	4ac4      	ldr	r2, [pc, #784]	@ (800d360 <RtcComputeTimerTimeToAlarmTick+0x380>)
 800d04e:	4613      	mov	r3, r2
 800d050:	00db      	lsls	r3, r3, #3
 800d052:	1a9b      	subs	r3, r3, r2
 800d054:	009b      	lsls	r3, r3, #2
 800d056:	4618      	mov	r0, r3
 800d058:	f7f4 ffe6 	bl	8002028 <__aeabi_ui2d>
 800d05c:	f04f 0200 	mov.w	r2, #0
 800d060:	4bc0      	ldr	r3, [pc, #768]	@ (800d364 <RtcComputeTimerTimeToAlarmTick+0x384>)
 800d062:	f7f5 f85b 	bl	800211c <__aeabi_dmul>
 800d066:	4602      	mov	r2, r0
 800d068:	460b      	mov	r3, r1
 800d06a:	4610      	mov	r0, r2
 800d06c:	4619      	mov	r1, r3
 800d06e:	f7f5 fb2d 	bl	80026cc <__aeabi_d2uiz>
 800d072:	4602      	mov	r2, r0
 800d074:	683b      	ldr	r3, [r7, #0]
 800d076:	4293      	cmp	r3, r2
 800d078:	bf28      	it	cs
 800d07a:	4613      	movcs	r3, r2
 800d07c:	603b      	str	r3, [r7, #0]

    if( timeCounter < 1 )
 800d07e:	683b      	ldr	r3, [r7, #0]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d101      	bne.n	800d088 <RtcComputeTimerTimeToAlarmTick+0xa8>
    {
        timeCounter = 1;
 800d084:	2301      	movs	r3, #1
 800d086:	603b      	str	r3, [r7, #0]
    }

    // timeoutValue is used for complete computation
    timeoutValue = round( timeCounter * RTC_ALARM_TICK_PER_MS );
 800d088:	6838      	ldr	r0, [r7, #0]
 800d08a:	f7f4 ffcd 	bl	8002028 <__aeabi_ui2d>
 800d08e:	a3b2      	add	r3, pc, #712	@ (adr r3, 800d358 <RtcComputeTimerTimeToAlarmTick+0x378>)
 800d090:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d094:	f7f5 f842 	bl	800211c <__aeabi_dmul>
 800d098:	4602      	mov	r2, r0
 800d09a:	460b      	mov	r3, r1
 800d09c:	ec43 2b17 	vmov	d7, r2, r3
 800d0a0:	eeb0 0a47 	vmov.f32	s0, s14
 800d0a4:	eef0 0a67 	vmov.f32	s1, s15
 800d0a8:	f007 fdf6 	bl	8014c98 <round>
 800d0ac:	ed87 0b0e 	vstr	d0, [r7, #56]	@ 0x38

    // timeoutValueTemp is used to compensate the cumulating errors in timing far in the future
    timeoutValueTemp =  ( double )timeCounter * RTC_ALARM_TICK_PER_MS;
 800d0b0:	6838      	ldr	r0, [r7, #0]
 800d0b2:	f7f4 ffb9 	bl	8002028 <__aeabi_ui2d>
 800d0b6:	a3a8      	add	r3, pc, #672	@ (adr r3, 800d358 <RtcComputeTimerTimeToAlarmTick+0x378>)
 800d0b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0bc:	f7f5 f82e 	bl	800211c <__aeabi_dmul>
 800d0c0:	4602      	mov	r2, r0
 800d0c2:	460b      	mov	r3, r1
 800d0c4:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    // Compute timeoutValue error
    error = timeoutValue - timeoutValueTemp;
 800d0c8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800d0cc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800d0d0:	f7f4 fe6c 	bl	8001dac <__aeabi_dsub>
 800d0d4:	4602      	mov	r2, r0
 800d0d6:	460b      	mov	r3, r1
 800d0d8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    // Add new error value to the cumulated value in uS
    TimeoutValueError += ( error  * 1000 );
 800d0dc:	4ba2      	ldr	r3, [pc, #648]	@ (800d368 <RtcComputeTimerTimeToAlarmTick+0x388>)
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	f7f4 ffb1 	bl	8002048 <__aeabi_i2d>
 800d0e6:	4604      	mov	r4, r0
 800d0e8:	460d      	mov	r5, r1
 800d0ea:	f04f 0200 	mov.w	r2, #0
 800d0ee:	4b9f      	ldr	r3, [pc, #636]	@ (800d36c <RtcComputeTimerTimeToAlarmTick+0x38c>)
 800d0f0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800d0f4:	f7f5 f812 	bl	800211c <__aeabi_dmul>
 800d0f8:	4602      	mov	r2, r0
 800d0fa:	460b      	mov	r3, r1
 800d0fc:	4620      	mov	r0, r4
 800d0fe:	4629      	mov	r1, r5
 800d100:	f7f4 fe56 	bl	8001db0 <__adddf3>
 800d104:	4602      	mov	r2, r0
 800d106:	460b      	mov	r3, r1
 800d108:	4610      	mov	r0, r2
 800d10a:	4619      	mov	r1, r3
 800d10c:	f7f5 fab6 	bl	800267c <__aeabi_d2iz>
 800d110:	4603      	mov	r3, r0
 800d112:	4a95      	ldr	r2, [pc, #596]	@ (800d368 <RtcComputeTimerTimeToAlarmTick+0x388>)
 800d114:	6013      	str	r3, [r2, #0]

    // Correct cumulated error if greater than ( RTC_ALARM_TICK_DURATION * 1000 )
    if( TimeoutValueError >= ( int32_t )( RTC_ALARM_TICK_DURATION * 1000 ) )
 800d116:	4b94      	ldr	r3, [pc, #592]	@ (800d368 <RtcComputeTimerTimeToAlarmTick+0x388>)
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	f5b3 7ff4 	cmp.w	r3, #488	@ 0x1e8
 800d11e:	db25      	blt.n	800d16c <RtcComputeTimerTimeToAlarmTick+0x18c>
    {
        TimeoutValueError = TimeoutValueError - ( uint32_t )( RTC_ALARM_TICK_DURATION * 1000 );
 800d120:	4b91      	ldr	r3, [pc, #580]	@ (800d368 <RtcComputeTimerTimeToAlarmTick+0x388>)
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800d128:	461a      	mov	r2, r3
 800d12a:	4b8f      	ldr	r3, [pc, #572]	@ (800d368 <RtcComputeTimerTimeToAlarmTick+0x388>)
 800d12c:	601a      	str	r2, [r3, #0]
        timeoutValue = timeoutValue + 1;
 800d12e:	f04f 0200 	mov.w	r2, #0
 800d132:	4b8f      	ldr	r3, [pc, #572]	@ (800d370 <RtcComputeTimerTimeToAlarmTick+0x390>)
 800d134:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800d138:	f7f4 fe3a 	bl	8001db0 <__adddf3>
 800d13c:	4602      	mov	r2, r0
 800d13e:	460b      	mov	r3, r1
 800d140:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    }

    // Convert milliseconds to RTC format and add to now
    while( timeoutValue >= SecondsInDay )
 800d144:	e012      	b.n	800d16c <RtcComputeTimerTimeToAlarmTick+0x18c>
    {
        timeoutValue -= SecondsInDay;
 800d146:	4b86      	ldr	r3, [pc, #536]	@ (800d360 <RtcComputeTimerTimeToAlarmTick+0x380>)
 800d148:	4618      	mov	r0, r3
 800d14a:	f7f4 ff6d 	bl	8002028 <__aeabi_ui2d>
 800d14e:	4602      	mov	r2, r0
 800d150:	460b      	mov	r3, r1
 800d152:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800d156:	f7f4 fe29 	bl	8001dac <__aeabi_dsub>
 800d15a:	4602      	mov	r2, r0
 800d15c:	460b      	mov	r3, r1
 800d15e:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
        days++;
 800d162:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800d166:	3301      	adds	r3, #1
 800d168:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    while( timeoutValue >= SecondsInDay )
 800d16c:	4b7c      	ldr	r3, [pc, #496]	@ (800d360 <RtcComputeTimerTimeToAlarmTick+0x380>)
 800d16e:	4618      	mov	r0, r3
 800d170:	f7f4 ff5a 	bl	8002028 <__aeabi_ui2d>
 800d174:	4602      	mov	r2, r0
 800d176:	460b      	mov	r3, r1
 800d178:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800d17c:	f7f5 fa54 	bl	8002628 <__aeabi_dcmpge>
 800d180:	4603      	mov	r3, r0
 800d182:	2b00      	cmp	r3, #0
 800d184:	d1df      	bne.n	800d146 <RtcComputeTimerTimeToAlarmTick+0x166>
    }

    // Calculate hours
    while( timeoutValue >= SecondsInHour )
 800d186:	e013      	b.n	800d1b0 <RtcComputeTimerTimeToAlarmTick+0x1d0>
    {
        timeoutValue -= SecondsInHour;
 800d188:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 800d18c:	4618      	mov	r0, r3
 800d18e:	f7f4 ff5b 	bl	8002048 <__aeabi_i2d>
 800d192:	4602      	mov	r2, r0
 800d194:	460b      	mov	r3, r1
 800d196:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800d19a:	f7f4 fe07 	bl	8001dac <__aeabi_dsub>
 800d19e:	4602      	mov	r2, r0
 800d1a0:	460b      	mov	r3, r1
 800d1a2:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
        hours++;
 800d1a6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d1aa:	3301      	adds	r3, #1
 800d1ac:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    while( timeoutValue >= SecondsInHour )
 800d1b0:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	f7f4 ff47 	bl	8002048 <__aeabi_i2d>
 800d1ba:	4602      	mov	r2, r0
 800d1bc:	460b      	mov	r3, r1
 800d1be:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800d1c2:	f7f5 fa31 	bl	8002628 <__aeabi_dcmpge>
 800d1c6:	4603      	mov	r3, r0
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d1dd      	bne.n	800d188 <RtcComputeTimerTimeToAlarmTick+0x1a8>
    }

    // Calculate minutes
    while( timeoutValue >= SecondsInMinute )
 800d1cc:	e012      	b.n	800d1f4 <RtcComputeTimerTimeToAlarmTick+0x214>
    {
        timeoutValue -= SecondsInMinute;
 800d1ce:	233c      	movs	r3, #60	@ 0x3c
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	f7f4 ff39 	bl	8002048 <__aeabi_i2d>
 800d1d6:	4602      	mov	r2, r0
 800d1d8:	460b      	mov	r3, r1
 800d1da:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800d1de:	f7f4 fde5 	bl	8001dac <__aeabi_dsub>
 800d1e2:	4602      	mov	r2, r0
 800d1e4:	460b      	mov	r3, r1
 800d1e6:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
        minutes++;
 800d1ea:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800d1ee:	3301      	adds	r3, #1
 800d1f0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while( timeoutValue >= SecondsInMinute )
 800d1f4:	233c      	movs	r3, #60	@ 0x3c
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	f7f4 ff26 	bl	8002048 <__aeabi_i2d>
 800d1fc:	4602      	mov	r2, r0
 800d1fe:	460b      	mov	r3, r1
 800d200:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800d204:	f7f5 fa10 	bl	8002628 <__aeabi_dcmpge>
 800d208:	4603      	mov	r3, r0
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d1df      	bne.n	800d1ce <RtcComputeTimerTimeToAlarmTick+0x1ee>
    }

    // Calculate seconds
    seconds = seconds + timeoutValue;
 800d20e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d212:	4618      	mov	r0, r3
 800d214:	f7f4 ff18 	bl	8002048 <__aeabi_i2d>
 800d218:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800d21c:	f7f4 fdc8 	bl	8001db0 <__adddf3>
 800d220:	4602      	mov	r2, r0
 800d222:	460b      	mov	r3, r1
 800d224:	4610      	mov	r0, r2
 800d226:	4619      	mov	r1, r3
 800d228:	f7f5 fa50 	bl	80026cc <__aeabi_d2uiz>
 800d22c:	4603      	mov	r3, r0
 800d22e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

    // Correct for modulo
    while( seconds >= 60 )
 800d232:	e009      	b.n	800d248 <RtcComputeTimerTimeToAlarmTick+0x268>
    { 
        seconds -= 60;
 800d234:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d238:	3b3c      	subs	r3, #60	@ 0x3c
 800d23a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
        minutes++;
 800d23e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800d242:	3301      	adds	r3, #1
 800d244:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while( seconds >= 60 )
 800d248:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d24c:	2b3b      	cmp	r3, #59	@ 0x3b
 800d24e:	d8f1      	bhi.n	800d234 <RtcComputeTimerTimeToAlarmTick+0x254>
    }

    while( minutes >= 60 )
 800d250:	e009      	b.n	800d266 <RtcComputeTimerTimeToAlarmTick+0x286>
    {
        minutes -= 60;
 800d252:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800d256:	3b3c      	subs	r3, #60	@ 0x3c
 800d258:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
        hours++;
 800d25c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d260:	3301      	adds	r3, #1
 800d262:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    while( minutes >= 60 )
 800d266:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800d26a:	2b3b      	cmp	r3, #59	@ 0x3b
 800d26c:	d8f1      	bhi.n	800d252 <RtcComputeTimerTimeToAlarmTick+0x272>
    }

    while( hours >= HoursInDay )
 800d26e:	e00b      	b.n	800d288 <RtcComputeTimerTimeToAlarmTick+0x2a8>
    {
        hours -= HoursInDay;
 800d270:	2318      	movs	r3, #24
 800d272:	461a      	mov	r2, r3
 800d274:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d278:	1a9b      	subs	r3, r3, r2
 800d27a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        days++;
 800d27e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800d282:	3301      	adds	r3, #1
 800d284:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    while( hours >= HoursInDay )
 800d288:	2318      	movs	r3, #24
 800d28a:	461a      	mov	r2, r3
 800d28c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d290:	4293      	cmp	r3, r2
 800d292:	d2ed      	bcs.n	800d270 <RtcComputeTimerTimeToAlarmTick+0x290>
    }

    if( ( now.CalendarDate.Year == 0 ) || ( ( now.CalendarDate.Year + Century ) % 4 ) == 0 )
 800d294:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d009      	beq.n	800d2b0 <RtcComputeTimerTimeToAlarmTick+0x2d0>
 800d29c:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 800d2a0:	461a      	mov	r2, r3
 800d2a2:	4b34      	ldr	r3, [pc, #208]	@ (800d374 <RtcComputeTimerTimeToAlarmTick+0x394>)
 800d2a4:	881b      	ldrh	r3, [r3, #0]
 800d2a6:	4413      	add	r3, r2
 800d2a8:	f003 0303 	and.w	r3, r3, #3
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d118      	bne.n	800d2e2 <RtcComputeTimerTimeToAlarmTick+0x302>
    {
        if( days > DaysInMonthLeapYear[now.CalendarDate.Month - 1] )
 800d2b0:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800d2b4:	3b01      	subs	r3, #1
 800d2b6:	4a30      	ldr	r2, [pc, #192]	@ (800d378 <RtcComputeTimerTimeToAlarmTick+0x398>)
 800d2b8:	5cd3      	ldrb	r3, [r2, r3]
 800d2ba:	461a      	mov	r2, r3
 800d2bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800d2c0:	4293      	cmp	r3, r2
 800d2c2:	d926      	bls.n	800d312 <RtcComputeTimerTimeToAlarmTick+0x332>
        {
            days = days % DaysInMonthLeapYear[now.CalendarDate.Month - 1];
 800d2c4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800d2c8:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 800d2cc:	3a01      	subs	r2, #1
 800d2ce:	492a      	ldr	r1, [pc, #168]	@ (800d378 <RtcComputeTimerTimeToAlarmTick+0x398>)
 800d2d0:	5c8a      	ldrb	r2, [r1, r2]
 800d2d2:	fb93 f1f2 	sdiv	r1, r3, r2
 800d2d6:	fb01 f202 	mul.w	r2, r1, r2
 800d2da:	1a9b      	subs	r3, r3, r2
 800d2dc:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
        if( days > DaysInMonthLeapYear[now.CalendarDate.Month - 1] )
 800d2e0:	e017      	b.n	800d312 <RtcComputeTimerTimeToAlarmTick+0x332>
        }
    }
    else
    {
        if( days > DaysInMonth[now.CalendarDate.Month - 1] )
 800d2e2:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800d2e6:	3b01      	subs	r3, #1
 800d2e8:	4a24      	ldr	r2, [pc, #144]	@ (800d37c <RtcComputeTimerTimeToAlarmTick+0x39c>)
 800d2ea:	5cd3      	ldrb	r3, [r2, r3]
 800d2ec:	461a      	mov	r2, r3
 800d2ee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800d2f2:	4293      	cmp	r3, r2
 800d2f4:	d90d      	bls.n	800d312 <RtcComputeTimerTimeToAlarmTick+0x332>
        {   
            days = days % DaysInMonth[now.CalendarDate.Month - 1];
 800d2f6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800d2fa:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 800d2fe:	3a01      	subs	r2, #1
 800d300:	491e      	ldr	r1, [pc, #120]	@ (800d37c <RtcComputeTimerTimeToAlarmTick+0x39c>)
 800d302:	5c8a      	ldrb	r2, [r1, r2]
 800d304:	fb93 f1f2 	sdiv	r1, r3, r2
 800d308:	fb01 f202 	mul.w	r2, r1, r2
 800d30c:	1a9b      	subs	r3, r3, r2
 800d30e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
        }
    }

    calendar.CalendarTime.Seconds = seconds;
 800d312:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d316:	b2db      	uxtb	r3, r3
 800d318:	75bb      	strb	r3, [r7, #22]
    calendar.CalendarTime.Minutes = minutes;
 800d31a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800d31e:	b2db      	uxtb	r3, r3
 800d320:	757b      	strb	r3, [r7, #21]
    calendar.CalendarTime.Hours = hours;
 800d322:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d326:	b2db      	uxtb	r3, r3
 800d328:	753b      	strb	r3, [r7, #20]
    calendar.CalendarDate.Date = days;
 800d32a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800d32e:	b2db      	uxtb	r3, r3
 800d330:	743b      	strb	r3, [r7, #16]

    return calendar;
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	461d      	mov	r5, r3
 800d336:	f107 040c 	add.w	r4, r7, #12
 800d33a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d33c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d33e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800d342:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800d346:	6878      	ldr	r0, [r7, #4]
 800d348:	3748      	adds	r7, #72	@ 0x48
 800d34a:	46bd      	mov	sp, r7
 800d34c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800d350:	b002      	add	sp, #8
 800d352:	4770      	bx	lr
 800d354:	f3af 8000 	nop.w
 800d358:	a0b5ed8d 	.word	0xa0b5ed8d
 800d35c:	3f60c6f7 	.word	0x3f60c6f7
 800d360:	00015180 	.word	0x00015180
 800d364:	3fdf4000 	.word	0x3fdf4000
 800d368:	20000528 	.word	0x20000528
 800d36c:	408f4000 	.word	0x408f4000
 800d370:	3ff00000 	.word	0x3ff00000
 800d374:	200004cc 	.word	0x200004cc
 800d378:	080164ac 	.word	0x080164ac
 800d37c:	080164a0 	.word	0x080164a0

0800d380 <RtcConvertCalendarTickToTimerTime>:

    return calendar;
}

static TimerTime_t RtcConvertCalendarTickToTimerTime( RtcCalendar_t *calendar )
{
 800d380:	b5b0      	push	{r4, r5, r7, lr}
 800d382:	b08e      	sub	sp, #56	@ 0x38
 800d384:	af00      	add	r7, sp, #0
 800d386:	6078      	str	r0, [r7, #4]
    TimerTime_t timeCounter = 0;
 800d388:	2300      	movs	r3, #0
 800d38a:	62bb      	str	r3, [r7, #40]	@ 0x28
    RtcCalendar_t now;
    double timeCounterTemp = 0.0;
 800d38c:	f04f 0200 	mov.w	r2, #0
 800d390:	f04f 0300 	mov.w	r3, #0
 800d394:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    // Passing a NULL pointer will compute from "now" else,
    // compute from the given calendar value
    if( calendar == NULL )
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d105      	bne.n	800d3aa <RtcConvertCalendarTickToTimerTime+0x2a>
    {
        now = RtcGetCalendar( );
 800d39e:	f107 030c 	add.w	r3, r7, #12
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	f000 f906 	bl	800d5b4 <RtcGetCalendar>
 800d3a8:	e009      	b.n	800d3be <RtcConvertCalendarTickToTimerTime+0x3e>
    }
    else
    {
        now = *calendar;
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	f107 040c 	add.w	r4, r7, #12
 800d3b0:	461d      	mov	r5, r3
 800d3b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d3b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d3b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d3ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }

    // Years (calculation valid up to year 2099)
    for( int16_t i = 0; i < ( now.CalendarDate.Year + now.CalendarCentury ); i++ )
 800d3be:	2300      	movs	r3, #0
 800d3c0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800d3c2:	e02c      	b.n	800d41e <RtcConvertCalendarTickToTimerTime+0x9e>
    {
        if( ( i == 0 ) || ( i % 4 ) == 0 )
 800d3c4:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d005      	beq.n	800d3d8 <RtcConvertCalendarTickToTimerTime+0x58>
 800d3cc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800d3ce:	f003 0303 	and.w	r3, r3, #3
 800d3d2:	b29b      	uxth	r3, r3
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d10e      	bne.n	800d3f6 <RtcConvertCalendarTickToTimerTime+0x76>
        {
            timeCounterTemp += ( double )SecondsInLeapYear;
 800d3d8:	4b5d      	ldr	r3, [pc, #372]	@ (800d550 <RtcConvertCalendarTickToTimerTime+0x1d0>)
 800d3da:	4618      	mov	r0, r3
 800d3dc:	f7f4 fe24 	bl	8002028 <__aeabi_ui2d>
 800d3e0:	4602      	mov	r2, r0
 800d3e2:	460b      	mov	r3, r1
 800d3e4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800d3e8:	f7f4 fce2 	bl	8001db0 <__adddf3>
 800d3ec:	4602      	mov	r2, r0
 800d3ee:	460b      	mov	r3, r1
 800d3f0:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 800d3f4:	e00d      	b.n	800d412 <RtcConvertCalendarTickToTimerTime+0x92>
        }
        else
        {
            timeCounterTemp += ( double )SecondsInYear;
 800d3f6:	4b57      	ldr	r3, [pc, #348]	@ (800d554 <RtcConvertCalendarTickToTimerTime+0x1d4>)
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	f7f4 fe15 	bl	8002028 <__aeabi_ui2d>
 800d3fe:	4602      	mov	r2, r0
 800d400:	460b      	mov	r3, r1
 800d402:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800d406:	f7f4 fcd3 	bl	8001db0 <__adddf3>
 800d40a:	4602      	mov	r2, r0
 800d40c:	460b      	mov	r3, r1
 800d40e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    for( int16_t i = 0; i < ( now.CalendarDate.Year + now.CalendarCentury ); i++ )
 800d412:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 800d416:	b29b      	uxth	r3, r3
 800d418:	3301      	adds	r3, #1
 800d41a:	b29b      	uxth	r3, r3
 800d41c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800d41e:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	@ 0x2e
 800d422:	7c7b      	ldrb	r3, [r7, #17]
 800d424:	4619      	mov	r1, r3
 800d426:	89bb      	ldrh	r3, [r7, #12]
 800d428:	440b      	add	r3, r1
 800d42a:	429a      	cmp	r2, r3
 800d42c:	dbca      	blt.n	800d3c4 <RtcConvertCalendarTickToTimerTime+0x44>
        }
    }

    // Months (calculation valid up to year 2099)*/
    if( ( now.CalendarDate.Year == 0 ) || ( ( now.CalendarDate.Year + now.CalendarCentury ) % 4 ) == 0 )
 800d42e:	7c7b      	ldrb	r3, [r7, #17]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d007      	beq.n	800d444 <RtcConvertCalendarTickToTimerTime+0xc4>
 800d434:	7c7b      	ldrb	r3, [r7, #17]
 800d436:	461a      	mov	r2, r3
 800d438:	89bb      	ldrh	r3, [r7, #12]
 800d43a:	4413      	add	r3, r2
 800d43c:	f003 0303 	and.w	r3, r3, #3
 800d440:	2b00      	cmp	r3, #0
 800d442:	d124      	bne.n	800d48e <RtcConvertCalendarTickToTimerTime+0x10e>
    {
        for( uint8_t i = 0; i < ( now.CalendarDate.Month - 1 ); i++ )
 800d444:	2300      	movs	r3, #0
 800d446:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 800d44a:	e019      	b.n	800d480 <RtcConvertCalendarTickToTimerTime+0x100>
        {
            timeCounterTemp += ( double )( DaysInMonthLeapYear[i] * SecondsInDay );
 800d44c:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800d450:	4a41      	ldr	r2, [pc, #260]	@ (800d558 <RtcConvertCalendarTickToTimerTime+0x1d8>)
 800d452:	5cd3      	ldrb	r3, [r2, r3]
 800d454:	461a      	mov	r2, r3
 800d456:	4b41      	ldr	r3, [pc, #260]	@ (800d55c <RtcConvertCalendarTickToTimerTime+0x1dc>)
 800d458:	fb02 f303 	mul.w	r3, r2, r3
 800d45c:	4618      	mov	r0, r3
 800d45e:	f7f4 fde3 	bl	8002028 <__aeabi_ui2d>
 800d462:	4602      	mov	r2, r0
 800d464:	460b      	mov	r3, r1
 800d466:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800d46a:	f7f4 fca1 	bl	8001db0 <__adddf3>
 800d46e:	4602      	mov	r2, r0
 800d470:	460b      	mov	r3, r1
 800d472:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
        for( uint8_t i = 0; i < ( now.CalendarDate.Month - 1 ); i++ )
 800d476:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800d47a:	3301      	adds	r3, #1
 800d47c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 800d480:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 800d484:	7bfb      	ldrb	r3, [r7, #15]
 800d486:	3b01      	subs	r3, #1
 800d488:	429a      	cmp	r2, r3
 800d48a:	dbdf      	blt.n	800d44c <RtcConvertCalendarTickToTimerTime+0xcc>
 800d48c:	e023      	b.n	800d4d6 <RtcConvertCalendarTickToTimerTime+0x156>
        }
    }
    else
    {
        for( uint8_t i = 0;  i < ( now.CalendarDate.Month - 1 ); i++ )
 800d48e:	2300      	movs	r3, #0
 800d490:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 800d494:	e019      	b.n	800d4ca <RtcConvertCalendarTickToTimerTime+0x14a>
        {
            timeCounterTemp += ( double )( DaysInMonth[i] * SecondsInDay );
 800d496:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800d49a:	4a31      	ldr	r2, [pc, #196]	@ (800d560 <RtcConvertCalendarTickToTimerTime+0x1e0>)
 800d49c:	5cd3      	ldrb	r3, [r2, r3]
 800d49e:	461a      	mov	r2, r3
 800d4a0:	4b2e      	ldr	r3, [pc, #184]	@ (800d55c <RtcConvertCalendarTickToTimerTime+0x1dc>)
 800d4a2:	fb02 f303 	mul.w	r3, r2, r3
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	f7f4 fdbe 	bl	8002028 <__aeabi_ui2d>
 800d4ac:	4602      	mov	r2, r0
 800d4ae:	460b      	mov	r3, r1
 800d4b0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800d4b4:	f7f4 fc7c 	bl	8001db0 <__adddf3>
 800d4b8:	4602      	mov	r2, r0
 800d4ba:	460b      	mov	r3, r1
 800d4bc:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
        for( uint8_t i = 0;  i < ( now.CalendarDate.Month - 1 ); i++ )
 800d4c0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800d4c4:	3301      	adds	r3, #1
 800d4c6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 800d4ca:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800d4ce:	7bfb      	ldrb	r3, [r7, #15]
 800d4d0:	3b01      	subs	r3, #1
 800d4d2:	429a      	cmp	r2, r3
 800d4d4:	dbdf      	blt.n	800d496 <RtcConvertCalendarTickToTimerTime+0x116>
        }
    }

    timeCounterTemp += ( double )( ( uint32_t )now.CalendarTime.Seconds +
 800d4d6:	7dbb      	ldrb	r3, [r7, #22]
 800d4d8:	4619      	mov	r1, r3
                     ( ( uint32_t )now.CalendarTime.Minutes * SecondsInMinute ) +
                     ( ( uint32_t )now.CalendarTime.Hours * SecondsInHour ) +
 800d4da:	7d3b      	ldrb	r3, [r7, #20]
 800d4dc:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800d4e0:	fb03 f202 	mul.w	r2, r3, r2
                     ( ( uint32_t )now.CalendarTime.Minutes * SecondsInMinute ) +
 800d4e4:	7d7b      	ldrb	r3, [r7, #21]
 800d4e6:	203c      	movs	r0, #60	@ 0x3c
 800d4e8:	fb00 f303 	mul.w	r3, r0, r3
 800d4ec:	4413      	add	r3, r2
 800d4ee:	18ca      	adds	r2, r1, r3
                     ( ( uint32_t )( now.CalendarDate.Date * SecondsInDay ) ) );
 800d4f0:	7c3b      	ldrb	r3, [r7, #16]
 800d4f2:	4619      	mov	r1, r3
 800d4f4:	4b19      	ldr	r3, [pc, #100]	@ (800d55c <RtcConvertCalendarTickToTimerTime+0x1dc>)
 800d4f6:	fb01 f303 	mul.w	r3, r1, r3
                     ( ( uint32_t )now.CalendarTime.Hours * SecondsInHour ) +
 800d4fa:	4413      	add	r3, r2
    timeCounterTemp += ( double )( ( uint32_t )now.CalendarTime.Seconds +
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	f7f4 fd93 	bl	8002028 <__aeabi_ui2d>
 800d502:	4602      	mov	r2, r0
 800d504:	460b      	mov	r3, r1
 800d506:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800d50a:	f7f4 fc51 	bl	8001db0 <__adddf3>
 800d50e:	4602      	mov	r2, r0
 800d510:	460b      	mov	r3, r1
 800d512:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    timeCounterTemp = ( double )timeCounterTemp * RTC_ALARM_TICK_DURATION;
 800d516:	f04f 0200 	mov.w	r2, #0
 800d51a:	4b12      	ldr	r3, [pc, #72]	@ (800d564 <RtcConvertCalendarTickToTimerTime+0x1e4>)
 800d51c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800d520:	f7f4 fdfc 	bl	800211c <__aeabi_dmul>
 800d524:	4602      	mov	r2, r0
 800d526:	460b      	mov	r3, r1
 800d528:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    timeCounter = round( timeCounterTemp );
 800d52c:	ed97 0b0c 	vldr	d0, [r7, #48]	@ 0x30
 800d530:	f007 fbb2 	bl	8014c98 <round>
 800d534:	ec53 2b10 	vmov	r2, r3, d0
 800d538:	4610      	mov	r0, r2
 800d53a:	4619      	mov	r1, r3
 800d53c:	f7f5 f8c6 	bl	80026cc <__aeabi_d2uiz>
 800d540:	4603      	mov	r3, r0
 800d542:	62bb      	str	r3, [r7, #40]	@ 0x28
    return ( timeCounter );
 800d544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 800d546:	4618      	mov	r0, r3
 800d548:	3738      	adds	r7, #56	@ 0x38
 800d54a:	46bd      	mov	sp, r7
 800d54c:	bdb0      	pop	{r4, r5, r7, pc}
 800d54e:	bf00      	nop
 800d550:	01e28500 	.word	0x01e28500
 800d554:	01e13380 	.word	0x01e13380
 800d558:	080164ac 	.word	0x080164ac
 800d55c:	00015180 	.word	0x00015180
 800d560:	080164a0 	.word	0x080164a0
 800d564:	3fdf4000 	.word	0x3fdf4000

0800d568 <RtcCheckCalendarRollOver>:

static void RtcCheckCalendarRollOver( uint8_t year )
{
 800d568:	b480      	push	{r7}
 800d56a:	b083      	sub	sp, #12
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	4603      	mov	r3, r0
 800d570:	71fb      	strb	r3, [r7, #7]
    if( year == 99 )
 800d572:	79fb      	ldrb	r3, [r7, #7]
 800d574:	2b63      	cmp	r3, #99	@ 0x63
 800d576:	d102      	bne.n	800d57e <RtcCheckCalendarRollOver+0x16>
    {
        CallendarRollOverReady = true;
 800d578:	4b0c      	ldr	r3, [pc, #48]	@ (800d5ac <RtcCheckCalendarRollOver+0x44>)
 800d57a:	2201      	movs	r2, #1
 800d57c:	701a      	strb	r2, [r3, #0]
    }

    if( ( CallendarRollOverReady == true ) && ( ( year + Century ) == Century ) )
 800d57e:	4b0b      	ldr	r3, [pc, #44]	@ (800d5ac <RtcCheckCalendarRollOver+0x44>)
 800d580:	781b      	ldrb	r3, [r3, #0]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d00b      	beq.n	800d59e <RtcCheckCalendarRollOver+0x36>
 800d586:	79fb      	ldrb	r3, [r7, #7]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d108      	bne.n	800d59e <RtcCheckCalendarRollOver+0x36>
    {   // Indicate a roll-over of the calendar
        CallendarRollOverReady = false;
 800d58c:	4b07      	ldr	r3, [pc, #28]	@ (800d5ac <RtcCheckCalendarRollOver+0x44>)
 800d58e:	2200      	movs	r2, #0
 800d590:	701a      	strb	r2, [r3, #0]
        Century = Century + 100;
 800d592:	4b07      	ldr	r3, [pc, #28]	@ (800d5b0 <RtcCheckCalendarRollOver+0x48>)
 800d594:	881b      	ldrh	r3, [r3, #0]
 800d596:	3364      	adds	r3, #100	@ 0x64
 800d598:	b29a      	uxth	r2, r3
 800d59a:	4b05      	ldr	r3, [pc, #20]	@ (800d5b0 <RtcCheckCalendarRollOver+0x48>)
 800d59c:	801a      	strh	r2, [r3, #0]
    }
}
 800d59e:	bf00      	nop
 800d5a0:	370c      	adds	r7, #12
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a8:	4770      	bx	lr
 800d5aa:	bf00      	nop
 800d5ac:	200004ce 	.word	0x200004ce
 800d5b0:	200004cc 	.word	0x200004cc

0800d5b4 <RtcGetCalendar>:

static RtcCalendar_t RtcGetCalendar( void )
{
 800d5b4:	b5b0      	push	{r4, r5, r7, lr}
 800d5b6:	b08a      	sub	sp, #40	@ 0x28
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	6078      	str	r0, [r7, #4]
    RtcCalendar_t calendar;
    HAL_RTC_GetTime( &RtcHandle, &calendar.CalendarTime, RTC_FORMAT_BIN );
 800d5bc:	f107 030c 	add.w	r3, r7, #12
 800d5c0:	3308      	adds	r3, #8
 800d5c2:	2200      	movs	r2, #0
 800d5c4:	4619      	mov	r1, r3
 800d5c6:	4810      	ldr	r0, [pc, #64]	@ (800d608 <RtcGetCalendar+0x54>)
 800d5c8:	f7fc fe68 	bl	800a29c <HAL_RTC_GetTime>
    HAL_RTC_GetDate( &RtcHandle, &calendar.CalendarDate, RTC_FORMAT_BIN );
 800d5cc:	f107 030c 	add.w	r3, r7, #12
 800d5d0:	3302      	adds	r3, #2
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	4619      	mov	r1, r3
 800d5d6:	480c      	ldr	r0, [pc, #48]	@ (800d608 <RtcGetCalendar+0x54>)
 800d5d8:	f7fc ff58 	bl	800a48c <HAL_RTC_GetDate>
    calendar.CalendarCentury = Century;
 800d5dc:	4b0b      	ldr	r3, [pc, #44]	@ (800d60c <RtcGetCalendar+0x58>)
 800d5de:	881b      	ldrh	r3, [r3, #0]
 800d5e0:	81bb      	strh	r3, [r7, #12]
    RtcCheckCalendarRollOver( calendar.CalendarDate.Year );
 800d5e2:	7c7b      	ldrb	r3, [r7, #17]
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	f7ff ffbf 	bl	800d568 <RtcCheckCalendarRollOver>
    return calendar;
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	461d      	mov	r5, r3
 800d5ee:	f107 040c 	add.w	r4, r7, #12
 800d5f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d5f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d5f6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800d5fa:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800d5fe:	6878      	ldr	r0, [r7, #4]
 800d600:	3728      	adds	r7, #40	@ 0x28
 800d602:	46bd      	mov	sp, r7
 800d604:	bdb0      	pop	{r4, r5, r7, pc}
 800d606:	bf00      	nop
 800d608:	200004f0 	.word	0x200004f0
 800d60c:	200004cc 	.word	0x200004cc

0800d610 <RTC_IRQHandler>:
/*!
 * \brief RTC IRQ Handler of the RTC Alarm
 */
//void RTC_Alarm_IRQHandler( void )   // STM32L476
void RTC_IRQHandler( void )    // changed for STM32U5 - PK
{
 800d610:	b580      	push	{r7, lr}
 800d612:	af00      	add	r7, sp, #0
    HAL_RTC_AlarmIRQHandler( &RtcHandle );
 800d614:	4809      	ldr	r0, [pc, #36]	@ (800d63c <RTC_IRQHandler+0x2c>)
 800d616:	f7fd f987 	bl	800a928 <HAL_RTC_AlarmIRQHandler>
    HAL_RTC_DeactivateAlarm( &RtcHandle, RTC_ALARM_A );
 800d61a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800d61e:	4807      	ldr	r0, [pc, #28]	@ (800d63c <RTC_IRQHandler+0x2c>)
 800d620:	f7fd f882 	bl	800a728 <HAL_RTC_DeactivateAlarm>
    RtcRecoverMcuStatus( );
 800d624:	f7ff fc1e 	bl	800ce64 <RtcRecoverMcuStatus>
    RtcComputeWakeUpTime( );
 800d628:	f7ff fc24 	bl	800ce74 <RtcComputeWakeUpTime>
//    BlockLowPowerDuringTask( false );
    BlockLowPowerDuringTask( true );   // PK bugfix
 800d62c:	2001      	movs	r0, #1
 800d62e:	f7ff fc05 	bl	800ce3c <BlockLowPowerDuringTask>
//    DelayMs(10);   // BUG FIX PK
    //printf("RTC_IRQHandler\n\r");
    TimerIrqHandler( );
 800d632:	f000 fb33 	bl	800dc9c <TimerIrqHandler>
}
 800d636:	bf00      	nop
 800d638:	bd80      	pop	{r7, pc}
 800d63a:	bf00      	nop
 800d63c:	200004f0 	.word	0x200004f0

0800d640 <SpiInit>:
}SPIName;

void Error_Handler(void);   // should be defined in main.c - PK

void SpiInit( Spi_t *obj, PinNames mosi, PinNames miso, PinNames sclk, PinNames nss )
{
 800d640:	b580      	push	{r7, lr}
 800d642:	b086      	sub	sp, #24
 800d644:	af02      	add	r7, sp, #8
 800d646:	6078      	str	r0, [r7, #4]
 800d648:	4608      	mov	r0, r1
 800d64a:	4611      	mov	r1, r2
 800d64c:	461a      	mov	r2, r3
 800d64e:	4603      	mov	r3, r0
 800d650:	70fb      	strb	r3, [r7, #3]
 800d652:	460b      	mov	r3, r1
 800d654:	70bb      	strb	r3, [r7, #2]
 800d656:	4613      	mov	r3, r2
 800d658:	707b      	strb	r3, [r7, #1]
    __HAL_RCC_SPI1_FORCE_RESET( );
 800d65a:	4b3f      	ldr	r3, [pc, #252]	@ (800d758 <SpiInit+0x118>)
 800d65c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d65e:	4a3e      	ldr	r2, [pc, #248]	@ (800d758 <SpiInit+0x118>)
 800d660:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800d664:	67d3      	str	r3, [r2, #124]	@ 0x7c
    __HAL_RCC_SPI1_RELEASE_RESET( );
 800d666:	4b3c      	ldr	r3, [pc, #240]	@ (800d758 <SpiInit+0x118>)
 800d668:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d66a:	4a3b      	ldr	r2, [pc, #236]	@ (800d758 <SpiInit+0x118>)
 800d66c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d670:	67d3      	str	r3, [r2, #124]	@ 0x7c

    __HAL_RCC_SPI1_CLK_ENABLE( );
 800d672:	4b39      	ldr	r3, [pc, #228]	@ (800d758 <SpiInit+0x118>)
 800d674:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800d678:	4a37      	ldr	r2, [pc, #220]	@ (800d758 <SpiInit+0x118>)
 800d67a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800d67e:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800d682:	4b35      	ldr	r3, [pc, #212]	@ (800d758 <SpiInit+0x118>)
 800d684:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800d688:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d68c:	60fb      	str	r3, [r7, #12]
 800d68e:	68fb      	ldr	r3, [r7, #12]

//    obj->Spi.Instance = ( SPI_TypeDef *) SPI1_BASE;
    obj->Spi.Instance = SPI1; //( SPI_TypeDef *) SPI1_BASE;
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	4a32      	ldr	r2, [pc, #200]	@ (800d75c <SpiInit+0x11c>)
 800d694:	601a      	str	r2, [r3, #0]

    GpioInit( &obj->Mosi, mosi, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_DOWN, GPIO_AF5_SPI1 );
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 800d69c:	f997 1003 	ldrsb.w	r1, [r7, #3]
 800d6a0:	2305      	movs	r3, #5
 800d6a2:	9301      	str	r3, [sp, #4]
 800d6a4:	2302      	movs	r3, #2
 800d6a6:	9300      	str	r3, [sp, #0]
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	2202      	movs	r2, #2
 800d6ac:	f7ff faa8 	bl	800cc00 <GpioInit>
    GpioInit( &obj->Miso, miso, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_DOWN, GPIO_AF5_SPI1 );
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	f103 009c 	add.w	r0, r3, #156	@ 0x9c
 800d6b6:	f997 1002 	ldrsb.w	r1, [r7, #2]
 800d6ba:	2305      	movs	r3, #5
 800d6bc:	9301      	str	r3, [sp, #4]
 800d6be:	2302      	movs	r3, #2
 800d6c0:	9300      	str	r3, [sp, #0]
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	2202      	movs	r2, #2
 800d6c6:	f7ff fa9b 	bl	800cc00 <GpioInit>
    GpioInit( &obj->Sclk, sclk, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_DOWN, GPIO_AF5_SPI1 );
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	f103 00a8 	add.w	r0, r3, #168	@ 0xa8
 800d6d0:	f997 1001 	ldrsb.w	r1, [r7, #1]
 800d6d4:	2305      	movs	r3, #5
 800d6d6:	9301      	str	r3, [sp, #4]
 800d6d8:	2302      	movs	r3, #2
 800d6da:	9300      	str	r3, [sp, #0]
 800d6dc:	2300      	movs	r3, #0
 800d6de:	2202      	movs	r2, #2
 800d6e0:	f7ff fa8e 	bl	800cc00 <GpioInit>

    if( nss != NC )
 800d6e4:	f997 3018 	ldrsb.w	r3, [r7, #24]
 800d6e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6ec:	d00d      	beq.n	800d70a <SpiInit+0xca>
    {
        GpioInit( &obj->Nss, nss, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_UP, GPIO_AF5_SPI1 );
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	f103 00b4 	add.w	r0, r3, #180	@ 0xb4
 800d6f4:	f997 1018 	ldrsb.w	r1, [r7, #24]
 800d6f8:	2305      	movs	r3, #5
 800d6fa:	9301      	str	r3, [sp, #4]
 800d6fc:	2301      	movs	r3, #1
 800d6fe:	9300      	str	r3, [sp, #0]
 800d700:	2300      	movs	r3, #0
 800d702:	2202      	movs	r2, #2
 800d704:	f7ff fa7c 	bl	800cc00 <GpioInit>
 800d708:	e003      	b.n	800d712 <SpiInit+0xd2>
    }
    else
    {
        obj->Spi.Init.NSS = SPI_NSS_SOFT;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800d710:	619a      	str	r2, [r3, #24]
    }

    if( nss == NC )
 800d712:	f997 3018 	ldrsb.w	r3, [r7, #24]
 800d716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d71a:	d108      	bne.n	800d72e <SpiInit+0xee>
    {
        SpiFormat( obj, SPI_DATASIZE_8BIT, SPI_POLARITY_LOW, SPI_PHASE_1EDGE, 0 );
 800d71c:	2300      	movs	r3, #0
 800d71e:	9300      	str	r3, [sp, #0]
 800d720:	2300      	movs	r3, #0
 800d722:	2200      	movs	r2, #0
 800d724:	2107      	movs	r1, #7
 800d726:	6878      	ldr	r0, [r7, #4]
 800d728:	f000 f81a 	bl	800d760 <SpiFormat>
 800d72c:	e007      	b.n	800d73e <SpiInit+0xfe>
    }
    else
    {
        SpiFormat( obj, SPI_DATASIZE_8BIT, SPI_POLARITY_LOW, SPI_PHASE_1EDGE, 1 );
 800d72e:	2301      	movs	r3, #1
 800d730:	9300      	str	r3, [sp, #0]
 800d732:	2300      	movs	r3, #0
 800d734:	2200      	movs	r2, #0
 800d736:	2107      	movs	r1, #7
 800d738:	6878      	ldr	r0, [r7, #4]
 800d73a:	f000 f811 	bl	800d760 <SpiFormat>

//    HAL_SPI_Init( &obj->Spi );

//	SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};

	if (HAL_SPI_Init(&obj->Spi) != HAL_OK)
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	4618      	mov	r0, r3
 800d742:	f7fd fa71 	bl	800ac28 <HAL_SPI_Init>
 800d746:	4603      	mov	r3, r0
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d001      	beq.n	800d750 <SpiInit+0x110>
	{
		Error_Handler();
 800d74c:	f7f6 fc0a 	bl	8003f64 <Error_Handler>
		{
			Error_Handler();
		}
	}
	*/
}
 800d750:	bf00      	nop
 800d752:	3710      	adds	r7, #16
 800d754:	46bd      	mov	sp, r7
 800d756:	bd80      	pop	{r7, pc}
 800d758:	46020c00 	.word	0x46020c00
 800d75c:	40013000 	.word	0x40013000

0800d760 <SpiFormat>:
    GpioInit( &obj->Sclk, obj->Sclk.pin, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
    GpioInit( &obj->Nss, obj->Nss.pin, PIN_OUTPUT, PIN_PUSH_PULL, PIN_PULL_UP, 1 );
}

void SpiFormat( Spi_t *obj, uint32_t bits, int8_t cpol, int8_t cpha, int8_t slave )
{
 800d760:	b480      	push	{r7}
 800d762:	b085      	sub	sp, #20
 800d764:	af00      	add	r7, sp, #0
 800d766:	60f8      	str	r0, [r7, #12]
 800d768:	60b9      	str	r1, [r7, #8]
 800d76a:	4611      	mov	r1, r2
 800d76c:	461a      	mov	r2, r3
 800d76e:	460b      	mov	r3, r1
 800d770:	71fb      	strb	r3, [r7, #7]
 800d772:	4613      	mov	r3, r2
 800d774:	71bb      	strb	r3, [r7, #6]
	/* SPI1 parameter configuration*/
    if( slave == 0 )
 800d776:	f997 3018 	ldrsb.w	r3, [r7, #24]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d104      	bne.n	800d788 <SpiFormat+0x28>
    {
        obj->Spi.Init.Mode = SPI_MODE_MASTER;
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800d784:	605a      	str	r2, [r3, #4]
 800d786:	e002      	b.n	800d78e <SpiFormat+0x2e>
    }
    else
    {
        obj->Spi.Init.Mode = SPI_MODE_SLAVE;
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	2200      	movs	r2, #0
 800d78c:	605a      	str	r2, [r3, #4]
    }

	obj->Spi.Init.Direction = SPI_DIRECTION_2LINES;
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	2200      	movs	r2, #0
 800d792:	609a      	str	r2, [r3, #8]
	if( bits == SPI_DATASIZE_8BIT )
 800d794:	68bb      	ldr	r3, [r7, #8]
 800d796:	2b07      	cmp	r3, #7
 800d798:	d103      	bne.n	800d7a2 <SpiFormat+0x42>
	{
		obj->Spi.Init.DataSize = SPI_DATASIZE_8BIT;
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	2207      	movs	r2, #7
 800d79e:	60da      	str	r2, [r3, #12]
 800d7a0:	e002      	b.n	800d7a8 <SpiFormat+0x48>
	}
	else
	{
		obj->Spi.Init.DataSize = SPI_DATASIZE_16BIT;
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	220f      	movs	r2, #15
 800d7a6:	60da      	str	r2, [r3, #12]
	}

	obj->Spi.Init.CLKPolarity = cpol;
 800d7a8:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	611a      	str	r2, [r3, #16]
	obj->Spi.Init.CLKPhase = cpha;
 800d7b0:	f997 2006 	ldrsb.w	r2, [r7, #6]
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	615a      	str	r2, [r3, #20]
	obj->Spi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 800d7be:	61da      	str	r2, [r3, #28]
	obj->Spi.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	2200      	movs	r2, #0
 800d7c4:	621a      	str	r2, [r3, #32]
	obj->Spi.Init.TIMode = SPI_TIMODE_DISABLE;
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	2200      	movs	r2, #0
 800d7ca:	625a      	str	r2, [r3, #36]	@ 0x24
	obj->Spi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	2200      	movs	r2, #0
 800d7d0:	629a      	str	r2, [r3, #40]	@ 0x28
	obj->Spi.Init.CRCPolynomial = 0x7;
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	2207      	movs	r2, #7
 800d7d6:	62da      	str	r2, [r3, #44]	@ 0x2c
	obj->Spi.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800d7de:	635a      	str	r2, [r3, #52]	@ 0x34
	obj->Spi.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	639a      	str	r2, [r3, #56]	@ 0x38
	obj->Spi.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	63da      	str	r2, [r3, #60]	@ 0x3c
	obj->Spi.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	649a      	str	r2, [r3, #72]	@ 0x48
	obj->Spi.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	64da      	str	r2, [r3, #76]	@ 0x4c
	obj->Spi.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	2200      	movs	r2, #0
 800d7fc:	651a      	str	r2, [r3, #80]	@ 0x50
	obj->Spi.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	2200      	movs	r2, #0
 800d802:	655a      	str	r2, [r3, #84]	@ 0x54
	obj->Spi.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	2200      	movs	r2, #0
 800d808:	659a      	str	r2, [r3, #88]	@ 0x58
	obj->Spi.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	2200      	movs	r2, #0
 800d80e:	65da      	str	r2, [r3, #92]	@ 0x5c
	obj->Spi.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	2200      	movs	r2, #0
 800d814:	661a      	str	r2, [r3, #96]	@ 0x60
}
 800d816:	bf00      	nop
 800d818:	3714      	adds	r7, #20
 800d81a:	46bd      	mov	sp, r7
 800d81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d820:	4770      	bx	lr
	...

0800d824 <SX1276IoInit>:
 */
Gpio_t AntRx;
Gpio_t AntTx;

void SX1276IoInit( void )
{
 800d824:	b580      	push	{r7, lr}
 800d826:	b082      	sub	sp, #8
 800d828:	af02      	add	r7, sp, #8
    GpioInit( &SX1276.Spi.Nss, RADIO_NSS, PIN_OUTPUT, PIN_PUSH_PULL, PIN_PULL_UP, 1 );
 800d82a:	2301      	movs	r3, #1
 800d82c:	9301      	str	r3, [sp, #4]
 800d82e:	2301      	movs	r3, #1
 800d830:	9300      	str	r3, [sp, #0]
 800d832:	2300      	movs	r3, #0
 800d834:	2201      	movs	r2, #1
 800d836:	2129      	movs	r1, #41	@ 0x29
 800d838:	4820      	ldr	r0, [pc, #128]	@ (800d8bc <SX1276IoInit+0x98>)
 800d83a:	f7ff f9e1 	bl	800cc00 <GpioInit>

    GpioInit( &SX1276.DIO0, RADIO_DIO_0, PIN_INPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
 800d83e:	2300      	movs	r3, #0
 800d840:	9301      	str	r3, [sp, #4]
 800d842:	2301      	movs	r3, #1
 800d844:	9300      	str	r3, [sp, #0]
 800d846:	2300      	movs	r3, #0
 800d848:	2200      	movs	r2, #0
 800d84a:	2112      	movs	r1, #18
 800d84c:	481c      	ldr	r0, [pc, #112]	@ (800d8c0 <SX1276IoInit+0x9c>)
 800d84e:	f7ff f9d7 	bl	800cc00 <GpioInit>
    GpioInit( &SX1276.DIO1, RADIO_DIO_1, PIN_INPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
 800d852:	2300      	movs	r3, #0
 800d854:	9301      	str	r3, [sp, #4]
 800d856:	2301      	movs	r3, #1
 800d858:	9300      	str	r3, [sp, #0]
 800d85a:	2300      	movs	r3, #0
 800d85c:	2200      	movs	r2, #0
 800d85e:	2111      	movs	r1, #17
 800d860:	4818      	ldr	r0, [pc, #96]	@ (800d8c4 <SX1276IoInit+0xa0>)
 800d862:	f7ff f9cd 	bl	800cc00 <GpioInit>
    GpioInit( &SX1276.DIO2, RADIO_DIO_2, PIN_INPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
 800d866:	2300      	movs	r3, #0
 800d868:	9301      	str	r3, [sp, #4]
 800d86a:	2301      	movs	r3, #1
 800d86c:	9300      	str	r3, [sp, #0]
 800d86e:	2300      	movs	r3, #0
 800d870:	2200      	movs	r2, #0
 800d872:	211f      	movs	r1, #31
 800d874:	4814      	ldr	r0, [pc, #80]	@ (800d8c8 <SX1276IoInit+0xa4>)
 800d876:	f7ff f9c3 	bl	800cc00 <GpioInit>
    GpioInit( &SX1276.DIO3, RADIO_DIO_3, PIN_INPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
 800d87a:	2300      	movs	r3, #0
 800d87c:	9301      	str	r3, [sp, #4]
 800d87e:	2301      	movs	r3, #1
 800d880:	9300      	str	r3, [sp, #0]
 800d882:	2300      	movs	r3, #0
 800d884:	2200      	movs	r2, #0
 800d886:	211e      	movs	r1, #30
 800d888:	4810      	ldr	r0, [pc, #64]	@ (800d8cc <SX1276IoInit+0xa8>)
 800d88a:	f7ff f9b9 	bl	800cc00 <GpioInit>
    GpioInit( &SX1276.DIO4, RADIO_DIO_4, PIN_INPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
 800d88e:	2300      	movs	r3, #0
 800d890:	9301      	str	r3, [sp, #4]
 800d892:	2301      	movs	r3, #1
 800d894:	9300      	str	r3, [sp, #0]
 800d896:	2300      	movs	r3, #0
 800d898:	2200      	movs	r2, #0
 800d89a:	211d      	movs	r1, #29
 800d89c:	480c      	ldr	r0, [pc, #48]	@ (800d8d0 <SX1276IoInit+0xac>)
 800d89e:	f7ff f9af 	bl	800cc00 <GpioInit>
    GpioInit( &SX1276.DIO5, RADIO_DIO_5, PIN_INPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
 800d8a2:	2300      	movs	r3, #0
 800d8a4:	9301      	str	r3, [sp, #4]
 800d8a6:	2301      	movs	r3, #1
 800d8a8:	9300      	str	r3, [sp, #0]
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	2200      	movs	r2, #0
 800d8ae:	2118      	movs	r1, #24
 800d8b0:	4808      	ldr	r0, [pc, #32]	@ (800d8d4 <SX1276IoInit+0xb0>)
 800d8b2:	f7ff f9a5 	bl	800cc00 <GpioInit>
}
 800d8b6:	bf00      	nop
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	bd80      	pop	{r7, pc}
 800d8bc:	2000075c 	.word	0x2000075c
 800d8c0:	20000660 	.word	0x20000660
 800d8c4:	2000066c 	.word	0x2000066c
 800d8c8:	20000678 	.word	0x20000678
 800d8cc:	20000684 	.word	0x20000684
 800d8d0:	20000690 	.word	0x20000690
 800d8d4:	2000069c 	.word	0x2000069c

0800d8d8 <SX1276IoIrqInit>:

void SX1276IoIrqInit( DioIrqHandler **irqHandlers )
{
 800d8d8:	b580      	push	{r7, lr}
 800d8da:	b082      	sub	sp, #8
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	6078      	str	r0, [r7, #4]
    GpioSetInterrupt( &SX1276.DIO0, IRQ_RISING_EDGE, IRQ_HIGH_PRIORITY, irqHandlers[0] );
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	2203      	movs	r2, #3
 800d8e6:	2101      	movs	r1, #1
 800d8e8:	4817      	ldr	r0, [pc, #92]	@ (800d948 <SX1276IoIrqInit+0x70>)
 800d8ea:	f7ff f9ad 	bl	800cc48 <GpioSetInterrupt>
    GpioSetInterrupt( &SX1276.DIO1, IRQ_RISING_EDGE, IRQ_HIGH_PRIORITY, irqHandlers[1] );
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	3304      	adds	r3, #4
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	2203      	movs	r2, #3
 800d8f6:	2101      	movs	r1, #1
 800d8f8:	4814      	ldr	r0, [pc, #80]	@ (800d94c <SX1276IoIrqInit+0x74>)
 800d8fa:	f7ff f9a5 	bl	800cc48 <GpioSetInterrupt>
    GpioSetInterrupt( &SX1276.DIO2, IRQ_RISING_EDGE, IRQ_HIGH_PRIORITY, irqHandlers[2] );
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	3308      	adds	r3, #8
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	2203      	movs	r2, #3
 800d906:	2101      	movs	r1, #1
 800d908:	4811      	ldr	r0, [pc, #68]	@ (800d950 <SX1276IoIrqInit+0x78>)
 800d90a:	f7ff f99d 	bl	800cc48 <GpioSetInterrupt>
    GpioSetInterrupt( &SX1276.DIO3, IRQ_RISING_EDGE, IRQ_HIGH_PRIORITY, irqHandlers[3] );
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	330c      	adds	r3, #12
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	2203      	movs	r2, #3
 800d916:	2101      	movs	r1, #1
 800d918:	480e      	ldr	r0, [pc, #56]	@ (800d954 <SX1276IoIrqInit+0x7c>)
 800d91a:	f7ff f995 	bl	800cc48 <GpioSetInterrupt>
    GpioSetInterrupt( &SX1276.DIO4, IRQ_RISING_EDGE, IRQ_HIGH_PRIORITY, irqHandlers[4] );
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	3310      	adds	r3, #16
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	2203      	movs	r2, #3
 800d926:	2101      	movs	r1, #1
 800d928:	480b      	ldr	r0, [pc, #44]	@ (800d958 <SX1276IoIrqInit+0x80>)
 800d92a:	f7ff f98d 	bl	800cc48 <GpioSetInterrupt>
    GpioSetInterrupt( &SX1276.DIO5, IRQ_RISING_EDGE, IRQ_HIGH_PRIORITY, irqHandlers[5] );
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	3314      	adds	r3, #20
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	2203      	movs	r2, #3
 800d936:	2101      	movs	r1, #1
 800d938:	4808      	ldr	r0, [pc, #32]	@ (800d95c <SX1276IoIrqInit+0x84>)
 800d93a:	f7ff f985 	bl	800cc48 <GpioSetInterrupt>
}
 800d93e:	bf00      	nop
 800d940:	3708      	adds	r7, #8
 800d942:	46bd      	mov	sp, r7
 800d944:	bd80      	pop	{r7, pc}
 800d946:	bf00      	nop
 800d948:	20000660 	.word	0x20000660
 800d94c:	2000066c 	.word	0x2000066c
 800d950:	20000678 	.word	0x20000678
 800d954:	20000684 	.word	0x20000684
 800d958:	20000690 	.word	0x20000690
 800d95c:	2000069c 	.word	0x2000069c

0800d960 <SX1276GetPaSelect>:
    GpioInit( &SX1276.DIO4, RADIO_DIO_4, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
    GpioInit( &SX1276.DIO5, RADIO_DIO_5, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
}

uint8_t SX1276GetPaSelect( uint32_t channel )
{
 800d960:	b480      	push	{r7}
 800d962:	b083      	sub	sp, #12
 800d964:	af00      	add	r7, sp, #0
 800d966:	6078      	str	r0, [r7, #4]
    return RF_PACONFIG_PASELECT_PABOOST;
 800d968:	2380      	movs	r3, #128	@ 0x80
}
 800d96a:	4618      	mov	r0, r3
 800d96c:	370c      	adds	r7, #12
 800d96e:	46bd      	mov	sp, r7
 800d970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d974:	4770      	bx	lr
	...

0800d978 <SX1276SetAntSwLowPower>:

void SX1276SetAntSwLowPower( bool status )
{
 800d978:	b580      	push	{r7, lr}
 800d97a:	b082      	sub	sp, #8
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	4603      	mov	r3, r0
 800d980:	71fb      	strb	r3, [r7, #7]
    if( RadioIsActive != status )
 800d982:	4b0b      	ldr	r3, [pc, #44]	@ (800d9b0 <SX1276SetAntSwLowPower+0x38>)
 800d984:	781b      	ldrb	r3, [r3, #0]
 800d986:	79fa      	ldrb	r2, [r7, #7]
 800d988:	429a      	cmp	r2, r3
 800d98a:	d00d      	beq.n	800d9a8 <SX1276SetAntSwLowPower+0x30>
    {
        RadioIsActive = status;
 800d98c:	4a08      	ldr	r2, [pc, #32]	@ (800d9b0 <SX1276SetAntSwLowPower+0x38>)
 800d98e:	79fb      	ldrb	r3, [r7, #7]
 800d990:	7013      	strb	r3, [r2, #0]

        if( status == false )
 800d992:	79fb      	ldrb	r3, [r7, #7]
 800d994:	f083 0301 	eor.w	r3, r3, #1
 800d998:	b2db      	uxtb	r3, r3
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d002      	beq.n	800d9a4 <SX1276SetAntSwLowPower+0x2c>
        {
            SX1276AntSwInit( );
 800d99e:	f000 f809 	bl	800d9b4 <SX1276AntSwInit>
        else
        {
            SX1276AntSwDeInit( );
        }
    }
}
 800d9a2:	e001      	b.n	800d9a8 <SX1276SetAntSwLowPower+0x30>
            SX1276AntSwDeInit( );
 800d9a4:	f000 f824 	bl	800d9f0 <SX1276AntSwDeInit>
}
 800d9a8:	bf00      	nop
 800d9aa:	3708      	adds	r7, #8
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	bd80      	pop	{r7, pc}
 800d9b0:	2000052c 	.word	0x2000052c

0800d9b4 <SX1276AntSwInit>:

void SX1276AntSwInit( void )
{
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	b082      	sub	sp, #8
 800d9b8:	af02      	add	r7, sp, #8
    GpioInit( &AntTx, RADIO_ANT_SWITCH_TX, PIN_OUTPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
 800d9ba:	2300      	movs	r3, #0
 800d9bc:	9301      	str	r3, [sp, #4]
 800d9be:	2301      	movs	r3, #1
 800d9c0:	9300      	str	r3, [sp, #0]
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	2201      	movs	r2, #1
 800d9c6:	2114      	movs	r1, #20
 800d9c8:	4807      	ldr	r0, [pc, #28]	@ (800d9e8 <SX1276AntSwInit+0x34>)
 800d9ca:	f7ff f919 	bl	800cc00 <GpioInit>
    GpioInit( &AntRx, RADIO_ANT_SWITCH_RX, PIN_OUTPUT, PIN_PUSH_PULL, PIN_PULL_UP, 1 );
 800d9ce:	2301      	movs	r3, #1
 800d9d0:	9301      	str	r3, [sp, #4]
 800d9d2:	2301      	movs	r3, #1
 800d9d4:	9300      	str	r3, [sp, #0]
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	2201      	movs	r2, #1
 800d9da:	2115      	movs	r1, #21
 800d9dc:	4803      	ldr	r0, [pc, #12]	@ (800d9ec <SX1276AntSwInit+0x38>)
 800d9de:	f7ff f90f 	bl	800cc00 <GpioInit>
}
 800d9e2:	bf00      	nop
 800d9e4:	46bd      	mov	sp, r7
 800d9e6:	bd80      	pop	{r7, pc}
 800d9e8:	2000053c 	.word	0x2000053c
 800d9ec:	20000530 	.word	0x20000530

0800d9f0 <SX1276AntSwDeInit>:

void SX1276AntSwDeInit( void )
{
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	b082      	sub	sp, #8
 800d9f4:	af02      	add	r7, sp, #8
    GpioInit( &AntTx, RADIO_ANT_SWITCH_TX, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	9301      	str	r3, [sp, #4]
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	9300      	str	r3, [sp, #0]
 800d9fe:	2300      	movs	r3, #0
 800da00:	2203      	movs	r2, #3
 800da02:	2114      	movs	r1, #20
 800da04:	4807      	ldr	r0, [pc, #28]	@ (800da24 <SX1276AntSwDeInit+0x34>)
 800da06:	f7ff f8fb 	bl	800cc00 <GpioInit>
    GpioInit( &AntRx, RADIO_ANT_SWITCH_RX, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800da0a:	2300      	movs	r3, #0
 800da0c:	9301      	str	r3, [sp, #4]
 800da0e:	2300      	movs	r3, #0
 800da10:	9300      	str	r3, [sp, #0]
 800da12:	2300      	movs	r3, #0
 800da14:	2203      	movs	r2, #3
 800da16:	2115      	movs	r1, #21
 800da18:	4803      	ldr	r0, [pc, #12]	@ (800da28 <SX1276AntSwDeInit+0x38>)
 800da1a:	f7ff f8f1 	bl	800cc00 <GpioInit>
}
 800da1e:	bf00      	nop
 800da20:	46bd      	mov	sp, r7
 800da22:	bd80      	pop	{r7, pc}
 800da24:	2000053c 	.word	0x2000053c
 800da28:	20000530 	.word	0x20000530

0800da2c <SX1276SetAntSw>:

void SX1276SetAntSw( uint8_t rxTx )
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b082      	sub	sp, #8
 800da30:	af00      	add	r7, sp, #0
 800da32:	4603      	mov	r3, r0
 800da34:	71fb      	strb	r3, [r7, #7]
    if( rxTx != 0 ) // 1: TX, 0: RX
 800da36:	79fb      	ldrb	r3, [r7, #7]
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d008      	beq.n	800da4e <SX1276SetAntSw+0x22>
    {
        GpioWrite( &AntRx, 0 );
 800da3c:	2100      	movs	r1, #0
 800da3e:	480a      	ldr	r0, [pc, #40]	@ (800da68 <SX1276SetAntSw+0x3c>)
 800da40:	f7ff f91d 	bl	800cc7e <GpioWrite>
        GpioWrite( &AntTx, 1 );
 800da44:	2101      	movs	r1, #1
 800da46:	4809      	ldr	r0, [pc, #36]	@ (800da6c <SX1276SetAntSw+0x40>)
 800da48:	f7ff f919 	bl	800cc7e <GpioWrite>
    else
    {
        GpioWrite( &AntRx, 1 );
        GpioWrite( &AntTx, 0 );
    }
}
 800da4c:	e007      	b.n	800da5e <SX1276SetAntSw+0x32>
        GpioWrite( &AntRx, 1 );
 800da4e:	2101      	movs	r1, #1
 800da50:	4805      	ldr	r0, [pc, #20]	@ (800da68 <SX1276SetAntSw+0x3c>)
 800da52:	f7ff f914 	bl	800cc7e <GpioWrite>
        GpioWrite( &AntTx, 0 );
 800da56:	2100      	movs	r1, #0
 800da58:	4804      	ldr	r0, [pc, #16]	@ (800da6c <SX1276SetAntSw+0x40>)
 800da5a:	f7ff f910 	bl	800cc7e <GpioWrite>
}
 800da5e:	bf00      	nop
 800da60:	3708      	adds	r7, #8
 800da62:	46bd      	mov	sp, r7
 800da64:	bd80      	pop	{r7, pc}
 800da66:	bf00      	nop
 800da68:	20000530 	.word	0x20000530
 800da6c:	2000053c 	.word	0x2000053c

0800da70 <SX1276CheckRfFrequency>:

bool SX1276CheckRfFrequency( uint32_t frequency )
{
 800da70:	b480      	push	{r7}
 800da72:	b083      	sub	sp, #12
 800da74:	af00      	add	r7, sp, #0
 800da76:	6078      	str	r0, [r7, #4]
    // Implement check. Currently all frequencies are supported
    return true;
 800da78:	2301      	movs	r3, #1
}
 800da7a:	4618      	mov	r0, r3
 800da7c:	370c      	adds	r7, #12
 800da7e:	46bd      	mov	sp, r7
 800da80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da84:	4770      	bx	lr

0800da86 <TimerInit>:
 * \retval value current timer value
 */
TimerTime_t TimerGetValue( void );

void TimerInit( TimerEvent_t *obj, void ( *callback )( void ) )
{
 800da86:	b480      	push	{r7}
 800da88:	b083      	sub	sp, #12
 800da8a:	af00      	add	r7, sp, #0
 800da8c:	6078      	str	r0, [r7, #4]
 800da8e:	6039      	str	r1, [r7, #0]
    obj->Timestamp = 0;
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	2200      	movs	r2, #0
 800da94:	601a      	str	r2, [r3, #0]
    obj->ReloadValue = 0;
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	2200      	movs	r2, #0
 800da9a:	605a      	str	r2, [r3, #4]
    obj->IsRunning = false;
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	2200      	movs	r2, #0
 800daa0:	721a      	strb	r2, [r3, #8]
    obj->Callback = callback;
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	683a      	ldr	r2, [r7, #0]
 800daa6:	60da      	str	r2, [r3, #12]
    obj->Next = NULL;
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	2200      	movs	r2, #0
 800daac:	611a      	str	r2, [r3, #16]
}
 800daae:	bf00      	nop
 800dab0:	370c      	adds	r7, #12
 800dab2:	46bd      	mov	sp, r7
 800dab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab8:	4770      	bx	lr
	...

0800dabc <TimerStart>:

void TimerStart( TimerEvent_t *obj )
{
 800dabc:	b580      	push	{r7, lr}
 800dabe:	b084      	sub	sp, #16
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	6078      	str	r0, [r7, #4]
    uint32_t elapsedTime = 0;
 800dac4:	2300      	movs	r3, #0
 800dac6:	60fb      	str	r3, [r7, #12]
    uint32_t remainingTime = 0;
 800dac8:	2300      	movs	r3, #0
 800daca:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 800dacc:	b672      	cpsid	i
}
 800dace:	bf00      	nop

    __disable_irq( );

    if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d005      	beq.n	800dae2 <TimerStart+0x26>
 800dad6:	6878      	ldr	r0, [r7, #4]
 800dad8:	f000 f9d8 	bl	800de8c <TimerExists>
 800dadc:	4603      	mov	r3, r0
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d002      	beq.n	800dae8 <TimerStart+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
 800dae2:	b662      	cpsie	i
}
 800dae4:	bf00      	nop
    {
        __enable_irq( );
        return;
 800dae6:	e03e      	b.n	800db66 <TimerStart+0xaa>
    }

    obj->Timestamp = obj->ReloadValue;
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	685a      	ldr	r2, [r3, #4]
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	601a      	str	r2, [r3, #0]
    obj->IsRunning = false;
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	2200      	movs	r2, #0
 800daf4:	721a      	strb	r2, [r3, #8]

    if( TimerListHead == NULL )
 800daf6:	4b1d      	ldr	r3, [pc, #116]	@ (800db6c <TimerStart+0xb0>)
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d106      	bne.n	800db0c <TimerStart+0x50>
    {
        TimerInsertNewHeadTimer( obj, obj->Timestamp );
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	4619      	mov	r1, r3
 800db04:	6878      	ldr	r0, [r7, #4]
 800db06:	f000 f8a1 	bl	800dc4c <TimerInsertNewHeadTimer>
 800db0a:	e02a      	b.n	800db62 <TimerStart+0xa6>
    }
    else
    {
        if( TimerListHead->IsRunning == true )
 800db0c:	4b17      	ldr	r3, [pc, #92]	@ (800db6c <TimerStart+0xb0>)
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	7a1b      	ldrb	r3, [r3, #8]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d013      	beq.n	800db3e <TimerStart+0x82>
        {
            elapsedTime = TimerGetValue( );
 800db16:	f000 f9e9 	bl	800deec <TimerGetValue>
 800db1a:	60f8      	str	r0, [r7, #12]
            if( elapsedTime > TimerListHead->Timestamp )
 800db1c:	4b13      	ldr	r3, [pc, #76]	@ (800db6c <TimerStart+0xb0>)
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	68fa      	ldr	r2, [r7, #12]
 800db24:	429a      	cmp	r2, r3
 800db26:	d903      	bls.n	800db30 <TimerStart+0x74>
            {
                elapsedTime = TimerListHead->Timestamp; // security but should never occur
 800db28:	4b10      	ldr	r3, [pc, #64]	@ (800db6c <TimerStart+0xb0>)
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	60fb      	str	r3, [r7, #12]
            }
            remainingTime = TimerListHead->Timestamp - elapsedTime;
 800db30:	4b0e      	ldr	r3, [pc, #56]	@ (800db6c <TimerStart+0xb0>)
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	681a      	ldr	r2, [r3, #0]
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	1ad3      	subs	r3, r2, r3
 800db3a:	60bb      	str	r3, [r7, #8]
 800db3c:	e003      	b.n	800db46 <TimerStart+0x8a>
        }
        else
        {
            remainingTime = TimerListHead->Timestamp;
 800db3e:	4b0b      	ldr	r3, [pc, #44]	@ (800db6c <TimerStart+0xb0>)
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	60bb      	str	r3, [r7, #8]
        }

        if( obj->Timestamp < remainingTime )
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	68ba      	ldr	r2, [r7, #8]
 800db4c:	429a      	cmp	r2, r3
 800db4e:	d904      	bls.n	800db5a <TimerStart+0x9e>
        {
            TimerInsertNewHeadTimer( obj, remainingTime );
 800db50:	68b9      	ldr	r1, [r7, #8]
 800db52:	6878      	ldr	r0, [r7, #4]
 800db54:	f000 f87a 	bl	800dc4c <TimerInsertNewHeadTimer>
 800db58:	e003      	b.n	800db62 <TimerStart+0xa6>
        }
        else
        {
             TimerInsertTimer( obj, remainingTime );
 800db5a:	68b9      	ldr	r1, [r7, #8]
 800db5c:	6878      	ldr	r0, [r7, #4]
 800db5e:	f000 f807 	bl	800db70 <TimerInsertTimer>
  __ASM volatile ("cpsie i" : : : "memory");
 800db62:	b662      	cpsie	i
}
 800db64:	bf00      	nop
        }
    }
    __enable_irq( );
}
 800db66:	3710      	adds	r7, #16
 800db68:	46bd      	mov	sp, r7
 800db6a:	bd80      	pop	{r7, pc}
 800db6c:	2000054c 	.word	0x2000054c

0800db70 <TimerInsertTimer>:

static void TimerInsertTimer( TimerEvent_t *obj, uint32_t remainingTime )
{
 800db70:	b480      	push	{r7}
 800db72:	b087      	sub	sp, #28
 800db74:	af00      	add	r7, sp, #0
 800db76:	6078      	str	r0, [r7, #4]
 800db78:	6039      	str	r1, [r7, #0]
    uint32_t aggregatedTimestamp = 0;      // hold the sum of timestamps
 800db7a:	2300      	movs	r3, #0
 800db7c:	617b      	str	r3, [r7, #20]
    uint32_t aggregatedTimestampNext = 0;  // hold the sum of timestamps up to the next event
 800db7e:	2300      	movs	r3, #0
 800db80:	613b      	str	r3, [r7, #16]

    TimerEvent_t* prev = TimerListHead;
 800db82:	4b31      	ldr	r3, [pc, #196]	@ (800dc48 <TimerInsertTimer+0xd8>)
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	60fb      	str	r3, [r7, #12]
    TimerEvent_t* cur = TimerListHead->Next;
 800db88:	4b2f      	ldr	r3, [pc, #188]	@ (800dc48 <TimerInsertTimer+0xd8>)
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	691b      	ldr	r3, [r3, #16]
 800db8e:	60bb      	str	r3, [r7, #8]

    if( cur == NULL )
 800db90:	68bb      	ldr	r3, [r7, #8]
 800db92:	2b00      	cmp	r3, #0
 800db94:	d10c      	bne.n	800dbb0 <TimerInsertTimer+0x40>
    { // obj comes just after the head
        obj->Timestamp -= remainingTime;
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	681a      	ldr	r2, [r3, #0]
 800db9a:	683b      	ldr	r3, [r7, #0]
 800db9c:	1ad2      	subs	r2, r2, r3
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	601a      	str	r2, [r3, #0]
        prev->Next = obj;
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	687a      	ldr	r2, [r7, #4]
 800dba6:	611a      	str	r2, [r3, #16]
        obj->Next = NULL;
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	2200      	movs	r2, #0
 800dbac:	611a      	str	r2, [r3, #16]
                    aggregatedTimestampNext = aggregatedTimestampNext + cur->Timestamp;
                }
            }
        }
    }
}
 800dbae:	e045      	b.n	800dc3c <TimerInsertTimer+0xcc>
        aggregatedTimestamp = remainingTime;
 800dbb0:	683b      	ldr	r3, [r7, #0]
 800dbb2:	617b      	str	r3, [r7, #20]
        aggregatedTimestampNext = remainingTime + cur->Timestamp;
 800dbb4:	68bb      	ldr	r3, [r7, #8]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	683a      	ldr	r2, [r7, #0]
 800dbba:	4413      	add	r3, r2
 800dbbc:	613b      	str	r3, [r7, #16]
        while( prev != NULL )
 800dbbe:	e039      	b.n	800dc34 <TimerInsertTimer+0xc4>
            if( aggregatedTimestampNext > obj->Timestamp )
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	693a      	ldr	r2, [r7, #16]
 800dbc6:	429a      	cmp	r2, r3
 800dbc8:	d916      	bls.n	800dbf8 <TimerInsertTimer+0x88>
                obj->Timestamp -= aggregatedTimestamp;
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	681a      	ldr	r2, [r3, #0]
 800dbce:	697b      	ldr	r3, [r7, #20]
 800dbd0:	1ad2      	subs	r2, r2, r3
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	601a      	str	r2, [r3, #0]
                if( cur != NULL )
 800dbd6:	68bb      	ldr	r3, [r7, #8]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d006      	beq.n	800dbea <TimerInsertTimer+0x7a>
                    cur->Timestamp -= obj->Timestamp;
 800dbdc:	68bb      	ldr	r3, [r7, #8]
 800dbde:	681a      	ldr	r2, [r3, #0]
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	1ad2      	subs	r2, r2, r3
 800dbe6:	68bb      	ldr	r3, [r7, #8]
 800dbe8:	601a      	str	r2, [r3, #0]
                prev->Next = obj;
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	687a      	ldr	r2, [r7, #4]
 800dbee:	611a      	str	r2, [r3, #16]
                obj->Next = cur;
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	68ba      	ldr	r2, [r7, #8]
 800dbf4:	611a      	str	r2, [r3, #16]
                break;
 800dbf6:	e021      	b.n	800dc3c <TimerInsertTimer+0xcc>
                prev = cur;
 800dbf8:	68bb      	ldr	r3, [r7, #8]
 800dbfa:	60fb      	str	r3, [r7, #12]
                cur = cur->Next;
 800dbfc:	68bb      	ldr	r3, [r7, #8]
 800dbfe:	691b      	ldr	r3, [r3, #16]
 800dc00:	60bb      	str	r3, [r7, #8]
                if( cur == NULL )
 800dc02:	68bb      	ldr	r3, [r7, #8]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d10e      	bne.n	800dc26 <TimerInsertTimer+0xb6>
                    aggregatedTimestamp = aggregatedTimestampNext;
 800dc08:	693b      	ldr	r3, [r7, #16]
 800dc0a:	617b      	str	r3, [r7, #20]
                    obj->Timestamp -= aggregatedTimestamp;
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	681a      	ldr	r2, [r3, #0]
 800dc10:	697b      	ldr	r3, [r7, #20]
 800dc12:	1ad2      	subs	r2, r2, r3
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	601a      	str	r2, [r3, #0]
                    prev->Next = obj;
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	687a      	ldr	r2, [r7, #4]
 800dc1c:	611a      	str	r2, [r3, #16]
                    obj->Next = NULL;
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	2200      	movs	r2, #0
 800dc22:	611a      	str	r2, [r3, #16]
                    break;
 800dc24:	e00a      	b.n	800dc3c <TimerInsertTimer+0xcc>
                    aggregatedTimestamp = aggregatedTimestampNext;
 800dc26:	693b      	ldr	r3, [r7, #16]
 800dc28:	617b      	str	r3, [r7, #20]
                    aggregatedTimestampNext = aggregatedTimestampNext + cur->Timestamp;
 800dc2a:	68bb      	ldr	r3, [r7, #8]
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	693a      	ldr	r2, [r7, #16]
 800dc30:	4413      	add	r3, r2
 800dc32:	613b      	str	r3, [r7, #16]
        while( prev != NULL )
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d1c2      	bne.n	800dbc0 <TimerInsertTimer+0x50>
}
 800dc3a:	e7ff      	b.n	800dc3c <TimerInsertTimer+0xcc>
 800dc3c:	bf00      	nop
 800dc3e:	371c      	adds	r7, #28
 800dc40:	46bd      	mov	sp, r7
 800dc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc46:	4770      	bx	lr
 800dc48:	2000054c 	.word	0x2000054c

0800dc4c <TimerInsertNewHeadTimer>:

static void TimerInsertNewHeadTimer( TimerEvent_t *obj, uint32_t remainingTime )
{
 800dc4c:	b580      	push	{r7, lr}
 800dc4e:	b084      	sub	sp, #16
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	6078      	str	r0, [r7, #4]
 800dc54:	6039      	str	r1, [r7, #0]
    TimerEvent_t* cur = TimerListHead;
 800dc56:	4b10      	ldr	r3, [pc, #64]	@ (800dc98 <TimerInsertNewHeadTimer+0x4c>)
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	60fb      	str	r3, [r7, #12]

    if( cur != NULL )
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d008      	beq.n	800dc74 <TimerInsertNewHeadTimer+0x28>
    {
        cur->Timestamp = remainingTime - obj->Timestamp;
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	683a      	ldr	r2, [r7, #0]
 800dc68:	1ad2      	subs	r2, r2, r3
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	601a      	str	r2, [r3, #0]
        cur->IsRunning = false;
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	2200      	movs	r2, #0
 800dc72:	721a      	strb	r2, [r3, #8]
    }

    obj->Next = cur;
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	68fa      	ldr	r2, [r7, #12]
 800dc78:	611a      	str	r2, [r3, #16]
    obj->IsRunning = true;
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	2201      	movs	r2, #1
 800dc7e:	721a      	strb	r2, [r3, #8]
    TimerListHead = obj;
 800dc80:	4a05      	ldr	r2, [pc, #20]	@ (800dc98 <TimerInsertNewHeadTimer+0x4c>)
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	6013      	str	r3, [r2, #0]
    TimerSetTimeout( TimerListHead );
 800dc86:	4b04      	ldr	r3, [pc, #16]	@ (800dc98 <TimerInsertNewHeadTimer+0x4c>)
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	f000 f936 	bl	800defc <TimerSetTimeout>
}
 800dc90:	bf00      	nop
 800dc92:	3710      	adds	r7, #16
 800dc94:	46bd      	mov	sp, r7
 800dc96:	bd80      	pop	{r7, pc}
 800dc98:	2000054c 	.word	0x2000054c

0800dc9c <TimerIrqHandler>:

void TimerIrqHandler( void )
{
 800dc9c:	b580      	push	{r7, lr}
 800dc9e:	b082      	sub	sp, #8
 800dca0:	af00      	add	r7, sp, #0
    uint32_t elapsedTime = 0;
 800dca2:	2300      	movs	r3, #0
 800dca4:	607b      	str	r3, [r7, #4]

    elapsedTime = TimerGetValue( );
 800dca6:	f000 f921 	bl	800deec <TimerGetValue>
 800dcaa:	6078      	str	r0, [r7, #4]
    
    if (TimerListHead == NULL)  // PK: this is just a workaround to avoid HardFault error caused by null-pointer (it is cleared earlier for an unknown reason)
 800dcac:	4b26      	ldr	r3, [pc, #152]	@ (800dd48 <TimerIrqHandler+0xac>)
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d045      	beq.n	800dd40 <TimerIrqHandler+0xa4>
    	return;

    if( elapsedTime >= TimerListHead->Timestamp )
 800dcb4:	4b24      	ldr	r3, [pc, #144]	@ (800dd48 <TimerIrqHandler+0xac>)
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	687a      	ldr	r2, [r7, #4]
 800dcbc:	429a      	cmp	r2, r3
 800dcbe:	d304      	bcc.n	800dcca <TimerIrqHandler+0x2e>
    {
        TimerListHead->Timestamp = 0;
 800dcc0:	4b21      	ldr	r3, [pc, #132]	@ (800dd48 <TimerIrqHandler+0xac>)
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	2200      	movs	r2, #0
 800dcc6:	601a      	str	r2, [r3, #0]
 800dcc8:	e007      	b.n	800dcda <TimerIrqHandler+0x3e>
    }
    else
    {
        TimerListHead->Timestamp -= elapsedTime;
 800dcca:	4b1f      	ldr	r3, [pc, #124]	@ (800dd48 <TimerIrqHandler+0xac>)
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	6819      	ldr	r1, [r3, #0]
 800dcd0:	4b1d      	ldr	r3, [pc, #116]	@ (800dd48 <TimerIrqHandler+0xac>)
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	687a      	ldr	r2, [r7, #4]
 800dcd6:	1a8a      	subs	r2, r1, r2
 800dcd8:	601a      	str	r2, [r3, #0]
    }

    TimerListHead->IsRunning = false;
 800dcda:	4b1b      	ldr	r3, [pc, #108]	@ (800dd48 <TimerIrqHandler+0xac>)
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	2200      	movs	r2, #0
 800dce0:	721a      	strb	r2, [r3, #8]

    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp == 0 ) )
 800dce2:	e00e      	b.n	800dd02 <TimerIrqHandler+0x66>
    {
        TimerEvent_t* elapsedTimer = TimerListHead;
 800dce4:	4b18      	ldr	r3, [pc, #96]	@ (800dd48 <TimerIrqHandler+0xac>)
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	603b      	str	r3, [r7, #0]
        TimerListHead = TimerListHead->Next;
 800dcea:	4b17      	ldr	r3, [pc, #92]	@ (800dd48 <TimerIrqHandler+0xac>)
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	691b      	ldr	r3, [r3, #16]
 800dcf0:	4a15      	ldr	r2, [pc, #84]	@ (800dd48 <TimerIrqHandler+0xac>)
 800dcf2:	6013      	str	r3, [r2, #0]

        if( elapsedTimer->Callback != NULL )
 800dcf4:	683b      	ldr	r3, [r7, #0]
 800dcf6:	68db      	ldr	r3, [r3, #12]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d002      	beq.n	800dd02 <TimerIrqHandler+0x66>
        {
            elapsedTimer->Callback( );
 800dcfc:	683b      	ldr	r3, [r7, #0]
 800dcfe:	68db      	ldr	r3, [r3, #12]
 800dd00:	4798      	blx	r3
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp == 0 ) )
 800dd02:	4b11      	ldr	r3, [pc, #68]	@ (800dd48 <TimerIrqHandler+0xac>)
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d004      	beq.n	800dd14 <TimerIrqHandler+0x78>
 800dd0a:	4b0f      	ldr	r3, [pc, #60]	@ (800dd48 <TimerIrqHandler+0xac>)
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d0e7      	beq.n	800dce4 <TimerIrqHandler+0x48>
        }
    }

    // start the next TimerListHead if it exists
    if( TimerListHead != NULL )
 800dd14:	4b0c      	ldr	r3, [pc, #48]	@ (800dd48 <TimerIrqHandler+0xac>)
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d012      	beq.n	800dd42 <TimerIrqHandler+0xa6>
    {
        if( TimerListHead->IsRunning != true )
 800dd1c:	4b0a      	ldr	r3, [pc, #40]	@ (800dd48 <TimerIrqHandler+0xac>)
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	7a1b      	ldrb	r3, [r3, #8]
 800dd22:	f083 0301 	eor.w	r3, r3, #1
 800dd26:	b2db      	uxtb	r3, r3
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d00a      	beq.n	800dd42 <TimerIrqHandler+0xa6>
        {
            TimerListHead->IsRunning = true;
 800dd2c:	4b06      	ldr	r3, [pc, #24]	@ (800dd48 <TimerIrqHandler+0xac>)
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	2201      	movs	r2, #1
 800dd32:	721a      	strb	r2, [r3, #8]
            TimerSetTimeout( TimerListHead );
 800dd34:	4b04      	ldr	r3, [pc, #16]	@ (800dd48 <TimerIrqHandler+0xac>)
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	4618      	mov	r0, r3
 800dd3a:	f000 f8df 	bl	800defc <TimerSetTimeout>
 800dd3e:	e000      	b.n	800dd42 <TimerIrqHandler+0xa6>
    	return;
 800dd40:	bf00      	nop
        }
    }
}
 800dd42:	3708      	adds	r7, #8
 800dd44:	46bd      	mov	sp, r7
 800dd46:	bd80      	pop	{r7, pc}
 800dd48:	2000054c 	.word	0x2000054c

0800dd4c <TimerStop>:

void TimerStop( TimerEvent_t *obj )
{
 800dd4c:	b580      	push	{r7, lr}
 800dd4e:	b086      	sub	sp, #24
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 800dd54:	b672      	cpsid	i
}
 800dd56:	bf00      	nop
    __disable_irq( );

    uint32_t elapsedTime = 0;
 800dd58:	2300      	movs	r3, #0
 800dd5a:	617b      	str	r3, [r7, #20]
    uint32_t remainingTime = 0;
 800dd5c:	2300      	movs	r3, #0
 800dd5e:	60bb      	str	r3, [r7, #8]

    TimerEvent_t* prev = TimerListHead;
 800dd60:	4b49      	ldr	r3, [pc, #292]	@ (800de88 <TimerStop+0x13c>)
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	613b      	str	r3, [r7, #16]
    TimerEvent_t* cur = TimerListHead;
 800dd66:	4b48      	ldr	r3, [pc, #288]	@ (800de88 <TimerStop+0x13c>)
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	60fb      	str	r3, [r7, #12]

    // List is empty or the Obj to stop does not exist
    if( ( TimerListHead == NULL ) || ( obj == NULL ) )
 800dd6c:	4b46      	ldr	r3, [pc, #280]	@ (800de88 <TimerStop+0x13c>)
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d002      	beq.n	800dd7a <TimerStop+0x2e>
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d102      	bne.n	800dd80 <TimerStop+0x34>
  __ASM volatile ("cpsie i" : : : "memory");
 800dd7a:	b662      	cpsie	i
}
 800dd7c:	bf00      	nop
    {
        __enable_irq( );
        return;
 800dd7e:	e080      	b.n	800de82 <TimerStop+0x136>
    }

    if( TimerListHead == obj ) // Stop the Head
 800dd80:	4b41      	ldr	r3, [pc, #260]	@ (800de88 <TimerStop+0x13c>)
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	687a      	ldr	r2, [r7, #4]
 800dd86:	429a      	cmp	r2, r3
 800dd88:	d152      	bne.n	800de30 <TimerStop+0xe4>
    {
        if( TimerListHead->IsRunning == true ) // The head is already running
 800dd8a:	4b3f      	ldr	r3, [pc, #252]	@ (800de88 <TimerStop+0x13c>)
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	7a1b      	ldrb	r3, [r3, #8]
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d033      	beq.n	800ddfc <TimerStop+0xb0>
        {
            elapsedTime = TimerGetValue( );
 800dd94:	f000 f8aa 	bl	800deec <TimerGetValue>
 800dd98:	6178      	str	r0, [r7, #20]
            if( elapsedTime > obj->Timestamp )
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	697a      	ldr	r2, [r7, #20]
 800dda0:	429a      	cmp	r2, r3
 800dda2:	d902      	bls.n	800ddaa <TimerStop+0x5e>
            {
                elapsedTime = obj->Timestamp;
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	617b      	str	r3, [r7, #20]
            }

            remainingTime = obj->Timestamp - elapsedTime;
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	681a      	ldr	r2, [r3, #0]
 800ddae:	697b      	ldr	r3, [r7, #20]
 800ddb0:	1ad3      	subs	r3, r2, r3
 800ddb2:	60bb      	str	r3, [r7, #8]

            if( TimerListHead->Next != NULL )
 800ddb4:	4b34      	ldr	r3, [pc, #208]	@ (800de88 <TimerStop+0x13c>)
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	691b      	ldr	r3, [r3, #16]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d01a      	beq.n	800ddf4 <TimerStop+0xa8>
            {
                TimerListHead->IsRunning = false;
 800ddbe:	4b32      	ldr	r3, [pc, #200]	@ (800de88 <TimerStop+0x13c>)
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	2200      	movs	r2, #0
 800ddc4:	721a      	strb	r2, [r3, #8]
                TimerListHead = TimerListHead->Next;
 800ddc6:	4b30      	ldr	r3, [pc, #192]	@ (800de88 <TimerStop+0x13c>)
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	691b      	ldr	r3, [r3, #16]
 800ddcc:	4a2e      	ldr	r2, [pc, #184]	@ (800de88 <TimerStop+0x13c>)
 800ddce:	6013      	str	r3, [r2, #0]
                TimerListHead->Timestamp += remainingTime;
 800ddd0:	4b2d      	ldr	r3, [pc, #180]	@ (800de88 <TimerStop+0x13c>)
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	6819      	ldr	r1, [r3, #0]
 800ddd6:	4b2c      	ldr	r3, [pc, #176]	@ (800de88 <TimerStop+0x13c>)
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	68ba      	ldr	r2, [r7, #8]
 800dddc:	440a      	add	r2, r1
 800ddde:	601a      	str	r2, [r3, #0]
                TimerListHead->IsRunning = true;
 800dde0:	4b29      	ldr	r3, [pc, #164]	@ (800de88 <TimerStop+0x13c>)
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	2201      	movs	r2, #1
 800dde6:	721a      	strb	r2, [r3, #8]
                TimerSetTimeout( TimerListHead );
 800dde8:	4b27      	ldr	r3, [pc, #156]	@ (800de88 <TimerStop+0x13c>)
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	4618      	mov	r0, r3
 800ddee:	f000 f885 	bl	800defc <TimerSetTimeout>
 800ddf2:	e044      	b.n	800de7e <TimerStop+0x132>
            }
            else
            {
                TimerListHead = NULL;
 800ddf4:	4b24      	ldr	r3, [pc, #144]	@ (800de88 <TimerStop+0x13c>)
 800ddf6:	2200      	movs	r2, #0
 800ddf8:	601a      	str	r2, [r3, #0]
 800ddfa:	e040      	b.n	800de7e <TimerStop+0x132>
            }
        }
        else // Stop the head before it is started
        {
            if( TimerListHead->Next != NULL )
 800ddfc:	4b22      	ldr	r3, [pc, #136]	@ (800de88 <TimerStop+0x13c>)
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	691b      	ldr	r3, [r3, #16]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d010      	beq.n	800de28 <TimerStop+0xdc>
            {
                remainingTime = obj->Timestamp;
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	60bb      	str	r3, [r7, #8]
                TimerListHead = TimerListHead->Next;
 800de0c:	4b1e      	ldr	r3, [pc, #120]	@ (800de88 <TimerStop+0x13c>)
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	691b      	ldr	r3, [r3, #16]
 800de12:	4a1d      	ldr	r2, [pc, #116]	@ (800de88 <TimerStop+0x13c>)
 800de14:	6013      	str	r3, [r2, #0]
                TimerListHead->Timestamp += remainingTime;
 800de16:	4b1c      	ldr	r3, [pc, #112]	@ (800de88 <TimerStop+0x13c>)
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	6819      	ldr	r1, [r3, #0]
 800de1c:	4b1a      	ldr	r3, [pc, #104]	@ (800de88 <TimerStop+0x13c>)
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	68ba      	ldr	r2, [r7, #8]
 800de22:	440a      	add	r2, r1
 800de24:	601a      	str	r2, [r3, #0]
 800de26:	e02a      	b.n	800de7e <TimerStop+0x132>
            }
            else
            {
                TimerListHead = NULL;
 800de28:	4b17      	ldr	r3, [pc, #92]	@ (800de88 <TimerStop+0x13c>)
 800de2a:	2200      	movs	r2, #0
 800de2c:	601a      	str	r2, [r3, #0]
 800de2e:	e026      	b.n	800de7e <TimerStop+0x132>
            }
        }
    }
    else // Stop an object within the list
    {
        remainingTime = obj->Timestamp;
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	60bb      	str	r3, [r7, #8]

        while( cur != NULL )
 800de36:	e01f      	b.n	800de78 <TimerStop+0x12c>
        {
            if( cur == obj )
 800de38:	68fa      	ldr	r2, [r7, #12]
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	429a      	cmp	r2, r3
 800de3e:	d116      	bne.n	800de6e <TimerStop+0x122>
            {
                if( cur->Next != NULL )
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	691b      	ldr	r3, [r3, #16]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d00c      	beq.n	800de62 <TimerStop+0x116>
                {
                    cur = cur->Next;
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	691b      	ldr	r3, [r3, #16]
 800de4c:	60fb      	str	r3, [r7, #12]
                    prev->Next = cur;
 800de4e:	693b      	ldr	r3, [r7, #16]
 800de50:	68fa      	ldr	r2, [r7, #12]
 800de52:	611a      	str	r2, [r3, #16]
                    cur->Timestamp += remainingTime;
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	681a      	ldr	r2, [r3, #0]
 800de58:	68bb      	ldr	r3, [r7, #8]
 800de5a:	441a      	add	r2, r3
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	601a      	str	r2, [r3, #0]
                else
                {
                    cur = NULL;
                    prev->Next = cur;
                }
                break;
 800de60:	e00d      	b.n	800de7e <TimerStop+0x132>
                    cur = NULL;
 800de62:	2300      	movs	r3, #0
 800de64:	60fb      	str	r3, [r7, #12]
                    prev->Next = cur;
 800de66:	693b      	ldr	r3, [r7, #16]
 800de68:	68fa      	ldr	r2, [r7, #12]
 800de6a:	611a      	str	r2, [r3, #16]
                break;
 800de6c:	e007      	b.n	800de7e <TimerStop+0x132>
            }
            else
            {
                prev = cur;
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	613b      	str	r3, [r7, #16]
                cur = cur->Next;
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	691b      	ldr	r3, [r3, #16]
 800de76:	60fb      	str	r3, [r7, #12]
        while( cur != NULL )
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d1dc      	bne.n	800de38 <TimerStop+0xec>
  __ASM volatile ("cpsie i" : : : "memory");
 800de7e:	b662      	cpsie	i
}
 800de80:	bf00      	nop
            }
        }
    }
    __enable_irq( );
}
 800de82:	3718      	adds	r7, #24
 800de84:	46bd      	mov	sp, r7
 800de86:	bd80      	pop	{r7, pc}
 800de88:	2000054c 	.word	0x2000054c

0800de8c <TimerExists>:

static bool TimerExists( TimerEvent_t *obj )
{
 800de8c:	b480      	push	{r7}
 800de8e:	b085      	sub	sp, #20
 800de90:	af00      	add	r7, sp, #0
 800de92:	6078      	str	r0, [r7, #4]
    TimerEvent_t* cur = TimerListHead;
 800de94:	4b0b      	ldr	r3, [pc, #44]	@ (800dec4 <TimerExists+0x38>)
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	60fb      	str	r3, [r7, #12]

    while( cur != NULL )
 800de9a:	e008      	b.n	800deae <TimerExists+0x22>
    {
        if( cur == obj )
 800de9c:	68fa      	ldr	r2, [r7, #12]
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	429a      	cmp	r2, r3
 800dea2:	d101      	bne.n	800dea8 <TimerExists+0x1c>
        {
            return true;
 800dea4:	2301      	movs	r3, #1
 800dea6:	e006      	b.n	800deb6 <TimerExists+0x2a>
        }
        cur = cur->Next;
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	691b      	ldr	r3, [r3, #16]
 800deac:	60fb      	str	r3, [r7, #12]
    while( cur != NULL )
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d1f3      	bne.n	800de9c <TimerExists+0x10>
    }
    return false;
 800deb4:	2300      	movs	r3, #0
}
 800deb6:	4618      	mov	r0, r3
 800deb8:	3714      	adds	r7, #20
 800deba:	46bd      	mov	sp, r7
 800debc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec0:	4770      	bx	lr
 800dec2:	bf00      	nop
 800dec4:	2000054c 	.word	0x2000054c

0800dec8 <TimerSetValue>:
    TimerStop( obj );
    TimerStart( obj );
}

void TimerSetValue( TimerEvent_t *obj, uint32_t value )
{
 800dec8:	b580      	push	{r7, lr}
 800deca:	b082      	sub	sp, #8
 800decc:	af00      	add	r7, sp, #0
 800dece:	6078      	str	r0, [r7, #4]
 800ded0:	6039      	str	r1, [r7, #0]
    TimerStop( obj );
 800ded2:	6878      	ldr	r0, [r7, #4]
 800ded4:	f7ff ff3a 	bl	800dd4c <TimerStop>
    obj->Timestamp = value;
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	683a      	ldr	r2, [r7, #0]
 800dedc:	601a      	str	r2, [r3, #0]
    obj->ReloadValue = value;
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	683a      	ldr	r2, [r7, #0]
 800dee2:	605a      	str	r2, [r3, #4]
}
 800dee4:	bf00      	nop
 800dee6:	3708      	adds	r7, #8
 800dee8:	46bd      	mov	sp, r7
 800deea:	bd80      	pop	{r7, pc}

0800deec <TimerGetValue>:

TimerTime_t TimerGetValue( void )
{
 800deec:	b580      	push	{r7, lr}
 800deee:	af00      	add	r7, sp, #0
    return RtcGetElapsedAlarmTime( );
 800def0:	f7fe ff82 	bl	800cdf8 <RtcGetElapsedAlarmTime>
 800def4:	4603      	mov	r3, r0
}
 800def6:	4618      	mov	r0, r3
 800def8:	bd80      	pop	{r7, pc}
	...

0800defc <TimerSetTimeout>:
{
    return RtcComputeFutureEventTime( eventInFuture );
}

static void TimerSetTimeout( TimerEvent_t *obj )
{
 800defc:	b580      	push	{r7, lr}
 800defe:	b082      	sub	sp, #8
 800df00:	af00      	add	r7, sp, #0
 800df02:	6078      	str	r0, [r7, #4]
    HasLoopedThroughMain = 0;
 800df04:	4b09      	ldr	r3, [pc, #36]	@ (800df2c <TimerSetTimeout+0x30>)
 800df06:	2200      	movs	r2, #0
 800df08:	701a      	strb	r2, [r3, #0]
    obj->Timestamp = RtcGetAdjustedTimeoutValue( obj->Timestamp ); 
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	4618      	mov	r0, r3
 800df10:	f7fe ff3a 	bl	800cd88 <RtcGetAdjustedTimeoutValue>
 800df14:	4602      	mov	r2, r0
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	601a      	str	r2, [r3, #0]
    RtcSetTimeout( obj->Timestamp );
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	4618      	mov	r0, r3
 800df20:	f7fe ff26 	bl	800cd70 <RtcSetTimeout>
}
 800df24:	bf00      	nop
 800df26:	3708      	adds	r7, #8
 800df28:	46bd      	mov	sp, r7
 800df2a:	bd80      	pop	{r7, pc}
 800df2c:	20000548 	.word	0x20000548

0800df30 <memcpy1>:
{
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
}

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 800df30:	b480      	push	{r7}
 800df32:	b085      	sub	sp, #20
 800df34:	af00      	add	r7, sp, #0
 800df36:	60f8      	str	r0, [r7, #12]
 800df38:	60b9      	str	r1, [r7, #8]
 800df3a:	4613      	mov	r3, r2
 800df3c:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 800df3e:	e007      	b.n	800df50 <memcpy1+0x20>
    {
        *dst++ = *src++;
 800df40:	68ba      	ldr	r2, [r7, #8]
 800df42:	1c53      	adds	r3, r2, #1
 800df44:	60bb      	str	r3, [r7, #8]
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	1c59      	adds	r1, r3, #1
 800df4a:	60f9      	str	r1, [r7, #12]
 800df4c:	7812      	ldrb	r2, [r2, #0]
 800df4e:	701a      	strb	r2, [r3, #0]
    while( size-- )
 800df50:	88fb      	ldrh	r3, [r7, #6]
 800df52:	1e5a      	subs	r2, r3, #1
 800df54:	80fa      	strh	r2, [r7, #6]
 800df56:	2b00      	cmp	r3, #0
 800df58:	d1f2      	bne.n	800df40 <memcpy1+0x10>
    }
}
 800df5a:	bf00      	nop
 800df5c:	bf00      	nop
 800df5e:	3714      	adds	r7, #20
 800df60:	46bd      	mov	sp, r7
 800df62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df66:	4770      	bx	lr

0800df68 <SX1276Init>:
/*
 * Radio driver functions implementation
 */

void SX1276Init( RadioEvents_t *events )
{
 800df68:	b580      	push	{r7, lr}
 800df6a:	b084      	sub	sp, #16
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
    uint8_t i;

    RadioEvents = events;
 800df70:	4a24      	ldr	r2, [pc, #144]	@ (800e004 <SX1276Init+0x9c>)
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	6013      	str	r3, [r2, #0]

    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 800df76:	4924      	ldr	r1, [pc, #144]	@ (800e008 <SX1276Init+0xa0>)
 800df78:	4824      	ldr	r0, [pc, #144]	@ (800e00c <SX1276Init+0xa4>)
 800df7a:	f7ff fd84 	bl	800da86 <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 800df7e:	4922      	ldr	r1, [pc, #136]	@ (800e008 <SX1276Init+0xa0>)
 800df80:	4823      	ldr	r0, [pc, #140]	@ (800e010 <SX1276Init+0xa8>)
 800df82:	f7ff fd80 	bl	800da86 <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 800df86:	4920      	ldr	r1, [pc, #128]	@ (800e008 <SX1276Init+0xa0>)
 800df88:	4822      	ldr	r0, [pc, #136]	@ (800e014 <SX1276Init+0xac>)
 800df8a:	f7ff fd7c 	bl	800da86 <TimerInit>

    SX1276Reset( );
 800df8e:	f001 fb75 	bl	800f67c <SX1276Reset>

    RxChainCalibration( );
 800df92:	f000 f8e5 	bl	800e160 <RxChainCalibration>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 800df96:	2000      	movs	r0, #0
 800df98:	f001 fb92 	bl	800f6c0 <SX1276SetOpMode>

    SX1276IoIrqInit( DioIrq );
 800df9c:	481e      	ldr	r0, [pc, #120]	@ (800e018 <SX1276Init+0xb0>)
 800df9e:	f7ff fc9b 	bl	800d8d8 <SX1276IoIrqInit>

    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800dfa2:	2300      	movs	r3, #0
 800dfa4:	73fb      	strb	r3, [r7, #15]
 800dfa6:	e01f      	b.n	800dfe8 <SX1276Init+0x80>
    {
        SX1276SetModem( RadioRegsInit[i].Modem );
 800dfa8:	7bfa      	ldrb	r2, [r7, #15]
 800dfaa:	491c      	ldr	r1, [pc, #112]	@ (800e01c <SX1276Init+0xb4>)
 800dfac:	4613      	mov	r3, r2
 800dfae:	005b      	lsls	r3, r3, #1
 800dfb0:	4413      	add	r3, r2
 800dfb2:	440b      	add	r3, r1
 800dfb4:	781b      	ldrb	r3, [r3, #0]
 800dfb6:	4618      	mov	r0, r3
 800dfb8:	f001 fbb0 	bl	800f71c <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 800dfbc:	7bfa      	ldrb	r2, [r7, #15]
 800dfbe:	4917      	ldr	r1, [pc, #92]	@ (800e01c <SX1276Init+0xb4>)
 800dfc0:	4613      	mov	r3, r2
 800dfc2:	005b      	lsls	r3, r3, #1
 800dfc4:	4413      	add	r3, r2
 800dfc6:	440b      	add	r3, r1
 800dfc8:	3301      	adds	r3, #1
 800dfca:	7818      	ldrb	r0, [r3, #0]
 800dfcc:	7bfa      	ldrb	r2, [r7, #15]
 800dfce:	4913      	ldr	r1, [pc, #76]	@ (800e01c <SX1276Init+0xb4>)
 800dfd0:	4613      	mov	r3, r2
 800dfd2:	005b      	lsls	r3, r3, #1
 800dfd4:	4413      	add	r3, r2
 800dfd6:	440b      	add	r3, r1
 800dfd8:	3302      	adds	r3, #2
 800dfda:	781b      	ldrb	r3, [r3, #0]
 800dfdc:	4619      	mov	r1, r3
 800dfde:	f001 fbdf 	bl	800f7a0 <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800dfe2:	7bfb      	ldrb	r3, [r7, #15]
 800dfe4:	3301      	adds	r3, #1
 800dfe6:	73fb      	strb	r3, [r7, #15]
 800dfe8:	7bfb      	ldrb	r3, [r7, #15]
 800dfea:	2b10      	cmp	r3, #16
 800dfec:	d9dc      	bls.n	800dfa8 <SX1276Init+0x40>
    }

    SX1276SetModem( MODEM_FSK );
 800dfee:	2000      	movs	r0, #0
 800dff0:	f001 fb94 	bl	800f71c <SX1276SetModem>

    SX1276.Settings.State = RF_IDLE;
 800dff4:	4b0a      	ldr	r3, [pc, #40]	@ (800e020 <SX1276Init+0xb8>)
 800dff6:	2200      	movs	r2, #0
 800dff8:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
}
 800dffc:	bf00      	nop
 800dffe:	3710      	adds	r7, #16
 800e000:	46bd      	mov	sp, r7
 800e002:	bd80      	pop	{r7, pc}
 800e004:	20000550 	.word	0x20000550
 800e008:	0800f951 	.word	0x0800f951
 800e00c:	200007c4 	.word	0x200007c4
 800e010:	200007d8 	.word	0x200007d8
 800e014:	200007ec 	.word	0x200007ec
 800e018:	20000010 	.word	0x20000010
 800e01c:	0801650c 	.word	0x0801650c
 800e020:	20000654 	.word	0x20000654

0800e024 <SX1276GetStatus>:

RadioState_t SX1276GetStatus( void )
{
 800e024:	b480      	push	{r7}
 800e026:	af00      	add	r7, sp, #0
    return SX1276.Settings.State;
 800e028:	4b03      	ldr	r3, [pc, #12]	@ (800e038 <SX1276GetStatus+0x14>)
 800e02a:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
}
 800e02e:	4618      	mov	r0, r3
 800e030:	46bd      	mov	sp, r7
 800e032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e036:	4770      	bx	lr
 800e038:	20000654 	.word	0x20000654
 800e03c:	00000000 	.word	0x00000000

0800e040 <SX1276SetChannel>:

void SX1276SetChannel( uint32_t freq )
{
 800e040:	b580      	push	{r7, lr}
 800e042:	b082      	sub	sp, #8
 800e044:	af00      	add	r7, sp, #0
 800e046:	6078      	str	r0, [r7, #4]
    SX1276.Settings.Channel = freq;
 800e048:	4a17      	ldr	r2, [pc, #92]	@ (800e0a8 <SX1276SetChannel+0x68>)
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	f8c2 3118 	str.w	r3, [r2, #280]	@ 0x118
    freq = ( uint32_t )( ( double )freq / ( double )FREQ_STEP );
 800e050:	6878      	ldr	r0, [r7, #4]
 800e052:	f7f3 ffe9 	bl	8002028 <__aeabi_ui2d>
 800e056:	a312      	add	r3, pc, #72	@ (adr r3, 800e0a0 <SX1276SetChannel+0x60>)
 800e058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e05c:	f7f4 f988 	bl	8002370 <__aeabi_ddiv>
 800e060:	4602      	mov	r2, r0
 800e062:	460b      	mov	r3, r1
 800e064:	4610      	mov	r0, r2
 800e066:	4619      	mov	r1, r3
 800e068:	f7f4 fb30 	bl	80026cc <__aeabi_d2uiz>
 800e06c:	4603      	mov	r3, r0
 800e06e:	607b      	str	r3, [r7, #4]
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( freq >> 16 ) & 0xFF ) );
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	0c1b      	lsrs	r3, r3, #16
 800e074:	b2db      	uxtb	r3, r3
 800e076:	4619      	mov	r1, r3
 800e078:	2006      	movs	r0, #6
 800e07a:	f001 fb91 	bl	800f7a0 <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( freq >> 8 ) & 0xFF ) );
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	0a1b      	lsrs	r3, r3, #8
 800e082:	b2db      	uxtb	r3, r3
 800e084:	4619      	mov	r1, r3
 800e086:	2007      	movs	r0, #7
 800e088:	f001 fb8a 	bl	800f7a0 <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( freq & 0xFF ) );
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	b2db      	uxtb	r3, r3
 800e090:	4619      	mov	r1, r3
 800e092:	2008      	movs	r0, #8
 800e094:	f001 fb84 	bl	800f7a0 <SX1276Write>
}
 800e098:	bf00      	nop
 800e09a:	3708      	adds	r7, #8
 800e09c:	46bd      	mov	sp, r7
 800e09e:	bd80      	pop	{r7, pc}
 800e0a0:	00000000 	.word	0x00000000
 800e0a4:	404e8480 	.word	0x404e8480
 800e0a8:	20000654 	.word	0x20000654

0800e0ac <SX1276IsChannelFree>:

bool SX1276IsChannelFree( RadioModems_t modem, uint32_t freq, int16_t rssiThresh )
{
 800e0ac:	b580      	push	{r7, lr}
 800e0ae:	b084      	sub	sp, #16
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	4603      	mov	r3, r0
 800e0b4:	6039      	str	r1, [r7, #0]
 800e0b6:	71fb      	strb	r3, [r7, #7]
 800e0b8:	4613      	mov	r3, r2
 800e0ba:	80bb      	strh	r3, [r7, #4]
    int16_t rssi = 0;
 800e0bc:	2300      	movs	r3, #0
 800e0be:	81fb      	strh	r3, [r7, #14]

    SX1276SetModem( modem );
 800e0c0:	79fb      	ldrb	r3, [r7, #7]
 800e0c2:	4618      	mov	r0, r3
 800e0c4:	f001 fb2a 	bl	800f71c <SX1276SetModem>

    SX1276SetChannel( freq );
 800e0c8:	6838      	ldr	r0, [r7, #0]
 800e0ca:	f7ff ffb9 	bl	800e040 <SX1276SetChannel>

    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 800e0ce:	2005      	movs	r0, #5
 800e0d0:	f001 faf6 	bl	800f6c0 <SX1276SetOpMode>

    DelayMs( 1 );
 800e0d4:	2001      	movs	r0, #1
 800e0d6:	f7fe fa99 	bl	800c60c <DelayMs>

    rssi = SX1276ReadRssi( modem );
 800e0da:	79fb      	ldrb	r3, [r7, #7]
 800e0dc:	4618      	mov	r0, r3
 800e0de:	f001 fa91 	bl	800f604 <SX1276ReadRssi>
 800e0e2:	4603      	mov	r3, r0
 800e0e4:	81fb      	strh	r3, [r7, #14]

    SX1276SetSleep( );
 800e0e6:	f000 ff6b 	bl	800efc0 <SX1276SetSleep>

    if( rssi > rssiThresh )
 800e0ea:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800e0ee:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800e0f2:	429a      	cmp	r2, r3
 800e0f4:	dd01      	ble.n	800e0fa <SX1276IsChannelFree+0x4e>
    {
        return false;
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	e000      	b.n	800e0fc <SX1276IsChannelFree+0x50>
    }
    return true;
 800e0fa:	2301      	movs	r3, #1
}
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	3710      	adds	r7, #16
 800e100:	46bd      	mov	sp, r7
 800e102:	bd80      	pop	{r7, pc}

0800e104 <SX1276Random>:

uint32_t SX1276Random( void )
{
 800e104:	b580      	push	{r7, lr}
 800e106:	b082      	sub	sp, #8
 800e108:	af00      	add	r7, sp, #0
    uint8_t i;
    uint32_t rnd = 0;
 800e10a:	2300      	movs	r3, #0
 800e10c:	603b      	str	r3, [r7, #0]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    SX1276SetModem( MODEM_LORA );
 800e10e:	2001      	movs	r0, #1
 800e110:	f001 fb04 	bl	800f71c <SX1276SetModem>

    // Disable LoRa modem interrupts
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800e114:	21ff      	movs	r1, #255	@ 0xff
 800e116:	2011      	movs	r0, #17
 800e118:	f001 fb42 	bl	800f7a0 <SX1276Write>
                  RFLR_IRQFLAGS_CADDONE |
                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                  RFLR_IRQFLAGS_CADDETECTED );

    // Set radio in continuous reception
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 800e11c:	2005      	movs	r0, #5
 800e11e:	f001 facf 	bl	800f6c0 <SX1276SetOpMode>

    for( i = 0; i < 32; i++ )
 800e122:	2300      	movs	r3, #0
 800e124:	71fb      	strb	r3, [r7, #7]
 800e126:	e011      	b.n	800e14c <SX1276Random+0x48>
    {
        DelayMs( 1 );
 800e128:	2001      	movs	r0, #1
 800e12a:	f7fe fa6f 	bl	800c60c <DelayMs>
        // Unfiltered RSSI value reading. Only takes the LSB value
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 800e12e:	202c      	movs	r0, #44	@ 0x2c
 800e130:	f001 fb48 	bl	800f7c4 <SX1276Read>
 800e134:	4603      	mov	r3, r0
 800e136:	f003 0201 	and.w	r2, r3, #1
 800e13a:	79fb      	ldrb	r3, [r7, #7]
 800e13c:	fa02 f303 	lsl.w	r3, r2, r3
 800e140:	683a      	ldr	r2, [r7, #0]
 800e142:	4313      	orrs	r3, r2
 800e144:	603b      	str	r3, [r7, #0]
    for( i = 0; i < 32; i++ )
 800e146:	79fb      	ldrb	r3, [r7, #7]
 800e148:	3301      	adds	r3, #1
 800e14a:	71fb      	strb	r3, [r7, #7]
 800e14c:	79fb      	ldrb	r3, [r7, #7]
 800e14e:	2b1f      	cmp	r3, #31
 800e150:	d9ea      	bls.n	800e128 <SX1276Random+0x24>
    }

    SX1276SetSleep( );
 800e152:	f000 ff35 	bl	800efc0 <SX1276SetSleep>

    return rnd;
 800e156:	683b      	ldr	r3, [r7, #0]
}
 800e158:	4618      	mov	r0, r3
 800e15a:	3708      	adds	r7, #8
 800e15c:	46bd      	mov	sp, r7
 800e15e:	bd80      	pop	{r7, pc}

0800e160 <RxChainCalibration>:
 * Performs the Rx chain calibration for LF and HF bands
 * \remark Must be called just after the reset so all registers are at their
 *         default values
 */
static void RxChainCalibration( void )
{
 800e160:	b590      	push	{r4, r7, lr}
 800e162:	b083      	sub	sp, #12
 800e164:	af00      	add	r7, sp, #0
    uint8_t regPaConfigInitVal;
    uint32_t initialFreq;

    // Save context
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 800e166:	2009      	movs	r0, #9
 800e168:	f001 fb2c 	bl	800f7c4 <SX1276Read>
 800e16c:	4603      	mov	r3, r0
 800e16e:	71fb      	strb	r3, [r7, #7]
    initialFreq = ( double )( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800e170:	2006      	movs	r0, #6
 800e172:	f001 fb27 	bl	800f7c4 <SX1276Read>
 800e176:	4603      	mov	r3, r0
 800e178:	041c      	lsls	r4, r3, #16
                              ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 800e17a:	2007      	movs	r0, #7
 800e17c:	f001 fb22 	bl	800f7c4 <SX1276Read>
 800e180:	4603      	mov	r3, r0
 800e182:	021b      	lsls	r3, r3, #8
    initialFreq = ( double )( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800e184:	431c      	orrs	r4, r3
                              ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) ) * ( double )FREQ_STEP;
 800e186:	2008      	movs	r0, #8
 800e188:	f001 fb1c 	bl	800f7c4 <SX1276Read>
 800e18c:	4603      	mov	r3, r0
                              ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 800e18e:	4323      	orrs	r3, r4
    initialFreq = ( double )( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800e190:	4618      	mov	r0, r3
 800e192:	f7f3 ff49 	bl	8002028 <__aeabi_ui2d>
                              ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) ) * ( double )FREQ_STEP;
 800e196:	a325      	add	r3, pc, #148	@ (adr r3, 800e22c <RxChainCalibration+0xcc>)
 800e198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e19c:	f7f3 ffbe 	bl	800211c <__aeabi_dmul>
 800e1a0:	4602      	mov	r2, r0
 800e1a2:	460b      	mov	r3, r1
    initialFreq = ( double )( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800e1a4:	4610      	mov	r0, r2
 800e1a6:	4619      	mov	r1, r3
 800e1a8:	f7f4 fa90 	bl	80026cc <__aeabi_d2uiz>
 800e1ac:	4603      	mov	r3, r0
 800e1ae:	603b      	str	r3, [r7, #0]

    // Cut the PA just in case, RFO output, power = -1 dBm
    SX1276Write( REG_PACONFIG, 0x00 );
 800e1b0:	2100      	movs	r1, #0
 800e1b2:	2009      	movs	r0, #9
 800e1b4:	f001 faf4 	bl	800f7a0 <SX1276Write>

    // Launch Rx chain calibration for LF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 800e1b8:	203b      	movs	r0, #59	@ 0x3b
 800e1ba:	f001 fb03 	bl	800f7c4 <SX1276Read>
 800e1be:	4603      	mov	r3, r0
 800e1c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e1c4:	b2db      	uxtb	r3, r3
 800e1c6:	4619      	mov	r1, r3
 800e1c8:	203b      	movs	r0, #59	@ 0x3b
 800e1ca:	f001 fae9 	bl	800f7a0 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 800e1ce:	bf00      	nop
 800e1d0:	203b      	movs	r0, #59	@ 0x3b
 800e1d2:	f001 faf7 	bl	800f7c4 <SX1276Read>
 800e1d6:	4603      	mov	r3, r0
 800e1d8:	f003 0320 	and.w	r3, r3, #32
 800e1dc:	2b20      	cmp	r3, #32
 800e1de:	d0f7      	beq.n	800e1d0 <RxChainCalibration+0x70>
    {
    }

    // Sets a Frequency in HF band
    SX1276SetChannel( 868000000 );
 800e1e0:	4811      	ldr	r0, [pc, #68]	@ (800e228 <RxChainCalibration+0xc8>)
 800e1e2:	f7ff ff2d 	bl	800e040 <SX1276SetChannel>

    // Launch Rx chain calibration for HF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 800e1e6:	203b      	movs	r0, #59	@ 0x3b
 800e1e8:	f001 faec 	bl	800f7c4 <SX1276Read>
 800e1ec:	4603      	mov	r3, r0
 800e1ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e1f2:	b2db      	uxtb	r3, r3
 800e1f4:	4619      	mov	r1, r3
 800e1f6:	203b      	movs	r0, #59	@ 0x3b
 800e1f8:	f001 fad2 	bl	800f7a0 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 800e1fc:	bf00      	nop
 800e1fe:	203b      	movs	r0, #59	@ 0x3b
 800e200:	f001 fae0 	bl	800f7c4 <SX1276Read>
 800e204:	4603      	mov	r3, r0
 800e206:	f003 0320 	and.w	r3, r3, #32
 800e20a:	2b20      	cmp	r3, #32
 800e20c:	d0f7      	beq.n	800e1fe <RxChainCalibration+0x9e>
    {
    }

    // Restore context
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 800e20e:	79fb      	ldrb	r3, [r7, #7]
 800e210:	4619      	mov	r1, r3
 800e212:	2009      	movs	r0, #9
 800e214:	f001 fac4 	bl	800f7a0 <SX1276Write>
    SX1276SetChannel( initialFreq );
 800e218:	6838      	ldr	r0, [r7, #0]
 800e21a:	f7ff ff11 	bl	800e040 <SX1276SetChannel>
}
 800e21e:	bf00      	nop
 800e220:	370c      	adds	r7, #12
 800e222:	46bd      	mov	sp, r7
 800e224:	bd90      	pop	{r4, r7, pc}
 800e226:	bf00      	nop
 800e228:	33bca100 	.word	0x33bca100
 800e22c:	00000000 	.word	0x00000000
 800e230:	404e8480 	.word	0x404e8480

0800e234 <GetFskBandwidthRegValue>:
 *
 * \param [IN] bandwidth Bandwidth value in Hz
 * \retval regValue Bandwidth register value.
 */
static uint8_t GetFskBandwidthRegValue( uint32_t bandwidth )
{
 800e234:	b480      	push	{r7}
 800e236:	b085      	sub	sp, #20
 800e238:	af00      	add	r7, sp, #0
 800e23a:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 800e23c:	2300      	movs	r3, #0
 800e23e:	73fb      	strb	r3, [r7, #15]
 800e240:	e017      	b.n	800e272 <GetFskBandwidthRegValue+0x3e>
    {
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
 800e242:	7bfb      	ldrb	r3, [r7, #15]
 800e244:	4a10      	ldr	r2, [pc, #64]	@ (800e288 <GetFskBandwidthRegValue+0x54>)
 800e246:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e24a:	687a      	ldr	r2, [r7, #4]
 800e24c:	429a      	cmp	r2, r3
 800e24e:	d30d      	bcc.n	800e26c <GetFskBandwidthRegValue+0x38>
 800e250:	7bfb      	ldrb	r3, [r7, #15]
 800e252:	3301      	adds	r3, #1
 800e254:	4a0c      	ldr	r2, [pc, #48]	@ (800e288 <GetFskBandwidthRegValue+0x54>)
 800e256:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e25a:	687a      	ldr	r2, [r7, #4]
 800e25c:	429a      	cmp	r2, r3
 800e25e:	d205      	bcs.n	800e26c <GetFskBandwidthRegValue+0x38>
        {
            return FskBandwidths[i].RegValue;
 800e260:	7bfb      	ldrb	r3, [r7, #15]
 800e262:	4a09      	ldr	r2, [pc, #36]	@ (800e288 <GetFskBandwidthRegValue+0x54>)
 800e264:	00db      	lsls	r3, r3, #3
 800e266:	4413      	add	r3, r2
 800e268:	791b      	ldrb	r3, [r3, #4]
 800e26a:	e007      	b.n	800e27c <GetFskBandwidthRegValue+0x48>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 800e26c:	7bfb      	ldrb	r3, [r7, #15]
 800e26e:	3301      	adds	r3, #1
 800e270:	73fb      	strb	r3, [r7, #15]
 800e272:	7bfb      	ldrb	r3, [r7, #15]
 800e274:	2b14      	cmp	r3, #20
 800e276:	d9e4      	bls.n	800e242 <GetFskBandwidthRegValue+0xe>
        }
    }
    // ERROR: Value not found
    while( 1 );
 800e278:	bf00      	nop
 800e27a:	e7fd      	b.n	800e278 <GetFskBandwidthRegValue+0x44>
}
 800e27c:	4618      	mov	r0, r3
 800e27e:	3714      	adds	r7, #20
 800e280:	46bd      	mov	sp, r7
 800e282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e286:	4770      	bx	lr
 800e288:	08016540 	.word	0x08016540
 800e28c:	00000000 	.word	0x00000000

0800e290 <SX1276SetRxConfig>:
                         uint32_t bandwidthAfc, uint16_t preambleLen,
                         uint16_t symbTimeout, bool fixLen,
                         uint8_t payloadLen,
                         bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                         bool iqInverted, bool rxContinuous )
{
 800e290:	b580      	push	{r7, lr}
 800e292:	b084      	sub	sp, #16
 800e294:	af00      	add	r7, sp, #0
 800e296:	60b9      	str	r1, [r7, #8]
 800e298:	607a      	str	r2, [r7, #4]
 800e29a:	461a      	mov	r2, r3
 800e29c:	4603      	mov	r3, r0
 800e29e:	73fb      	strb	r3, [r7, #15]
 800e2a0:	4613      	mov	r3, r2
 800e2a2:	73bb      	strb	r3, [r7, #14]
    SX1276SetModem( modem );
 800e2a4:	7bfb      	ldrb	r3, [r7, #15]
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	f001 fa38 	bl	800f71c <SX1276SetModem>

    switch( modem )
 800e2ac:	7bfb      	ldrb	r3, [r7, #15]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d003      	beq.n	800e2ba <SX1276SetRxConfig+0x2a>
 800e2b2:	2b01      	cmp	r3, #1
 800e2b4:	f000 8095 	beq.w	800e3e2 <SX1276SetRxConfig+0x152>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 800e2b8:	e1c5      	b.n	800e646 <SX1276SetRxConfig+0x3b6>
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 800e2ba:	4a79      	ldr	r2, [pc, #484]	@ (800e4a0 <SX1276SetRxConfig+0x210>)
 800e2bc:	68bb      	ldr	r3, [r7, #8]
 800e2be:	f8c2 3124 	str.w	r3, [r2, #292]	@ 0x124
            SX1276.Settings.Fsk.Datarate = datarate;
 800e2c2:	4a77      	ldr	r2, [pc, #476]	@ (800e4a0 <SX1276SetRxConfig+0x210>)
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 800e2ca:	4a75      	ldr	r2, [pc, #468]	@ (800e4a0 <SX1276SetRxConfig+0x210>)
 800e2cc:	69bb      	ldr	r3, [r7, #24]
 800e2ce:	f8c2 3128 	str.w	r3, [r2, #296]	@ 0x128
            SX1276.Settings.Fsk.FixLen = fixLen;
 800e2d2:	4a73      	ldr	r2, [pc, #460]	@ (800e4a0 <SX1276SetRxConfig+0x210>)
 800e2d4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e2d8:	f882 3132 	strb.w	r3, [r2, #306]	@ 0x132
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 800e2dc:	4a70      	ldr	r2, [pc, #448]	@ (800e4a0 <SX1276SetRxConfig+0x210>)
 800e2de:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e2e2:	f882 3133 	strb.w	r3, [r2, #307]	@ 0x133
            SX1276.Settings.Fsk.CrcOn = crcOn;
 800e2e6:	4a6e      	ldr	r2, [pc, #440]	@ (800e4a0 <SX1276SetRxConfig+0x210>)
 800e2e8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800e2ec:	f882 3134 	strb.w	r3, [r2, #308]	@ 0x134
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 800e2f0:	4a6b      	ldr	r2, [pc, #428]	@ (800e4a0 <SX1276SetRxConfig+0x210>)
 800e2f2:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800e2f6:	f882 3135 	strb.w	r3, [r2, #309]	@ 0x135
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 800e2fa:	4a69      	ldr	r2, [pc, #420]	@ (800e4a0 <SX1276SetRxConfig+0x210>)
 800e2fc:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800e300:	f882 3136 	strb.w	r3, [r2, #310]	@ 0x136
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 800e304:	4a66      	ldr	r2, [pc, #408]	@ (800e4a0 <SX1276SetRxConfig+0x210>)
 800e306:	8bbb      	ldrh	r3, [r7, #28]
 800e308:	f8a2 3130 	strh.w	r3, [r2, #304]	@ 0x130
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 800e30c:	6878      	ldr	r0, [r7, #4]
 800e30e:	f7f3 fe8b 	bl	8002028 <__aeabi_ui2d>
 800e312:	4602      	mov	r2, r0
 800e314:	460b      	mov	r3, r1
 800e316:	a160      	add	r1, pc, #384	@ (adr r1, 800e498 <SX1276SetRxConfig+0x208>)
 800e318:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e31c:	f7f4 f828 	bl	8002370 <__aeabi_ddiv>
 800e320:	4602      	mov	r2, r0
 800e322:	460b      	mov	r3, r1
 800e324:	4610      	mov	r0, r2
 800e326:	4619      	mov	r1, r3
 800e328:	f7f4 f9d0 	bl	80026cc <__aeabi_d2uiz>
 800e32c:	4603      	mov	r3, r0
 800e32e:	b29b      	uxth	r3, r3
 800e330:	607b      	str	r3, [r7, #4]
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	0a1b      	lsrs	r3, r3, #8
 800e336:	b2db      	uxtb	r3, r3
 800e338:	4619      	mov	r1, r3
 800e33a:	2002      	movs	r0, #2
 800e33c:	f001 fa30 	bl	800f7a0 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	b2db      	uxtb	r3, r3
 800e344:	4619      	mov	r1, r3
 800e346:	2003      	movs	r0, #3
 800e348:	f001 fa2a 	bl	800f7a0 <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 800e34c:	68b8      	ldr	r0, [r7, #8]
 800e34e:	f7ff ff71 	bl	800e234 <GetFskBandwidthRegValue>
 800e352:	4603      	mov	r3, r0
 800e354:	4619      	mov	r1, r3
 800e356:	2012      	movs	r0, #18
 800e358:	f001 fa22 	bl	800f7a0 <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 800e35c:	69b8      	ldr	r0, [r7, #24]
 800e35e:	f7ff ff69 	bl	800e234 <GetFskBandwidthRegValue>
 800e362:	4603      	mov	r3, r0
 800e364:	4619      	mov	r1, r3
 800e366:	2013      	movs	r0, #19
 800e368:	f001 fa1a 	bl	800f7a0 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 800e36c:	8bbb      	ldrh	r3, [r7, #28]
 800e36e:	0a1b      	lsrs	r3, r3, #8
 800e370:	b29b      	uxth	r3, r3
 800e372:	b2db      	uxtb	r3, r3
 800e374:	4619      	mov	r1, r3
 800e376:	2025      	movs	r0, #37	@ 0x25
 800e378:	f001 fa12 	bl	800f7a0 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 800e37c:	8bbb      	ldrh	r3, [r7, #28]
 800e37e:	b2db      	uxtb	r3, r3
 800e380:	4619      	mov	r1, r3
 800e382:	2026      	movs	r0, #38	@ 0x26
 800e384:	f001 fa0c 	bl	800f7a0 <SX1276Write>
            if( fixLen == 1 )
 800e388:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d006      	beq.n	800e39e <SX1276SetRxConfig+0x10e>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 800e390:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e394:	4619      	mov	r1, r3
 800e396:	2032      	movs	r0, #50	@ 0x32
 800e398:	f001 fa02 	bl	800f7a0 <SX1276Write>
 800e39c:	e003      	b.n	800e3a6 <SX1276SetRxConfig+0x116>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 800e39e:	21ff      	movs	r1, #255	@ 0xff
 800e3a0:	2032      	movs	r0, #50	@ 0x32
 800e3a2:	f001 f9fd 	bl	800f7a0 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 800e3a6:	2030      	movs	r0, #48	@ 0x30
 800e3a8:	f001 fa0c 	bl	800f7c4 <SX1276Read>
 800e3ac:	4603      	mov	r3, r0
 800e3ae:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 800e3b0:	f003 036f 	and.w	r3, r3, #111	@ 0x6f
 800e3b4:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 800e3b6:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800e3ba:	2a00      	cmp	r2, #0
 800e3bc:	d001      	beq.n	800e3c2 <SX1276SetRxConfig+0x132>
 800e3be:	2200      	movs	r2, #0
 800e3c0:	e001      	b.n	800e3c6 <SX1276SetRxConfig+0x136>
 800e3c2:	f06f 027f 	mvn.w	r2, #127	@ 0x7f
 800e3c6:	4313      	orrs	r3, r2
 800e3c8:	b25a      	sxtb	r2, r3
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 800e3ca:	f997 302c 	ldrsb.w	r3, [r7, #44]	@ 0x2c
 800e3ce:	011b      	lsls	r3, r3, #4
 800e3d0:	b25b      	sxtb	r3, r3
 800e3d2:	4313      	orrs	r3, r2
 800e3d4:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 800e3d6:	b2db      	uxtb	r3, r3
 800e3d8:	4619      	mov	r1, r3
 800e3da:	2030      	movs	r0, #48	@ 0x30
 800e3dc:	f001 f9e0 	bl	800f7a0 <SX1276Write>
        break;
 800e3e0:	e131      	b.n	800e646 <SX1276SetRxConfig+0x3b6>
            if( bandwidth > 2 )
 800e3e2:	68bb      	ldr	r3, [r7, #8]
 800e3e4:	2b02      	cmp	r3, #2
 800e3e6:	d901      	bls.n	800e3ec <SX1276SetRxConfig+0x15c>
                while( 1 );
 800e3e8:	bf00      	nop
 800e3ea:	e7fd      	b.n	800e3e8 <SX1276SetRxConfig+0x158>
            bandwidth += 7;
 800e3ec:	68bb      	ldr	r3, [r7, #8]
 800e3ee:	3307      	adds	r3, #7
 800e3f0:	60bb      	str	r3, [r7, #8]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 800e3f2:	4a2b      	ldr	r2, [pc, #172]	@ (800e4a0 <SX1276SetRxConfig+0x210>)
 800e3f4:	68bb      	ldr	r3, [r7, #8]
 800e3f6:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
            SX1276.Settings.LoRa.Datarate = datarate;
 800e3fa:	4a29      	ldr	r2, [pc, #164]	@ (800e4a0 <SX1276SetRxConfig+0x210>)
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
            SX1276.Settings.LoRa.Coderate = coderate;
 800e402:	4a27      	ldr	r2, [pc, #156]	@ (800e4a0 <SX1276SetRxConfig+0x210>)
 800e404:	7bbb      	ldrb	r3, [r7, #14]
 800e406:	f882 3159 	strb.w	r3, [r2, #345]	@ 0x159
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 800e40a:	4a25      	ldr	r2, [pc, #148]	@ (800e4a0 <SX1276SetRxConfig+0x210>)
 800e40c:	8bbb      	ldrh	r3, [r7, #28]
 800e40e:	f8a2 315a 	strh.w	r3, [r2, #346]	@ 0x15a
            SX1276.Settings.LoRa.FixLen = fixLen;
 800e412:	4a23      	ldr	r2, [pc, #140]	@ (800e4a0 <SX1276SetRxConfig+0x210>)
 800e414:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e418:	f882 315c 	strb.w	r3, [r2, #348]	@ 0x15c
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 800e41c:	4a20      	ldr	r2, [pc, #128]	@ (800e4a0 <SX1276SetRxConfig+0x210>)
 800e41e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e422:	f882 315d 	strb.w	r3, [r2, #349]	@ 0x15d
            SX1276.Settings.LoRa.CrcOn = crcOn;
 800e426:	4a1e      	ldr	r2, [pc, #120]	@ (800e4a0 <SX1276SetRxConfig+0x210>)
 800e428:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800e42c:	f882 315e 	strb.w	r3, [r2, #350]	@ 0x15e
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 800e430:	4a1b      	ldr	r2, [pc, #108]	@ (800e4a0 <SX1276SetRxConfig+0x210>)
 800e432:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800e436:	f882 315f 	strb.w	r3, [r2, #351]	@ 0x15f
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 800e43a:	4a19      	ldr	r2, [pc, #100]	@ (800e4a0 <SX1276SetRxConfig+0x210>)
 800e43c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800e440:	f882 3160 	strb.w	r3, [r2, #352]	@ 0x160
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 800e444:	4a16      	ldr	r2, [pc, #88]	@ (800e4a0 <SX1276SetRxConfig+0x210>)
 800e446:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800e44a:	f882 3161 	strb.w	r3, [r2, #353]	@ 0x161
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 800e44e:	4a14      	ldr	r2, [pc, #80]	@ (800e4a0 <SX1276SetRxConfig+0x210>)
 800e450:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800e454:	f882 3162 	strb.w	r3, [r2, #354]	@ 0x162
            if( datarate > 12 )
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	2b0c      	cmp	r3, #12
 800e45c:	d902      	bls.n	800e464 <SX1276SetRxConfig+0x1d4>
                datarate = 12;
 800e45e:	230c      	movs	r3, #12
 800e460:	607b      	str	r3, [r7, #4]
 800e462:	e004      	b.n	800e46e <SX1276SetRxConfig+0x1de>
            else if( datarate < 6 )
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	2b05      	cmp	r3, #5
 800e468:	d801      	bhi.n	800e46e <SX1276SetRxConfig+0x1de>
                datarate = 6;
 800e46a:	2306      	movs	r3, #6
 800e46c:	607b      	str	r3, [r7, #4]
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800e46e:	68bb      	ldr	r3, [r7, #8]
 800e470:	2b07      	cmp	r3, #7
 800e472:	d105      	bne.n	800e480 <SX1276SetRxConfig+0x1f0>
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	2b0b      	cmp	r3, #11
 800e478:	d008      	beq.n	800e48c <SX1276SetRxConfig+0x1fc>
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	2b0c      	cmp	r3, #12
 800e47e:	d005      	beq.n	800e48c <SX1276SetRxConfig+0x1fc>
 800e480:	68bb      	ldr	r3, [r7, #8]
 800e482:	2b08      	cmp	r3, #8
 800e484:	d10e      	bne.n	800e4a4 <SX1276SetRxConfig+0x214>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	2b0c      	cmp	r3, #12
 800e48a:	d10b      	bne.n	800e4a4 <SX1276SetRxConfig+0x214>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 800e48c:	4b04      	ldr	r3, [pc, #16]	@ (800e4a0 <SX1276SetRxConfig+0x210>)
 800e48e:	2201      	movs	r2, #1
 800e490:	f883 2158 	strb.w	r2, [r3, #344]	@ 0x158
 800e494:	e00a      	b.n	800e4ac <SX1276SetRxConfig+0x21c>
 800e496:	bf00      	nop
 800e498:	00000000 	.word	0x00000000
 800e49c:	417e8480 	.word	0x417e8480
 800e4a0:	20000654 	.word	0x20000654
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 800e4a4:	4b6a      	ldr	r3, [pc, #424]	@ (800e650 <SX1276SetRxConfig+0x3c0>)
 800e4a6:	2200      	movs	r2, #0
 800e4a8:	f883 2158 	strb.w	r2, [r3, #344]	@ 0x158
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 800e4ac:	201d      	movs	r0, #29
 800e4ae:	f001 f989 	bl	800f7c4 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800e4b2:	68bb      	ldr	r3, [r7, #8]
 800e4b4:	b2db      	uxtb	r3, r3
 800e4b6:	011b      	lsls	r3, r3, #4
 800e4b8:	b2da      	uxtb	r2, r3
 800e4ba:	7bbb      	ldrb	r3, [r7, #14]
 800e4bc:	005b      	lsls	r3, r3, #1
 800e4be:	b2db      	uxtb	r3, r3
 800e4c0:	4313      	orrs	r3, r2
 800e4c2:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 800e4c4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800e4c8:	4313      	orrs	r3, r2
 800e4ca:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 800e4cc:	4619      	mov	r1, r3
 800e4ce:	201d      	movs	r0, #29
 800e4d0:	f001 f966 	bl	800f7a0 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 800e4d4:	201e      	movs	r0, #30
 800e4d6:	f001 f975 	bl	800f7c4 <SX1276Read>
 800e4da:	4603      	mov	r3, r0
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 800e4dc:	f003 0308 	and.w	r3, r3, #8
 800e4e0:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	b2db      	uxtb	r3, r3
 800e4e6:	011b      	lsls	r3, r3, #4
 800e4e8:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) |
 800e4ea:	4313      	orrs	r3, r2
 800e4ec:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 800e4ee:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800e4f2:	009b      	lsls	r3, r3, #2
 800e4f4:	b2db      	uxtb	r3, r3
 800e4f6:	4313      	orrs	r3, r2
 800e4f8:	b2da      	uxtb	r2, r3
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 800e4fa:	8c3b      	ldrh	r3, [r7, #32]
 800e4fc:	0a1b      	lsrs	r3, r3, #8
 800e4fe:	b29b      	uxth	r3, r3
 800e500:	b2db      	uxtb	r3, r3
 800e502:	f003 0303 	and.w	r3, r3, #3
 800e506:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 800e508:	4313      	orrs	r3, r2
 800e50a:	b2db      	uxtb	r3, r3
 800e50c:	4619      	mov	r1, r3
 800e50e:	201e      	movs	r0, #30
 800e510:	f001 f946 	bl	800f7a0 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 800e514:	2026      	movs	r0, #38	@ 0x26
 800e516:	f001 f955 	bl	800f7c4 <SX1276Read>
 800e51a:	4603      	mov	r3, r0
 800e51c:	b25b      	sxtb	r3, r3
 800e51e:	f023 0308 	bic.w	r3, r3, #8
 800e522:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 800e524:	4b4a      	ldr	r3, [pc, #296]	@ (800e650 <SX1276SetRxConfig+0x3c0>)
 800e526:	f893 3158 	ldrb.w	r3, [r3, #344]	@ 0x158
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 800e52a:	b25b      	sxtb	r3, r3
 800e52c:	00db      	lsls	r3, r3, #3
 800e52e:	b25b      	sxtb	r3, r3
 800e530:	4313      	orrs	r3, r2
 800e532:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 800e534:	b2db      	uxtb	r3, r3
 800e536:	4619      	mov	r1, r3
 800e538:	2026      	movs	r0, #38	@ 0x26
 800e53a:	f001 f931 	bl	800f7a0 <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 800e53e:	8c3b      	ldrh	r3, [r7, #32]
 800e540:	b2db      	uxtb	r3, r3
 800e542:	4619      	mov	r1, r3
 800e544:	201f      	movs	r0, #31
 800e546:	f001 f92b 	bl	800f7a0 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 800e54a:	8bbb      	ldrh	r3, [r7, #28]
 800e54c:	0a1b      	lsrs	r3, r3, #8
 800e54e:	b29b      	uxth	r3, r3
 800e550:	b2db      	uxtb	r3, r3
 800e552:	4619      	mov	r1, r3
 800e554:	2020      	movs	r0, #32
 800e556:	f001 f923 	bl	800f7a0 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 800e55a:	8bbb      	ldrh	r3, [r7, #28]
 800e55c:	b2db      	uxtb	r3, r3
 800e55e:	4619      	mov	r1, r3
 800e560:	2021      	movs	r0, #33	@ 0x21
 800e562:	f001 f91d 	bl	800f7a0 <SX1276Write>
            if( fixLen == 1 )
 800e566:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d005      	beq.n	800e57a <SX1276SetRxConfig+0x2ea>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 800e56e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e572:	4619      	mov	r1, r3
 800e574:	2022      	movs	r0, #34	@ 0x22
 800e576:	f001 f913 	bl	800f7a0 <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800e57a:	4b35      	ldr	r3, [pc, #212]	@ (800e650 <SX1276SetRxConfig+0x3c0>)
 800e57c:	f893 315f 	ldrb.w	r3, [r3, #351]	@ 0x15f
 800e580:	2b00      	cmp	r3, #0
 800e582:	d011      	beq.n	800e5a8 <SX1276SetRxConfig+0x318>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 800e584:	2044      	movs	r0, #68	@ 0x44
 800e586:	f001 f91d 	bl	800f7c4 <SX1276Read>
 800e58a:	4603      	mov	r3, r0
 800e58c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800e590:	b2db      	uxtb	r3, r3
 800e592:	4619      	mov	r1, r3
 800e594:	2044      	movs	r0, #68	@ 0x44
 800e596:	f001 f903 	bl	800f7a0 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 800e59a:	4b2d      	ldr	r3, [pc, #180]	@ (800e650 <SX1276SetRxConfig+0x3c0>)
 800e59c:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 800e5a0:	4619      	mov	r1, r3
 800e5a2:	2024      	movs	r0, #36	@ 0x24
 800e5a4:	f001 f8fc 	bl	800f7a0 <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 800e5a8:	68bb      	ldr	r3, [r7, #8]
 800e5aa:	2b09      	cmp	r3, #9
 800e5ac:	d10e      	bne.n	800e5cc <SX1276SetRxConfig+0x33c>
 800e5ae:	4b28      	ldr	r3, [pc, #160]	@ (800e650 <SX1276SetRxConfig+0x3c0>)
 800e5b0:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800e5b4:	4a27      	ldr	r2, [pc, #156]	@ (800e654 <SX1276SetRxConfig+0x3c4>)
 800e5b6:	4293      	cmp	r3, r2
 800e5b8:	d908      	bls.n	800e5cc <SX1276SetRxConfig+0x33c>
                SX1276Write( REG_LR_TEST36, 0x02 );
 800e5ba:	2102      	movs	r1, #2
 800e5bc:	2036      	movs	r0, #54	@ 0x36
 800e5be:	f001 f8ef 	bl	800f7a0 <SX1276Write>
                SX1276Write( REG_LR_TEST3A, 0x64 );
 800e5c2:	2164      	movs	r1, #100	@ 0x64
 800e5c4:	203a      	movs	r0, #58	@ 0x3a
 800e5c6:	f001 f8eb 	bl	800f7a0 <SX1276Write>
 800e5ca:	e00f      	b.n	800e5ec <SX1276SetRxConfig+0x35c>
            else if( bandwidth == 9 )
 800e5cc:	68bb      	ldr	r3, [r7, #8]
 800e5ce:	2b09      	cmp	r3, #9
 800e5d0:	d108      	bne.n	800e5e4 <SX1276SetRxConfig+0x354>
                SX1276Write( REG_LR_TEST36, 0x02 );
 800e5d2:	2102      	movs	r1, #2
 800e5d4:	2036      	movs	r0, #54	@ 0x36
 800e5d6:	f001 f8e3 	bl	800f7a0 <SX1276Write>
                SX1276Write( REG_LR_TEST3A, 0x7F );
 800e5da:	217f      	movs	r1, #127	@ 0x7f
 800e5dc:	203a      	movs	r0, #58	@ 0x3a
 800e5de:	f001 f8df 	bl	800f7a0 <SX1276Write>
 800e5e2:	e003      	b.n	800e5ec <SX1276SetRxConfig+0x35c>
                SX1276Write( REG_LR_TEST36, 0x03 );
 800e5e4:	2103      	movs	r1, #3
 800e5e6:	2036      	movs	r0, #54	@ 0x36
 800e5e8:	f001 f8da 	bl	800f7a0 <SX1276Write>
            if( datarate == 6 )
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	2b06      	cmp	r3, #6
 800e5f0:	d114      	bne.n	800e61c <SX1276SetRxConfig+0x38c>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800e5f2:	2031      	movs	r0, #49	@ 0x31
 800e5f4:	f001 f8e6 	bl	800f7c4 <SX1276Read>
 800e5f8:	4603      	mov	r3, r0
 800e5fa:	b25b      	sxtb	r3, r3
 800e5fc:	f023 0307 	bic.w	r3, r3, #7
 800e600:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 800e602:	f043 0305 	orr.w	r3, r3, #5
 800e606:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800e608:	b2db      	uxtb	r3, r3
 800e60a:	4619      	mov	r1, r3
 800e60c:	2031      	movs	r0, #49	@ 0x31
 800e60e:	f001 f8c7 	bl	800f7a0 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800e612:	210c      	movs	r1, #12
 800e614:	2037      	movs	r0, #55	@ 0x37
 800e616:	f001 f8c3 	bl	800f7a0 <SX1276Write>
        break;
 800e61a:	e013      	b.n	800e644 <SX1276SetRxConfig+0x3b4>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800e61c:	2031      	movs	r0, #49	@ 0x31
 800e61e:	f001 f8d1 	bl	800f7c4 <SX1276Read>
 800e622:	4603      	mov	r3, r0
 800e624:	b25b      	sxtb	r3, r3
 800e626:	f023 0307 	bic.w	r3, r3, #7
 800e62a:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 800e62c:	f043 0303 	orr.w	r3, r3, #3
 800e630:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800e632:	b2db      	uxtb	r3, r3
 800e634:	4619      	mov	r1, r3
 800e636:	2031      	movs	r0, #49	@ 0x31
 800e638:	f001 f8b2 	bl	800f7a0 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800e63c:	210a      	movs	r1, #10
 800e63e:	2037      	movs	r0, #55	@ 0x37
 800e640:	f001 f8ae 	bl	800f7a0 <SX1276Write>
        break;
 800e644:	bf00      	nop
}
 800e646:	bf00      	nop
 800e648:	3710      	adds	r7, #16
 800e64a:	46bd      	mov	sp, r7
 800e64c:	bd80      	pop	{r7, pc}
 800e64e:	bf00      	nop
 800e650:	20000654 	.word	0x20000654
 800e654:	1f4add40 	.word	0x1f4add40

0800e658 <SX1276SetTxConfig>:
void SX1276SetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                        uint32_t bandwidth, uint32_t datarate,
                        uint8_t coderate, uint16_t preambleLen,
                        bool fixLen, bool crcOn, bool freqHopOn,
                        uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 800e658:	b590      	push	{r4, r7, lr}
 800e65a:	b087      	sub	sp, #28
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	60ba      	str	r2, [r7, #8]
 800e660:	607b      	str	r3, [r7, #4]
 800e662:	4603      	mov	r3, r0
 800e664:	73fb      	strb	r3, [r7, #15]
 800e666:	460b      	mov	r3, r1
 800e668:	73bb      	strb	r3, [r7, #14]
    uint8_t paConfig = 0;
 800e66a:	2300      	movs	r3, #0
 800e66c:	75fb      	strb	r3, [r7, #23]
    uint8_t paDac = 0;
 800e66e:	2300      	movs	r3, #0
 800e670:	75bb      	strb	r3, [r7, #22]

    SX1276SetModem( modem );
 800e672:	7bfb      	ldrb	r3, [r7, #15]
 800e674:	4618      	mov	r0, r3
 800e676:	f001 f851 	bl	800f71c <SX1276SetModem>

    paConfig = SX1276Read( REG_PACONFIG );
 800e67a:	2009      	movs	r0, #9
 800e67c:	f001 f8a2 	bl	800f7c4 <SX1276Read>
 800e680:	4603      	mov	r3, r0
 800e682:	75fb      	strb	r3, [r7, #23]
    paDac = SX1276Read( REG_PADAC );
 800e684:	204d      	movs	r0, #77	@ 0x4d
 800e686:	f001 f89d 	bl	800f7c4 <SX1276Read>
 800e68a:	4603      	mov	r3, r0
 800e68c:	75bb      	strb	r3, [r7, #22]

    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | SX1276GetPaSelect( SX1276.Settings.Channel );
 800e68e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e692:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e696:	b25c      	sxtb	r4, r3
 800e698:	4bb3      	ldr	r3, [pc, #716]	@ (800e968 <SX1276SetTxConfig+0x310>)
 800e69a:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800e69e:	4618      	mov	r0, r3
 800e6a0:	f7ff f95e 	bl	800d960 <SX1276GetPaSelect>
 800e6a4:	4603      	mov	r3, r0
 800e6a6:	b25b      	sxtb	r3, r3
 800e6a8:	4323      	orrs	r3, r4
 800e6aa:	b25b      	sxtb	r3, r3
 800e6ac:	75fb      	strb	r3, [r7, #23]
    paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK ) | 0x70;
 800e6ae:	7dfb      	ldrb	r3, [r7, #23]
 800e6b0:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 800e6b4:	75fb      	strb	r3, [r7, #23]

    if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 800e6b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	da4e      	bge.n	800e75c <SX1276SetTxConfig+0x104>
    {
        if( power > 17 )
 800e6be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e6c2:	2b11      	cmp	r3, #17
 800e6c4:	dd04      	ble.n	800e6d0 <SX1276SetTxConfig+0x78>
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 800e6c6:	7dbb      	ldrb	r3, [r7, #22]
 800e6c8:	f043 0307 	orr.w	r3, r3, #7
 800e6cc:	75bb      	strb	r3, [r7, #22]
 800e6ce:	e008      	b.n	800e6e2 <SX1276SetTxConfig+0x8a>
        }
        else
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 800e6d0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800e6d4:	f023 0307 	bic.w	r3, r3, #7
 800e6d8:	b25b      	sxtb	r3, r3
 800e6da:	f043 0304 	orr.w	r3, r3, #4
 800e6de:	b25b      	sxtb	r3, r3
 800e6e0:	75bb      	strb	r3, [r7, #22]
        }
        if( ( paDac & RF_PADAC_20DBM_ON ) == RF_PADAC_20DBM_ON )
 800e6e2:	7dbb      	ldrb	r3, [r7, #22]
 800e6e4:	f003 0307 	and.w	r3, r3, #7
 800e6e8:	2b07      	cmp	r3, #7
 800e6ea:	d11b      	bne.n	800e724 <SX1276SetTxConfig+0xcc>
        {
            if( power < 5 )
 800e6ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e6f0:	2b04      	cmp	r3, #4
 800e6f2:	dc01      	bgt.n	800e6f8 <SX1276SetTxConfig+0xa0>
            {
                power = 5;
 800e6f4:	2305      	movs	r3, #5
 800e6f6:	73bb      	strb	r3, [r7, #14]
            }
            if( power > 20 )
 800e6f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e6fc:	2b14      	cmp	r3, #20
 800e6fe:	dd01      	ble.n	800e704 <SX1276SetTxConfig+0xac>
            {
                power = 20;
 800e700:	2314      	movs	r3, #20
 800e702:	73bb      	strb	r3, [r7, #14]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 800e704:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e708:	f023 030f 	bic.w	r3, r3, #15
 800e70c:	b25a      	sxtb	r2, r3
 800e70e:	7bbb      	ldrb	r3, [r7, #14]
 800e710:	3b05      	subs	r3, #5
 800e712:	b2db      	uxtb	r3, r3
 800e714:	b25b      	sxtb	r3, r3
 800e716:	f003 030f 	and.w	r3, r3, #15
 800e71a:	b25b      	sxtb	r3, r3
 800e71c:	4313      	orrs	r3, r2
 800e71e:	b25b      	sxtb	r3, r3
 800e720:	75fb      	strb	r3, [r7, #23]
 800e722:	e037      	b.n	800e794 <SX1276SetTxConfig+0x13c>
        }
        else
        {
            if( power < 2 )
 800e724:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e728:	2b01      	cmp	r3, #1
 800e72a:	dc01      	bgt.n	800e730 <SX1276SetTxConfig+0xd8>
            {
                power = 2;
 800e72c:	2302      	movs	r3, #2
 800e72e:	73bb      	strb	r3, [r7, #14]
            }
            if( power > 17 )
 800e730:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e734:	2b11      	cmp	r3, #17
 800e736:	dd01      	ble.n	800e73c <SX1276SetTxConfig+0xe4>
            {
                power = 17;
 800e738:	2311      	movs	r3, #17
 800e73a:	73bb      	strb	r3, [r7, #14]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 800e73c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e740:	f023 030f 	bic.w	r3, r3, #15
 800e744:	b25a      	sxtb	r2, r3
 800e746:	7bbb      	ldrb	r3, [r7, #14]
 800e748:	3b02      	subs	r3, #2
 800e74a:	b2db      	uxtb	r3, r3
 800e74c:	b25b      	sxtb	r3, r3
 800e74e:	f003 030f 	and.w	r3, r3, #15
 800e752:	b25b      	sxtb	r3, r3
 800e754:	4313      	orrs	r3, r2
 800e756:	b25b      	sxtb	r3, r3
 800e758:	75fb      	strb	r3, [r7, #23]
 800e75a:	e01b      	b.n	800e794 <SX1276SetTxConfig+0x13c>
        }
    }
    else
    {
        if( power < -1 )
 800e75c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e760:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e764:	da01      	bge.n	800e76a <SX1276SetTxConfig+0x112>
        {
            power = -1;
 800e766:	23ff      	movs	r3, #255	@ 0xff
 800e768:	73bb      	strb	r3, [r7, #14]
        }
        if( power > 14 )
 800e76a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e76e:	2b0e      	cmp	r3, #14
 800e770:	dd01      	ble.n	800e776 <SX1276SetTxConfig+0x11e>
        {
            power = 14;
 800e772:	230e      	movs	r3, #14
 800e774:	73bb      	strb	r3, [r7, #14]
        }
        paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power + 1 ) & 0x0F );
 800e776:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e77a:	f023 030f 	bic.w	r3, r3, #15
 800e77e:	b25a      	sxtb	r2, r3
 800e780:	7bbb      	ldrb	r3, [r7, #14]
 800e782:	3301      	adds	r3, #1
 800e784:	b2db      	uxtb	r3, r3
 800e786:	b25b      	sxtb	r3, r3
 800e788:	f003 030f 	and.w	r3, r3, #15
 800e78c:	b25b      	sxtb	r3, r3
 800e78e:	4313      	orrs	r3, r2
 800e790:	b25b      	sxtb	r3, r3
 800e792:	75fb      	strb	r3, [r7, #23]
    }
    SX1276Write( REG_PACONFIG, paConfig );
 800e794:	7dfb      	ldrb	r3, [r7, #23]
 800e796:	4619      	mov	r1, r3
 800e798:	2009      	movs	r0, #9
 800e79a:	f001 f801 	bl	800f7a0 <SX1276Write>
    SX1276Write( REG_PADAC, paDac );
 800e79e:	7dbb      	ldrb	r3, [r7, #22]
 800e7a0:	4619      	mov	r1, r3
 800e7a2:	204d      	movs	r0, #77	@ 0x4d
 800e7a4:	f000 fffc 	bl	800f7a0 <SX1276Write>

    switch( modem )
 800e7a8:	7bfb      	ldrb	r3, [r7, #15]
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d003      	beq.n	800e7b6 <SX1276SetTxConfig+0x15e>
 800e7ae:	2b01      	cmp	r3, #1
 800e7b0:	f000 8092 	beq.w	800e8d8 <SX1276SetTxConfig+0x280>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 800e7b4:	e18a      	b.n	800eacc <SX1276SetTxConfig+0x474>
            SX1276.Settings.Fsk.Power = power;
 800e7b6:	4a6c      	ldr	r2, [pc, #432]	@ (800e968 <SX1276SetTxConfig+0x310>)
 800e7b8:	7bbb      	ldrb	r3, [r7, #14]
 800e7ba:	f882 311c 	strb.w	r3, [r2, #284]	@ 0x11c
            SX1276.Settings.Fsk.Fdev = fdev;
 800e7be:	4a6a      	ldr	r2, [pc, #424]	@ (800e968 <SX1276SetTxConfig+0x310>)
 800e7c0:	68bb      	ldr	r3, [r7, #8]
 800e7c2:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 800e7c6:	4a68      	ldr	r2, [pc, #416]	@ (800e968 <SX1276SetTxConfig+0x310>)
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	f8c2 3124 	str.w	r3, [r2, #292]	@ 0x124
            SX1276.Settings.Fsk.Datarate = datarate;
 800e7ce:	4a66      	ldr	r2, [pc, #408]	@ (800e968 <SX1276SetTxConfig+0x310>)
 800e7d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7d2:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 800e7d6:	4a64      	ldr	r2, [pc, #400]	@ (800e968 <SX1276SetTxConfig+0x310>)
 800e7d8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800e7da:	f8a2 3130 	strh.w	r3, [r2, #304]	@ 0x130
            SX1276.Settings.Fsk.FixLen = fixLen;
 800e7de:	4a62      	ldr	r2, [pc, #392]	@ (800e968 <SX1276SetTxConfig+0x310>)
 800e7e0:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800e7e4:	f882 3132 	strb.w	r3, [r2, #306]	@ 0x132
            SX1276.Settings.Fsk.CrcOn = crcOn;
 800e7e8:	4a5f      	ldr	r2, [pc, #380]	@ (800e968 <SX1276SetTxConfig+0x310>)
 800e7ea:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800e7ee:	f882 3134 	strb.w	r3, [r2, #308]	@ 0x134
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 800e7f2:	4a5d      	ldr	r2, [pc, #372]	@ (800e968 <SX1276SetTxConfig+0x310>)
 800e7f4:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800e7f8:	f882 3135 	strb.w	r3, [r2, #309]	@ 0x135
            SX1276.Settings.Fsk.TxTimeout = timeout;
 800e7fc:	4a5a      	ldr	r2, [pc, #360]	@ (800e968 <SX1276SetTxConfig+0x310>)
 800e7fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e800:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
 800e804:	68b8      	ldr	r0, [r7, #8]
 800e806:	f7f3 fc0f 	bl	8002028 <__aeabi_ui2d>
 800e80a:	a353      	add	r3, pc, #332	@ (adr r3, 800e958 <SX1276SetTxConfig+0x300>)
 800e80c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e810:	f7f3 fdae 	bl	8002370 <__aeabi_ddiv>
 800e814:	4602      	mov	r2, r0
 800e816:	460b      	mov	r3, r1
 800e818:	4610      	mov	r0, r2
 800e81a:	4619      	mov	r1, r3
 800e81c:	f7f3 ff56 	bl	80026cc <__aeabi_d2uiz>
 800e820:	4603      	mov	r3, r0
 800e822:	b29b      	uxth	r3, r3
 800e824:	60bb      	str	r3, [r7, #8]
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdev >> 8 ) );
 800e826:	68bb      	ldr	r3, [r7, #8]
 800e828:	0a1b      	lsrs	r3, r3, #8
 800e82a:	b2db      	uxtb	r3, r3
 800e82c:	4619      	mov	r1, r3
 800e82e:	2004      	movs	r0, #4
 800e830:	f000 ffb6 	bl	800f7a0 <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdev & 0xFF ) );
 800e834:	68bb      	ldr	r3, [r7, #8]
 800e836:	b2db      	uxtb	r3, r3
 800e838:	4619      	mov	r1, r3
 800e83a:	2005      	movs	r0, #5
 800e83c:	f000 ffb0 	bl	800f7a0 <SX1276Write>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 800e840:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e842:	f7f3 fbf1 	bl	8002028 <__aeabi_ui2d>
 800e846:	4602      	mov	r2, r0
 800e848:	460b      	mov	r3, r1
 800e84a:	a145      	add	r1, pc, #276	@ (adr r1, 800e960 <SX1276SetTxConfig+0x308>)
 800e84c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e850:	f7f3 fd8e 	bl	8002370 <__aeabi_ddiv>
 800e854:	4602      	mov	r2, r0
 800e856:	460b      	mov	r3, r1
 800e858:	4610      	mov	r0, r2
 800e85a:	4619      	mov	r1, r3
 800e85c:	f7f3 ff36 	bl	80026cc <__aeabi_d2uiz>
 800e860:	4603      	mov	r3, r0
 800e862:	b29b      	uxth	r3, r3
 800e864:	62bb      	str	r3, [r7, #40]	@ 0x28
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 800e866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e868:	0a1b      	lsrs	r3, r3, #8
 800e86a:	b2db      	uxtb	r3, r3
 800e86c:	4619      	mov	r1, r3
 800e86e:	2002      	movs	r0, #2
 800e870:	f000 ff96 	bl	800f7a0 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 800e874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e876:	b2db      	uxtb	r3, r3
 800e878:	4619      	mov	r1, r3
 800e87a:	2003      	movs	r0, #3
 800e87c:	f000 ff90 	bl	800f7a0 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 800e880:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800e882:	0a1b      	lsrs	r3, r3, #8
 800e884:	b29b      	uxth	r3, r3
 800e886:	b2db      	uxtb	r3, r3
 800e888:	4619      	mov	r1, r3
 800e88a:	2025      	movs	r0, #37	@ 0x25
 800e88c:	f000 ff88 	bl	800f7a0 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 800e890:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800e892:	b2db      	uxtb	r3, r3
 800e894:	4619      	mov	r1, r3
 800e896:	2026      	movs	r0, #38	@ 0x26
 800e898:	f000 ff82 	bl	800f7a0 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 800e89c:	2030      	movs	r0, #48	@ 0x30
 800e89e:	f000 ff91 	bl	800f7c4 <SX1276Read>
 800e8a2:	4603      	mov	r3, r0
 800e8a4:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 800e8a6:	f003 036f 	and.w	r3, r3, #111	@ 0x6f
 800e8aa:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 800e8ac:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 800e8b0:	2a00      	cmp	r2, #0
 800e8b2:	d001      	beq.n	800e8b8 <SX1276SetTxConfig+0x260>
 800e8b4:	2200      	movs	r2, #0
 800e8b6:	e001      	b.n	800e8bc <SX1276SetTxConfig+0x264>
 800e8b8:	f06f 027f 	mvn.w	r2, #127	@ 0x7f
 800e8bc:	4313      	orrs	r3, r2
 800e8be:	b25a      	sxtb	r2, r3
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 800e8c0:	f997 3038 	ldrsb.w	r3, [r7, #56]	@ 0x38
 800e8c4:	011b      	lsls	r3, r3, #4
 800e8c6:	b25b      	sxtb	r3, r3
 800e8c8:	4313      	orrs	r3, r2
 800e8ca:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 800e8cc:	b2db      	uxtb	r3, r3
 800e8ce:	4619      	mov	r1, r3
 800e8d0:	2030      	movs	r0, #48	@ 0x30
 800e8d2:	f000 ff65 	bl	800f7a0 <SX1276Write>
        break;
 800e8d6:	e0f9      	b.n	800eacc <SX1276SetTxConfig+0x474>
            SX1276.Settings.LoRa.Power = power;
 800e8d8:	4a23      	ldr	r2, [pc, #140]	@ (800e968 <SX1276SetTxConfig+0x310>)
 800e8da:	7bbb      	ldrb	r3, [r7, #14]
 800e8dc:	f882 314c 	strb.w	r3, [r2, #332]	@ 0x14c
            if( bandwidth > 2 )
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	2b02      	cmp	r3, #2
 800e8e4:	d901      	bls.n	800e8ea <SX1276SetTxConfig+0x292>
                while( 1 );
 800e8e6:	bf00      	nop
 800e8e8:	e7fd      	b.n	800e8e6 <SX1276SetTxConfig+0x28e>
            bandwidth += 7;
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	3307      	adds	r3, #7
 800e8ee:	607b      	str	r3, [r7, #4]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 800e8f0:	4a1d      	ldr	r2, [pc, #116]	@ (800e968 <SX1276SetTxConfig+0x310>)
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
            SX1276.Settings.LoRa.Datarate = datarate;
 800e8f8:	4a1b      	ldr	r2, [pc, #108]	@ (800e968 <SX1276SetTxConfig+0x310>)
 800e8fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8fc:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
            SX1276.Settings.LoRa.Coderate = coderate;
 800e900:	4a19      	ldr	r2, [pc, #100]	@ (800e968 <SX1276SetTxConfig+0x310>)
 800e902:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800e906:	f882 3159 	strb.w	r3, [r2, #345]	@ 0x159
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 800e90a:	4a17      	ldr	r2, [pc, #92]	@ (800e968 <SX1276SetTxConfig+0x310>)
 800e90c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800e90e:	f8a2 315a 	strh.w	r3, [r2, #346]	@ 0x15a
            SX1276.Settings.LoRa.FixLen = fixLen;
 800e912:	4a15      	ldr	r2, [pc, #84]	@ (800e968 <SX1276SetTxConfig+0x310>)
 800e914:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800e918:	f882 315c 	strb.w	r3, [r2, #348]	@ 0x15c
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 800e91c:	4a12      	ldr	r2, [pc, #72]	@ (800e968 <SX1276SetTxConfig+0x310>)
 800e91e:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800e922:	f882 315f 	strb.w	r3, [r2, #351]	@ 0x15f
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 800e926:	4a10      	ldr	r2, [pc, #64]	@ (800e968 <SX1276SetTxConfig+0x310>)
 800e928:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800e92c:	f882 3160 	strb.w	r3, [r2, #352]	@ 0x160
            SX1276.Settings.LoRa.CrcOn = crcOn;
 800e930:	4a0d      	ldr	r2, [pc, #52]	@ (800e968 <SX1276SetTxConfig+0x310>)
 800e932:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800e936:	f882 315e 	strb.w	r3, [r2, #350]	@ 0x15e
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 800e93a:	4a0b      	ldr	r2, [pc, #44]	@ (800e968 <SX1276SetTxConfig+0x310>)
 800e93c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800e940:	f882 3161 	strb.w	r3, [r2, #353]	@ 0x161
            SX1276.Settings.LoRa.TxTimeout = timeout;
 800e944:	4a08      	ldr	r2, [pc, #32]	@ (800e968 <SX1276SetTxConfig+0x310>)
 800e946:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e948:	f8c2 3164 	str.w	r3, [r2, #356]	@ 0x164
            if( datarate > 12 )
 800e94c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e94e:	2b0c      	cmp	r3, #12
 800e950:	d90c      	bls.n	800e96c <SX1276SetTxConfig+0x314>
                datarate = 12;
 800e952:	230c      	movs	r3, #12
 800e954:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e956:	e00e      	b.n	800e976 <SX1276SetTxConfig+0x31e>
 800e958:	00000000 	.word	0x00000000
 800e95c:	404e8480 	.word	0x404e8480
 800e960:	00000000 	.word	0x00000000
 800e964:	417e8480 	.word	0x417e8480
 800e968:	20000654 	.word	0x20000654
            else if( datarate < 6 )
 800e96c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e96e:	2b05      	cmp	r3, #5
 800e970:	d801      	bhi.n	800e976 <SX1276SetTxConfig+0x31e>
                datarate = 6;
 800e972:	2306      	movs	r3, #6
 800e974:	62bb      	str	r3, [r7, #40]	@ 0x28
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	2b07      	cmp	r3, #7
 800e97a:	d105      	bne.n	800e988 <SX1276SetTxConfig+0x330>
 800e97c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e97e:	2b0b      	cmp	r3, #11
 800e980:	d008      	beq.n	800e994 <SX1276SetTxConfig+0x33c>
 800e982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e984:	2b0c      	cmp	r3, #12
 800e986:	d005      	beq.n	800e994 <SX1276SetTxConfig+0x33c>
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	2b08      	cmp	r3, #8
 800e98c:	d107      	bne.n	800e99e <SX1276SetTxConfig+0x346>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 800e98e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e990:	2b0c      	cmp	r3, #12
 800e992:	d104      	bne.n	800e99e <SX1276SetTxConfig+0x346>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 800e994:	4b4f      	ldr	r3, [pc, #316]	@ (800ead4 <SX1276SetTxConfig+0x47c>)
 800e996:	2201      	movs	r2, #1
 800e998:	f883 2158 	strb.w	r2, [r3, #344]	@ 0x158
 800e99c:	e003      	b.n	800e9a6 <SX1276SetTxConfig+0x34e>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 800e99e:	4b4d      	ldr	r3, [pc, #308]	@ (800ead4 <SX1276SetTxConfig+0x47c>)
 800e9a0:	2200      	movs	r2, #0
 800e9a2:	f883 2158 	strb.w	r2, [r3, #344]	@ 0x158
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800e9a6:	4b4b      	ldr	r3, [pc, #300]	@ (800ead4 <SX1276SetTxConfig+0x47c>)
 800e9a8:	f893 315f 	ldrb.w	r3, [r3, #351]	@ 0x15f
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d011      	beq.n	800e9d4 <SX1276SetTxConfig+0x37c>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 800e9b0:	2044      	movs	r0, #68	@ 0x44
 800e9b2:	f000 ff07 	bl	800f7c4 <SX1276Read>
 800e9b6:	4603      	mov	r3, r0
 800e9b8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800e9bc:	b2db      	uxtb	r3, r3
 800e9be:	4619      	mov	r1, r3
 800e9c0:	2044      	movs	r0, #68	@ 0x44
 800e9c2:	f000 feed 	bl	800f7a0 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 800e9c6:	4b43      	ldr	r3, [pc, #268]	@ (800ead4 <SX1276SetTxConfig+0x47c>)
 800e9c8:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 800e9cc:	4619      	mov	r1, r3
 800e9ce:	2024      	movs	r0, #36	@ 0x24
 800e9d0:	f000 fee6 	bl	800f7a0 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 800e9d4:	201d      	movs	r0, #29
 800e9d6:	f000 fef5 	bl	800f7c4 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	b2db      	uxtb	r3, r3
 800e9de:	011b      	lsls	r3, r3, #4
 800e9e0:	b2da      	uxtb	r2, r3
 800e9e2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800e9e6:	005b      	lsls	r3, r3, #1
 800e9e8:	b2db      	uxtb	r3, r3
 800e9ea:	4313      	orrs	r3, r2
 800e9ec:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 800e9ee:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800e9f2:	4313      	orrs	r3, r2
 800e9f4:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 800e9f6:	4619      	mov	r1, r3
 800e9f8:	201d      	movs	r0, #29
 800e9fa:	f000 fed1 	bl	800f7a0 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 800e9fe:	201e      	movs	r0, #30
 800ea00:	f000 fee0 	bl	800f7c4 <SX1276Read>
 800ea04:	4603      	mov	r3, r0
                           RFLR_MODEMCONFIG2_SF_MASK &
 800ea06:	f003 030b 	and.w	r3, r3, #11
 800ea0a:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 800ea0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea0e:	b2db      	uxtb	r3, r3
 800ea10:	011b      	lsls	r3, r3, #4
 800ea12:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK ) |
 800ea14:	4313      	orrs	r3, r2
 800ea16:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 800ea18:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800ea1c:	009b      	lsls	r3, r3, #2
 800ea1e:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 800ea20:	4313      	orrs	r3, r2
 800ea22:	b2db      	uxtb	r3, r3
 800ea24:	4619      	mov	r1, r3
 800ea26:	201e      	movs	r0, #30
 800ea28:	f000 feba 	bl	800f7a0 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 800ea2c:	2026      	movs	r0, #38	@ 0x26
 800ea2e:	f000 fec9 	bl	800f7c4 <SX1276Read>
 800ea32:	4603      	mov	r3, r0
 800ea34:	b25b      	sxtb	r3, r3
 800ea36:	f023 0308 	bic.w	r3, r3, #8
 800ea3a:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 800ea3c:	4b25      	ldr	r3, [pc, #148]	@ (800ead4 <SX1276SetTxConfig+0x47c>)
 800ea3e:	f893 3158 	ldrb.w	r3, [r3, #344]	@ 0x158
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 800ea42:	b25b      	sxtb	r3, r3
 800ea44:	00db      	lsls	r3, r3, #3
 800ea46:	b25b      	sxtb	r3, r3
 800ea48:	4313      	orrs	r3, r2
 800ea4a:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 800ea4c:	b2db      	uxtb	r3, r3
 800ea4e:	4619      	mov	r1, r3
 800ea50:	2026      	movs	r0, #38	@ 0x26
 800ea52:	f000 fea5 	bl	800f7a0 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 800ea56:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800ea58:	0a1b      	lsrs	r3, r3, #8
 800ea5a:	b29b      	uxth	r3, r3
 800ea5c:	b2db      	uxtb	r3, r3
 800ea5e:	4619      	mov	r1, r3
 800ea60:	2020      	movs	r0, #32
 800ea62:	f000 fe9d 	bl	800f7a0 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 800ea66:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800ea68:	b2db      	uxtb	r3, r3
 800ea6a:	4619      	mov	r1, r3
 800ea6c:	2021      	movs	r0, #33	@ 0x21
 800ea6e:	f000 fe97 	bl	800f7a0 <SX1276Write>
            if( datarate == 6 )
 800ea72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea74:	2b06      	cmp	r3, #6
 800ea76:	d114      	bne.n	800eaa2 <SX1276SetTxConfig+0x44a>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800ea78:	2031      	movs	r0, #49	@ 0x31
 800ea7a:	f000 fea3 	bl	800f7c4 <SX1276Read>
 800ea7e:	4603      	mov	r3, r0
 800ea80:	b25b      	sxtb	r3, r3
 800ea82:	f023 0307 	bic.w	r3, r3, #7
 800ea86:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 800ea88:	f043 0305 	orr.w	r3, r3, #5
 800ea8c:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800ea8e:	b2db      	uxtb	r3, r3
 800ea90:	4619      	mov	r1, r3
 800ea92:	2031      	movs	r0, #49	@ 0x31
 800ea94:	f000 fe84 	bl	800f7a0 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800ea98:	210c      	movs	r1, #12
 800ea9a:	2037      	movs	r0, #55	@ 0x37
 800ea9c:	f000 fe80 	bl	800f7a0 <SX1276Write>
        break;
 800eaa0:	e013      	b.n	800eaca <SX1276SetTxConfig+0x472>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800eaa2:	2031      	movs	r0, #49	@ 0x31
 800eaa4:	f000 fe8e 	bl	800f7c4 <SX1276Read>
 800eaa8:	4603      	mov	r3, r0
 800eaaa:	b25b      	sxtb	r3, r3
 800eaac:	f023 0307 	bic.w	r3, r3, #7
 800eab0:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 800eab2:	f043 0303 	orr.w	r3, r3, #3
 800eab6:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800eab8:	b2db      	uxtb	r3, r3
 800eaba:	4619      	mov	r1, r3
 800eabc:	2031      	movs	r0, #49	@ 0x31
 800eabe:	f000 fe6f 	bl	800f7a0 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800eac2:	210a      	movs	r1, #10
 800eac4:	2037      	movs	r0, #55	@ 0x37
 800eac6:	f000 fe6b 	bl	800f7a0 <SX1276Write>
        break;
 800eaca:	bf00      	nop
}
 800eacc:	bf00      	nop
 800eace:	371c      	adds	r7, #28
 800ead0:	46bd      	mov	sp, r7
 800ead2:	bd90      	pop	{r4, r7, pc}
 800ead4:	20000654 	.word	0x20000654

0800ead8 <SX1276GetTimeOnAir>:

uint32_t SX1276GetTimeOnAir( RadioModems_t modem, uint8_t pktLen )
{
 800ead8:	b5b0      	push	{r4, r5, r7, lr}
 800eada:	b094      	sub	sp, #80	@ 0x50
 800eadc:	af00      	add	r7, sp, #0
 800eade:	4603      	mov	r3, r0
 800eae0:	460a      	mov	r2, r1
 800eae2:	71fb      	strb	r3, [r7, #7]
 800eae4:	4613      	mov	r3, r2
 800eae6:	71bb      	strb	r3, [r7, #6]
    uint32_t airTime = 0;
 800eae8:	2300      	movs	r3, #0
 800eaea:	64fb      	str	r3, [r7, #76]	@ 0x4c

    switch( modem )
 800eaec:	79fb      	ldrb	r3, [r7, #7]
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d003      	beq.n	800eafa <SX1276GetTimeOnAir+0x22>
 800eaf2:	2b01      	cmp	r3, #1
 800eaf4:	f000 8092 	beq.w	800ec1c <SX1276GetTimeOnAir+0x144>
 800eaf8:	e1a0      	b.n	800ee3c <SX1276GetTimeOnAir+0x364>
    {
    case MODEM_FSK:
        {
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 800eafa:	4ba9      	ldr	r3, [pc, #676]	@ (800eda0 <SX1276GetTimeOnAir+0x2c8>)
 800eafc:	f8b3 3130 	ldrh.w	r3, [r3, #304]	@ 0x130
 800eb00:	461c      	mov	r4, r3
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 800eb02:	2027      	movs	r0, #39	@ 0x27
 800eb04:	f000 fe5e 	bl	800f7c4 <SX1276Read>
 800eb08:	4603      	mov	r3, r0
 800eb0a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800eb0e:	3301      	adds	r3, #1
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 800eb10:	4423      	add	r3, r4
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 800eb12:	4618      	mov	r0, r3
 800eb14:	f7f3 fa98 	bl	8002048 <__aeabi_i2d>
 800eb18:	4602      	mov	r2, r0
 800eb1a:	460b      	mov	r3, r1
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 800eb1c:	49a0      	ldr	r1, [pc, #640]	@ (800eda0 <SX1276GetTimeOnAir+0x2c8>)
 800eb1e:	f891 1132 	ldrb.w	r1, [r1, #306]	@ 0x132
 800eb22:	2900      	cmp	r1, #0
 800eb24:	d004      	beq.n	800eb30 <SX1276GetTimeOnAir+0x58>
 800eb26:	f04f 0000 	mov.w	r0, #0
 800eb2a:	f04f 0100 	mov.w	r1, #0
 800eb2e:	e002      	b.n	800eb36 <SX1276GetTimeOnAir+0x5e>
 800eb30:	f04f 0000 	mov.w	r0, #0
 800eb34:	499b      	ldr	r1, [pc, #620]	@ (800eda4 <SX1276GetTimeOnAir+0x2cc>)
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 800eb36:	f7f3 f93b 	bl	8001db0 <__adddf3>
 800eb3a:	4602      	mov	r2, r0
 800eb3c:	460b      	mov	r3, r1
 800eb3e:	4614      	mov	r4, r2
 800eb40:	461d      	mov	r5, r3
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 800eb42:	2030      	movs	r0, #48	@ 0x30
 800eb44:	f000 fe3e 	bl	800f7c4 <SX1276Read>
 800eb48:	4603      	mov	r3, r0
 800eb4a:	f023 03f9 	bic.w	r3, r3, #249	@ 0xf9
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d003      	beq.n	800eb5a <SX1276GetTimeOnAir+0x82>
 800eb52:	f04f 0000 	mov.w	r0, #0
 800eb56:	4993      	ldr	r1, [pc, #588]	@ (800eda4 <SX1276GetTimeOnAir+0x2cc>)
 800eb58:	e003      	b.n	800eb62 <SX1276GetTimeOnAir+0x8a>
 800eb5a:	f04f 0000 	mov.w	r0, #0
 800eb5e:	f04f 0100 	mov.w	r1, #0
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 800eb62:	4622      	mov	r2, r4
 800eb64:	462b      	mov	r3, r5
 800eb66:	f7f3 f923 	bl	8001db0 <__adddf3>
 800eb6a:	4602      	mov	r2, r0
 800eb6c:	460b      	mov	r3, r1
 800eb6e:	4614      	mov	r4, r2
 800eb70:	461d      	mov	r5, r3
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 800eb72:	79bb      	ldrb	r3, [r7, #6]
 800eb74:	4618      	mov	r0, r3
 800eb76:	f7f3 fa67 	bl	8002048 <__aeabi_i2d>
 800eb7a:	4602      	mov	r2, r0
 800eb7c:	460b      	mov	r3, r1
 800eb7e:	4620      	mov	r0, r4
 800eb80:	4629      	mov	r1, r5
 800eb82:	f7f3 f915 	bl	8001db0 <__adddf3>
 800eb86:	4602      	mov	r2, r0
 800eb88:	460b      	mov	r3, r1
 800eb8a:	4614      	mov	r4, r2
 800eb8c:	461d      	mov	r5, r3
                                     pktLen +
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 800eb8e:	4b84      	ldr	r3, [pc, #528]	@ (800eda0 <SX1276GetTimeOnAir+0x2c8>)
 800eb90:	f893 3134 	ldrb.w	r3, [r3, #308]	@ 0x134
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d004      	beq.n	800eba2 <SX1276GetTimeOnAir+0xca>
 800eb98:	f04f 0000 	mov.w	r0, #0
 800eb9c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800eba0:	e003      	b.n	800ebaa <SX1276GetTimeOnAir+0xd2>
 800eba2:	f04f 0000 	mov.w	r0, #0
 800eba6:	f04f 0100 	mov.w	r1, #0
                                     pktLen +
 800ebaa:	4622      	mov	r2, r4
 800ebac:	462b      	mov	r3, r5
 800ebae:	f7f3 f8ff 	bl	8001db0 <__adddf3>
 800ebb2:	4602      	mov	r2, r0
 800ebb4:	460b      	mov	r3, r1
 800ebb6:	4610      	mov	r0, r2
 800ebb8:	4619      	mov	r1, r3
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 800ebba:	f04f 0200 	mov.w	r2, #0
 800ebbe:	4b7a      	ldr	r3, [pc, #488]	@ (800eda8 <SX1276GetTimeOnAir+0x2d0>)
 800ebc0:	f7f3 faac 	bl	800211c <__aeabi_dmul>
 800ebc4:	4602      	mov	r2, r0
 800ebc6:	460b      	mov	r3, r1
 800ebc8:	4614      	mov	r4, r2
 800ebca:	461d      	mov	r5, r3
                                     SX1276.Settings.Fsk.Datarate ) * /* 1e6 */  1e3  );     // FIX by PK
 800ebcc:	4b74      	ldr	r3, [pc, #464]	@ (800eda0 <SX1276GetTimeOnAir+0x2c8>)
 800ebce:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	f7f3 fa28 	bl	8002028 <__aeabi_ui2d>
 800ebd8:	4602      	mov	r2, r0
 800ebda:	460b      	mov	r3, r1
 800ebdc:	4620      	mov	r0, r4
 800ebde:	4629      	mov	r1, r5
 800ebe0:	f7f3 fbc6 	bl	8002370 <__aeabi_ddiv>
 800ebe4:	4602      	mov	r2, r0
 800ebe6:	460b      	mov	r3, r1
 800ebe8:	4610      	mov	r0, r2
 800ebea:	4619      	mov	r1, r3
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 800ebec:	f04f 0200 	mov.w	r2, #0
 800ebf0:	4b6e      	ldr	r3, [pc, #440]	@ (800edac <SX1276GetTimeOnAir+0x2d4>)
 800ebf2:	f7f3 fa93 	bl	800211c <__aeabi_dmul>
 800ebf6:	4602      	mov	r2, r0
 800ebf8:	460b      	mov	r3, r1
 800ebfa:	ec43 2b17 	vmov	d7, r2, r3
 800ebfe:	eeb0 0a47 	vmov.f32	s0, s14
 800ec02:	eef0 0a67 	vmov.f32	s1, s15
 800ec06:	f006 f847 	bl	8014c98 <round>
 800ec0a:	ec53 2b10 	vmov	r2, r3, d0
 800ec0e:	4610      	mov	r0, r2
 800ec10:	4619      	mov	r1, r3
 800ec12:	f7f3 fd5b 	bl	80026cc <__aeabi_d2uiz>
 800ec16:	4603      	mov	r3, r0
 800ec18:	64fb      	str	r3, [r7, #76]	@ 0x4c
        }
        break;
 800ec1a:	e10f      	b.n	800ee3c <SX1276GetTimeOnAir+0x364>
    case MODEM_LORA:
        {
            double bw = 0.0;
 800ec1c:	f04f 0200 	mov.w	r2, #0
 800ec20:	f04f 0300 	mov.w	r3, #0
 800ec24:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
            // REMARK: When using LoRa modem only bandwidths 125, 250 and 500 kHz are supported
            switch( SX1276.Settings.LoRa.Bandwidth )
 800ec28:	4b5d      	ldr	r3, [pc, #372]	@ (800eda0 <SX1276GetTimeOnAir+0x2c8>)
 800ec2a:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800ec2e:	2b09      	cmp	r3, #9
 800ec30:	d012      	beq.n	800ec58 <SX1276GetTimeOnAir+0x180>
 800ec32:	2b09      	cmp	r3, #9
 800ec34:	d816      	bhi.n	800ec64 <SX1276GetTimeOnAir+0x18c>
 800ec36:	2b07      	cmp	r3, #7
 800ec38:	d002      	beq.n	800ec40 <SX1276GetTimeOnAir+0x168>
 800ec3a:	2b08      	cmp	r3, #8
 800ec3c:	d006      	beq.n	800ec4c <SX1276GetTimeOnAir+0x174>
 800ec3e:	e011      	b.n	800ec64 <SX1276GetTimeOnAir+0x18c>
            //    break;
            //case 6: // 62.5 kHz
            //    bw = 625e2;
            //    break;
            case 7: // 125 kHz
                bw = 125e3;
 800ec40:	a351      	add	r3, pc, #324	@ (adr r3, 800ed88 <SX1276GetTimeOnAir+0x2b0>)
 800ec42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec46:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
                break;
 800ec4a:	e00b      	b.n	800ec64 <SX1276GetTimeOnAir+0x18c>
            case 8: // 250 kHz
                bw = 250e3;
 800ec4c:	a350      	add	r3, pc, #320	@ (adr r3, 800ed90 <SX1276GetTimeOnAir+0x2b8>)
 800ec4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec52:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
                break;
 800ec56:	e005      	b.n	800ec64 <SX1276GetTimeOnAir+0x18c>
            case 9: // 500 kHz
                bw = 500e3;
 800ec58:	a34f      	add	r3, pc, #316	@ (adr r3, 800ed98 <SX1276GetTimeOnAir+0x2c0>)
 800ec5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec5e:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
                break;
 800ec62:	bf00      	nop
            }

            // Symbol rate : time for one symbol (secs)
            double rs = bw / ( 1 << SX1276.Settings.LoRa.Datarate );
 800ec64:	4b4e      	ldr	r3, [pc, #312]	@ (800eda0 <SX1276GetTimeOnAir+0x2c8>)
 800ec66:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800ec6a:	2201      	movs	r2, #1
 800ec6c:	fa02 f303 	lsl.w	r3, r2, r3
 800ec70:	4618      	mov	r0, r3
 800ec72:	f7f3 f9e9 	bl	8002048 <__aeabi_i2d>
 800ec76:	4602      	mov	r2, r0
 800ec78:	460b      	mov	r3, r1
 800ec7a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800ec7e:	f7f3 fb77 	bl	8002370 <__aeabi_ddiv>
 800ec82:	4602      	mov	r2, r0
 800ec84:	460b      	mov	r3, r1
 800ec86:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
            double ts = 1 / rs;
 800ec8a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800ec8e:	f04f 0000 	mov.w	r0, #0
 800ec92:	4944      	ldr	r1, [pc, #272]	@ (800eda4 <SX1276GetTimeOnAir+0x2cc>)
 800ec94:	f7f3 fb6c 	bl	8002370 <__aeabi_ddiv>
 800ec98:	4602      	mov	r2, r0
 800ec9a:	460b      	mov	r3, r1
 800ec9c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
            // time of preamble
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
 800eca0:	4b3f      	ldr	r3, [pc, #252]	@ (800eda0 <SX1276GetTimeOnAir+0x2c8>)
 800eca2:	f8b3 315a 	ldrh.w	r3, [r3, #346]	@ 0x15a
 800eca6:	4618      	mov	r0, r3
 800eca8:	f7f3 f9ce 	bl	8002048 <__aeabi_i2d>
 800ecac:	f04f 0200 	mov.w	r2, #0
 800ecb0:	4b3f      	ldr	r3, [pc, #252]	@ (800edb0 <SX1276GetTimeOnAir+0x2d8>)
 800ecb2:	f7f3 f87d 	bl	8001db0 <__adddf3>
 800ecb6:	4602      	mov	r2, r0
 800ecb8:	460b      	mov	r3, r1
 800ecba:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800ecbe:	f7f3 fa2d 	bl	800211c <__aeabi_dmul>
 800ecc2:	4602      	mov	r2, r0
 800ecc4:	460b      	mov	r3, r1
 800ecc6:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
            // Symbol length of payload and time
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 800ecca:	79bb      	ldrb	r3, [r7, #6]
 800eccc:	00db      	lsls	r3, r3, #3
 800ecce:	461a      	mov	r2, r3
 800ecd0:	4b33      	ldr	r3, [pc, #204]	@ (800eda0 <SX1276GetTimeOnAir+0x2c8>)
 800ecd2:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800ecd6:	009b      	lsls	r3, r3, #2
 800ecd8:	1ad3      	subs	r3, r2, r3
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 800ecda:	4a31      	ldr	r2, [pc, #196]	@ (800eda0 <SX1276GetTimeOnAir+0x2c8>)
 800ecdc:	f892 215e 	ldrb.w	r2, [r2, #350]	@ 0x15e
 800ece0:	0112      	lsls	r2, r2, #4
 800ece2:	441a      	add	r2, r3
                                 ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
 800ece4:	4b2e      	ldr	r3, [pc, #184]	@ (800eda0 <SX1276GetTimeOnAir+0x2c8>)
 800ece6:	f893 315c 	ldrb.w	r3, [r3, #348]	@ 0x15c
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d001      	beq.n	800ecf2 <SX1276GetTimeOnAir+0x21a>
 800ecee:	2314      	movs	r3, #20
 800ecf0:	e000      	b.n	800ecf4 <SX1276GetTimeOnAir+0x21c>
 800ecf2:	2300      	movs	r3, #0
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 800ecf4:	1ad3      	subs	r3, r2, r3
 800ecf6:	331c      	adds	r3, #28
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	f7f3 f995 	bl	8002028 <__aeabi_ui2d>
 800ecfe:	4604      	mov	r4, r0
 800ed00:	460d      	mov	r5, r1
                                 ( double )( 4 * SX1276.Settings.LoRa.Datarate -
 800ed02:	4b27      	ldr	r3, [pc, #156]	@ (800eda0 <SX1276GetTimeOnAir+0x2c8>)
 800ed04:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800ed08:	009a      	lsls	r2, r3, #2
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) *
 800ed0a:	4b25      	ldr	r3, [pc, #148]	@ (800eda0 <SX1276GetTimeOnAir+0x2c8>)
 800ed0c:	f893 3158 	ldrb.w	r3, [r3, #344]	@ 0x158
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d001      	beq.n	800ed18 <SX1276GetTimeOnAir+0x240>
 800ed14:	2302      	movs	r3, #2
 800ed16:	e000      	b.n	800ed1a <SX1276GetTimeOnAir+0x242>
 800ed18:	2300      	movs	r3, #0
                                 ( double )( 4 * SX1276.Settings.LoRa.Datarate -
 800ed1a:	1ad3      	subs	r3, r2, r3
 800ed1c:	4618      	mov	r0, r3
 800ed1e:	f7f3 f983 	bl	8002028 <__aeabi_ui2d>
 800ed22:	4602      	mov	r2, r0
 800ed24:	460b      	mov	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 800ed26:	4620      	mov	r0, r4
 800ed28:	4629      	mov	r1, r5
 800ed2a:	f7f3 fb21 	bl	8002370 <__aeabi_ddiv>
 800ed2e:	4602      	mov	r2, r0
 800ed30:	460b      	mov	r3, r1
 800ed32:	ec43 2b17 	vmov	d7, r2, r3
 800ed36:	eeb0 0a47 	vmov.f32	s0, s14
 800ed3a:	eef0 0a67 	vmov.f32	s1, s15
 800ed3e:	f005 feaf 	bl	8014aa0 <ceil>
 800ed42:	ec55 4b10 	vmov	r4, r5, d0
                                 ( SX1276.Settings.LoRa.Coderate + 4 );
 800ed46:	4b16      	ldr	r3, [pc, #88]	@ (800eda0 <SX1276GetTimeOnAir+0x2c8>)
 800ed48:	f893 3159 	ldrb.w	r3, [r3, #345]	@ 0x159
 800ed4c:	3304      	adds	r3, #4
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) *
 800ed4e:	4618      	mov	r0, r3
 800ed50:	f7f3 f97a 	bl	8002048 <__aeabi_i2d>
 800ed54:	4602      	mov	r2, r0
 800ed56:	460b      	mov	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 800ed58:	4620      	mov	r0, r4
 800ed5a:	4629      	mov	r1, r5
 800ed5c:	f7f3 f9de 	bl	800211c <__aeabi_dmul>
 800ed60:	4602      	mov	r2, r0
 800ed62:	460b      	mov	r3, r1
 800ed64:	e9c7 2308 	strd	r2, r3, [r7, #32]
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 800ed68:	f04f 0200 	mov.w	r2, #0
 800ed6c:	f04f 0300 	mov.w	r3, #0
 800ed70:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800ed74:	f7f3 fc62 	bl	800263c <__aeabi_dcmpgt>
 800ed78:	4603      	mov	r3, r0
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d01a      	beq.n	800edb4 <SX1276GetTimeOnAir+0x2dc>
 800ed7e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800ed82:	e01b      	b.n	800edbc <SX1276GetTimeOnAir+0x2e4>
 800ed84:	f3af 8000 	nop.w
 800ed88:	00000000 	.word	0x00000000
 800ed8c:	40fe8480 	.word	0x40fe8480
 800ed90:	00000000 	.word	0x00000000
 800ed94:	410e8480 	.word	0x410e8480
 800ed98:	00000000 	.word	0x00000000
 800ed9c:	411e8480 	.word	0x411e8480
 800eda0:	20000654 	.word	0x20000654
 800eda4:	3ff00000 	.word	0x3ff00000
 800eda8:	40200000 	.word	0x40200000
 800edac:	408f4000 	.word	0x408f4000
 800edb0:	40110000 	.word	0x40110000
 800edb4:	f04f 0000 	mov.w	r0, #0
 800edb8:	f04f 0100 	mov.w	r1, #0
 800edbc:	f04f 0200 	mov.w	r2, #0
 800edc0:	4b23      	ldr	r3, [pc, #140]	@ (800ee50 <SX1276GetTimeOnAir+0x378>)
 800edc2:	f7f2 fff5 	bl	8001db0 <__adddf3>
 800edc6:	4602      	mov	r2, r0
 800edc8:	460b      	mov	r3, r1
 800edca:	e9c7 2306 	strd	r2, r3, [r7, #24]
            double tPayload = nPayload * ts;
 800edce:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800edd2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800edd6:	f7f3 f9a1 	bl	800211c <__aeabi_dmul>
 800edda:	4602      	mov	r2, r0
 800eddc:	460b      	mov	r3, r1
 800edde:	e9c7 2304 	strd	r2, r3, [r7, #16]
            // Time on air
            double tOnAir = tPreamble + tPayload;
 800ede2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ede6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800edea:	f7f2 ffe1 	bl	8001db0 <__adddf3>
 800edee:	4602      	mov	r2, r0
 800edf0:	460b      	mov	r3, r1
 800edf2:	e9c7 2302 	strd	r2, r3, [r7, #8]
            // return us secs
            airTime = floor( tOnAir * 1e3 + 0.999 );
 800edf6:	f04f 0200 	mov.w	r2, #0
 800edfa:	4b16      	ldr	r3, [pc, #88]	@ (800ee54 <SX1276GetTimeOnAir+0x37c>)
 800edfc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ee00:	f7f3 f98c 	bl	800211c <__aeabi_dmul>
 800ee04:	4602      	mov	r2, r0
 800ee06:	460b      	mov	r3, r1
 800ee08:	4610      	mov	r0, r2
 800ee0a:	4619      	mov	r1, r3
 800ee0c:	a30e      	add	r3, pc, #56	@ (adr r3, 800ee48 <SX1276GetTimeOnAir+0x370>)
 800ee0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee12:	f7f2 ffcd 	bl	8001db0 <__adddf3>
 800ee16:	4602      	mov	r2, r0
 800ee18:	460b      	mov	r3, r1
 800ee1a:	ec43 2b17 	vmov	d7, r2, r3
 800ee1e:	eeb0 0a47 	vmov.f32	s0, s14
 800ee22:	eef0 0a67 	vmov.f32	s1, s15
 800ee26:	f005 feb7 	bl	8014b98 <floor>
 800ee2a:	ec53 2b10 	vmov	r2, r3, d0
 800ee2e:	4610      	mov	r0, r2
 800ee30:	4619      	mov	r1, r3
 800ee32:	f7f3 fc4b 	bl	80026cc <__aeabi_d2uiz>
 800ee36:	4603      	mov	r3, r0
 800ee38:	64fb      	str	r3, [r7, #76]	@ 0x4c
        }
        break;
 800ee3a:	bf00      	nop
    }
    return airTime;
 800ee3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800ee3e:	4618      	mov	r0, r3
 800ee40:	3750      	adds	r7, #80	@ 0x50
 800ee42:	46bd      	mov	sp, r7
 800ee44:	bdb0      	pop	{r4, r5, r7, pc}
 800ee46:	bf00      	nop
 800ee48:	d916872b 	.word	0xd916872b
 800ee4c:	3feff7ce 	.word	0x3feff7ce
 800ee50:	40200000 	.word	0x40200000
 800ee54:	408f4000 	.word	0x408f4000

0800ee58 <SX1276Send>:

void SX1276Send( uint8_t *buffer, uint8_t size )
{
 800ee58:	b580      	push	{r7, lr}
 800ee5a:	b084      	sub	sp, #16
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	6078      	str	r0, [r7, #4]
 800ee60:	460b      	mov	r3, r1
 800ee62:	70fb      	strb	r3, [r7, #3]
    uint32_t txTimeout = 0;
 800ee64:	2300      	movs	r3, #0
 800ee66:	60fb      	str	r3, [r7, #12]

    switch( SX1276.Settings.Modem )
 800ee68:	4b53      	ldr	r3, [pc, #332]	@ (800efb8 <SX1276Send+0x160>)
 800ee6a:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d002      	beq.n	800ee78 <SX1276Send+0x20>
 800ee72:	2b01      	cmp	r3, #1
 800ee74:	d048      	beq.n	800ef08 <SX1276Send+0xb0>
 800ee76:	e098      	b.n	800efaa <SX1276Send+0x152>
    {
    case MODEM_FSK:
        {
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800ee78:	4b4f      	ldr	r3, [pc, #316]	@ (800efb8 <SX1276Send+0x160>)
 800ee7a:	2200      	movs	r2, #0
 800ee7c:	f8a3 2148 	strh.w	r2, [r3, #328]	@ 0x148
            SX1276.Settings.FskPacketHandler.Size = size;
 800ee80:	78fb      	ldrb	r3, [r7, #3]
 800ee82:	461a      	mov	r2, r3
 800ee84:	4b4c      	ldr	r3, [pc, #304]	@ (800efb8 <SX1276Send+0x160>)
 800ee86:	f8a3 2146 	strh.w	r2, [r3, #326]	@ 0x146

            if( SX1276.Settings.Fsk.FixLen == false )
 800ee8a:	4b4b      	ldr	r3, [pc, #300]	@ (800efb8 <SX1276Send+0x160>)
 800ee8c:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 800ee90:	f083 0301 	eor.w	r3, r3, #1
 800ee94:	b2db      	uxtb	r3, r3
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d005      	beq.n	800eea6 <SX1276Send+0x4e>
            {
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
 800ee9a:	1cfb      	adds	r3, r7, #3
 800ee9c:	2101      	movs	r1, #1
 800ee9e:	4618      	mov	r0, r3
 800eea0:	f000 fd08 	bl	800f8b4 <SX1276WriteFifo>
 800eea4:	e004      	b.n	800eeb0 <SX1276Send+0x58>
            }
            else
            {
                SX1276Write( REG_PAYLOADLENGTH, size );
 800eea6:	78fb      	ldrb	r3, [r7, #3]
 800eea8:	4619      	mov	r1, r3
 800eeaa:	2032      	movs	r0, #50	@ 0x32
 800eeac:	f000 fc78 	bl	800f7a0 <SX1276Write>
            }

            if( ( size > 0 ) && ( size <= 64 ) )
 800eeb0:	78fb      	ldrb	r3, [r7, #3]
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d007      	beq.n	800eec6 <SX1276Send+0x6e>
 800eeb6:	78fb      	ldrb	r3, [r7, #3]
 800eeb8:	2b40      	cmp	r3, #64	@ 0x40
 800eeba:	d804      	bhi.n	800eec6 <SX1276Send+0x6e>
            {
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 800eebc:	78fa      	ldrb	r2, [r7, #3]
 800eebe:	4b3e      	ldr	r3, [pc, #248]	@ (800efb8 <SX1276Send+0x160>)
 800eec0:	f883 214b 	strb.w	r2, [r3, #331]	@ 0x14b
 800eec4:	e009      	b.n	800eeda <SX1276Send+0x82>
            }
            else
            {
                memcpy1( RxTxBuffer, buffer, size );
 800eec6:	78fb      	ldrb	r3, [r7, #3]
 800eec8:	461a      	mov	r2, r3
 800eeca:	6879      	ldr	r1, [r7, #4]
 800eecc:	483b      	ldr	r0, [pc, #236]	@ (800efbc <SX1276Send+0x164>)
 800eece:	f7ff f82f 	bl	800df30 <memcpy1>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 800eed2:	4b39      	ldr	r3, [pc, #228]	@ (800efb8 <SX1276Send+0x160>)
 800eed4:	2220      	movs	r2, #32
 800eed6:	f883 214b 	strb.w	r2, [r3, #331]	@ 0x14b
            }

            // Write payload buffer
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 800eeda:	4b37      	ldr	r3, [pc, #220]	@ (800efb8 <SX1276Send+0x160>)
 800eedc:	f893 314b 	ldrb.w	r3, [r3, #331]	@ 0x14b
 800eee0:	4619      	mov	r1, r3
 800eee2:	6878      	ldr	r0, [r7, #4]
 800eee4:	f000 fce6 	bl	800f8b4 <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 800eee8:	4b33      	ldr	r3, [pc, #204]	@ (800efb8 <SX1276Send+0x160>)
 800eeea:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 800eeee:	4a32      	ldr	r2, [pc, #200]	@ (800efb8 <SX1276Send+0x160>)
 800eef0:	f892 214b 	ldrb.w	r2, [r2, #331]	@ 0x14b
 800eef4:	4413      	add	r3, r2
 800eef6:	b29a      	uxth	r2, r3
 800eef8:	4b2f      	ldr	r3, [pc, #188]	@ (800efb8 <SX1276Send+0x160>)
 800eefa:	f8a3 2148 	strh.w	r2, [r3, #328]	@ 0x148
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 800eefe:	4b2e      	ldr	r3, [pc, #184]	@ (800efb8 <SX1276Send+0x160>)
 800ef00:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800ef04:	60fb      	str	r3, [r7, #12]
        }
        break;
 800ef06:	e050      	b.n	800efaa <SX1276Send+0x152>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 800ef08:	4b2b      	ldr	r3, [pc, #172]	@ (800efb8 <SX1276Send+0x160>)
 800ef0a:	f893 3161 	ldrb.w	r3, [r3, #353]	@ 0x161
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d00f      	beq.n	800ef32 <SX1276Send+0xda>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 800ef12:	2033      	movs	r0, #51	@ 0x33
 800ef14:	f000 fc56 	bl	800f7c4 <SX1276Read>
 800ef18:	4603      	mov	r3, r0
 800ef1a:	f023 0341 	bic.w	r3, r3, #65	@ 0x41
 800ef1e:	b2db      	uxtb	r3, r3
 800ef20:	4619      	mov	r1, r3
 800ef22:	2033      	movs	r0, #51	@ 0x33
 800ef24:	f000 fc3c 	bl	800f7a0 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 800ef28:	2119      	movs	r1, #25
 800ef2a:	203b      	movs	r0, #59	@ 0x3b
 800ef2c:	f000 fc38 	bl	800f7a0 <SX1276Write>
 800ef30:	e013      	b.n	800ef5a <SX1276Send+0x102>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 800ef32:	2033      	movs	r0, #51	@ 0x33
 800ef34:	f000 fc46 	bl	800f7c4 <SX1276Read>
 800ef38:	4603      	mov	r3, r0
 800ef3a:	b25b      	sxtb	r3, r3
 800ef3c:	f023 0341 	bic.w	r3, r3, #65	@ 0x41
 800ef40:	b25b      	sxtb	r3, r3
 800ef42:	f043 0301 	orr.w	r3, r3, #1
 800ef46:	b25b      	sxtb	r3, r3
 800ef48:	b2db      	uxtb	r3, r3
 800ef4a:	4619      	mov	r1, r3
 800ef4c:	2033      	movs	r0, #51	@ 0x33
 800ef4e:	f000 fc27 	bl	800f7a0 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 800ef52:	211d      	movs	r1, #29
 800ef54:	203b      	movs	r0, #59	@ 0x3b
 800ef56:	f000 fc23 	bl	800f7a0 <SX1276Write>
            }

            SX1276.Settings.LoRaPacketHandler.Size = size;
 800ef5a:	78fa      	ldrb	r2, [r7, #3]
 800ef5c:	4b16      	ldr	r3, [pc, #88]	@ (800efb8 <SX1276Send+0x160>)
 800ef5e:	f883 216c 	strb.w	r2, [r3, #364]	@ 0x16c

            // Initializes the payload size
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 800ef62:	78fb      	ldrb	r3, [r7, #3]
 800ef64:	4619      	mov	r1, r3
 800ef66:	2022      	movs	r0, #34	@ 0x22
 800ef68:	f000 fc1a 	bl	800f7a0 <SX1276Write>

            // Full buffer used for Tx
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 800ef6c:	2100      	movs	r1, #0
 800ef6e:	200e      	movs	r0, #14
 800ef70:	f000 fc16 	bl	800f7a0 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 800ef74:	2100      	movs	r1, #0
 800ef76:	200d      	movs	r0, #13
 800ef78:	f000 fc12 	bl	800f7a0 <SX1276Write>

            // FIFO operations can not take place in Sleep mode
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 800ef7c:	2001      	movs	r0, #1
 800ef7e:	f000 fc21 	bl	800f7c4 <SX1276Read>
 800ef82:	4603      	mov	r3, r0
 800ef84:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d104      	bne.n	800ef96 <SX1276Send+0x13e>
            {
                SX1276SetStby( );
 800ef8c:	f000 f830 	bl	800eff0 <SX1276SetStby>
                DelayMs( 1 );
 800ef90:	2001      	movs	r0, #1
 800ef92:	f7fd fb3b 	bl	800c60c <DelayMs>
            }
            // Write payload buffer
            SX1276WriteFifo( buffer, size );
 800ef96:	78fb      	ldrb	r3, [r7, #3]
 800ef98:	4619      	mov	r1, r3
 800ef9a:	6878      	ldr	r0, [r7, #4]
 800ef9c:	f000 fc8a 	bl	800f8b4 <SX1276WriteFifo>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 800efa0:	4b05      	ldr	r3, [pc, #20]	@ (800efb8 <SX1276Send+0x160>)
 800efa2:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 800efa6:	60fb      	str	r3, [r7, #12]
        }
        break;
 800efa8:	bf00      	nop
    }

    SX1276SetTx( txTimeout );
 800efaa:	68f8      	ldr	r0, [r7, #12]
 800efac:	f000 fa8c 	bl	800f4c8 <SX1276SetTx>
}
 800efb0:	bf00      	nop
 800efb2:	3710      	adds	r7, #16
 800efb4:	46bd      	mov	sp, r7
 800efb6:	bd80      	pop	{r7, pc}
 800efb8:	20000654 	.word	0x20000654
 800efbc:	20000554 	.word	0x20000554

0800efc0 <SX1276SetSleep>:

void SX1276SetSleep( void )
{
 800efc0:	b580      	push	{r7, lr}
 800efc2:	af00      	add	r7, sp, #0
    TimerStop( &RxTimeoutTimer );
 800efc4:	4807      	ldr	r0, [pc, #28]	@ (800efe4 <SX1276SetSleep+0x24>)
 800efc6:	f7fe fec1 	bl	800dd4c <TimerStop>
    TimerStop( &TxTimeoutTimer );
 800efca:	4807      	ldr	r0, [pc, #28]	@ (800efe8 <SX1276SetSleep+0x28>)
 800efcc:	f7fe febe 	bl	800dd4c <TimerStop>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 800efd0:	2000      	movs	r0, #0
 800efd2:	f000 fb75 	bl	800f6c0 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 800efd6:	4b05      	ldr	r3, [pc, #20]	@ (800efec <SX1276SetSleep+0x2c>)
 800efd8:	2200      	movs	r2, #0
 800efda:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
}
 800efde:	bf00      	nop
 800efe0:	bd80      	pop	{r7, pc}
 800efe2:	bf00      	nop
 800efe4:	200007d8 	.word	0x200007d8
 800efe8:	200007c4 	.word	0x200007c4
 800efec:	20000654 	.word	0x20000654

0800eff0 <SX1276SetStby>:

void SX1276SetStby( void )
{
 800eff0:	b580      	push	{r7, lr}
 800eff2:	af00      	add	r7, sp, #0
    TimerStop( &RxTimeoutTimer );
 800eff4:	4807      	ldr	r0, [pc, #28]	@ (800f014 <SX1276SetStby+0x24>)
 800eff6:	f7fe fea9 	bl	800dd4c <TimerStop>
    TimerStop( &TxTimeoutTimer );
 800effa:	4807      	ldr	r0, [pc, #28]	@ (800f018 <SX1276SetStby+0x28>)
 800effc:	f7fe fea6 	bl	800dd4c <TimerStop>

    SX1276SetOpMode( RF_OPMODE_STANDBY );
 800f000:	2001      	movs	r0, #1
 800f002:	f000 fb5d 	bl	800f6c0 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 800f006:	4b05      	ldr	r3, [pc, #20]	@ (800f01c <SX1276SetStby+0x2c>)
 800f008:	2200      	movs	r2, #0
 800f00a:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
}
 800f00e:	bf00      	nop
 800f010:	bd80      	pop	{r7, pc}
 800f012:	bf00      	nop
 800f014:	200007d8 	.word	0x200007d8
 800f018:	200007c4 	.word	0x200007c4
 800f01c:	20000654 	.word	0x20000654

0800f020 <SX1276SetRx>:

void SX1276SetRx( uint32_t timeout )
{
 800f020:	b5b0      	push	{r4, r5, r7, lr}
 800f022:	b084      	sub	sp, #16
 800f024:	af00      	add	r7, sp, #0
 800f026:	6078      	str	r0, [r7, #4]
    bool rxContinuous = false;
 800f028:	2300      	movs	r3, #0
 800f02a:	73fb      	strb	r3, [r7, #15]

    switch( SX1276.Settings.Modem )
 800f02c:	4bc4      	ldr	r3, [pc, #784]	@ (800f340 <SX1276SetRx+0x320>)
 800f02e:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 800f032:	2b00      	cmp	r3, #0
 800f034:	d002      	beq.n	800f03c <SX1276SetRx+0x1c>
 800f036:	2b01      	cmp	r3, #1
 800f038:	d03e      	beq.n	800f0b8 <SX1276SetRx+0x98>
 800f03a:	e19b      	b.n	800f374 <SX1276SetRx+0x354>
    {
    case MODEM_FSK:
        {
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 800f03c:	4bc0      	ldr	r3, [pc, #768]	@ (800f340 <SX1276SetRx+0x320>)
 800f03e:	f893 3136 	ldrb.w	r3, [r3, #310]	@ 0x136
 800f042:	73fb      	strb	r3, [r7, #15]
            // DIO1=FifoLevel
            // DIO2=SyncAddr
            // DIO3=FifoEmpty
            // DIO4=Preamble
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800f044:	2040      	movs	r0, #64	@ 0x40
 800f046:	f000 fbbd 	bl	800f7c4 <SX1276Read>
 800f04a:	4603      	mov	r3, r0
 800f04c:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
                                                                            RF_DIOMAPPING1_DIO0_00 |
 800f04e:	f003 0303 	and.w	r3, r3, #3
 800f052:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_00 |
 800f054:	f043 030c 	orr.w	r3, r3, #12
 800f058:	b25b      	sxtb	r3, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800f05a:	b2db      	uxtb	r3, r3
 800f05c:	4619      	mov	r1, r3
 800f05e:	2040      	movs	r0, #64	@ 0x40
 800f060:	f000 fb9e 	bl	800f7a0 <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO2_11 );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 800f064:	2041      	movs	r0, #65	@ 0x41
 800f066:	f000 fbad 	bl	800f7c4 <SX1276Read>
 800f06a:	4603      	mov	r3, r0
 800f06c:	f063 033e 	orn	r3, r3, #62	@ 0x3e
 800f070:	b2db      	uxtb	r3, r3
 800f072:	4619      	mov	r1, r3
 800f074:	2041      	movs	r0, #65	@ 0x41
 800f076:	f000 fb93 	bl	800f7a0 <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) |
                                                                            RF_DIOMAPPING2_DIO4_11 |
                                                                            RF_DIOMAPPING2_MAP_PREAMBLEDETECT );

            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 800f07a:	2035      	movs	r0, #53	@ 0x35
 800f07c:	f000 fba2 	bl	800f7c4 <SX1276Read>
 800f080:	4603      	mov	r3, r0
 800f082:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f086:	b2da      	uxtb	r2, r3
 800f088:	4bad      	ldr	r3, [pc, #692]	@ (800f340 <SX1276SetRx+0x320>)
 800f08a:	f883 214a 	strb.w	r2, [r3, #330]	@ 0x14a

            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 800f08e:	211e      	movs	r1, #30
 800f090:	200d      	movs	r0, #13
 800f092:	f000 fb85 	bl	800f7a0 <SX1276Write>

            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800f096:	4baa      	ldr	r3, [pc, #680]	@ (800f340 <SX1276SetRx+0x320>)
 800f098:	2200      	movs	r2, #0
 800f09a:	f883 213c 	strb.w	r2, [r3, #316]	@ 0x13c
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 800f09e:	4ba8      	ldr	r3, [pc, #672]	@ (800f340 <SX1276SetRx+0x320>)
 800f0a0:	2200      	movs	r2, #0
 800f0a2:	f883 213d 	strb.w	r2, [r3, #317]	@ 0x13d
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800f0a6:	4ba6      	ldr	r3, [pc, #664]	@ (800f340 <SX1276SetRx+0x320>)
 800f0a8:	2200      	movs	r2, #0
 800f0aa:	f8a3 2148 	strh.w	r2, [r3, #328]	@ 0x148
            SX1276.Settings.FskPacketHandler.Size = 0;
 800f0ae:	4ba4      	ldr	r3, [pc, #656]	@ (800f340 <SX1276SetRx+0x320>)
 800f0b0:	2200      	movs	r2, #0
 800f0b2:	f8a3 2146 	strh.w	r2, [r3, #326]	@ 0x146
        }
        break;
 800f0b6:	e15d      	b.n	800f374 <SX1276SetRx+0x354>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 800f0b8:	4ba1      	ldr	r3, [pc, #644]	@ (800f340 <SX1276SetRx+0x320>)
 800f0ba:	f893 3161 	ldrb.w	r3, [r3, #353]	@ 0x161
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d00f      	beq.n	800f0e2 <SX1276SetRx+0xc2>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 800f0c2:	2033      	movs	r0, #51	@ 0x33
 800f0c4:	f000 fb7e 	bl	800f7c4 <SX1276Read>
 800f0c8:	4603      	mov	r3, r0
 800f0ca:	f043 0341 	orr.w	r3, r3, #65	@ 0x41
 800f0ce:	b2db      	uxtb	r3, r3
 800f0d0:	4619      	mov	r1, r3
 800f0d2:	2033      	movs	r0, #51	@ 0x33
 800f0d4:	f000 fb64 	bl	800f7a0 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 800f0d8:	2119      	movs	r1, #25
 800f0da:	203b      	movs	r0, #59	@ 0x3b
 800f0dc:	f000 fb60 	bl	800f7a0 <SX1276Write>
 800f0e0:	e013      	b.n	800f10a <SX1276SetRx+0xea>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 800f0e2:	2033      	movs	r0, #51	@ 0x33
 800f0e4:	f000 fb6e 	bl	800f7c4 <SX1276Read>
 800f0e8:	4603      	mov	r3, r0
 800f0ea:	b25b      	sxtb	r3, r3
 800f0ec:	f023 0341 	bic.w	r3, r3, #65	@ 0x41
 800f0f0:	b25b      	sxtb	r3, r3
 800f0f2:	f043 0301 	orr.w	r3, r3, #1
 800f0f6:	b25b      	sxtb	r3, r3
 800f0f8:	b2db      	uxtb	r3, r3
 800f0fa:	4619      	mov	r1, r3
 800f0fc:	2033      	movs	r0, #51	@ 0x33
 800f0fe:	f000 fb4f 	bl	800f7a0 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 800f102:	211d      	movs	r1, #29
 800f104:	203b      	movs	r0, #59	@ 0x3b
 800f106:	f000 fb4b 	bl	800f7a0 <SX1276Write>
            }

            // ERRATA 2.3 - Receiver Spurious Reception of a LoRa Signal
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 800f10a:	4b8d      	ldr	r3, [pc, #564]	@ (800f340 <SX1276SetRx+0x320>)
 800f10c:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800f110:	2b08      	cmp	r3, #8
 800f112:	f200 80d6 	bhi.w	800f2c2 <SX1276SetRx+0x2a2>
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 800f116:	2031      	movs	r0, #49	@ 0x31
 800f118:	f000 fb54 	bl	800f7c4 <SX1276Read>
 800f11c:	4603      	mov	r3, r0
 800f11e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f122:	b2db      	uxtb	r3, r3
 800f124:	4619      	mov	r1, r3
 800f126:	2031      	movs	r0, #49	@ 0x31
 800f128:	f000 fb3a 	bl	800f7a0 <SX1276Write>
                SX1276Write( REG_LR_TEST30, 0x00 );
 800f12c:	2100      	movs	r1, #0
 800f12e:	2030      	movs	r0, #48	@ 0x30
 800f130:	f000 fb36 	bl	800f7a0 <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 800f134:	4b82      	ldr	r3, [pc, #520]	@ (800f340 <SX1276SetRx+0x320>)
 800f136:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800f13a:	2b08      	cmp	r3, #8
 800f13c:	f200 80cc 	bhi.w	800f2d8 <SX1276SetRx+0x2b8>
 800f140:	a201      	add	r2, pc, #4	@ (adr r2, 800f148 <SX1276SetRx+0x128>)
 800f142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f146:	bf00      	nop
 800f148:	0800f16d 	.word	0x0800f16d
 800f14c:	0800f1a1 	.word	0x0800f1a1
 800f150:	0800f1d5 	.word	0x0800f1d5
 800f154:	0800f209 	.word	0x0800f209
 800f158:	0800f23d 	.word	0x0800f23d
 800f15c:	0800f271 	.word	0x0800f271
 800f160:	0800f2a5 	.word	0x0800f2a5
 800f164:	0800f2af 	.word	0x0800f2af
 800f168:	0800f2b9 	.word	0x0800f2b9
                {
                case 0: // 7.8 kHz
                    SX1276Write( REG_LR_TEST2F, 0x48 );
 800f16c:	2148      	movs	r1, #72	@ 0x48
 800f16e:	202f      	movs	r0, #47	@ 0x2f
 800f170:	f000 fb16 	bl	800f7a0 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7.81e3 );
 800f174:	4b72      	ldr	r3, [pc, #456]	@ (800f340 <SX1276SetRx+0x320>)
 800f176:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800f17a:	4618      	mov	r0, r3
 800f17c:	f7f2 ff54 	bl	8002028 <__aeabi_ui2d>
 800f180:	a363      	add	r3, pc, #396	@ (adr r3, 800f310 <SX1276SetRx+0x2f0>)
 800f182:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f186:	f7f2 fe13 	bl	8001db0 <__adddf3>
 800f18a:	4602      	mov	r2, r0
 800f18c:	460b      	mov	r3, r1
 800f18e:	4610      	mov	r0, r2
 800f190:	4619      	mov	r1, r3
 800f192:	f7f3 fa9b 	bl	80026cc <__aeabi_d2uiz>
 800f196:	4603      	mov	r3, r0
 800f198:	4618      	mov	r0, r3
 800f19a:	f7fe ff51 	bl	800e040 <SX1276SetChannel>
                    break;
 800f19e:	e09b      	b.n	800f2d8 <SX1276SetRx+0x2b8>
                case 1: // 10.4 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 800f1a0:	2144      	movs	r1, #68	@ 0x44
 800f1a2:	202f      	movs	r0, #47	@ 0x2f
 800f1a4:	f000 fafc 	bl	800f7a0 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10.42e3 );
 800f1a8:	4b65      	ldr	r3, [pc, #404]	@ (800f340 <SX1276SetRx+0x320>)
 800f1aa:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800f1ae:	4618      	mov	r0, r3
 800f1b0:	f7f2 ff3a 	bl	8002028 <__aeabi_ui2d>
 800f1b4:	a358      	add	r3, pc, #352	@ (adr r3, 800f318 <SX1276SetRx+0x2f8>)
 800f1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1ba:	f7f2 fdf9 	bl	8001db0 <__adddf3>
 800f1be:	4602      	mov	r2, r0
 800f1c0:	460b      	mov	r3, r1
 800f1c2:	4610      	mov	r0, r2
 800f1c4:	4619      	mov	r1, r3
 800f1c6:	f7f3 fa81 	bl	80026cc <__aeabi_d2uiz>
 800f1ca:	4603      	mov	r3, r0
 800f1cc:	4618      	mov	r0, r3
 800f1ce:	f7fe ff37 	bl	800e040 <SX1276SetChannel>
                    break;
 800f1d2:	e081      	b.n	800f2d8 <SX1276SetRx+0x2b8>
                case 2: // 15.6 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 800f1d4:	2144      	movs	r1, #68	@ 0x44
 800f1d6:	202f      	movs	r0, #47	@ 0x2f
 800f1d8:	f000 fae2 	bl	800f7a0 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15.62e3 );
 800f1dc:	4b58      	ldr	r3, [pc, #352]	@ (800f340 <SX1276SetRx+0x320>)
 800f1de:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800f1e2:	4618      	mov	r0, r3
 800f1e4:	f7f2 ff20 	bl	8002028 <__aeabi_ui2d>
 800f1e8:	a34d      	add	r3, pc, #308	@ (adr r3, 800f320 <SX1276SetRx+0x300>)
 800f1ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1ee:	f7f2 fddf 	bl	8001db0 <__adddf3>
 800f1f2:	4602      	mov	r2, r0
 800f1f4:	460b      	mov	r3, r1
 800f1f6:	4610      	mov	r0, r2
 800f1f8:	4619      	mov	r1, r3
 800f1fa:	f7f3 fa67 	bl	80026cc <__aeabi_d2uiz>
 800f1fe:	4603      	mov	r3, r0
 800f200:	4618      	mov	r0, r3
 800f202:	f7fe ff1d 	bl	800e040 <SX1276SetChannel>
                    break;
 800f206:	e067      	b.n	800f2d8 <SX1276SetRx+0x2b8>
                case 3: // 20.8 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 800f208:	2144      	movs	r1, #68	@ 0x44
 800f20a:	202f      	movs	r0, #47	@ 0x2f
 800f20c:	f000 fac8 	bl	800f7a0 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20.83e3 );
 800f210:	4b4b      	ldr	r3, [pc, #300]	@ (800f340 <SX1276SetRx+0x320>)
 800f212:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800f216:	4618      	mov	r0, r3
 800f218:	f7f2 ff06 	bl	8002028 <__aeabi_ui2d>
 800f21c:	a342      	add	r3, pc, #264	@ (adr r3, 800f328 <SX1276SetRx+0x308>)
 800f21e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f222:	f7f2 fdc5 	bl	8001db0 <__adddf3>
 800f226:	4602      	mov	r2, r0
 800f228:	460b      	mov	r3, r1
 800f22a:	4610      	mov	r0, r2
 800f22c:	4619      	mov	r1, r3
 800f22e:	f7f3 fa4d 	bl	80026cc <__aeabi_d2uiz>
 800f232:	4603      	mov	r3, r0
 800f234:	4618      	mov	r0, r3
 800f236:	f7fe ff03 	bl	800e040 <SX1276SetChannel>
                    break;
 800f23a:	e04d      	b.n	800f2d8 <SX1276SetRx+0x2b8>
                case 4: // 31.2 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 800f23c:	2144      	movs	r1, #68	@ 0x44
 800f23e:	202f      	movs	r0, #47	@ 0x2f
 800f240:	f000 faae 	bl	800f7a0 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31.25e3 );
 800f244:	4b3e      	ldr	r3, [pc, #248]	@ (800f340 <SX1276SetRx+0x320>)
 800f246:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800f24a:	4618      	mov	r0, r3
 800f24c:	f7f2 feec 	bl	8002028 <__aeabi_ui2d>
 800f250:	a337      	add	r3, pc, #220	@ (adr r3, 800f330 <SX1276SetRx+0x310>)
 800f252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f256:	f7f2 fdab 	bl	8001db0 <__adddf3>
 800f25a:	4602      	mov	r2, r0
 800f25c:	460b      	mov	r3, r1
 800f25e:	4610      	mov	r0, r2
 800f260:	4619      	mov	r1, r3
 800f262:	f7f3 fa33 	bl	80026cc <__aeabi_d2uiz>
 800f266:	4603      	mov	r3, r0
 800f268:	4618      	mov	r0, r3
 800f26a:	f7fe fee9 	bl	800e040 <SX1276SetChannel>
                    break;
 800f26e:	e033      	b.n	800f2d8 <SX1276SetRx+0x2b8>
                case 5: // 41.4 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 800f270:	2144      	movs	r1, #68	@ 0x44
 800f272:	202f      	movs	r0, #47	@ 0x2f
 800f274:	f000 fa94 	bl	800f7a0 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41.67e3 );
 800f278:	4b31      	ldr	r3, [pc, #196]	@ (800f340 <SX1276SetRx+0x320>)
 800f27a:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800f27e:	4618      	mov	r0, r3
 800f280:	f7f2 fed2 	bl	8002028 <__aeabi_ui2d>
 800f284:	a32c      	add	r3, pc, #176	@ (adr r3, 800f338 <SX1276SetRx+0x318>)
 800f286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f28a:	f7f2 fd91 	bl	8001db0 <__adddf3>
 800f28e:	4602      	mov	r2, r0
 800f290:	460b      	mov	r3, r1
 800f292:	4610      	mov	r0, r2
 800f294:	4619      	mov	r1, r3
 800f296:	f7f3 fa19 	bl	80026cc <__aeabi_d2uiz>
 800f29a:	4603      	mov	r3, r0
 800f29c:	4618      	mov	r0, r3
 800f29e:	f7fe fecf 	bl	800e040 <SX1276SetChannel>
                    break;
 800f2a2:	e019      	b.n	800f2d8 <SX1276SetRx+0x2b8>
                case 6: // 62.5 kHz
                    SX1276Write( REG_LR_TEST2F, 0x40 );
 800f2a4:	2140      	movs	r1, #64	@ 0x40
 800f2a6:	202f      	movs	r0, #47	@ 0x2f
 800f2a8:	f000 fa7a 	bl	800f7a0 <SX1276Write>
                    break;
 800f2ac:	e014      	b.n	800f2d8 <SX1276SetRx+0x2b8>
                case 7: // 125 kHz
                    SX1276Write( REG_LR_TEST2F, 0x40 );
 800f2ae:	2140      	movs	r1, #64	@ 0x40
 800f2b0:	202f      	movs	r0, #47	@ 0x2f
 800f2b2:	f000 fa75 	bl	800f7a0 <SX1276Write>
                    break;
 800f2b6:	e00f      	b.n	800f2d8 <SX1276SetRx+0x2b8>
                case 8: // 250 kHz
                    SX1276Write( REG_LR_TEST2F, 0x40 );
 800f2b8:	2140      	movs	r1, #64	@ 0x40
 800f2ba:	202f      	movs	r0, #47	@ 0x2f
 800f2bc:	f000 fa70 	bl	800f7a0 <SX1276Write>
                    break;
 800f2c0:	e00a      	b.n	800f2d8 <SX1276SetRx+0x2b8>
                }
            }
            else
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 800f2c2:	2031      	movs	r0, #49	@ 0x31
 800f2c4:	f000 fa7e 	bl	800f7c4 <SX1276Read>
 800f2c8:	4603      	mov	r3, r0
 800f2ca:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800f2ce:	b2db      	uxtb	r3, r3
 800f2d0:	4619      	mov	r1, r3
 800f2d2:	2031      	movs	r0, #49	@ 0x31
 800f2d4:	f000 fa64 	bl	800f7a0 <SX1276Write>
            }

            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 800f2d8:	4b19      	ldr	r3, [pc, #100]	@ (800f340 <SX1276SetRx+0x320>)
 800f2da:	f893 3162 	ldrb.w	r3, [r3, #354]	@ 0x162
 800f2de:	73fb      	strb	r3, [r7, #15]

            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800f2e0:	4b17      	ldr	r3, [pc, #92]	@ (800f340 <SX1276SetRx+0x320>)
 800f2e2:	f893 315f 	ldrb.w	r3, [r3, #351]	@ 0x15f
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d02c      	beq.n	800f344 <SX1276SetRx+0x324>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 800f2ea:	211d      	movs	r1, #29
 800f2ec:	2011      	movs	r0, #17
 800f2ee:	f000 fa57 	bl	800f7a0 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 800f2f2:	2040      	movs	r0, #64	@ 0x40
 800f2f4:	f000 fa66 	bl	800f7c4 <SX1276Read>
 800f2f8:	4603      	mov	r3, r0
 800f2fa:	f003 0333 	and.w	r3, r3, #51	@ 0x33
 800f2fe:	b2db      	uxtb	r3, r3
 800f300:	4619      	mov	r1, r3
 800f302:	2040      	movs	r0, #64	@ 0x40
 800f304:	f000 fa4c 	bl	800f7a0 <SX1276Write>
 800f308:	e02b      	b.n	800f362 <SX1276SetRx+0x342>
 800f30a:	bf00      	nop
 800f30c:	f3af 8000 	nop.w
 800f310:	00000000 	.word	0x00000000
 800f314:	40be8200 	.word	0x40be8200
 800f318:	00000000 	.word	0x00000000
 800f31c:	40c45a00 	.word	0x40c45a00
 800f320:	00000000 	.word	0x00000000
 800f324:	40ce8200 	.word	0x40ce8200
 800f328:	00000000 	.word	0x00000000
 800f32c:	40d45780 	.word	0x40d45780
 800f330:	00000000 	.word	0x00000000
 800f334:	40de8480 	.word	0x40de8480
 800f338:	00000000 	.word	0x00000000
 800f33c:	40e458c0 	.word	0x40e458c0
 800f340:	20000654 	.word	0x20000654
            }
            else
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 800f344:	211f      	movs	r1, #31
 800f346:	2011      	movs	r0, #17
 800f348:	f000 fa2a 	bl	800f7a0 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 800f34c:	2040      	movs	r0, #64	@ 0x40
 800f34e:	f000 fa39 	bl	800f7c4 <SX1276Read>
 800f352:	4603      	mov	r3, r0
 800f354:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f358:	b2db      	uxtb	r3, r3
 800f35a:	4619      	mov	r1, r3
 800f35c:	2040      	movs	r0, #64	@ 0x40
 800f35e:	f000 fa1f 	bl	800f7a0 <SX1276Write>
            }
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 800f362:	2100      	movs	r1, #0
 800f364:	200f      	movs	r0, #15
 800f366:	f000 fa1b 	bl	800f7a0 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 800f36a:	2100      	movs	r1, #0
 800f36c:	200d      	movs	r0, #13
 800f36e:	f000 fa17 	bl	800f7a0 <SX1276Write>
        }
        break;
 800f372:	bf00      	nop
    }

    memset( RxTxBuffer, 0, ( size_t )RX_BUFFER_SIZE );
 800f374:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800f378:	2100      	movs	r1, #0
 800f37a:	484a      	ldr	r0, [pc, #296]	@ (800f4a4 <SX1276SetRx+0x484>)
 800f37c:	f002 f824 	bl	80113c8 <memset>

    SX1276.Settings.State = RF_RX_RUNNING;
 800f380:	4b49      	ldr	r3, [pc, #292]	@ (800f4a8 <SX1276SetRx+0x488>)
 800f382:	2201      	movs	r2, #1
 800f384:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
    if( timeout != 0 )
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d006      	beq.n	800f39c <SX1276SetRx+0x37c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 800f38e:	6879      	ldr	r1, [r7, #4]
 800f390:	4846      	ldr	r0, [pc, #280]	@ (800f4ac <SX1276SetRx+0x48c>)
 800f392:	f7fe fd99 	bl	800dec8 <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 800f396:	4845      	ldr	r0, [pc, #276]	@ (800f4ac <SX1276SetRx+0x48c>)
 800f398:	f7fe fb90 	bl	800dabc <TimerStart>
    }

    if( SX1276.Settings.Modem == MODEM_FSK )
 800f39c:	4b42      	ldr	r3, [pc, #264]	@ (800f4a8 <SX1276SetRx+0x488>)
 800f39e:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d16f      	bne.n	800f486 <SX1276SetRx+0x466>
    {
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
 800f3a6:	2005      	movs	r0, #5
 800f3a8:	f000 f98a 	bl	800f6c0 <SX1276SetOpMode>

        if( rxContinuous == false )
 800f3ac:	7bfb      	ldrb	r3, [r7, #15]
 800f3ae:	f083 0301 	eor.w	r3, r3, #1
 800f3b2:	b2db      	uxtb	r3, r3
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d070      	beq.n	800f49a <SX1276SetRx+0x47a>
        {
            TimerSetValue( &RxTimeoutSyncWord, ceil( ( 8.0 * ( SX1276.Settings.Fsk.PreambleLen +
 800f3b8:	4b3b      	ldr	r3, [pc, #236]	@ (800f4a8 <SX1276SetRx+0x488>)
 800f3ba:	f8b3 3130 	ldrh.w	r3, [r3, #304]	@ 0x130
 800f3be:	4618      	mov	r0, r3
 800f3c0:	f7f2 fe42 	bl	8002048 <__aeabi_i2d>
 800f3c4:	4604      	mov	r4, r0
 800f3c6:	460d      	mov	r5, r1
                                                             ( ( SX1276Read( REG_SYNCCONFIG ) &
 800f3c8:	2027      	movs	r0, #39	@ 0x27
 800f3ca:	f000 f9fb 	bl	800f7c4 <SX1276Read>
 800f3ce:	4603      	mov	r3, r0
 800f3d0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
                                                                ~RF_SYNCCONFIG_SYNCSIZE_MASK ) +
 800f3d4:	4618      	mov	r0, r3
 800f3d6:	f7f2 fe37 	bl	8002048 <__aeabi_i2d>
 800f3da:	f04f 0200 	mov.w	r2, #0
 800f3de:	4b34      	ldr	r3, [pc, #208]	@ (800f4b0 <SX1276SetRx+0x490>)
 800f3e0:	f7f2 fce6 	bl	8001db0 <__adddf3>
 800f3e4:	4602      	mov	r2, r0
 800f3e6:	460b      	mov	r3, r1
            TimerSetValue( &RxTimeoutSyncWord, ceil( ( 8.0 * ( SX1276.Settings.Fsk.PreambleLen +
 800f3e8:	4620      	mov	r0, r4
 800f3ea:	4629      	mov	r1, r5
 800f3ec:	f7f2 fce0 	bl	8001db0 <__adddf3>
 800f3f0:	4602      	mov	r2, r0
 800f3f2:	460b      	mov	r3, r1
 800f3f4:	4610      	mov	r0, r2
 800f3f6:	4619      	mov	r1, r3
                                                                1.0 ) + 10.0 ) /
 800f3f8:	f04f 0200 	mov.w	r2, #0
 800f3fc:	4b2d      	ldr	r3, [pc, #180]	@ (800f4b4 <SX1276SetRx+0x494>)
 800f3fe:	f7f2 fcd7 	bl	8001db0 <__adddf3>
 800f402:	4602      	mov	r2, r0
 800f404:	460b      	mov	r3, r1
 800f406:	4610      	mov	r0, r2
 800f408:	4619      	mov	r1, r3
            TimerSetValue( &RxTimeoutSyncWord, ceil( ( 8.0 * ( SX1276.Settings.Fsk.PreambleLen +
 800f40a:	f04f 0200 	mov.w	r2, #0
 800f40e:	4b2a      	ldr	r3, [pc, #168]	@ (800f4b8 <SX1276SetRx+0x498>)
 800f410:	f7f2 fe84 	bl	800211c <__aeabi_dmul>
 800f414:	4602      	mov	r2, r0
 800f416:	460b      	mov	r3, r1
 800f418:	4614      	mov	r4, r2
 800f41a:	461d      	mov	r5, r3
                                                             ( double )SX1276.Settings.Fsk.Datarate ) * 1e3 ) + 4 );
 800f41c:	4b22      	ldr	r3, [pc, #136]	@ (800f4a8 <SX1276SetRx+0x488>)
 800f41e:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 800f422:	4618      	mov	r0, r3
 800f424:	f7f2 fe00 	bl	8002028 <__aeabi_ui2d>
 800f428:	4602      	mov	r2, r0
 800f42a:	460b      	mov	r3, r1
                                                                1.0 ) + 10.0 ) /
 800f42c:	4620      	mov	r0, r4
 800f42e:	4629      	mov	r1, r5
 800f430:	f7f2 ff9e 	bl	8002370 <__aeabi_ddiv>
 800f434:	4602      	mov	r2, r0
 800f436:	460b      	mov	r3, r1
 800f438:	4610      	mov	r0, r2
 800f43a:	4619      	mov	r1, r3
            TimerSetValue( &RxTimeoutSyncWord, ceil( ( 8.0 * ( SX1276.Settings.Fsk.PreambleLen +
 800f43c:	f04f 0200 	mov.w	r2, #0
 800f440:	4b1e      	ldr	r3, [pc, #120]	@ (800f4bc <SX1276SetRx+0x49c>)
 800f442:	f7f2 fe6b 	bl	800211c <__aeabi_dmul>
 800f446:	4602      	mov	r2, r0
 800f448:	460b      	mov	r3, r1
 800f44a:	ec43 2b17 	vmov	d7, r2, r3
 800f44e:	eeb0 0a47 	vmov.f32	s0, s14
 800f452:	eef0 0a67 	vmov.f32	s1, s15
 800f456:	f005 fb23 	bl	8014aa0 <ceil>
 800f45a:	ec51 0b10 	vmov	r0, r1, d0
                                                             ( double )SX1276.Settings.Fsk.Datarate ) * 1e3 ) + 4 );
 800f45e:	f04f 0200 	mov.w	r2, #0
 800f462:	4b17      	ldr	r3, [pc, #92]	@ (800f4c0 <SX1276SetRx+0x4a0>)
 800f464:	f7f2 fca4 	bl	8001db0 <__adddf3>
 800f468:	4602      	mov	r2, r0
 800f46a:	460b      	mov	r3, r1
            TimerSetValue( &RxTimeoutSyncWord, ceil( ( 8.0 * ( SX1276.Settings.Fsk.PreambleLen +
 800f46c:	4610      	mov	r0, r2
 800f46e:	4619      	mov	r1, r3
 800f470:	f7f3 f92c 	bl	80026cc <__aeabi_d2uiz>
 800f474:	4603      	mov	r3, r0
 800f476:	4619      	mov	r1, r3
 800f478:	4812      	ldr	r0, [pc, #72]	@ (800f4c4 <SX1276SetRx+0x4a4>)
 800f47a:	f7fe fd25 	bl	800dec8 <TimerSetValue>
            TimerStart( &RxTimeoutSyncWord );
 800f47e:	4811      	ldr	r0, [pc, #68]	@ (800f4c4 <SX1276SetRx+0x4a4>)
 800f480:	f7fe fb1c 	bl	800dabc <TimerStart>
        else
        {
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
        }
    }
}
 800f484:	e009      	b.n	800f49a <SX1276SetRx+0x47a>
        if( rxContinuous == true )
 800f486:	7bfb      	ldrb	r3, [r7, #15]
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d003      	beq.n	800f494 <SX1276SetRx+0x474>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 800f48c:	2005      	movs	r0, #5
 800f48e:	f000 f917 	bl	800f6c0 <SX1276SetOpMode>
}
 800f492:	e002      	b.n	800f49a <SX1276SetRx+0x47a>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 800f494:	2006      	movs	r0, #6
 800f496:	f000 f913 	bl	800f6c0 <SX1276SetOpMode>
}
 800f49a:	bf00      	nop
 800f49c:	3710      	adds	r7, #16
 800f49e:	46bd      	mov	sp, r7
 800f4a0:	bdb0      	pop	{r4, r5, r7, pc}
 800f4a2:	bf00      	nop
 800f4a4:	20000554 	.word	0x20000554
 800f4a8:	20000654 	.word	0x20000654
 800f4ac:	200007d8 	.word	0x200007d8
 800f4b0:	3ff00000 	.word	0x3ff00000
 800f4b4:	40240000 	.word	0x40240000
 800f4b8:	40200000 	.word	0x40200000
 800f4bc:	408f4000 	.word	0x408f4000
 800f4c0:	40100000 	.word	0x40100000
 800f4c4:	200007ec 	.word	0x200007ec

0800f4c8 <SX1276SetTx>:

void SX1276SetTx( uint32_t timeout )
{
 800f4c8:	b580      	push	{r7, lr}
 800f4ca:	b082      	sub	sp, #8
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	6078      	str	r0, [r7, #4]
    TimerSetValue( &TxTimeoutTimer, timeout );
 800f4d0:	6879      	ldr	r1, [r7, #4]
 800f4d2:	4837      	ldr	r0, [pc, #220]	@ (800f5b0 <SX1276SetTx+0xe8>)
 800f4d4:	f7fe fcf8 	bl	800dec8 <TimerSetValue>

    switch( SX1276.Settings.Modem )
 800f4d8:	4b36      	ldr	r3, [pc, #216]	@ (800f5b4 <SX1276SetTx+0xec>)
 800f4da:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d002      	beq.n	800f4e8 <SX1276SetTx+0x20>
 800f4e2:	2b01      	cmp	r3, #1
 800f4e4:	d026      	beq.n	800f534 <SX1276SetTx+0x6c>
 800f4e6:	e054      	b.n	800f592 <SX1276SetTx+0xca>
            // DIO1=FifoEmpty
            // DIO2=FifoFull
            // DIO3=FifoEmpty
            // DIO4=LowBat
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800f4e8:	2040      	movs	r0, #64	@ 0x40
 800f4ea:	f000 f96b 	bl	800f7c4 <SX1276Read>
 800f4ee:	4603      	mov	r3, r0
 800f4f0:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
 800f4f2:	f003 0303 	and.w	r3, r3, #3
 800f4f6:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
 800f4f8:	f043 0310 	orr.w	r3, r3, #16
 800f4fc:	b25b      	sxtb	r3, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800f4fe:	b2db      	uxtb	r3, r3
 800f500:	4619      	mov	r1, r3
 800f502:	2040      	movs	r0, #64	@ 0x40
 800f504:	f000 f94c 	bl	800f7a0 <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO1_01 );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 800f508:	2041      	movs	r0, #65	@ 0x41
 800f50a:	f000 f95b 	bl	800f7c4 <SX1276Read>
 800f50e:	4603      	mov	r3, r0
 800f510:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800f514:	b2db      	uxtb	r3, r3
 800f516:	4619      	mov	r1, r3
 800f518:	2041      	movs	r0, #65	@ 0x41
 800f51a:	f000 f941 	bl	800f7a0 <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) );
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 800f51e:	2035      	movs	r0, #53	@ 0x35
 800f520:	f000 f950 	bl	800f7c4 <SX1276Read>
 800f524:	4603      	mov	r3, r0
 800f526:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f52a:	b2da      	uxtb	r2, r3
 800f52c:	4b21      	ldr	r3, [pc, #132]	@ (800f5b4 <SX1276SetTx+0xec>)
 800f52e:	f883 214a 	strb.w	r2, [r3, #330]	@ 0x14a
        }
        break;
 800f532:	e02e      	b.n	800f592 <SX1276SetTx+0xca>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800f534:	4b1f      	ldr	r3, [pc, #124]	@ (800f5b4 <SX1276SetTx+0xec>)
 800f536:	f893 315f 	ldrb.w	r3, [r3, #351]	@ 0x15f
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d014      	beq.n	800f568 <SX1276SetTx+0xa0>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800f53e:	21f5      	movs	r1, #245	@ 0xf5
 800f540:	2011      	movs	r0, #17
 800f542:	f000 f92d 	bl	800f7a0 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=TxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 800f546:	2040      	movs	r0, #64	@ 0x40
 800f548:	f000 f93c 	bl	800f7c4 <SX1276Read>
 800f54c:	4603      	mov	r3, r0
 800f54e:	b25b      	sxtb	r3, r3
 800f550:	f003 0333 	and.w	r3, r3, #51	@ 0x33
 800f554:	b25b      	sxtb	r3, r3
 800f556:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f55a:	b25b      	sxtb	r3, r3
 800f55c:	b2db      	uxtb	r3, r3
 800f55e:	4619      	mov	r1, r3
 800f560:	2040      	movs	r0, #64	@ 0x40
 800f562:	f000 f91d 	bl	800f7a0 <SX1276Write>

                // DIO0=TxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
            }
        }
        break;
 800f566:	e013      	b.n	800f590 <SX1276SetTx+0xc8>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800f568:	21f7      	movs	r1, #247	@ 0xf7
 800f56a:	2011      	movs	r0, #17
 800f56c:	f000 f918 	bl	800f7a0 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 800f570:	2040      	movs	r0, #64	@ 0x40
 800f572:	f000 f927 	bl	800f7c4 <SX1276Read>
 800f576:	4603      	mov	r3, r0
 800f578:	b25b      	sxtb	r3, r3
 800f57a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f57e:	b25b      	sxtb	r3, r3
 800f580:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f584:	b25b      	sxtb	r3, r3
 800f586:	b2db      	uxtb	r3, r3
 800f588:	4619      	mov	r1, r3
 800f58a:	2040      	movs	r0, #64	@ 0x40
 800f58c:	f000 f908 	bl	800f7a0 <SX1276Write>
        break;
 800f590:	bf00      	nop
    }

    SX1276.Settings.State = RF_TX_RUNNING;
 800f592:	4b08      	ldr	r3, [pc, #32]	@ (800f5b4 <SX1276SetTx+0xec>)
 800f594:	2202      	movs	r2, #2
 800f596:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
    TimerStart( &TxTimeoutTimer );
 800f59a:	4805      	ldr	r0, [pc, #20]	@ (800f5b0 <SX1276SetTx+0xe8>)
 800f59c:	f7fe fa8e 	bl	800dabc <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 800f5a0:	2003      	movs	r0, #3
 800f5a2:	f000 f88d 	bl	800f6c0 <SX1276SetOpMode>
}
 800f5a6:	bf00      	nop
 800f5a8:	3708      	adds	r7, #8
 800f5aa:	46bd      	mov	sp, r7
 800f5ac:	bd80      	pop	{r7, pc}
 800f5ae:	bf00      	nop
 800f5b0:	200007c4 	.word	0x200007c4
 800f5b4:	20000654 	.word	0x20000654

0800f5b8 <SX1276StartCad>:

void SX1276StartCad( void )
{
 800f5b8:	b580      	push	{r7, lr}
 800f5ba:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 800f5bc:	4b10      	ldr	r3, [pc, #64]	@ (800f600 <SX1276StartCad+0x48>)
 800f5be:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d019      	beq.n	800f5fa <SX1276StartCad+0x42>
 800f5c6:	2b01      	cmp	r3, #1
 800f5c8:	d000      	beq.n	800f5cc <SX1276StartCad+0x14>
            SX1276.Settings.State = RF_CAD;
            SX1276SetOpMode( RFLR_OPMODE_CAD );
        }
        break;
    default:
        break;
 800f5ca:	e017      	b.n	800f5fc <SX1276StartCad+0x44>
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800f5cc:	21fa      	movs	r1, #250	@ 0xfa
 800f5ce:	2011      	movs	r0, #17
 800f5d0:	f000 f8e6 	bl	800f7a0 <SX1276Write>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 800f5d4:	2040      	movs	r0, #64	@ 0x40
 800f5d6:	f000 f8f5 	bl	800f7c4 <SX1276Read>
 800f5da:	4603      	mov	r3, r0
 800f5dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f5e0:	b2db      	uxtb	r3, r3
 800f5e2:	4619      	mov	r1, r3
 800f5e4:	2040      	movs	r0, #64	@ 0x40
 800f5e6:	f000 f8db 	bl	800f7a0 <SX1276Write>
            SX1276.Settings.State = RF_CAD;
 800f5ea:	4b05      	ldr	r3, [pc, #20]	@ (800f600 <SX1276StartCad+0x48>)
 800f5ec:	2203      	movs	r2, #3
 800f5ee:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 800f5f2:	2007      	movs	r0, #7
 800f5f4:	f000 f864 	bl	800f6c0 <SX1276SetOpMode>
        break;
 800f5f8:	e000      	b.n	800f5fc <SX1276StartCad+0x44>
        break;
 800f5fa:	bf00      	nop
    }
}
 800f5fc:	bf00      	nop
 800f5fe:	bd80      	pop	{r7, pc}
 800f600:	20000654 	.word	0x20000654

0800f604 <SX1276ReadRssi>:

int16_t SX1276ReadRssi( RadioModems_t modem )
{
 800f604:	b580      	push	{r7, lr}
 800f606:	b084      	sub	sp, #16
 800f608:	af00      	add	r7, sp, #0
 800f60a:	4603      	mov	r3, r0
 800f60c:	71fb      	strb	r3, [r7, #7]
    int16_t rssi = 0;
 800f60e:	2300      	movs	r3, #0
 800f610:	81fb      	strh	r3, [r7, #14]

    switch( modem )
 800f612:	79fb      	ldrb	r3, [r7, #7]
 800f614:	2b00      	cmp	r3, #0
 800f616:	d002      	beq.n	800f61e <SX1276ReadRssi+0x1a>
 800f618:	2b01      	cmp	r3, #1
 800f61a:	d00a      	beq.n	800f632 <SX1276ReadRssi+0x2e>
 800f61c:	e01f      	b.n	800f65e <SX1276ReadRssi+0x5a>
    {
    case MODEM_FSK:
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 800f61e:	2011      	movs	r0, #17
 800f620:	f000 f8d0 	bl	800f7c4 <SX1276Read>
 800f624:	4603      	mov	r3, r0
 800f626:	085b      	lsrs	r3, r3, #1
 800f628:	b2db      	uxtb	r3, r3
 800f62a:	425b      	negs	r3, r3
 800f62c:	b29b      	uxth	r3, r3
 800f62e:	81fb      	strh	r3, [r7, #14]
        break;
 800f630:	e019      	b.n	800f666 <SX1276ReadRssi+0x62>
    case MODEM_LORA:
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800f632:	4b10      	ldr	r3, [pc, #64]	@ (800f674 <SX1276ReadRssi+0x70>)
 800f634:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800f638:	4a0f      	ldr	r2, [pc, #60]	@ (800f678 <SX1276ReadRssi+0x74>)
 800f63a:	4293      	cmp	r3, r2
 800f63c:	d907      	bls.n	800f64e <SX1276ReadRssi+0x4a>
        {
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 800f63e:	201b      	movs	r0, #27
 800f640:	f000 f8c0 	bl	800f7c4 <SX1276Read>
 800f644:	4603      	mov	r3, r0
 800f646:	3b9d      	subs	r3, #157	@ 0x9d
 800f648:	b29b      	uxth	r3, r3
 800f64a:	81fb      	strh	r3, [r7, #14]
        }
        else
        {
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
        }
        break;
 800f64c:	e00b      	b.n	800f666 <SX1276ReadRssi+0x62>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 800f64e:	201b      	movs	r0, #27
 800f650:	f000 f8b8 	bl	800f7c4 <SX1276Read>
 800f654:	4603      	mov	r3, r0
 800f656:	3ba4      	subs	r3, #164	@ 0xa4
 800f658:	b29b      	uxth	r3, r3
 800f65a:	81fb      	strh	r3, [r7, #14]
        break;
 800f65c:	e003      	b.n	800f666 <SX1276ReadRssi+0x62>
    default:
        rssi = -1;
 800f65e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f662:	81fb      	strh	r3, [r7, #14]
        break;
 800f664:	bf00      	nop
    }
    return rssi;
 800f666:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800f66a:	4618      	mov	r0, r3
 800f66c:	3710      	adds	r7, #16
 800f66e:	46bd      	mov	sp, r7
 800f670:	bd80      	pop	{r7, pc}
 800f672:	bf00      	nop
 800f674:	20000654 	.word	0x20000654
 800f678:	1f4add40 	.word	0x1f4add40

0800f67c <SX1276Reset>:

void SX1276Reset( void )
{
 800f67c:	b580      	push	{r7, lr}
 800f67e:	b082      	sub	sp, #8
 800f680:	af02      	add	r7, sp, #8
    // Set RESET pin to 0
    GpioInit( &SX1276.Reset, RADIO_RESET, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800f682:	2300      	movs	r3, #0
 800f684:	9301      	str	r3, [sp, #4]
 800f686:	2300      	movs	r3, #0
 800f688:	9300      	str	r3, [sp, #0]
 800f68a:	2300      	movs	r3, #0
 800f68c:	2201      	movs	r2, #1
 800f68e:	210b      	movs	r1, #11
 800f690:	480a      	ldr	r0, [pc, #40]	@ (800f6bc <SX1276Reset+0x40>)
 800f692:	f7fd fab5 	bl	800cc00 <GpioInit>

    // Wait 1 ms
    DelayMs( 1 );
 800f696:	2001      	movs	r0, #1
 800f698:	f7fc ffb8 	bl	800c60c <DelayMs>

    // Configure RESET as input
    GpioInit( &SX1276.Reset, RADIO_RESET, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 1 );
 800f69c:	2301      	movs	r3, #1
 800f69e:	9301      	str	r3, [sp, #4]
 800f6a0:	2300      	movs	r3, #0
 800f6a2:	9300      	str	r3, [sp, #0]
 800f6a4:	2300      	movs	r3, #0
 800f6a6:	2200      	movs	r2, #0
 800f6a8:	210b      	movs	r1, #11
 800f6aa:	4804      	ldr	r0, [pc, #16]	@ (800f6bc <SX1276Reset+0x40>)
 800f6ac:	f7fd faa8 	bl	800cc00 <GpioInit>

    // Wait 6 ms
    DelayMs( 6 );
 800f6b0:	2006      	movs	r0, #6
 800f6b2:	f7fc ffab 	bl	800c60c <DelayMs>
}
 800f6b6:	bf00      	nop
 800f6b8:	46bd      	mov	sp, r7
 800f6ba:	bd80      	pop	{r7, pc}
 800f6bc:	20000654 	.word	0x20000654

0800f6c0 <SX1276SetOpMode>:

void SX1276SetOpMode( uint8_t opMode )
{
 800f6c0:	b580      	push	{r7, lr}
 800f6c2:	b082      	sub	sp, #8
 800f6c4:	af00      	add	r7, sp, #0
 800f6c6:	4603      	mov	r3, r0
 800f6c8:	71fb      	strb	r3, [r7, #7]
    if( opMode == RF_OPMODE_SLEEP )
 800f6ca:	79fb      	ldrb	r3, [r7, #7]
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d103      	bne.n	800f6d8 <SX1276SetOpMode+0x18>
    {
        SX1276SetAntSwLowPower( true );
 800f6d0:	2001      	movs	r0, #1
 800f6d2:	f7fe f951 	bl	800d978 <SX1276SetAntSwLowPower>
 800f6d6:	e00c      	b.n	800f6f2 <SX1276SetOpMode+0x32>
    }
    else
    {
        SX1276SetAntSwLowPower( false );
 800f6d8:	2000      	movs	r0, #0
 800f6da:	f7fe f94d 	bl	800d978 <SX1276SetAntSwLowPower>
        if( opMode == RF_OPMODE_TRANSMITTER )
 800f6de:	79fb      	ldrb	r3, [r7, #7]
 800f6e0:	2b03      	cmp	r3, #3
 800f6e2:	d103      	bne.n	800f6ec <SX1276SetOpMode+0x2c>
        {
            SX1276SetAntSw( 1 );
 800f6e4:	2001      	movs	r0, #1
 800f6e6:	f7fe f9a1 	bl	800da2c <SX1276SetAntSw>
 800f6ea:	e002      	b.n	800f6f2 <SX1276SetOpMode+0x32>
        }
        else
        {
            SX1276SetAntSw( 0 );
 800f6ec:	2000      	movs	r0, #0
 800f6ee:	f7fe f99d 	bl	800da2c <SX1276SetAntSw>
        }
    }
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 800f6f2:	2001      	movs	r0, #1
 800f6f4:	f000 f866 	bl	800f7c4 <SX1276Read>
 800f6f8:	4603      	mov	r3, r0
 800f6fa:	b25b      	sxtb	r3, r3
 800f6fc:	f023 0307 	bic.w	r3, r3, #7
 800f700:	b25a      	sxtb	r2, r3
 800f702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f706:	4313      	orrs	r3, r2
 800f708:	b25b      	sxtb	r3, r3
 800f70a:	b2db      	uxtb	r3, r3
 800f70c:	4619      	mov	r1, r3
 800f70e:	2001      	movs	r0, #1
 800f710:	f000 f846 	bl	800f7a0 <SX1276Write>
}
 800f714:	bf00      	nop
 800f716:	3708      	adds	r7, #8
 800f718:	46bd      	mov	sp, r7
 800f71a:	bd80      	pop	{r7, pc}

0800f71c <SX1276SetModem>:

void SX1276SetModem( RadioModems_t modem )
{
 800f71c:	b580      	push	{r7, lr}
 800f71e:	b082      	sub	sp, #8
 800f720:	af00      	add	r7, sp, #0
 800f722:	4603      	mov	r3, r0
 800f724:	71fb      	strb	r3, [r7, #7]
/*    if( SX1276.Settings.Modem == modem )
    {
        return;
    }
PKDEBUG */
    SX1276.Settings.Modem = modem;
 800f726:	4a1d      	ldr	r2, [pc, #116]	@ (800f79c <SX1276SetModem+0x80>)
 800f728:	79fb      	ldrb	r3, [r7, #7]
 800f72a:	f882 3115 	strb.w	r3, [r2, #277]	@ 0x115
    switch( SX1276.Settings.Modem )
 800f72e:	4b1b      	ldr	r3, [pc, #108]	@ (800f79c <SX1276SetModem+0x80>)
 800f730:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 800f734:	2b01      	cmp	r3, #1
 800f736:	d016      	beq.n	800f766 <SX1276SetModem+0x4a>
    {
    default:
    case MODEM_FSK:
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 800f738:	2000      	movs	r0, #0
 800f73a:	f7ff ffc1 	bl	800f6c0 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 800f73e:	2001      	movs	r0, #1
 800f740:	f000 f840 	bl	800f7c4 <SX1276Read>
 800f744:	4603      	mov	r3, r0
 800f746:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f74a:	b2db      	uxtb	r3, r3
 800f74c:	4619      	mov	r1, r3
 800f74e:	2001      	movs	r0, #1
 800f750:	f000 f826 	bl	800f7a0 <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 800f754:	2100      	movs	r1, #0
 800f756:	2040      	movs	r0, #64	@ 0x40
 800f758:	f000 f822 	bl	800f7a0 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 800f75c:	2130      	movs	r1, #48	@ 0x30
 800f75e:	2041      	movs	r0, #65	@ 0x41
 800f760:	f000 f81e 	bl	800f7a0 <SX1276Write>
        break;
 800f764:	e016      	b.n	800f794 <SX1276SetModem+0x78>
    case MODEM_LORA:
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 800f766:	2000      	movs	r0, #0
 800f768:	f7ff ffaa 	bl	800f6c0 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 800f76c:	2001      	movs	r0, #1
 800f76e:	f000 f829 	bl	800f7c4 <SX1276Read>
 800f772:	4603      	mov	r3, r0
 800f774:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800f778:	b2db      	uxtb	r3, r3
 800f77a:	4619      	mov	r1, r3
 800f77c:	2001      	movs	r0, #1
 800f77e:	f000 f80f 	bl	800f7a0 <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 800f782:	2100      	movs	r1, #0
 800f784:	2040      	movs	r0, #64	@ 0x40
 800f786:	f000 f80b 	bl	800f7a0 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 800f78a:	2100      	movs	r1, #0
 800f78c:	2041      	movs	r0, #65	@ 0x41
 800f78e:	f000 f807 	bl	800f7a0 <SX1276Write>
        break;
 800f792:	bf00      	nop
    }
}
 800f794:	bf00      	nop
 800f796:	3708      	adds	r7, #8
 800f798:	46bd      	mov	sp, r7
 800f79a:	bd80      	pop	{r7, pc}
 800f79c:	20000654 	.word	0x20000654

0800f7a0 <SX1276Write>:

void SX1276Write( uint8_t addr, uint8_t data )
{
 800f7a0:	b580      	push	{r7, lr}
 800f7a2:	b082      	sub	sp, #8
 800f7a4:	af00      	add	r7, sp, #0
 800f7a6:	4603      	mov	r3, r0
 800f7a8:	460a      	mov	r2, r1
 800f7aa:	71fb      	strb	r3, [r7, #7]
 800f7ac:	4613      	mov	r3, r2
 800f7ae:	71bb      	strb	r3, [r7, #6]
    SX1276WriteBuffer( addr, &data, 1 );
 800f7b0:	1db9      	adds	r1, r7, #6
 800f7b2:	79fb      	ldrb	r3, [r7, #7]
 800f7b4:	2201      	movs	r2, #1
 800f7b6:	4618      	mov	r0, r3
 800f7b8:	f000 f816 	bl	800f7e8 <SX1276WriteBuffer>
}
 800f7bc:	bf00      	nop
 800f7be:	3708      	adds	r7, #8
 800f7c0:	46bd      	mov	sp, r7
 800f7c2:	bd80      	pop	{r7, pc}

0800f7c4 <SX1276Read>:

uint8_t SX1276Read( uint8_t addr )
{
 800f7c4:	b580      	push	{r7, lr}
 800f7c6:	b084      	sub	sp, #16
 800f7c8:	af00      	add	r7, sp, #0
 800f7ca:	4603      	mov	r3, r0
 800f7cc:	71fb      	strb	r3, [r7, #7]
    uint8_t data;
    SX1276ReadBuffer( addr, &data, 1 );
 800f7ce:	f107 010f 	add.w	r1, r7, #15
 800f7d2:	79fb      	ldrb	r3, [r7, #7]
 800f7d4:	2201      	movs	r2, #1
 800f7d6:	4618      	mov	r0, r3
 800f7d8:	f000 f832 	bl	800f840 <SX1276ReadBuffer>
    return data;
 800f7dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7de:	4618      	mov	r0, r3
 800f7e0:	3710      	adds	r7, #16
 800f7e2:	46bd      	mov	sp, r7
 800f7e4:	bd80      	pop	{r7, pc}
	...

0800f7e8 <SX1276WriteBuffer>:

void SX1276WriteBuffer( uint8_t addr, uint8_t *buffer, uint8_t size )
{
 800f7e8:	b580      	push	{r7, lr}
 800f7ea:	b082      	sub	sp, #8
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	4603      	mov	r3, r0
 800f7f0:	6039      	str	r1, [r7, #0]
 800f7f2:	71fb      	strb	r3, [r7, #7]
 800f7f4:	4613      	mov	r3, r2
 800f7f6:	71bb      	strb	r3, [r7, #6]
//    uint8_t i;

    //NSS = 0;
    GpioWrite( &SX1276.Spi.Nss, 0 );
 800f7f8:	2100      	movs	r1, #0
 800f7fa:	480f      	ldr	r0, [pc, #60]	@ (800f838 <SX1276WriteBuffer+0x50>)
 800f7fc:	f7fd fa3f 	bl	800cc7e <GpioWrite>
/*    SpiInOut( &SX1276.Spi, addr | 0x80 );
    for( i = 0; i < size; i++ )
    {
        SpiInOut( &SX1276.Spi, buffer[i] );
    }    */
    addr |= 0x80;
 800f800:	79fb      	ldrb	r3, [r7, #7]
 800f802:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800f806:	b2db      	uxtb	r3, r3
 800f808:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit( &SX1276.Spi.Spi, &addr, 1, HAL_MAX_DELAY);
 800f80a:	1df9      	adds	r1, r7, #7
 800f80c:	f04f 33ff 	mov.w	r3, #4294967295
 800f810:	2201      	movs	r2, #1
 800f812:	480a      	ldr	r0, [pc, #40]	@ (800f83c <SX1276WriteBuffer+0x54>)
 800f814:	f7fb fb1e 	bl	800ae54 <HAL_SPI_Transmit>
    HAL_SPI_Transmit( &SX1276.Spi.Spi, buffer, size, HAL_MAX_DELAY);
 800f818:	79bb      	ldrb	r3, [r7, #6]
 800f81a:	b29a      	uxth	r2, r3
 800f81c:	f04f 33ff 	mov.w	r3, #4294967295
 800f820:	6839      	ldr	r1, [r7, #0]
 800f822:	4806      	ldr	r0, [pc, #24]	@ (800f83c <SX1276WriteBuffer+0x54>)
 800f824:	f7fb fb16 	bl	800ae54 <HAL_SPI_Transmit>

    //NSS = 1;
    GpioWrite( &SX1276.Spi.Nss, 1 );
 800f828:	2101      	movs	r1, #1
 800f82a:	4803      	ldr	r0, [pc, #12]	@ (800f838 <SX1276WriteBuffer+0x50>)
 800f82c:	f7fd fa27 	bl	800cc7e <GpioWrite>
}
 800f830:	bf00      	nop
 800f832:	3708      	adds	r7, #8
 800f834:	46bd      	mov	sp, r7
 800f836:	bd80      	pop	{r7, pc}
 800f838:	2000075c 	.word	0x2000075c
 800f83c:	200006a8 	.word	0x200006a8

0800f840 <SX1276ReadBuffer>:

void SX1276ReadBuffer( uint8_t addr, uint8_t *buffer, uint8_t size )
{
 800f840:	b580      	push	{r7, lr}
 800f842:	b082      	sub	sp, #8
 800f844:	af00      	add	r7, sp, #0
 800f846:	4603      	mov	r3, r0
 800f848:	6039      	str	r1, [r7, #0]
 800f84a:	71fb      	strb	r3, [r7, #7]
 800f84c:	4613      	mov	r3, r2
 800f84e:	71bb      	strb	r3, [r7, #6]
//    uint8_t i;

    //NSS = 0;
    GpioWrite( &SX1276.Spi.Nss, 0 );
 800f850:	2100      	movs	r1, #0
 800f852:	4816      	ldr	r0, [pc, #88]	@ (800f8ac <SX1276ReadBuffer+0x6c>)
 800f854:	f7fd fa13 	bl	800cc7e <GpioWrite>

//    SpiInOut( &SX1276.Spi, addr & 0x7F );
    addr &= 0x7f;
 800f858:	79fb      	ldrb	r3, [r7, #7]
 800f85a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f85e:	b2db      	uxtb	r3, r3
 800f860:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit( &SX1276.Spi.Spi, &addr, 1, HAL_MAX_DELAY);
 800f862:	1df9      	adds	r1, r7, #7
 800f864:	f04f 33ff 	mov.w	r3, #4294967295
 800f868:	2201      	movs	r2, #1
 800f86a:	4811      	ldr	r0, [pc, #68]	@ (800f8b0 <SX1276ReadBuffer+0x70>)
 800f86c:	f7fb faf2 	bl	800ae54 <HAL_SPI_Transmit>
    while(HAL_SPI_GetState(&SX1276.Spi.Spi) != HAL_SPI_STATE_READY);
 800f870:	bf00      	nop
 800f872:	480f      	ldr	r0, [pc, #60]	@ (800f8b0 <SX1276ReadBuffer+0x70>)
 800f874:	f7fb ff9c 	bl	800b7b0 <HAL_SPI_GetState>
 800f878:	4603      	mov	r3, r0
 800f87a:	2b01      	cmp	r3, #1
 800f87c:	d1f9      	bne.n	800f872 <SX1276ReadBuffer+0x32>
    HAL_SPI_Receive( &SX1276.Spi.Spi, buffer, size, HAL_MAX_DELAY);
 800f87e:	79bb      	ldrb	r3, [r7, #6]
 800f880:	b29a      	uxth	r2, r3
 800f882:	f04f 33ff 	mov.w	r3, #4294967295
 800f886:	6839      	ldr	r1, [r7, #0]
 800f888:	4809      	ldr	r0, [pc, #36]	@ (800f8b0 <SX1276ReadBuffer+0x70>)
 800f88a:	f7fb fcf7 	bl	800b27c <HAL_SPI_Receive>
    while(HAL_SPI_GetState(&SX1276.Spi.Spi) != HAL_SPI_STATE_READY);
 800f88e:	bf00      	nop
 800f890:	4807      	ldr	r0, [pc, #28]	@ (800f8b0 <SX1276ReadBuffer+0x70>)
 800f892:	f7fb ff8d 	bl	800b7b0 <HAL_SPI_GetState>
 800f896:	4603      	mov	r3, r0
 800f898:	2b01      	cmp	r3, #1
 800f89a:	d1f9      	bne.n	800f890 <SX1276ReadBuffer+0x50>
//    {
//        buffer[i] = SpiInOut( &SX1276.Spi, 0 );
//    }

    //NSS = 1;
    GpioWrite( &SX1276.Spi.Nss, 1 );
 800f89c:	2101      	movs	r1, #1
 800f89e:	4803      	ldr	r0, [pc, #12]	@ (800f8ac <SX1276ReadBuffer+0x6c>)
 800f8a0:	f7fd f9ed 	bl	800cc7e <GpioWrite>
}
 800f8a4:	bf00      	nop
 800f8a6:	3708      	adds	r7, #8
 800f8a8:	46bd      	mov	sp, r7
 800f8aa:	bd80      	pop	{r7, pc}
 800f8ac:	2000075c 	.word	0x2000075c
 800f8b0:	200006a8 	.word	0x200006a8

0800f8b4 <SX1276WriteFifo>:

void SX1276WriteFifo( uint8_t *buffer, uint8_t size )
{
 800f8b4:	b580      	push	{r7, lr}
 800f8b6:	b082      	sub	sp, #8
 800f8b8:	af00      	add	r7, sp, #0
 800f8ba:	6078      	str	r0, [r7, #4]
 800f8bc:	460b      	mov	r3, r1
 800f8be:	70fb      	strb	r3, [r7, #3]
    SX1276WriteBuffer( 0, buffer, size );
 800f8c0:	78fb      	ldrb	r3, [r7, #3]
 800f8c2:	461a      	mov	r2, r3
 800f8c4:	6879      	ldr	r1, [r7, #4]
 800f8c6:	2000      	movs	r0, #0
 800f8c8:	f7ff ff8e 	bl	800f7e8 <SX1276WriteBuffer>
}
 800f8cc:	bf00      	nop
 800f8ce:	3708      	adds	r7, #8
 800f8d0:	46bd      	mov	sp, r7
 800f8d2:	bd80      	pop	{r7, pc}

0800f8d4 <SX1276ReadFifo>:

void SX1276ReadFifo( uint8_t *buffer, uint8_t size )
{
 800f8d4:	b580      	push	{r7, lr}
 800f8d6:	b082      	sub	sp, #8
 800f8d8:	af00      	add	r7, sp, #0
 800f8da:	6078      	str	r0, [r7, #4]
 800f8dc:	460b      	mov	r3, r1
 800f8de:	70fb      	strb	r3, [r7, #3]
    SX1276ReadBuffer( 0, buffer, size );
 800f8e0:	78fb      	ldrb	r3, [r7, #3]
 800f8e2:	461a      	mov	r2, r3
 800f8e4:	6879      	ldr	r1, [r7, #4]
 800f8e6:	2000      	movs	r0, #0
 800f8e8:	f7ff ffaa 	bl	800f840 <SX1276ReadBuffer>
}
 800f8ec:	bf00      	nop
 800f8ee:	3708      	adds	r7, #8
 800f8f0:	46bd      	mov	sp, r7
 800f8f2:	bd80      	pop	{r7, pc}

0800f8f4 <SX1276SetMaxPayloadLength>:

void SX1276SetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 800f8f4:	b580      	push	{r7, lr}
 800f8f6:	b082      	sub	sp, #8
 800f8f8:	af00      	add	r7, sp, #0
 800f8fa:	4603      	mov	r3, r0
 800f8fc:	460a      	mov	r2, r1
 800f8fe:	71fb      	strb	r3, [r7, #7]
 800f900:	4613      	mov	r3, r2
 800f902:	71bb      	strb	r3, [r7, #6]
    SX1276SetModem( modem );
 800f904:	79fb      	ldrb	r3, [r7, #7]
 800f906:	4618      	mov	r0, r3
 800f908:	f7ff ff08 	bl	800f71c <SX1276SetModem>

    switch( modem )
 800f90c:	79fb      	ldrb	r3, [r7, #7]
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d002      	beq.n	800f918 <SX1276SetMaxPayloadLength+0x24>
 800f912:	2b01      	cmp	r3, #1
 800f914:	d00e      	beq.n	800f934 <SX1276SetMaxPayloadLength+0x40>
        break;
    case MODEM_LORA:
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
        break;
    }
}
 800f916:	e014      	b.n	800f942 <SX1276SetMaxPayloadLength+0x4e>
        if( SX1276.Settings.Fsk.FixLen == false )
 800f918:	4b0c      	ldr	r3, [pc, #48]	@ (800f94c <SX1276SetMaxPayloadLength+0x58>)
 800f91a:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 800f91e:	f083 0301 	eor.w	r3, r3, #1
 800f922:	b2db      	uxtb	r3, r3
 800f924:	2b00      	cmp	r3, #0
 800f926:	d00b      	beq.n	800f940 <SX1276SetMaxPayloadLength+0x4c>
            SX1276Write( REG_PAYLOADLENGTH, max );
 800f928:	79bb      	ldrb	r3, [r7, #6]
 800f92a:	4619      	mov	r1, r3
 800f92c:	2032      	movs	r0, #50	@ 0x32
 800f92e:	f7ff ff37 	bl	800f7a0 <SX1276Write>
        break;
 800f932:	e005      	b.n	800f940 <SX1276SetMaxPayloadLength+0x4c>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 800f934:	79bb      	ldrb	r3, [r7, #6]
 800f936:	4619      	mov	r1, r3
 800f938:	2023      	movs	r0, #35	@ 0x23
 800f93a:	f7ff ff31 	bl	800f7a0 <SX1276Write>
        break;
 800f93e:	e000      	b.n	800f942 <SX1276SetMaxPayloadLength+0x4e>
        break;
 800f940:	bf00      	nop
}
 800f942:	bf00      	nop
 800f944:	3708      	adds	r7, #8
 800f946:	46bd      	mov	sp, r7
 800f948:	bd80      	pop	{r7, pc}
 800f94a:	bf00      	nop
 800f94c:	20000654 	.word	0x20000654

0800f950 <SX1276OnTimeoutIrq>:

void SX1276OnTimeoutIrq( void )
{
 800f950:	b580      	push	{r7, lr}
 800f952:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.State )
 800f954:	4b32      	ldr	r3, [pc, #200]	@ (800fa20 <SX1276OnTimeoutIrq+0xd0>)
 800f956:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 800f95a:	2b01      	cmp	r3, #1
 800f95c:	d002      	beq.n	800f964 <SX1276OnTimeoutIrq+0x14>
 800f95e:	2b02      	cmp	r3, #2
 800f960:	d046      	beq.n	800f9f0 <SX1276OnTimeoutIrq+0xa0>
        {
            RadioEvents->TxTimeout( );
        }
        break;
    default:
        break;
 800f962:	e05a      	b.n	800fa1a <SX1276OnTimeoutIrq+0xca>
        if( SX1276.Settings.Modem == MODEM_FSK )
 800f964:	4b2e      	ldr	r3, [pc, #184]	@ (800fa20 <SX1276OnTimeoutIrq+0xd0>)
 800f966:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d132      	bne.n	800f9d4 <SX1276OnTimeoutIrq+0x84>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800f96e:	4b2c      	ldr	r3, [pc, #176]	@ (800fa20 <SX1276OnTimeoutIrq+0xd0>)
 800f970:	2200      	movs	r2, #0
 800f972:	f883 213c 	strb.w	r2, [r3, #316]	@ 0x13c
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 800f976:	4b2a      	ldr	r3, [pc, #168]	@ (800fa20 <SX1276OnTimeoutIrq+0xd0>)
 800f978:	2200      	movs	r2, #0
 800f97a:	f883 213d 	strb.w	r2, [r3, #317]	@ 0x13d
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800f97e:	4b28      	ldr	r3, [pc, #160]	@ (800fa20 <SX1276OnTimeoutIrq+0xd0>)
 800f980:	2200      	movs	r2, #0
 800f982:	f8a3 2148 	strh.w	r2, [r3, #328]	@ 0x148
            SX1276.Settings.FskPacketHandler.Size = 0;
 800f986:	4b26      	ldr	r3, [pc, #152]	@ (800fa20 <SX1276OnTimeoutIrq+0xd0>)
 800f988:	2200      	movs	r2, #0
 800f98a:	f8a3 2146 	strh.w	r2, [r3, #326]	@ 0x146
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 800f98e:	210b      	movs	r1, #11
 800f990:	203e      	movs	r0, #62	@ 0x3e
 800f992:	f7ff ff05 	bl	800f7a0 <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 800f996:	2110      	movs	r1, #16
 800f998:	203f      	movs	r0, #63	@ 0x3f
 800f99a:	f7ff ff01 	bl	800f7a0 <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 800f99e:	4b20      	ldr	r3, [pc, #128]	@ (800fa20 <SX1276OnTimeoutIrq+0xd0>)
 800f9a0:	f893 3136 	ldrb.w	r3, [r3, #310]	@ 0x136
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d00e      	beq.n	800f9c6 <SX1276OnTimeoutIrq+0x76>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 800f9a8:	200d      	movs	r0, #13
 800f9aa:	f7ff ff0b 	bl	800f7c4 <SX1276Read>
 800f9ae:	4603      	mov	r3, r0
 800f9b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f9b4:	b2db      	uxtb	r3, r3
 800f9b6:	4619      	mov	r1, r3
 800f9b8:	200d      	movs	r0, #13
 800f9ba:	f7ff fef1 	bl	800f7a0 <SX1276Write>
                TimerStart( &RxTimeoutSyncWord );
 800f9be:	4819      	ldr	r0, [pc, #100]	@ (800fa24 <SX1276OnTimeoutIrq+0xd4>)
 800f9c0:	f7fe f87c 	bl	800dabc <TimerStart>
 800f9c4:	e006      	b.n	800f9d4 <SX1276OnTimeoutIrq+0x84>
                SX1276.Settings.State = RF_IDLE;
 800f9c6:	4b16      	ldr	r3, [pc, #88]	@ (800fa20 <SX1276OnTimeoutIrq+0xd0>)
 800f9c8:	2200      	movs	r2, #0
 800f9ca:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
                TimerStop( &RxTimeoutSyncWord );
 800f9ce:	4815      	ldr	r0, [pc, #84]	@ (800fa24 <SX1276OnTimeoutIrq+0xd4>)
 800f9d0:	f7fe f9bc 	bl	800dd4c <TimerStop>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800f9d4:	4b14      	ldr	r3, [pc, #80]	@ (800fa28 <SX1276OnTimeoutIrq+0xd8>)
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d01b      	beq.n	800fa14 <SX1276OnTimeoutIrq+0xc4>
 800f9dc:	4b12      	ldr	r3, [pc, #72]	@ (800fa28 <SX1276OnTimeoutIrq+0xd8>)
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	68db      	ldr	r3, [r3, #12]
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d016      	beq.n	800fa14 <SX1276OnTimeoutIrq+0xc4>
            RadioEvents->RxTimeout( );
 800f9e6:	4b10      	ldr	r3, [pc, #64]	@ (800fa28 <SX1276OnTimeoutIrq+0xd8>)
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	68db      	ldr	r3, [r3, #12]
 800f9ec:	4798      	blx	r3
        break;
 800f9ee:	e011      	b.n	800fa14 <SX1276OnTimeoutIrq+0xc4>
        SX1276.Settings.State = RF_IDLE;
 800f9f0:	4b0b      	ldr	r3, [pc, #44]	@ (800fa20 <SX1276OnTimeoutIrq+0xd0>)
 800f9f2:	2200      	movs	r2, #0
 800f9f4:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800f9f8:	4b0b      	ldr	r3, [pc, #44]	@ (800fa28 <SX1276OnTimeoutIrq+0xd8>)
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d00b      	beq.n	800fa18 <SX1276OnTimeoutIrq+0xc8>
 800fa00:	4b09      	ldr	r3, [pc, #36]	@ (800fa28 <SX1276OnTimeoutIrq+0xd8>)
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	685b      	ldr	r3, [r3, #4]
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d006      	beq.n	800fa18 <SX1276OnTimeoutIrq+0xc8>
            RadioEvents->TxTimeout( );
 800fa0a:	4b07      	ldr	r3, [pc, #28]	@ (800fa28 <SX1276OnTimeoutIrq+0xd8>)
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	685b      	ldr	r3, [r3, #4]
 800fa10:	4798      	blx	r3
        break;
 800fa12:	e001      	b.n	800fa18 <SX1276OnTimeoutIrq+0xc8>
        break;
 800fa14:	bf00      	nop
 800fa16:	e000      	b.n	800fa1a <SX1276OnTimeoutIrq+0xca>
        break;
 800fa18:	bf00      	nop
    }
}
 800fa1a:	bf00      	nop
 800fa1c:	bd80      	pop	{r7, pc}
 800fa1e:	bf00      	nop
 800fa20:	20000654 	.word	0x20000654
 800fa24:	200007ec 	.word	0x200007ec
 800fa28:	20000550 	.word	0x20000550

0800fa2c <SX1276OnDio0Irq>:

void SX1276OnDio0Irq( void )
{
 800fa2c:	b590      	push	{r4, r7, lr}
 800fa2e:	b083      	sub	sp, #12
 800fa30:	af00      	add	r7, sp, #0
    volatile uint8_t irqFlags = 0;
 800fa32:	2300      	movs	r3, #0
 800fa34:	70fb      	strb	r3, [r7, #3]

    switch( SX1276.Settings.State )
 800fa36:	4ba7      	ldr	r3, [pc, #668]	@ (800fcd4 <SX1276OnDio0Irq+0x2a8>)
 800fa38:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 800fa3c:	2b01      	cmp	r3, #1
 800fa3e:	d003      	beq.n	800fa48 <SX1276OnDio0Irq+0x1c>
 800fa40:	2b02      	cmp	r3, #2
 800fa42:	f000 81f0 	beq.w	800fe26 <SX1276OnDio0Irq+0x3fa>
                }
                break;
            }
            break;
        default:
            break;
 800fa46:	e20d      	b.n	800fe64 <SX1276OnDio0Irq+0x438>
            switch( SX1276.Settings.Modem )
 800fa48:	4ba2      	ldr	r3, [pc, #648]	@ (800fcd4 <SX1276OnDio0Irq+0x2a8>)
 800fa4a:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d003      	beq.n	800fa5a <SX1276OnDio0Irq+0x2e>
 800fa52:	2b01      	cmp	r3, #1
 800fa54:	f000 80ef 	beq.w	800fc36 <SX1276OnDio0Irq+0x20a>
                break;
 800fa58:	e1e4      	b.n	800fe24 <SX1276OnDio0Irq+0x3f8>
                if( SX1276.Settings.Fsk.CrcOn == true )
 800fa5a:	4b9e      	ldr	r3, [pc, #632]	@ (800fcd4 <SX1276OnDio0Irq+0x2a8>)
 800fa5c:	f893 3134 	ldrb.w	r3, [r3, #308]	@ 0x134
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d051      	beq.n	800fb08 <SX1276OnDio0Irq+0xdc>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 800fa64:	203f      	movs	r0, #63	@ 0x3f
 800fa66:	f7ff fead 	bl	800f7c4 <SX1276Read>
 800fa6a:	4603      	mov	r3, r0
 800fa6c:	70fb      	strb	r3, [r7, #3]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 800fa6e:	78fb      	ldrb	r3, [r7, #3]
 800fa70:	b2db      	uxtb	r3, r3
 800fa72:	f003 0302 	and.w	r3, r3, #2
 800fa76:	2b02      	cmp	r3, #2
 800fa78:	d046      	beq.n	800fb08 <SX1276OnDio0Irq+0xdc>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 800fa7a:	210b      	movs	r1, #11
 800fa7c:	203e      	movs	r0, #62	@ 0x3e
 800fa7e:	f7ff fe8f 	bl	800f7a0 <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 800fa82:	2110      	movs	r1, #16
 800fa84:	203f      	movs	r0, #63	@ 0x3f
 800fa86:	f7ff fe8b 	bl	800f7a0 <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 800fa8a:	4893      	ldr	r0, [pc, #588]	@ (800fcd8 <SX1276OnDio0Irq+0x2ac>)
 800fa8c:	f7fe f95e 	bl	800dd4c <TimerStop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 800fa90:	4b90      	ldr	r3, [pc, #576]	@ (800fcd4 <SX1276OnDio0Irq+0x2a8>)
 800fa92:	f893 3136 	ldrb.w	r3, [r3, #310]	@ 0x136
 800fa96:	f083 0301 	eor.w	r3, r3, #1
 800fa9a:	b2db      	uxtb	r3, r3
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d007      	beq.n	800fab0 <SX1276OnDio0Irq+0x84>
                            TimerStop( &RxTimeoutSyncWord );
 800faa0:	488e      	ldr	r0, [pc, #568]	@ (800fcdc <SX1276OnDio0Irq+0x2b0>)
 800faa2:	f7fe f953 	bl	800dd4c <TimerStop>
                            SX1276.Settings.State = RF_IDLE;
 800faa6:	4b8b      	ldr	r3, [pc, #556]	@ (800fcd4 <SX1276OnDio0Irq+0x2a8>)
 800faa8:	2200      	movs	r2, #0
 800faaa:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
 800faae:	e00d      	b.n	800facc <SX1276OnDio0Irq+0xa0>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 800fab0:	200d      	movs	r0, #13
 800fab2:	f7ff fe87 	bl	800f7c4 <SX1276Read>
 800fab6:	4603      	mov	r3, r0
 800fab8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fabc:	b2db      	uxtb	r3, r3
 800fabe:	4619      	mov	r1, r3
 800fac0:	200d      	movs	r0, #13
 800fac2:	f7ff fe6d 	bl	800f7a0 <SX1276Write>
                            TimerStart( &RxTimeoutSyncWord );
 800fac6:	4885      	ldr	r0, [pc, #532]	@ (800fcdc <SX1276OnDio0Irq+0x2b0>)
 800fac8:	f7fd fff8 	bl	800dabc <TimerStart>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 800facc:	4b84      	ldr	r3, [pc, #528]	@ (800fce0 <SX1276OnDio0Irq+0x2b4>)
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d008      	beq.n	800fae6 <SX1276OnDio0Irq+0xba>
 800fad4:	4b82      	ldr	r3, [pc, #520]	@ (800fce0 <SX1276OnDio0Irq+0x2b4>)
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	691b      	ldr	r3, [r3, #16]
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d003      	beq.n	800fae6 <SX1276OnDio0Irq+0xba>
                            RadioEvents->RxError( );
 800fade:	4b80      	ldr	r3, [pc, #512]	@ (800fce0 <SX1276OnDio0Irq+0x2b4>)
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	691b      	ldr	r3, [r3, #16]
 800fae4:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800fae6:	4b7b      	ldr	r3, [pc, #492]	@ (800fcd4 <SX1276OnDio0Irq+0x2a8>)
 800fae8:	2200      	movs	r2, #0
 800faea:	f883 213c 	strb.w	r2, [r3, #316]	@ 0x13c
                        SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 800faee:	4b79      	ldr	r3, [pc, #484]	@ (800fcd4 <SX1276OnDio0Irq+0x2a8>)
 800faf0:	2200      	movs	r2, #0
 800faf2:	f883 213d 	strb.w	r2, [r3, #317]	@ 0x13d
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800faf6:	4b77      	ldr	r3, [pc, #476]	@ (800fcd4 <SX1276OnDio0Irq+0x2a8>)
 800faf8:	2200      	movs	r2, #0
 800fafa:	f8a3 2148 	strh.w	r2, [r3, #328]	@ 0x148
                        SX1276.Settings.FskPacketHandler.Size = 0;
 800fafe:	4b75      	ldr	r3, [pc, #468]	@ (800fcd4 <SX1276OnDio0Irq+0x2a8>)
 800fb00:	2200      	movs	r2, #0
 800fb02:	f8a3 2146 	strh.w	r2, [r3, #326]	@ 0x146
                        break;
 800fb06:	e18d      	b.n	800fe24 <SX1276OnDio0Irq+0x3f8>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 800fb08:	4b72      	ldr	r3, [pc, #456]	@ (800fcd4 <SX1276OnDio0Irq+0x2a8>)
 800fb0a:	f8b3 3146 	ldrh.w	r3, [r3, #326]	@ 0x146
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d133      	bne.n	800fb7a <SX1276OnDio0Irq+0x14e>
 800fb12:	4b70      	ldr	r3, [pc, #448]	@ (800fcd4 <SX1276OnDio0Irq+0x2a8>)
 800fb14:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d12e      	bne.n	800fb7a <SX1276OnDio0Irq+0x14e>
                    if( SX1276.Settings.Fsk.FixLen == false )
 800fb1c:	4b6d      	ldr	r3, [pc, #436]	@ (800fcd4 <SX1276OnDio0Irq+0x2a8>)
 800fb1e:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 800fb22:	f083 0301 	eor.w	r3, r3, #1
 800fb26:	b2db      	uxtb	r3, r3
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d004      	beq.n	800fb36 <SX1276OnDio0Irq+0x10a>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 800fb2c:	2101      	movs	r1, #1
 800fb2e:	486d      	ldr	r0, [pc, #436]	@ (800fce4 <SX1276OnDio0Irq+0x2b8>)
 800fb30:	f7ff fed0 	bl	800f8d4 <SX1276ReadFifo>
 800fb34:	e007      	b.n	800fb46 <SX1276OnDio0Irq+0x11a>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 800fb36:	2032      	movs	r0, #50	@ 0x32
 800fb38:	f7ff fe44 	bl	800f7c4 <SX1276Read>
 800fb3c:	4603      	mov	r3, r0
 800fb3e:	461a      	mov	r2, r3
 800fb40:	4b64      	ldr	r3, [pc, #400]	@ (800fcd4 <SX1276OnDio0Irq+0x2a8>)
 800fb42:	f8a3 2146 	strh.w	r2, [r3, #326]	@ 0x146
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800fb46:	4b63      	ldr	r3, [pc, #396]	@ (800fcd4 <SX1276OnDio0Irq+0x2a8>)
 800fb48:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 800fb4c:	461a      	mov	r2, r3
 800fb4e:	4b66      	ldr	r3, [pc, #408]	@ (800fce8 <SX1276OnDio0Irq+0x2bc>)
 800fb50:	18d0      	adds	r0, r2, r3
 800fb52:	4b60      	ldr	r3, [pc, #384]	@ (800fcd4 <SX1276OnDio0Irq+0x2a8>)
 800fb54:	f8b3 3146 	ldrh.w	r3, [r3, #326]	@ 0x146
 800fb58:	b2da      	uxtb	r2, r3
 800fb5a:	4b5e      	ldr	r3, [pc, #376]	@ (800fcd4 <SX1276OnDio0Irq+0x2a8>)
 800fb5c:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 800fb60:	b2db      	uxtb	r3, r3
 800fb62:	1ad3      	subs	r3, r2, r3
 800fb64:	b2db      	uxtb	r3, r3
 800fb66:	4619      	mov	r1, r3
 800fb68:	f7ff feb4 	bl	800f8d4 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800fb6c:	4b59      	ldr	r3, [pc, #356]	@ (800fcd4 <SX1276OnDio0Irq+0x2a8>)
 800fb6e:	f8b3 2146 	ldrh.w	r2, [r3, #326]	@ 0x146
 800fb72:	4b58      	ldr	r3, [pc, #352]	@ (800fcd4 <SX1276OnDio0Irq+0x2a8>)
 800fb74:	f8a3 2148 	strh.w	r2, [r3, #328]	@ 0x148
 800fb78:	e018      	b.n	800fbac <SX1276OnDio0Irq+0x180>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800fb7a:	4b56      	ldr	r3, [pc, #344]	@ (800fcd4 <SX1276OnDio0Irq+0x2a8>)
 800fb7c:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 800fb80:	461a      	mov	r2, r3
 800fb82:	4b59      	ldr	r3, [pc, #356]	@ (800fce8 <SX1276OnDio0Irq+0x2bc>)
 800fb84:	18d0      	adds	r0, r2, r3
 800fb86:	4b53      	ldr	r3, [pc, #332]	@ (800fcd4 <SX1276OnDio0Irq+0x2a8>)
 800fb88:	f8b3 3146 	ldrh.w	r3, [r3, #326]	@ 0x146
 800fb8c:	b2da      	uxtb	r2, r3
 800fb8e:	4b51      	ldr	r3, [pc, #324]	@ (800fcd4 <SX1276OnDio0Irq+0x2a8>)
 800fb90:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 800fb94:	b2db      	uxtb	r3, r3
 800fb96:	1ad3      	subs	r3, r2, r3
 800fb98:	b2db      	uxtb	r3, r3
 800fb9a:	4619      	mov	r1, r3
 800fb9c:	f7ff fe9a 	bl	800f8d4 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800fba0:	4b4c      	ldr	r3, [pc, #304]	@ (800fcd4 <SX1276OnDio0Irq+0x2a8>)
 800fba2:	f8b3 2146 	ldrh.w	r2, [r3, #326]	@ 0x146
 800fba6:	4b4b      	ldr	r3, [pc, #300]	@ (800fcd4 <SX1276OnDio0Irq+0x2a8>)
 800fba8:	f8a3 2148 	strh.w	r2, [r3, #328]	@ 0x148
                if( SX1276.Settings.Fsk.RxContinuous == false )
 800fbac:	4b49      	ldr	r3, [pc, #292]	@ (800fcd4 <SX1276OnDio0Irq+0x2a8>)
 800fbae:	f893 3136 	ldrb.w	r3, [r3, #310]	@ 0x136
 800fbb2:	f083 0301 	eor.w	r3, r3, #1
 800fbb6:	b2db      	uxtb	r3, r3
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d007      	beq.n	800fbcc <SX1276OnDio0Irq+0x1a0>
                    SX1276.Settings.State = RF_IDLE;
 800fbbc:	4b45      	ldr	r3, [pc, #276]	@ (800fcd4 <SX1276OnDio0Irq+0x2a8>)
 800fbbe:	2200      	movs	r2, #0
 800fbc0:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
                    TimerStart( &RxTimeoutSyncWord );
 800fbc4:	4845      	ldr	r0, [pc, #276]	@ (800fcdc <SX1276OnDio0Irq+0x2b0>)
 800fbc6:	f7fd ff79 	bl	800dabc <TimerStart>
 800fbca:	e00a      	b.n	800fbe2 <SX1276OnDio0Irq+0x1b6>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 800fbcc:	200d      	movs	r0, #13
 800fbce:	f7ff fdf9 	bl	800f7c4 <SX1276Read>
 800fbd2:	4603      	mov	r3, r0
 800fbd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fbd8:	b2db      	uxtb	r3, r3
 800fbda:	4619      	mov	r1, r3
 800fbdc:	200d      	movs	r0, #13
 800fbde:	f7ff fddf 	bl	800f7a0 <SX1276Write>
                TimerStop( &RxTimeoutTimer );
 800fbe2:	483d      	ldr	r0, [pc, #244]	@ (800fcd8 <SX1276OnDio0Irq+0x2ac>)
 800fbe4:	f7fe f8b2 	bl	800dd4c <TimerStop>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800fbe8:	4b3d      	ldr	r3, [pc, #244]	@ (800fce0 <SX1276OnDio0Irq+0x2b4>)
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d011      	beq.n	800fc14 <SX1276OnDio0Irq+0x1e8>
 800fbf0:	4b3b      	ldr	r3, [pc, #236]	@ (800fce0 <SX1276OnDio0Irq+0x2b4>)
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	689b      	ldr	r3, [r3, #8]
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d00c      	beq.n	800fc14 <SX1276OnDio0Irq+0x1e8>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 800fbfa:	4b39      	ldr	r3, [pc, #228]	@ (800fce0 <SX1276OnDio0Irq+0x2b4>)
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	689c      	ldr	r4, [r3, #8]
 800fc00:	4b34      	ldr	r3, [pc, #208]	@ (800fcd4 <SX1276OnDio0Irq+0x2a8>)
 800fc02:	f8b3 1146 	ldrh.w	r1, [r3, #326]	@ 0x146
 800fc06:	4b33      	ldr	r3, [pc, #204]	@ (800fcd4 <SX1276OnDio0Irq+0x2a8>)
 800fc08:	f993 313e 	ldrsb.w	r3, [r3, #318]	@ 0x13e
 800fc0c:	461a      	mov	r2, r3
 800fc0e:	2300      	movs	r3, #0
 800fc10:	4835      	ldr	r0, [pc, #212]	@ (800fce8 <SX1276OnDio0Irq+0x2bc>)
 800fc12:	47a0      	blx	r4
                SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800fc14:	4b2f      	ldr	r3, [pc, #188]	@ (800fcd4 <SX1276OnDio0Irq+0x2a8>)
 800fc16:	2200      	movs	r2, #0
 800fc18:	f883 213c 	strb.w	r2, [r3, #316]	@ 0x13c
                SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 800fc1c:	4b2d      	ldr	r3, [pc, #180]	@ (800fcd4 <SX1276OnDio0Irq+0x2a8>)
 800fc1e:	2200      	movs	r2, #0
 800fc20:	f883 213d 	strb.w	r2, [r3, #317]	@ 0x13d
                SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800fc24:	4b2b      	ldr	r3, [pc, #172]	@ (800fcd4 <SX1276OnDio0Irq+0x2a8>)
 800fc26:	2200      	movs	r2, #0
 800fc28:	f8a3 2148 	strh.w	r2, [r3, #328]	@ 0x148
                SX1276.Settings.FskPacketHandler.Size = 0;
 800fc2c:	4b29      	ldr	r3, [pc, #164]	@ (800fcd4 <SX1276OnDio0Irq+0x2a8>)
 800fc2e:	2200      	movs	r2, #0
 800fc30:	f8a3 2146 	strh.w	r2, [r3, #326]	@ 0x146
                break;
 800fc34:	e0f6      	b.n	800fe24 <SX1276OnDio0Irq+0x3f8>
                    int8_t snr = 0;
 800fc36:	2300      	movs	r3, #0
 800fc38:	71fb      	strb	r3, [r7, #7]
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 800fc3a:	2140      	movs	r1, #64	@ 0x40
 800fc3c:	2012      	movs	r0, #18
 800fc3e:	f7ff fdaf 	bl	800f7a0 <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 800fc42:	2012      	movs	r0, #18
 800fc44:	f7ff fdbe 	bl	800f7c4 <SX1276Read>
 800fc48:	4603      	mov	r3, r0
 800fc4a:	70fb      	strb	r3, [r7, #3]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 800fc4c:	78fb      	ldrb	r3, [r7, #3]
 800fc4e:	b2db      	uxtb	r3, r3
 800fc50:	f003 0320 	and.w	r3, r3, #32
 800fc54:	2b20      	cmp	r3, #32
 800fc56:	d122      	bne.n	800fc9e <SX1276OnDio0Irq+0x272>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 800fc58:	2120      	movs	r1, #32
 800fc5a:	2012      	movs	r0, #18
 800fc5c:	f7ff fda0 	bl	800f7a0 <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 800fc60:	4b1c      	ldr	r3, [pc, #112]	@ (800fcd4 <SX1276OnDio0Irq+0x2a8>)
 800fc62:	f893 3162 	ldrb.w	r3, [r3, #354]	@ 0x162
 800fc66:	f083 0301 	eor.w	r3, r3, #1
 800fc6a:	b2db      	uxtb	r3, r3
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d003      	beq.n	800fc78 <SX1276OnDio0Irq+0x24c>
                            SX1276.Settings.State = RF_IDLE;
 800fc70:	4b18      	ldr	r3, [pc, #96]	@ (800fcd4 <SX1276OnDio0Irq+0x2a8>)
 800fc72:	2200      	movs	r2, #0
 800fc74:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
                        TimerStop( &RxTimeoutTimer );
 800fc78:	4817      	ldr	r0, [pc, #92]	@ (800fcd8 <SX1276OnDio0Irq+0x2ac>)
 800fc7a:	f7fe f867 	bl	800dd4c <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 800fc7e:	4b18      	ldr	r3, [pc, #96]	@ (800fce0 <SX1276OnDio0Irq+0x2b4>)
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	f000 80cb 	beq.w	800fe1e <SX1276OnDio0Irq+0x3f2>
 800fc88:	4b15      	ldr	r3, [pc, #84]	@ (800fce0 <SX1276OnDio0Irq+0x2b4>)
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	691b      	ldr	r3, [r3, #16]
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	f000 80c5 	beq.w	800fe1e <SX1276OnDio0Irq+0x3f2>
                            RadioEvents->RxError( );
 800fc94:	4b12      	ldr	r3, [pc, #72]	@ (800fce0 <SX1276OnDio0Irq+0x2b4>)
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	691b      	ldr	r3, [r3, #16]
 800fc9a:	4798      	blx	r3
                        break;
 800fc9c:	e0bf      	b.n	800fe1e <SX1276OnDio0Irq+0x3f2>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = SX1276Read( REG_LR_PKTSNRVALUE );
 800fc9e:	2019      	movs	r0, #25
 800fca0:	f7ff fd90 	bl	800f7c4 <SX1276Read>
 800fca4:	4603      	mov	r3, r0
 800fca6:	b25a      	sxtb	r2, r3
 800fca8:	4b0a      	ldr	r3, [pc, #40]	@ (800fcd4 <SX1276OnDio0Irq+0x2a8>)
 800fcaa:	f883 2168 	strb.w	r2, [r3, #360]	@ 0x168
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue & 0x80 ) // The SNR sign bit is 1
 800fcae:	4b09      	ldr	r3, [pc, #36]	@ (800fcd4 <SX1276OnDio0Irq+0x2a8>)
 800fcb0:	f993 3168 	ldrsb.w	r3, [r3, #360]	@ 0x168
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	da19      	bge.n	800fcec <SX1276OnDio0Irq+0x2c0>
                        snr = ( ( ~SX1276.Settings.LoRaPacketHandler.SnrValue + 1 ) & 0xFF ) >> 2;
 800fcb8:	4b06      	ldr	r3, [pc, #24]	@ (800fcd4 <SX1276OnDio0Irq+0x2a8>)
 800fcba:	f993 3168 	ldrsb.w	r3, [r3, #360]	@ 0x168
 800fcbe:	425b      	negs	r3, r3
 800fcc0:	109b      	asrs	r3, r3, #2
 800fcc2:	b25b      	sxtb	r3, r3
 800fcc4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fcc8:	71fb      	strb	r3, [r7, #7]
                        snr = -snr;
 800fcca:	79fb      	ldrb	r3, [r7, #7]
 800fccc:	425b      	negs	r3, r3
 800fcce:	b2db      	uxtb	r3, r3
 800fcd0:	71fb      	strb	r3, [r7, #7]
 800fcd2:	e013      	b.n	800fcfc <SX1276OnDio0Irq+0x2d0>
 800fcd4:	20000654 	.word	0x20000654
 800fcd8:	200007d8 	.word	0x200007d8
 800fcdc:	200007ec 	.word	0x200007ec
 800fce0:	20000550 	.word	0x20000550
 800fce4:	2000079a 	.word	0x2000079a
 800fce8:	20000554 	.word	0x20000554
                        snr = ( SX1276.Settings.LoRaPacketHandler.SnrValue & 0xFF ) >> 2;
 800fcec:	4b5f      	ldr	r3, [pc, #380]	@ (800fe6c <SX1276OnDio0Irq+0x440>)
 800fcee:	f993 3168 	ldrsb.w	r3, [r3, #360]	@ 0x168
 800fcf2:	109b      	asrs	r3, r3, #2
 800fcf4:	b25b      	sxtb	r3, r3
 800fcf6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fcfa:	71fb      	strb	r3, [r7, #7]
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 800fcfc:	201a      	movs	r0, #26
 800fcfe:	f7ff fd61 	bl	800f7c4 <SX1276Read>
 800fd02:	4603      	mov	r3, r0
 800fd04:	80bb      	strh	r3, [r7, #4]
                    if( snr < 0 )
 800fd06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	da2d      	bge.n	800fd6a <SX1276OnDio0Irq+0x33e>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800fd0e:	4b57      	ldr	r3, [pc, #348]	@ (800fe6c <SX1276OnDio0Irq+0x440>)
 800fd10:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800fd14:	4a56      	ldr	r2, [pc, #344]	@ (800fe70 <SX1276OnDio0Irq+0x444>)
 800fd16:	4293      	cmp	r3, r2
 800fd18:	d913      	bls.n	800fd42 <SX1276OnDio0Irq+0x316>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 800fd1a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800fd1e:	111b      	asrs	r3, r3, #4
 800fd20:	b21b      	sxth	r3, r3
 800fd22:	b29a      	uxth	r2, r3
 800fd24:	88bb      	ldrh	r3, [r7, #4]
 800fd26:	4413      	add	r3, r2
 800fd28:	b29a      	uxth	r2, r3
 800fd2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fd2e:	b29b      	uxth	r3, r3
 800fd30:	4413      	add	r3, r2
 800fd32:	b29b      	uxth	r3, r3
 800fd34:	3b9d      	subs	r3, #157	@ 0x9d
 800fd36:	b29b      	uxth	r3, r3
 800fd38:	b21a      	sxth	r2, r3
 800fd3a:	4b4c      	ldr	r3, [pc, #304]	@ (800fe6c <SX1276OnDio0Irq+0x440>)
 800fd3c:	f8a3 216a 	strh.w	r2, [r3, #362]	@ 0x16a
 800fd40:	e036      	b.n	800fdb0 <SX1276OnDio0Irq+0x384>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 800fd42:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800fd46:	111b      	asrs	r3, r3, #4
 800fd48:	b21b      	sxth	r3, r3
 800fd4a:	b29a      	uxth	r2, r3
 800fd4c:	88bb      	ldrh	r3, [r7, #4]
 800fd4e:	4413      	add	r3, r2
 800fd50:	b29a      	uxth	r2, r3
 800fd52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fd56:	b29b      	uxth	r3, r3
 800fd58:	4413      	add	r3, r2
 800fd5a:	b29b      	uxth	r3, r3
 800fd5c:	3ba4      	subs	r3, #164	@ 0xa4
 800fd5e:	b29b      	uxth	r3, r3
 800fd60:	b21a      	sxth	r2, r3
 800fd62:	4b42      	ldr	r3, [pc, #264]	@ (800fe6c <SX1276OnDio0Irq+0x440>)
 800fd64:	f8a3 216a 	strh.w	r2, [r3, #362]	@ 0x16a
 800fd68:	e022      	b.n	800fdb0 <SX1276OnDio0Irq+0x384>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800fd6a:	4b40      	ldr	r3, [pc, #256]	@ (800fe6c <SX1276OnDio0Irq+0x440>)
 800fd6c:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800fd70:	4a3f      	ldr	r2, [pc, #252]	@ (800fe70 <SX1276OnDio0Irq+0x444>)
 800fd72:	4293      	cmp	r3, r2
 800fd74:	d90e      	bls.n	800fd94 <SX1276OnDio0Irq+0x368>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 800fd76:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800fd7a:	111b      	asrs	r3, r3, #4
 800fd7c:	b21b      	sxth	r3, r3
 800fd7e:	b29a      	uxth	r2, r3
 800fd80:	88bb      	ldrh	r3, [r7, #4]
 800fd82:	4413      	add	r3, r2
 800fd84:	b29b      	uxth	r3, r3
 800fd86:	3b9d      	subs	r3, #157	@ 0x9d
 800fd88:	b29b      	uxth	r3, r3
 800fd8a:	b21a      	sxth	r2, r3
 800fd8c:	4b37      	ldr	r3, [pc, #220]	@ (800fe6c <SX1276OnDio0Irq+0x440>)
 800fd8e:	f8a3 216a 	strh.w	r2, [r3, #362]	@ 0x16a
 800fd92:	e00d      	b.n	800fdb0 <SX1276OnDio0Irq+0x384>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 800fd94:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800fd98:	111b      	asrs	r3, r3, #4
 800fd9a:	b21b      	sxth	r3, r3
 800fd9c:	b29a      	uxth	r2, r3
 800fd9e:	88bb      	ldrh	r3, [r7, #4]
 800fda0:	4413      	add	r3, r2
 800fda2:	b29b      	uxth	r3, r3
 800fda4:	3ba4      	subs	r3, #164	@ 0xa4
 800fda6:	b29b      	uxth	r3, r3
 800fda8:	b21a      	sxth	r2, r3
 800fdaa:	4b30      	ldr	r3, [pc, #192]	@ (800fe6c <SX1276OnDio0Irq+0x440>)
 800fdac:	f8a3 216a 	strh.w	r2, [r3, #362]	@ 0x16a
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 800fdb0:	2013      	movs	r0, #19
 800fdb2:	f7ff fd07 	bl	800f7c4 <SX1276Read>
 800fdb6:	4603      	mov	r3, r0
 800fdb8:	461a      	mov	r2, r3
 800fdba:	4b2c      	ldr	r3, [pc, #176]	@ (800fe6c <SX1276OnDio0Irq+0x440>)
 800fdbc:	f883 216c 	strb.w	r2, [r3, #364]	@ 0x16c
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
 800fdc0:	4b2a      	ldr	r3, [pc, #168]	@ (800fe6c <SX1276OnDio0Irq+0x440>)
 800fdc2:	f893 316c 	ldrb.w	r3, [r3, #364]	@ 0x16c
 800fdc6:	4619      	mov	r1, r3
 800fdc8:	482a      	ldr	r0, [pc, #168]	@ (800fe74 <SX1276OnDio0Irq+0x448>)
 800fdca:	f7ff fd83 	bl	800f8d4 <SX1276ReadFifo>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 800fdce:	4b27      	ldr	r3, [pc, #156]	@ (800fe6c <SX1276OnDio0Irq+0x440>)
 800fdd0:	f893 3162 	ldrb.w	r3, [r3, #354]	@ 0x162
 800fdd4:	f083 0301 	eor.w	r3, r3, #1
 800fdd8:	b2db      	uxtb	r3, r3
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d003      	beq.n	800fde6 <SX1276OnDio0Irq+0x3ba>
                        SX1276.Settings.State = RF_IDLE;
 800fdde:	4b23      	ldr	r3, [pc, #140]	@ (800fe6c <SX1276OnDio0Irq+0x440>)
 800fde0:	2200      	movs	r2, #0
 800fde2:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
                    TimerStop( &RxTimeoutTimer );
 800fde6:	4824      	ldr	r0, [pc, #144]	@ (800fe78 <SX1276OnDio0Irq+0x44c>)
 800fde8:	f7fd ffb0 	bl	800dd4c <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800fdec:	4b23      	ldr	r3, [pc, #140]	@ (800fe7c <SX1276OnDio0Irq+0x450>)
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d016      	beq.n	800fe22 <SX1276OnDio0Irq+0x3f6>
 800fdf4:	4b21      	ldr	r3, [pc, #132]	@ (800fe7c <SX1276OnDio0Irq+0x450>)
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	689b      	ldr	r3, [r3, #8]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d011      	beq.n	800fe22 <SX1276OnDio0Irq+0x3f6>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 800fdfe:	4b1f      	ldr	r3, [pc, #124]	@ (800fe7c <SX1276OnDio0Irq+0x450>)
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	689c      	ldr	r4, [r3, #8]
 800fe04:	4b19      	ldr	r3, [pc, #100]	@ (800fe6c <SX1276OnDio0Irq+0x440>)
 800fe06:	f893 316c 	ldrb.w	r3, [r3, #364]	@ 0x16c
 800fe0a:	4619      	mov	r1, r3
 800fe0c:	4b17      	ldr	r3, [pc, #92]	@ (800fe6c <SX1276OnDio0Irq+0x440>)
 800fe0e:	f9b3 216a 	ldrsh.w	r2, [r3, #362]	@ 0x16a
 800fe12:	4b16      	ldr	r3, [pc, #88]	@ (800fe6c <SX1276OnDio0Irq+0x440>)
 800fe14:	f993 3168 	ldrsb.w	r3, [r3, #360]	@ 0x168
 800fe18:	4816      	ldr	r0, [pc, #88]	@ (800fe74 <SX1276OnDio0Irq+0x448>)
 800fe1a:	47a0      	blx	r4
                break;
 800fe1c:	e001      	b.n	800fe22 <SX1276OnDio0Irq+0x3f6>
                        break;
 800fe1e:	bf00      	nop
 800fe20:	e020      	b.n	800fe64 <SX1276OnDio0Irq+0x438>
                break;
 800fe22:	bf00      	nop
            break;
 800fe24:	e01e      	b.n	800fe64 <SX1276OnDio0Irq+0x438>
            TimerStop( &TxTimeoutTimer );
 800fe26:	4816      	ldr	r0, [pc, #88]	@ (800fe80 <SX1276OnDio0Irq+0x454>)
 800fe28:	f7fd ff90 	bl	800dd4c <TimerStop>
            switch( SX1276.Settings.Modem )
 800fe2c:	4b0f      	ldr	r3, [pc, #60]	@ (800fe6c <SX1276OnDio0Irq+0x440>)
 800fe2e:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 800fe32:	2b01      	cmp	r3, #1
 800fe34:	d103      	bne.n	800fe3e <SX1276OnDio0Irq+0x412>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 800fe36:	2108      	movs	r1, #8
 800fe38:	2012      	movs	r0, #18
 800fe3a:	f7ff fcb1 	bl	800f7a0 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 800fe3e:	4b0b      	ldr	r3, [pc, #44]	@ (800fe6c <SX1276OnDio0Irq+0x440>)
 800fe40:	2200      	movs	r2, #0
 800fe42:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800fe46:	4b0d      	ldr	r3, [pc, #52]	@ (800fe7c <SX1276OnDio0Irq+0x450>)
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d008      	beq.n	800fe60 <SX1276OnDio0Irq+0x434>
 800fe4e:	4b0b      	ldr	r3, [pc, #44]	@ (800fe7c <SX1276OnDio0Irq+0x450>)
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d003      	beq.n	800fe60 <SX1276OnDio0Irq+0x434>
                    RadioEvents->TxDone( );
 800fe58:	4b08      	ldr	r3, [pc, #32]	@ (800fe7c <SX1276OnDio0Irq+0x450>)
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	4798      	blx	r3
                break;
 800fe60:	bf00      	nop
            break;
 800fe62:	bf00      	nop
    }
}
 800fe64:	bf00      	nop
 800fe66:	370c      	adds	r7, #12
 800fe68:	46bd      	mov	sp, r7
 800fe6a:	bd90      	pop	{r4, r7, pc}
 800fe6c:	20000654 	.word	0x20000654
 800fe70:	1f4add40 	.word	0x1f4add40
 800fe74:	20000554 	.word	0x20000554
 800fe78:	200007d8 	.word	0x200007d8
 800fe7c:	20000550 	.word	0x20000550
 800fe80:	200007c4 	.word	0x200007c4

0800fe84 <SX1276OnDio1Irq>:

void SX1276OnDio1Irq( void )
{
 800fe84:	b580      	push	{r7, lr}
 800fe86:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.State )
 800fe88:	4b6a      	ldr	r3, [pc, #424]	@ (8010034 <SX1276OnDio1Irq+0x1b0>)
 800fe8a:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 800fe8e:	2b01      	cmp	r3, #1
 800fe90:	d003      	beq.n	800fe9a <SX1276OnDio1Irq+0x16>
 800fe92:	2b02      	cmp	r3, #2
 800fe94:	f000 8082 	beq.w	800ff9c <SX1276OnDio1Irq+0x118>
            default:
                break;
            }
            break;
        default:
            break;
 800fe98:	e0ca      	b.n	8010030 <SX1276OnDio1Irq+0x1ac>
            switch( SX1276.Settings.Modem )
 800fe9a:	4b66      	ldr	r3, [pc, #408]	@ (8010034 <SX1276OnDio1Irq+0x1b0>)
 800fe9c:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d002      	beq.n	800feaa <SX1276OnDio1Irq+0x26>
 800fea4:	2b01      	cmp	r3, #1
 800fea6:	d05f      	beq.n	800ff68 <SX1276OnDio1Irq+0xe4>
                break;
 800fea8:	e077      	b.n	800ff9a <SX1276OnDio1Irq+0x116>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 800feaa:	4b62      	ldr	r3, [pc, #392]	@ (8010034 <SX1276OnDio1Irq+0x1b0>)
 800feac:	f8b3 3146 	ldrh.w	r3, [r3, #326]	@ 0x146
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d119      	bne.n	800fee8 <SX1276OnDio1Irq+0x64>
 800feb4:	4b5f      	ldr	r3, [pc, #380]	@ (8010034 <SX1276OnDio1Irq+0x1b0>)
 800feb6:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 800feba:	2b00      	cmp	r3, #0
 800febc:	d114      	bne.n	800fee8 <SX1276OnDio1Irq+0x64>
                    if( SX1276.Settings.Fsk.FixLen == false )
 800febe:	4b5d      	ldr	r3, [pc, #372]	@ (8010034 <SX1276OnDio1Irq+0x1b0>)
 800fec0:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 800fec4:	f083 0301 	eor.w	r3, r3, #1
 800fec8:	b2db      	uxtb	r3, r3
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d004      	beq.n	800fed8 <SX1276OnDio1Irq+0x54>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 800fece:	2101      	movs	r1, #1
 800fed0:	4859      	ldr	r0, [pc, #356]	@ (8010038 <SX1276OnDio1Irq+0x1b4>)
 800fed2:	f7ff fcff 	bl	800f8d4 <SX1276ReadFifo>
 800fed6:	e007      	b.n	800fee8 <SX1276OnDio1Irq+0x64>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 800fed8:	2032      	movs	r0, #50	@ 0x32
 800feda:	f7ff fc73 	bl	800f7c4 <SX1276Read>
 800fede:	4603      	mov	r3, r0
 800fee0:	461a      	mov	r2, r3
 800fee2:	4b54      	ldr	r3, [pc, #336]	@ (8010034 <SX1276OnDio1Irq+0x1b0>)
 800fee4:	f8a3 2146 	strh.w	r2, [r3, #326]	@ 0x146
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.FifoThresh )
 800fee8:	4b52      	ldr	r3, [pc, #328]	@ (8010034 <SX1276OnDio1Irq+0x1b0>)
 800feea:	f8b3 3146 	ldrh.w	r3, [r3, #326]	@ 0x146
 800feee:	461a      	mov	r2, r3
 800fef0:	4b50      	ldr	r3, [pc, #320]	@ (8010034 <SX1276OnDio1Irq+0x1b0>)
 800fef2:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 800fef6:	1ad3      	subs	r3, r2, r3
 800fef8:	4a4e      	ldr	r2, [pc, #312]	@ (8010034 <SX1276OnDio1Irq+0x1b0>)
 800fefa:	f892 214a 	ldrb.w	r2, [r2, #330]	@ 0x14a
 800fefe:	4293      	cmp	r3, r2
 800ff00:	dd18      	ble.n	800ff34 <SX1276OnDio1Irq+0xb0>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh );
 800ff02:	4b4c      	ldr	r3, [pc, #304]	@ (8010034 <SX1276OnDio1Irq+0x1b0>)
 800ff04:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 800ff08:	461a      	mov	r2, r3
 800ff0a:	4b4c      	ldr	r3, [pc, #304]	@ (801003c <SX1276OnDio1Irq+0x1b8>)
 800ff0c:	4413      	add	r3, r2
 800ff0e:	4a49      	ldr	r2, [pc, #292]	@ (8010034 <SX1276OnDio1Irq+0x1b0>)
 800ff10:	f892 214a 	ldrb.w	r2, [r2, #330]	@ 0x14a
 800ff14:	4611      	mov	r1, r2
 800ff16:	4618      	mov	r0, r3
 800ff18:	f7ff fcdc 	bl	800f8d4 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh;
 800ff1c:	4b45      	ldr	r3, [pc, #276]	@ (8010034 <SX1276OnDio1Irq+0x1b0>)
 800ff1e:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 800ff22:	4a44      	ldr	r2, [pc, #272]	@ (8010034 <SX1276OnDio1Irq+0x1b0>)
 800ff24:	f892 214a 	ldrb.w	r2, [r2, #330]	@ 0x14a
 800ff28:	4413      	add	r3, r2
 800ff2a:	b29a      	uxth	r2, r3
 800ff2c:	4b41      	ldr	r3, [pc, #260]	@ (8010034 <SX1276OnDio1Irq+0x1b0>)
 800ff2e:	f8a3 2148 	strh.w	r2, [r3, #328]	@ 0x148
                break;
 800ff32:	e032      	b.n	800ff9a <SX1276OnDio1Irq+0x116>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800ff34:	4b3f      	ldr	r3, [pc, #252]	@ (8010034 <SX1276OnDio1Irq+0x1b0>)
 800ff36:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 800ff3a:	461a      	mov	r2, r3
 800ff3c:	4b3f      	ldr	r3, [pc, #252]	@ (801003c <SX1276OnDio1Irq+0x1b8>)
 800ff3e:	18d0      	adds	r0, r2, r3
 800ff40:	4b3c      	ldr	r3, [pc, #240]	@ (8010034 <SX1276OnDio1Irq+0x1b0>)
 800ff42:	f8b3 3146 	ldrh.w	r3, [r3, #326]	@ 0x146
 800ff46:	b2da      	uxtb	r2, r3
 800ff48:	4b3a      	ldr	r3, [pc, #232]	@ (8010034 <SX1276OnDio1Irq+0x1b0>)
 800ff4a:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 800ff4e:	b2db      	uxtb	r3, r3
 800ff50:	1ad3      	subs	r3, r2, r3
 800ff52:	b2db      	uxtb	r3, r3
 800ff54:	4619      	mov	r1, r3
 800ff56:	f7ff fcbd 	bl	800f8d4 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800ff5a:	4b36      	ldr	r3, [pc, #216]	@ (8010034 <SX1276OnDio1Irq+0x1b0>)
 800ff5c:	f8b3 2146 	ldrh.w	r2, [r3, #326]	@ 0x146
 800ff60:	4b34      	ldr	r3, [pc, #208]	@ (8010034 <SX1276OnDio1Irq+0x1b0>)
 800ff62:	f8a3 2148 	strh.w	r2, [r3, #328]	@ 0x148
                break;
 800ff66:	e018      	b.n	800ff9a <SX1276OnDio1Irq+0x116>
                TimerStop( &RxTimeoutTimer );
 800ff68:	4835      	ldr	r0, [pc, #212]	@ (8010040 <SX1276OnDio1Irq+0x1bc>)
 800ff6a:	f7fd feef 	bl	800dd4c <TimerStop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 800ff6e:	2180      	movs	r1, #128	@ 0x80
 800ff70:	2012      	movs	r0, #18
 800ff72:	f7ff fc15 	bl	800f7a0 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 800ff76:	4b2f      	ldr	r3, [pc, #188]	@ (8010034 <SX1276OnDio1Irq+0x1b0>)
 800ff78:	2200      	movs	r2, #0
 800ff7a:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800ff7e:	4b31      	ldr	r3, [pc, #196]	@ (8010044 <SX1276OnDio1Irq+0x1c0>)
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d008      	beq.n	800ff98 <SX1276OnDio1Irq+0x114>
 800ff86:	4b2f      	ldr	r3, [pc, #188]	@ (8010044 <SX1276OnDio1Irq+0x1c0>)
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	68db      	ldr	r3, [r3, #12]
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d003      	beq.n	800ff98 <SX1276OnDio1Irq+0x114>
                    RadioEvents->RxTimeout( );
 800ff90:	4b2c      	ldr	r3, [pc, #176]	@ (8010044 <SX1276OnDio1Irq+0x1c0>)
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	68db      	ldr	r3, [r3, #12]
 800ff96:	4798      	blx	r3
                break;
 800ff98:	bf00      	nop
            break;
 800ff9a:	e049      	b.n	8010030 <SX1276OnDio1Irq+0x1ac>
            switch( SX1276.Settings.Modem )
 800ff9c:	4b25      	ldr	r3, [pc, #148]	@ (8010034 <SX1276OnDio1Irq+0x1b0>)
 800ff9e:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d002      	beq.n	800ffac <SX1276OnDio1Irq+0x128>
 800ffa6:	2b01      	cmp	r3, #1
 800ffa8:	d040      	beq.n	801002c <SX1276OnDio1Irq+0x1a8>
                break;
 800ffaa:	e040      	b.n	801002e <SX1276OnDio1Irq+0x1aa>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 800ffac:	4b21      	ldr	r3, [pc, #132]	@ (8010034 <SX1276OnDio1Irq+0x1b0>)
 800ffae:	f8b3 3146 	ldrh.w	r3, [r3, #326]	@ 0x146
 800ffb2:	461a      	mov	r2, r3
 800ffb4:	4b1f      	ldr	r3, [pc, #124]	@ (8010034 <SX1276OnDio1Irq+0x1b0>)
 800ffb6:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 800ffba:	1ad3      	subs	r3, r2, r3
 800ffbc:	4a1d      	ldr	r2, [pc, #116]	@ (8010034 <SX1276OnDio1Irq+0x1b0>)
 800ffbe:	f892 214b 	ldrb.w	r2, [r2, #331]	@ 0x14b
 800ffc2:	4293      	cmp	r3, r2
 800ffc4:	dd18      	ble.n	800fff8 <SX1276OnDio1Irq+0x174>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 800ffc6:	4b1b      	ldr	r3, [pc, #108]	@ (8010034 <SX1276OnDio1Irq+0x1b0>)
 800ffc8:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 800ffcc:	461a      	mov	r2, r3
 800ffce:	4b1b      	ldr	r3, [pc, #108]	@ (801003c <SX1276OnDio1Irq+0x1b8>)
 800ffd0:	4413      	add	r3, r2
 800ffd2:	4a18      	ldr	r2, [pc, #96]	@ (8010034 <SX1276OnDio1Irq+0x1b0>)
 800ffd4:	f892 214b 	ldrb.w	r2, [r2, #331]	@ 0x14b
 800ffd8:	4611      	mov	r1, r2
 800ffda:	4618      	mov	r0, r3
 800ffdc:	f7ff fc6a 	bl	800f8b4 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 800ffe0:	4b14      	ldr	r3, [pc, #80]	@ (8010034 <SX1276OnDio1Irq+0x1b0>)
 800ffe2:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 800ffe6:	4a13      	ldr	r2, [pc, #76]	@ (8010034 <SX1276OnDio1Irq+0x1b0>)
 800ffe8:	f892 214b 	ldrb.w	r2, [r2, #331]	@ 0x14b
 800ffec:	4413      	add	r3, r2
 800ffee:	b29a      	uxth	r2, r3
 800fff0:	4b10      	ldr	r3, [pc, #64]	@ (8010034 <SX1276OnDio1Irq+0x1b0>)
 800fff2:	f8a3 2148 	strh.w	r2, [r3, #328]	@ 0x148
                break;
 800fff6:	e01a      	b.n	801002e <SX1276OnDio1Irq+0x1aa>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800fff8:	4b0e      	ldr	r3, [pc, #56]	@ (8010034 <SX1276OnDio1Irq+0x1b0>)
 800fffa:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 800fffe:	461a      	mov	r2, r3
 8010000:	4b0e      	ldr	r3, [pc, #56]	@ (801003c <SX1276OnDio1Irq+0x1b8>)
 8010002:	18d0      	adds	r0, r2, r3
 8010004:	4b0b      	ldr	r3, [pc, #44]	@ (8010034 <SX1276OnDio1Irq+0x1b0>)
 8010006:	f8b3 3146 	ldrh.w	r3, [r3, #326]	@ 0x146
 801000a:	b2da      	uxtb	r2, r3
 801000c:	4b09      	ldr	r3, [pc, #36]	@ (8010034 <SX1276OnDio1Irq+0x1b0>)
 801000e:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 8010012:	b2db      	uxtb	r3, r3
 8010014:	1ad3      	subs	r3, r2, r3
 8010016:	b2db      	uxtb	r3, r3
 8010018:	4619      	mov	r1, r3
 801001a:	f7ff fc4b 	bl	800f8b4 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 801001e:	4b05      	ldr	r3, [pc, #20]	@ (8010034 <SX1276OnDio1Irq+0x1b0>)
 8010020:	f8b3 2146 	ldrh.w	r2, [r3, #326]	@ 0x146
 8010024:	4b03      	ldr	r3, [pc, #12]	@ (8010034 <SX1276OnDio1Irq+0x1b0>)
 8010026:	f8a3 2148 	strh.w	r2, [r3, #328]	@ 0x148
                break;
 801002a:	e000      	b.n	801002e <SX1276OnDio1Irq+0x1aa>
                break;
 801002c:	bf00      	nop
            break;
 801002e:	bf00      	nop
    }
}
 8010030:	bf00      	nop
 8010032:	bd80      	pop	{r7, pc}
 8010034:	20000654 	.word	0x20000654
 8010038:	2000079a 	.word	0x2000079a
 801003c:	20000554 	.word	0x20000554
 8010040:	200007d8 	.word	0x200007d8
 8010044:	20000550 	.word	0x20000550

08010048 <SX1276OnDio2Irq>:

void SX1276OnDio2Irq( void )
{
 8010048:	b598      	push	{r3, r4, r7, lr}
 801004a:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.State )
 801004c:	4b5a      	ldr	r3, [pc, #360]	@ (80101b8 <SX1276OnDio2Irq+0x170>)
 801004e:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 8010052:	2b01      	cmp	r3, #1
 8010054:	d002      	beq.n	801005c <SX1276OnDio2Irq+0x14>
 8010056:	2b02      	cmp	r3, #2
 8010058:	d07b      	beq.n	8010152 <SX1276OnDio2Irq+0x10a>
            default:
                break;
            }
            break;
        default:
            break;
 801005a:	e0a5      	b.n	80101a8 <SX1276OnDio2Irq+0x160>
            switch( SX1276.Settings.Modem )
 801005c:	4b56      	ldr	r3, [pc, #344]	@ (80101b8 <SX1276OnDio2Irq+0x170>)
 801005e:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 8010062:	2b00      	cmp	r3, #0
 8010064:	d002      	beq.n	801006c <SX1276OnDio2Irq+0x24>
 8010066:	2b01      	cmp	r3, #1
 8010068:	d050      	beq.n	801010c <SX1276OnDio2Irq+0xc4>
                break;
 801006a:	e071      	b.n	8010150 <SX1276OnDio2Irq+0x108>
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected == true ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == false ) )
 801006c:	4b52      	ldr	r3, [pc, #328]	@ (80101b8 <SX1276OnDio2Irq+0x170>)
 801006e:	f893 313c 	ldrb.w	r3, [r3, #316]	@ 0x13c
 8010072:	2b01      	cmp	r3, #1
 8010074:	d169      	bne.n	801014a <SX1276OnDio2Irq+0x102>
 8010076:	4b50      	ldr	r3, [pc, #320]	@ (80101b8 <SX1276OnDio2Irq+0x170>)
 8010078:	f893 313d 	ldrb.w	r3, [r3, #317]	@ 0x13d
 801007c:	2b00      	cmp	r3, #0
 801007e:	d164      	bne.n	801014a <SX1276OnDio2Irq+0x102>
                    TimerStop( &RxTimeoutSyncWord );
 8010080:	484e      	ldr	r0, [pc, #312]	@ (80101bc <SX1276OnDio2Irq+0x174>)
 8010082:	f7fd fe63 	bl	800dd4c <TimerStop>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 8010086:	4b4c      	ldr	r3, [pc, #304]	@ (80101b8 <SX1276OnDio2Irq+0x170>)
 8010088:	2201      	movs	r2, #1
 801008a:	f883 213d 	strb.w	r2, [r3, #317]	@ 0x13d
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 801008e:	2011      	movs	r0, #17
 8010090:	f7ff fb98 	bl	800f7c4 <SX1276Read>
 8010094:	4603      	mov	r3, r0
 8010096:	085b      	lsrs	r3, r3, #1
 8010098:	b2db      	uxtb	r3, r3
 801009a:	425b      	negs	r3, r3
 801009c:	b2db      	uxtb	r3, r3
 801009e:	b25a      	sxtb	r2, r3
 80100a0:	4b45      	ldr	r3, [pc, #276]	@ (80101b8 <SX1276OnDio2Irq+0x170>)
 80100a2:	f883 213e 	strb.w	r2, [r3, #318]	@ 0x13e
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )( double )( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 80100a6:	201b      	movs	r0, #27
 80100a8:	f7ff fb8c 	bl	800f7c4 <SX1276Read>
 80100ac:	4603      	mov	r3, r0
 80100ae:	021c      	lsls	r4, r3, #8
                                                                           ( uint16_t )SX1276Read( REG_AFCLSB ) ) *
 80100b0:	201c      	movs	r0, #28
 80100b2:	f7ff fb87 	bl	800f7c4 <SX1276Read>
 80100b6:	4603      	mov	r3, r0
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )( double )( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 80100b8:	4323      	orrs	r3, r4
 80100ba:	4618      	mov	r0, r3
 80100bc:	f7f1 ffc4 	bl	8002048 <__aeabi_i2d>
 80100c0:	4602      	mov	r2, r0
 80100c2:	460b      	mov	r3, r1
 80100c4:	4610      	mov	r0, r2
 80100c6:	4619      	mov	r1, r3
 80100c8:	f7f2 fad8 	bl	800267c <__aeabi_d2iz>
 80100cc:	4603      	mov	r3, r0
                                                                           ( uint16_t )SX1276Read( REG_AFCLSB ) ) *
 80100ce:	4618      	mov	r0, r3
 80100d0:	f7f1 ffba 	bl	8002048 <__aeabi_i2d>
 80100d4:	a336      	add	r3, pc, #216	@ (adr r3, 80101b0 <SX1276OnDio2Irq+0x168>)
 80100d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100da:	f7f2 f81f 	bl	800211c <__aeabi_dmul>
 80100de:	4602      	mov	r2, r0
 80100e0:	460b      	mov	r3, r1
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )( double )( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 80100e2:	4610      	mov	r0, r2
 80100e4:	4619      	mov	r1, r3
 80100e6:	f7f2 fac9 	bl	800267c <__aeabi_d2iz>
 80100ea:	4603      	mov	r3, r0
 80100ec:	4a32      	ldr	r2, [pc, #200]	@ (80101b8 <SX1276OnDio2Irq+0x170>)
 80100ee:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 80100f2:	200c      	movs	r0, #12
 80100f4:	f7ff fb66 	bl	800f7c4 <SX1276Read>
 80100f8:	4603      	mov	r3, r0
 80100fa:	095b      	lsrs	r3, r3, #5
 80100fc:	b2db      	uxtb	r3, r3
 80100fe:	f003 0307 	and.w	r3, r3, #7
 8010102:	b2da      	uxtb	r2, r3
 8010104:	4b2c      	ldr	r3, [pc, #176]	@ (80101b8 <SX1276OnDio2Irq+0x170>)
 8010106:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
                break;
 801010a:	e01e      	b.n	801014a <SX1276OnDio2Irq+0x102>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 801010c:	4b2a      	ldr	r3, [pc, #168]	@ (80101b8 <SX1276OnDio2Irq+0x170>)
 801010e:	f893 315f 	ldrb.w	r3, [r3, #351]	@ 0x15f
 8010112:	2b00      	cmp	r3, #0
 8010114:	d01b      	beq.n	801014e <SX1276OnDio2Irq+0x106>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8010116:	2102      	movs	r1, #2
 8010118:	2012      	movs	r0, #18
 801011a:	f7ff fb41 	bl	800f7a0 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 801011e:	4b28      	ldr	r3, [pc, #160]	@ (80101c0 <SX1276OnDio2Irq+0x178>)
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	2b00      	cmp	r3, #0
 8010124:	d013      	beq.n	801014e <SX1276OnDio2Irq+0x106>
 8010126:	4b26      	ldr	r3, [pc, #152]	@ (80101c0 <SX1276OnDio2Irq+0x178>)
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	695b      	ldr	r3, [r3, #20]
 801012c:	2b00      	cmp	r3, #0
 801012e:	d00e      	beq.n	801014e <SX1276OnDio2Irq+0x106>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 8010130:	4b23      	ldr	r3, [pc, #140]	@ (80101c0 <SX1276OnDio2Irq+0x178>)
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	695c      	ldr	r4, [r3, #20]
 8010136:	201c      	movs	r0, #28
 8010138:	f7ff fb44 	bl	800f7c4 <SX1276Read>
 801013c:	4603      	mov	r3, r0
 801013e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010142:	b2db      	uxtb	r3, r3
 8010144:	4618      	mov	r0, r3
 8010146:	47a0      	blx	r4
                break;
 8010148:	e001      	b.n	801014e <SX1276OnDio2Irq+0x106>
                break;
 801014a:	bf00      	nop
 801014c:	e02c      	b.n	80101a8 <SX1276OnDio2Irq+0x160>
                break;
 801014e:	bf00      	nop
            break;
 8010150:	e02a      	b.n	80101a8 <SX1276OnDio2Irq+0x160>
            switch( SX1276.Settings.Modem )
 8010152:	4b19      	ldr	r3, [pc, #100]	@ (80101b8 <SX1276OnDio2Irq+0x170>)
 8010154:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 8010158:	2b00      	cmp	r3, #0
 801015a:	d021      	beq.n	80101a0 <SX1276OnDio2Irq+0x158>
 801015c:	2b01      	cmp	r3, #1
 801015e:	d000      	beq.n	8010162 <SX1276OnDio2Irq+0x11a>
                break;
 8010160:	e021      	b.n	80101a6 <SX1276OnDio2Irq+0x15e>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8010162:	4b15      	ldr	r3, [pc, #84]	@ (80101b8 <SX1276OnDio2Irq+0x170>)
 8010164:	f893 315f 	ldrb.w	r3, [r3, #351]	@ 0x15f
 8010168:	2b00      	cmp	r3, #0
 801016a:	d01b      	beq.n	80101a4 <SX1276OnDio2Irq+0x15c>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 801016c:	2102      	movs	r1, #2
 801016e:	2012      	movs	r0, #18
 8010170:	f7ff fb16 	bl	800f7a0 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 8010174:	4b12      	ldr	r3, [pc, #72]	@ (80101c0 <SX1276OnDio2Irq+0x178>)
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	2b00      	cmp	r3, #0
 801017a:	d013      	beq.n	80101a4 <SX1276OnDio2Irq+0x15c>
 801017c:	4b10      	ldr	r3, [pc, #64]	@ (80101c0 <SX1276OnDio2Irq+0x178>)
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	695b      	ldr	r3, [r3, #20]
 8010182:	2b00      	cmp	r3, #0
 8010184:	d00e      	beq.n	80101a4 <SX1276OnDio2Irq+0x15c>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 8010186:	4b0e      	ldr	r3, [pc, #56]	@ (80101c0 <SX1276OnDio2Irq+0x178>)
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	695c      	ldr	r4, [r3, #20]
 801018c:	201c      	movs	r0, #28
 801018e:	f7ff fb19 	bl	800f7c4 <SX1276Read>
 8010192:	4603      	mov	r3, r0
 8010194:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010198:	b2db      	uxtb	r3, r3
 801019a:	4618      	mov	r0, r3
 801019c:	47a0      	blx	r4
                break;
 801019e:	e001      	b.n	80101a4 <SX1276OnDio2Irq+0x15c>
                break;
 80101a0:	bf00      	nop
 80101a2:	e000      	b.n	80101a6 <SX1276OnDio2Irq+0x15e>
                break;
 80101a4:	bf00      	nop
            break;
 80101a6:	bf00      	nop
    }
}
 80101a8:	bf00      	nop
 80101aa:	bd98      	pop	{r3, r4, r7, pc}
 80101ac:	f3af 8000 	nop.w
 80101b0:	00000000 	.word	0x00000000
 80101b4:	404e8480 	.word	0x404e8480
 80101b8:	20000654 	.word	0x20000654
 80101bc:	200007ec 	.word	0x200007ec
 80101c0:	20000550 	.word	0x20000550

080101c4 <SX1276OnDio3Irq>:

void SX1276OnDio3Irq( void )
{
 80101c4:	b580      	push	{r7, lr}
 80101c6:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 80101c8:	4b1d      	ldr	r3, [pc, #116]	@ (8010240 <SX1276OnDio3Irq+0x7c>)
 80101ca:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d030      	beq.n	8010234 <SX1276OnDio3Irq+0x70>
 80101d2:	2b01      	cmp	r3, #1
 80101d4:	d000      	beq.n	80101d8 <SX1276OnDio3Irq+0x14>
                RadioEvents->CadDone( false );
            }
        }
        break;
    default:
        break;
 80101d6:	e030      	b.n	801023a <SX1276OnDio3Irq+0x76>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 80101d8:	2012      	movs	r0, #18
 80101da:	f7ff faf3 	bl	800f7c4 <SX1276Read>
 80101de:	4603      	mov	r3, r0
 80101e0:	f003 0301 	and.w	r3, r3, #1
 80101e4:	2b01      	cmp	r3, #1
 80101e6:	d112      	bne.n	801020e <SX1276OnDio3Irq+0x4a>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 80101e8:	2105      	movs	r1, #5
 80101ea:	2012      	movs	r0, #18
 80101ec:	f7ff fad8 	bl	800f7a0 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80101f0:	4b14      	ldr	r3, [pc, #80]	@ (8010244 <SX1276OnDio3Irq+0x80>)
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d01f      	beq.n	8010238 <SX1276OnDio3Irq+0x74>
 80101f8:	4b12      	ldr	r3, [pc, #72]	@ (8010244 <SX1276OnDio3Irq+0x80>)
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	699b      	ldr	r3, [r3, #24]
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d01a      	beq.n	8010238 <SX1276OnDio3Irq+0x74>
                RadioEvents->CadDone( true );
 8010202:	4b10      	ldr	r3, [pc, #64]	@ (8010244 <SX1276OnDio3Irq+0x80>)
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	699b      	ldr	r3, [r3, #24]
 8010208:	2001      	movs	r0, #1
 801020a:	4798      	blx	r3
        break;
 801020c:	e014      	b.n	8010238 <SX1276OnDio3Irq+0x74>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 801020e:	2104      	movs	r1, #4
 8010210:	2012      	movs	r0, #18
 8010212:	f7ff fac5 	bl	800f7a0 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8010216:	4b0b      	ldr	r3, [pc, #44]	@ (8010244 <SX1276OnDio3Irq+0x80>)
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	2b00      	cmp	r3, #0
 801021c:	d00c      	beq.n	8010238 <SX1276OnDio3Irq+0x74>
 801021e:	4b09      	ldr	r3, [pc, #36]	@ (8010244 <SX1276OnDio3Irq+0x80>)
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	699b      	ldr	r3, [r3, #24]
 8010224:	2b00      	cmp	r3, #0
 8010226:	d007      	beq.n	8010238 <SX1276OnDio3Irq+0x74>
                RadioEvents->CadDone( false );
 8010228:	4b06      	ldr	r3, [pc, #24]	@ (8010244 <SX1276OnDio3Irq+0x80>)
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	699b      	ldr	r3, [r3, #24]
 801022e:	2000      	movs	r0, #0
 8010230:	4798      	blx	r3
        break;
 8010232:	e001      	b.n	8010238 <SX1276OnDio3Irq+0x74>
        break;
 8010234:	bf00      	nop
 8010236:	e000      	b.n	801023a <SX1276OnDio3Irq+0x76>
        break;
 8010238:	bf00      	nop
    }
}
 801023a:	bf00      	nop
 801023c:	bd80      	pop	{r7, pc}
 801023e:	bf00      	nop
 8010240:	20000654 	.word	0x20000654
 8010244:	20000550 	.word	0x20000550

08010248 <SX1276OnDio4Irq>:

void SX1276OnDio4Irq( void )
{
 8010248:	b480      	push	{r7}
 801024a:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 801024c:	4b0c      	ldr	r3, [pc, #48]	@ (8010280 <SX1276OnDio4Irq+0x38>)
 801024e:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 8010252:	2b00      	cmp	r3, #0
 8010254:	d002      	beq.n	801025c <SX1276OnDio4Irq+0x14>
 8010256:	2b01      	cmp	r3, #1
 8010258:	d00a      	beq.n	8010270 <SX1276OnDio4Irq+0x28>
        }
        break;
    case MODEM_LORA:
        break;
    default:
        break;
 801025a:	e00c      	b.n	8010276 <SX1276OnDio4Irq+0x2e>
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 801025c:	4b08      	ldr	r3, [pc, #32]	@ (8010280 <SX1276OnDio4Irq+0x38>)
 801025e:	f893 313c 	ldrb.w	r3, [r3, #316]	@ 0x13c
 8010262:	2b00      	cmp	r3, #0
 8010264:	d106      	bne.n	8010274 <SX1276OnDio4Irq+0x2c>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8010266:	4b06      	ldr	r3, [pc, #24]	@ (8010280 <SX1276OnDio4Irq+0x38>)
 8010268:	2201      	movs	r2, #1
 801026a:	f883 213c 	strb.w	r2, [r3, #316]	@ 0x13c
        break;
 801026e:	e001      	b.n	8010274 <SX1276OnDio4Irq+0x2c>
        break;
 8010270:	bf00      	nop
 8010272:	e000      	b.n	8010276 <SX1276OnDio4Irq+0x2e>
        break;
 8010274:	bf00      	nop
    }
}
 8010276:	bf00      	nop
 8010278:	46bd      	mov	sp, r7
 801027a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801027e:	4770      	bx	lr
 8010280:	20000654 	.word	0x20000654

08010284 <__cvt>:
 8010284:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010288:	ec57 6b10 	vmov	r6, r7, d0
 801028c:	2f00      	cmp	r7, #0
 801028e:	460c      	mov	r4, r1
 8010290:	4619      	mov	r1, r3
 8010292:	463b      	mov	r3, r7
 8010294:	bfb4      	ite	lt
 8010296:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801029a:	2300      	movge	r3, #0
 801029c:	4691      	mov	r9, r2
 801029e:	bfbf      	itttt	lt
 80102a0:	4632      	movlt	r2, r6
 80102a2:	461f      	movlt	r7, r3
 80102a4:	232d      	movlt	r3, #45	@ 0x2d
 80102a6:	4616      	movlt	r6, r2
 80102a8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80102ac:	700b      	strb	r3, [r1, #0]
 80102ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80102b0:	f023 0820 	bic.w	r8, r3, #32
 80102b4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80102b8:	d005      	beq.n	80102c6 <__cvt+0x42>
 80102ba:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80102be:	d100      	bne.n	80102c2 <__cvt+0x3e>
 80102c0:	3401      	adds	r4, #1
 80102c2:	2102      	movs	r1, #2
 80102c4:	e000      	b.n	80102c8 <__cvt+0x44>
 80102c6:	2103      	movs	r1, #3
 80102c8:	ab03      	add	r3, sp, #12
 80102ca:	4622      	mov	r2, r4
 80102cc:	9301      	str	r3, [sp, #4]
 80102ce:	ab02      	add	r3, sp, #8
 80102d0:	ec47 6b10 	vmov	d0, r6, r7
 80102d4:	9300      	str	r3, [sp, #0]
 80102d6:	4653      	mov	r3, sl
 80102d8:	f001 f9aa 	bl	8011630 <_dtoa_r>
 80102dc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80102e0:	4605      	mov	r5, r0
 80102e2:	d119      	bne.n	8010318 <__cvt+0x94>
 80102e4:	f019 0f01 	tst.w	r9, #1
 80102e8:	d00e      	beq.n	8010308 <__cvt+0x84>
 80102ea:	eb00 0904 	add.w	r9, r0, r4
 80102ee:	2200      	movs	r2, #0
 80102f0:	2300      	movs	r3, #0
 80102f2:	4630      	mov	r0, r6
 80102f4:	4639      	mov	r1, r7
 80102f6:	f7f2 f979 	bl	80025ec <__aeabi_dcmpeq>
 80102fa:	b108      	cbz	r0, 8010300 <__cvt+0x7c>
 80102fc:	f8cd 900c 	str.w	r9, [sp, #12]
 8010300:	2230      	movs	r2, #48	@ 0x30
 8010302:	9b03      	ldr	r3, [sp, #12]
 8010304:	454b      	cmp	r3, r9
 8010306:	d31e      	bcc.n	8010346 <__cvt+0xc2>
 8010308:	9b03      	ldr	r3, [sp, #12]
 801030a:	4628      	mov	r0, r5
 801030c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801030e:	1b5b      	subs	r3, r3, r5
 8010310:	6013      	str	r3, [r2, #0]
 8010312:	b004      	add	sp, #16
 8010314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010318:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801031c:	eb00 0904 	add.w	r9, r0, r4
 8010320:	d1e5      	bne.n	80102ee <__cvt+0x6a>
 8010322:	7803      	ldrb	r3, [r0, #0]
 8010324:	2b30      	cmp	r3, #48	@ 0x30
 8010326:	d10a      	bne.n	801033e <__cvt+0xba>
 8010328:	2200      	movs	r2, #0
 801032a:	2300      	movs	r3, #0
 801032c:	4630      	mov	r0, r6
 801032e:	4639      	mov	r1, r7
 8010330:	f7f2 f95c 	bl	80025ec <__aeabi_dcmpeq>
 8010334:	b918      	cbnz	r0, 801033e <__cvt+0xba>
 8010336:	f1c4 0401 	rsb	r4, r4, #1
 801033a:	f8ca 4000 	str.w	r4, [sl]
 801033e:	f8da 3000 	ldr.w	r3, [sl]
 8010342:	4499      	add	r9, r3
 8010344:	e7d3      	b.n	80102ee <__cvt+0x6a>
 8010346:	1c59      	adds	r1, r3, #1
 8010348:	9103      	str	r1, [sp, #12]
 801034a:	701a      	strb	r2, [r3, #0]
 801034c:	e7d9      	b.n	8010302 <__cvt+0x7e>

0801034e <__exponent>:
 801034e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010350:	2900      	cmp	r1, #0
 8010352:	7002      	strb	r2, [r0, #0]
 8010354:	bfba      	itte	lt
 8010356:	4249      	neglt	r1, r1
 8010358:	232d      	movlt	r3, #45	@ 0x2d
 801035a:	232b      	movge	r3, #43	@ 0x2b
 801035c:	2909      	cmp	r1, #9
 801035e:	7043      	strb	r3, [r0, #1]
 8010360:	dd28      	ble.n	80103b4 <__exponent+0x66>
 8010362:	f10d 0307 	add.w	r3, sp, #7
 8010366:	270a      	movs	r7, #10
 8010368:	461d      	mov	r5, r3
 801036a:	461a      	mov	r2, r3
 801036c:	3b01      	subs	r3, #1
 801036e:	fbb1 f6f7 	udiv	r6, r1, r7
 8010372:	fb07 1416 	mls	r4, r7, r6, r1
 8010376:	3430      	adds	r4, #48	@ 0x30
 8010378:	f802 4c01 	strb.w	r4, [r2, #-1]
 801037c:	460c      	mov	r4, r1
 801037e:	4631      	mov	r1, r6
 8010380:	2c63      	cmp	r4, #99	@ 0x63
 8010382:	dcf2      	bgt.n	801036a <__exponent+0x1c>
 8010384:	3130      	adds	r1, #48	@ 0x30
 8010386:	1e94      	subs	r4, r2, #2
 8010388:	f803 1c01 	strb.w	r1, [r3, #-1]
 801038c:	1c41      	adds	r1, r0, #1
 801038e:	4623      	mov	r3, r4
 8010390:	42ab      	cmp	r3, r5
 8010392:	d30a      	bcc.n	80103aa <__exponent+0x5c>
 8010394:	f10d 0309 	add.w	r3, sp, #9
 8010398:	1a9b      	subs	r3, r3, r2
 801039a:	42ac      	cmp	r4, r5
 801039c:	bf88      	it	hi
 801039e:	2300      	movhi	r3, #0
 80103a0:	3302      	adds	r3, #2
 80103a2:	4403      	add	r3, r0
 80103a4:	1a18      	subs	r0, r3, r0
 80103a6:	b003      	add	sp, #12
 80103a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80103aa:	f813 6b01 	ldrb.w	r6, [r3], #1
 80103ae:	f801 6f01 	strb.w	r6, [r1, #1]!
 80103b2:	e7ed      	b.n	8010390 <__exponent+0x42>
 80103b4:	2330      	movs	r3, #48	@ 0x30
 80103b6:	3130      	adds	r1, #48	@ 0x30
 80103b8:	7083      	strb	r3, [r0, #2]
 80103ba:	1d03      	adds	r3, r0, #4
 80103bc:	70c1      	strb	r1, [r0, #3]
 80103be:	e7f1      	b.n	80103a4 <__exponent+0x56>

080103c0 <_printf_float>:
 80103c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103c4:	b08d      	sub	sp, #52	@ 0x34
 80103c6:	460c      	mov	r4, r1
 80103c8:	4616      	mov	r6, r2
 80103ca:	461f      	mov	r7, r3
 80103cc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80103d0:	4605      	mov	r5, r0
 80103d2:	f001 f801 	bl	80113d8 <_localeconv_r>
 80103d6:	6803      	ldr	r3, [r0, #0]
 80103d8:	4618      	mov	r0, r3
 80103da:	9304      	str	r3, [sp, #16]
 80103dc:	f7f1 fc8d 	bl	8001cfa <strlen>
 80103e0:	2300      	movs	r3, #0
 80103e2:	9005      	str	r0, [sp, #20]
 80103e4:	930a      	str	r3, [sp, #40]	@ 0x28
 80103e6:	f8d8 3000 	ldr.w	r3, [r8]
 80103ea:	f894 a018 	ldrb.w	sl, [r4, #24]
 80103ee:	3307      	adds	r3, #7
 80103f0:	f8d4 b000 	ldr.w	fp, [r4]
 80103f4:	f023 0307 	bic.w	r3, r3, #7
 80103f8:	f103 0208 	add.w	r2, r3, #8
 80103fc:	f8c8 2000 	str.w	r2, [r8]
 8010400:	f04f 32ff 	mov.w	r2, #4294967295
 8010404:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010408:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801040c:	f8cd 8018 	str.w	r8, [sp, #24]
 8010410:	9307      	str	r3, [sp, #28]
 8010412:	4b9d      	ldr	r3, [pc, #628]	@ (8010688 <_printf_float+0x2c8>)
 8010414:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010418:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801041c:	f7f2 f918 	bl	8002650 <__aeabi_dcmpun>
 8010420:	bb70      	cbnz	r0, 8010480 <_printf_float+0xc0>
 8010422:	f04f 32ff 	mov.w	r2, #4294967295
 8010426:	4b98      	ldr	r3, [pc, #608]	@ (8010688 <_printf_float+0x2c8>)
 8010428:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801042c:	f7f2 f8f2 	bl	8002614 <__aeabi_dcmple>
 8010430:	bb30      	cbnz	r0, 8010480 <_printf_float+0xc0>
 8010432:	2200      	movs	r2, #0
 8010434:	2300      	movs	r3, #0
 8010436:	4640      	mov	r0, r8
 8010438:	4649      	mov	r1, r9
 801043a:	f7f2 f8e1 	bl	8002600 <__aeabi_dcmplt>
 801043e:	b110      	cbz	r0, 8010446 <_printf_float+0x86>
 8010440:	232d      	movs	r3, #45	@ 0x2d
 8010442:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010446:	4a91      	ldr	r2, [pc, #580]	@ (801068c <_printf_float+0x2cc>)
 8010448:	4b91      	ldr	r3, [pc, #580]	@ (8010690 <_printf_float+0x2d0>)
 801044a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801044e:	bf8c      	ite	hi
 8010450:	4690      	movhi	r8, r2
 8010452:	4698      	movls	r8, r3
 8010454:	2303      	movs	r3, #3
 8010456:	f04f 0900 	mov.w	r9, #0
 801045a:	6123      	str	r3, [r4, #16]
 801045c:	f02b 0304 	bic.w	r3, fp, #4
 8010460:	6023      	str	r3, [r4, #0]
 8010462:	4633      	mov	r3, r6
 8010464:	aa0b      	add	r2, sp, #44	@ 0x2c
 8010466:	4621      	mov	r1, r4
 8010468:	4628      	mov	r0, r5
 801046a:	9700      	str	r7, [sp, #0]
 801046c:	f000 f9d2 	bl	8010814 <_printf_common>
 8010470:	3001      	adds	r0, #1
 8010472:	f040 808d 	bne.w	8010590 <_printf_float+0x1d0>
 8010476:	f04f 30ff 	mov.w	r0, #4294967295
 801047a:	b00d      	add	sp, #52	@ 0x34
 801047c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010480:	4642      	mov	r2, r8
 8010482:	464b      	mov	r3, r9
 8010484:	4640      	mov	r0, r8
 8010486:	4649      	mov	r1, r9
 8010488:	f7f2 f8e2 	bl	8002650 <__aeabi_dcmpun>
 801048c:	b140      	cbz	r0, 80104a0 <_printf_float+0xe0>
 801048e:	464b      	mov	r3, r9
 8010490:	4a80      	ldr	r2, [pc, #512]	@ (8010694 <_printf_float+0x2d4>)
 8010492:	2b00      	cmp	r3, #0
 8010494:	bfbc      	itt	lt
 8010496:	232d      	movlt	r3, #45	@ 0x2d
 8010498:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801049c:	4b7e      	ldr	r3, [pc, #504]	@ (8010698 <_printf_float+0x2d8>)
 801049e:	e7d4      	b.n	801044a <_printf_float+0x8a>
 80104a0:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80104a4:	6863      	ldr	r3, [r4, #4]
 80104a6:	9206      	str	r2, [sp, #24]
 80104a8:	1c5a      	adds	r2, r3, #1
 80104aa:	d13b      	bne.n	8010524 <_printf_float+0x164>
 80104ac:	2306      	movs	r3, #6
 80104ae:	6063      	str	r3, [r4, #4]
 80104b0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80104b4:	2300      	movs	r3, #0
 80104b6:	4628      	mov	r0, r5
 80104b8:	6022      	str	r2, [r4, #0]
 80104ba:	9303      	str	r3, [sp, #12]
 80104bc:	ab0a      	add	r3, sp, #40	@ 0x28
 80104be:	e9cd a301 	strd	sl, r3, [sp, #4]
 80104c2:	ab09      	add	r3, sp, #36	@ 0x24
 80104c4:	ec49 8b10 	vmov	d0, r8, r9
 80104c8:	9300      	str	r3, [sp, #0]
 80104ca:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80104ce:	6861      	ldr	r1, [r4, #4]
 80104d0:	f7ff fed8 	bl	8010284 <__cvt>
 80104d4:	9b06      	ldr	r3, [sp, #24]
 80104d6:	4680      	mov	r8, r0
 80104d8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80104da:	2b47      	cmp	r3, #71	@ 0x47
 80104dc:	d129      	bne.n	8010532 <_printf_float+0x172>
 80104de:	1cc8      	adds	r0, r1, #3
 80104e0:	db02      	blt.n	80104e8 <_printf_float+0x128>
 80104e2:	6863      	ldr	r3, [r4, #4]
 80104e4:	4299      	cmp	r1, r3
 80104e6:	dd41      	ble.n	801056c <_printf_float+0x1ac>
 80104e8:	f1aa 0a02 	sub.w	sl, sl, #2
 80104ec:	fa5f fa8a 	uxtb.w	sl, sl
 80104f0:	3901      	subs	r1, #1
 80104f2:	4652      	mov	r2, sl
 80104f4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80104f8:	9109      	str	r1, [sp, #36]	@ 0x24
 80104fa:	f7ff ff28 	bl	801034e <__exponent>
 80104fe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010500:	4681      	mov	r9, r0
 8010502:	1813      	adds	r3, r2, r0
 8010504:	2a01      	cmp	r2, #1
 8010506:	6123      	str	r3, [r4, #16]
 8010508:	dc02      	bgt.n	8010510 <_printf_float+0x150>
 801050a:	6822      	ldr	r2, [r4, #0]
 801050c:	07d2      	lsls	r2, r2, #31
 801050e:	d501      	bpl.n	8010514 <_printf_float+0x154>
 8010510:	3301      	adds	r3, #1
 8010512:	6123      	str	r3, [r4, #16]
 8010514:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8010518:	2b00      	cmp	r3, #0
 801051a:	d0a2      	beq.n	8010462 <_printf_float+0xa2>
 801051c:	232d      	movs	r3, #45	@ 0x2d
 801051e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010522:	e79e      	b.n	8010462 <_printf_float+0xa2>
 8010524:	9a06      	ldr	r2, [sp, #24]
 8010526:	2a47      	cmp	r2, #71	@ 0x47
 8010528:	d1c2      	bne.n	80104b0 <_printf_float+0xf0>
 801052a:	2b00      	cmp	r3, #0
 801052c:	d1c0      	bne.n	80104b0 <_printf_float+0xf0>
 801052e:	2301      	movs	r3, #1
 8010530:	e7bd      	b.n	80104ae <_printf_float+0xee>
 8010532:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8010536:	d9db      	bls.n	80104f0 <_printf_float+0x130>
 8010538:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801053c:	d118      	bne.n	8010570 <_printf_float+0x1b0>
 801053e:	2900      	cmp	r1, #0
 8010540:	6863      	ldr	r3, [r4, #4]
 8010542:	dd0b      	ble.n	801055c <_printf_float+0x19c>
 8010544:	6121      	str	r1, [r4, #16]
 8010546:	b913      	cbnz	r3, 801054e <_printf_float+0x18e>
 8010548:	6822      	ldr	r2, [r4, #0]
 801054a:	07d0      	lsls	r0, r2, #31
 801054c:	d502      	bpl.n	8010554 <_printf_float+0x194>
 801054e:	3301      	adds	r3, #1
 8010550:	440b      	add	r3, r1
 8010552:	6123      	str	r3, [r4, #16]
 8010554:	f04f 0900 	mov.w	r9, #0
 8010558:	65a1      	str	r1, [r4, #88]	@ 0x58
 801055a:	e7db      	b.n	8010514 <_printf_float+0x154>
 801055c:	b913      	cbnz	r3, 8010564 <_printf_float+0x1a4>
 801055e:	6822      	ldr	r2, [r4, #0]
 8010560:	07d2      	lsls	r2, r2, #31
 8010562:	d501      	bpl.n	8010568 <_printf_float+0x1a8>
 8010564:	3302      	adds	r3, #2
 8010566:	e7f4      	b.n	8010552 <_printf_float+0x192>
 8010568:	2301      	movs	r3, #1
 801056a:	e7f2      	b.n	8010552 <_printf_float+0x192>
 801056c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8010570:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010572:	4299      	cmp	r1, r3
 8010574:	db05      	blt.n	8010582 <_printf_float+0x1c2>
 8010576:	6823      	ldr	r3, [r4, #0]
 8010578:	6121      	str	r1, [r4, #16]
 801057a:	07d8      	lsls	r0, r3, #31
 801057c:	d5ea      	bpl.n	8010554 <_printf_float+0x194>
 801057e:	1c4b      	adds	r3, r1, #1
 8010580:	e7e7      	b.n	8010552 <_printf_float+0x192>
 8010582:	2900      	cmp	r1, #0
 8010584:	bfd4      	ite	le
 8010586:	f1c1 0202 	rsble	r2, r1, #2
 801058a:	2201      	movgt	r2, #1
 801058c:	4413      	add	r3, r2
 801058e:	e7e0      	b.n	8010552 <_printf_float+0x192>
 8010590:	6823      	ldr	r3, [r4, #0]
 8010592:	055a      	lsls	r2, r3, #21
 8010594:	d407      	bmi.n	80105a6 <_printf_float+0x1e6>
 8010596:	6923      	ldr	r3, [r4, #16]
 8010598:	4642      	mov	r2, r8
 801059a:	4631      	mov	r1, r6
 801059c:	4628      	mov	r0, r5
 801059e:	47b8      	blx	r7
 80105a0:	3001      	adds	r0, #1
 80105a2:	d12b      	bne.n	80105fc <_printf_float+0x23c>
 80105a4:	e767      	b.n	8010476 <_printf_float+0xb6>
 80105a6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80105aa:	f240 80dd 	bls.w	8010768 <_printf_float+0x3a8>
 80105ae:	2200      	movs	r2, #0
 80105b0:	2300      	movs	r3, #0
 80105b2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80105b6:	f7f2 f819 	bl	80025ec <__aeabi_dcmpeq>
 80105ba:	2800      	cmp	r0, #0
 80105bc:	d033      	beq.n	8010626 <_printf_float+0x266>
 80105be:	2301      	movs	r3, #1
 80105c0:	4a36      	ldr	r2, [pc, #216]	@ (801069c <_printf_float+0x2dc>)
 80105c2:	4631      	mov	r1, r6
 80105c4:	4628      	mov	r0, r5
 80105c6:	47b8      	blx	r7
 80105c8:	3001      	adds	r0, #1
 80105ca:	f43f af54 	beq.w	8010476 <_printf_float+0xb6>
 80105ce:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80105d2:	4543      	cmp	r3, r8
 80105d4:	db02      	blt.n	80105dc <_printf_float+0x21c>
 80105d6:	6823      	ldr	r3, [r4, #0]
 80105d8:	07d8      	lsls	r0, r3, #31
 80105da:	d50f      	bpl.n	80105fc <_printf_float+0x23c>
 80105dc:	4631      	mov	r1, r6
 80105de:	4628      	mov	r0, r5
 80105e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80105e4:	47b8      	blx	r7
 80105e6:	3001      	adds	r0, #1
 80105e8:	f43f af45 	beq.w	8010476 <_printf_float+0xb6>
 80105ec:	f04f 0900 	mov.w	r9, #0
 80105f0:	f108 38ff 	add.w	r8, r8, #4294967295
 80105f4:	f104 0a1a 	add.w	sl, r4, #26
 80105f8:	45c8      	cmp	r8, r9
 80105fa:	dc09      	bgt.n	8010610 <_printf_float+0x250>
 80105fc:	6823      	ldr	r3, [r4, #0]
 80105fe:	079b      	lsls	r3, r3, #30
 8010600:	f100 8103 	bmi.w	801080a <_printf_float+0x44a>
 8010604:	68e0      	ldr	r0, [r4, #12]
 8010606:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010608:	4298      	cmp	r0, r3
 801060a:	bfb8      	it	lt
 801060c:	4618      	movlt	r0, r3
 801060e:	e734      	b.n	801047a <_printf_float+0xba>
 8010610:	2301      	movs	r3, #1
 8010612:	4652      	mov	r2, sl
 8010614:	4631      	mov	r1, r6
 8010616:	4628      	mov	r0, r5
 8010618:	47b8      	blx	r7
 801061a:	3001      	adds	r0, #1
 801061c:	f43f af2b 	beq.w	8010476 <_printf_float+0xb6>
 8010620:	f109 0901 	add.w	r9, r9, #1
 8010624:	e7e8      	b.n	80105f8 <_printf_float+0x238>
 8010626:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010628:	2b00      	cmp	r3, #0
 801062a:	dc39      	bgt.n	80106a0 <_printf_float+0x2e0>
 801062c:	2301      	movs	r3, #1
 801062e:	4a1b      	ldr	r2, [pc, #108]	@ (801069c <_printf_float+0x2dc>)
 8010630:	4631      	mov	r1, r6
 8010632:	4628      	mov	r0, r5
 8010634:	47b8      	blx	r7
 8010636:	3001      	adds	r0, #1
 8010638:	f43f af1d 	beq.w	8010476 <_printf_float+0xb6>
 801063c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8010640:	ea59 0303 	orrs.w	r3, r9, r3
 8010644:	d102      	bne.n	801064c <_printf_float+0x28c>
 8010646:	6823      	ldr	r3, [r4, #0]
 8010648:	07d9      	lsls	r1, r3, #31
 801064a:	d5d7      	bpl.n	80105fc <_printf_float+0x23c>
 801064c:	4631      	mov	r1, r6
 801064e:	4628      	mov	r0, r5
 8010650:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010654:	47b8      	blx	r7
 8010656:	3001      	adds	r0, #1
 8010658:	f43f af0d 	beq.w	8010476 <_printf_float+0xb6>
 801065c:	f04f 0a00 	mov.w	sl, #0
 8010660:	f104 0b1a 	add.w	fp, r4, #26
 8010664:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010666:	425b      	negs	r3, r3
 8010668:	4553      	cmp	r3, sl
 801066a:	dc01      	bgt.n	8010670 <_printf_float+0x2b0>
 801066c:	464b      	mov	r3, r9
 801066e:	e793      	b.n	8010598 <_printf_float+0x1d8>
 8010670:	2301      	movs	r3, #1
 8010672:	465a      	mov	r2, fp
 8010674:	4631      	mov	r1, r6
 8010676:	4628      	mov	r0, r5
 8010678:	47b8      	blx	r7
 801067a:	3001      	adds	r0, #1
 801067c:	f43f aefb 	beq.w	8010476 <_printf_float+0xb6>
 8010680:	f10a 0a01 	add.w	sl, sl, #1
 8010684:	e7ee      	b.n	8010664 <_printf_float+0x2a4>
 8010686:	bf00      	nop
 8010688:	7fefffff 	.word	0x7fefffff
 801068c:	080165f4 	.word	0x080165f4
 8010690:	080165f0 	.word	0x080165f0
 8010694:	080165fc 	.word	0x080165fc
 8010698:	080165f8 	.word	0x080165f8
 801069c:	08016600 	.word	0x08016600
 80106a0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80106a2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80106a6:	4553      	cmp	r3, sl
 80106a8:	bfa8      	it	ge
 80106aa:	4653      	movge	r3, sl
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	4699      	mov	r9, r3
 80106b0:	dc36      	bgt.n	8010720 <_printf_float+0x360>
 80106b2:	f04f 0b00 	mov.w	fp, #0
 80106b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80106ba:	f104 021a 	add.w	r2, r4, #26
 80106be:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80106c0:	9306      	str	r3, [sp, #24]
 80106c2:	eba3 0309 	sub.w	r3, r3, r9
 80106c6:	455b      	cmp	r3, fp
 80106c8:	dc31      	bgt.n	801072e <_printf_float+0x36e>
 80106ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80106cc:	459a      	cmp	sl, r3
 80106ce:	dc3a      	bgt.n	8010746 <_printf_float+0x386>
 80106d0:	6823      	ldr	r3, [r4, #0]
 80106d2:	07da      	lsls	r2, r3, #31
 80106d4:	d437      	bmi.n	8010746 <_printf_float+0x386>
 80106d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80106d8:	ebaa 0903 	sub.w	r9, sl, r3
 80106dc:	9b06      	ldr	r3, [sp, #24]
 80106de:	ebaa 0303 	sub.w	r3, sl, r3
 80106e2:	4599      	cmp	r9, r3
 80106e4:	bfa8      	it	ge
 80106e6:	4699      	movge	r9, r3
 80106e8:	f1b9 0f00 	cmp.w	r9, #0
 80106ec:	dc33      	bgt.n	8010756 <_printf_float+0x396>
 80106ee:	f04f 0800 	mov.w	r8, #0
 80106f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80106f6:	f104 0b1a 	add.w	fp, r4, #26
 80106fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80106fc:	ebaa 0303 	sub.w	r3, sl, r3
 8010700:	eba3 0309 	sub.w	r3, r3, r9
 8010704:	4543      	cmp	r3, r8
 8010706:	f77f af79 	ble.w	80105fc <_printf_float+0x23c>
 801070a:	2301      	movs	r3, #1
 801070c:	465a      	mov	r2, fp
 801070e:	4631      	mov	r1, r6
 8010710:	4628      	mov	r0, r5
 8010712:	47b8      	blx	r7
 8010714:	3001      	adds	r0, #1
 8010716:	f43f aeae 	beq.w	8010476 <_printf_float+0xb6>
 801071a:	f108 0801 	add.w	r8, r8, #1
 801071e:	e7ec      	b.n	80106fa <_printf_float+0x33a>
 8010720:	4642      	mov	r2, r8
 8010722:	4631      	mov	r1, r6
 8010724:	4628      	mov	r0, r5
 8010726:	47b8      	blx	r7
 8010728:	3001      	adds	r0, #1
 801072a:	d1c2      	bne.n	80106b2 <_printf_float+0x2f2>
 801072c:	e6a3      	b.n	8010476 <_printf_float+0xb6>
 801072e:	2301      	movs	r3, #1
 8010730:	4631      	mov	r1, r6
 8010732:	4628      	mov	r0, r5
 8010734:	9206      	str	r2, [sp, #24]
 8010736:	47b8      	blx	r7
 8010738:	3001      	adds	r0, #1
 801073a:	f43f ae9c 	beq.w	8010476 <_printf_float+0xb6>
 801073e:	f10b 0b01 	add.w	fp, fp, #1
 8010742:	9a06      	ldr	r2, [sp, #24]
 8010744:	e7bb      	b.n	80106be <_printf_float+0x2fe>
 8010746:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801074a:	4631      	mov	r1, r6
 801074c:	4628      	mov	r0, r5
 801074e:	47b8      	blx	r7
 8010750:	3001      	adds	r0, #1
 8010752:	d1c0      	bne.n	80106d6 <_printf_float+0x316>
 8010754:	e68f      	b.n	8010476 <_printf_float+0xb6>
 8010756:	9a06      	ldr	r2, [sp, #24]
 8010758:	464b      	mov	r3, r9
 801075a:	4631      	mov	r1, r6
 801075c:	4628      	mov	r0, r5
 801075e:	4442      	add	r2, r8
 8010760:	47b8      	blx	r7
 8010762:	3001      	adds	r0, #1
 8010764:	d1c3      	bne.n	80106ee <_printf_float+0x32e>
 8010766:	e686      	b.n	8010476 <_printf_float+0xb6>
 8010768:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801076c:	f1ba 0f01 	cmp.w	sl, #1
 8010770:	dc01      	bgt.n	8010776 <_printf_float+0x3b6>
 8010772:	07db      	lsls	r3, r3, #31
 8010774:	d536      	bpl.n	80107e4 <_printf_float+0x424>
 8010776:	2301      	movs	r3, #1
 8010778:	4642      	mov	r2, r8
 801077a:	4631      	mov	r1, r6
 801077c:	4628      	mov	r0, r5
 801077e:	47b8      	blx	r7
 8010780:	3001      	adds	r0, #1
 8010782:	f43f ae78 	beq.w	8010476 <_printf_float+0xb6>
 8010786:	4631      	mov	r1, r6
 8010788:	4628      	mov	r0, r5
 801078a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801078e:	47b8      	blx	r7
 8010790:	3001      	adds	r0, #1
 8010792:	f43f ae70 	beq.w	8010476 <_printf_float+0xb6>
 8010796:	2200      	movs	r2, #0
 8010798:	2300      	movs	r3, #0
 801079a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801079e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80107a2:	f7f1 ff23 	bl	80025ec <__aeabi_dcmpeq>
 80107a6:	b9c0      	cbnz	r0, 80107da <_printf_float+0x41a>
 80107a8:	4653      	mov	r3, sl
 80107aa:	f108 0201 	add.w	r2, r8, #1
 80107ae:	4631      	mov	r1, r6
 80107b0:	4628      	mov	r0, r5
 80107b2:	47b8      	blx	r7
 80107b4:	3001      	adds	r0, #1
 80107b6:	d10c      	bne.n	80107d2 <_printf_float+0x412>
 80107b8:	e65d      	b.n	8010476 <_printf_float+0xb6>
 80107ba:	2301      	movs	r3, #1
 80107bc:	465a      	mov	r2, fp
 80107be:	4631      	mov	r1, r6
 80107c0:	4628      	mov	r0, r5
 80107c2:	47b8      	blx	r7
 80107c4:	3001      	adds	r0, #1
 80107c6:	f43f ae56 	beq.w	8010476 <_printf_float+0xb6>
 80107ca:	f108 0801 	add.w	r8, r8, #1
 80107ce:	45d0      	cmp	r8, sl
 80107d0:	dbf3      	blt.n	80107ba <_printf_float+0x3fa>
 80107d2:	464b      	mov	r3, r9
 80107d4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80107d8:	e6df      	b.n	801059a <_printf_float+0x1da>
 80107da:	f04f 0800 	mov.w	r8, #0
 80107de:	f104 0b1a 	add.w	fp, r4, #26
 80107e2:	e7f4      	b.n	80107ce <_printf_float+0x40e>
 80107e4:	2301      	movs	r3, #1
 80107e6:	4642      	mov	r2, r8
 80107e8:	e7e1      	b.n	80107ae <_printf_float+0x3ee>
 80107ea:	2301      	movs	r3, #1
 80107ec:	464a      	mov	r2, r9
 80107ee:	4631      	mov	r1, r6
 80107f0:	4628      	mov	r0, r5
 80107f2:	47b8      	blx	r7
 80107f4:	3001      	adds	r0, #1
 80107f6:	f43f ae3e 	beq.w	8010476 <_printf_float+0xb6>
 80107fa:	f108 0801 	add.w	r8, r8, #1
 80107fe:	68e3      	ldr	r3, [r4, #12]
 8010800:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010802:	1a5b      	subs	r3, r3, r1
 8010804:	4543      	cmp	r3, r8
 8010806:	dcf0      	bgt.n	80107ea <_printf_float+0x42a>
 8010808:	e6fc      	b.n	8010604 <_printf_float+0x244>
 801080a:	f04f 0800 	mov.w	r8, #0
 801080e:	f104 0919 	add.w	r9, r4, #25
 8010812:	e7f4      	b.n	80107fe <_printf_float+0x43e>

08010814 <_printf_common>:
 8010814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010818:	4616      	mov	r6, r2
 801081a:	4698      	mov	r8, r3
 801081c:	688a      	ldr	r2, [r1, #8]
 801081e:	4607      	mov	r7, r0
 8010820:	690b      	ldr	r3, [r1, #16]
 8010822:	460c      	mov	r4, r1
 8010824:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010828:	4293      	cmp	r3, r2
 801082a:	bfb8      	it	lt
 801082c:	4613      	movlt	r3, r2
 801082e:	6033      	str	r3, [r6, #0]
 8010830:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010834:	b10a      	cbz	r2, 801083a <_printf_common+0x26>
 8010836:	3301      	adds	r3, #1
 8010838:	6033      	str	r3, [r6, #0]
 801083a:	6823      	ldr	r3, [r4, #0]
 801083c:	0699      	lsls	r1, r3, #26
 801083e:	bf42      	ittt	mi
 8010840:	6833      	ldrmi	r3, [r6, #0]
 8010842:	3302      	addmi	r3, #2
 8010844:	6033      	strmi	r3, [r6, #0]
 8010846:	6825      	ldr	r5, [r4, #0]
 8010848:	f015 0506 	ands.w	r5, r5, #6
 801084c:	d106      	bne.n	801085c <_printf_common+0x48>
 801084e:	f104 0a19 	add.w	sl, r4, #25
 8010852:	68e3      	ldr	r3, [r4, #12]
 8010854:	6832      	ldr	r2, [r6, #0]
 8010856:	1a9b      	subs	r3, r3, r2
 8010858:	42ab      	cmp	r3, r5
 801085a:	dc2b      	bgt.n	80108b4 <_printf_common+0xa0>
 801085c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010860:	6822      	ldr	r2, [r4, #0]
 8010862:	3b00      	subs	r3, #0
 8010864:	bf18      	it	ne
 8010866:	2301      	movne	r3, #1
 8010868:	0692      	lsls	r2, r2, #26
 801086a:	d430      	bmi.n	80108ce <_printf_common+0xba>
 801086c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010870:	4641      	mov	r1, r8
 8010872:	4638      	mov	r0, r7
 8010874:	47c8      	blx	r9
 8010876:	3001      	adds	r0, #1
 8010878:	d023      	beq.n	80108c2 <_printf_common+0xae>
 801087a:	6823      	ldr	r3, [r4, #0]
 801087c:	341a      	adds	r4, #26
 801087e:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8010882:	f003 0306 	and.w	r3, r3, #6
 8010886:	2b04      	cmp	r3, #4
 8010888:	bf0a      	itet	eq
 801088a:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 801088e:	2500      	movne	r5, #0
 8010890:	6833      	ldreq	r3, [r6, #0]
 8010892:	f04f 0600 	mov.w	r6, #0
 8010896:	bf08      	it	eq
 8010898:	1aed      	subeq	r5, r5, r3
 801089a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 801089e:	bf08      	it	eq
 80108a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80108a4:	4293      	cmp	r3, r2
 80108a6:	bfc4      	itt	gt
 80108a8:	1a9b      	subgt	r3, r3, r2
 80108aa:	18ed      	addgt	r5, r5, r3
 80108ac:	42b5      	cmp	r5, r6
 80108ae:	d11a      	bne.n	80108e6 <_printf_common+0xd2>
 80108b0:	2000      	movs	r0, #0
 80108b2:	e008      	b.n	80108c6 <_printf_common+0xb2>
 80108b4:	2301      	movs	r3, #1
 80108b6:	4652      	mov	r2, sl
 80108b8:	4641      	mov	r1, r8
 80108ba:	4638      	mov	r0, r7
 80108bc:	47c8      	blx	r9
 80108be:	3001      	adds	r0, #1
 80108c0:	d103      	bne.n	80108ca <_printf_common+0xb6>
 80108c2:	f04f 30ff 	mov.w	r0, #4294967295
 80108c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80108ca:	3501      	adds	r5, #1
 80108cc:	e7c1      	b.n	8010852 <_printf_common+0x3e>
 80108ce:	18e1      	adds	r1, r4, r3
 80108d0:	1c5a      	adds	r2, r3, #1
 80108d2:	2030      	movs	r0, #48	@ 0x30
 80108d4:	3302      	adds	r3, #2
 80108d6:	4422      	add	r2, r4
 80108d8:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80108dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80108e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80108e4:	e7c2      	b.n	801086c <_printf_common+0x58>
 80108e6:	2301      	movs	r3, #1
 80108e8:	4622      	mov	r2, r4
 80108ea:	4641      	mov	r1, r8
 80108ec:	4638      	mov	r0, r7
 80108ee:	47c8      	blx	r9
 80108f0:	3001      	adds	r0, #1
 80108f2:	d0e6      	beq.n	80108c2 <_printf_common+0xae>
 80108f4:	3601      	adds	r6, #1
 80108f6:	e7d9      	b.n	80108ac <_printf_common+0x98>

080108f8 <_printf_i>:
 80108f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80108fc:	7e0f      	ldrb	r7, [r1, #24]
 80108fe:	4691      	mov	r9, r2
 8010900:	4680      	mov	r8, r0
 8010902:	460c      	mov	r4, r1
 8010904:	2f78      	cmp	r7, #120	@ 0x78
 8010906:	469a      	mov	sl, r3
 8010908:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801090a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801090e:	d807      	bhi.n	8010920 <_printf_i+0x28>
 8010910:	2f62      	cmp	r7, #98	@ 0x62
 8010912:	d80a      	bhi.n	801092a <_printf_i+0x32>
 8010914:	2f00      	cmp	r7, #0
 8010916:	f000 80d1 	beq.w	8010abc <_printf_i+0x1c4>
 801091a:	2f58      	cmp	r7, #88	@ 0x58
 801091c:	f000 80b8 	beq.w	8010a90 <_printf_i+0x198>
 8010920:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010924:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010928:	e03a      	b.n	80109a0 <_printf_i+0xa8>
 801092a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801092e:	2b15      	cmp	r3, #21
 8010930:	d8f6      	bhi.n	8010920 <_printf_i+0x28>
 8010932:	a101      	add	r1, pc, #4	@ (adr r1, 8010938 <_printf_i+0x40>)
 8010934:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010938:	08010991 	.word	0x08010991
 801093c:	080109a5 	.word	0x080109a5
 8010940:	08010921 	.word	0x08010921
 8010944:	08010921 	.word	0x08010921
 8010948:	08010921 	.word	0x08010921
 801094c:	08010921 	.word	0x08010921
 8010950:	080109a5 	.word	0x080109a5
 8010954:	08010921 	.word	0x08010921
 8010958:	08010921 	.word	0x08010921
 801095c:	08010921 	.word	0x08010921
 8010960:	08010921 	.word	0x08010921
 8010964:	08010aa3 	.word	0x08010aa3
 8010968:	080109cf 	.word	0x080109cf
 801096c:	08010a5d 	.word	0x08010a5d
 8010970:	08010921 	.word	0x08010921
 8010974:	08010921 	.word	0x08010921
 8010978:	08010ac5 	.word	0x08010ac5
 801097c:	08010921 	.word	0x08010921
 8010980:	080109cf 	.word	0x080109cf
 8010984:	08010921 	.word	0x08010921
 8010988:	08010921 	.word	0x08010921
 801098c:	08010a65 	.word	0x08010a65
 8010990:	6833      	ldr	r3, [r6, #0]
 8010992:	1d1a      	adds	r2, r3, #4
 8010994:	681b      	ldr	r3, [r3, #0]
 8010996:	6032      	str	r2, [r6, #0]
 8010998:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801099c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80109a0:	2301      	movs	r3, #1
 80109a2:	e09c      	b.n	8010ade <_printf_i+0x1e6>
 80109a4:	6833      	ldr	r3, [r6, #0]
 80109a6:	6820      	ldr	r0, [r4, #0]
 80109a8:	1d19      	adds	r1, r3, #4
 80109aa:	6031      	str	r1, [r6, #0]
 80109ac:	0606      	lsls	r6, r0, #24
 80109ae:	d501      	bpl.n	80109b4 <_printf_i+0xbc>
 80109b0:	681d      	ldr	r5, [r3, #0]
 80109b2:	e003      	b.n	80109bc <_printf_i+0xc4>
 80109b4:	0645      	lsls	r5, r0, #25
 80109b6:	d5fb      	bpl.n	80109b0 <_printf_i+0xb8>
 80109b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80109bc:	2d00      	cmp	r5, #0
 80109be:	da03      	bge.n	80109c8 <_printf_i+0xd0>
 80109c0:	232d      	movs	r3, #45	@ 0x2d
 80109c2:	426d      	negs	r5, r5
 80109c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80109c8:	4858      	ldr	r0, [pc, #352]	@ (8010b2c <_printf_i+0x234>)
 80109ca:	230a      	movs	r3, #10
 80109cc:	e011      	b.n	80109f2 <_printf_i+0xfa>
 80109ce:	6821      	ldr	r1, [r4, #0]
 80109d0:	6833      	ldr	r3, [r6, #0]
 80109d2:	0608      	lsls	r0, r1, #24
 80109d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80109d8:	d402      	bmi.n	80109e0 <_printf_i+0xe8>
 80109da:	0649      	lsls	r1, r1, #25
 80109dc:	bf48      	it	mi
 80109de:	b2ad      	uxthmi	r5, r5
 80109e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80109e2:	6033      	str	r3, [r6, #0]
 80109e4:	4851      	ldr	r0, [pc, #324]	@ (8010b2c <_printf_i+0x234>)
 80109e6:	bf14      	ite	ne
 80109e8:	230a      	movne	r3, #10
 80109ea:	2308      	moveq	r3, #8
 80109ec:	2100      	movs	r1, #0
 80109ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80109f2:	6866      	ldr	r6, [r4, #4]
 80109f4:	2e00      	cmp	r6, #0
 80109f6:	60a6      	str	r6, [r4, #8]
 80109f8:	db05      	blt.n	8010a06 <_printf_i+0x10e>
 80109fa:	6821      	ldr	r1, [r4, #0]
 80109fc:	432e      	orrs	r6, r5
 80109fe:	f021 0104 	bic.w	r1, r1, #4
 8010a02:	6021      	str	r1, [r4, #0]
 8010a04:	d04b      	beq.n	8010a9e <_printf_i+0x1a6>
 8010a06:	4616      	mov	r6, r2
 8010a08:	fbb5 f1f3 	udiv	r1, r5, r3
 8010a0c:	fb03 5711 	mls	r7, r3, r1, r5
 8010a10:	5dc7      	ldrb	r7, [r0, r7]
 8010a12:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010a16:	462f      	mov	r7, r5
 8010a18:	460d      	mov	r5, r1
 8010a1a:	42bb      	cmp	r3, r7
 8010a1c:	d9f4      	bls.n	8010a08 <_printf_i+0x110>
 8010a1e:	2b08      	cmp	r3, #8
 8010a20:	d10b      	bne.n	8010a3a <_printf_i+0x142>
 8010a22:	6823      	ldr	r3, [r4, #0]
 8010a24:	07df      	lsls	r7, r3, #31
 8010a26:	d508      	bpl.n	8010a3a <_printf_i+0x142>
 8010a28:	6923      	ldr	r3, [r4, #16]
 8010a2a:	6861      	ldr	r1, [r4, #4]
 8010a2c:	4299      	cmp	r1, r3
 8010a2e:	bfde      	ittt	le
 8010a30:	2330      	movle	r3, #48	@ 0x30
 8010a32:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010a36:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010a3a:	1b92      	subs	r2, r2, r6
 8010a3c:	6122      	str	r2, [r4, #16]
 8010a3e:	464b      	mov	r3, r9
 8010a40:	aa03      	add	r2, sp, #12
 8010a42:	4621      	mov	r1, r4
 8010a44:	4640      	mov	r0, r8
 8010a46:	f8cd a000 	str.w	sl, [sp]
 8010a4a:	f7ff fee3 	bl	8010814 <_printf_common>
 8010a4e:	3001      	adds	r0, #1
 8010a50:	d14a      	bne.n	8010ae8 <_printf_i+0x1f0>
 8010a52:	f04f 30ff 	mov.w	r0, #4294967295
 8010a56:	b004      	add	sp, #16
 8010a58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a5c:	6823      	ldr	r3, [r4, #0]
 8010a5e:	f043 0320 	orr.w	r3, r3, #32
 8010a62:	6023      	str	r3, [r4, #0]
 8010a64:	2778      	movs	r7, #120	@ 0x78
 8010a66:	4832      	ldr	r0, [pc, #200]	@ (8010b30 <_printf_i+0x238>)
 8010a68:	6823      	ldr	r3, [r4, #0]
 8010a6a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010a6e:	061f      	lsls	r7, r3, #24
 8010a70:	6831      	ldr	r1, [r6, #0]
 8010a72:	f851 5b04 	ldr.w	r5, [r1], #4
 8010a76:	d402      	bmi.n	8010a7e <_printf_i+0x186>
 8010a78:	065f      	lsls	r7, r3, #25
 8010a7a:	bf48      	it	mi
 8010a7c:	b2ad      	uxthmi	r5, r5
 8010a7e:	6031      	str	r1, [r6, #0]
 8010a80:	07d9      	lsls	r1, r3, #31
 8010a82:	bf44      	itt	mi
 8010a84:	f043 0320 	orrmi.w	r3, r3, #32
 8010a88:	6023      	strmi	r3, [r4, #0]
 8010a8a:	b11d      	cbz	r5, 8010a94 <_printf_i+0x19c>
 8010a8c:	2310      	movs	r3, #16
 8010a8e:	e7ad      	b.n	80109ec <_printf_i+0xf4>
 8010a90:	4826      	ldr	r0, [pc, #152]	@ (8010b2c <_printf_i+0x234>)
 8010a92:	e7e9      	b.n	8010a68 <_printf_i+0x170>
 8010a94:	6823      	ldr	r3, [r4, #0]
 8010a96:	f023 0320 	bic.w	r3, r3, #32
 8010a9a:	6023      	str	r3, [r4, #0]
 8010a9c:	e7f6      	b.n	8010a8c <_printf_i+0x194>
 8010a9e:	4616      	mov	r6, r2
 8010aa0:	e7bd      	b.n	8010a1e <_printf_i+0x126>
 8010aa2:	6833      	ldr	r3, [r6, #0]
 8010aa4:	6825      	ldr	r5, [r4, #0]
 8010aa6:	1d18      	adds	r0, r3, #4
 8010aa8:	6961      	ldr	r1, [r4, #20]
 8010aaa:	6030      	str	r0, [r6, #0]
 8010aac:	062e      	lsls	r6, r5, #24
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	d501      	bpl.n	8010ab6 <_printf_i+0x1be>
 8010ab2:	6019      	str	r1, [r3, #0]
 8010ab4:	e002      	b.n	8010abc <_printf_i+0x1c4>
 8010ab6:	0668      	lsls	r0, r5, #25
 8010ab8:	d5fb      	bpl.n	8010ab2 <_printf_i+0x1ba>
 8010aba:	8019      	strh	r1, [r3, #0]
 8010abc:	2300      	movs	r3, #0
 8010abe:	4616      	mov	r6, r2
 8010ac0:	6123      	str	r3, [r4, #16]
 8010ac2:	e7bc      	b.n	8010a3e <_printf_i+0x146>
 8010ac4:	6833      	ldr	r3, [r6, #0]
 8010ac6:	2100      	movs	r1, #0
 8010ac8:	1d1a      	adds	r2, r3, #4
 8010aca:	6032      	str	r2, [r6, #0]
 8010acc:	681e      	ldr	r6, [r3, #0]
 8010ace:	6862      	ldr	r2, [r4, #4]
 8010ad0:	4630      	mov	r0, r6
 8010ad2:	f000 fcfd 	bl	80114d0 <memchr>
 8010ad6:	b108      	cbz	r0, 8010adc <_printf_i+0x1e4>
 8010ad8:	1b80      	subs	r0, r0, r6
 8010ada:	6060      	str	r0, [r4, #4]
 8010adc:	6863      	ldr	r3, [r4, #4]
 8010ade:	6123      	str	r3, [r4, #16]
 8010ae0:	2300      	movs	r3, #0
 8010ae2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010ae6:	e7aa      	b.n	8010a3e <_printf_i+0x146>
 8010ae8:	6923      	ldr	r3, [r4, #16]
 8010aea:	4632      	mov	r2, r6
 8010aec:	4649      	mov	r1, r9
 8010aee:	4640      	mov	r0, r8
 8010af0:	47d0      	blx	sl
 8010af2:	3001      	adds	r0, #1
 8010af4:	d0ad      	beq.n	8010a52 <_printf_i+0x15a>
 8010af6:	6823      	ldr	r3, [r4, #0]
 8010af8:	079b      	lsls	r3, r3, #30
 8010afa:	d413      	bmi.n	8010b24 <_printf_i+0x22c>
 8010afc:	68e0      	ldr	r0, [r4, #12]
 8010afe:	9b03      	ldr	r3, [sp, #12]
 8010b00:	4298      	cmp	r0, r3
 8010b02:	bfb8      	it	lt
 8010b04:	4618      	movlt	r0, r3
 8010b06:	e7a6      	b.n	8010a56 <_printf_i+0x15e>
 8010b08:	2301      	movs	r3, #1
 8010b0a:	4632      	mov	r2, r6
 8010b0c:	4649      	mov	r1, r9
 8010b0e:	4640      	mov	r0, r8
 8010b10:	47d0      	blx	sl
 8010b12:	3001      	adds	r0, #1
 8010b14:	d09d      	beq.n	8010a52 <_printf_i+0x15a>
 8010b16:	3501      	adds	r5, #1
 8010b18:	68e3      	ldr	r3, [r4, #12]
 8010b1a:	9903      	ldr	r1, [sp, #12]
 8010b1c:	1a5b      	subs	r3, r3, r1
 8010b1e:	42ab      	cmp	r3, r5
 8010b20:	dcf2      	bgt.n	8010b08 <_printf_i+0x210>
 8010b22:	e7eb      	b.n	8010afc <_printf_i+0x204>
 8010b24:	2500      	movs	r5, #0
 8010b26:	f104 0619 	add.w	r6, r4, #25
 8010b2a:	e7f5      	b.n	8010b18 <_printf_i+0x220>
 8010b2c:	08016602 	.word	0x08016602
 8010b30:	08016613 	.word	0x08016613

08010b34 <_scanf_float>:
 8010b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b38:	b087      	sub	sp, #28
 8010b3a:	4691      	mov	r9, r2
 8010b3c:	4680      	mov	r8, r0
 8010b3e:	460c      	mov	r4, r1
 8010b40:	9303      	str	r3, [sp, #12]
 8010b42:	688b      	ldr	r3, [r1, #8]
 8010b44:	1e5a      	subs	r2, r3, #1
 8010b46:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8010b4a:	460a      	mov	r2, r1
 8010b4c:	bf89      	itett	hi
 8010b4e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8010b52:	f04f 0b00 	movls.w	fp, #0
 8010b56:	eb03 0b05 	addhi.w	fp, r3, r5
 8010b5a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8010b5e:	f04f 0500 	mov.w	r5, #0
 8010b62:	bf88      	it	hi
 8010b64:	608b      	strhi	r3, [r1, #8]
 8010b66:	680b      	ldr	r3, [r1, #0]
 8010b68:	46aa      	mov	sl, r5
 8010b6a:	462f      	mov	r7, r5
 8010b6c:	9502      	str	r5, [sp, #8]
 8010b6e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8010b72:	f842 3b1c 	str.w	r3, [r2], #28
 8010b76:	4616      	mov	r6, r2
 8010b78:	9201      	str	r2, [sp, #4]
 8010b7a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8010b7e:	68a2      	ldr	r2, [r4, #8]
 8010b80:	b15a      	cbz	r2, 8010b9a <_scanf_float+0x66>
 8010b82:	f8d9 3000 	ldr.w	r3, [r9]
 8010b86:	781b      	ldrb	r3, [r3, #0]
 8010b88:	2b4e      	cmp	r3, #78	@ 0x4e
 8010b8a:	d863      	bhi.n	8010c54 <_scanf_float+0x120>
 8010b8c:	2b40      	cmp	r3, #64	@ 0x40
 8010b8e:	d83b      	bhi.n	8010c08 <_scanf_float+0xd4>
 8010b90:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8010b94:	b2c8      	uxtb	r0, r1
 8010b96:	280e      	cmp	r0, #14
 8010b98:	d939      	bls.n	8010c0e <_scanf_float+0xda>
 8010b9a:	b11f      	cbz	r7, 8010ba4 <_scanf_float+0x70>
 8010b9c:	6823      	ldr	r3, [r4, #0]
 8010b9e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010ba2:	6023      	str	r3, [r4, #0]
 8010ba4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010ba8:	f1ba 0f01 	cmp.w	sl, #1
 8010bac:	f200 8115 	bhi.w	8010dda <_scanf_float+0x2a6>
 8010bb0:	9b01      	ldr	r3, [sp, #4]
 8010bb2:	429e      	cmp	r6, r3
 8010bb4:	f200 8106 	bhi.w	8010dc4 <_scanf_float+0x290>
 8010bb8:	2001      	movs	r0, #1
 8010bba:	b007      	add	sp, #28
 8010bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bc0:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8010bc4:	2a0d      	cmp	r2, #13
 8010bc6:	d8e8      	bhi.n	8010b9a <_scanf_float+0x66>
 8010bc8:	a101      	add	r1, pc, #4	@ (adr r1, 8010bd0 <_scanf_float+0x9c>)
 8010bca:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010bce:	bf00      	nop
 8010bd0:	08010d19 	.word	0x08010d19
 8010bd4:	08010b9b 	.word	0x08010b9b
 8010bd8:	08010b9b 	.word	0x08010b9b
 8010bdc:	08010b9b 	.word	0x08010b9b
 8010be0:	08010d75 	.word	0x08010d75
 8010be4:	08010d4f 	.word	0x08010d4f
 8010be8:	08010b9b 	.word	0x08010b9b
 8010bec:	08010b9b 	.word	0x08010b9b
 8010bf0:	08010d27 	.word	0x08010d27
 8010bf4:	08010b9b 	.word	0x08010b9b
 8010bf8:	08010b9b 	.word	0x08010b9b
 8010bfc:	08010b9b 	.word	0x08010b9b
 8010c00:	08010b9b 	.word	0x08010b9b
 8010c04:	08010ce3 	.word	0x08010ce3
 8010c08:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8010c0c:	e7da      	b.n	8010bc4 <_scanf_float+0x90>
 8010c0e:	290e      	cmp	r1, #14
 8010c10:	d8c3      	bhi.n	8010b9a <_scanf_float+0x66>
 8010c12:	a001      	add	r0, pc, #4	@ (adr r0, 8010c18 <_scanf_float+0xe4>)
 8010c14:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8010c18:	08010cd3 	.word	0x08010cd3
 8010c1c:	08010b9b 	.word	0x08010b9b
 8010c20:	08010cd3 	.word	0x08010cd3
 8010c24:	08010d63 	.word	0x08010d63
 8010c28:	08010b9b 	.word	0x08010b9b
 8010c2c:	08010c75 	.word	0x08010c75
 8010c30:	08010cb9 	.word	0x08010cb9
 8010c34:	08010cb9 	.word	0x08010cb9
 8010c38:	08010cb9 	.word	0x08010cb9
 8010c3c:	08010cb9 	.word	0x08010cb9
 8010c40:	08010cb9 	.word	0x08010cb9
 8010c44:	08010cb9 	.word	0x08010cb9
 8010c48:	08010cb9 	.word	0x08010cb9
 8010c4c:	08010cb9 	.word	0x08010cb9
 8010c50:	08010cb9 	.word	0x08010cb9
 8010c54:	2b6e      	cmp	r3, #110	@ 0x6e
 8010c56:	d809      	bhi.n	8010c6c <_scanf_float+0x138>
 8010c58:	2b60      	cmp	r3, #96	@ 0x60
 8010c5a:	d8b1      	bhi.n	8010bc0 <_scanf_float+0x8c>
 8010c5c:	2b54      	cmp	r3, #84	@ 0x54
 8010c5e:	d07b      	beq.n	8010d58 <_scanf_float+0x224>
 8010c60:	2b59      	cmp	r3, #89	@ 0x59
 8010c62:	d19a      	bne.n	8010b9a <_scanf_float+0x66>
 8010c64:	2d07      	cmp	r5, #7
 8010c66:	d198      	bne.n	8010b9a <_scanf_float+0x66>
 8010c68:	2508      	movs	r5, #8
 8010c6a:	e02f      	b.n	8010ccc <_scanf_float+0x198>
 8010c6c:	2b74      	cmp	r3, #116	@ 0x74
 8010c6e:	d073      	beq.n	8010d58 <_scanf_float+0x224>
 8010c70:	2b79      	cmp	r3, #121	@ 0x79
 8010c72:	e7f6      	b.n	8010c62 <_scanf_float+0x12e>
 8010c74:	6821      	ldr	r1, [r4, #0]
 8010c76:	05c8      	lsls	r0, r1, #23
 8010c78:	d51e      	bpl.n	8010cb8 <_scanf_float+0x184>
 8010c7a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8010c7e:	3701      	adds	r7, #1
 8010c80:	6021      	str	r1, [r4, #0]
 8010c82:	f1bb 0f00 	cmp.w	fp, #0
 8010c86:	d003      	beq.n	8010c90 <_scanf_float+0x15c>
 8010c88:	3201      	adds	r2, #1
 8010c8a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010c8e:	60a2      	str	r2, [r4, #8]
 8010c90:	68a3      	ldr	r3, [r4, #8]
 8010c92:	3b01      	subs	r3, #1
 8010c94:	60a3      	str	r3, [r4, #8]
 8010c96:	6923      	ldr	r3, [r4, #16]
 8010c98:	3301      	adds	r3, #1
 8010c9a:	6123      	str	r3, [r4, #16]
 8010c9c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8010ca0:	3b01      	subs	r3, #1
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	f8c9 3004 	str.w	r3, [r9, #4]
 8010ca8:	f340 8083 	ble.w	8010db2 <_scanf_float+0x27e>
 8010cac:	f8d9 3000 	ldr.w	r3, [r9]
 8010cb0:	3301      	adds	r3, #1
 8010cb2:	f8c9 3000 	str.w	r3, [r9]
 8010cb6:	e762      	b.n	8010b7e <_scanf_float+0x4a>
 8010cb8:	eb1a 0105 	adds.w	r1, sl, r5
 8010cbc:	f47f af6d 	bne.w	8010b9a <_scanf_float+0x66>
 8010cc0:	6822      	ldr	r2, [r4, #0]
 8010cc2:	460d      	mov	r5, r1
 8010cc4:	468a      	mov	sl, r1
 8010cc6:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8010cca:	6022      	str	r2, [r4, #0]
 8010ccc:	f806 3b01 	strb.w	r3, [r6], #1
 8010cd0:	e7de      	b.n	8010c90 <_scanf_float+0x15c>
 8010cd2:	6822      	ldr	r2, [r4, #0]
 8010cd4:	0610      	lsls	r0, r2, #24
 8010cd6:	f57f af60 	bpl.w	8010b9a <_scanf_float+0x66>
 8010cda:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8010cde:	6022      	str	r2, [r4, #0]
 8010ce0:	e7f4      	b.n	8010ccc <_scanf_float+0x198>
 8010ce2:	f1ba 0f00 	cmp.w	sl, #0
 8010ce6:	d10c      	bne.n	8010d02 <_scanf_float+0x1ce>
 8010ce8:	b977      	cbnz	r7, 8010d08 <_scanf_float+0x1d4>
 8010cea:	6822      	ldr	r2, [r4, #0]
 8010cec:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8010cf0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8010cf4:	d108      	bne.n	8010d08 <_scanf_float+0x1d4>
 8010cf6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8010cfa:	f04f 0a01 	mov.w	sl, #1
 8010cfe:	6022      	str	r2, [r4, #0]
 8010d00:	e7e4      	b.n	8010ccc <_scanf_float+0x198>
 8010d02:	f1ba 0f02 	cmp.w	sl, #2
 8010d06:	d051      	beq.n	8010dac <_scanf_float+0x278>
 8010d08:	2d01      	cmp	r5, #1
 8010d0a:	d002      	beq.n	8010d12 <_scanf_float+0x1de>
 8010d0c:	2d04      	cmp	r5, #4
 8010d0e:	f47f af44 	bne.w	8010b9a <_scanf_float+0x66>
 8010d12:	3501      	adds	r5, #1
 8010d14:	b2ed      	uxtb	r5, r5
 8010d16:	e7d9      	b.n	8010ccc <_scanf_float+0x198>
 8010d18:	f1ba 0f01 	cmp.w	sl, #1
 8010d1c:	f47f af3d 	bne.w	8010b9a <_scanf_float+0x66>
 8010d20:	f04f 0a02 	mov.w	sl, #2
 8010d24:	e7d2      	b.n	8010ccc <_scanf_float+0x198>
 8010d26:	b975      	cbnz	r5, 8010d46 <_scanf_float+0x212>
 8010d28:	2f00      	cmp	r7, #0
 8010d2a:	f47f af37 	bne.w	8010b9c <_scanf_float+0x68>
 8010d2e:	6822      	ldr	r2, [r4, #0]
 8010d30:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8010d34:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8010d38:	f040 8103 	bne.w	8010f42 <_scanf_float+0x40e>
 8010d3c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8010d40:	2501      	movs	r5, #1
 8010d42:	6022      	str	r2, [r4, #0]
 8010d44:	e7c2      	b.n	8010ccc <_scanf_float+0x198>
 8010d46:	2d03      	cmp	r5, #3
 8010d48:	d0e3      	beq.n	8010d12 <_scanf_float+0x1de>
 8010d4a:	2d05      	cmp	r5, #5
 8010d4c:	e7df      	b.n	8010d0e <_scanf_float+0x1da>
 8010d4e:	2d02      	cmp	r5, #2
 8010d50:	f47f af23 	bne.w	8010b9a <_scanf_float+0x66>
 8010d54:	2503      	movs	r5, #3
 8010d56:	e7b9      	b.n	8010ccc <_scanf_float+0x198>
 8010d58:	2d06      	cmp	r5, #6
 8010d5a:	f47f af1e 	bne.w	8010b9a <_scanf_float+0x66>
 8010d5e:	2507      	movs	r5, #7
 8010d60:	e7b4      	b.n	8010ccc <_scanf_float+0x198>
 8010d62:	6822      	ldr	r2, [r4, #0]
 8010d64:	0591      	lsls	r1, r2, #22
 8010d66:	f57f af18 	bpl.w	8010b9a <_scanf_float+0x66>
 8010d6a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8010d6e:	9702      	str	r7, [sp, #8]
 8010d70:	6022      	str	r2, [r4, #0]
 8010d72:	e7ab      	b.n	8010ccc <_scanf_float+0x198>
 8010d74:	6822      	ldr	r2, [r4, #0]
 8010d76:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8010d7a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8010d7e:	d005      	beq.n	8010d8c <_scanf_float+0x258>
 8010d80:	0550      	lsls	r0, r2, #21
 8010d82:	f57f af0a 	bpl.w	8010b9a <_scanf_float+0x66>
 8010d86:	2f00      	cmp	r7, #0
 8010d88:	f000 80db 	beq.w	8010f42 <_scanf_float+0x40e>
 8010d8c:	0591      	lsls	r1, r2, #22
 8010d8e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8010d92:	bf58      	it	pl
 8010d94:	9902      	ldrpl	r1, [sp, #8]
 8010d96:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8010d9a:	bf58      	it	pl
 8010d9c:	1a79      	subpl	r1, r7, r1
 8010d9e:	6022      	str	r2, [r4, #0]
 8010da0:	f04f 0700 	mov.w	r7, #0
 8010da4:	bf58      	it	pl
 8010da6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8010daa:	e78f      	b.n	8010ccc <_scanf_float+0x198>
 8010dac:	f04f 0a03 	mov.w	sl, #3
 8010db0:	e78c      	b.n	8010ccc <_scanf_float+0x198>
 8010db2:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8010db6:	4649      	mov	r1, r9
 8010db8:	4640      	mov	r0, r8
 8010dba:	4798      	blx	r3
 8010dbc:	2800      	cmp	r0, #0
 8010dbe:	f43f aede 	beq.w	8010b7e <_scanf_float+0x4a>
 8010dc2:	e6ea      	b.n	8010b9a <_scanf_float+0x66>
 8010dc4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010dc8:	464a      	mov	r2, r9
 8010dca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010dce:	4640      	mov	r0, r8
 8010dd0:	4798      	blx	r3
 8010dd2:	6923      	ldr	r3, [r4, #16]
 8010dd4:	3b01      	subs	r3, #1
 8010dd6:	6123      	str	r3, [r4, #16]
 8010dd8:	e6ea      	b.n	8010bb0 <_scanf_float+0x7c>
 8010dda:	1e6b      	subs	r3, r5, #1
 8010ddc:	2b06      	cmp	r3, #6
 8010dde:	d824      	bhi.n	8010e2a <_scanf_float+0x2f6>
 8010de0:	2d02      	cmp	r5, #2
 8010de2:	d836      	bhi.n	8010e52 <_scanf_float+0x31e>
 8010de4:	9b01      	ldr	r3, [sp, #4]
 8010de6:	429e      	cmp	r6, r3
 8010de8:	f67f aee6 	bls.w	8010bb8 <_scanf_float+0x84>
 8010dec:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010df0:	464a      	mov	r2, r9
 8010df2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010df6:	4640      	mov	r0, r8
 8010df8:	4798      	blx	r3
 8010dfa:	6923      	ldr	r3, [r4, #16]
 8010dfc:	3b01      	subs	r3, #1
 8010dfe:	6123      	str	r3, [r4, #16]
 8010e00:	e7f0      	b.n	8010de4 <_scanf_float+0x2b0>
 8010e02:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010e06:	464a      	mov	r2, r9
 8010e08:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8010e0c:	4640      	mov	r0, r8
 8010e0e:	4798      	blx	r3
 8010e10:	6923      	ldr	r3, [r4, #16]
 8010e12:	3b01      	subs	r3, #1
 8010e14:	6123      	str	r3, [r4, #16]
 8010e16:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010e1a:	fa5f fa8a 	uxtb.w	sl, sl
 8010e1e:	f1ba 0f02 	cmp.w	sl, #2
 8010e22:	d1ee      	bne.n	8010e02 <_scanf_float+0x2ce>
 8010e24:	3d03      	subs	r5, #3
 8010e26:	b2ed      	uxtb	r5, r5
 8010e28:	1b76      	subs	r6, r6, r5
 8010e2a:	6823      	ldr	r3, [r4, #0]
 8010e2c:	05da      	lsls	r2, r3, #23
 8010e2e:	d52f      	bpl.n	8010e90 <_scanf_float+0x35c>
 8010e30:	055b      	lsls	r3, r3, #21
 8010e32:	d511      	bpl.n	8010e58 <_scanf_float+0x324>
 8010e34:	9b01      	ldr	r3, [sp, #4]
 8010e36:	429e      	cmp	r6, r3
 8010e38:	f67f aebe 	bls.w	8010bb8 <_scanf_float+0x84>
 8010e3c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010e40:	464a      	mov	r2, r9
 8010e42:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010e46:	4640      	mov	r0, r8
 8010e48:	4798      	blx	r3
 8010e4a:	6923      	ldr	r3, [r4, #16]
 8010e4c:	3b01      	subs	r3, #1
 8010e4e:	6123      	str	r3, [r4, #16]
 8010e50:	e7f0      	b.n	8010e34 <_scanf_float+0x300>
 8010e52:	46aa      	mov	sl, r5
 8010e54:	46b3      	mov	fp, r6
 8010e56:	e7de      	b.n	8010e16 <_scanf_float+0x2e2>
 8010e58:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8010e5c:	1e75      	subs	r5, r6, #1
 8010e5e:	6923      	ldr	r3, [r4, #16]
 8010e60:	2965      	cmp	r1, #101	@ 0x65
 8010e62:	f103 33ff 	add.w	r3, r3, #4294967295
 8010e66:	6123      	str	r3, [r4, #16]
 8010e68:	d00c      	beq.n	8010e84 <_scanf_float+0x350>
 8010e6a:	2945      	cmp	r1, #69	@ 0x45
 8010e6c:	d00a      	beq.n	8010e84 <_scanf_float+0x350>
 8010e6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010e72:	464a      	mov	r2, r9
 8010e74:	4640      	mov	r0, r8
 8010e76:	1eb5      	subs	r5, r6, #2
 8010e78:	4798      	blx	r3
 8010e7a:	6923      	ldr	r3, [r4, #16]
 8010e7c:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8010e80:	3b01      	subs	r3, #1
 8010e82:	6123      	str	r3, [r4, #16]
 8010e84:	462e      	mov	r6, r5
 8010e86:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010e8a:	464a      	mov	r2, r9
 8010e8c:	4640      	mov	r0, r8
 8010e8e:	4798      	blx	r3
 8010e90:	6822      	ldr	r2, [r4, #0]
 8010e92:	f012 0210 	ands.w	r2, r2, #16
 8010e96:	d001      	beq.n	8010e9c <_scanf_float+0x368>
 8010e98:	2000      	movs	r0, #0
 8010e9a:	e68e      	b.n	8010bba <_scanf_float+0x86>
 8010e9c:	7032      	strb	r2, [r6, #0]
 8010e9e:	6823      	ldr	r3, [r4, #0]
 8010ea0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8010ea4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010ea8:	d125      	bne.n	8010ef6 <_scanf_float+0x3c2>
 8010eaa:	9b02      	ldr	r3, [sp, #8]
 8010eac:	429f      	cmp	r7, r3
 8010eae:	d00a      	beq.n	8010ec6 <_scanf_float+0x392>
 8010eb0:	1bda      	subs	r2, r3, r7
 8010eb2:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8010eb6:	4924      	ldr	r1, [pc, #144]	@ (8010f48 <_scanf_float+0x414>)
 8010eb8:	429e      	cmp	r6, r3
 8010eba:	bf28      	it	cs
 8010ebc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8010ec0:	4630      	mov	r0, r6
 8010ec2:	f000 f977 	bl	80111b4 <siprintf>
 8010ec6:	2200      	movs	r2, #0
 8010ec8:	9901      	ldr	r1, [sp, #4]
 8010eca:	4640      	mov	r0, r8
 8010ecc:	f002 fd3c 	bl	8013948 <_strtod_r>
 8010ed0:	6821      	ldr	r1, [r4, #0]
 8010ed2:	9b03      	ldr	r3, [sp, #12]
 8010ed4:	f011 0f02 	tst.w	r1, #2
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	ec57 6b10 	vmov	r6, r7, d0
 8010ede:	f103 0204 	add.w	r2, r3, #4
 8010ee2:	d015      	beq.n	8010f10 <_scanf_float+0x3dc>
 8010ee4:	9903      	ldr	r1, [sp, #12]
 8010ee6:	600a      	str	r2, [r1, #0]
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	e9c3 6700 	strd	r6, r7, [r3]
 8010eee:	68e3      	ldr	r3, [r4, #12]
 8010ef0:	3301      	adds	r3, #1
 8010ef2:	60e3      	str	r3, [r4, #12]
 8010ef4:	e7d0      	b.n	8010e98 <_scanf_float+0x364>
 8010ef6:	9b04      	ldr	r3, [sp, #16]
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d0e4      	beq.n	8010ec6 <_scanf_float+0x392>
 8010efc:	9905      	ldr	r1, [sp, #20]
 8010efe:	230a      	movs	r3, #10
 8010f00:	4640      	mov	r0, r8
 8010f02:	3101      	adds	r1, #1
 8010f04:	f002 fda0 	bl	8013a48 <_strtol_r>
 8010f08:	9b04      	ldr	r3, [sp, #16]
 8010f0a:	9e05      	ldr	r6, [sp, #20]
 8010f0c:	1ac2      	subs	r2, r0, r3
 8010f0e:	e7d0      	b.n	8010eb2 <_scanf_float+0x37e>
 8010f10:	f011 0f04 	tst.w	r1, #4
 8010f14:	9903      	ldr	r1, [sp, #12]
 8010f16:	600a      	str	r2, [r1, #0]
 8010f18:	d1e6      	bne.n	8010ee8 <_scanf_float+0x3b4>
 8010f1a:	681d      	ldr	r5, [r3, #0]
 8010f1c:	4632      	mov	r2, r6
 8010f1e:	463b      	mov	r3, r7
 8010f20:	4630      	mov	r0, r6
 8010f22:	4639      	mov	r1, r7
 8010f24:	f7f1 fb94 	bl	8002650 <__aeabi_dcmpun>
 8010f28:	b128      	cbz	r0, 8010f36 <_scanf_float+0x402>
 8010f2a:	4808      	ldr	r0, [pc, #32]	@ (8010f4c <_scanf_float+0x418>)
 8010f2c:	f000 faec 	bl	8011508 <nanf>
 8010f30:	ed85 0a00 	vstr	s0, [r5]
 8010f34:	e7db      	b.n	8010eee <_scanf_float+0x3ba>
 8010f36:	4630      	mov	r0, r6
 8010f38:	4639      	mov	r1, r7
 8010f3a:	f7f1 fbe7 	bl	800270c <__aeabi_d2f>
 8010f3e:	6028      	str	r0, [r5, #0]
 8010f40:	e7d5      	b.n	8010eee <_scanf_float+0x3ba>
 8010f42:	2700      	movs	r7, #0
 8010f44:	e62e      	b.n	8010ba4 <_scanf_float+0x70>
 8010f46:	bf00      	nop
 8010f48:	08016624 	.word	0x08016624
 8010f4c:	08016765 	.word	0x08016765

08010f50 <std>:
 8010f50:	2300      	movs	r3, #0
 8010f52:	b510      	push	{r4, lr}
 8010f54:	4604      	mov	r4, r0
 8010f56:	6083      	str	r3, [r0, #8]
 8010f58:	8181      	strh	r1, [r0, #12]
 8010f5a:	4619      	mov	r1, r3
 8010f5c:	6643      	str	r3, [r0, #100]	@ 0x64
 8010f5e:	81c2      	strh	r2, [r0, #14]
 8010f60:	2208      	movs	r2, #8
 8010f62:	6183      	str	r3, [r0, #24]
 8010f64:	e9c0 3300 	strd	r3, r3, [r0]
 8010f68:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010f6c:	305c      	adds	r0, #92	@ 0x5c
 8010f6e:	f000 fa2b 	bl	80113c8 <memset>
 8010f72:	4b0d      	ldr	r3, [pc, #52]	@ (8010fa8 <std+0x58>)
 8010f74:	6224      	str	r4, [r4, #32]
 8010f76:	6263      	str	r3, [r4, #36]	@ 0x24
 8010f78:	4b0c      	ldr	r3, [pc, #48]	@ (8010fac <std+0x5c>)
 8010f7a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010f7c:	4b0c      	ldr	r3, [pc, #48]	@ (8010fb0 <std+0x60>)
 8010f7e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010f80:	4b0c      	ldr	r3, [pc, #48]	@ (8010fb4 <std+0x64>)
 8010f82:	6323      	str	r3, [r4, #48]	@ 0x30
 8010f84:	4b0c      	ldr	r3, [pc, #48]	@ (8010fb8 <std+0x68>)
 8010f86:	429c      	cmp	r4, r3
 8010f88:	d006      	beq.n	8010f98 <std+0x48>
 8010f8a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010f8e:	4294      	cmp	r4, r2
 8010f90:	d002      	beq.n	8010f98 <std+0x48>
 8010f92:	33d0      	adds	r3, #208	@ 0xd0
 8010f94:	429c      	cmp	r4, r3
 8010f96:	d105      	bne.n	8010fa4 <std+0x54>
 8010f98:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010f9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010fa0:	f000 ba8e 	b.w	80114c0 <__retarget_lock_init_recursive>
 8010fa4:	bd10      	pop	{r4, pc}
 8010fa6:	bf00      	nop
 8010fa8:	080111f9 	.word	0x080111f9
 8010fac:	0801121b 	.word	0x0801121b
 8010fb0:	08011253 	.word	0x08011253
 8010fb4:	08011277 	.word	0x08011277
 8010fb8:	20000800 	.word	0x20000800

08010fbc <stdio_exit_handler>:
 8010fbc:	4a02      	ldr	r2, [pc, #8]	@ (8010fc8 <stdio_exit_handler+0xc>)
 8010fbe:	4903      	ldr	r1, [pc, #12]	@ (8010fcc <stdio_exit_handler+0x10>)
 8010fc0:	4803      	ldr	r0, [pc, #12]	@ (8010fd0 <stdio_exit_handler+0x14>)
 8010fc2:	f000 b869 	b.w	8011098 <_fwalk_sglue>
 8010fc6:	bf00      	nop
 8010fc8:	20000028 	.word	0x20000028
 8010fcc:	08014089 	.word	0x08014089
 8010fd0:	20000038 	.word	0x20000038

08010fd4 <cleanup_stdio>:
 8010fd4:	6841      	ldr	r1, [r0, #4]
 8010fd6:	4b0c      	ldr	r3, [pc, #48]	@ (8011008 <cleanup_stdio+0x34>)
 8010fd8:	4299      	cmp	r1, r3
 8010fda:	b510      	push	{r4, lr}
 8010fdc:	4604      	mov	r4, r0
 8010fde:	d001      	beq.n	8010fe4 <cleanup_stdio+0x10>
 8010fe0:	f003 f852 	bl	8014088 <_fflush_r>
 8010fe4:	68a1      	ldr	r1, [r4, #8]
 8010fe6:	4b09      	ldr	r3, [pc, #36]	@ (801100c <cleanup_stdio+0x38>)
 8010fe8:	4299      	cmp	r1, r3
 8010fea:	d002      	beq.n	8010ff2 <cleanup_stdio+0x1e>
 8010fec:	4620      	mov	r0, r4
 8010fee:	f003 f84b 	bl	8014088 <_fflush_r>
 8010ff2:	68e1      	ldr	r1, [r4, #12]
 8010ff4:	4b06      	ldr	r3, [pc, #24]	@ (8011010 <cleanup_stdio+0x3c>)
 8010ff6:	4299      	cmp	r1, r3
 8010ff8:	d004      	beq.n	8011004 <cleanup_stdio+0x30>
 8010ffa:	4620      	mov	r0, r4
 8010ffc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011000:	f003 b842 	b.w	8014088 <_fflush_r>
 8011004:	bd10      	pop	{r4, pc}
 8011006:	bf00      	nop
 8011008:	20000800 	.word	0x20000800
 801100c:	20000868 	.word	0x20000868
 8011010:	200008d0 	.word	0x200008d0

08011014 <global_stdio_init.part.0>:
 8011014:	b510      	push	{r4, lr}
 8011016:	4b0b      	ldr	r3, [pc, #44]	@ (8011044 <global_stdio_init.part.0+0x30>)
 8011018:	2104      	movs	r1, #4
 801101a:	4c0b      	ldr	r4, [pc, #44]	@ (8011048 <global_stdio_init.part.0+0x34>)
 801101c:	4a0b      	ldr	r2, [pc, #44]	@ (801104c <global_stdio_init.part.0+0x38>)
 801101e:	4620      	mov	r0, r4
 8011020:	601a      	str	r2, [r3, #0]
 8011022:	2200      	movs	r2, #0
 8011024:	f7ff ff94 	bl	8010f50 <std>
 8011028:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801102c:	2201      	movs	r2, #1
 801102e:	2109      	movs	r1, #9
 8011030:	f7ff ff8e 	bl	8010f50 <std>
 8011034:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011038:	2202      	movs	r2, #2
 801103a:	2112      	movs	r1, #18
 801103c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011040:	f7ff bf86 	b.w	8010f50 <std>
 8011044:	20000938 	.word	0x20000938
 8011048:	20000800 	.word	0x20000800
 801104c:	08010fbd 	.word	0x08010fbd

08011050 <__sfp_lock_acquire>:
 8011050:	4801      	ldr	r0, [pc, #4]	@ (8011058 <__sfp_lock_acquire+0x8>)
 8011052:	f000 ba36 	b.w	80114c2 <__retarget_lock_acquire_recursive>
 8011056:	bf00      	nop
 8011058:	20000941 	.word	0x20000941

0801105c <__sfp_lock_release>:
 801105c:	4801      	ldr	r0, [pc, #4]	@ (8011064 <__sfp_lock_release+0x8>)
 801105e:	f000 ba31 	b.w	80114c4 <__retarget_lock_release_recursive>
 8011062:	bf00      	nop
 8011064:	20000941 	.word	0x20000941

08011068 <__sinit>:
 8011068:	b510      	push	{r4, lr}
 801106a:	4604      	mov	r4, r0
 801106c:	f7ff fff0 	bl	8011050 <__sfp_lock_acquire>
 8011070:	6a23      	ldr	r3, [r4, #32]
 8011072:	b11b      	cbz	r3, 801107c <__sinit+0x14>
 8011074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011078:	f7ff bff0 	b.w	801105c <__sfp_lock_release>
 801107c:	4b04      	ldr	r3, [pc, #16]	@ (8011090 <__sinit+0x28>)
 801107e:	6223      	str	r3, [r4, #32]
 8011080:	4b04      	ldr	r3, [pc, #16]	@ (8011094 <__sinit+0x2c>)
 8011082:	681b      	ldr	r3, [r3, #0]
 8011084:	2b00      	cmp	r3, #0
 8011086:	d1f5      	bne.n	8011074 <__sinit+0xc>
 8011088:	f7ff ffc4 	bl	8011014 <global_stdio_init.part.0>
 801108c:	e7f2      	b.n	8011074 <__sinit+0xc>
 801108e:	bf00      	nop
 8011090:	08010fd5 	.word	0x08010fd5
 8011094:	20000938 	.word	0x20000938

08011098 <_fwalk_sglue>:
 8011098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801109c:	4607      	mov	r7, r0
 801109e:	4688      	mov	r8, r1
 80110a0:	4614      	mov	r4, r2
 80110a2:	2600      	movs	r6, #0
 80110a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80110a8:	f1b9 0901 	subs.w	r9, r9, #1
 80110ac:	d505      	bpl.n	80110ba <_fwalk_sglue+0x22>
 80110ae:	6824      	ldr	r4, [r4, #0]
 80110b0:	2c00      	cmp	r4, #0
 80110b2:	d1f7      	bne.n	80110a4 <_fwalk_sglue+0xc>
 80110b4:	4630      	mov	r0, r6
 80110b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80110ba:	89ab      	ldrh	r3, [r5, #12]
 80110bc:	2b01      	cmp	r3, #1
 80110be:	d907      	bls.n	80110d0 <_fwalk_sglue+0x38>
 80110c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80110c4:	3301      	adds	r3, #1
 80110c6:	d003      	beq.n	80110d0 <_fwalk_sglue+0x38>
 80110c8:	4629      	mov	r1, r5
 80110ca:	4638      	mov	r0, r7
 80110cc:	47c0      	blx	r8
 80110ce:	4306      	orrs	r6, r0
 80110d0:	3568      	adds	r5, #104	@ 0x68
 80110d2:	e7e9      	b.n	80110a8 <_fwalk_sglue+0x10>

080110d4 <iprintf>:
 80110d4:	b40f      	push	{r0, r1, r2, r3}
 80110d6:	b507      	push	{r0, r1, r2, lr}
 80110d8:	4906      	ldr	r1, [pc, #24]	@ (80110f4 <iprintf+0x20>)
 80110da:	ab04      	add	r3, sp, #16
 80110dc:	6808      	ldr	r0, [r1, #0]
 80110de:	f853 2b04 	ldr.w	r2, [r3], #4
 80110e2:	6881      	ldr	r1, [r0, #8]
 80110e4:	9301      	str	r3, [sp, #4]
 80110e6:	f002 fe33 	bl	8013d50 <_vfiprintf_r>
 80110ea:	b003      	add	sp, #12
 80110ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80110f0:	b004      	add	sp, #16
 80110f2:	4770      	bx	lr
 80110f4:	20000034 	.word	0x20000034

080110f8 <_puts_r>:
 80110f8:	6a03      	ldr	r3, [r0, #32]
 80110fa:	b570      	push	{r4, r5, r6, lr}
 80110fc:	4605      	mov	r5, r0
 80110fe:	460e      	mov	r6, r1
 8011100:	6884      	ldr	r4, [r0, #8]
 8011102:	b90b      	cbnz	r3, 8011108 <_puts_r+0x10>
 8011104:	f7ff ffb0 	bl	8011068 <__sinit>
 8011108:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801110a:	07db      	lsls	r3, r3, #31
 801110c:	d405      	bmi.n	801111a <_puts_r+0x22>
 801110e:	89a3      	ldrh	r3, [r4, #12]
 8011110:	0598      	lsls	r0, r3, #22
 8011112:	d402      	bmi.n	801111a <_puts_r+0x22>
 8011114:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011116:	f000 f9d4 	bl	80114c2 <__retarget_lock_acquire_recursive>
 801111a:	89a3      	ldrh	r3, [r4, #12]
 801111c:	0719      	lsls	r1, r3, #28
 801111e:	d502      	bpl.n	8011126 <_puts_r+0x2e>
 8011120:	6923      	ldr	r3, [r4, #16]
 8011122:	2b00      	cmp	r3, #0
 8011124:	d135      	bne.n	8011192 <_puts_r+0x9a>
 8011126:	4621      	mov	r1, r4
 8011128:	4628      	mov	r0, r5
 801112a:	f000 f8e7 	bl	80112fc <__swsetup_r>
 801112e:	b380      	cbz	r0, 8011192 <_puts_r+0x9a>
 8011130:	f04f 35ff 	mov.w	r5, #4294967295
 8011134:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011136:	07da      	lsls	r2, r3, #31
 8011138:	d405      	bmi.n	8011146 <_puts_r+0x4e>
 801113a:	89a3      	ldrh	r3, [r4, #12]
 801113c:	059b      	lsls	r3, r3, #22
 801113e:	d402      	bmi.n	8011146 <_puts_r+0x4e>
 8011140:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011142:	f000 f9bf 	bl	80114c4 <__retarget_lock_release_recursive>
 8011146:	4628      	mov	r0, r5
 8011148:	bd70      	pop	{r4, r5, r6, pc}
 801114a:	2b00      	cmp	r3, #0
 801114c:	da04      	bge.n	8011158 <_puts_r+0x60>
 801114e:	69a2      	ldr	r2, [r4, #24]
 8011150:	429a      	cmp	r2, r3
 8011152:	dc17      	bgt.n	8011184 <_puts_r+0x8c>
 8011154:	290a      	cmp	r1, #10
 8011156:	d015      	beq.n	8011184 <_puts_r+0x8c>
 8011158:	6823      	ldr	r3, [r4, #0]
 801115a:	1c5a      	adds	r2, r3, #1
 801115c:	6022      	str	r2, [r4, #0]
 801115e:	7019      	strb	r1, [r3, #0]
 8011160:	68a3      	ldr	r3, [r4, #8]
 8011162:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011166:	3b01      	subs	r3, #1
 8011168:	60a3      	str	r3, [r4, #8]
 801116a:	2900      	cmp	r1, #0
 801116c:	d1ed      	bne.n	801114a <_puts_r+0x52>
 801116e:	2b00      	cmp	r3, #0
 8011170:	da11      	bge.n	8011196 <_puts_r+0x9e>
 8011172:	4622      	mov	r2, r4
 8011174:	210a      	movs	r1, #10
 8011176:	4628      	mov	r0, r5
 8011178:	f000 f881 	bl	801127e <__swbuf_r>
 801117c:	3001      	adds	r0, #1
 801117e:	d0d7      	beq.n	8011130 <_puts_r+0x38>
 8011180:	250a      	movs	r5, #10
 8011182:	e7d7      	b.n	8011134 <_puts_r+0x3c>
 8011184:	4622      	mov	r2, r4
 8011186:	4628      	mov	r0, r5
 8011188:	f000 f879 	bl	801127e <__swbuf_r>
 801118c:	3001      	adds	r0, #1
 801118e:	d1e7      	bne.n	8011160 <_puts_r+0x68>
 8011190:	e7ce      	b.n	8011130 <_puts_r+0x38>
 8011192:	3e01      	subs	r6, #1
 8011194:	e7e4      	b.n	8011160 <_puts_r+0x68>
 8011196:	6823      	ldr	r3, [r4, #0]
 8011198:	1c5a      	adds	r2, r3, #1
 801119a:	6022      	str	r2, [r4, #0]
 801119c:	220a      	movs	r2, #10
 801119e:	701a      	strb	r2, [r3, #0]
 80111a0:	e7ee      	b.n	8011180 <_puts_r+0x88>
	...

080111a4 <puts>:
 80111a4:	4b02      	ldr	r3, [pc, #8]	@ (80111b0 <puts+0xc>)
 80111a6:	4601      	mov	r1, r0
 80111a8:	6818      	ldr	r0, [r3, #0]
 80111aa:	f7ff bfa5 	b.w	80110f8 <_puts_r>
 80111ae:	bf00      	nop
 80111b0:	20000034 	.word	0x20000034

080111b4 <siprintf>:
 80111b4:	b40e      	push	{r1, r2, r3}
 80111b6:	b510      	push	{r4, lr}
 80111b8:	b09d      	sub	sp, #116	@ 0x74
 80111ba:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80111be:	2400      	movs	r4, #0
 80111c0:	ab1f      	add	r3, sp, #124	@ 0x7c
 80111c2:	9002      	str	r0, [sp, #8]
 80111c4:	9006      	str	r0, [sp, #24]
 80111c6:	9107      	str	r1, [sp, #28]
 80111c8:	9104      	str	r1, [sp, #16]
 80111ca:	4809      	ldr	r0, [pc, #36]	@ (80111f0 <siprintf+0x3c>)
 80111cc:	4909      	ldr	r1, [pc, #36]	@ (80111f4 <siprintf+0x40>)
 80111ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80111d2:	9105      	str	r1, [sp, #20]
 80111d4:	a902      	add	r1, sp, #8
 80111d6:	6800      	ldr	r0, [r0, #0]
 80111d8:	9301      	str	r3, [sp, #4]
 80111da:	941b      	str	r4, [sp, #108]	@ 0x6c
 80111dc:	f002 fc92 	bl	8013b04 <_svfiprintf_r>
 80111e0:	9b02      	ldr	r3, [sp, #8]
 80111e2:	701c      	strb	r4, [r3, #0]
 80111e4:	b01d      	add	sp, #116	@ 0x74
 80111e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80111ea:	b003      	add	sp, #12
 80111ec:	4770      	bx	lr
 80111ee:	bf00      	nop
 80111f0:	20000034 	.word	0x20000034
 80111f4:	ffff0208 	.word	0xffff0208

080111f8 <__sread>:
 80111f8:	b510      	push	{r4, lr}
 80111fa:	460c      	mov	r4, r1
 80111fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011200:	f000 f910 	bl	8011424 <_read_r>
 8011204:	2800      	cmp	r0, #0
 8011206:	bfab      	itete	ge
 8011208:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801120a:	89a3      	ldrhlt	r3, [r4, #12]
 801120c:	181b      	addge	r3, r3, r0
 801120e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011212:	bfac      	ite	ge
 8011214:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011216:	81a3      	strhlt	r3, [r4, #12]
 8011218:	bd10      	pop	{r4, pc}

0801121a <__swrite>:
 801121a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801121e:	461f      	mov	r7, r3
 8011220:	898b      	ldrh	r3, [r1, #12]
 8011222:	4605      	mov	r5, r0
 8011224:	460c      	mov	r4, r1
 8011226:	05db      	lsls	r3, r3, #23
 8011228:	4616      	mov	r6, r2
 801122a:	d505      	bpl.n	8011238 <__swrite+0x1e>
 801122c:	2302      	movs	r3, #2
 801122e:	2200      	movs	r2, #0
 8011230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011234:	f000 f8e4 	bl	8011400 <_lseek_r>
 8011238:	89a3      	ldrh	r3, [r4, #12]
 801123a:	4632      	mov	r2, r6
 801123c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011240:	4628      	mov	r0, r5
 8011242:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011246:	81a3      	strh	r3, [r4, #12]
 8011248:	463b      	mov	r3, r7
 801124a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801124e:	f000 b8fb 	b.w	8011448 <_write_r>

08011252 <__sseek>:
 8011252:	b510      	push	{r4, lr}
 8011254:	460c      	mov	r4, r1
 8011256:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801125a:	f000 f8d1 	bl	8011400 <_lseek_r>
 801125e:	1c43      	adds	r3, r0, #1
 8011260:	89a3      	ldrh	r3, [r4, #12]
 8011262:	bf15      	itete	ne
 8011264:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011266:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801126a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801126e:	81a3      	strheq	r3, [r4, #12]
 8011270:	bf18      	it	ne
 8011272:	81a3      	strhne	r3, [r4, #12]
 8011274:	bd10      	pop	{r4, pc}

08011276 <__sclose>:
 8011276:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801127a:	f000 b8b1 	b.w	80113e0 <_close_r>

0801127e <__swbuf_r>:
 801127e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011280:	460e      	mov	r6, r1
 8011282:	4614      	mov	r4, r2
 8011284:	4605      	mov	r5, r0
 8011286:	b118      	cbz	r0, 8011290 <__swbuf_r+0x12>
 8011288:	6a03      	ldr	r3, [r0, #32]
 801128a:	b90b      	cbnz	r3, 8011290 <__swbuf_r+0x12>
 801128c:	f7ff feec 	bl	8011068 <__sinit>
 8011290:	69a3      	ldr	r3, [r4, #24]
 8011292:	60a3      	str	r3, [r4, #8]
 8011294:	89a3      	ldrh	r3, [r4, #12]
 8011296:	071a      	lsls	r2, r3, #28
 8011298:	d501      	bpl.n	801129e <__swbuf_r+0x20>
 801129a:	6923      	ldr	r3, [r4, #16]
 801129c:	b943      	cbnz	r3, 80112b0 <__swbuf_r+0x32>
 801129e:	4621      	mov	r1, r4
 80112a0:	4628      	mov	r0, r5
 80112a2:	f000 f82b 	bl	80112fc <__swsetup_r>
 80112a6:	b118      	cbz	r0, 80112b0 <__swbuf_r+0x32>
 80112a8:	f04f 37ff 	mov.w	r7, #4294967295
 80112ac:	4638      	mov	r0, r7
 80112ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80112b0:	6823      	ldr	r3, [r4, #0]
 80112b2:	b2f6      	uxtb	r6, r6
 80112b4:	6922      	ldr	r2, [r4, #16]
 80112b6:	4637      	mov	r7, r6
 80112b8:	1a98      	subs	r0, r3, r2
 80112ba:	6963      	ldr	r3, [r4, #20]
 80112bc:	4283      	cmp	r3, r0
 80112be:	dc05      	bgt.n	80112cc <__swbuf_r+0x4e>
 80112c0:	4621      	mov	r1, r4
 80112c2:	4628      	mov	r0, r5
 80112c4:	f002 fee0 	bl	8014088 <_fflush_r>
 80112c8:	2800      	cmp	r0, #0
 80112ca:	d1ed      	bne.n	80112a8 <__swbuf_r+0x2a>
 80112cc:	68a3      	ldr	r3, [r4, #8]
 80112ce:	3b01      	subs	r3, #1
 80112d0:	60a3      	str	r3, [r4, #8]
 80112d2:	6823      	ldr	r3, [r4, #0]
 80112d4:	1c5a      	adds	r2, r3, #1
 80112d6:	6022      	str	r2, [r4, #0]
 80112d8:	701e      	strb	r6, [r3, #0]
 80112da:	1c43      	adds	r3, r0, #1
 80112dc:	6962      	ldr	r2, [r4, #20]
 80112de:	429a      	cmp	r2, r3
 80112e0:	d004      	beq.n	80112ec <__swbuf_r+0x6e>
 80112e2:	89a3      	ldrh	r3, [r4, #12]
 80112e4:	07db      	lsls	r3, r3, #31
 80112e6:	d5e1      	bpl.n	80112ac <__swbuf_r+0x2e>
 80112e8:	2e0a      	cmp	r6, #10
 80112ea:	d1df      	bne.n	80112ac <__swbuf_r+0x2e>
 80112ec:	4621      	mov	r1, r4
 80112ee:	4628      	mov	r0, r5
 80112f0:	f002 feca 	bl	8014088 <_fflush_r>
 80112f4:	2800      	cmp	r0, #0
 80112f6:	d0d9      	beq.n	80112ac <__swbuf_r+0x2e>
 80112f8:	e7d6      	b.n	80112a8 <__swbuf_r+0x2a>
	...

080112fc <__swsetup_r>:
 80112fc:	b538      	push	{r3, r4, r5, lr}
 80112fe:	4b29      	ldr	r3, [pc, #164]	@ (80113a4 <__swsetup_r+0xa8>)
 8011300:	4605      	mov	r5, r0
 8011302:	460c      	mov	r4, r1
 8011304:	6818      	ldr	r0, [r3, #0]
 8011306:	b118      	cbz	r0, 8011310 <__swsetup_r+0x14>
 8011308:	6a03      	ldr	r3, [r0, #32]
 801130a:	b90b      	cbnz	r3, 8011310 <__swsetup_r+0x14>
 801130c:	f7ff feac 	bl	8011068 <__sinit>
 8011310:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011314:	0719      	lsls	r1, r3, #28
 8011316:	d422      	bmi.n	801135e <__swsetup_r+0x62>
 8011318:	06da      	lsls	r2, r3, #27
 801131a:	d407      	bmi.n	801132c <__swsetup_r+0x30>
 801131c:	2209      	movs	r2, #9
 801131e:	602a      	str	r2, [r5, #0]
 8011320:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011324:	f04f 30ff 	mov.w	r0, #4294967295
 8011328:	81a3      	strh	r3, [r4, #12]
 801132a:	e033      	b.n	8011394 <__swsetup_r+0x98>
 801132c:	0758      	lsls	r0, r3, #29
 801132e:	d512      	bpl.n	8011356 <__swsetup_r+0x5a>
 8011330:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011332:	b141      	cbz	r1, 8011346 <__swsetup_r+0x4a>
 8011334:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011338:	4299      	cmp	r1, r3
 801133a:	d002      	beq.n	8011342 <__swsetup_r+0x46>
 801133c:	4628      	mov	r0, r5
 801133e:	f000 ff49 	bl	80121d4 <_free_r>
 8011342:	2300      	movs	r3, #0
 8011344:	6363      	str	r3, [r4, #52]	@ 0x34
 8011346:	89a3      	ldrh	r3, [r4, #12]
 8011348:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801134c:	81a3      	strh	r3, [r4, #12]
 801134e:	2300      	movs	r3, #0
 8011350:	6063      	str	r3, [r4, #4]
 8011352:	6923      	ldr	r3, [r4, #16]
 8011354:	6023      	str	r3, [r4, #0]
 8011356:	89a3      	ldrh	r3, [r4, #12]
 8011358:	f043 0308 	orr.w	r3, r3, #8
 801135c:	81a3      	strh	r3, [r4, #12]
 801135e:	6923      	ldr	r3, [r4, #16]
 8011360:	b94b      	cbnz	r3, 8011376 <__swsetup_r+0x7a>
 8011362:	89a3      	ldrh	r3, [r4, #12]
 8011364:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011368:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801136c:	d003      	beq.n	8011376 <__swsetup_r+0x7a>
 801136e:	4621      	mov	r1, r4
 8011370:	4628      	mov	r0, r5
 8011372:	f002 fed6 	bl	8014122 <__smakebuf_r>
 8011376:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801137a:	f013 0201 	ands.w	r2, r3, #1
 801137e:	d00a      	beq.n	8011396 <__swsetup_r+0x9a>
 8011380:	2200      	movs	r2, #0
 8011382:	60a2      	str	r2, [r4, #8]
 8011384:	6962      	ldr	r2, [r4, #20]
 8011386:	4252      	negs	r2, r2
 8011388:	61a2      	str	r2, [r4, #24]
 801138a:	6922      	ldr	r2, [r4, #16]
 801138c:	b942      	cbnz	r2, 80113a0 <__swsetup_r+0xa4>
 801138e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011392:	d1c5      	bne.n	8011320 <__swsetup_r+0x24>
 8011394:	bd38      	pop	{r3, r4, r5, pc}
 8011396:	0799      	lsls	r1, r3, #30
 8011398:	bf58      	it	pl
 801139a:	6962      	ldrpl	r2, [r4, #20]
 801139c:	60a2      	str	r2, [r4, #8]
 801139e:	e7f4      	b.n	801138a <__swsetup_r+0x8e>
 80113a0:	2000      	movs	r0, #0
 80113a2:	e7f7      	b.n	8011394 <__swsetup_r+0x98>
 80113a4:	20000034 	.word	0x20000034

080113a8 <memcmp>:
 80113a8:	3901      	subs	r1, #1
 80113aa:	4402      	add	r2, r0
 80113ac:	b510      	push	{r4, lr}
 80113ae:	4290      	cmp	r0, r2
 80113b0:	d101      	bne.n	80113b6 <memcmp+0xe>
 80113b2:	2000      	movs	r0, #0
 80113b4:	e005      	b.n	80113c2 <memcmp+0x1a>
 80113b6:	7803      	ldrb	r3, [r0, #0]
 80113b8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80113bc:	42a3      	cmp	r3, r4
 80113be:	d001      	beq.n	80113c4 <memcmp+0x1c>
 80113c0:	1b18      	subs	r0, r3, r4
 80113c2:	bd10      	pop	{r4, pc}
 80113c4:	3001      	adds	r0, #1
 80113c6:	e7f2      	b.n	80113ae <memcmp+0x6>

080113c8 <memset>:
 80113c8:	4402      	add	r2, r0
 80113ca:	4603      	mov	r3, r0
 80113cc:	4293      	cmp	r3, r2
 80113ce:	d100      	bne.n	80113d2 <memset+0xa>
 80113d0:	4770      	bx	lr
 80113d2:	f803 1b01 	strb.w	r1, [r3], #1
 80113d6:	e7f9      	b.n	80113cc <memset+0x4>

080113d8 <_localeconv_r>:
 80113d8:	4800      	ldr	r0, [pc, #0]	@ (80113dc <_localeconv_r+0x4>)
 80113da:	4770      	bx	lr
 80113dc:	20000174 	.word	0x20000174

080113e0 <_close_r>:
 80113e0:	b538      	push	{r3, r4, r5, lr}
 80113e2:	2300      	movs	r3, #0
 80113e4:	4d05      	ldr	r5, [pc, #20]	@ (80113fc <_close_r+0x1c>)
 80113e6:	4604      	mov	r4, r0
 80113e8:	4608      	mov	r0, r1
 80113ea:	602b      	str	r3, [r5, #0]
 80113ec:	f7f3 f98b 	bl	8004706 <_close>
 80113f0:	1c43      	adds	r3, r0, #1
 80113f2:	d102      	bne.n	80113fa <_close_r+0x1a>
 80113f4:	682b      	ldr	r3, [r5, #0]
 80113f6:	b103      	cbz	r3, 80113fa <_close_r+0x1a>
 80113f8:	6023      	str	r3, [r4, #0]
 80113fa:	bd38      	pop	{r3, r4, r5, pc}
 80113fc:	2000093c 	.word	0x2000093c

08011400 <_lseek_r>:
 8011400:	b538      	push	{r3, r4, r5, lr}
 8011402:	4604      	mov	r4, r0
 8011404:	4d06      	ldr	r5, [pc, #24]	@ (8011420 <_lseek_r+0x20>)
 8011406:	4608      	mov	r0, r1
 8011408:	4611      	mov	r1, r2
 801140a:	2200      	movs	r2, #0
 801140c:	602a      	str	r2, [r5, #0]
 801140e:	461a      	mov	r2, r3
 8011410:	f7f3 f9a0 	bl	8004754 <_lseek>
 8011414:	1c43      	adds	r3, r0, #1
 8011416:	d102      	bne.n	801141e <_lseek_r+0x1e>
 8011418:	682b      	ldr	r3, [r5, #0]
 801141a:	b103      	cbz	r3, 801141e <_lseek_r+0x1e>
 801141c:	6023      	str	r3, [r4, #0]
 801141e:	bd38      	pop	{r3, r4, r5, pc}
 8011420:	2000093c 	.word	0x2000093c

08011424 <_read_r>:
 8011424:	b538      	push	{r3, r4, r5, lr}
 8011426:	4604      	mov	r4, r0
 8011428:	4d06      	ldr	r5, [pc, #24]	@ (8011444 <_read_r+0x20>)
 801142a:	4608      	mov	r0, r1
 801142c:	4611      	mov	r1, r2
 801142e:	2200      	movs	r2, #0
 8011430:	602a      	str	r2, [r5, #0]
 8011432:	461a      	mov	r2, r3
 8011434:	f7f3 f92e 	bl	8004694 <_read>
 8011438:	1c43      	adds	r3, r0, #1
 801143a:	d102      	bne.n	8011442 <_read_r+0x1e>
 801143c:	682b      	ldr	r3, [r5, #0]
 801143e:	b103      	cbz	r3, 8011442 <_read_r+0x1e>
 8011440:	6023      	str	r3, [r4, #0]
 8011442:	bd38      	pop	{r3, r4, r5, pc}
 8011444:	2000093c 	.word	0x2000093c

08011448 <_write_r>:
 8011448:	b538      	push	{r3, r4, r5, lr}
 801144a:	4604      	mov	r4, r0
 801144c:	4d06      	ldr	r5, [pc, #24]	@ (8011468 <_write_r+0x20>)
 801144e:	4608      	mov	r0, r1
 8011450:	4611      	mov	r1, r2
 8011452:	2200      	movs	r2, #0
 8011454:	602a      	str	r2, [r5, #0]
 8011456:	461a      	mov	r2, r3
 8011458:	f7f3 f939 	bl	80046ce <_write>
 801145c:	1c43      	adds	r3, r0, #1
 801145e:	d102      	bne.n	8011466 <_write_r+0x1e>
 8011460:	682b      	ldr	r3, [r5, #0]
 8011462:	b103      	cbz	r3, 8011466 <_write_r+0x1e>
 8011464:	6023      	str	r3, [r4, #0]
 8011466:	bd38      	pop	{r3, r4, r5, pc}
 8011468:	2000093c 	.word	0x2000093c

0801146c <__errno>:
 801146c:	4b01      	ldr	r3, [pc, #4]	@ (8011474 <__errno+0x8>)
 801146e:	6818      	ldr	r0, [r3, #0]
 8011470:	4770      	bx	lr
 8011472:	bf00      	nop
 8011474:	20000034 	.word	0x20000034

08011478 <__libc_init_array>:
 8011478:	b570      	push	{r4, r5, r6, lr}
 801147a:	4d0d      	ldr	r5, [pc, #52]	@ (80114b0 <__libc_init_array+0x38>)
 801147c:	2600      	movs	r6, #0
 801147e:	4c0d      	ldr	r4, [pc, #52]	@ (80114b4 <__libc_init_array+0x3c>)
 8011480:	1b64      	subs	r4, r4, r5
 8011482:	10a4      	asrs	r4, r4, #2
 8011484:	42a6      	cmp	r6, r4
 8011486:	d109      	bne.n	801149c <__libc_init_array+0x24>
 8011488:	4d0b      	ldr	r5, [pc, #44]	@ (80114b8 <__libc_init_array+0x40>)
 801148a:	2600      	movs	r6, #0
 801148c:	4c0b      	ldr	r4, [pc, #44]	@ (80114bc <__libc_init_array+0x44>)
 801148e:	f003 fc49 	bl	8014d24 <_init>
 8011492:	1b64      	subs	r4, r4, r5
 8011494:	10a4      	asrs	r4, r4, #2
 8011496:	42a6      	cmp	r6, r4
 8011498:	d105      	bne.n	80114a6 <__libc_init_array+0x2e>
 801149a:	bd70      	pop	{r4, r5, r6, pc}
 801149c:	f855 3b04 	ldr.w	r3, [r5], #4
 80114a0:	3601      	adds	r6, #1
 80114a2:	4798      	blx	r3
 80114a4:	e7ee      	b.n	8011484 <__libc_init_array+0xc>
 80114a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80114aa:	3601      	adds	r6, #1
 80114ac:	4798      	blx	r3
 80114ae:	e7f2      	b.n	8011496 <__libc_init_array+0x1e>
 80114b0:	08016f24 	.word	0x08016f24
 80114b4:	08016f24 	.word	0x08016f24
 80114b8:	08016f24 	.word	0x08016f24
 80114bc:	08016f28 	.word	0x08016f28

080114c0 <__retarget_lock_init_recursive>:
 80114c0:	4770      	bx	lr

080114c2 <__retarget_lock_acquire_recursive>:
 80114c2:	4770      	bx	lr

080114c4 <__retarget_lock_release_recursive>:
 80114c4:	4770      	bx	lr

080114c6 <__aeabi_memcpy>:
 80114c6:	f000 b811 	b.w	80114ec <memcpy>

080114ca <__aeabi_memclr>:
 80114ca:	2200      	movs	r2, #0
 80114cc:	f7f0 bc1d 	b.w	8001d0a <__aeabi_memset>

080114d0 <memchr>:
 80114d0:	b2c9      	uxtb	r1, r1
 80114d2:	4603      	mov	r3, r0
 80114d4:	4402      	add	r2, r0
 80114d6:	b510      	push	{r4, lr}
 80114d8:	4293      	cmp	r3, r2
 80114da:	4618      	mov	r0, r3
 80114dc:	d101      	bne.n	80114e2 <memchr+0x12>
 80114de:	2000      	movs	r0, #0
 80114e0:	e003      	b.n	80114ea <memchr+0x1a>
 80114e2:	7804      	ldrb	r4, [r0, #0]
 80114e4:	3301      	adds	r3, #1
 80114e6:	428c      	cmp	r4, r1
 80114e8:	d1f6      	bne.n	80114d8 <memchr+0x8>
 80114ea:	bd10      	pop	{r4, pc}

080114ec <memcpy>:
 80114ec:	440a      	add	r2, r1
 80114ee:	1e43      	subs	r3, r0, #1
 80114f0:	4291      	cmp	r1, r2
 80114f2:	d100      	bne.n	80114f6 <memcpy+0xa>
 80114f4:	4770      	bx	lr
 80114f6:	b510      	push	{r4, lr}
 80114f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80114fc:	4291      	cmp	r1, r2
 80114fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011502:	d1f9      	bne.n	80114f8 <memcpy+0xc>
 8011504:	bd10      	pop	{r4, pc}
	...

08011508 <nanf>:
 8011508:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8011510 <nanf+0x8>
 801150c:	4770      	bx	lr
 801150e:	bf00      	nop
 8011510:	7fc00000 	.word	0x7fc00000

08011514 <quorem>:
 8011514:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011518:	6903      	ldr	r3, [r0, #16]
 801151a:	4607      	mov	r7, r0
 801151c:	690c      	ldr	r4, [r1, #16]
 801151e:	42a3      	cmp	r3, r4
 8011520:	f2c0 8083 	blt.w	801162a <quorem+0x116>
 8011524:	3c01      	subs	r4, #1
 8011526:	f100 0514 	add.w	r5, r0, #20
 801152a:	f101 0814 	add.w	r8, r1, #20
 801152e:	00a3      	lsls	r3, r4, #2
 8011530:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011534:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011538:	9300      	str	r3, [sp, #0]
 801153a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801153e:	9301      	str	r3, [sp, #4]
 8011540:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011544:	3301      	adds	r3, #1
 8011546:	429a      	cmp	r2, r3
 8011548:	fbb2 f6f3 	udiv	r6, r2, r3
 801154c:	d331      	bcc.n	80115b2 <quorem+0x9e>
 801154e:	f04f 0a00 	mov.w	sl, #0
 8011552:	46c4      	mov	ip, r8
 8011554:	46ae      	mov	lr, r5
 8011556:	46d3      	mov	fp, sl
 8011558:	f85c 3b04 	ldr.w	r3, [ip], #4
 801155c:	b298      	uxth	r0, r3
 801155e:	45e1      	cmp	r9, ip
 8011560:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8011564:	fb06 a000 	mla	r0, r6, r0, sl
 8011568:	ea4f 4210 	mov.w	r2, r0, lsr #16
 801156c:	b280      	uxth	r0, r0
 801156e:	fb06 2303 	mla	r3, r6, r3, r2
 8011572:	f8de 2000 	ldr.w	r2, [lr]
 8011576:	b292      	uxth	r2, r2
 8011578:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801157c:	eba2 0200 	sub.w	r2, r2, r0
 8011580:	b29b      	uxth	r3, r3
 8011582:	f8de 0000 	ldr.w	r0, [lr]
 8011586:	445a      	add	r2, fp
 8011588:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801158c:	b292      	uxth	r2, r2
 801158e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8011592:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8011596:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801159a:	f84e 2b04 	str.w	r2, [lr], #4
 801159e:	d2db      	bcs.n	8011558 <quorem+0x44>
 80115a0:	9b00      	ldr	r3, [sp, #0]
 80115a2:	58eb      	ldr	r3, [r5, r3]
 80115a4:	b92b      	cbnz	r3, 80115b2 <quorem+0x9e>
 80115a6:	9b01      	ldr	r3, [sp, #4]
 80115a8:	3b04      	subs	r3, #4
 80115aa:	429d      	cmp	r5, r3
 80115ac:	461a      	mov	r2, r3
 80115ae:	d330      	bcc.n	8011612 <quorem+0xfe>
 80115b0:	613c      	str	r4, [r7, #16]
 80115b2:	4638      	mov	r0, r7
 80115b4:	f001 f9ce 	bl	8012954 <__mcmp>
 80115b8:	2800      	cmp	r0, #0
 80115ba:	db26      	blt.n	801160a <quorem+0xf6>
 80115bc:	4629      	mov	r1, r5
 80115be:	2000      	movs	r0, #0
 80115c0:	f858 2b04 	ldr.w	r2, [r8], #4
 80115c4:	f8d1 c000 	ldr.w	ip, [r1]
 80115c8:	fa1f fe82 	uxth.w	lr, r2
 80115cc:	45c1      	cmp	r9, r8
 80115ce:	fa1f f38c 	uxth.w	r3, ip
 80115d2:	ea4f 4212 	mov.w	r2, r2, lsr #16
 80115d6:	eba3 030e 	sub.w	r3, r3, lr
 80115da:	4403      	add	r3, r0
 80115dc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80115e0:	b29b      	uxth	r3, r3
 80115e2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80115e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80115ea:	ea4f 4022 	mov.w	r0, r2, asr #16
 80115ee:	f841 3b04 	str.w	r3, [r1], #4
 80115f2:	d2e5      	bcs.n	80115c0 <quorem+0xac>
 80115f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80115f8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80115fc:	b922      	cbnz	r2, 8011608 <quorem+0xf4>
 80115fe:	3b04      	subs	r3, #4
 8011600:	429d      	cmp	r5, r3
 8011602:	461a      	mov	r2, r3
 8011604:	d30b      	bcc.n	801161e <quorem+0x10a>
 8011606:	613c      	str	r4, [r7, #16]
 8011608:	3601      	adds	r6, #1
 801160a:	4630      	mov	r0, r6
 801160c:	b003      	add	sp, #12
 801160e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011612:	6812      	ldr	r2, [r2, #0]
 8011614:	3b04      	subs	r3, #4
 8011616:	2a00      	cmp	r2, #0
 8011618:	d1ca      	bne.n	80115b0 <quorem+0x9c>
 801161a:	3c01      	subs	r4, #1
 801161c:	e7c5      	b.n	80115aa <quorem+0x96>
 801161e:	6812      	ldr	r2, [r2, #0]
 8011620:	3b04      	subs	r3, #4
 8011622:	2a00      	cmp	r2, #0
 8011624:	d1ef      	bne.n	8011606 <quorem+0xf2>
 8011626:	3c01      	subs	r4, #1
 8011628:	e7ea      	b.n	8011600 <quorem+0xec>
 801162a:	2000      	movs	r0, #0
 801162c:	e7ee      	b.n	801160c <quorem+0xf8>
	...

08011630 <_dtoa_r>:
 8011630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011634:	69c7      	ldr	r7, [r0, #28]
 8011636:	b097      	sub	sp, #92	@ 0x5c
 8011638:	4681      	mov	r9, r0
 801163a:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801163c:	9107      	str	r1, [sp, #28]
 801163e:	920c      	str	r2, [sp, #48]	@ 0x30
 8011640:	9311      	str	r3, [sp, #68]	@ 0x44
 8011642:	ec55 4b10 	vmov	r4, r5, d0
 8011646:	ed8d 0b04 	vstr	d0, [sp, #16]
 801164a:	b97f      	cbnz	r7, 801166c <_dtoa_r+0x3c>
 801164c:	2010      	movs	r0, #16
 801164e:	f000 fe0b 	bl	8012268 <malloc>
 8011652:	4602      	mov	r2, r0
 8011654:	f8c9 001c 	str.w	r0, [r9, #28]
 8011658:	b920      	cbnz	r0, 8011664 <_dtoa_r+0x34>
 801165a:	4ba9      	ldr	r3, [pc, #676]	@ (8011900 <_dtoa_r+0x2d0>)
 801165c:	21ef      	movs	r1, #239	@ 0xef
 801165e:	48a9      	ldr	r0, [pc, #676]	@ (8011904 <_dtoa_r+0x2d4>)
 8011660:	f002 fe02 	bl	8014268 <__assert_func>
 8011664:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8011668:	6007      	str	r7, [r0, #0]
 801166a:	60c7      	str	r7, [r0, #12]
 801166c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8011670:	6819      	ldr	r1, [r3, #0]
 8011672:	b159      	cbz	r1, 801168c <_dtoa_r+0x5c>
 8011674:	685a      	ldr	r2, [r3, #4]
 8011676:	2301      	movs	r3, #1
 8011678:	4648      	mov	r0, r9
 801167a:	4093      	lsls	r3, r2
 801167c:	604a      	str	r2, [r1, #4]
 801167e:	608b      	str	r3, [r1, #8]
 8011680:	f000 fee8 	bl	8012454 <_Bfree>
 8011684:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8011688:	2200      	movs	r2, #0
 801168a:	601a      	str	r2, [r3, #0]
 801168c:	1e2b      	subs	r3, r5, #0
 801168e:	bfb7      	itett	lt
 8011690:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8011694:	2300      	movge	r3, #0
 8011696:	2201      	movlt	r2, #1
 8011698:	9305      	strlt	r3, [sp, #20]
 801169a:	bfa8      	it	ge
 801169c:	6033      	strge	r3, [r6, #0]
 801169e:	9f05      	ldr	r7, [sp, #20]
 80116a0:	4b99      	ldr	r3, [pc, #612]	@ (8011908 <_dtoa_r+0x2d8>)
 80116a2:	bfb8      	it	lt
 80116a4:	6032      	strlt	r2, [r6, #0]
 80116a6:	43bb      	bics	r3, r7
 80116a8:	d112      	bne.n	80116d0 <_dtoa_r+0xa0>
 80116aa:	f242 730f 	movw	r3, #9999	@ 0x270f
 80116ae:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80116b0:	6013      	str	r3, [r2, #0]
 80116b2:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80116b6:	4323      	orrs	r3, r4
 80116b8:	f000 855a 	beq.w	8012170 <_dtoa_r+0xb40>
 80116bc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80116be:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 801191c <_dtoa_r+0x2ec>
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	f000 855c 	beq.w	8012180 <_dtoa_r+0xb50>
 80116c8:	f10a 0303 	add.w	r3, sl, #3
 80116cc:	f000 bd56 	b.w	801217c <_dtoa_r+0xb4c>
 80116d0:	ed9d 7b04 	vldr	d7, [sp, #16]
 80116d4:	2200      	movs	r2, #0
 80116d6:	2300      	movs	r3, #0
 80116d8:	ec51 0b17 	vmov	r0, r1, d7
 80116dc:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80116e0:	f7f0 ff84 	bl	80025ec <__aeabi_dcmpeq>
 80116e4:	4680      	mov	r8, r0
 80116e6:	b158      	cbz	r0, 8011700 <_dtoa_r+0xd0>
 80116e8:	2301      	movs	r3, #1
 80116ea:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80116ec:	6013      	str	r3, [r2, #0]
 80116ee:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80116f0:	b113      	cbz	r3, 80116f8 <_dtoa_r+0xc8>
 80116f2:	4b86      	ldr	r3, [pc, #536]	@ (801190c <_dtoa_r+0x2dc>)
 80116f4:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80116f6:	6013      	str	r3, [r2, #0]
 80116f8:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8011920 <_dtoa_r+0x2f0>
 80116fc:	f000 bd40 	b.w	8012180 <_dtoa_r+0xb50>
 8011700:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8011704:	aa14      	add	r2, sp, #80	@ 0x50
 8011706:	a915      	add	r1, sp, #84	@ 0x54
 8011708:	4648      	mov	r0, r9
 801170a:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 801170e:	f001 fa49 	bl	8012ba4 <__d2b>
 8011712:	9002      	str	r0, [sp, #8]
 8011714:	2e00      	cmp	r6, #0
 8011716:	d076      	beq.n	8011806 <_dtoa_r+0x1d6>
 8011718:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801171a:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801171e:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8011722:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011726:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801172a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801172e:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8011732:	4619      	mov	r1, r3
 8011734:	2200      	movs	r2, #0
 8011736:	4b76      	ldr	r3, [pc, #472]	@ (8011910 <_dtoa_r+0x2e0>)
 8011738:	f7f0 fb38 	bl	8001dac <__aeabi_dsub>
 801173c:	a36a      	add	r3, pc, #424	@ (adr r3, 80118e8 <_dtoa_r+0x2b8>)
 801173e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011742:	f7f0 fceb 	bl	800211c <__aeabi_dmul>
 8011746:	a36a      	add	r3, pc, #424	@ (adr r3, 80118f0 <_dtoa_r+0x2c0>)
 8011748:	e9d3 2300 	ldrd	r2, r3, [r3]
 801174c:	f7f0 fb30 	bl	8001db0 <__adddf3>
 8011750:	4604      	mov	r4, r0
 8011752:	460d      	mov	r5, r1
 8011754:	4630      	mov	r0, r6
 8011756:	f7f0 fc77 	bl	8002048 <__aeabi_i2d>
 801175a:	a367      	add	r3, pc, #412	@ (adr r3, 80118f8 <_dtoa_r+0x2c8>)
 801175c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011760:	f7f0 fcdc 	bl	800211c <__aeabi_dmul>
 8011764:	4602      	mov	r2, r0
 8011766:	460b      	mov	r3, r1
 8011768:	4620      	mov	r0, r4
 801176a:	4629      	mov	r1, r5
 801176c:	f7f0 fb20 	bl	8001db0 <__adddf3>
 8011770:	4604      	mov	r4, r0
 8011772:	460d      	mov	r5, r1
 8011774:	f7f0 ff82 	bl	800267c <__aeabi_d2iz>
 8011778:	2200      	movs	r2, #0
 801177a:	4607      	mov	r7, r0
 801177c:	2300      	movs	r3, #0
 801177e:	4620      	mov	r0, r4
 8011780:	4629      	mov	r1, r5
 8011782:	f7f0 ff3d 	bl	8002600 <__aeabi_dcmplt>
 8011786:	b140      	cbz	r0, 801179a <_dtoa_r+0x16a>
 8011788:	4638      	mov	r0, r7
 801178a:	f7f0 fc5d 	bl	8002048 <__aeabi_i2d>
 801178e:	4622      	mov	r2, r4
 8011790:	462b      	mov	r3, r5
 8011792:	f7f0 ff2b 	bl	80025ec <__aeabi_dcmpeq>
 8011796:	b900      	cbnz	r0, 801179a <_dtoa_r+0x16a>
 8011798:	3f01      	subs	r7, #1
 801179a:	2f16      	cmp	r7, #22
 801179c:	d852      	bhi.n	8011844 <_dtoa_r+0x214>
 801179e:	4b5d      	ldr	r3, [pc, #372]	@ (8011914 <_dtoa_r+0x2e4>)
 80117a0:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80117a4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80117a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117ac:	f7f0 ff28 	bl	8002600 <__aeabi_dcmplt>
 80117b0:	2800      	cmp	r0, #0
 80117b2:	d049      	beq.n	8011848 <_dtoa_r+0x218>
 80117b4:	3f01      	subs	r7, #1
 80117b6:	2300      	movs	r3, #0
 80117b8:	9310      	str	r3, [sp, #64]	@ 0x40
 80117ba:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80117bc:	1b9b      	subs	r3, r3, r6
 80117be:	1e5a      	subs	r2, r3, #1
 80117c0:	bf4c      	ite	mi
 80117c2:	f1c3 0301 	rsbmi	r3, r3, #1
 80117c6:	2300      	movpl	r3, #0
 80117c8:	9206      	str	r2, [sp, #24]
 80117ca:	bf45      	ittet	mi
 80117cc:	9300      	strmi	r3, [sp, #0]
 80117ce:	2300      	movmi	r3, #0
 80117d0:	9300      	strpl	r3, [sp, #0]
 80117d2:	9306      	strmi	r3, [sp, #24]
 80117d4:	2f00      	cmp	r7, #0
 80117d6:	db39      	blt.n	801184c <_dtoa_r+0x21c>
 80117d8:	9b06      	ldr	r3, [sp, #24]
 80117da:	970d      	str	r7, [sp, #52]	@ 0x34
 80117dc:	443b      	add	r3, r7
 80117de:	9306      	str	r3, [sp, #24]
 80117e0:	2300      	movs	r3, #0
 80117e2:	9308      	str	r3, [sp, #32]
 80117e4:	9b07      	ldr	r3, [sp, #28]
 80117e6:	2b09      	cmp	r3, #9
 80117e8:	d863      	bhi.n	80118b2 <_dtoa_r+0x282>
 80117ea:	2b05      	cmp	r3, #5
 80117ec:	bfc5      	ittet	gt
 80117ee:	3b04      	subgt	r3, #4
 80117f0:	2400      	movgt	r4, #0
 80117f2:	2401      	movle	r4, #1
 80117f4:	9307      	strgt	r3, [sp, #28]
 80117f6:	9b07      	ldr	r3, [sp, #28]
 80117f8:	3b02      	subs	r3, #2
 80117fa:	2b03      	cmp	r3, #3
 80117fc:	d865      	bhi.n	80118ca <_dtoa_r+0x29a>
 80117fe:	e8df f003 	tbb	[pc, r3]
 8011802:	5654      	.short	0x5654
 8011804:	2d39      	.short	0x2d39
 8011806:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 801180a:	441e      	add	r6, r3
 801180c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8011810:	2b20      	cmp	r3, #32
 8011812:	bfc9      	itett	gt
 8011814:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8011818:	f1c3 0320 	rsble	r3, r3, #32
 801181c:	409f      	lslgt	r7, r3
 801181e:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8011822:	bfd8      	it	le
 8011824:	fa04 f003 	lslle.w	r0, r4, r3
 8011828:	f106 36ff 	add.w	r6, r6, #4294967295
 801182c:	bfc4      	itt	gt
 801182e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8011832:	ea47 0003 	orrgt.w	r0, r7, r3
 8011836:	f7f0 fbf7 	bl	8002028 <__aeabi_ui2d>
 801183a:	2201      	movs	r2, #1
 801183c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8011840:	9212      	str	r2, [sp, #72]	@ 0x48
 8011842:	e776      	b.n	8011732 <_dtoa_r+0x102>
 8011844:	2301      	movs	r3, #1
 8011846:	e7b7      	b.n	80117b8 <_dtoa_r+0x188>
 8011848:	9010      	str	r0, [sp, #64]	@ 0x40
 801184a:	e7b6      	b.n	80117ba <_dtoa_r+0x18a>
 801184c:	9b00      	ldr	r3, [sp, #0]
 801184e:	1bdb      	subs	r3, r3, r7
 8011850:	9300      	str	r3, [sp, #0]
 8011852:	427b      	negs	r3, r7
 8011854:	9308      	str	r3, [sp, #32]
 8011856:	2300      	movs	r3, #0
 8011858:	930d      	str	r3, [sp, #52]	@ 0x34
 801185a:	e7c3      	b.n	80117e4 <_dtoa_r+0x1b4>
 801185c:	2301      	movs	r3, #1
 801185e:	9309      	str	r3, [sp, #36]	@ 0x24
 8011860:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011862:	eb07 0b03 	add.w	fp, r7, r3
 8011866:	f10b 0301 	add.w	r3, fp, #1
 801186a:	2b01      	cmp	r3, #1
 801186c:	9303      	str	r3, [sp, #12]
 801186e:	bfb8      	it	lt
 8011870:	2301      	movlt	r3, #1
 8011872:	e006      	b.n	8011882 <_dtoa_r+0x252>
 8011874:	2301      	movs	r3, #1
 8011876:	9309      	str	r3, [sp, #36]	@ 0x24
 8011878:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801187a:	2b00      	cmp	r3, #0
 801187c:	dd28      	ble.n	80118d0 <_dtoa_r+0x2a0>
 801187e:	469b      	mov	fp, r3
 8011880:	9303      	str	r3, [sp, #12]
 8011882:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8011886:	2100      	movs	r1, #0
 8011888:	2204      	movs	r2, #4
 801188a:	f102 0514 	add.w	r5, r2, #20
 801188e:	429d      	cmp	r5, r3
 8011890:	d926      	bls.n	80118e0 <_dtoa_r+0x2b0>
 8011892:	6041      	str	r1, [r0, #4]
 8011894:	4648      	mov	r0, r9
 8011896:	f000 fd9d 	bl	80123d4 <_Balloc>
 801189a:	4682      	mov	sl, r0
 801189c:	2800      	cmp	r0, #0
 801189e:	d141      	bne.n	8011924 <_dtoa_r+0x2f4>
 80118a0:	4b1d      	ldr	r3, [pc, #116]	@ (8011918 <_dtoa_r+0x2e8>)
 80118a2:	4602      	mov	r2, r0
 80118a4:	f240 11af 	movw	r1, #431	@ 0x1af
 80118a8:	e6d9      	b.n	801165e <_dtoa_r+0x2e>
 80118aa:	2300      	movs	r3, #0
 80118ac:	e7e3      	b.n	8011876 <_dtoa_r+0x246>
 80118ae:	2300      	movs	r3, #0
 80118b0:	e7d5      	b.n	801185e <_dtoa_r+0x22e>
 80118b2:	2401      	movs	r4, #1
 80118b4:	2300      	movs	r3, #0
 80118b6:	9409      	str	r4, [sp, #36]	@ 0x24
 80118b8:	9307      	str	r3, [sp, #28]
 80118ba:	f04f 3bff 	mov.w	fp, #4294967295
 80118be:	2200      	movs	r2, #0
 80118c0:	2312      	movs	r3, #18
 80118c2:	f8cd b00c 	str.w	fp, [sp, #12]
 80118c6:	920c      	str	r2, [sp, #48]	@ 0x30
 80118c8:	e7db      	b.n	8011882 <_dtoa_r+0x252>
 80118ca:	2301      	movs	r3, #1
 80118cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80118ce:	e7f4      	b.n	80118ba <_dtoa_r+0x28a>
 80118d0:	f04f 0b01 	mov.w	fp, #1
 80118d4:	465b      	mov	r3, fp
 80118d6:	f8cd b00c 	str.w	fp, [sp, #12]
 80118da:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80118de:	e7d0      	b.n	8011882 <_dtoa_r+0x252>
 80118e0:	3101      	adds	r1, #1
 80118e2:	0052      	lsls	r2, r2, #1
 80118e4:	e7d1      	b.n	801188a <_dtoa_r+0x25a>
 80118e6:	bf00      	nop
 80118e8:	636f4361 	.word	0x636f4361
 80118ec:	3fd287a7 	.word	0x3fd287a7
 80118f0:	8b60c8b3 	.word	0x8b60c8b3
 80118f4:	3fc68a28 	.word	0x3fc68a28
 80118f8:	509f79fb 	.word	0x509f79fb
 80118fc:	3fd34413 	.word	0x3fd34413
 8011900:	08016636 	.word	0x08016636
 8011904:	0801664d 	.word	0x0801664d
 8011908:	7ff00000 	.word	0x7ff00000
 801190c:	08016601 	.word	0x08016601
 8011910:	3ff80000 	.word	0x3ff80000
 8011914:	08016800 	.word	0x08016800
 8011918:	080166a5 	.word	0x080166a5
 801191c:	08016632 	.word	0x08016632
 8011920:	08016600 	.word	0x08016600
 8011924:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8011928:	6018      	str	r0, [r3, #0]
 801192a:	9b03      	ldr	r3, [sp, #12]
 801192c:	2b0e      	cmp	r3, #14
 801192e:	f200 80a1 	bhi.w	8011a74 <_dtoa_r+0x444>
 8011932:	2c00      	cmp	r4, #0
 8011934:	f000 809e 	beq.w	8011a74 <_dtoa_r+0x444>
 8011938:	2f00      	cmp	r7, #0
 801193a:	dd33      	ble.n	80119a4 <_dtoa_r+0x374>
 801193c:	f007 020f 	and.w	r2, r7, #15
 8011940:	4b9b      	ldr	r3, [pc, #620]	@ (8011bb0 <_dtoa_r+0x580>)
 8011942:	05f8      	lsls	r0, r7, #23
 8011944:	ea4f 1427 	mov.w	r4, r7, asr #4
 8011948:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801194c:	ed93 7b00 	vldr	d7, [r3]
 8011950:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8011954:	d516      	bpl.n	8011984 <_dtoa_r+0x354>
 8011956:	4b97      	ldr	r3, [pc, #604]	@ (8011bb4 <_dtoa_r+0x584>)
 8011958:	f004 040f 	and.w	r4, r4, #15
 801195c:	2603      	movs	r6, #3
 801195e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011962:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8011966:	f7f0 fd03 	bl	8002370 <__aeabi_ddiv>
 801196a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801196e:	4d91      	ldr	r5, [pc, #580]	@ (8011bb4 <_dtoa_r+0x584>)
 8011970:	b954      	cbnz	r4, 8011988 <_dtoa_r+0x358>
 8011972:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8011976:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801197a:	f7f0 fcf9 	bl	8002370 <__aeabi_ddiv>
 801197e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011982:	e028      	b.n	80119d6 <_dtoa_r+0x3a6>
 8011984:	2602      	movs	r6, #2
 8011986:	e7f2      	b.n	801196e <_dtoa_r+0x33e>
 8011988:	07e1      	lsls	r1, r4, #31
 801198a:	d508      	bpl.n	801199e <_dtoa_r+0x36e>
 801198c:	3601      	adds	r6, #1
 801198e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8011992:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011996:	f7f0 fbc1 	bl	800211c <__aeabi_dmul>
 801199a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801199e:	1064      	asrs	r4, r4, #1
 80119a0:	3508      	adds	r5, #8
 80119a2:	e7e5      	b.n	8011970 <_dtoa_r+0x340>
 80119a4:	f000 80af 	beq.w	8011b06 <_dtoa_r+0x4d6>
 80119a8:	427c      	negs	r4, r7
 80119aa:	4b81      	ldr	r3, [pc, #516]	@ (8011bb0 <_dtoa_r+0x580>)
 80119ac:	4d81      	ldr	r5, [pc, #516]	@ (8011bb4 <_dtoa_r+0x584>)
 80119ae:	2602      	movs	r6, #2
 80119b0:	f004 020f 	and.w	r2, r4, #15
 80119b4:	1124      	asrs	r4, r4, #4
 80119b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80119ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80119be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119c2:	f7f0 fbab 	bl	800211c <__aeabi_dmul>
 80119c6:	2300      	movs	r3, #0
 80119c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80119cc:	2c00      	cmp	r4, #0
 80119ce:	f040 808f 	bne.w	8011af0 <_dtoa_r+0x4c0>
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d1d3      	bne.n	801197e <_dtoa_r+0x34e>
 80119d6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80119d8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80119dc:	2b00      	cmp	r3, #0
 80119de:	f000 8094 	beq.w	8011b0a <_dtoa_r+0x4da>
 80119e2:	2200      	movs	r2, #0
 80119e4:	4b74      	ldr	r3, [pc, #464]	@ (8011bb8 <_dtoa_r+0x588>)
 80119e6:	4620      	mov	r0, r4
 80119e8:	4629      	mov	r1, r5
 80119ea:	f7f0 fe09 	bl	8002600 <__aeabi_dcmplt>
 80119ee:	2800      	cmp	r0, #0
 80119f0:	f000 808b 	beq.w	8011b0a <_dtoa_r+0x4da>
 80119f4:	9b03      	ldr	r3, [sp, #12]
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	f000 8087 	beq.w	8011b0a <_dtoa_r+0x4da>
 80119fc:	f1bb 0f00 	cmp.w	fp, #0
 8011a00:	dd34      	ble.n	8011a6c <_dtoa_r+0x43c>
 8011a02:	4620      	mov	r0, r4
 8011a04:	f107 38ff 	add.w	r8, r7, #4294967295
 8011a08:	3601      	adds	r6, #1
 8011a0a:	465c      	mov	r4, fp
 8011a0c:	2200      	movs	r2, #0
 8011a0e:	4b6b      	ldr	r3, [pc, #428]	@ (8011bbc <_dtoa_r+0x58c>)
 8011a10:	4629      	mov	r1, r5
 8011a12:	f7f0 fb83 	bl	800211c <__aeabi_dmul>
 8011a16:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011a1a:	4630      	mov	r0, r6
 8011a1c:	f7f0 fb14 	bl	8002048 <__aeabi_i2d>
 8011a20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011a24:	f7f0 fb7a 	bl	800211c <__aeabi_dmul>
 8011a28:	2200      	movs	r2, #0
 8011a2a:	4b65      	ldr	r3, [pc, #404]	@ (8011bc0 <_dtoa_r+0x590>)
 8011a2c:	f7f0 f9c0 	bl	8001db0 <__adddf3>
 8011a30:	4605      	mov	r5, r0
 8011a32:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8011a36:	2c00      	cmp	r4, #0
 8011a38:	d16a      	bne.n	8011b10 <_dtoa_r+0x4e0>
 8011a3a:	2200      	movs	r2, #0
 8011a3c:	4b61      	ldr	r3, [pc, #388]	@ (8011bc4 <_dtoa_r+0x594>)
 8011a3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011a42:	f7f0 f9b3 	bl	8001dac <__aeabi_dsub>
 8011a46:	4602      	mov	r2, r0
 8011a48:	460b      	mov	r3, r1
 8011a4a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011a4e:	462a      	mov	r2, r5
 8011a50:	4633      	mov	r3, r6
 8011a52:	f7f0 fdf3 	bl	800263c <__aeabi_dcmpgt>
 8011a56:	2800      	cmp	r0, #0
 8011a58:	f040 8298 	bne.w	8011f8c <_dtoa_r+0x95c>
 8011a5c:	462a      	mov	r2, r5
 8011a5e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8011a62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011a66:	f7f0 fdcb 	bl	8002600 <__aeabi_dcmplt>
 8011a6a:	bb38      	cbnz	r0, 8011abc <_dtoa_r+0x48c>
 8011a6c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8011a70:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8011a74:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	f2c0 8157 	blt.w	8011d2a <_dtoa_r+0x6fa>
 8011a7c:	2f0e      	cmp	r7, #14
 8011a7e:	f300 8154 	bgt.w	8011d2a <_dtoa_r+0x6fa>
 8011a82:	4b4b      	ldr	r3, [pc, #300]	@ (8011bb0 <_dtoa_r+0x580>)
 8011a84:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011a88:	ed93 7b00 	vldr	d7, [r3]
 8011a8c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	ed8d 7b00 	vstr	d7, [sp]
 8011a94:	f280 80e5 	bge.w	8011c62 <_dtoa_r+0x632>
 8011a98:	9b03      	ldr	r3, [sp, #12]
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	f300 80e1 	bgt.w	8011c62 <_dtoa_r+0x632>
 8011aa0:	d10c      	bne.n	8011abc <_dtoa_r+0x48c>
 8011aa2:	2200      	movs	r2, #0
 8011aa4:	4b47      	ldr	r3, [pc, #284]	@ (8011bc4 <_dtoa_r+0x594>)
 8011aa6:	ec51 0b17 	vmov	r0, r1, d7
 8011aaa:	f7f0 fb37 	bl	800211c <__aeabi_dmul>
 8011aae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011ab2:	f7f0 fdb9 	bl	8002628 <__aeabi_dcmpge>
 8011ab6:	2800      	cmp	r0, #0
 8011ab8:	f000 8266 	beq.w	8011f88 <_dtoa_r+0x958>
 8011abc:	2400      	movs	r4, #0
 8011abe:	4625      	mov	r5, r4
 8011ac0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011ac2:	4656      	mov	r6, sl
 8011ac4:	ea6f 0803 	mvn.w	r8, r3
 8011ac8:	2700      	movs	r7, #0
 8011aca:	4621      	mov	r1, r4
 8011acc:	4648      	mov	r0, r9
 8011ace:	f000 fcc1 	bl	8012454 <_Bfree>
 8011ad2:	2d00      	cmp	r5, #0
 8011ad4:	f000 80bd 	beq.w	8011c52 <_dtoa_r+0x622>
 8011ad8:	b12f      	cbz	r7, 8011ae6 <_dtoa_r+0x4b6>
 8011ada:	42af      	cmp	r7, r5
 8011adc:	d003      	beq.n	8011ae6 <_dtoa_r+0x4b6>
 8011ade:	4639      	mov	r1, r7
 8011ae0:	4648      	mov	r0, r9
 8011ae2:	f000 fcb7 	bl	8012454 <_Bfree>
 8011ae6:	4629      	mov	r1, r5
 8011ae8:	4648      	mov	r0, r9
 8011aea:	f000 fcb3 	bl	8012454 <_Bfree>
 8011aee:	e0b0      	b.n	8011c52 <_dtoa_r+0x622>
 8011af0:	07e2      	lsls	r2, r4, #31
 8011af2:	d505      	bpl.n	8011b00 <_dtoa_r+0x4d0>
 8011af4:	3601      	adds	r6, #1
 8011af6:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011afa:	f7f0 fb0f 	bl	800211c <__aeabi_dmul>
 8011afe:	2301      	movs	r3, #1
 8011b00:	1064      	asrs	r4, r4, #1
 8011b02:	3508      	adds	r5, #8
 8011b04:	e762      	b.n	80119cc <_dtoa_r+0x39c>
 8011b06:	2602      	movs	r6, #2
 8011b08:	e765      	b.n	80119d6 <_dtoa_r+0x3a6>
 8011b0a:	46b8      	mov	r8, r7
 8011b0c:	9c03      	ldr	r4, [sp, #12]
 8011b0e:	e784      	b.n	8011a1a <_dtoa_r+0x3ea>
 8011b10:	4b27      	ldr	r3, [pc, #156]	@ (8011bb0 <_dtoa_r+0x580>)
 8011b12:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011b14:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011b18:	4454      	add	r4, sl
 8011b1a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011b1e:	2900      	cmp	r1, #0
 8011b20:	d054      	beq.n	8011bcc <_dtoa_r+0x59c>
 8011b22:	2000      	movs	r0, #0
 8011b24:	4928      	ldr	r1, [pc, #160]	@ (8011bc8 <_dtoa_r+0x598>)
 8011b26:	f7f0 fc23 	bl	8002370 <__aeabi_ddiv>
 8011b2a:	4633      	mov	r3, r6
 8011b2c:	4656      	mov	r6, sl
 8011b2e:	462a      	mov	r2, r5
 8011b30:	f7f0 f93c 	bl	8001dac <__aeabi_dsub>
 8011b34:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8011b38:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011b3c:	f7f0 fd9e 	bl	800267c <__aeabi_d2iz>
 8011b40:	4605      	mov	r5, r0
 8011b42:	f7f0 fa81 	bl	8002048 <__aeabi_i2d>
 8011b46:	4602      	mov	r2, r0
 8011b48:	460b      	mov	r3, r1
 8011b4a:	3530      	adds	r5, #48	@ 0x30
 8011b4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011b50:	f7f0 f92c 	bl	8001dac <__aeabi_dsub>
 8011b54:	4602      	mov	r2, r0
 8011b56:	460b      	mov	r3, r1
 8011b58:	f806 5b01 	strb.w	r5, [r6], #1
 8011b5c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011b60:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8011b64:	f7f0 fd4c 	bl	8002600 <__aeabi_dcmplt>
 8011b68:	2800      	cmp	r0, #0
 8011b6a:	d172      	bne.n	8011c52 <_dtoa_r+0x622>
 8011b6c:	2000      	movs	r0, #0
 8011b6e:	4912      	ldr	r1, [pc, #72]	@ (8011bb8 <_dtoa_r+0x588>)
 8011b70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011b74:	f7f0 f91a 	bl	8001dac <__aeabi_dsub>
 8011b78:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8011b7c:	f7f0 fd40 	bl	8002600 <__aeabi_dcmplt>
 8011b80:	2800      	cmp	r0, #0
 8011b82:	f040 80b4 	bne.w	8011cee <_dtoa_r+0x6be>
 8011b86:	42a6      	cmp	r6, r4
 8011b88:	f43f af70 	beq.w	8011a6c <_dtoa_r+0x43c>
 8011b8c:	2200      	movs	r2, #0
 8011b8e:	4b0b      	ldr	r3, [pc, #44]	@ (8011bbc <_dtoa_r+0x58c>)
 8011b90:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8011b94:	f7f0 fac2 	bl	800211c <__aeabi_dmul>
 8011b98:	2200      	movs	r2, #0
 8011b9a:	4b08      	ldr	r3, [pc, #32]	@ (8011bbc <_dtoa_r+0x58c>)
 8011b9c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8011ba0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011ba4:	f7f0 faba 	bl	800211c <__aeabi_dmul>
 8011ba8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011bac:	e7c4      	b.n	8011b38 <_dtoa_r+0x508>
 8011bae:	bf00      	nop
 8011bb0:	08016800 	.word	0x08016800
 8011bb4:	080167d8 	.word	0x080167d8
 8011bb8:	3ff00000 	.word	0x3ff00000
 8011bbc:	40240000 	.word	0x40240000
 8011bc0:	401c0000 	.word	0x401c0000
 8011bc4:	40140000 	.word	0x40140000
 8011bc8:	3fe00000 	.word	0x3fe00000
 8011bcc:	4631      	mov	r1, r6
 8011bce:	4656      	mov	r6, sl
 8011bd0:	4628      	mov	r0, r5
 8011bd2:	f7f0 faa3 	bl	800211c <__aeabi_dmul>
 8011bd6:	9413      	str	r4, [sp, #76]	@ 0x4c
 8011bd8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8011bdc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011be0:	f7f0 fd4c 	bl	800267c <__aeabi_d2iz>
 8011be4:	4605      	mov	r5, r0
 8011be6:	f7f0 fa2f 	bl	8002048 <__aeabi_i2d>
 8011bea:	4602      	mov	r2, r0
 8011bec:	3530      	adds	r5, #48	@ 0x30
 8011bee:	460b      	mov	r3, r1
 8011bf0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011bf4:	f7f0 f8da 	bl	8001dac <__aeabi_dsub>
 8011bf8:	f806 5b01 	strb.w	r5, [r6], #1
 8011bfc:	4602      	mov	r2, r0
 8011bfe:	460b      	mov	r3, r1
 8011c00:	42a6      	cmp	r6, r4
 8011c02:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011c06:	f04f 0200 	mov.w	r2, #0
 8011c0a:	d124      	bne.n	8011c56 <_dtoa_r+0x626>
 8011c0c:	4baf      	ldr	r3, [pc, #700]	@ (8011ecc <_dtoa_r+0x89c>)
 8011c0e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8011c12:	f7f0 f8cd 	bl	8001db0 <__adddf3>
 8011c16:	4602      	mov	r2, r0
 8011c18:	460b      	mov	r3, r1
 8011c1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011c1e:	f7f0 fd0d 	bl	800263c <__aeabi_dcmpgt>
 8011c22:	2800      	cmp	r0, #0
 8011c24:	d163      	bne.n	8011cee <_dtoa_r+0x6be>
 8011c26:	2000      	movs	r0, #0
 8011c28:	49a8      	ldr	r1, [pc, #672]	@ (8011ecc <_dtoa_r+0x89c>)
 8011c2a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8011c2e:	f7f0 f8bd 	bl	8001dac <__aeabi_dsub>
 8011c32:	4602      	mov	r2, r0
 8011c34:	460b      	mov	r3, r1
 8011c36:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011c3a:	f7f0 fce1 	bl	8002600 <__aeabi_dcmplt>
 8011c3e:	2800      	cmp	r0, #0
 8011c40:	f43f af14 	beq.w	8011a6c <_dtoa_r+0x43c>
 8011c44:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8011c46:	1e73      	subs	r3, r6, #1
 8011c48:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011c4a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011c4e:	2b30      	cmp	r3, #48	@ 0x30
 8011c50:	d0f8      	beq.n	8011c44 <_dtoa_r+0x614>
 8011c52:	4647      	mov	r7, r8
 8011c54:	e03b      	b.n	8011cce <_dtoa_r+0x69e>
 8011c56:	4b9e      	ldr	r3, [pc, #632]	@ (8011ed0 <_dtoa_r+0x8a0>)
 8011c58:	f7f0 fa60 	bl	800211c <__aeabi_dmul>
 8011c5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011c60:	e7bc      	b.n	8011bdc <_dtoa_r+0x5ac>
 8011c62:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8011c66:	4656      	mov	r6, sl
 8011c68:	4620      	mov	r0, r4
 8011c6a:	4629      	mov	r1, r5
 8011c6c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011c70:	f7f0 fb7e 	bl	8002370 <__aeabi_ddiv>
 8011c74:	f7f0 fd02 	bl	800267c <__aeabi_d2iz>
 8011c78:	4680      	mov	r8, r0
 8011c7a:	f7f0 f9e5 	bl	8002048 <__aeabi_i2d>
 8011c7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011c82:	f7f0 fa4b 	bl	800211c <__aeabi_dmul>
 8011c86:	4602      	mov	r2, r0
 8011c88:	4620      	mov	r0, r4
 8011c8a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8011c8e:	460b      	mov	r3, r1
 8011c90:	4629      	mov	r1, r5
 8011c92:	f7f0 f88b 	bl	8001dac <__aeabi_dsub>
 8011c96:	9d03      	ldr	r5, [sp, #12]
 8011c98:	f806 4b01 	strb.w	r4, [r6], #1
 8011c9c:	eba6 040a 	sub.w	r4, r6, sl
 8011ca0:	4602      	mov	r2, r0
 8011ca2:	460b      	mov	r3, r1
 8011ca4:	42a5      	cmp	r5, r4
 8011ca6:	d133      	bne.n	8011d10 <_dtoa_r+0x6e0>
 8011ca8:	f7f0 f882 	bl	8001db0 <__adddf3>
 8011cac:	4604      	mov	r4, r0
 8011cae:	460d      	mov	r5, r1
 8011cb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011cb4:	f7f0 fcc2 	bl	800263c <__aeabi_dcmpgt>
 8011cb8:	b9c0      	cbnz	r0, 8011cec <_dtoa_r+0x6bc>
 8011cba:	4620      	mov	r0, r4
 8011cbc:	4629      	mov	r1, r5
 8011cbe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011cc2:	f7f0 fc93 	bl	80025ec <__aeabi_dcmpeq>
 8011cc6:	b110      	cbz	r0, 8011cce <_dtoa_r+0x69e>
 8011cc8:	f018 0f01 	tst.w	r8, #1
 8011ccc:	d10e      	bne.n	8011cec <_dtoa_r+0x6bc>
 8011cce:	9902      	ldr	r1, [sp, #8]
 8011cd0:	4648      	mov	r0, r9
 8011cd2:	f000 fbbf 	bl	8012454 <_Bfree>
 8011cd6:	2300      	movs	r3, #0
 8011cd8:	3701      	adds	r7, #1
 8011cda:	7033      	strb	r3, [r6, #0]
 8011cdc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8011cde:	601f      	str	r7, [r3, #0]
 8011ce0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	f000 824c 	beq.w	8012180 <_dtoa_r+0xb50>
 8011ce8:	601e      	str	r6, [r3, #0]
 8011cea:	e249      	b.n	8012180 <_dtoa_r+0xb50>
 8011cec:	46b8      	mov	r8, r7
 8011cee:	4633      	mov	r3, r6
 8011cf0:	461e      	mov	r6, r3
 8011cf2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011cf6:	2a39      	cmp	r2, #57	@ 0x39
 8011cf8:	d106      	bne.n	8011d08 <_dtoa_r+0x6d8>
 8011cfa:	459a      	cmp	sl, r3
 8011cfc:	d1f8      	bne.n	8011cf0 <_dtoa_r+0x6c0>
 8011cfe:	2230      	movs	r2, #48	@ 0x30
 8011d00:	f108 0801 	add.w	r8, r8, #1
 8011d04:	f88a 2000 	strb.w	r2, [sl]
 8011d08:	781a      	ldrb	r2, [r3, #0]
 8011d0a:	3201      	adds	r2, #1
 8011d0c:	701a      	strb	r2, [r3, #0]
 8011d0e:	e7a0      	b.n	8011c52 <_dtoa_r+0x622>
 8011d10:	2200      	movs	r2, #0
 8011d12:	4b6f      	ldr	r3, [pc, #444]	@ (8011ed0 <_dtoa_r+0x8a0>)
 8011d14:	f7f0 fa02 	bl	800211c <__aeabi_dmul>
 8011d18:	2200      	movs	r2, #0
 8011d1a:	2300      	movs	r3, #0
 8011d1c:	4604      	mov	r4, r0
 8011d1e:	460d      	mov	r5, r1
 8011d20:	f7f0 fc64 	bl	80025ec <__aeabi_dcmpeq>
 8011d24:	2800      	cmp	r0, #0
 8011d26:	d09f      	beq.n	8011c68 <_dtoa_r+0x638>
 8011d28:	e7d1      	b.n	8011cce <_dtoa_r+0x69e>
 8011d2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011d2c:	2a00      	cmp	r2, #0
 8011d2e:	f000 80ea 	beq.w	8011f06 <_dtoa_r+0x8d6>
 8011d32:	9a07      	ldr	r2, [sp, #28]
 8011d34:	2a01      	cmp	r2, #1
 8011d36:	f300 80cd 	bgt.w	8011ed4 <_dtoa_r+0x8a4>
 8011d3a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8011d3c:	2a00      	cmp	r2, #0
 8011d3e:	f000 80c1 	beq.w	8011ec4 <_dtoa_r+0x894>
 8011d42:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8011d46:	9c08      	ldr	r4, [sp, #32]
 8011d48:	9e00      	ldr	r6, [sp, #0]
 8011d4a:	9a00      	ldr	r2, [sp, #0]
 8011d4c:	2101      	movs	r1, #1
 8011d4e:	4648      	mov	r0, r9
 8011d50:	441a      	add	r2, r3
 8011d52:	9200      	str	r2, [sp, #0]
 8011d54:	9a06      	ldr	r2, [sp, #24]
 8011d56:	441a      	add	r2, r3
 8011d58:	9206      	str	r2, [sp, #24]
 8011d5a:	f000 fc7b 	bl	8012654 <__i2b>
 8011d5e:	4605      	mov	r5, r0
 8011d60:	b166      	cbz	r6, 8011d7c <_dtoa_r+0x74c>
 8011d62:	9b06      	ldr	r3, [sp, #24]
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	dd09      	ble.n	8011d7c <_dtoa_r+0x74c>
 8011d68:	42b3      	cmp	r3, r6
 8011d6a:	9a00      	ldr	r2, [sp, #0]
 8011d6c:	bfa8      	it	ge
 8011d6e:	4633      	movge	r3, r6
 8011d70:	1ad2      	subs	r2, r2, r3
 8011d72:	1af6      	subs	r6, r6, r3
 8011d74:	9200      	str	r2, [sp, #0]
 8011d76:	9a06      	ldr	r2, [sp, #24]
 8011d78:	1ad3      	subs	r3, r2, r3
 8011d7a:	9306      	str	r3, [sp, #24]
 8011d7c:	9b08      	ldr	r3, [sp, #32]
 8011d7e:	b30b      	cbz	r3, 8011dc4 <_dtoa_r+0x794>
 8011d80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	f000 80c6 	beq.w	8011f14 <_dtoa_r+0x8e4>
 8011d88:	2c00      	cmp	r4, #0
 8011d8a:	f000 80c0 	beq.w	8011f0e <_dtoa_r+0x8de>
 8011d8e:	4629      	mov	r1, r5
 8011d90:	4622      	mov	r2, r4
 8011d92:	4648      	mov	r0, r9
 8011d94:	f000 fd18 	bl	80127c8 <__pow5mult>
 8011d98:	9a02      	ldr	r2, [sp, #8]
 8011d9a:	4601      	mov	r1, r0
 8011d9c:	4605      	mov	r5, r0
 8011d9e:	4648      	mov	r0, r9
 8011da0:	f000 fc6e 	bl	8012680 <__multiply>
 8011da4:	9902      	ldr	r1, [sp, #8]
 8011da6:	4680      	mov	r8, r0
 8011da8:	4648      	mov	r0, r9
 8011daa:	f000 fb53 	bl	8012454 <_Bfree>
 8011dae:	9b08      	ldr	r3, [sp, #32]
 8011db0:	1b1b      	subs	r3, r3, r4
 8011db2:	9308      	str	r3, [sp, #32]
 8011db4:	f000 80b1 	beq.w	8011f1a <_dtoa_r+0x8ea>
 8011db8:	9a08      	ldr	r2, [sp, #32]
 8011dba:	4641      	mov	r1, r8
 8011dbc:	4648      	mov	r0, r9
 8011dbe:	f000 fd03 	bl	80127c8 <__pow5mult>
 8011dc2:	9002      	str	r0, [sp, #8]
 8011dc4:	2101      	movs	r1, #1
 8011dc6:	4648      	mov	r0, r9
 8011dc8:	f000 fc44 	bl	8012654 <__i2b>
 8011dcc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011dce:	4604      	mov	r4, r0
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	f000 81d9 	beq.w	8012188 <_dtoa_r+0xb58>
 8011dd6:	461a      	mov	r2, r3
 8011dd8:	4601      	mov	r1, r0
 8011dda:	4648      	mov	r0, r9
 8011ddc:	f000 fcf4 	bl	80127c8 <__pow5mult>
 8011de0:	9b07      	ldr	r3, [sp, #28]
 8011de2:	4604      	mov	r4, r0
 8011de4:	2b01      	cmp	r3, #1
 8011de6:	f300 809f 	bgt.w	8011f28 <_dtoa_r+0x8f8>
 8011dea:	9b04      	ldr	r3, [sp, #16]
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	f040 8097 	bne.w	8011f20 <_dtoa_r+0x8f0>
 8011df2:	9b05      	ldr	r3, [sp, #20]
 8011df4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	f040 8093 	bne.w	8011f24 <_dtoa_r+0x8f4>
 8011dfe:	9b05      	ldr	r3, [sp, #20]
 8011e00:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011e04:	0d1b      	lsrs	r3, r3, #20
 8011e06:	051b      	lsls	r3, r3, #20
 8011e08:	b133      	cbz	r3, 8011e18 <_dtoa_r+0x7e8>
 8011e0a:	9b00      	ldr	r3, [sp, #0]
 8011e0c:	3301      	adds	r3, #1
 8011e0e:	9300      	str	r3, [sp, #0]
 8011e10:	9b06      	ldr	r3, [sp, #24]
 8011e12:	3301      	adds	r3, #1
 8011e14:	9306      	str	r3, [sp, #24]
 8011e16:	2301      	movs	r3, #1
 8011e18:	9308      	str	r3, [sp, #32]
 8011e1a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	f000 81b9 	beq.w	8012194 <_dtoa_r+0xb64>
 8011e22:	6923      	ldr	r3, [r4, #16]
 8011e24:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011e28:	6918      	ldr	r0, [r3, #16]
 8011e2a:	f000 fbc7 	bl	80125bc <__hi0bits>
 8011e2e:	f1c0 0020 	rsb	r0, r0, #32
 8011e32:	9b06      	ldr	r3, [sp, #24]
 8011e34:	4418      	add	r0, r3
 8011e36:	f010 001f 	ands.w	r0, r0, #31
 8011e3a:	f000 8082 	beq.w	8011f42 <_dtoa_r+0x912>
 8011e3e:	f1c0 0320 	rsb	r3, r0, #32
 8011e42:	2b04      	cmp	r3, #4
 8011e44:	dd73      	ble.n	8011f2e <_dtoa_r+0x8fe>
 8011e46:	f1c0 001c 	rsb	r0, r0, #28
 8011e4a:	9b00      	ldr	r3, [sp, #0]
 8011e4c:	4403      	add	r3, r0
 8011e4e:	4406      	add	r6, r0
 8011e50:	9300      	str	r3, [sp, #0]
 8011e52:	9b06      	ldr	r3, [sp, #24]
 8011e54:	4403      	add	r3, r0
 8011e56:	9306      	str	r3, [sp, #24]
 8011e58:	9b00      	ldr	r3, [sp, #0]
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	dd05      	ble.n	8011e6a <_dtoa_r+0x83a>
 8011e5e:	461a      	mov	r2, r3
 8011e60:	9902      	ldr	r1, [sp, #8]
 8011e62:	4648      	mov	r0, r9
 8011e64:	f000 fd0a 	bl	801287c <__lshift>
 8011e68:	9002      	str	r0, [sp, #8]
 8011e6a:	9b06      	ldr	r3, [sp, #24]
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	dd05      	ble.n	8011e7c <_dtoa_r+0x84c>
 8011e70:	4621      	mov	r1, r4
 8011e72:	461a      	mov	r2, r3
 8011e74:	4648      	mov	r0, r9
 8011e76:	f000 fd01 	bl	801287c <__lshift>
 8011e7a:	4604      	mov	r4, r0
 8011e7c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d061      	beq.n	8011f46 <_dtoa_r+0x916>
 8011e82:	4621      	mov	r1, r4
 8011e84:	9802      	ldr	r0, [sp, #8]
 8011e86:	f000 fd65 	bl	8012954 <__mcmp>
 8011e8a:	2800      	cmp	r0, #0
 8011e8c:	da5b      	bge.n	8011f46 <_dtoa_r+0x916>
 8011e8e:	2300      	movs	r3, #0
 8011e90:	220a      	movs	r2, #10
 8011e92:	9902      	ldr	r1, [sp, #8]
 8011e94:	4648      	mov	r0, r9
 8011e96:	f000 faff 	bl	8012498 <__multadd>
 8011e9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011e9c:	f107 38ff 	add.w	r8, r7, #4294967295
 8011ea0:	9002      	str	r0, [sp, #8]
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	f000 8178 	beq.w	8012198 <_dtoa_r+0xb68>
 8011ea8:	4629      	mov	r1, r5
 8011eaa:	2300      	movs	r3, #0
 8011eac:	220a      	movs	r2, #10
 8011eae:	4648      	mov	r0, r9
 8011eb0:	f000 faf2 	bl	8012498 <__multadd>
 8011eb4:	f1bb 0f00 	cmp.w	fp, #0
 8011eb8:	4605      	mov	r5, r0
 8011eba:	dc6f      	bgt.n	8011f9c <_dtoa_r+0x96c>
 8011ebc:	9b07      	ldr	r3, [sp, #28]
 8011ebe:	2b02      	cmp	r3, #2
 8011ec0:	dc49      	bgt.n	8011f56 <_dtoa_r+0x926>
 8011ec2:	e06b      	b.n	8011f9c <_dtoa_r+0x96c>
 8011ec4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8011ec6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8011eca:	e73c      	b.n	8011d46 <_dtoa_r+0x716>
 8011ecc:	3fe00000 	.word	0x3fe00000
 8011ed0:	40240000 	.word	0x40240000
 8011ed4:	9b03      	ldr	r3, [sp, #12]
 8011ed6:	1e5c      	subs	r4, r3, #1
 8011ed8:	9b08      	ldr	r3, [sp, #32]
 8011eda:	42a3      	cmp	r3, r4
 8011edc:	db09      	blt.n	8011ef2 <_dtoa_r+0x8c2>
 8011ede:	1b1c      	subs	r4, r3, r4
 8011ee0:	9b03      	ldr	r3, [sp, #12]
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	f6bf af30 	bge.w	8011d48 <_dtoa_r+0x718>
 8011ee8:	9b00      	ldr	r3, [sp, #0]
 8011eea:	9a03      	ldr	r2, [sp, #12]
 8011eec:	1a9e      	subs	r6, r3, r2
 8011eee:	2300      	movs	r3, #0
 8011ef0:	e72b      	b.n	8011d4a <_dtoa_r+0x71a>
 8011ef2:	9b08      	ldr	r3, [sp, #32]
 8011ef4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011ef6:	1ae3      	subs	r3, r4, r3
 8011ef8:	9408      	str	r4, [sp, #32]
 8011efa:	9e00      	ldr	r6, [sp, #0]
 8011efc:	2400      	movs	r4, #0
 8011efe:	441a      	add	r2, r3
 8011f00:	9b03      	ldr	r3, [sp, #12]
 8011f02:	920d      	str	r2, [sp, #52]	@ 0x34
 8011f04:	e721      	b.n	8011d4a <_dtoa_r+0x71a>
 8011f06:	9c08      	ldr	r4, [sp, #32]
 8011f08:	9e00      	ldr	r6, [sp, #0]
 8011f0a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8011f0c:	e728      	b.n	8011d60 <_dtoa_r+0x730>
 8011f0e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8011f12:	e751      	b.n	8011db8 <_dtoa_r+0x788>
 8011f14:	9a08      	ldr	r2, [sp, #32]
 8011f16:	9902      	ldr	r1, [sp, #8]
 8011f18:	e750      	b.n	8011dbc <_dtoa_r+0x78c>
 8011f1a:	f8cd 8008 	str.w	r8, [sp, #8]
 8011f1e:	e751      	b.n	8011dc4 <_dtoa_r+0x794>
 8011f20:	2300      	movs	r3, #0
 8011f22:	e779      	b.n	8011e18 <_dtoa_r+0x7e8>
 8011f24:	9b04      	ldr	r3, [sp, #16]
 8011f26:	e777      	b.n	8011e18 <_dtoa_r+0x7e8>
 8011f28:	2300      	movs	r3, #0
 8011f2a:	9308      	str	r3, [sp, #32]
 8011f2c:	e779      	b.n	8011e22 <_dtoa_r+0x7f2>
 8011f2e:	d093      	beq.n	8011e58 <_dtoa_r+0x828>
 8011f30:	331c      	adds	r3, #28
 8011f32:	9a00      	ldr	r2, [sp, #0]
 8011f34:	441a      	add	r2, r3
 8011f36:	441e      	add	r6, r3
 8011f38:	9200      	str	r2, [sp, #0]
 8011f3a:	9a06      	ldr	r2, [sp, #24]
 8011f3c:	441a      	add	r2, r3
 8011f3e:	9206      	str	r2, [sp, #24]
 8011f40:	e78a      	b.n	8011e58 <_dtoa_r+0x828>
 8011f42:	4603      	mov	r3, r0
 8011f44:	e7f4      	b.n	8011f30 <_dtoa_r+0x900>
 8011f46:	9b03      	ldr	r3, [sp, #12]
 8011f48:	46b8      	mov	r8, r7
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	dc20      	bgt.n	8011f90 <_dtoa_r+0x960>
 8011f4e:	469b      	mov	fp, r3
 8011f50:	9b07      	ldr	r3, [sp, #28]
 8011f52:	2b02      	cmp	r3, #2
 8011f54:	dd1e      	ble.n	8011f94 <_dtoa_r+0x964>
 8011f56:	f1bb 0f00 	cmp.w	fp, #0
 8011f5a:	f47f adb1 	bne.w	8011ac0 <_dtoa_r+0x490>
 8011f5e:	4621      	mov	r1, r4
 8011f60:	465b      	mov	r3, fp
 8011f62:	2205      	movs	r2, #5
 8011f64:	4648      	mov	r0, r9
 8011f66:	f000 fa97 	bl	8012498 <__multadd>
 8011f6a:	4601      	mov	r1, r0
 8011f6c:	4604      	mov	r4, r0
 8011f6e:	9802      	ldr	r0, [sp, #8]
 8011f70:	f000 fcf0 	bl	8012954 <__mcmp>
 8011f74:	2800      	cmp	r0, #0
 8011f76:	f77f ada3 	ble.w	8011ac0 <_dtoa_r+0x490>
 8011f7a:	4656      	mov	r6, sl
 8011f7c:	2331      	movs	r3, #49	@ 0x31
 8011f7e:	f108 0801 	add.w	r8, r8, #1
 8011f82:	f806 3b01 	strb.w	r3, [r6], #1
 8011f86:	e59f      	b.n	8011ac8 <_dtoa_r+0x498>
 8011f88:	46b8      	mov	r8, r7
 8011f8a:	9c03      	ldr	r4, [sp, #12]
 8011f8c:	4625      	mov	r5, r4
 8011f8e:	e7f4      	b.n	8011f7a <_dtoa_r+0x94a>
 8011f90:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8011f94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	f000 8102 	beq.w	80121a0 <_dtoa_r+0xb70>
 8011f9c:	2e00      	cmp	r6, #0
 8011f9e:	dd05      	ble.n	8011fac <_dtoa_r+0x97c>
 8011fa0:	4629      	mov	r1, r5
 8011fa2:	4632      	mov	r2, r6
 8011fa4:	4648      	mov	r0, r9
 8011fa6:	f000 fc69 	bl	801287c <__lshift>
 8011faa:	4605      	mov	r5, r0
 8011fac:	9b08      	ldr	r3, [sp, #32]
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d05c      	beq.n	801206c <_dtoa_r+0xa3c>
 8011fb2:	6869      	ldr	r1, [r5, #4]
 8011fb4:	4648      	mov	r0, r9
 8011fb6:	f000 fa0d 	bl	80123d4 <_Balloc>
 8011fba:	4606      	mov	r6, r0
 8011fbc:	b928      	cbnz	r0, 8011fca <_dtoa_r+0x99a>
 8011fbe:	4b83      	ldr	r3, [pc, #524]	@ (80121cc <_dtoa_r+0xb9c>)
 8011fc0:	4602      	mov	r2, r0
 8011fc2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8011fc6:	f7ff bb4a 	b.w	801165e <_dtoa_r+0x2e>
 8011fca:	692a      	ldr	r2, [r5, #16]
 8011fcc:	f105 010c 	add.w	r1, r5, #12
 8011fd0:	300c      	adds	r0, #12
 8011fd2:	3202      	adds	r2, #2
 8011fd4:	0092      	lsls	r2, r2, #2
 8011fd6:	f7ff fa89 	bl	80114ec <memcpy>
 8011fda:	2201      	movs	r2, #1
 8011fdc:	4631      	mov	r1, r6
 8011fde:	4648      	mov	r0, r9
 8011fe0:	f000 fc4c 	bl	801287c <__lshift>
 8011fe4:	f10a 0301 	add.w	r3, sl, #1
 8011fe8:	462f      	mov	r7, r5
 8011fea:	4605      	mov	r5, r0
 8011fec:	9300      	str	r3, [sp, #0]
 8011fee:	eb0a 030b 	add.w	r3, sl, fp
 8011ff2:	9308      	str	r3, [sp, #32]
 8011ff4:	9b04      	ldr	r3, [sp, #16]
 8011ff6:	f003 0301 	and.w	r3, r3, #1
 8011ffa:	9306      	str	r3, [sp, #24]
 8011ffc:	9b00      	ldr	r3, [sp, #0]
 8011ffe:	4621      	mov	r1, r4
 8012000:	9802      	ldr	r0, [sp, #8]
 8012002:	f103 3bff 	add.w	fp, r3, #4294967295
 8012006:	f7ff fa85 	bl	8011514 <quorem>
 801200a:	4603      	mov	r3, r0
 801200c:	4639      	mov	r1, r7
 801200e:	9003      	str	r0, [sp, #12]
 8012010:	3330      	adds	r3, #48	@ 0x30
 8012012:	9802      	ldr	r0, [sp, #8]
 8012014:	9309      	str	r3, [sp, #36]	@ 0x24
 8012016:	f000 fc9d 	bl	8012954 <__mcmp>
 801201a:	462a      	mov	r2, r5
 801201c:	9004      	str	r0, [sp, #16]
 801201e:	4621      	mov	r1, r4
 8012020:	4648      	mov	r0, r9
 8012022:	f000 fcb3 	bl	801298c <__mdiff>
 8012026:	68c2      	ldr	r2, [r0, #12]
 8012028:	4606      	mov	r6, r0
 801202a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801202c:	bb02      	cbnz	r2, 8012070 <_dtoa_r+0xa40>
 801202e:	4601      	mov	r1, r0
 8012030:	9802      	ldr	r0, [sp, #8]
 8012032:	f000 fc8f 	bl	8012954 <__mcmp>
 8012036:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012038:	4602      	mov	r2, r0
 801203a:	4631      	mov	r1, r6
 801203c:	4648      	mov	r0, r9
 801203e:	920c      	str	r2, [sp, #48]	@ 0x30
 8012040:	9309      	str	r3, [sp, #36]	@ 0x24
 8012042:	f000 fa07 	bl	8012454 <_Bfree>
 8012046:	9b07      	ldr	r3, [sp, #28]
 8012048:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801204a:	9e00      	ldr	r6, [sp, #0]
 801204c:	ea42 0103 	orr.w	r1, r2, r3
 8012050:	9b06      	ldr	r3, [sp, #24]
 8012052:	4319      	orrs	r1, r3
 8012054:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012056:	d10d      	bne.n	8012074 <_dtoa_r+0xa44>
 8012058:	2b39      	cmp	r3, #57	@ 0x39
 801205a:	d027      	beq.n	80120ac <_dtoa_r+0xa7c>
 801205c:	9a04      	ldr	r2, [sp, #16]
 801205e:	2a00      	cmp	r2, #0
 8012060:	dd01      	ble.n	8012066 <_dtoa_r+0xa36>
 8012062:	9b03      	ldr	r3, [sp, #12]
 8012064:	3331      	adds	r3, #49	@ 0x31
 8012066:	f88b 3000 	strb.w	r3, [fp]
 801206a:	e52e      	b.n	8011aca <_dtoa_r+0x49a>
 801206c:	4628      	mov	r0, r5
 801206e:	e7b9      	b.n	8011fe4 <_dtoa_r+0x9b4>
 8012070:	2201      	movs	r2, #1
 8012072:	e7e2      	b.n	801203a <_dtoa_r+0xa0a>
 8012074:	9904      	ldr	r1, [sp, #16]
 8012076:	2900      	cmp	r1, #0
 8012078:	db04      	blt.n	8012084 <_dtoa_r+0xa54>
 801207a:	9807      	ldr	r0, [sp, #28]
 801207c:	4301      	orrs	r1, r0
 801207e:	9806      	ldr	r0, [sp, #24]
 8012080:	4301      	orrs	r1, r0
 8012082:	d120      	bne.n	80120c6 <_dtoa_r+0xa96>
 8012084:	2a00      	cmp	r2, #0
 8012086:	ddee      	ble.n	8012066 <_dtoa_r+0xa36>
 8012088:	2201      	movs	r2, #1
 801208a:	9902      	ldr	r1, [sp, #8]
 801208c:	4648      	mov	r0, r9
 801208e:	9300      	str	r3, [sp, #0]
 8012090:	f000 fbf4 	bl	801287c <__lshift>
 8012094:	4621      	mov	r1, r4
 8012096:	9002      	str	r0, [sp, #8]
 8012098:	f000 fc5c 	bl	8012954 <__mcmp>
 801209c:	2800      	cmp	r0, #0
 801209e:	9b00      	ldr	r3, [sp, #0]
 80120a0:	dc02      	bgt.n	80120a8 <_dtoa_r+0xa78>
 80120a2:	d1e0      	bne.n	8012066 <_dtoa_r+0xa36>
 80120a4:	07da      	lsls	r2, r3, #31
 80120a6:	d5de      	bpl.n	8012066 <_dtoa_r+0xa36>
 80120a8:	2b39      	cmp	r3, #57	@ 0x39
 80120aa:	d1da      	bne.n	8012062 <_dtoa_r+0xa32>
 80120ac:	2339      	movs	r3, #57	@ 0x39
 80120ae:	f88b 3000 	strb.w	r3, [fp]
 80120b2:	4633      	mov	r3, r6
 80120b4:	461e      	mov	r6, r3
 80120b6:	3b01      	subs	r3, #1
 80120b8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80120bc:	2a39      	cmp	r2, #57	@ 0x39
 80120be:	d04f      	beq.n	8012160 <_dtoa_r+0xb30>
 80120c0:	3201      	adds	r2, #1
 80120c2:	701a      	strb	r2, [r3, #0]
 80120c4:	e501      	b.n	8011aca <_dtoa_r+0x49a>
 80120c6:	2a00      	cmp	r2, #0
 80120c8:	dd03      	ble.n	80120d2 <_dtoa_r+0xaa2>
 80120ca:	2b39      	cmp	r3, #57	@ 0x39
 80120cc:	d0ee      	beq.n	80120ac <_dtoa_r+0xa7c>
 80120ce:	3301      	adds	r3, #1
 80120d0:	e7c9      	b.n	8012066 <_dtoa_r+0xa36>
 80120d2:	9a00      	ldr	r2, [sp, #0]
 80120d4:	9908      	ldr	r1, [sp, #32]
 80120d6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80120da:	428a      	cmp	r2, r1
 80120dc:	d029      	beq.n	8012132 <_dtoa_r+0xb02>
 80120de:	2300      	movs	r3, #0
 80120e0:	220a      	movs	r2, #10
 80120e2:	9902      	ldr	r1, [sp, #8]
 80120e4:	4648      	mov	r0, r9
 80120e6:	f000 f9d7 	bl	8012498 <__multadd>
 80120ea:	42af      	cmp	r7, r5
 80120ec:	9002      	str	r0, [sp, #8]
 80120ee:	f04f 0300 	mov.w	r3, #0
 80120f2:	f04f 020a 	mov.w	r2, #10
 80120f6:	4639      	mov	r1, r7
 80120f8:	4648      	mov	r0, r9
 80120fa:	d107      	bne.n	801210c <_dtoa_r+0xadc>
 80120fc:	f000 f9cc 	bl	8012498 <__multadd>
 8012100:	4607      	mov	r7, r0
 8012102:	4605      	mov	r5, r0
 8012104:	9b00      	ldr	r3, [sp, #0]
 8012106:	3301      	adds	r3, #1
 8012108:	9300      	str	r3, [sp, #0]
 801210a:	e777      	b.n	8011ffc <_dtoa_r+0x9cc>
 801210c:	f000 f9c4 	bl	8012498 <__multadd>
 8012110:	4629      	mov	r1, r5
 8012112:	4607      	mov	r7, r0
 8012114:	2300      	movs	r3, #0
 8012116:	220a      	movs	r2, #10
 8012118:	4648      	mov	r0, r9
 801211a:	f000 f9bd 	bl	8012498 <__multadd>
 801211e:	4605      	mov	r5, r0
 8012120:	e7f0      	b.n	8012104 <_dtoa_r+0xad4>
 8012122:	f1bb 0f00 	cmp.w	fp, #0
 8012126:	f04f 0700 	mov.w	r7, #0
 801212a:	bfcc      	ite	gt
 801212c:	465e      	movgt	r6, fp
 801212e:	2601      	movle	r6, #1
 8012130:	4456      	add	r6, sl
 8012132:	2201      	movs	r2, #1
 8012134:	9902      	ldr	r1, [sp, #8]
 8012136:	4648      	mov	r0, r9
 8012138:	9300      	str	r3, [sp, #0]
 801213a:	f000 fb9f 	bl	801287c <__lshift>
 801213e:	4621      	mov	r1, r4
 8012140:	9002      	str	r0, [sp, #8]
 8012142:	f000 fc07 	bl	8012954 <__mcmp>
 8012146:	2800      	cmp	r0, #0
 8012148:	dcb3      	bgt.n	80120b2 <_dtoa_r+0xa82>
 801214a:	d102      	bne.n	8012152 <_dtoa_r+0xb22>
 801214c:	9b00      	ldr	r3, [sp, #0]
 801214e:	07db      	lsls	r3, r3, #31
 8012150:	d4af      	bmi.n	80120b2 <_dtoa_r+0xa82>
 8012152:	4633      	mov	r3, r6
 8012154:	461e      	mov	r6, r3
 8012156:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801215a:	2a30      	cmp	r2, #48	@ 0x30
 801215c:	d0fa      	beq.n	8012154 <_dtoa_r+0xb24>
 801215e:	e4b4      	b.n	8011aca <_dtoa_r+0x49a>
 8012160:	459a      	cmp	sl, r3
 8012162:	d1a7      	bne.n	80120b4 <_dtoa_r+0xa84>
 8012164:	2331      	movs	r3, #49	@ 0x31
 8012166:	f108 0801 	add.w	r8, r8, #1
 801216a:	f88a 3000 	strb.w	r3, [sl]
 801216e:	e4ac      	b.n	8011aca <_dtoa_r+0x49a>
 8012170:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8012172:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80121d0 <_dtoa_r+0xba0>
 8012176:	b11b      	cbz	r3, 8012180 <_dtoa_r+0xb50>
 8012178:	f10a 0308 	add.w	r3, sl, #8
 801217c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801217e:	6013      	str	r3, [r2, #0]
 8012180:	4650      	mov	r0, sl
 8012182:	b017      	add	sp, #92	@ 0x5c
 8012184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012188:	9b07      	ldr	r3, [sp, #28]
 801218a:	2b01      	cmp	r3, #1
 801218c:	f77f ae2d 	ble.w	8011dea <_dtoa_r+0x7ba>
 8012190:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012192:	9308      	str	r3, [sp, #32]
 8012194:	2001      	movs	r0, #1
 8012196:	e64c      	b.n	8011e32 <_dtoa_r+0x802>
 8012198:	f1bb 0f00 	cmp.w	fp, #0
 801219c:	f77f aed8 	ble.w	8011f50 <_dtoa_r+0x920>
 80121a0:	4656      	mov	r6, sl
 80121a2:	4621      	mov	r1, r4
 80121a4:	9802      	ldr	r0, [sp, #8]
 80121a6:	f7ff f9b5 	bl	8011514 <quorem>
 80121aa:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80121ae:	f806 3b01 	strb.w	r3, [r6], #1
 80121b2:	eba6 020a 	sub.w	r2, r6, sl
 80121b6:	4593      	cmp	fp, r2
 80121b8:	ddb3      	ble.n	8012122 <_dtoa_r+0xaf2>
 80121ba:	2300      	movs	r3, #0
 80121bc:	220a      	movs	r2, #10
 80121be:	9902      	ldr	r1, [sp, #8]
 80121c0:	4648      	mov	r0, r9
 80121c2:	f000 f969 	bl	8012498 <__multadd>
 80121c6:	9002      	str	r0, [sp, #8]
 80121c8:	e7eb      	b.n	80121a2 <_dtoa_r+0xb72>
 80121ca:	bf00      	nop
 80121cc:	080166a5 	.word	0x080166a5
 80121d0:	08016629 	.word	0x08016629

080121d4 <_free_r>:
 80121d4:	b538      	push	{r3, r4, r5, lr}
 80121d6:	4605      	mov	r5, r0
 80121d8:	2900      	cmp	r1, #0
 80121da:	d041      	beq.n	8012260 <_free_r+0x8c>
 80121dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80121e0:	1f0c      	subs	r4, r1, #4
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	bfb8      	it	lt
 80121e6:	18e4      	addlt	r4, r4, r3
 80121e8:	f000 f8e8 	bl	80123bc <__malloc_lock>
 80121ec:	4a1d      	ldr	r2, [pc, #116]	@ (8012264 <_free_r+0x90>)
 80121ee:	6813      	ldr	r3, [r2, #0]
 80121f0:	b933      	cbnz	r3, 8012200 <_free_r+0x2c>
 80121f2:	6063      	str	r3, [r4, #4]
 80121f4:	6014      	str	r4, [r2, #0]
 80121f6:	4628      	mov	r0, r5
 80121f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80121fc:	f000 b8e4 	b.w	80123c8 <__malloc_unlock>
 8012200:	42a3      	cmp	r3, r4
 8012202:	d908      	bls.n	8012216 <_free_r+0x42>
 8012204:	6820      	ldr	r0, [r4, #0]
 8012206:	1821      	adds	r1, r4, r0
 8012208:	428b      	cmp	r3, r1
 801220a:	bf01      	itttt	eq
 801220c:	6819      	ldreq	r1, [r3, #0]
 801220e:	685b      	ldreq	r3, [r3, #4]
 8012210:	1809      	addeq	r1, r1, r0
 8012212:	6021      	streq	r1, [r4, #0]
 8012214:	e7ed      	b.n	80121f2 <_free_r+0x1e>
 8012216:	461a      	mov	r2, r3
 8012218:	685b      	ldr	r3, [r3, #4]
 801221a:	b10b      	cbz	r3, 8012220 <_free_r+0x4c>
 801221c:	42a3      	cmp	r3, r4
 801221e:	d9fa      	bls.n	8012216 <_free_r+0x42>
 8012220:	6811      	ldr	r1, [r2, #0]
 8012222:	1850      	adds	r0, r2, r1
 8012224:	42a0      	cmp	r0, r4
 8012226:	d10b      	bne.n	8012240 <_free_r+0x6c>
 8012228:	6820      	ldr	r0, [r4, #0]
 801222a:	4401      	add	r1, r0
 801222c:	1850      	adds	r0, r2, r1
 801222e:	6011      	str	r1, [r2, #0]
 8012230:	4283      	cmp	r3, r0
 8012232:	d1e0      	bne.n	80121f6 <_free_r+0x22>
 8012234:	6818      	ldr	r0, [r3, #0]
 8012236:	685b      	ldr	r3, [r3, #4]
 8012238:	4408      	add	r0, r1
 801223a:	6053      	str	r3, [r2, #4]
 801223c:	6010      	str	r0, [r2, #0]
 801223e:	e7da      	b.n	80121f6 <_free_r+0x22>
 8012240:	d902      	bls.n	8012248 <_free_r+0x74>
 8012242:	230c      	movs	r3, #12
 8012244:	602b      	str	r3, [r5, #0]
 8012246:	e7d6      	b.n	80121f6 <_free_r+0x22>
 8012248:	6820      	ldr	r0, [r4, #0]
 801224a:	1821      	adds	r1, r4, r0
 801224c:	428b      	cmp	r3, r1
 801224e:	bf02      	ittt	eq
 8012250:	6819      	ldreq	r1, [r3, #0]
 8012252:	685b      	ldreq	r3, [r3, #4]
 8012254:	1809      	addeq	r1, r1, r0
 8012256:	6063      	str	r3, [r4, #4]
 8012258:	bf08      	it	eq
 801225a:	6021      	streq	r1, [r4, #0]
 801225c:	6054      	str	r4, [r2, #4]
 801225e:	e7ca      	b.n	80121f6 <_free_r+0x22>
 8012260:	bd38      	pop	{r3, r4, r5, pc}
 8012262:	bf00      	nop
 8012264:	20000948 	.word	0x20000948

08012268 <malloc>:
 8012268:	4b02      	ldr	r3, [pc, #8]	@ (8012274 <malloc+0xc>)
 801226a:	4601      	mov	r1, r0
 801226c:	6818      	ldr	r0, [r3, #0]
 801226e:	f000 b825 	b.w	80122bc <_malloc_r>
 8012272:	bf00      	nop
 8012274:	20000034 	.word	0x20000034

08012278 <sbrk_aligned>:
 8012278:	b570      	push	{r4, r5, r6, lr}
 801227a:	4e0f      	ldr	r6, [pc, #60]	@ (80122b8 <sbrk_aligned+0x40>)
 801227c:	460c      	mov	r4, r1
 801227e:	4605      	mov	r5, r0
 8012280:	6831      	ldr	r1, [r6, #0]
 8012282:	b911      	cbnz	r1, 801228a <sbrk_aligned+0x12>
 8012284:	f001 ffd8 	bl	8014238 <_sbrk_r>
 8012288:	6030      	str	r0, [r6, #0]
 801228a:	4621      	mov	r1, r4
 801228c:	4628      	mov	r0, r5
 801228e:	f001 ffd3 	bl	8014238 <_sbrk_r>
 8012292:	1c43      	adds	r3, r0, #1
 8012294:	d103      	bne.n	801229e <sbrk_aligned+0x26>
 8012296:	f04f 34ff 	mov.w	r4, #4294967295
 801229a:	4620      	mov	r0, r4
 801229c:	bd70      	pop	{r4, r5, r6, pc}
 801229e:	1cc4      	adds	r4, r0, #3
 80122a0:	f024 0403 	bic.w	r4, r4, #3
 80122a4:	42a0      	cmp	r0, r4
 80122a6:	d0f8      	beq.n	801229a <sbrk_aligned+0x22>
 80122a8:	1a21      	subs	r1, r4, r0
 80122aa:	4628      	mov	r0, r5
 80122ac:	f001 ffc4 	bl	8014238 <_sbrk_r>
 80122b0:	3001      	adds	r0, #1
 80122b2:	d1f2      	bne.n	801229a <sbrk_aligned+0x22>
 80122b4:	e7ef      	b.n	8012296 <sbrk_aligned+0x1e>
 80122b6:	bf00      	nop
 80122b8:	20000944 	.word	0x20000944

080122bc <_malloc_r>:
 80122bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80122c0:	1ccd      	adds	r5, r1, #3
 80122c2:	4606      	mov	r6, r0
 80122c4:	f025 0503 	bic.w	r5, r5, #3
 80122c8:	3508      	adds	r5, #8
 80122ca:	2d0c      	cmp	r5, #12
 80122cc:	bf38      	it	cc
 80122ce:	250c      	movcc	r5, #12
 80122d0:	2d00      	cmp	r5, #0
 80122d2:	db01      	blt.n	80122d8 <_malloc_r+0x1c>
 80122d4:	42a9      	cmp	r1, r5
 80122d6:	d904      	bls.n	80122e2 <_malloc_r+0x26>
 80122d8:	230c      	movs	r3, #12
 80122da:	6033      	str	r3, [r6, #0]
 80122dc:	2000      	movs	r0, #0
 80122de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80122e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80123b8 <_malloc_r+0xfc>
 80122e6:	f000 f869 	bl	80123bc <__malloc_lock>
 80122ea:	f8d8 3000 	ldr.w	r3, [r8]
 80122ee:	461c      	mov	r4, r3
 80122f0:	bb44      	cbnz	r4, 8012344 <_malloc_r+0x88>
 80122f2:	4629      	mov	r1, r5
 80122f4:	4630      	mov	r0, r6
 80122f6:	f7ff ffbf 	bl	8012278 <sbrk_aligned>
 80122fa:	1c43      	adds	r3, r0, #1
 80122fc:	4604      	mov	r4, r0
 80122fe:	d158      	bne.n	80123b2 <_malloc_r+0xf6>
 8012300:	f8d8 4000 	ldr.w	r4, [r8]
 8012304:	4627      	mov	r7, r4
 8012306:	2f00      	cmp	r7, #0
 8012308:	d143      	bne.n	8012392 <_malloc_r+0xd6>
 801230a:	2c00      	cmp	r4, #0
 801230c:	d04b      	beq.n	80123a6 <_malloc_r+0xea>
 801230e:	6823      	ldr	r3, [r4, #0]
 8012310:	4639      	mov	r1, r7
 8012312:	4630      	mov	r0, r6
 8012314:	eb04 0903 	add.w	r9, r4, r3
 8012318:	f001 ff8e 	bl	8014238 <_sbrk_r>
 801231c:	4581      	cmp	r9, r0
 801231e:	d142      	bne.n	80123a6 <_malloc_r+0xea>
 8012320:	6821      	ldr	r1, [r4, #0]
 8012322:	4630      	mov	r0, r6
 8012324:	1a6d      	subs	r5, r5, r1
 8012326:	4629      	mov	r1, r5
 8012328:	f7ff ffa6 	bl	8012278 <sbrk_aligned>
 801232c:	3001      	adds	r0, #1
 801232e:	d03a      	beq.n	80123a6 <_malloc_r+0xea>
 8012330:	6823      	ldr	r3, [r4, #0]
 8012332:	442b      	add	r3, r5
 8012334:	6023      	str	r3, [r4, #0]
 8012336:	f8d8 3000 	ldr.w	r3, [r8]
 801233a:	685a      	ldr	r2, [r3, #4]
 801233c:	bb62      	cbnz	r2, 8012398 <_malloc_r+0xdc>
 801233e:	f8c8 7000 	str.w	r7, [r8]
 8012342:	e00f      	b.n	8012364 <_malloc_r+0xa8>
 8012344:	6822      	ldr	r2, [r4, #0]
 8012346:	1b52      	subs	r2, r2, r5
 8012348:	d420      	bmi.n	801238c <_malloc_r+0xd0>
 801234a:	2a0b      	cmp	r2, #11
 801234c:	d917      	bls.n	801237e <_malloc_r+0xc2>
 801234e:	1961      	adds	r1, r4, r5
 8012350:	42a3      	cmp	r3, r4
 8012352:	6025      	str	r5, [r4, #0]
 8012354:	bf18      	it	ne
 8012356:	6059      	strne	r1, [r3, #4]
 8012358:	6863      	ldr	r3, [r4, #4]
 801235a:	bf08      	it	eq
 801235c:	f8c8 1000 	streq.w	r1, [r8]
 8012360:	5162      	str	r2, [r4, r5]
 8012362:	604b      	str	r3, [r1, #4]
 8012364:	4630      	mov	r0, r6
 8012366:	f000 f82f 	bl	80123c8 <__malloc_unlock>
 801236a:	f104 000b 	add.w	r0, r4, #11
 801236e:	1d23      	adds	r3, r4, #4
 8012370:	f020 0007 	bic.w	r0, r0, #7
 8012374:	1ac2      	subs	r2, r0, r3
 8012376:	bf1c      	itt	ne
 8012378:	1a1b      	subne	r3, r3, r0
 801237a:	50a3      	strne	r3, [r4, r2]
 801237c:	e7af      	b.n	80122de <_malloc_r+0x22>
 801237e:	6862      	ldr	r2, [r4, #4]
 8012380:	42a3      	cmp	r3, r4
 8012382:	bf0c      	ite	eq
 8012384:	f8c8 2000 	streq.w	r2, [r8]
 8012388:	605a      	strne	r2, [r3, #4]
 801238a:	e7eb      	b.n	8012364 <_malloc_r+0xa8>
 801238c:	4623      	mov	r3, r4
 801238e:	6864      	ldr	r4, [r4, #4]
 8012390:	e7ae      	b.n	80122f0 <_malloc_r+0x34>
 8012392:	463c      	mov	r4, r7
 8012394:	687f      	ldr	r7, [r7, #4]
 8012396:	e7b6      	b.n	8012306 <_malloc_r+0x4a>
 8012398:	461a      	mov	r2, r3
 801239a:	685b      	ldr	r3, [r3, #4]
 801239c:	42a3      	cmp	r3, r4
 801239e:	d1fb      	bne.n	8012398 <_malloc_r+0xdc>
 80123a0:	2300      	movs	r3, #0
 80123a2:	6053      	str	r3, [r2, #4]
 80123a4:	e7de      	b.n	8012364 <_malloc_r+0xa8>
 80123a6:	230c      	movs	r3, #12
 80123a8:	4630      	mov	r0, r6
 80123aa:	6033      	str	r3, [r6, #0]
 80123ac:	f000 f80c 	bl	80123c8 <__malloc_unlock>
 80123b0:	e794      	b.n	80122dc <_malloc_r+0x20>
 80123b2:	6005      	str	r5, [r0, #0]
 80123b4:	e7d6      	b.n	8012364 <_malloc_r+0xa8>
 80123b6:	bf00      	nop
 80123b8:	20000948 	.word	0x20000948

080123bc <__malloc_lock>:
 80123bc:	4801      	ldr	r0, [pc, #4]	@ (80123c4 <__malloc_lock+0x8>)
 80123be:	f7ff b880 	b.w	80114c2 <__retarget_lock_acquire_recursive>
 80123c2:	bf00      	nop
 80123c4:	20000940 	.word	0x20000940

080123c8 <__malloc_unlock>:
 80123c8:	4801      	ldr	r0, [pc, #4]	@ (80123d0 <__malloc_unlock+0x8>)
 80123ca:	f7ff b87b 	b.w	80114c4 <__retarget_lock_release_recursive>
 80123ce:	bf00      	nop
 80123d0:	20000940 	.word	0x20000940

080123d4 <_Balloc>:
 80123d4:	b570      	push	{r4, r5, r6, lr}
 80123d6:	69c6      	ldr	r6, [r0, #28]
 80123d8:	4604      	mov	r4, r0
 80123da:	460d      	mov	r5, r1
 80123dc:	b976      	cbnz	r6, 80123fc <_Balloc+0x28>
 80123de:	2010      	movs	r0, #16
 80123e0:	f7ff ff42 	bl	8012268 <malloc>
 80123e4:	4602      	mov	r2, r0
 80123e6:	61e0      	str	r0, [r4, #28]
 80123e8:	b920      	cbnz	r0, 80123f4 <_Balloc+0x20>
 80123ea:	4b18      	ldr	r3, [pc, #96]	@ (801244c <_Balloc+0x78>)
 80123ec:	216b      	movs	r1, #107	@ 0x6b
 80123ee:	4818      	ldr	r0, [pc, #96]	@ (8012450 <_Balloc+0x7c>)
 80123f0:	f001 ff3a 	bl	8014268 <__assert_func>
 80123f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80123f8:	6006      	str	r6, [r0, #0]
 80123fa:	60c6      	str	r6, [r0, #12]
 80123fc:	69e6      	ldr	r6, [r4, #28]
 80123fe:	68f3      	ldr	r3, [r6, #12]
 8012400:	b183      	cbz	r3, 8012424 <_Balloc+0x50>
 8012402:	69e3      	ldr	r3, [r4, #28]
 8012404:	68db      	ldr	r3, [r3, #12]
 8012406:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801240a:	b9b8      	cbnz	r0, 801243c <_Balloc+0x68>
 801240c:	2101      	movs	r1, #1
 801240e:	4620      	mov	r0, r4
 8012410:	fa01 f605 	lsl.w	r6, r1, r5
 8012414:	1d72      	adds	r2, r6, #5
 8012416:	0092      	lsls	r2, r2, #2
 8012418:	f001 ff44 	bl	80142a4 <_calloc_r>
 801241c:	b160      	cbz	r0, 8012438 <_Balloc+0x64>
 801241e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012422:	e00e      	b.n	8012442 <_Balloc+0x6e>
 8012424:	2221      	movs	r2, #33	@ 0x21
 8012426:	2104      	movs	r1, #4
 8012428:	4620      	mov	r0, r4
 801242a:	f001 ff3b 	bl	80142a4 <_calloc_r>
 801242e:	69e3      	ldr	r3, [r4, #28]
 8012430:	60f0      	str	r0, [r6, #12]
 8012432:	68db      	ldr	r3, [r3, #12]
 8012434:	2b00      	cmp	r3, #0
 8012436:	d1e4      	bne.n	8012402 <_Balloc+0x2e>
 8012438:	2000      	movs	r0, #0
 801243a:	bd70      	pop	{r4, r5, r6, pc}
 801243c:	6802      	ldr	r2, [r0, #0]
 801243e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012442:	2300      	movs	r3, #0
 8012444:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012448:	e7f7      	b.n	801243a <_Balloc+0x66>
 801244a:	bf00      	nop
 801244c:	08016636 	.word	0x08016636
 8012450:	080166b6 	.word	0x080166b6

08012454 <_Bfree>:
 8012454:	b570      	push	{r4, r5, r6, lr}
 8012456:	69c6      	ldr	r6, [r0, #28]
 8012458:	4605      	mov	r5, r0
 801245a:	460c      	mov	r4, r1
 801245c:	b976      	cbnz	r6, 801247c <_Bfree+0x28>
 801245e:	2010      	movs	r0, #16
 8012460:	f7ff ff02 	bl	8012268 <malloc>
 8012464:	4602      	mov	r2, r0
 8012466:	61e8      	str	r0, [r5, #28]
 8012468:	b920      	cbnz	r0, 8012474 <_Bfree+0x20>
 801246a:	4b09      	ldr	r3, [pc, #36]	@ (8012490 <_Bfree+0x3c>)
 801246c:	218f      	movs	r1, #143	@ 0x8f
 801246e:	4809      	ldr	r0, [pc, #36]	@ (8012494 <_Bfree+0x40>)
 8012470:	f001 fefa 	bl	8014268 <__assert_func>
 8012474:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012478:	6006      	str	r6, [r0, #0]
 801247a:	60c6      	str	r6, [r0, #12]
 801247c:	b13c      	cbz	r4, 801248e <_Bfree+0x3a>
 801247e:	69eb      	ldr	r3, [r5, #28]
 8012480:	6862      	ldr	r2, [r4, #4]
 8012482:	68db      	ldr	r3, [r3, #12]
 8012484:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012488:	6021      	str	r1, [r4, #0]
 801248a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801248e:	bd70      	pop	{r4, r5, r6, pc}
 8012490:	08016636 	.word	0x08016636
 8012494:	080166b6 	.word	0x080166b6

08012498 <__multadd>:
 8012498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801249c:	f101 0c14 	add.w	ip, r1, #20
 80124a0:	4607      	mov	r7, r0
 80124a2:	460c      	mov	r4, r1
 80124a4:	461e      	mov	r6, r3
 80124a6:	690d      	ldr	r5, [r1, #16]
 80124a8:	2000      	movs	r0, #0
 80124aa:	f8dc 3000 	ldr.w	r3, [ip]
 80124ae:	3001      	adds	r0, #1
 80124b0:	b299      	uxth	r1, r3
 80124b2:	4285      	cmp	r5, r0
 80124b4:	fb02 6101 	mla	r1, r2, r1, r6
 80124b8:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80124bc:	ea4f 4311 	mov.w	r3, r1, lsr #16
 80124c0:	b289      	uxth	r1, r1
 80124c2:	fb02 3306 	mla	r3, r2, r6, r3
 80124c6:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80124ca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80124ce:	f84c 1b04 	str.w	r1, [ip], #4
 80124d2:	dcea      	bgt.n	80124aa <__multadd+0x12>
 80124d4:	b30e      	cbz	r6, 801251a <__multadd+0x82>
 80124d6:	68a3      	ldr	r3, [r4, #8]
 80124d8:	42ab      	cmp	r3, r5
 80124da:	dc19      	bgt.n	8012510 <__multadd+0x78>
 80124dc:	6861      	ldr	r1, [r4, #4]
 80124de:	4638      	mov	r0, r7
 80124e0:	3101      	adds	r1, #1
 80124e2:	f7ff ff77 	bl	80123d4 <_Balloc>
 80124e6:	4680      	mov	r8, r0
 80124e8:	b928      	cbnz	r0, 80124f6 <__multadd+0x5e>
 80124ea:	4602      	mov	r2, r0
 80124ec:	4b0c      	ldr	r3, [pc, #48]	@ (8012520 <__multadd+0x88>)
 80124ee:	21ba      	movs	r1, #186	@ 0xba
 80124f0:	480c      	ldr	r0, [pc, #48]	@ (8012524 <__multadd+0x8c>)
 80124f2:	f001 feb9 	bl	8014268 <__assert_func>
 80124f6:	6922      	ldr	r2, [r4, #16]
 80124f8:	f104 010c 	add.w	r1, r4, #12
 80124fc:	300c      	adds	r0, #12
 80124fe:	3202      	adds	r2, #2
 8012500:	0092      	lsls	r2, r2, #2
 8012502:	f7fe fff3 	bl	80114ec <memcpy>
 8012506:	4621      	mov	r1, r4
 8012508:	4644      	mov	r4, r8
 801250a:	4638      	mov	r0, r7
 801250c:	f7ff ffa2 	bl	8012454 <_Bfree>
 8012510:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012514:	3501      	adds	r5, #1
 8012516:	615e      	str	r6, [r3, #20]
 8012518:	6125      	str	r5, [r4, #16]
 801251a:	4620      	mov	r0, r4
 801251c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012520:	080166a5 	.word	0x080166a5
 8012524:	080166b6 	.word	0x080166b6

08012528 <__s2b>:
 8012528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801252c:	4615      	mov	r5, r2
 801252e:	461f      	mov	r7, r3
 8012530:	2209      	movs	r2, #9
 8012532:	3308      	adds	r3, #8
 8012534:	460c      	mov	r4, r1
 8012536:	4606      	mov	r6, r0
 8012538:	2100      	movs	r1, #0
 801253a:	fb93 f3f2 	sdiv	r3, r3, r2
 801253e:	2201      	movs	r2, #1
 8012540:	429a      	cmp	r2, r3
 8012542:	db09      	blt.n	8012558 <__s2b+0x30>
 8012544:	4630      	mov	r0, r6
 8012546:	f7ff ff45 	bl	80123d4 <_Balloc>
 801254a:	b940      	cbnz	r0, 801255e <__s2b+0x36>
 801254c:	4602      	mov	r2, r0
 801254e:	4b19      	ldr	r3, [pc, #100]	@ (80125b4 <__s2b+0x8c>)
 8012550:	21d3      	movs	r1, #211	@ 0xd3
 8012552:	4819      	ldr	r0, [pc, #100]	@ (80125b8 <__s2b+0x90>)
 8012554:	f001 fe88 	bl	8014268 <__assert_func>
 8012558:	0052      	lsls	r2, r2, #1
 801255a:	3101      	adds	r1, #1
 801255c:	e7f0      	b.n	8012540 <__s2b+0x18>
 801255e:	9b08      	ldr	r3, [sp, #32]
 8012560:	2d09      	cmp	r5, #9
 8012562:	6143      	str	r3, [r0, #20]
 8012564:	f04f 0301 	mov.w	r3, #1
 8012568:	6103      	str	r3, [r0, #16]
 801256a:	dd16      	ble.n	801259a <__s2b+0x72>
 801256c:	f104 0909 	add.w	r9, r4, #9
 8012570:	442c      	add	r4, r5
 8012572:	46c8      	mov	r8, r9
 8012574:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012578:	4601      	mov	r1, r0
 801257a:	220a      	movs	r2, #10
 801257c:	4630      	mov	r0, r6
 801257e:	3b30      	subs	r3, #48	@ 0x30
 8012580:	f7ff ff8a 	bl	8012498 <__multadd>
 8012584:	45a0      	cmp	r8, r4
 8012586:	d1f5      	bne.n	8012574 <__s2b+0x4c>
 8012588:	f1a5 0408 	sub.w	r4, r5, #8
 801258c:	444c      	add	r4, r9
 801258e:	1b2d      	subs	r5, r5, r4
 8012590:	1963      	adds	r3, r4, r5
 8012592:	42bb      	cmp	r3, r7
 8012594:	db04      	blt.n	80125a0 <__s2b+0x78>
 8012596:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801259a:	340a      	adds	r4, #10
 801259c:	2509      	movs	r5, #9
 801259e:	e7f6      	b.n	801258e <__s2b+0x66>
 80125a0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80125a4:	4601      	mov	r1, r0
 80125a6:	220a      	movs	r2, #10
 80125a8:	4630      	mov	r0, r6
 80125aa:	3b30      	subs	r3, #48	@ 0x30
 80125ac:	f7ff ff74 	bl	8012498 <__multadd>
 80125b0:	e7ee      	b.n	8012590 <__s2b+0x68>
 80125b2:	bf00      	nop
 80125b4:	080166a5 	.word	0x080166a5
 80125b8:	080166b6 	.word	0x080166b6

080125bc <__hi0bits>:
 80125bc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80125c0:	4603      	mov	r3, r0
 80125c2:	bf36      	itet	cc
 80125c4:	0403      	lslcc	r3, r0, #16
 80125c6:	2000      	movcs	r0, #0
 80125c8:	2010      	movcc	r0, #16
 80125ca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80125ce:	bf3c      	itt	cc
 80125d0:	021b      	lslcc	r3, r3, #8
 80125d2:	3008      	addcc	r0, #8
 80125d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80125d8:	bf3c      	itt	cc
 80125da:	011b      	lslcc	r3, r3, #4
 80125dc:	3004      	addcc	r0, #4
 80125de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80125e2:	bf3c      	itt	cc
 80125e4:	009b      	lslcc	r3, r3, #2
 80125e6:	3002      	addcc	r0, #2
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	db05      	blt.n	80125f8 <__hi0bits+0x3c>
 80125ec:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80125f0:	f100 0001 	add.w	r0, r0, #1
 80125f4:	bf08      	it	eq
 80125f6:	2020      	moveq	r0, #32
 80125f8:	4770      	bx	lr

080125fa <__lo0bits>:
 80125fa:	6803      	ldr	r3, [r0, #0]
 80125fc:	4602      	mov	r2, r0
 80125fe:	f013 0007 	ands.w	r0, r3, #7
 8012602:	d00b      	beq.n	801261c <__lo0bits+0x22>
 8012604:	07d9      	lsls	r1, r3, #31
 8012606:	d421      	bmi.n	801264c <__lo0bits+0x52>
 8012608:	0798      	lsls	r0, r3, #30
 801260a:	bf47      	ittee	mi
 801260c:	085b      	lsrmi	r3, r3, #1
 801260e:	2001      	movmi	r0, #1
 8012610:	089b      	lsrpl	r3, r3, #2
 8012612:	2002      	movpl	r0, #2
 8012614:	bf4c      	ite	mi
 8012616:	6013      	strmi	r3, [r2, #0]
 8012618:	6013      	strpl	r3, [r2, #0]
 801261a:	4770      	bx	lr
 801261c:	b299      	uxth	r1, r3
 801261e:	b909      	cbnz	r1, 8012624 <__lo0bits+0x2a>
 8012620:	0c1b      	lsrs	r3, r3, #16
 8012622:	2010      	movs	r0, #16
 8012624:	b2d9      	uxtb	r1, r3
 8012626:	b909      	cbnz	r1, 801262c <__lo0bits+0x32>
 8012628:	3008      	adds	r0, #8
 801262a:	0a1b      	lsrs	r3, r3, #8
 801262c:	0719      	lsls	r1, r3, #28
 801262e:	bf04      	itt	eq
 8012630:	091b      	lsreq	r3, r3, #4
 8012632:	3004      	addeq	r0, #4
 8012634:	0799      	lsls	r1, r3, #30
 8012636:	bf04      	itt	eq
 8012638:	089b      	lsreq	r3, r3, #2
 801263a:	3002      	addeq	r0, #2
 801263c:	07d9      	lsls	r1, r3, #31
 801263e:	d403      	bmi.n	8012648 <__lo0bits+0x4e>
 8012640:	085b      	lsrs	r3, r3, #1
 8012642:	f100 0001 	add.w	r0, r0, #1
 8012646:	d003      	beq.n	8012650 <__lo0bits+0x56>
 8012648:	6013      	str	r3, [r2, #0]
 801264a:	4770      	bx	lr
 801264c:	2000      	movs	r0, #0
 801264e:	4770      	bx	lr
 8012650:	2020      	movs	r0, #32
 8012652:	4770      	bx	lr

08012654 <__i2b>:
 8012654:	b510      	push	{r4, lr}
 8012656:	460c      	mov	r4, r1
 8012658:	2101      	movs	r1, #1
 801265a:	f7ff febb 	bl	80123d4 <_Balloc>
 801265e:	4602      	mov	r2, r0
 8012660:	b928      	cbnz	r0, 801266e <__i2b+0x1a>
 8012662:	4b05      	ldr	r3, [pc, #20]	@ (8012678 <__i2b+0x24>)
 8012664:	f240 1145 	movw	r1, #325	@ 0x145
 8012668:	4804      	ldr	r0, [pc, #16]	@ (801267c <__i2b+0x28>)
 801266a:	f001 fdfd 	bl	8014268 <__assert_func>
 801266e:	2301      	movs	r3, #1
 8012670:	6144      	str	r4, [r0, #20]
 8012672:	6103      	str	r3, [r0, #16]
 8012674:	bd10      	pop	{r4, pc}
 8012676:	bf00      	nop
 8012678:	080166a5 	.word	0x080166a5
 801267c:	080166b6 	.word	0x080166b6

08012680 <__multiply>:
 8012680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012684:	4617      	mov	r7, r2
 8012686:	690a      	ldr	r2, [r1, #16]
 8012688:	4689      	mov	r9, r1
 801268a:	b085      	sub	sp, #20
 801268c:	693b      	ldr	r3, [r7, #16]
 801268e:	429a      	cmp	r2, r3
 8012690:	bfa2      	ittt	ge
 8012692:	463b      	movge	r3, r7
 8012694:	460f      	movge	r7, r1
 8012696:	4699      	movge	r9, r3
 8012698:	693d      	ldr	r5, [r7, #16]
 801269a:	68bb      	ldr	r3, [r7, #8]
 801269c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80126a0:	6879      	ldr	r1, [r7, #4]
 80126a2:	eb05 060a 	add.w	r6, r5, sl
 80126a6:	42b3      	cmp	r3, r6
 80126a8:	bfb8      	it	lt
 80126aa:	3101      	addlt	r1, #1
 80126ac:	f7ff fe92 	bl	80123d4 <_Balloc>
 80126b0:	b930      	cbnz	r0, 80126c0 <__multiply+0x40>
 80126b2:	4602      	mov	r2, r0
 80126b4:	4b42      	ldr	r3, [pc, #264]	@ (80127c0 <__multiply+0x140>)
 80126b6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80126ba:	4842      	ldr	r0, [pc, #264]	@ (80127c4 <__multiply+0x144>)
 80126bc:	f001 fdd4 	bl	8014268 <__assert_func>
 80126c0:	f100 0414 	add.w	r4, r0, #20
 80126c4:	2200      	movs	r2, #0
 80126c6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80126ca:	4623      	mov	r3, r4
 80126cc:	4573      	cmp	r3, lr
 80126ce:	d320      	bcc.n	8012712 <__multiply+0x92>
 80126d0:	f107 0814 	add.w	r8, r7, #20
 80126d4:	f109 0114 	add.w	r1, r9, #20
 80126d8:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80126dc:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80126e0:	9302      	str	r3, [sp, #8]
 80126e2:	1beb      	subs	r3, r5, r7
 80126e4:	3715      	adds	r7, #21
 80126e6:	3b15      	subs	r3, #21
 80126e8:	f023 0303 	bic.w	r3, r3, #3
 80126ec:	3304      	adds	r3, #4
 80126ee:	42bd      	cmp	r5, r7
 80126f0:	bf38      	it	cc
 80126f2:	2304      	movcc	r3, #4
 80126f4:	9301      	str	r3, [sp, #4]
 80126f6:	9b02      	ldr	r3, [sp, #8]
 80126f8:	9103      	str	r1, [sp, #12]
 80126fa:	428b      	cmp	r3, r1
 80126fc:	d80c      	bhi.n	8012718 <__multiply+0x98>
 80126fe:	2e00      	cmp	r6, #0
 8012700:	dd03      	ble.n	801270a <__multiply+0x8a>
 8012702:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8012706:	2b00      	cmp	r3, #0
 8012708:	d057      	beq.n	80127ba <__multiply+0x13a>
 801270a:	6106      	str	r6, [r0, #16]
 801270c:	b005      	add	sp, #20
 801270e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012712:	f843 2b04 	str.w	r2, [r3], #4
 8012716:	e7d9      	b.n	80126cc <__multiply+0x4c>
 8012718:	f8b1 a000 	ldrh.w	sl, [r1]
 801271c:	f1ba 0f00 	cmp.w	sl, #0
 8012720:	d021      	beq.n	8012766 <__multiply+0xe6>
 8012722:	46c4      	mov	ip, r8
 8012724:	46a1      	mov	r9, r4
 8012726:	2700      	movs	r7, #0
 8012728:	f85c 2b04 	ldr.w	r2, [ip], #4
 801272c:	f8d9 3000 	ldr.w	r3, [r9]
 8012730:	fa1f fb82 	uxth.w	fp, r2
 8012734:	4565      	cmp	r5, ip
 8012736:	b29b      	uxth	r3, r3
 8012738:	ea4f 4212 	mov.w	r2, r2, lsr #16
 801273c:	fb0a 330b 	mla	r3, sl, fp, r3
 8012740:	443b      	add	r3, r7
 8012742:	f8d9 7000 	ldr.w	r7, [r9]
 8012746:	ea4f 4717 	mov.w	r7, r7, lsr #16
 801274a:	fb0a 7202 	mla	r2, sl, r2, r7
 801274e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8012752:	b29b      	uxth	r3, r3
 8012754:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8012758:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801275c:	f849 3b04 	str.w	r3, [r9], #4
 8012760:	d8e2      	bhi.n	8012728 <__multiply+0xa8>
 8012762:	9b01      	ldr	r3, [sp, #4]
 8012764:	50e7      	str	r7, [r4, r3]
 8012766:	9b03      	ldr	r3, [sp, #12]
 8012768:	3104      	adds	r1, #4
 801276a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801276e:	f1b9 0f00 	cmp.w	r9, #0
 8012772:	d020      	beq.n	80127b6 <__multiply+0x136>
 8012774:	6823      	ldr	r3, [r4, #0]
 8012776:	4647      	mov	r7, r8
 8012778:	46a4      	mov	ip, r4
 801277a:	f04f 0a00 	mov.w	sl, #0
 801277e:	f8b7 b000 	ldrh.w	fp, [r7]
 8012782:	b29b      	uxth	r3, r3
 8012784:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8012788:	fb09 220b 	mla	r2, r9, fp, r2
 801278c:	4452      	add	r2, sl
 801278e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012792:	f84c 3b04 	str.w	r3, [ip], #4
 8012796:	f857 3b04 	ldr.w	r3, [r7], #4
 801279a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801279e:	f8bc 3000 	ldrh.w	r3, [ip]
 80127a2:	42bd      	cmp	r5, r7
 80127a4:	fb09 330a 	mla	r3, r9, sl, r3
 80127a8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80127ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80127b0:	d8e5      	bhi.n	801277e <__multiply+0xfe>
 80127b2:	9a01      	ldr	r2, [sp, #4]
 80127b4:	50a3      	str	r3, [r4, r2]
 80127b6:	3404      	adds	r4, #4
 80127b8:	e79d      	b.n	80126f6 <__multiply+0x76>
 80127ba:	3e01      	subs	r6, #1
 80127bc:	e79f      	b.n	80126fe <__multiply+0x7e>
 80127be:	bf00      	nop
 80127c0:	080166a5 	.word	0x080166a5
 80127c4:	080166b6 	.word	0x080166b6

080127c8 <__pow5mult>:
 80127c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80127cc:	4615      	mov	r5, r2
 80127ce:	f012 0203 	ands.w	r2, r2, #3
 80127d2:	4607      	mov	r7, r0
 80127d4:	460e      	mov	r6, r1
 80127d6:	d007      	beq.n	80127e8 <__pow5mult+0x20>
 80127d8:	3a01      	subs	r2, #1
 80127da:	4c25      	ldr	r4, [pc, #148]	@ (8012870 <__pow5mult+0xa8>)
 80127dc:	2300      	movs	r3, #0
 80127de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80127e2:	f7ff fe59 	bl	8012498 <__multadd>
 80127e6:	4606      	mov	r6, r0
 80127e8:	10ad      	asrs	r5, r5, #2
 80127ea:	d03d      	beq.n	8012868 <__pow5mult+0xa0>
 80127ec:	69fc      	ldr	r4, [r7, #28]
 80127ee:	b97c      	cbnz	r4, 8012810 <__pow5mult+0x48>
 80127f0:	2010      	movs	r0, #16
 80127f2:	f7ff fd39 	bl	8012268 <malloc>
 80127f6:	4602      	mov	r2, r0
 80127f8:	61f8      	str	r0, [r7, #28]
 80127fa:	b928      	cbnz	r0, 8012808 <__pow5mult+0x40>
 80127fc:	4b1d      	ldr	r3, [pc, #116]	@ (8012874 <__pow5mult+0xac>)
 80127fe:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8012802:	481d      	ldr	r0, [pc, #116]	@ (8012878 <__pow5mult+0xb0>)
 8012804:	f001 fd30 	bl	8014268 <__assert_func>
 8012808:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801280c:	6004      	str	r4, [r0, #0]
 801280e:	60c4      	str	r4, [r0, #12]
 8012810:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8012814:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012818:	b94c      	cbnz	r4, 801282e <__pow5mult+0x66>
 801281a:	f240 2171 	movw	r1, #625	@ 0x271
 801281e:	4638      	mov	r0, r7
 8012820:	f7ff ff18 	bl	8012654 <__i2b>
 8012824:	2300      	movs	r3, #0
 8012826:	4604      	mov	r4, r0
 8012828:	f8c8 0008 	str.w	r0, [r8, #8]
 801282c:	6003      	str	r3, [r0, #0]
 801282e:	f04f 0900 	mov.w	r9, #0
 8012832:	07eb      	lsls	r3, r5, #31
 8012834:	d50a      	bpl.n	801284c <__pow5mult+0x84>
 8012836:	4631      	mov	r1, r6
 8012838:	4622      	mov	r2, r4
 801283a:	4638      	mov	r0, r7
 801283c:	f7ff ff20 	bl	8012680 <__multiply>
 8012840:	4680      	mov	r8, r0
 8012842:	4631      	mov	r1, r6
 8012844:	4638      	mov	r0, r7
 8012846:	4646      	mov	r6, r8
 8012848:	f7ff fe04 	bl	8012454 <_Bfree>
 801284c:	106d      	asrs	r5, r5, #1
 801284e:	d00b      	beq.n	8012868 <__pow5mult+0xa0>
 8012850:	6820      	ldr	r0, [r4, #0]
 8012852:	b938      	cbnz	r0, 8012864 <__pow5mult+0x9c>
 8012854:	4622      	mov	r2, r4
 8012856:	4621      	mov	r1, r4
 8012858:	4638      	mov	r0, r7
 801285a:	f7ff ff11 	bl	8012680 <__multiply>
 801285e:	6020      	str	r0, [r4, #0]
 8012860:	f8c0 9000 	str.w	r9, [r0]
 8012864:	4604      	mov	r4, r0
 8012866:	e7e4      	b.n	8012832 <__pow5mult+0x6a>
 8012868:	4630      	mov	r0, r6
 801286a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801286e:	bf00      	nop
 8012870:	080167c8 	.word	0x080167c8
 8012874:	08016636 	.word	0x08016636
 8012878:	080166b6 	.word	0x080166b6

0801287c <__lshift>:
 801287c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012880:	460c      	mov	r4, r1
 8012882:	4607      	mov	r7, r0
 8012884:	4691      	mov	r9, r2
 8012886:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801288a:	6923      	ldr	r3, [r4, #16]
 801288c:	6849      	ldr	r1, [r1, #4]
 801288e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012892:	68a3      	ldr	r3, [r4, #8]
 8012894:	f108 0601 	add.w	r6, r8, #1
 8012898:	42b3      	cmp	r3, r6
 801289a:	db0b      	blt.n	80128b4 <__lshift+0x38>
 801289c:	4638      	mov	r0, r7
 801289e:	f7ff fd99 	bl	80123d4 <_Balloc>
 80128a2:	4605      	mov	r5, r0
 80128a4:	b948      	cbnz	r0, 80128ba <__lshift+0x3e>
 80128a6:	4602      	mov	r2, r0
 80128a8:	4b28      	ldr	r3, [pc, #160]	@ (801294c <__lshift+0xd0>)
 80128aa:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80128ae:	4828      	ldr	r0, [pc, #160]	@ (8012950 <__lshift+0xd4>)
 80128b0:	f001 fcda 	bl	8014268 <__assert_func>
 80128b4:	3101      	adds	r1, #1
 80128b6:	005b      	lsls	r3, r3, #1
 80128b8:	e7ee      	b.n	8012898 <__lshift+0x1c>
 80128ba:	2300      	movs	r3, #0
 80128bc:	f100 0114 	add.w	r1, r0, #20
 80128c0:	f100 0210 	add.w	r2, r0, #16
 80128c4:	4618      	mov	r0, r3
 80128c6:	4553      	cmp	r3, sl
 80128c8:	db33      	blt.n	8012932 <__lshift+0xb6>
 80128ca:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80128ce:	f104 0314 	add.w	r3, r4, #20
 80128d2:	6920      	ldr	r0, [r4, #16]
 80128d4:	f019 091f 	ands.w	r9, r9, #31
 80128d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80128dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80128e0:	d02b      	beq.n	801293a <__lshift+0xbe>
 80128e2:	f1c9 0e20 	rsb	lr, r9, #32
 80128e6:	468a      	mov	sl, r1
 80128e8:	2200      	movs	r2, #0
 80128ea:	6818      	ldr	r0, [r3, #0]
 80128ec:	fa00 f009 	lsl.w	r0, r0, r9
 80128f0:	4310      	orrs	r0, r2
 80128f2:	f84a 0b04 	str.w	r0, [sl], #4
 80128f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80128fa:	459c      	cmp	ip, r3
 80128fc:	fa22 f20e 	lsr.w	r2, r2, lr
 8012900:	d8f3      	bhi.n	80128ea <__lshift+0x6e>
 8012902:	ebac 0304 	sub.w	r3, ip, r4
 8012906:	f104 0015 	add.w	r0, r4, #21
 801290a:	3b15      	subs	r3, #21
 801290c:	f023 0303 	bic.w	r3, r3, #3
 8012910:	3304      	adds	r3, #4
 8012912:	4560      	cmp	r0, ip
 8012914:	bf88      	it	hi
 8012916:	2304      	movhi	r3, #4
 8012918:	50ca      	str	r2, [r1, r3]
 801291a:	b10a      	cbz	r2, 8012920 <__lshift+0xa4>
 801291c:	f108 0602 	add.w	r6, r8, #2
 8012920:	3e01      	subs	r6, #1
 8012922:	4638      	mov	r0, r7
 8012924:	4621      	mov	r1, r4
 8012926:	612e      	str	r6, [r5, #16]
 8012928:	f7ff fd94 	bl	8012454 <_Bfree>
 801292c:	4628      	mov	r0, r5
 801292e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012932:	3301      	adds	r3, #1
 8012934:	f842 0f04 	str.w	r0, [r2, #4]!
 8012938:	e7c5      	b.n	80128c6 <__lshift+0x4a>
 801293a:	3904      	subs	r1, #4
 801293c:	f853 2b04 	ldr.w	r2, [r3], #4
 8012940:	459c      	cmp	ip, r3
 8012942:	f841 2f04 	str.w	r2, [r1, #4]!
 8012946:	d8f9      	bhi.n	801293c <__lshift+0xc0>
 8012948:	e7ea      	b.n	8012920 <__lshift+0xa4>
 801294a:	bf00      	nop
 801294c:	080166a5 	.word	0x080166a5
 8012950:	080166b6 	.word	0x080166b6

08012954 <__mcmp>:
 8012954:	4603      	mov	r3, r0
 8012956:	690a      	ldr	r2, [r1, #16]
 8012958:	6900      	ldr	r0, [r0, #16]
 801295a:	1a80      	subs	r0, r0, r2
 801295c:	b530      	push	{r4, r5, lr}
 801295e:	d10e      	bne.n	801297e <__mcmp+0x2a>
 8012960:	3314      	adds	r3, #20
 8012962:	3114      	adds	r1, #20
 8012964:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8012968:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801296c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012970:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012974:	4295      	cmp	r5, r2
 8012976:	d003      	beq.n	8012980 <__mcmp+0x2c>
 8012978:	d205      	bcs.n	8012986 <__mcmp+0x32>
 801297a:	f04f 30ff 	mov.w	r0, #4294967295
 801297e:	bd30      	pop	{r4, r5, pc}
 8012980:	42a3      	cmp	r3, r4
 8012982:	d3f3      	bcc.n	801296c <__mcmp+0x18>
 8012984:	e7fb      	b.n	801297e <__mcmp+0x2a>
 8012986:	2001      	movs	r0, #1
 8012988:	e7f9      	b.n	801297e <__mcmp+0x2a>
	...

0801298c <__mdiff>:
 801298c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012990:	4689      	mov	r9, r1
 8012992:	4606      	mov	r6, r0
 8012994:	4611      	mov	r1, r2
 8012996:	4614      	mov	r4, r2
 8012998:	4648      	mov	r0, r9
 801299a:	f7ff ffdb 	bl	8012954 <__mcmp>
 801299e:	1e05      	subs	r5, r0, #0
 80129a0:	d112      	bne.n	80129c8 <__mdiff+0x3c>
 80129a2:	4629      	mov	r1, r5
 80129a4:	4630      	mov	r0, r6
 80129a6:	f7ff fd15 	bl	80123d4 <_Balloc>
 80129aa:	4602      	mov	r2, r0
 80129ac:	b928      	cbnz	r0, 80129ba <__mdiff+0x2e>
 80129ae:	4b41      	ldr	r3, [pc, #260]	@ (8012ab4 <__mdiff+0x128>)
 80129b0:	f240 2137 	movw	r1, #567	@ 0x237
 80129b4:	4840      	ldr	r0, [pc, #256]	@ (8012ab8 <__mdiff+0x12c>)
 80129b6:	f001 fc57 	bl	8014268 <__assert_func>
 80129ba:	2301      	movs	r3, #1
 80129bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80129c0:	4610      	mov	r0, r2
 80129c2:	b003      	add	sp, #12
 80129c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129c8:	bfbc      	itt	lt
 80129ca:	464b      	movlt	r3, r9
 80129cc:	46a1      	movlt	r9, r4
 80129ce:	4630      	mov	r0, r6
 80129d0:	bfb8      	it	lt
 80129d2:	2501      	movlt	r5, #1
 80129d4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80129d8:	bfb4      	ite	lt
 80129da:	461c      	movlt	r4, r3
 80129dc:	2500      	movge	r5, #0
 80129de:	f7ff fcf9 	bl	80123d4 <_Balloc>
 80129e2:	4602      	mov	r2, r0
 80129e4:	b918      	cbnz	r0, 80129ee <__mdiff+0x62>
 80129e6:	4b33      	ldr	r3, [pc, #204]	@ (8012ab4 <__mdiff+0x128>)
 80129e8:	f240 2145 	movw	r1, #581	@ 0x245
 80129ec:	e7e2      	b.n	80129b4 <__mdiff+0x28>
 80129ee:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80129f2:	f104 0e14 	add.w	lr, r4, #20
 80129f6:	6926      	ldr	r6, [r4, #16]
 80129f8:	f100 0b14 	add.w	fp, r0, #20
 80129fc:	60c5      	str	r5, [r0, #12]
 80129fe:	f109 0514 	add.w	r5, r9, #20
 8012a02:	f109 0310 	add.w	r3, r9, #16
 8012a06:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8012a0a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8012a0e:	46d9      	mov	r9, fp
 8012a10:	f04f 0c00 	mov.w	ip, #0
 8012a14:	9301      	str	r3, [sp, #4]
 8012a16:	9b01      	ldr	r3, [sp, #4]
 8012a18:	f85e 0b04 	ldr.w	r0, [lr], #4
 8012a1c:	f853 af04 	ldr.w	sl, [r3, #4]!
 8012a20:	4576      	cmp	r6, lr
 8012a22:	9301      	str	r3, [sp, #4]
 8012a24:	fa1f f38a 	uxth.w	r3, sl
 8012a28:	4619      	mov	r1, r3
 8012a2a:	b283      	uxth	r3, r0
 8012a2c:	ea4f 4010 	mov.w	r0, r0, lsr #16
 8012a30:	eba1 0303 	sub.w	r3, r1, r3
 8012a34:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8012a38:	4463      	add	r3, ip
 8012a3a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8012a3e:	b29b      	uxth	r3, r3
 8012a40:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012a44:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8012a48:	f849 3b04 	str.w	r3, [r9], #4
 8012a4c:	d8e3      	bhi.n	8012a16 <__mdiff+0x8a>
 8012a4e:	1b33      	subs	r3, r6, r4
 8012a50:	3415      	adds	r4, #21
 8012a52:	3b15      	subs	r3, #21
 8012a54:	f023 0303 	bic.w	r3, r3, #3
 8012a58:	3304      	adds	r3, #4
 8012a5a:	42a6      	cmp	r6, r4
 8012a5c:	bf38      	it	cc
 8012a5e:	2304      	movcc	r3, #4
 8012a60:	441d      	add	r5, r3
 8012a62:	445b      	add	r3, fp
 8012a64:	462c      	mov	r4, r5
 8012a66:	461e      	mov	r6, r3
 8012a68:	4544      	cmp	r4, r8
 8012a6a:	d30e      	bcc.n	8012a8a <__mdiff+0xfe>
 8012a6c:	f108 0103 	add.w	r1, r8, #3
 8012a70:	1b49      	subs	r1, r1, r5
 8012a72:	3d03      	subs	r5, #3
 8012a74:	f021 0103 	bic.w	r1, r1, #3
 8012a78:	45a8      	cmp	r8, r5
 8012a7a:	bf38      	it	cc
 8012a7c:	2100      	movcc	r1, #0
 8012a7e:	440b      	add	r3, r1
 8012a80:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012a84:	b199      	cbz	r1, 8012aae <__mdiff+0x122>
 8012a86:	6117      	str	r7, [r2, #16]
 8012a88:	e79a      	b.n	80129c0 <__mdiff+0x34>
 8012a8a:	f854 1b04 	ldr.w	r1, [r4], #4
 8012a8e:	46e6      	mov	lr, ip
 8012a90:	fa1f fc81 	uxth.w	ip, r1
 8012a94:	0c08      	lsrs	r0, r1, #16
 8012a96:	4471      	add	r1, lr
 8012a98:	44f4      	add	ip, lr
 8012a9a:	b289      	uxth	r1, r1
 8012a9c:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8012aa0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8012aa4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012aa8:	f846 1b04 	str.w	r1, [r6], #4
 8012aac:	e7dc      	b.n	8012a68 <__mdiff+0xdc>
 8012aae:	3f01      	subs	r7, #1
 8012ab0:	e7e6      	b.n	8012a80 <__mdiff+0xf4>
 8012ab2:	bf00      	nop
 8012ab4:	080166a5 	.word	0x080166a5
 8012ab8:	080166b6 	.word	0x080166b6

08012abc <__ulp>:
 8012abc:	b082      	sub	sp, #8
 8012abe:	4b11      	ldr	r3, [pc, #68]	@ (8012b04 <__ulp+0x48>)
 8012ac0:	ed8d 0b00 	vstr	d0, [sp]
 8012ac4:	9a01      	ldr	r2, [sp, #4]
 8012ac6:	4013      	ands	r3, r2
 8012ac8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	dc08      	bgt.n	8012ae2 <__ulp+0x26>
 8012ad0:	425b      	negs	r3, r3
 8012ad2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8012ad6:	ea4f 5223 	mov.w	r2, r3, asr #20
 8012ada:	da04      	bge.n	8012ae6 <__ulp+0x2a>
 8012adc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8012ae0:	4113      	asrs	r3, r2
 8012ae2:	2200      	movs	r2, #0
 8012ae4:	e008      	b.n	8012af8 <__ulp+0x3c>
 8012ae6:	f1a2 0314 	sub.w	r3, r2, #20
 8012aea:	2b1e      	cmp	r3, #30
 8012aec:	bfd6      	itet	le
 8012aee:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8012af2:	2201      	movgt	r2, #1
 8012af4:	40da      	lsrle	r2, r3
 8012af6:	2300      	movs	r3, #0
 8012af8:	4619      	mov	r1, r3
 8012afa:	4610      	mov	r0, r2
 8012afc:	ec41 0b10 	vmov	d0, r0, r1
 8012b00:	b002      	add	sp, #8
 8012b02:	4770      	bx	lr
 8012b04:	7ff00000 	.word	0x7ff00000

08012b08 <__b2d>:
 8012b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b0c:	6906      	ldr	r6, [r0, #16]
 8012b0e:	f100 0814 	add.w	r8, r0, #20
 8012b12:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8012b16:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8012b1a:	1f37      	subs	r7, r6, #4
 8012b1c:	4610      	mov	r0, r2
 8012b1e:	f7ff fd4d 	bl	80125bc <__hi0bits>
 8012b22:	f1c0 0320 	rsb	r3, r0, #32
 8012b26:	280a      	cmp	r0, #10
 8012b28:	600b      	str	r3, [r1, #0]
 8012b2a:	491d      	ldr	r1, [pc, #116]	@ (8012ba0 <__b2d+0x98>)
 8012b2c:	dc16      	bgt.n	8012b5c <__b2d+0x54>
 8012b2e:	f1c0 0c0b 	rsb	ip, r0, #11
 8012b32:	45b8      	cmp	r8, r7
 8012b34:	f100 0015 	add.w	r0, r0, #21
 8012b38:	fa22 f30c 	lsr.w	r3, r2, ip
 8012b3c:	fa02 f000 	lsl.w	r0, r2, r0
 8012b40:	ea43 0501 	orr.w	r5, r3, r1
 8012b44:	bf34      	ite	cc
 8012b46:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012b4a:	2300      	movcs	r3, #0
 8012b4c:	fa23 f30c 	lsr.w	r3, r3, ip
 8012b50:	4303      	orrs	r3, r0
 8012b52:	461c      	mov	r4, r3
 8012b54:	ec45 4b10 	vmov	d0, r4, r5
 8012b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b5c:	45b8      	cmp	r8, r7
 8012b5e:	bf3a      	itte	cc
 8012b60:	f1a6 0708 	subcc.w	r7, r6, #8
 8012b64:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012b68:	2300      	movcs	r3, #0
 8012b6a:	380b      	subs	r0, #11
 8012b6c:	d014      	beq.n	8012b98 <__b2d+0x90>
 8012b6e:	f1c0 0120 	rsb	r1, r0, #32
 8012b72:	4082      	lsls	r2, r0
 8012b74:	4547      	cmp	r7, r8
 8012b76:	fa23 f401 	lsr.w	r4, r3, r1
 8012b7a:	fa03 f300 	lsl.w	r3, r3, r0
 8012b7e:	ea42 0204 	orr.w	r2, r2, r4
 8012b82:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8012b86:	bf8c      	ite	hi
 8012b88:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8012b8c:	2200      	movls	r2, #0
 8012b8e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8012b92:	40ca      	lsrs	r2, r1
 8012b94:	4313      	orrs	r3, r2
 8012b96:	e7dc      	b.n	8012b52 <__b2d+0x4a>
 8012b98:	ea42 0501 	orr.w	r5, r2, r1
 8012b9c:	e7d9      	b.n	8012b52 <__b2d+0x4a>
 8012b9e:	bf00      	nop
 8012ba0:	3ff00000 	.word	0x3ff00000

08012ba4 <__d2b>:
 8012ba4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012ba8:	460f      	mov	r7, r1
 8012baa:	2101      	movs	r1, #1
 8012bac:	4616      	mov	r6, r2
 8012bae:	ec59 8b10 	vmov	r8, r9, d0
 8012bb2:	f7ff fc0f 	bl	80123d4 <_Balloc>
 8012bb6:	4604      	mov	r4, r0
 8012bb8:	b930      	cbnz	r0, 8012bc8 <__d2b+0x24>
 8012bba:	4602      	mov	r2, r0
 8012bbc:	4b23      	ldr	r3, [pc, #140]	@ (8012c4c <__d2b+0xa8>)
 8012bbe:	f240 310f 	movw	r1, #783	@ 0x30f
 8012bc2:	4823      	ldr	r0, [pc, #140]	@ (8012c50 <__d2b+0xac>)
 8012bc4:	f001 fb50 	bl	8014268 <__assert_func>
 8012bc8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012bcc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012bd0:	b10d      	cbz	r5, 8012bd6 <__d2b+0x32>
 8012bd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012bd6:	9301      	str	r3, [sp, #4]
 8012bd8:	f1b8 0300 	subs.w	r3, r8, #0
 8012bdc:	d023      	beq.n	8012c26 <__d2b+0x82>
 8012bde:	4668      	mov	r0, sp
 8012be0:	9300      	str	r3, [sp, #0]
 8012be2:	f7ff fd0a 	bl	80125fa <__lo0bits>
 8012be6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8012bea:	b1d0      	cbz	r0, 8012c22 <__d2b+0x7e>
 8012bec:	f1c0 0320 	rsb	r3, r0, #32
 8012bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8012bf4:	40c2      	lsrs	r2, r0
 8012bf6:	430b      	orrs	r3, r1
 8012bf8:	9201      	str	r2, [sp, #4]
 8012bfa:	6163      	str	r3, [r4, #20]
 8012bfc:	9b01      	ldr	r3, [sp, #4]
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	61a3      	str	r3, [r4, #24]
 8012c02:	bf0c      	ite	eq
 8012c04:	2201      	moveq	r2, #1
 8012c06:	2202      	movne	r2, #2
 8012c08:	6122      	str	r2, [r4, #16]
 8012c0a:	b1a5      	cbz	r5, 8012c36 <__d2b+0x92>
 8012c0c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8012c10:	4405      	add	r5, r0
 8012c12:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8012c16:	603d      	str	r5, [r7, #0]
 8012c18:	6030      	str	r0, [r6, #0]
 8012c1a:	4620      	mov	r0, r4
 8012c1c:	b003      	add	sp, #12
 8012c1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012c22:	6161      	str	r1, [r4, #20]
 8012c24:	e7ea      	b.n	8012bfc <__d2b+0x58>
 8012c26:	a801      	add	r0, sp, #4
 8012c28:	f7ff fce7 	bl	80125fa <__lo0bits>
 8012c2c:	9b01      	ldr	r3, [sp, #4]
 8012c2e:	3020      	adds	r0, #32
 8012c30:	2201      	movs	r2, #1
 8012c32:	6163      	str	r3, [r4, #20]
 8012c34:	e7e8      	b.n	8012c08 <__d2b+0x64>
 8012c36:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8012c3a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012c3e:	6038      	str	r0, [r7, #0]
 8012c40:	6918      	ldr	r0, [r3, #16]
 8012c42:	f7ff fcbb 	bl	80125bc <__hi0bits>
 8012c46:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012c4a:	e7e5      	b.n	8012c18 <__d2b+0x74>
 8012c4c:	080166a5 	.word	0x080166a5
 8012c50:	080166b6 	.word	0x080166b6

08012c54 <__ratio>:
 8012c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c58:	b085      	sub	sp, #20
 8012c5a:	e9cd 1000 	strd	r1, r0, [sp]
 8012c5e:	a902      	add	r1, sp, #8
 8012c60:	f7ff ff52 	bl	8012b08 <__b2d>
 8012c64:	a903      	add	r1, sp, #12
 8012c66:	9800      	ldr	r0, [sp, #0]
 8012c68:	ec55 4b10 	vmov	r4, r5, d0
 8012c6c:	f7ff ff4c 	bl	8012b08 <__b2d>
 8012c70:	9b01      	ldr	r3, [sp, #4]
 8012c72:	462f      	mov	r7, r5
 8012c74:	4620      	mov	r0, r4
 8012c76:	6919      	ldr	r1, [r3, #16]
 8012c78:	9b00      	ldr	r3, [sp, #0]
 8012c7a:	691b      	ldr	r3, [r3, #16]
 8012c7c:	1ac9      	subs	r1, r1, r3
 8012c7e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8012c82:	ec5b ab10 	vmov	sl, fp, d0
 8012c86:	1a9b      	subs	r3, r3, r2
 8012c88:	46d9      	mov	r9, fp
 8012c8a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	bfcd      	iteet	gt
 8012c92:	462a      	movgt	r2, r5
 8012c94:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012c98:	465a      	movle	r2, fp
 8012c9a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8012c9e:	bfd8      	it	le
 8012ca0:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8012ca4:	4652      	mov	r2, sl
 8012ca6:	4639      	mov	r1, r7
 8012ca8:	464b      	mov	r3, r9
 8012caa:	f7ef fb61 	bl	8002370 <__aeabi_ddiv>
 8012cae:	ec41 0b10 	vmov	d0, r0, r1
 8012cb2:	b005      	add	sp, #20
 8012cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012cb8 <__copybits>:
 8012cb8:	3901      	subs	r1, #1
 8012cba:	f102 0314 	add.w	r3, r2, #20
 8012cbe:	1149      	asrs	r1, r1, #5
 8012cc0:	b570      	push	{r4, r5, r6, lr}
 8012cc2:	3101      	adds	r1, #1
 8012cc4:	6914      	ldr	r4, [r2, #16]
 8012cc6:	1f05      	subs	r5, r0, #4
 8012cc8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012ccc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012cd0:	42a3      	cmp	r3, r4
 8012cd2:	d30c      	bcc.n	8012cee <__copybits+0x36>
 8012cd4:	1aa3      	subs	r3, r4, r2
 8012cd6:	3211      	adds	r2, #17
 8012cd8:	3b11      	subs	r3, #17
 8012cda:	f023 0303 	bic.w	r3, r3, #3
 8012cde:	42a2      	cmp	r2, r4
 8012ce0:	bf88      	it	hi
 8012ce2:	2300      	movhi	r3, #0
 8012ce4:	4418      	add	r0, r3
 8012ce6:	2300      	movs	r3, #0
 8012ce8:	4288      	cmp	r0, r1
 8012cea:	d305      	bcc.n	8012cf8 <__copybits+0x40>
 8012cec:	bd70      	pop	{r4, r5, r6, pc}
 8012cee:	f853 6b04 	ldr.w	r6, [r3], #4
 8012cf2:	f845 6f04 	str.w	r6, [r5, #4]!
 8012cf6:	e7eb      	b.n	8012cd0 <__copybits+0x18>
 8012cf8:	f840 3b04 	str.w	r3, [r0], #4
 8012cfc:	e7f4      	b.n	8012ce8 <__copybits+0x30>

08012cfe <__any_on>:
 8012cfe:	f100 0214 	add.w	r2, r0, #20
 8012d02:	114b      	asrs	r3, r1, #5
 8012d04:	6900      	ldr	r0, [r0, #16]
 8012d06:	4298      	cmp	r0, r3
 8012d08:	b510      	push	{r4, lr}
 8012d0a:	db11      	blt.n	8012d30 <__any_on+0x32>
 8012d0c:	dd0a      	ble.n	8012d24 <__any_on+0x26>
 8012d0e:	f011 011f 	ands.w	r1, r1, #31
 8012d12:	d007      	beq.n	8012d24 <__any_on+0x26>
 8012d14:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012d18:	fa24 f001 	lsr.w	r0, r4, r1
 8012d1c:	fa00 f101 	lsl.w	r1, r0, r1
 8012d20:	428c      	cmp	r4, r1
 8012d22:	d10b      	bne.n	8012d3c <__any_on+0x3e>
 8012d24:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012d28:	4293      	cmp	r3, r2
 8012d2a:	d803      	bhi.n	8012d34 <__any_on+0x36>
 8012d2c:	2000      	movs	r0, #0
 8012d2e:	bd10      	pop	{r4, pc}
 8012d30:	4603      	mov	r3, r0
 8012d32:	e7f7      	b.n	8012d24 <__any_on+0x26>
 8012d34:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012d38:	2900      	cmp	r1, #0
 8012d3a:	d0f5      	beq.n	8012d28 <__any_on+0x2a>
 8012d3c:	2001      	movs	r0, #1
 8012d3e:	e7f6      	b.n	8012d2e <__any_on+0x30>

08012d40 <sulp>:
 8012d40:	b570      	push	{r4, r5, r6, lr}
 8012d42:	4604      	mov	r4, r0
 8012d44:	460d      	mov	r5, r1
 8012d46:	4616      	mov	r6, r2
 8012d48:	ec45 4b10 	vmov	d0, r4, r5
 8012d4c:	f7ff feb6 	bl	8012abc <__ulp>
 8012d50:	ec51 0b10 	vmov	r0, r1, d0
 8012d54:	b17e      	cbz	r6, 8012d76 <sulp+0x36>
 8012d56:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8012d5a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	dd09      	ble.n	8012d76 <sulp+0x36>
 8012d62:	051b      	lsls	r3, r3, #20
 8012d64:	2400      	movs	r4, #0
 8012d66:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8012d6a:	4622      	mov	r2, r4
 8012d6c:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8012d70:	462b      	mov	r3, r5
 8012d72:	f7ef f9d3 	bl	800211c <__aeabi_dmul>
 8012d76:	ec41 0b10 	vmov	d0, r0, r1
 8012d7a:	bd70      	pop	{r4, r5, r6, pc}
 8012d7c:	0000      	movs	r0, r0
	...

08012d80 <_strtod_l>:
 8012d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d84:	b09f      	sub	sp, #124	@ 0x7c
 8012d86:	460c      	mov	r4, r1
 8012d88:	f04f 0a00 	mov.w	sl, #0
 8012d8c:	f04f 0b00 	mov.w	fp, #0
 8012d90:	9217      	str	r2, [sp, #92]	@ 0x5c
 8012d92:	2200      	movs	r2, #0
 8012d94:	9005      	str	r0, [sp, #20]
 8012d96:	921a      	str	r2, [sp, #104]	@ 0x68
 8012d98:	460a      	mov	r2, r1
 8012d9a:	9219      	str	r2, [sp, #100]	@ 0x64
 8012d9c:	7811      	ldrb	r1, [r2, #0]
 8012d9e:	292b      	cmp	r1, #43	@ 0x2b
 8012da0:	d04a      	beq.n	8012e38 <_strtod_l+0xb8>
 8012da2:	d838      	bhi.n	8012e16 <_strtod_l+0x96>
 8012da4:	290d      	cmp	r1, #13
 8012da6:	d832      	bhi.n	8012e0e <_strtod_l+0x8e>
 8012da8:	2908      	cmp	r1, #8
 8012daa:	d832      	bhi.n	8012e12 <_strtod_l+0x92>
 8012dac:	2900      	cmp	r1, #0
 8012dae:	d03b      	beq.n	8012e28 <_strtod_l+0xa8>
 8012db0:	2200      	movs	r2, #0
 8012db2:	920e      	str	r2, [sp, #56]	@ 0x38
 8012db4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8012db6:	782a      	ldrb	r2, [r5, #0]
 8012db8:	2a30      	cmp	r2, #48	@ 0x30
 8012dba:	f040 80b2 	bne.w	8012f22 <_strtod_l+0x1a2>
 8012dbe:	786a      	ldrb	r2, [r5, #1]
 8012dc0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8012dc4:	2a58      	cmp	r2, #88	@ 0x58
 8012dc6:	d16e      	bne.n	8012ea6 <_strtod_l+0x126>
 8012dc8:	9302      	str	r3, [sp, #8]
 8012dca:	a919      	add	r1, sp, #100	@ 0x64
 8012dcc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012dce:	4a90      	ldr	r2, [pc, #576]	@ (8013010 <_strtod_l+0x290>)
 8012dd0:	9301      	str	r3, [sp, #4]
 8012dd2:	ab1a      	add	r3, sp, #104	@ 0x68
 8012dd4:	9805      	ldr	r0, [sp, #20]
 8012dd6:	9300      	str	r3, [sp, #0]
 8012dd8:	ab1b      	add	r3, sp, #108	@ 0x6c
 8012dda:	f001 fadd 	bl	8014398 <__gethex>
 8012dde:	f010 060f 	ands.w	r6, r0, #15
 8012de2:	4604      	mov	r4, r0
 8012de4:	d005      	beq.n	8012df2 <_strtod_l+0x72>
 8012de6:	2e06      	cmp	r6, #6
 8012de8:	d128      	bne.n	8012e3c <_strtod_l+0xbc>
 8012dea:	3501      	adds	r5, #1
 8012dec:	2300      	movs	r3, #0
 8012dee:	9519      	str	r5, [sp, #100]	@ 0x64
 8012df0:	930e      	str	r3, [sp, #56]	@ 0x38
 8012df2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	f040 858e 	bne.w	8013916 <_strtod_l+0xb96>
 8012dfa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012dfc:	b1cb      	cbz	r3, 8012e32 <_strtod_l+0xb2>
 8012dfe:	4652      	mov	r2, sl
 8012e00:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8012e04:	ec43 2b10 	vmov	d0, r2, r3
 8012e08:	b01f      	add	sp, #124	@ 0x7c
 8012e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e0e:	2920      	cmp	r1, #32
 8012e10:	d1ce      	bne.n	8012db0 <_strtod_l+0x30>
 8012e12:	3201      	adds	r2, #1
 8012e14:	e7c1      	b.n	8012d9a <_strtod_l+0x1a>
 8012e16:	292d      	cmp	r1, #45	@ 0x2d
 8012e18:	d1ca      	bne.n	8012db0 <_strtod_l+0x30>
 8012e1a:	2101      	movs	r1, #1
 8012e1c:	910e      	str	r1, [sp, #56]	@ 0x38
 8012e1e:	1c51      	adds	r1, r2, #1
 8012e20:	9119      	str	r1, [sp, #100]	@ 0x64
 8012e22:	7852      	ldrb	r2, [r2, #1]
 8012e24:	2a00      	cmp	r2, #0
 8012e26:	d1c5      	bne.n	8012db4 <_strtod_l+0x34>
 8012e28:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8012e2a:	9419      	str	r4, [sp, #100]	@ 0x64
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	f040 8570 	bne.w	8013912 <_strtod_l+0xb92>
 8012e32:	4652      	mov	r2, sl
 8012e34:	465b      	mov	r3, fp
 8012e36:	e7e5      	b.n	8012e04 <_strtod_l+0x84>
 8012e38:	2100      	movs	r1, #0
 8012e3a:	e7ef      	b.n	8012e1c <_strtod_l+0x9c>
 8012e3c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8012e3e:	b13a      	cbz	r2, 8012e50 <_strtod_l+0xd0>
 8012e40:	2135      	movs	r1, #53	@ 0x35
 8012e42:	a81c      	add	r0, sp, #112	@ 0x70
 8012e44:	f7ff ff38 	bl	8012cb8 <__copybits>
 8012e48:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012e4a:	9805      	ldr	r0, [sp, #20]
 8012e4c:	f7ff fb02 	bl	8012454 <_Bfree>
 8012e50:	3e01      	subs	r6, #1
 8012e52:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8012e54:	2e04      	cmp	r6, #4
 8012e56:	d806      	bhi.n	8012e66 <_strtod_l+0xe6>
 8012e58:	e8df f006 	tbb	[pc, r6]
 8012e5c:	201d0314 	.word	0x201d0314
 8012e60:	14          	.byte	0x14
 8012e61:	00          	.byte	0x00
 8012e62:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8012e66:	05e1      	lsls	r1, r4, #23
 8012e68:	bf48      	it	mi
 8012e6a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8012e6e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012e72:	0d1b      	lsrs	r3, r3, #20
 8012e74:	051b      	lsls	r3, r3, #20
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	d1bb      	bne.n	8012df2 <_strtod_l+0x72>
 8012e7a:	f7fe faf7 	bl	801146c <__errno>
 8012e7e:	2322      	movs	r3, #34	@ 0x22
 8012e80:	6003      	str	r3, [r0, #0]
 8012e82:	e7b6      	b.n	8012df2 <_strtod_l+0x72>
 8012e84:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8012e88:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8012e8c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8012e90:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8012e94:	e7e7      	b.n	8012e66 <_strtod_l+0xe6>
 8012e96:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8013018 <_strtod_l+0x298>
 8012e9a:	e7e4      	b.n	8012e66 <_strtod_l+0xe6>
 8012e9c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8012ea0:	f04f 3aff 	mov.w	sl, #4294967295
 8012ea4:	e7df      	b.n	8012e66 <_strtod_l+0xe6>
 8012ea6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012ea8:	1c5a      	adds	r2, r3, #1
 8012eaa:	9219      	str	r2, [sp, #100]	@ 0x64
 8012eac:	785b      	ldrb	r3, [r3, #1]
 8012eae:	2b30      	cmp	r3, #48	@ 0x30
 8012eb0:	d0f9      	beq.n	8012ea6 <_strtod_l+0x126>
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	d09d      	beq.n	8012df2 <_strtod_l+0x72>
 8012eb6:	2301      	movs	r3, #1
 8012eb8:	2700      	movs	r7, #0
 8012eba:	9308      	str	r3, [sp, #32]
 8012ebc:	220a      	movs	r2, #10
 8012ebe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012ec0:	46b9      	mov	r9, r7
 8012ec2:	970b      	str	r7, [sp, #44]	@ 0x2c
 8012ec4:	930c      	str	r3, [sp, #48]	@ 0x30
 8012ec6:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8012ec8:	7805      	ldrb	r5, [r0, #0]
 8012eca:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8012ece:	b2d9      	uxtb	r1, r3
 8012ed0:	2909      	cmp	r1, #9
 8012ed2:	d928      	bls.n	8012f26 <_strtod_l+0x1a6>
 8012ed4:	2201      	movs	r2, #1
 8012ed6:	494f      	ldr	r1, [pc, #316]	@ (8013014 <_strtod_l+0x294>)
 8012ed8:	f001 f979 	bl	80141ce <strncmp>
 8012edc:	2800      	cmp	r0, #0
 8012ede:	d032      	beq.n	8012f46 <_strtod_l+0x1c6>
 8012ee0:	2000      	movs	r0, #0
 8012ee2:	462a      	mov	r2, r5
 8012ee4:	464d      	mov	r5, r9
 8012ee6:	4603      	mov	r3, r0
 8012ee8:	900a      	str	r0, [sp, #40]	@ 0x28
 8012eea:	2a65      	cmp	r2, #101	@ 0x65
 8012eec:	d001      	beq.n	8012ef2 <_strtod_l+0x172>
 8012eee:	2a45      	cmp	r2, #69	@ 0x45
 8012ef0:	d114      	bne.n	8012f1c <_strtod_l+0x19c>
 8012ef2:	b91d      	cbnz	r5, 8012efc <_strtod_l+0x17c>
 8012ef4:	9a08      	ldr	r2, [sp, #32]
 8012ef6:	4302      	orrs	r2, r0
 8012ef8:	d096      	beq.n	8012e28 <_strtod_l+0xa8>
 8012efa:	2500      	movs	r5, #0
 8012efc:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8012efe:	1c62      	adds	r2, r4, #1
 8012f00:	9219      	str	r2, [sp, #100]	@ 0x64
 8012f02:	7862      	ldrb	r2, [r4, #1]
 8012f04:	2a2b      	cmp	r2, #43	@ 0x2b
 8012f06:	d079      	beq.n	8012ffc <_strtod_l+0x27c>
 8012f08:	2a2d      	cmp	r2, #45	@ 0x2d
 8012f0a:	d07d      	beq.n	8013008 <_strtod_l+0x288>
 8012f0c:	f04f 0c00 	mov.w	ip, #0
 8012f10:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8012f14:	2909      	cmp	r1, #9
 8012f16:	f240 8085 	bls.w	8013024 <_strtod_l+0x2a4>
 8012f1a:	9419      	str	r4, [sp, #100]	@ 0x64
 8012f1c:	f04f 0800 	mov.w	r8, #0
 8012f20:	e0a5      	b.n	801306e <_strtod_l+0x2ee>
 8012f22:	2300      	movs	r3, #0
 8012f24:	e7c8      	b.n	8012eb8 <_strtod_l+0x138>
 8012f26:	f1b9 0f08 	cmp.w	r9, #8
 8012f2a:	f100 0001 	add.w	r0, r0, #1
 8012f2e:	f109 0901 	add.w	r9, r9, #1
 8012f32:	bfd4      	ite	le
 8012f34:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8012f36:	fb02 3707 	mlagt	r7, r2, r7, r3
 8012f3a:	9019      	str	r0, [sp, #100]	@ 0x64
 8012f3c:	bfdc      	itt	le
 8012f3e:	fb02 3301 	mlale	r3, r2, r1, r3
 8012f42:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8012f44:	e7bf      	b.n	8012ec6 <_strtod_l+0x146>
 8012f46:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012f48:	1c5a      	adds	r2, r3, #1
 8012f4a:	9219      	str	r2, [sp, #100]	@ 0x64
 8012f4c:	785a      	ldrb	r2, [r3, #1]
 8012f4e:	f1b9 0f00 	cmp.w	r9, #0
 8012f52:	d03a      	beq.n	8012fca <_strtod_l+0x24a>
 8012f54:	464d      	mov	r5, r9
 8012f56:	900a      	str	r0, [sp, #40]	@ 0x28
 8012f58:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8012f5c:	2b09      	cmp	r3, #9
 8012f5e:	d912      	bls.n	8012f86 <_strtod_l+0x206>
 8012f60:	2301      	movs	r3, #1
 8012f62:	e7c2      	b.n	8012eea <_strtod_l+0x16a>
 8012f64:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012f66:	3001      	adds	r0, #1
 8012f68:	1c5a      	adds	r2, r3, #1
 8012f6a:	9219      	str	r2, [sp, #100]	@ 0x64
 8012f6c:	785a      	ldrb	r2, [r3, #1]
 8012f6e:	2a30      	cmp	r2, #48	@ 0x30
 8012f70:	d0f8      	beq.n	8012f64 <_strtod_l+0x1e4>
 8012f72:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8012f76:	2b08      	cmp	r3, #8
 8012f78:	f200 84d2 	bhi.w	8013920 <_strtod_l+0xba0>
 8012f7c:	900a      	str	r0, [sp, #40]	@ 0x28
 8012f7e:	2000      	movs	r0, #0
 8012f80:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012f82:	4605      	mov	r5, r0
 8012f84:	930c      	str	r3, [sp, #48]	@ 0x30
 8012f86:	3a30      	subs	r2, #48	@ 0x30
 8012f88:	f100 0301 	add.w	r3, r0, #1
 8012f8c:	d017      	beq.n	8012fbe <_strtod_l+0x23e>
 8012f8e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012f90:	462e      	mov	r6, r5
 8012f92:	f04f 0e0a 	mov.w	lr, #10
 8012f96:	4419      	add	r1, r3
 8012f98:	910a      	str	r1, [sp, #40]	@ 0x28
 8012f9a:	1c71      	adds	r1, r6, #1
 8012f9c:	eba1 0c05 	sub.w	ip, r1, r5
 8012fa0:	4563      	cmp	r3, ip
 8012fa2:	dc14      	bgt.n	8012fce <_strtod_l+0x24e>
 8012fa4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8012fa8:	182b      	adds	r3, r5, r0
 8012faa:	3501      	adds	r5, #1
 8012fac:	2b08      	cmp	r3, #8
 8012fae:	4405      	add	r5, r0
 8012fb0:	dc1a      	bgt.n	8012fe8 <_strtod_l+0x268>
 8012fb2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012fb4:	230a      	movs	r3, #10
 8012fb6:	fb03 2301 	mla	r3, r3, r1, r2
 8012fba:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012fbc:	2300      	movs	r3, #0
 8012fbe:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8012fc0:	4618      	mov	r0, r3
 8012fc2:	1c51      	adds	r1, r2, #1
 8012fc4:	9119      	str	r1, [sp, #100]	@ 0x64
 8012fc6:	7852      	ldrb	r2, [r2, #1]
 8012fc8:	e7c6      	b.n	8012f58 <_strtod_l+0x1d8>
 8012fca:	4648      	mov	r0, r9
 8012fcc:	e7cf      	b.n	8012f6e <_strtod_l+0x1ee>
 8012fce:	2e08      	cmp	r6, #8
 8012fd0:	dc05      	bgt.n	8012fde <_strtod_l+0x25e>
 8012fd2:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8012fd4:	fb0e f606 	mul.w	r6, lr, r6
 8012fd8:	960b      	str	r6, [sp, #44]	@ 0x2c
 8012fda:	460e      	mov	r6, r1
 8012fdc:	e7dd      	b.n	8012f9a <_strtod_l+0x21a>
 8012fde:	2910      	cmp	r1, #16
 8012fe0:	bfd8      	it	le
 8012fe2:	fb0e f707 	mulle.w	r7, lr, r7
 8012fe6:	e7f8      	b.n	8012fda <_strtod_l+0x25a>
 8012fe8:	2b0f      	cmp	r3, #15
 8012fea:	bfdc      	itt	le
 8012fec:	230a      	movle	r3, #10
 8012fee:	fb03 2707 	mlale	r7, r3, r7, r2
 8012ff2:	e7e3      	b.n	8012fbc <_strtod_l+0x23c>
 8012ff4:	2300      	movs	r3, #0
 8012ff6:	930a      	str	r3, [sp, #40]	@ 0x28
 8012ff8:	2301      	movs	r3, #1
 8012ffa:	e77b      	b.n	8012ef4 <_strtod_l+0x174>
 8012ffc:	f04f 0c00 	mov.w	ip, #0
 8013000:	1ca2      	adds	r2, r4, #2
 8013002:	9219      	str	r2, [sp, #100]	@ 0x64
 8013004:	78a2      	ldrb	r2, [r4, #2]
 8013006:	e783      	b.n	8012f10 <_strtod_l+0x190>
 8013008:	f04f 0c01 	mov.w	ip, #1
 801300c:	e7f8      	b.n	8013000 <_strtod_l+0x280>
 801300e:	bf00      	nop
 8013010:	080168dc 	.word	0x080168dc
 8013014:	0801670f 	.word	0x0801670f
 8013018:	7ff00000 	.word	0x7ff00000
 801301c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801301e:	1c51      	adds	r1, r2, #1
 8013020:	9119      	str	r1, [sp, #100]	@ 0x64
 8013022:	7852      	ldrb	r2, [r2, #1]
 8013024:	2a30      	cmp	r2, #48	@ 0x30
 8013026:	d0f9      	beq.n	801301c <_strtod_l+0x29c>
 8013028:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 801302c:	2908      	cmp	r1, #8
 801302e:	f63f af75 	bhi.w	8012f1c <_strtod_l+0x19c>
 8013032:	3a30      	subs	r2, #48	@ 0x30
 8013034:	f04f 080a 	mov.w	r8, #10
 8013038:	9209      	str	r2, [sp, #36]	@ 0x24
 801303a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801303c:	920f      	str	r2, [sp, #60]	@ 0x3c
 801303e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8013040:	1c56      	adds	r6, r2, #1
 8013042:	9619      	str	r6, [sp, #100]	@ 0x64
 8013044:	7852      	ldrb	r2, [r2, #1]
 8013046:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801304a:	f1be 0f09 	cmp.w	lr, #9
 801304e:	d939      	bls.n	80130c4 <_strtod_l+0x344>
 8013050:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8013052:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8013056:	1a76      	subs	r6, r6, r1
 8013058:	2e08      	cmp	r6, #8
 801305a:	dc03      	bgt.n	8013064 <_strtod_l+0x2e4>
 801305c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801305e:	4588      	cmp	r8, r1
 8013060:	bfa8      	it	ge
 8013062:	4688      	movge	r8, r1
 8013064:	f1bc 0f00 	cmp.w	ip, #0
 8013068:	d001      	beq.n	801306e <_strtod_l+0x2ee>
 801306a:	f1c8 0800 	rsb	r8, r8, #0
 801306e:	2d00      	cmp	r5, #0
 8013070:	d14e      	bne.n	8013110 <_strtod_l+0x390>
 8013072:	9908      	ldr	r1, [sp, #32]
 8013074:	4308      	orrs	r0, r1
 8013076:	f47f aebc 	bne.w	8012df2 <_strtod_l+0x72>
 801307a:	2b00      	cmp	r3, #0
 801307c:	f47f aed4 	bne.w	8012e28 <_strtod_l+0xa8>
 8013080:	2a69      	cmp	r2, #105	@ 0x69
 8013082:	d028      	beq.n	80130d6 <_strtod_l+0x356>
 8013084:	dc25      	bgt.n	80130d2 <_strtod_l+0x352>
 8013086:	2a49      	cmp	r2, #73	@ 0x49
 8013088:	d025      	beq.n	80130d6 <_strtod_l+0x356>
 801308a:	2a4e      	cmp	r2, #78	@ 0x4e
 801308c:	f47f aecc 	bne.w	8012e28 <_strtod_l+0xa8>
 8013090:	499a      	ldr	r1, [pc, #616]	@ (80132fc <_strtod_l+0x57c>)
 8013092:	a819      	add	r0, sp, #100	@ 0x64
 8013094:	f001 fba0 	bl	80147d8 <__match>
 8013098:	2800      	cmp	r0, #0
 801309a:	f43f aec5 	beq.w	8012e28 <_strtod_l+0xa8>
 801309e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80130a0:	781b      	ldrb	r3, [r3, #0]
 80130a2:	2b28      	cmp	r3, #40	@ 0x28
 80130a4:	d12e      	bne.n	8013104 <_strtod_l+0x384>
 80130a6:	aa1c      	add	r2, sp, #112	@ 0x70
 80130a8:	4995      	ldr	r1, [pc, #596]	@ (8013300 <_strtod_l+0x580>)
 80130aa:	a819      	add	r0, sp, #100	@ 0x64
 80130ac:	f001 fba8 	bl	8014800 <__hexnan>
 80130b0:	2805      	cmp	r0, #5
 80130b2:	d127      	bne.n	8013104 <_strtod_l+0x384>
 80130b4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80130b6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80130ba:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80130be:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80130c2:	e696      	b.n	8012df2 <_strtod_l+0x72>
 80130c4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80130c6:	fb08 2101 	mla	r1, r8, r1, r2
 80130ca:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80130ce:	9209      	str	r2, [sp, #36]	@ 0x24
 80130d0:	e7b5      	b.n	801303e <_strtod_l+0x2be>
 80130d2:	2a6e      	cmp	r2, #110	@ 0x6e
 80130d4:	e7da      	b.n	801308c <_strtod_l+0x30c>
 80130d6:	498b      	ldr	r1, [pc, #556]	@ (8013304 <_strtod_l+0x584>)
 80130d8:	a819      	add	r0, sp, #100	@ 0x64
 80130da:	f001 fb7d 	bl	80147d8 <__match>
 80130de:	2800      	cmp	r0, #0
 80130e0:	f43f aea2 	beq.w	8012e28 <_strtod_l+0xa8>
 80130e4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80130e6:	a819      	add	r0, sp, #100	@ 0x64
 80130e8:	4987      	ldr	r1, [pc, #540]	@ (8013308 <_strtod_l+0x588>)
 80130ea:	3b01      	subs	r3, #1
 80130ec:	9319      	str	r3, [sp, #100]	@ 0x64
 80130ee:	f001 fb73 	bl	80147d8 <__match>
 80130f2:	b910      	cbnz	r0, 80130fa <_strtod_l+0x37a>
 80130f4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80130f6:	3301      	adds	r3, #1
 80130f8:	9319      	str	r3, [sp, #100]	@ 0x64
 80130fa:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8013318 <_strtod_l+0x598>
 80130fe:	f04f 0a00 	mov.w	sl, #0
 8013102:	e676      	b.n	8012df2 <_strtod_l+0x72>
 8013104:	4881      	ldr	r0, [pc, #516]	@ (801330c <_strtod_l+0x58c>)
 8013106:	f001 f8a7 	bl	8014258 <nan>
 801310a:	ec5b ab10 	vmov	sl, fp, d0
 801310e:	e670      	b.n	8012df2 <_strtod_l+0x72>
 8013110:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013112:	f1b9 0f00 	cmp.w	r9, #0
 8013116:	bf08      	it	eq
 8013118:	46a9      	moveq	r9, r5
 801311a:	2d10      	cmp	r5, #16
 801311c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801311e:	eba8 0303 	sub.w	r3, r8, r3
 8013122:	462c      	mov	r4, r5
 8013124:	bfa8      	it	ge
 8013126:	2410      	movge	r4, #16
 8013128:	9309      	str	r3, [sp, #36]	@ 0x24
 801312a:	f7ee ff7d 	bl	8002028 <__aeabi_ui2d>
 801312e:	2d09      	cmp	r5, #9
 8013130:	4682      	mov	sl, r0
 8013132:	468b      	mov	fp, r1
 8013134:	dc13      	bgt.n	801315e <_strtod_l+0x3de>
 8013136:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013138:	2b00      	cmp	r3, #0
 801313a:	f43f ae5a 	beq.w	8012df2 <_strtod_l+0x72>
 801313e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013140:	dd78      	ble.n	8013234 <_strtod_l+0x4b4>
 8013142:	2b16      	cmp	r3, #22
 8013144:	dc5f      	bgt.n	8013206 <_strtod_l+0x486>
 8013146:	4972      	ldr	r1, [pc, #456]	@ (8013310 <_strtod_l+0x590>)
 8013148:	4652      	mov	r2, sl
 801314a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801314e:	465b      	mov	r3, fp
 8013150:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013154:	f7ee ffe2 	bl	800211c <__aeabi_dmul>
 8013158:	4682      	mov	sl, r0
 801315a:	468b      	mov	fp, r1
 801315c:	e649      	b.n	8012df2 <_strtod_l+0x72>
 801315e:	4b6c      	ldr	r3, [pc, #432]	@ (8013310 <_strtod_l+0x590>)
 8013160:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013164:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8013168:	f7ee ffd8 	bl	800211c <__aeabi_dmul>
 801316c:	4682      	mov	sl, r0
 801316e:	468b      	mov	fp, r1
 8013170:	4638      	mov	r0, r7
 8013172:	f7ee ff59 	bl	8002028 <__aeabi_ui2d>
 8013176:	4602      	mov	r2, r0
 8013178:	460b      	mov	r3, r1
 801317a:	4650      	mov	r0, sl
 801317c:	4659      	mov	r1, fp
 801317e:	f7ee fe17 	bl	8001db0 <__adddf3>
 8013182:	2d0f      	cmp	r5, #15
 8013184:	4682      	mov	sl, r0
 8013186:	468b      	mov	fp, r1
 8013188:	ddd5      	ble.n	8013136 <_strtod_l+0x3b6>
 801318a:	1b2c      	subs	r4, r5, r4
 801318c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801318e:	441c      	add	r4, r3
 8013190:	2c00      	cmp	r4, #0
 8013192:	f340 8093 	ble.w	80132bc <_strtod_l+0x53c>
 8013196:	f014 030f 	ands.w	r3, r4, #15
 801319a:	d00a      	beq.n	80131b2 <_strtod_l+0x432>
 801319c:	495c      	ldr	r1, [pc, #368]	@ (8013310 <_strtod_l+0x590>)
 801319e:	4652      	mov	r2, sl
 80131a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80131a4:	465b      	mov	r3, fp
 80131a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80131aa:	f7ee ffb7 	bl	800211c <__aeabi_dmul>
 80131ae:	4682      	mov	sl, r0
 80131b0:	468b      	mov	fp, r1
 80131b2:	f034 040f 	bics.w	r4, r4, #15
 80131b6:	d073      	beq.n	80132a0 <_strtod_l+0x520>
 80131b8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80131bc:	dd49      	ble.n	8013252 <_strtod_l+0x4d2>
 80131be:	2400      	movs	r4, #0
 80131c0:	46a0      	mov	r8, r4
 80131c2:	46a1      	mov	r9, r4
 80131c4:	940b      	str	r4, [sp, #44]	@ 0x2c
 80131c6:	2322      	movs	r3, #34	@ 0x22
 80131c8:	9a05      	ldr	r2, [sp, #20]
 80131ca:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8013318 <_strtod_l+0x598>
 80131ce:	f04f 0a00 	mov.w	sl, #0
 80131d2:	6013      	str	r3, [r2, #0]
 80131d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	f43f ae0b 	beq.w	8012df2 <_strtod_l+0x72>
 80131dc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80131de:	9805      	ldr	r0, [sp, #20]
 80131e0:	f7ff f938 	bl	8012454 <_Bfree>
 80131e4:	4649      	mov	r1, r9
 80131e6:	9805      	ldr	r0, [sp, #20]
 80131e8:	f7ff f934 	bl	8012454 <_Bfree>
 80131ec:	4641      	mov	r1, r8
 80131ee:	9805      	ldr	r0, [sp, #20]
 80131f0:	f7ff f930 	bl	8012454 <_Bfree>
 80131f4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80131f6:	9805      	ldr	r0, [sp, #20]
 80131f8:	f7ff f92c 	bl	8012454 <_Bfree>
 80131fc:	4621      	mov	r1, r4
 80131fe:	9805      	ldr	r0, [sp, #20]
 8013200:	f7ff f928 	bl	8012454 <_Bfree>
 8013204:	e5f5      	b.n	8012df2 <_strtod_l+0x72>
 8013206:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 801320a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801320c:	4293      	cmp	r3, r2
 801320e:	dbbc      	blt.n	801318a <_strtod_l+0x40a>
 8013210:	f1c5 050f 	rsb	r5, r5, #15
 8013214:	4c3e      	ldr	r4, [pc, #248]	@ (8013310 <_strtod_l+0x590>)
 8013216:	4652      	mov	r2, sl
 8013218:	465b      	mov	r3, fp
 801321a:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801321e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013222:	f7ee ff7b 	bl	800211c <__aeabi_dmul>
 8013226:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013228:	1b5d      	subs	r5, r3, r5
 801322a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801322e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8013232:	e78f      	b.n	8013154 <_strtod_l+0x3d4>
 8013234:	3316      	adds	r3, #22
 8013236:	dba8      	blt.n	801318a <_strtod_l+0x40a>
 8013238:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801323a:	4650      	mov	r0, sl
 801323c:	4659      	mov	r1, fp
 801323e:	eba3 0808 	sub.w	r8, r3, r8
 8013242:	4b33      	ldr	r3, [pc, #204]	@ (8013310 <_strtod_l+0x590>)
 8013244:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8013248:	e9d8 2300 	ldrd	r2, r3, [r8]
 801324c:	f7ef f890 	bl	8002370 <__aeabi_ddiv>
 8013250:	e782      	b.n	8013158 <_strtod_l+0x3d8>
 8013252:	2300      	movs	r3, #0
 8013254:	1124      	asrs	r4, r4, #4
 8013256:	4650      	mov	r0, sl
 8013258:	4659      	mov	r1, fp
 801325a:	4f2e      	ldr	r7, [pc, #184]	@ (8013314 <_strtod_l+0x594>)
 801325c:	461e      	mov	r6, r3
 801325e:	2c01      	cmp	r4, #1
 8013260:	dc21      	bgt.n	80132a6 <_strtod_l+0x526>
 8013262:	b10b      	cbz	r3, 8013268 <_strtod_l+0x4e8>
 8013264:	4682      	mov	sl, r0
 8013266:	468b      	mov	fp, r1
 8013268:	492a      	ldr	r1, [pc, #168]	@ (8013314 <_strtod_l+0x594>)
 801326a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801326e:	4652      	mov	r2, sl
 8013270:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8013274:	465b      	mov	r3, fp
 8013276:	e9d1 0100 	ldrd	r0, r1, [r1]
 801327a:	f7ee ff4f 	bl	800211c <__aeabi_dmul>
 801327e:	4b26      	ldr	r3, [pc, #152]	@ (8013318 <_strtod_l+0x598>)
 8013280:	460a      	mov	r2, r1
 8013282:	4682      	mov	sl, r0
 8013284:	400b      	ands	r3, r1
 8013286:	4925      	ldr	r1, [pc, #148]	@ (801331c <_strtod_l+0x59c>)
 8013288:	428b      	cmp	r3, r1
 801328a:	d898      	bhi.n	80131be <_strtod_l+0x43e>
 801328c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8013290:	428b      	cmp	r3, r1
 8013292:	bf86      	itte	hi
 8013294:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8013320 <_strtod_l+0x5a0>
 8013298:	f04f 3aff 	movhi.w	sl, #4294967295
 801329c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80132a0:	2300      	movs	r3, #0
 80132a2:	9308      	str	r3, [sp, #32]
 80132a4:	e076      	b.n	8013394 <_strtod_l+0x614>
 80132a6:	07e2      	lsls	r2, r4, #31
 80132a8:	d504      	bpl.n	80132b4 <_strtod_l+0x534>
 80132aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80132ae:	f7ee ff35 	bl	800211c <__aeabi_dmul>
 80132b2:	2301      	movs	r3, #1
 80132b4:	3601      	adds	r6, #1
 80132b6:	1064      	asrs	r4, r4, #1
 80132b8:	3708      	adds	r7, #8
 80132ba:	e7d0      	b.n	801325e <_strtod_l+0x4de>
 80132bc:	d0f0      	beq.n	80132a0 <_strtod_l+0x520>
 80132be:	4264      	negs	r4, r4
 80132c0:	f014 020f 	ands.w	r2, r4, #15
 80132c4:	d00a      	beq.n	80132dc <_strtod_l+0x55c>
 80132c6:	4b12      	ldr	r3, [pc, #72]	@ (8013310 <_strtod_l+0x590>)
 80132c8:	4650      	mov	r0, sl
 80132ca:	4659      	mov	r1, fp
 80132cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80132d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132d4:	f7ef f84c 	bl	8002370 <__aeabi_ddiv>
 80132d8:	4682      	mov	sl, r0
 80132da:	468b      	mov	fp, r1
 80132dc:	1124      	asrs	r4, r4, #4
 80132de:	d0df      	beq.n	80132a0 <_strtod_l+0x520>
 80132e0:	2c1f      	cmp	r4, #31
 80132e2:	dd1f      	ble.n	8013324 <_strtod_l+0x5a4>
 80132e4:	2400      	movs	r4, #0
 80132e6:	46a0      	mov	r8, r4
 80132e8:	46a1      	mov	r9, r4
 80132ea:	940b      	str	r4, [sp, #44]	@ 0x2c
 80132ec:	2322      	movs	r3, #34	@ 0x22
 80132ee:	9a05      	ldr	r2, [sp, #20]
 80132f0:	f04f 0a00 	mov.w	sl, #0
 80132f4:	f04f 0b00 	mov.w	fp, #0
 80132f8:	6013      	str	r3, [r2, #0]
 80132fa:	e76b      	b.n	80131d4 <_strtod_l+0x454>
 80132fc:	080165fd 	.word	0x080165fd
 8013300:	080168c8 	.word	0x080168c8
 8013304:	080165f5 	.word	0x080165f5
 8013308:	0801662c 	.word	0x0801662c
 801330c:	08016765 	.word	0x08016765
 8013310:	08016800 	.word	0x08016800
 8013314:	080167d8 	.word	0x080167d8
 8013318:	7ff00000 	.word	0x7ff00000
 801331c:	7ca00000 	.word	0x7ca00000
 8013320:	7fefffff 	.word	0x7fefffff
 8013324:	f014 0310 	ands.w	r3, r4, #16
 8013328:	4650      	mov	r0, sl
 801332a:	4659      	mov	r1, fp
 801332c:	4ea9      	ldr	r6, [pc, #676]	@ (80135d4 <_strtod_l+0x854>)
 801332e:	bf18      	it	ne
 8013330:	236a      	movne	r3, #106	@ 0x6a
 8013332:	9308      	str	r3, [sp, #32]
 8013334:	2300      	movs	r3, #0
 8013336:	07e7      	lsls	r7, r4, #31
 8013338:	d504      	bpl.n	8013344 <_strtod_l+0x5c4>
 801333a:	e9d6 2300 	ldrd	r2, r3, [r6]
 801333e:	f7ee feed 	bl	800211c <__aeabi_dmul>
 8013342:	2301      	movs	r3, #1
 8013344:	1064      	asrs	r4, r4, #1
 8013346:	f106 0608 	add.w	r6, r6, #8
 801334a:	d1f4      	bne.n	8013336 <_strtod_l+0x5b6>
 801334c:	b10b      	cbz	r3, 8013352 <_strtod_l+0x5d2>
 801334e:	4682      	mov	sl, r0
 8013350:	468b      	mov	fp, r1
 8013352:	9b08      	ldr	r3, [sp, #32]
 8013354:	b1b3      	cbz	r3, 8013384 <_strtod_l+0x604>
 8013356:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801335a:	4659      	mov	r1, fp
 801335c:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8013360:	2b00      	cmp	r3, #0
 8013362:	dd0f      	ble.n	8013384 <_strtod_l+0x604>
 8013364:	2b1f      	cmp	r3, #31
 8013366:	dd56      	ble.n	8013416 <_strtod_l+0x696>
 8013368:	2b34      	cmp	r3, #52	@ 0x34
 801336a:	f04f 0a00 	mov.w	sl, #0
 801336e:	bfdb      	ittet	le
 8013370:	f04f 33ff 	movle.w	r3, #4294967295
 8013374:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8013378:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 801337c:	4093      	lslle	r3, r2
 801337e:	bfd8      	it	le
 8013380:	ea03 0b01 	andle.w	fp, r3, r1
 8013384:	2200      	movs	r2, #0
 8013386:	2300      	movs	r3, #0
 8013388:	4650      	mov	r0, sl
 801338a:	4659      	mov	r1, fp
 801338c:	f7ef f92e 	bl	80025ec <__aeabi_dcmpeq>
 8013390:	2800      	cmp	r0, #0
 8013392:	d1a7      	bne.n	80132e4 <_strtod_l+0x564>
 8013394:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013396:	464a      	mov	r2, r9
 8013398:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801339a:	9300      	str	r3, [sp, #0]
 801339c:	462b      	mov	r3, r5
 801339e:	9805      	ldr	r0, [sp, #20]
 80133a0:	f7ff f8c2 	bl	8012528 <__s2b>
 80133a4:	900b      	str	r0, [sp, #44]	@ 0x2c
 80133a6:	2800      	cmp	r0, #0
 80133a8:	f43f af09 	beq.w	80131be <_strtod_l+0x43e>
 80133ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80133ae:	2400      	movs	r4, #0
 80133b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80133b2:	2a00      	cmp	r2, #0
 80133b4:	eba3 0308 	sub.w	r3, r3, r8
 80133b8:	46a0      	mov	r8, r4
 80133ba:	bfa8      	it	ge
 80133bc:	2300      	movge	r3, #0
 80133be:	9312      	str	r3, [sp, #72]	@ 0x48
 80133c0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80133c4:	9316      	str	r3, [sp, #88]	@ 0x58
 80133c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80133c8:	9805      	ldr	r0, [sp, #20]
 80133ca:	6859      	ldr	r1, [r3, #4]
 80133cc:	f7ff f802 	bl	80123d4 <_Balloc>
 80133d0:	4681      	mov	r9, r0
 80133d2:	2800      	cmp	r0, #0
 80133d4:	f43f aef7 	beq.w	80131c6 <_strtod_l+0x446>
 80133d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80133da:	300c      	adds	r0, #12
 80133dc:	691a      	ldr	r2, [r3, #16]
 80133de:	f103 010c 	add.w	r1, r3, #12
 80133e2:	3202      	adds	r2, #2
 80133e4:	0092      	lsls	r2, r2, #2
 80133e6:	f7fe f881 	bl	80114ec <memcpy>
 80133ea:	aa1c      	add	r2, sp, #112	@ 0x70
 80133ec:	a91b      	add	r1, sp, #108	@ 0x6c
 80133ee:	9805      	ldr	r0, [sp, #20]
 80133f0:	ec4b ab10 	vmov	d0, sl, fp
 80133f4:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80133f8:	f7ff fbd4 	bl	8012ba4 <__d2b>
 80133fc:	901a      	str	r0, [sp, #104]	@ 0x68
 80133fe:	2800      	cmp	r0, #0
 8013400:	f43f aee1 	beq.w	80131c6 <_strtod_l+0x446>
 8013404:	2101      	movs	r1, #1
 8013406:	9805      	ldr	r0, [sp, #20]
 8013408:	f7ff f924 	bl	8012654 <__i2b>
 801340c:	4680      	mov	r8, r0
 801340e:	b948      	cbnz	r0, 8013424 <_strtod_l+0x6a4>
 8013410:	f04f 0800 	mov.w	r8, #0
 8013414:	e6d7      	b.n	80131c6 <_strtod_l+0x446>
 8013416:	f04f 32ff 	mov.w	r2, #4294967295
 801341a:	fa02 f303 	lsl.w	r3, r2, r3
 801341e:	ea03 0a0a 	and.w	sl, r3, sl
 8013422:	e7af      	b.n	8013384 <_strtod_l+0x604>
 8013424:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8013426:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8013428:	2d00      	cmp	r5, #0
 801342a:	bfa9      	itett	ge
 801342c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 801342e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8013430:	18ef      	addge	r7, r5, r3
 8013432:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8013434:	bfb8      	it	lt
 8013436:	1b5e      	sublt	r6, r3, r5
 8013438:	9b08      	ldr	r3, [sp, #32]
 801343a:	bfb8      	it	lt
 801343c:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 801343e:	1aed      	subs	r5, r5, r3
 8013440:	4b65      	ldr	r3, [pc, #404]	@ (80135d8 <_strtod_l+0x858>)
 8013442:	4415      	add	r5, r2
 8013444:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8013448:	3d01      	subs	r5, #1
 801344a:	429d      	cmp	r5, r3
 801344c:	da4f      	bge.n	80134ee <_strtod_l+0x76e>
 801344e:	1b5b      	subs	r3, r3, r5
 8013450:	2101      	movs	r1, #1
 8013452:	2b1f      	cmp	r3, #31
 8013454:	eba2 0203 	sub.w	r2, r2, r3
 8013458:	dc3d      	bgt.n	80134d6 <_strtod_l+0x756>
 801345a:	fa01 f303 	lsl.w	r3, r1, r3
 801345e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8013460:	2300      	movs	r3, #0
 8013462:	9310      	str	r3, [sp, #64]	@ 0x40
 8013464:	18bd      	adds	r5, r7, r2
 8013466:	9b08      	ldr	r3, [sp, #32]
 8013468:	4416      	add	r6, r2
 801346a:	42af      	cmp	r7, r5
 801346c:	441e      	add	r6, r3
 801346e:	463b      	mov	r3, r7
 8013470:	bfa8      	it	ge
 8013472:	462b      	movge	r3, r5
 8013474:	42b3      	cmp	r3, r6
 8013476:	bfa8      	it	ge
 8013478:	4633      	movge	r3, r6
 801347a:	2b00      	cmp	r3, #0
 801347c:	bfc2      	ittt	gt
 801347e:	1aed      	subgt	r5, r5, r3
 8013480:	1af6      	subgt	r6, r6, r3
 8013482:	1aff      	subgt	r7, r7, r3
 8013484:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013486:	2b00      	cmp	r3, #0
 8013488:	dd16      	ble.n	80134b8 <_strtod_l+0x738>
 801348a:	4641      	mov	r1, r8
 801348c:	461a      	mov	r2, r3
 801348e:	9805      	ldr	r0, [sp, #20]
 8013490:	f7ff f99a 	bl	80127c8 <__pow5mult>
 8013494:	4680      	mov	r8, r0
 8013496:	2800      	cmp	r0, #0
 8013498:	d0ba      	beq.n	8013410 <_strtod_l+0x690>
 801349a:	4601      	mov	r1, r0
 801349c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801349e:	9805      	ldr	r0, [sp, #20]
 80134a0:	f7ff f8ee 	bl	8012680 <__multiply>
 80134a4:	900a      	str	r0, [sp, #40]	@ 0x28
 80134a6:	2800      	cmp	r0, #0
 80134a8:	f43f ae8d 	beq.w	80131c6 <_strtod_l+0x446>
 80134ac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80134ae:	9805      	ldr	r0, [sp, #20]
 80134b0:	f7fe ffd0 	bl	8012454 <_Bfree>
 80134b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80134b6:	931a      	str	r3, [sp, #104]	@ 0x68
 80134b8:	2d00      	cmp	r5, #0
 80134ba:	dc1d      	bgt.n	80134f8 <_strtod_l+0x778>
 80134bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80134be:	2b00      	cmp	r3, #0
 80134c0:	dd23      	ble.n	801350a <_strtod_l+0x78a>
 80134c2:	4649      	mov	r1, r9
 80134c4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80134c6:	9805      	ldr	r0, [sp, #20]
 80134c8:	f7ff f97e 	bl	80127c8 <__pow5mult>
 80134cc:	4681      	mov	r9, r0
 80134ce:	b9e0      	cbnz	r0, 801350a <_strtod_l+0x78a>
 80134d0:	f04f 0900 	mov.w	r9, #0
 80134d4:	e677      	b.n	80131c6 <_strtod_l+0x446>
 80134d6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80134da:	9113      	str	r1, [sp, #76]	@ 0x4c
 80134dc:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80134e0:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80134e4:	35e2      	adds	r5, #226	@ 0xe2
 80134e6:	fa01 f305 	lsl.w	r3, r1, r5
 80134ea:	9310      	str	r3, [sp, #64]	@ 0x40
 80134ec:	e7ba      	b.n	8013464 <_strtod_l+0x6e4>
 80134ee:	2300      	movs	r3, #0
 80134f0:	9310      	str	r3, [sp, #64]	@ 0x40
 80134f2:	2301      	movs	r3, #1
 80134f4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80134f6:	e7b5      	b.n	8013464 <_strtod_l+0x6e4>
 80134f8:	462a      	mov	r2, r5
 80134fa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80134fc:	9805      	ldr	r0, [sp, #20]
 80134fe:	f7ff f9bd 	bl	801287c <__lshift>
 8013502:	901a      	str	r0, [sp, #104]	@ 0x68
 8013504:	2800      	cmp	r0, #0
 8013506:	d1d9      	bne.n	80134bc <_strtod_l+0x73c>
 8013508:	e65d      	b.n	80131c6 <_strtod_l+0x446>
 801350a:	2e00      	cmp	r6, #0
 801350c:	dd07      	ble.n	801351e <_strtod_l+0x79e>
 801350e:	4649      	mov	r1, r9
 8013510:	4632      	mov	r2, r6
 8013512:	9805      	ldr	r0, [sp, #20]
 8013514:	f7ff f9b2 	bl	801287c <__lshift>
 8013518:	4681      	mov	r9, r0
 801351a:	2800      	cmp	r0, #0
 801351c:	d0d8      	beq.n	80134d0 <_strtod_l+0x750>
 801351e:	2f00      	cmp	r7, #0
 8013520:	dd08      	ble.n	8013534 <_strtod_l+0x7b4>
 8013522:	4641      	mov	r1, r8
 8013524:	463a      	mov	r2, r7
 8013526:	9805      	ldr	r0, [sp, #20]
 8013528:	f7ff f9a8 	bl	801287c <__lshift>
 801352c:	4680      	mov	r8, r0
 801352e:	2800      	cmp	r0, #0
 8013530:	f43f ae49 	beq.w	80131c6 <_strtod_l+0x446>
 8013534:	464a      	mov	r2, r9
 8013536:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013538:	9805      	ldr	r0, [sp, #20]
 801353a:	f7ff fa27 	bl	801298c <__mdiff>
 801353e:	4604      	mov	r4, r0
 8013540:	2800      	cmp	r0, #0
 8013542:	f43f ae40 	beq.w	80131c6 <_strtod_l+0x446>
 8013546:	68c3      	ldr	r3, [r0, #12]
 8013548:	4641      	mov	r1, r8
 801354a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801354c:	2300      	movs	r3, #0
 801354e:	60c3      	str	r3, [r0, #12]
 8013550:	f7ff fa00 	bl	8012954 <__mcmp>
 8013554:	2800      	cmp	r0, #0
 8013556:	da45      	bge.n	80135e4 <_strtod_l+0x864>
 8013558:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801355a:	ea53 030a 	orrs.w	r3, r3, sl
 801355e:	d16b      	bne.n	8013638 <_strtod_l+0x8b8>
 8013560:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013564:	2b00      	cmp	r3, #0
 8013566:	d167      	bne.n	8013638 <_strtod_l+0x8b8>
 8013568:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801356c:	0d1b      	lsrs	r3, r3, #20
 801356e:	051b      	lsls	r3, r3, #20
 8013570:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8013574:	d960      	bls.n	8013638 <_strtod_l+0x8b8>
 8013576:	6963      	ldr	r3, [r4, #20]
 8013578:	b913      	cbnz	r3, 8013580 <_strtod_l+0x800>
 801357a:	6923      	ldr	r3, [r4, #16]
 801357c:	2b01      	cmp	r3, #1
 801357e:	dd5b      	ble.n	8013638 <_strtod_l+0x8b8>
 8013580:	4621      	mov	r1, r4
 8013582:	2201      	movs	r2, #1
 8013584:	9805      	ldr	r0, [sp, #20]
 8013586:	f7ff f979 	bl	801287c <__lshift>
 801358a:	4641      	mov	r1, r8
 801358c:	4604      	mov	r4, r0
 801358e:	f7ff f9e1 	bl	8012954 <__mcmp>
 8013592:	2800      	cmp	r0, #0
 8013594:	dd50      	ble.n	8013638 <_strtod_l+0x8b8>
 8013596:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801359a:	9a08      	ldr	r2, [sp, #32]
 801359c:	0d1b      	lsrs	r3, r3, #20
 801359e:	051b      	lsls	r3, r3, #20
 80135a0:	2a00      	cmp	r2, #0
 80135a2:	d06a      	beq.n	801367a <_strtod_l+0x8fa>
 80135a4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80135a8:	d867      	bhi.n	801367a <_strtod_l+0x8fa>
 80135aa:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80135ae:	f67f ae9d 	bls.w	80132ec <_strtod_l+0x56c>
 80135b2:	4b0a      	ldr	r3, [pc, #40]	@ (80135dc <_strtod_l+0x85c>)
 80135b4:	4650      	mov	r0, sl
 80135b6:	4659      	mov	r1, fp
 80135b8:	2200      	movs	r2, #0
 80135ba:	f7ee fdaf 	bl	800211c <__aeabi_dmul>
 80135be:	4b08      	ldr	r3, [pc, #32]	@ (80135e0 <_strtod_l+0x860>)
 80135c0:	4682      	mov	sl, r0
 80135c2:	468b      	mov	fp, r1
 80135c4:	400b      	ands	r3, r1
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	f47f ae08 	bne.w	80131dc <_strtod_l+0x45c>
 80135cc:	2322      	movs	r3, #34	@ 0x22
 80135ce:	9a05      	ldr	r2, [sp, #20]
 80135d0:	6013      	str	r3, [r2, #0]
 80135d2:	e603      	b.n	80131dc <_strtod_l+0x45c>
 80135d4:	080168f0 	.word	0x080168f0
 80135d8:	fffffc02 	.word	0xfffffc02
 80135dc:	39500000 	.word	0x39500000
 80135e0:	7ff00000 	.word	0x7ff00000
 80135e4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80135e8:	d165      	bne.n	80136b6 <_strtod_l+0x936>
 80135ea:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80135ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80135f0:	b35a      	cbz	r2, 801364a <_strtod_l+0x8ca>
 80135f2:	4a9f      	ldr	r2, [pc, #636]	@ (8013870 <_strtod_l+0xaf0>)
 80135f4:	4293      	cmp	r3, r2
 80135f6:	d12b      	bne.n	8013650 <_strtod_l+0x8d0>
 80135f8:	9b08      	ldr	r3, [sp, #32]
 80135fa:	4651      	mov	r1, sl
 80135fc:	b303      	cbz	r3, 8013640 <_strtod_l+0x8c0>
 80135fe:	465a      	mov	r2, fp
 8013600:	4b9c      	ldr	r3, [pc, #624]	@ (8013874 <_strtod_l+0xaf4>)
 8013602:	4013      	ands	r3, r2
 8013604:	f04f 32ff 	mov.w	r2, #4294967295
 8013608:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 801360c:	d81b      	bhi.n	8013646 <_strtod_l+0x8c6>
 801360e:	0d1b      	lsrs	r3, r3, #20
 8013610:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8013614:	fa02 f303 	lsl.w	r3, r2, r3
 8013618:	4299      	cmp	r1, r3
 801361a:	d119      	bne.n	8013650 <_strtod_l+0x8d0>
 801361c:	4b96      	ldr	r3, [pc, #600]	@ (8013878 <_strtod_l+0xaf8>)
 801361e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013620:	429a      	cmp	r2, r3
 8013622:	d102      	bne.n	801362a <_strtod_l+0x8aa>
 8013624:	3101      	adds	r1, #1
 8013626:	f43f adce 	beq.w	80131c6 <_strtod_l+0x446>
 801362a:	4b92      	ldr	r3, [pc, #584]	@ (8013874 <_strtod_l+0xaf4>)
 801362c:	f04f 0a00 	mov.w	sl, #0
 8013630:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013632:	401a      	ands	r2, r3
 8013634:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8013638:	9b08      	ldr	r3, [sp, #32]
 801363a:	2b00      	cmp	r3, #0
 801363c:	d1b9      	bne.n	80135b2 <_strtod_l+0x832>
 801363e:	e5cd      	b.n	80131dc <_strtod_l+0x45c>
 8013640:	f04f 33ff 	mov.w	r3, #4294967295
 8013644:	e7e8      	b.n	8013618 <_strtod_l+0x898>
 8013646:	4613      	mov	r3, r2
 8013648:	e7e6      	b.n	8013618 <_strtod_l+0x898>
 801364a:	ea53 030a 	orrs.w	r3, r3, sl
 801364e:	d0a2      	beq.n	8013596 <_strtod_l+0x816>
 8013650:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013652:	b1db      	cbz	r3, 801368c <_strtod_l+0x90c>
 8013654:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013656:	4213      	tst	r3, r2
 8013658:	d0ee      	beq.n	8013638 <_strtod_l+0x8b8>
 801365a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801365c:	4650      	mov	r0, sl
 801365e:	9a08      	ldr	r2, [sp, #32]
 8013660:	4659      	mov	r1, fp
 8013662:	b1bb      	cbz	r3, 8013694 <_strtod_l+0x914>
 8013664:	f7ff fb6c 	bl	8012d40 <sulp>
 8013668:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801366c:	ec53 2b10 	vmov	r2, r3, d0
 8013670:	f7ee fb9e 	bl	8001db0 <__adddf3>
 8013674:	4682      	mov	sl, r0
 8013676:	468b      	mov	fp, r1
 8013678:	e7de      	b.n	8013638 <_strtod_l+0x8b8>
 801367a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801367e:	f04f 3aff 	mov.w	sl, #4294967295
 8013682:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8013686:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801368a:	e7d5      	b.n	8013638 <_strtod_l+0x8b8>
 801368c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801368e:	ea13 0f0a 	tst.w	r3, sl
 8013692:	e7e1      	b.n	8013658 <_strtod_l+0x8d8>
 8013694:	f7ff fb54 	bl	8012d40 <sulp>
 8013698:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801369c:	ec53 2b10 	vmov	r2, r3, d0
 80136a0:	f7ee fb84 	bl	8001dac <__aeabi_dsub>
 80136a4:	2200      	movs	r2, #0
 80136a6:	2300      	movs	r3, #0
 80136a8:	4682      	mov	sl, r0
 80136aa:	468b      	mov	fp, r1
 80136ac:	f7ee ff9e 	bl	80025ec <__aeabi_dcmpeq>
 80136b0:	2800      	cmp	r0, #0
 80136b2:	d0c1      	beq.n	8013638 <_strtod_l+0x8b8>
 80136b4:	e61a      	b.n	80132ec <_strtod_l+0x56c>
 80136b6:	4641      	mov	r1, r8
 80136b8:	4620      	mov	r0, r4
 80136ba:	f7ff facb 	bl	8012c54 <__ratio>
 80136be:	2200      	movs	r2, #0
 80136c0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80136c4:	ec57 6b10 	vmov	r6, r7, d0
 80136c8:	4630      	mov	r0, r6
 80136ca:	4639      	mov	r1, r7
 80136cc:	f7ee ffa2 	bl	8002614 <__aeabi_dcmple>
 80136d0:	2800      	cmp	r0, #0
 80136d2:	d06f      	beq.n	80137b4 <_strtod_l+0xa34>
 80136d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	d17a      	bne.n	80137d0 <_strtod_l+0xa50>
 80136da:	f1ba 0f00 	cmp.w	sl, #0
 80136de:	d158      	bne.n	8013792 <_strtod_l+0xa12>
 80136e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80136e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d15a      	bne.n	80137a0 <_strtod_l+0xa20>
 80136ea:	2200      	movs	r2, #0
 80136ec:	4b63      	ldr	r3, [pc, #396]	@ (801387c <_strtod_l+0xafc>)
 80136ee:	4630      	mov	r0, r6
 80136f0:	4639      	mov	r1, r7
 80136f2:	f7ee ff85 	bl	8002600 <__aeabi_dcmplt>
 80136f6:	2800      	cmp	r0, #0
 80136f8:	d159      	bne.n	80137ae <_strtod_l+0xa2e>
 80136fa:	4630      	mov	r0, r6
 80136fc:	4639      	mov	r1, r7
 80136fe:	2200      	movs	r2, #0
 8013700:	4b5f      	ldr	r3, [pc, #380]	@ (8013880 <_strtod_l+0xb00>)
 8013702:	f7ee fd0b 	bl	800211c <__aeabi_dmul>
 8013706:	4606      	mov	r6, r0
 8013708:	460f      	mov	r7, r1
 801370a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 801370e:	9606      	str	r6, [sp, #24]
 8013710:	9307      	str	r3, [sp, #28]
 8013712:	4d58      	ldr	r5, [pc, #352]	@ (8013874 <_strtod_l+0xaf4>)
 8013714:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013718:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801371c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801371e:	401d      	ands	r5, r3
 8013720:	4b58      	ldr	r3, [pc, #352]	@ (8013884 <_strtod_l+0xb04>)
 8013722:	429d      	cmp	r5, r3
 8013724:	f040 80b2 	bne.w	801388c <_strtod_l+0xb0c>
 8013728:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801372a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 801372e:	ec4b ab10 	vmov	d0, sl, fp
 8013732:	f7ff f9c3 	bl	8012abc <__ulp>
 8013736:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801373a:	ec51 0b10 	vmov	r0, r1, d0
 801373e:	f7ee fced 	bl	800211c <__aeabi_dmul>
 8013742:	4652      	mov	r2, sl
 8013744:	465b      	mov	r3, fp
 8013746:	f7ee fb33 	bl	8001db0 <__adddf3>
 801374a:	460b      	mov	r3, r1
 801374c:	4949      	ldr	r1, [pc, #292]	@ (8013874 <_strtod_l+0xaf4>)
 801374e:	4682      	mov	sl, r0
 8013750:	4a4d      	ldr	r2, [pc, #308]	@ (8013888 <_strtod_l+0xb08>)
 8013752:	4019      	ands	r1, r3
 8013754:	4291      	cmp	r1, r2
 8013756:	d942      	bls.n	80137de <_strtod_l+0xa5e>
 8013758:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801375a:	4b47      	ldr	r3, [pc, #284]	@ (8013878 <_strtod_l+0xaf8>)
 801375c:	429a      	cmp	r2, r3
 801375e:	d103      	bne.n	8013768 <_strtod_l+0x9e8>
 8013760:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013762:	3301      	adds	r3, #1
 8013764:	f43f ad2f 	beq.w	80131c6 <_strtod_l+0x446>
 8013768:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8013878 <_strtod_l+0xaf8>
 801376c:	f04f 3aff 	mov.w	sl, #4294967295
 8013770:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013772:	9805      	ldr	r0, [sp, #20]
 8013774:	f7fe fe6e 	bl	8012454 <_Bfree>
 8013778:	4649      	mov	r1, r9
 801377a:	9805      	ldr	r0, [sp, #20]
 801377c:	f7fe fe6a 	bl	8012454 <_Bfree>
 8013780:	4641      	mov	r1, r8
 8013782:	9805      	ldr	r0, [sp, #20]
 8013784:	f7fe fe66 	bl	8012454 <_Bfree>
 8013788:	4621      	mov	r1, r4
 801378a:	9805      	ldr	r0, [sp, #20]
 801378c:	f7fe fe62 	bl	8012454 <_Bfree>
 8013790:	e619      	b.n	80133c6 <_strtod_l+0x646>
 8013792:	f1ba 0f01 	cmp.w	sl, #1
 8013796:	d103      	bne.n	80137a0 <_strtod_l+0xa20>
 8013798:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801379a:	2b00      	cmp	r3, #0
 801379c:	f43f ada6 	beq.w	80132ec <_strtod_l+0x56c>
 80137a0:	2600      	movs	r6, #0
 80137a2:	4f36      	ldr	r7, [pc, #216]	@ (801387c <_strtod_l+0xafc>)
 80137a4:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8013850 <_strtod_l+0xad0>
 80137a8:	ed8d 7b06 	vstr	d7, [sp, #24]
 80137ac:	e7b1      	b.n	8013712 <_strtod_l+0x992>
 80137ae:	2600      	movs	r6, #0
 80137b0:	4f33      	ldr	r7, [pc, #204]	@ (8013880 <_strtod_l+0xb00>)
 80137b2:	e7aa      	b.n	801370a <_strtod_l+0x98a>
 80137b4:	4b32      	ldr	r3, [pc, #200]	@ (8013880 <_strtod_l+0xb00>)
 80137b6:	4630      	mov	r0, r6
 80137b8:	4639      	mov	r1, r7
 80137ba:	2200      	movs	r2, #0
 80137bc:	f7ee fcae 	bl	800211c <__aeabi_dmul>
 80137c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80137c2:	4606      	mov	r6, r0
 80137c4:	460f      	mov	r7, r1
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	d09f      	beq.n	801370a <_strtod_l+0x98a>
 80137ca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80137ce:	e7a0      	b.n	8013712 <_strtod_l+0x992>
 80137d0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8013858 <_strtod_l+0xad8>
 80137d4:	ec57 6b17 	vmov	r6, r7, d7
 80137d8:	ed8d 7b06 	vstr	d7, [sp, #24]
 80137dc:	e799      	b.n	8013712 <_strtod_l+0x992>
 80137de:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80137e2:	9b08      	ldr	r3, [sp, #32]
 80137e4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	d1c1      	bne.n	8013770 <_strtod_l+0x9f0>
 80137ec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80137f0:	0d1b      	lsrs	r3, r3, #20
 80137f2:	051b      	lsls	r3, r3, #20
 80137f4:	429d      	cmp	r5, r3
 80137f6:	d1bb      	bne.n	8013770 <_strtod_l+0x9f0>
 80137f8:	4630      	mov	r0, r6
 80137fa:	4639      	mov	r1, r7
 80137fc:	f7ee ffee 	bl	80027dc <__aeabi_d2lz>
 8013800:	f7ee fc5e 	bl	80020c0 <__aeabi_l2d>
 8013804:	4602      	mov	r2, r0
 8013806:	460b      	mov	r3, r1
 8013808:	4630      	mov	r0, r6
 801380a:	4639      	mov	r1, r7
 801380c:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8013810:	f7ee facc 	bl	8001dac <__aeabi_dsub>
 8013814:	460b      	mov	r3, r1
 8013816:	4602      	mov	r2, r0
 8013818:	ea46 060a 	orr.w	r6, r6, sl
 801381c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8013820:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013822:	431e      	orrs	r6, r3
 8013824:	d06f      	beq.n	8013906 <_strtod_l+0xb86>
 8013826:	a30e      	add	r3, pc, #56	@ (adr r3, 8013860 <_strtod_l+0xae0>)
 8013828:	e9d3 2300 	ldrd	r2, r3, [r3]
 801382c:	f7ee fee8 	bl	8002600 <__aeabi_dcmplt>
 8013830:	2800      	cmp	r0, #0
 8013832:	f47f acd3 	bne.w	80131dc <_strtod_l+0x45c>
 8013836:	a30c      	add	r3, pc, #48	@ (adr r3, 8013868 <_strtod_l+0xae8>)
 8013838:	e9d3 2300 	ldrd	r2, r3, [r3]
 801383c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013840:	f7ee fefc 	bl	800263c <__aeabi_dcmpgt>
 8013844:	2800      	cmp	r0, #0
 8013846:	d093      	beq.n	8013770 <_strtod_l+0x9f0>
 8013848:	e4c8      	b.n	80131dc <_strtod_l+0x45c>
 801384a:	bf00      	nop
 801384c:	f3af 8000 	nop.w
 8013850:	00000000 	.word	0x00000000
 8013854:	bff00000 	.word	0xbff00000
 8013858:	00000000 	.word	0x00000000
 801385c:	3ff00000 	.word	0x3ff00000
 8013860:	94a03595 	.word	0x94a03595
 8013864:	3fdfffff 	.word	0x3fdfffff
 8013868:	35afe535 	.word	0x35afe535
 801386c:	3fe00000 	.word	0x3fe00000
 8013870:	000fffff 	.word	0x000fffff
 8013874:	7ff00000 	.word	0x7ff00000
 8013878:	7fefffff 	.word	0x7fefffff
 801387c:	3ff00000 	.word	0x3ff00000
 8013880:	3fe00000 	.word	0x3fe00000
 8013884:	7fe00000 	.word	0x7fe00000
 8013888:	7c9fffff 	.word	0x7c9fffff
 801388c:	9b08      	ldr	r3, [sp, #32]
 801388e:	b323      	cbz	r3, 80138da <_strtod_l+0xb5a>
 8013890:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8013894:	d821      	bhi.n	80138da <_strtod_l+0xb5a>
 8013896:	4630      	mov	r0, r6
 8013898:	4639      	mov	r1, r7
 801389a:	a327      	add	r3, pc, #156	@ (adr r3, 8013938 <_strtod_l+0xbb8>)
 801389c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138a0:	f7ee feb8 	bl	8002614 <__aeabi_dcmple>
 80138a4:	b1a0      	cbz	r0, 80138d0 <_strtod_l+0xb50>
 80138a6:	4639      	mov	r1, r7
 80138a8:	4630      	mov	r0, r6
 80138aa:	f7ee ff0f 	bl	80026cc <__aeabi_d2uiz>
 80138ae:	2801      	cmp	r0, #1
 80138b0:	bf38      	it	cc
 80138b2:	2001      	movcc	r0, #1
 80138b4:	f7ee fbb8 	bl	8002028 <__aeabi_ui2d>
 80138b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80138ba:	4606      	mov	r6, r0
 80138bc:	460f      	mov	r7, r1
 80138be:	b9fb      	cbnz	r3, 8013900 <_strtod_l+0xb80>
 80138c0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80138c4:	9014      	str	r0, [sp, #80]	@ 0x50
 80138c6:	9315      	str	r3, [sp, #84]	@ 0x54
 80138c8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80138cc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80138d0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80138d2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80138d6:	1b5b      	subs	r3, r3, r5
 80138d8:	9311      	str	r3, [sp, #68]	@ 0x44
 80138da:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80138de:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80138e2:	f7ff f8eb 	bl	8012abc <__ulp>
 80138e6:	4650      	mov	r0, sl
 80138e8:	4659      	mov	r1, fp
 80138ea:	ec53 2b10 	vmov	r2, r3, d0
 80138ee:	f7ee fc15 	bl	800211c <__aeabi_dmul>
 80138f2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80138f6:	f7ee fa5b 	bl	8001db0 <__adddf3>
 80138fa:	4682      	mov	sl, r0
 80138fc:	468b      	mov	fp, r1
 80138fe:	e770      	b.n	80137e2 <_strtod_l+0xa62>
 8013900:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8013904:	e7e0      	b.n	80138c8 <_strtod_l+0xb48>
 8013906:	a30e      	add	r3, pc, #56	@ (adr r3, 8013940 <_strtod_l+0xbc0>)
 8013908:	e9d3 2300 	ldrd	r2, r3, [r3]
 801390c:	f7ee fe78 	bl	8002600 <__aeabi_dcmplt>
 8013910:	e798      	b.n	8013844 <_strtod_l+0xac4>
 8013912:	2300      	movs	r3, #0
 8013914:	930e      	str	r3, [sp, #56]	@ 0x38
 8013916:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013918:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801391a:	6013      	str	r3, [r2, #0]
 801391c:	f7ff ba6d 	b.w	8012dfa <_strtod_l+0x7a>
 8013920:	2a65      	cmp	r2, #101	@ 0x65
 8013922:	f43f ab67 	beq.w	8012ff4 <_strtod_l+0x274>
 8013926:	2a45      	cmp	r2, #69	@ 0x45
 8013928:	f43f ab64 	beq.w	8012ff4 <_strtod_l+0x274>
 801392c:	2301      	movs	r3, #1
 801392e:	f7ff bba0 	b.w	8013072 <_strtod_l+0x2f2>
 8013932:	bf00      	nop
 8013934:	f3af 8000 	nop.w
 8013938:	ffc00000 	.word	0xffc00000
 801393c:	41dfffff 	.word	0x41dfffff
 8013940:	94a03595 	.word	0x94a03595
 8013944:	3fcfffff 	.word	0x3fcfffff

08013948 <_strtod_r>:
 8013948:	4b01      	ldr	r3, [pc, #4]	@ (8013950 <_strtod_r+0x8>)
 801394a:	f7ff ba19 	b.w	8012d80 <_strtod_l>
 801394e:	bf00      	nop
 8013950:	20000084 	.word	0x20000084

08013954 <_strtol_l.isra.0>:
 8013954:	2b24      	cmp	r3, #36	@ 0x24
 8013956:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801395a:	4686      	mov	lr, r0
 801395c:	4690      	mov	r8, r2
 801395e:	d801      	bhi.n	8013964 <_strtol_l.isra.0+0x10>
 8013960:	2b01      	cmp	r3, #1
 8013962:	d106      	bne.n	8013972 <_strtol_l.isra.0+0x1e>
 8013964:	f7fd fd82 	bl	801146c <__errno>
 8013968:	2316      	movs	r3, #22
 801396a:	6003      	str	r3, [r0, #0]
 801396c:	2000      	movs	r0, #0
 801396e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013972:	460d      	mov	r5, r1
 8013974:	4833      	ldr	r0, [pc, #204]	@ (8013a44 <_strtol_l.isra.0+0xf0>)
 8013976:	462a      	mov	r2, r5
 8013978:	f815 4b01 	ldrb.w	r4, [r5], #1
 801397c:	5d06      	ldrb	r6, [r0, r4]
 801397e:	f016 0608 	ands.w	r6, r6, #8
 8013982:	d1f8      	bne.n	8013976 <_strtol_l.isra.0+0x22>
 8013984:	2c2d      	cmp	r4, #45	@ 0x2d
 8013986:	d110      	bne.n	80139aa <_strtol_l.isra.0+0x56>
 8013988:	782c      	ldrb	r4, [r5, #0]
 801398a:	2601      	movs	r6, #1
 801398c:	1c95      	adds	r5, r2, #2
 801398e:	f033 0210 	bics.w	r2, r3, #16
 8013992:	d115      	bne.n	80139c0 <_strtol_l.isra.0+0x6c>
 8013994:	2c30      	cmp	r4, #48	@ 0x30
 8013996:	d10d      	bne.n	80139b4 <_strtol_l.isra.0+0x60>
 8013998:	782a      	ldrb	r2, [r5, #0]
 801399a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801399e:	2a58      	cmp	r2, #88	@ 0x58
 80139a0:	d108      	bne.n	80139b4 <_strtol_l.isra.0+0x60>
 80139a2:	786c      	ldrb	r4, [r5, #1]
 80139a4:	3502      	adds	r5, #2
 80139a6:	2310      	movs	r3, #16
 80139a8:	e00a      	b.n	80139c0 <_strtol_l.isra.0+0x6c>
 80139aa:	2c2b      	cmp	r4, #43	@ 0x2b
 80139ac:	bf04      	itt	eq
 80139ae:	782c      	ldrbeq	r4, [r5, #0]
 80139b0:	1c95      	addeq	r5, r2, #2
 80139b2:	e7ec      	b.n	801398e <_strtol_l.isra.0+0x3a>
 80139b4:	2b00      	cmp	r3, #0
 80139b6:	d1f6      	bne.n	80139a6 <_strtol_l.isra.0+0x52>
 80139b8:	2c30      	cmp	r4, #48	@ 0x30
 80139ba:	bf14      	ite	ne
 80139bc:	230a      	movne	r3, #10
 80139be:	2308      	moveq	r3, #8
 80139c0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80139c4:	2200      	movs	r2, #0
 80139c6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80139ca:	4610      	mov	r0, r2
 80139cc:	fbbc f9f3 	udiv	r9, ip, r3
 80139d0:	fb03 ca19 	mls	sl, r3, r9, ip
 80139d4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80139d8:	2f09      	cmp	r7, #9
 80139da:	d80f      	bhi.n	80139fc <_strtol_l.isra.0+0xa8>
 80139dc:	463c      	mov	r4, r7
 80139de:	42a3      	cmp	r3, r4
 80139e0:	dd1b      	ble.n	8013a1a <_strtol_l.isra.0+0xc6>
 80139e2:	1c57      	adds	r7, r2, #1
 80139e4:	d007      	beq.n	80139f6 <_strtol_l.isra.0+0xa2>
 80139e6:	4581      	cmp	r9, r0
 80139e8:	d314      	bcc.n	8013a14 <_strtol_l.isra.0+0xc0>
 80139ea:	d101      	bne.n	80139f0 <_strtol_l.isra.0+0x9c>
 80139ec:	45a2      	cmp	sl, r4
 80139ee:	db11      	blt.n	8013a14 <_strtol_l.isra.0+0xc0>
 80139f0:	fb00 4003 	mla	r0, r0, r3, r4
 80139f4:	2201      	movs	r2, #1
 80139f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80139fa:	e7eb      	b.n	80139d4 <_strtol_l.isra.0+0x80>
 80139fc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8013a00:	2f19      	cmp	r7, #25
 8013a02:	d801      	bhi.n	8013a08 <_strtol_l.isra.0+0xb4>
 8013a04:	3c37      	subs	r4, #55	@ 0x37
 8013a06:	e7ea      	b.n	80139de <_strtol_l.isra.0+0x8a>
 8013a08:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8013a0c:	2f19      	cmp	r7, #25
 8013a0e:	d804      	bhi.n	8013a1a <_strtol_l.isra.0+0xc6>
 8013a10:	3c57      	subs	r4, #87	@ 0x57
 8013a12:	e7e4      	b.n	80139de <_strtol_l.isra.0+0x8a>
 8013a14:	f04f 32ff 	mov.w	r2, #4294967295
 8013a18:	e7ed      	b.n	80139f6 <_strtol_l.isra.0+0xa2>
 8013a1a:	1c53      	adds	r3, r2, #1
 8013a1c:	d108      	bne.n	8013a30 <_strtol_l.isra.0+0xdc>
 8013a1e:	2322      	movs	r3, #34	@ 0x22
 8013a20:	4660      	mov	r0, ip
 8013a22:	f8ce 3000 	str.w	r3, [lr]
 8013a26:	f1b8 0f00 	cmp.w	r8, #0
 8013a2a:	d0a0      	beq.n	801396e <_strtol_l.isra.0+0x1a>
 8013a2c:	1e69      	subs	r1, r5, #1
 8013a2e:	e006      	b.n	8013a3e <_strtol_l.isra.0+0xea>
 8013a30:	b106      	cbz	r6, 8013a34 <_strtol_l.isra.0+0xe0>
 8013a32:	4240      	negs	r0, r0
 8013a34:	f1b8 0f00 	cmp.w	r8, #0
 8013a38:	d099      	beq.n	801396e <_strtol_l.isra.0+0x1a>
 8013a3a:	2a00      	cmp	r2, #0
 8013a3c:	d1f6      	bne.n	8013a2c <_strtol_l.isra.0+0xd8>
 8013a3e:	f8c8 1000 	str.w	r1, [r8]
 8013a42:	e794      	b.n	801396e <_strtol_l.isra.0+0x1a>
 8013a44:	08016919 	.word	0x08016919

08013a48 <_strtol_r>:
 8013a48:	f7ff bf84 	b.w	8013954 <_strtol_l.isra.0>

08013a4c <__ssputs_r>:
 8013a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013a50:	461f      	mov	r7, r3
 8013a52:	688e      	ldr	r6, [r1, #8]
 8013a54:	4682      	mov	sl, r0
 8013a56:	460c      	mov	r4, r1
 8013a58:	42be      	cmp	r6, r7
 8013a5a:	4690      	mov	r8, r2
 8013a5c:	680b      	ldr	r3, [r1, #0]
 8013a5e:	d82d      	bhi.n	8013abc <__ssputs_r+0x70>
 8013a60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013a64:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8013a68:	d026      	beq.n	8013ab8 <__ssputs_r+0x6c>
 8013a6a:	6965      	ldr	r5, [r4, #20]
 8013a6c:	6909      	ldr	r1, [r1, #16]
 8013a6e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013a72:	eba3 0901 	sub.w	r9, r3, r1
 8013a76:	1c7b      	adds	r3, r7, #1
 8013a78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013a7c:	444b      	add	r3, r9
 8013a7e:	106d      	asrs	r5, r5, #1
 8013a80:	429d      	cmp	r5, r3
 8013a82:	bf38      	it	cc
 8013a84:	461d      	movcc	r5, r3
 8013a86:	0553      	lsls	r3, r2, #21
 8013a88:	d527      	bpl.n	8013ada <__ssputs_r+0x8e>
 8013a8a:	4629      	mov	r1, r5
 8013a8c:	f7fe fc16 	bl	80122bc <_malloc_r>
 8013a90:	4606      	mov	r6, r0
 8013a92:	b360      	cbz	r0, 8013aee <__ssputs_r+0xa2>
 8013a94:	464a      	mov	r2, r9
 8013a96:	6921      	ldr	r1, [r4, #16]
 8013a98:	f7fd fd28 	bl	80114ec <memcpy>
 8013a9c:	89a3      	ldrh	r3, [r4, #12]
 8013a9e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8013aa2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013aa6:	81a3      	strh	r3, [r4, #12]
 8013aa8:	6126      	str	r6, [r4, #16]
 8013aaa:	444e      	add	r6, r9
 8013aac:	6165      	str	r5, [r4, #20]
 8013aae:	eba5 0509 	sub.w	r5, r5, r9
 8013ab2:	6026      	str	r6, [r4, #0]
 8013ab4:	463e      	mov	r6, r7
 8013ab6:	60a5      	str	r5, [r4, #8]
 8013ab8:	42be      	cmp	r6, r7
 8013aba:	d900      	bls.n	8013abe <__ssputs_r+0x72>
 8013abc:	463e      	mov	r6, r7
 8013abe:	4632      	mov	r2, r6
 8013ac0:	4641      	mov	r1, r8
 8013ac2:	6820      	ldr	r0, [r4, #0]
 8013ac4:	f000 fb69 	bl	801419a <memmove>
 8013ac8:	68a3      	ldr	r3, [r4, #8]
 8013aca:	2000      	movs	r0, #0
 8013acc:	1b9b      	subs	r3, r3, r6
 8013ace:	60a3      	str	r3, [r4, #8]
 8013ad0:	6823      	ldr	r3, [r4, #0]
 8013ad2:	4433      	add	r3, r6
 8013ad4:	6023      	str	r3, [r4, #0]
 8013ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013ada:	462a      	mov	r2, r5
 8013adc:	f000 ff3d 	bl	801495a <_realloc_r>
 8013ae0:	4606      	mov	r6, r0
 8013ae2:	2800      	cmp	r0, #0
 8013ae4:	d1e0      	bne.n	8013aa8 <__ssputs_r+0x5c>
 8013ae6:	6921      	ldr	r1, [r4, #16]
 8013ae8:	4650      	mov	r0, sl
 8013aea:	f7fe fb73 	bl	80121d4 <_free_r>
 8013aee:	230c      	movs	r3, #12
 8013af0:	f04f 30ff 	mov.w	r0, #4294967295
 8013af4:	f8ca 3000 	str.w	r3, [sl]
 8013af8:	89a3      	ldrh	r3, [r4, #12]
 8013afa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013afe:	81a3      	strh	r3, [r4, #12]
 8013b00:	e7e9      	b.n	8013ad6 <__ssputs_r+0x8a>
	...

08013b04 <_svfiprintf_r>:
 8013b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b08:	4698      	mov	r8, r3
 8013b0a:	898b      	ldrh	r3, [r1, #12]
 8013b0c:	b09d      	sub	sp, #116	@ 0x74
 8013b0e:	4607      	mov	r7, r0
 8013b10:	061b      	lsls	r3, r3, #24
 8013b12:	460d      	mov	r5, r1
 8013b14:	4614      	mov	r4, r2
 8013b16:	d510      	bpl.n	8013b3a <_svfiprintf_r+0x36>
 8013b18:	690b      	ldr	r3, [r1, #16]
 8013b1a:	b973      	cbnz	r3, 8013b3a <_svfiprintf_r+0x36>
 8013b1c:	2140      	movs	r1, #64	@ 0x40
 8013b1e:	f7fe fbcd 	bl	80122bc <_malloc_r>
 8013b22:	6028      	str	r0, [r5, #0]
 8013b24:	6128      	str	r0, [r5, #16]
 8013b26:	b930      	cbnz	r0, 8013b36 <_svfiprintf_r+0x32>
 8013b28:	230c      	movs	r3, #12
 8013b2a:	603b      	str	r3, [r7, #0]
 8013b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8013b30:	b01d      	add	sp, #116	@ 0x74
 8013b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b36:	2340      	movs	r3, #64	@ 0x40
 8013b38:	616b      	str	r3, [r5, #20]
 8013b3a:	2300      	movs	r3, #0
 8013b3c:	f8cd 800c 	str.w	r8, [sp, #12]
 8013b40:	f04f 0901 	mov.w	r9, #1
 8013b44:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 8013ce8 <_svfiprintf_r+0x1e4>
 8013b48:	9309      	str	r3, [sp, #36]	@ 0x24
 8013b4a:	2320      	movs	r3, #32
 8013b4c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013b50:	2330      	movs	r3, #48	@ 0x30
 8013b52:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013b56:	4623      	mov	r3, r4
 8013b58:	469a      	mov	sl, r3
 8013b5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013b5e:	b10a      	cbz	r2, 8013b64 <_svfiprintf_r+0x60>
 8013b60:	2a25      	cmp	r2, #37	@ 0x25
 8013b62:	d1f9      	bne.n	8013b58 <_svfiprintf_r+0x54>
 8013b64:	ebba 0b04 	subs.w	fp, sl, r4
 8013b68:	d00b      	beq.n	8013b82 <_svfiprintf_r+0x7e>
 8013b6a:	465b      	mov	r3, fp
 8013b6c:	4622      	mov	r2, r4
 8013b6e:	4629      	mov	r1, r5
 8013b70:	4638      	mov	r0, r7
 8013b72:	f7ff ff6b 	bl	8013a4c <__ssputs_r>
 8013b76:	3001      	adds	r0, #1
 8013b78:	f000 80a7 	beq.w	8013cca <_svfiprintf_r+0x1c6>
 8013b7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013b7e:	445a      	add	r2, fp
 8013b80:	9209      	str	r2, [sp, #36]	@ 0x24
 8013b82:	f89a 3000 	ldrb.w	r3, [sl]
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	f000 809f 	beq.w	8013cca <_svfiprintf_r+0x1c6>
 8013b8c:	2300      	movs	r3, #0
 8013b8e:	f04f 32ff 	mov.w	r2, #4294967295
 8013b92:	f10a 0a01 	add.w	sl, sl, #1
 8013b96:	9304      	str	r3, [sp, #16]
 8013b98:	9307      	str	r3, [sp, #28]
 8013b9a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013b9e:	931a      	str	r3, [sp, #104]	@ 0x68
 8013ba0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013ba4:	4654      	mov	r4, sl
 8013ba6:	2205      	movs	r2, #5
 8013ba8:	484f      	ldr	r0, [pc, #316]	@ (8013ce8 <_svfiprintf_r+0x1e4>)
 8013baa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013bae:	f7fd fc8f 	bl	80114d0 <memchr>
 8013bb2:	9a04      	ldr	r2, [sp, #16]
 8013bb4:	b9d8      	cbnz	r0, 8013bee <_svfiprintf_r+0xea>
 8013bb6:	06d0      	lsls	r0, r2, #27
 8013bb8:	bf44      	itt	mi
 8013bba:	2320      	movmi	r3, #32
 8013bbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013bc0:	0711      	lsls	r1, r2, #28
 8013bc2:	bf44      	itt	mi
 8013bc4:	232b      	movmi	r3, #43	@ 0x2b
 8013bc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013bca:	f89a 3000 	ldrb.w	r3, [sl]
 8013bce:	2b2a      	cmp	r3, #42	@ 0x2a
 8013bd0:	d015      	beq.n	8013bfe <_svfiprintf_r+0xfa>
 8013bd2:	9a07      	ldr	r2, [sp, #28]
 8013bd4:	4654      	mov	r4, sl
 8013bd6:	2000      	movs	r0, #0
 8013bd8:	f04f 0c0a 	mov.w	ip, #10
 8013bdc:	4621      	mov	r1, r4
 8013bde:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013be2:	3b30      	subs	r3, #48	@ 0x30
 8013be4:	2b09      	cmp	r3, #9
 8013be6:	d94b      	bls.n	8013c80 <_svfiprintf_r+0x17c>
 8013be8:	b1b0      	cbz	r0, 8013c18 <_svfiprintf_r+0x114>
 8013bea:	9207      	str	r2, [sp, #28]
 8013bec:	e014      	b.n	8013c18 <_svfiprintf_r+0x114>
 8013bee:	eba0 0308 	sub.w	r3, r0, r8
 8013bf2:	46a2      	mov	sl, r4
 8013bf4:	fa09 f303 	lsl.w	r3, r9, r3
 8013bf8:	4313      	orrs	r3, r2
 8013bfa:	9304      	str	r3, [sp, #16]
 8013bfc:	e7d2      	b.n	8013ba4 <_svfiprintf_r+0xa0>
 8013bfe:	9b03      	ldr	r3, [sp, #12]
 8013c00:	1d19      	adds	r1, r3, #4
 8013c02:	681b      	ldr	r3, [r3, #0]
 8013c04:	2b00      	cmp	r3, #0
 8013c06:	9103      	str	r1, [sp, #12]
 8013c08:	bfbb      	ittet	lt
 8013c0a:	425b      	neglt	r3, r3
 8013c0c:	f042 0202 	orrlt.w	r2, r2, #2
 8013c10:	9307      	strge	r3, [sp, #28]
 8013c12:	9307      	strlt	r3, [sp, #28]
 8013c14:	bfb8      	it	lt
 8013c16:	9204      	strlt	r2, [sp, #16]
 8013c18:	7823      	ldrb	r3, [r4, #0]
 8013c1a:	2b2e      	cmp	r3, #46	@ 0x2e
 8013c1c:	d10a      	bne.n	8013c34 <_svfiprintf_r+0x130>
 8013c1e:	7863      	ldrb	r3, [r4, #1]
 8013c20:	2b2a      	cmp	r3, #42	@ 0x2a
 8013c22:	d132      	bne.n	8013c8a <_svfiprintf_r+0x186>
 8013c24:	9b03      	ldr	r3, [sp, #12]
 8013c26:	3402      	adds	r4, #2
 8013c28:	1d1a      	adds	r2, r3, #4
 8013c2a:	681b      	ldr	r3, [r3, #0]
 8013c2c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013c30:	9203      	str	r2, [sp, #12]
 8013c32:	9305      	str	r3, [sp, #20]
 8013c34:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8013cf8 <_svfiprintf_r+0x1f4>
 8013c38:	2203      	movs	r2, #3
 8013c3a:	7821      	ldrb	r1, [r4, #0]
 8013c3c:	4650      	mov	r0, sl
 8013c3e:	f7fd fc47 	bl	80114d0 <memchr>
 8013c42:	b138      	cbz	r0, 8013c54 <_svfiprintf_r+0x150>
 8013c44:	eba0 000a 	sub.w	r0, r0, sl
 8013c48:	2240      	movs	r2, #64	@ 0x40
 8013c4a:	9b04      	ldr	r3, [sp, #16]
 8013c4c:	3401      	adds	r4, #1
 8013c4e:	4082      	lsls	r2, r0
 8013c50:	4313      	orrs	r3, r2
 8013c52:	9304      	str	r3, [sp, #16]
 8013c54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013c58:	2206      	movs	r2, #6
 8013c5a:	4824      	ldr	r0, [pc, #144]	@ (8013cec <_svfiprintf_r+0x1e8>)
 8013c5c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013c60:	f7fd fc36 	bl	80114d0 <memchr>
 8013c64:	2800      	cmp	r0, #0
 8013c66:	d036      	beq.n	8013cd6 <_svfiprintf_r+0x1d2>
 8013c68:	4b21      	ldr	r3, [pc, #132]	@ (8013cf0 <_svfiprintf_r+0x1ec>)
 8013c6a:	bb1b      	cbnz	r3, 8013cb4 <_svfiprintf_r+0x1b0>
 8013c6c:	9b03      	ldr	r3, [sp, #12]
 8013c6e:	3307      	adds	r3, #7
 8013c70:	f023 0307 	bic.w	r3, r3, #7
 8013c74:	3308      	adds	r3, #8
 8013c76:	9303      	str	r3, [sp, #12]
 8013c78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013c7a:	4433      	add	r3, r6
 8013c7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8013c7e:	e76a      	b.n	8013b56 <_svfiprintf_r+0x52>
 8013c80:	fb0c 3202 	mla	r2, ip, r2, r3
 8013c84:	460c      	mov	r4, r1
 8013c86:	2001      	movs	r0, #1
 8013c88:	e7a8      	b.n	8013bdc <_svfiprintf_r+0xd8>
 8013c8a:	2300      	movs	r3, #0
 8013c8c:	3401      	adds	r4, #1
 8013c8e:	f04f 0c0a 	mov.w	ip, #10
 8013c92:	4619      	mov	r1, r3
 8013c94:	9305      	str	r3, [sp, #20]
 8013c96:	4620      	mov	r0, r4
 8013c98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013c9c:	3a30      	subs	r2, #48	@ 0x30
 8013c9e:	2a09      	cmp	r2, #9
 8013ca0:	d903      	bls.n	8013caa <_svfiprintf_r+0x1a6>
 8013ca2:	2b00      	cmp	r3, #0
 8013ca4:	d0c6      	beq.n	8013c34 <_svfiprintf_r+0x130>
 8013ca6:	9105      	str	r1, [sp, #20]
 8013ca8:	e7c4      	b.n	8013c34 <_svfiprintf_r+0x130>
 8013caa:	fb0c 2101 	mla	r1, ip, r1, r2
 8013cae:	4604      	mov	r4, r0
 8013cb0:	2301      	movs	r3, #1
 8013cb2:	e7f0      	b.n	8013c96 <_svfiprintf_r+0x192>
 8013cb4:	ab03      	add	r3, sp, #12
 8013cb6:	462a      	mov	r2, r5
 8013cb8:	a904      	add	r1, sp, #16
 8013cba:	4638      	mov	r0, r7
 8013cbc:	9300      	str	r3, [sp, #0]
 8013cbe:	4b0d      	ldr	r3, [pc, #52]	@ (8013cf4 <_svfiprintf_r+0x1f0>)
 8013cc0:	f7fc fb7e 	bl	80103c0 <_printf_float>
 8013cc4:	1c42      	adds	r2, r0, #1
 8013cc6:	4606      	mov	r6, r0
 8013cc8:	d1d6      	bne.n	8013c78 <_svfiprintf_r+0x174>
 8013cca:	89ab      	ldrh	r3, [r5, #12]
 8013ccc:	065b      	lsls	r3, r3, #25
 8013cce:	f53f af2d 	bmi.w	8013b2c <_svfiprintf_r+0x28>
 8013cd2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013cd4:	e72c      	b.n	8013b30 <_svfiprintf_r+0x2c>
 8013cd6:	ab03      	add	r3, sp, #12
 8013cd8:	462a      	mov	r2, r5
 8013cda:	a904      	add	r1, sp, #16
 8013cdc:	4638      	mov	r0, r7
 8013cde:	9300      	str	r3, [sp, #0]
 8013ce0:	4b04      	ldr	r3, [pc, #16]	@ (8013cf4 <_svfiprintf_r+0x1f0>)
 8013ce2:	f7fc fe09 	bl	80108f8 <_printf_i>
 8013ce6:	e7ed      	b.n	8013cc4 <_svfiprintf_r+0x1c0>
 8013ce8:	08016711 	.word	0x08016711
 8013cec:	0801671b 	.word	0x0801671b
 8013cf0:	080103c1 	.word	0x080103c1
 8013cf4:	08013a4d 	.word	0x08013a4d
 8013cf8:	08016717 	.word	0x08016717

08013cfc <__sfputc_r>:
 8013cfc:	6893      	ldr	r3, [r2, #8]
 8013cfe:	3b01      	subs	r3, #1
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	b410      	push	{r4}
 8013d04:	6093      	str	r3, [r2, #8]
 8013d06:	da08      	bge.n	8013d1a <__sfputc_r+0x1e>
 8013d08:	6994      	ldr	r4, [r2, #24]
 8013d0a:	42a3      	cmp	r3, r4
 8013d0c:	db01      	blt.n	8013d12 <__sfputc_r+0x16>
 8013d0e:	290a      	cmp	r1, #10
 8013d10:	d103      	bne.n	8013d1a <__sfputc_r+0x1e>
 8013d12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013d16:	f7fd bab2 	b.w	801127e <__swbuf_r>
 8013d1a:	6813      	ldr	r3, [r2, #0]
 8013d1c:	1c58      	adds	r0, r3, #1
 8013d1e:	6010      	str	r0, [r2, #0]
 8013d20:	4608      	mov	r0, r1
 8013d22:	7019      	strb	r1, [r3, #0]
 8013d24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013d28:	4770      	bx	lr

08013d2a <__sfputs_r>:
 8013d2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d2c:	4606      	mov	r6, r0
 8013d2e:	460f      	mov	r7, r1
 8013d30:	4614      	mov	r4, r2
 8013d32:	18d5      	adds	r5, r2, r3
 8013d34:	42ac      	cmp	r4, r5
 8013d36:	d101      	bne.n	8013d3c <__sfputs_r+0x12>
 8013d38:	2000      	movs	r0, #0
 8013d3a:	e007      	b.n	8013d4c <__sfputs_r+0x22>
 8013d3c:	463a      	mov	r2, r7
 8013d3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013d42:	4630      	mov	r0, r6
 8013d44:	f7ff ffda 	bl	8013cfc <__sfputc_r>
 8013d48:	1c43      	adds	r3, r0, #1
 8013d4a:	d1f3      	bne.n	8013d34 <__sfputs_r+0xa>
 8013d4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013d50 <_vfiprintf_r>:
 8013d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d54:	460d      	mov	r5, r1
 8013d56:	b09d      	sub	sp, #116	@ 0x74
 8013d58:	4614      	mov	r4, r2
 8013d5a:	4698      	mov	r8, r3
 8013d5c:	4606      	mov	r6, r0
 8013d5e:	b118      	cbz	r0, 8013d68 <_vfiprintf_r+0x18>
 8013d60:	6a03      	ldr	r3, [r0, #32]
 8013d62:	b90b      	cbnz	r3, 8013d68 <_vfiprintf_r+0x18>
 8013d64:	f7fd f980 	bl	8011068 <__sinit>
 8013d68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013d6a:	07d9      	lsls	r1, r3, #31
 8013d6c:	d405      	bmi.n	8013d7a <_vfiprintf_r+0x2a>
 8013d6e:	89ab      	ldrh	r3, [r5, #12]
 8013d70:	059a      	lsls	r2, r3, #22
 8013d72:	d402      	bmi.n	8013d7a <_vfiprintf_r+0x2a>
 8013d74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013d76:	f7fd fba4 	bl	80114c2 <__retarget_lock_acquire_recursive>
 8013d7a:	89ab      	ldrh	r3, [r5, #12]
 8013d7c:	071b      	lsls	r3, r3, #28
 8013d7e:	d501      	bpl.n	8013d84 <_vfiprintf_r+0x34>
 8013d80:	692b      	ldr	r3, [r5, #16]
 8013d82:	b99b      	cbnz	r3, 8013dac <_vfiprintf_r+0x5c>
 8013d84:	4629      	mov	r1, r5
 8013d86:	4630      	mov	r0, r6
 8013d88:	f7fd fab8 	bl	80112fc <__swsetup_r>
 8013d8c:	b170      	cbz	r0, 8013dac <_vfiprintf_r+0x5c>
 8013d8e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013d90:	07dc      	lsls	r4, r3, #31
 8013d92:	d504      	bpl.n	8013d9e <_vfiprintf_r+0x4e>
 8013d94:	f04f 30ff 	mov.w	r0, #4294967295
 8013d98:	b01d      	add	sp, #116	@ 0x74
 8013d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d9e:	89ab      	ldrh	r3, [r5, #12]
 8013da0:	0598      	lsls	r0, r3, #22
 8013da2:	d4f7      	bmi.n	8013d94 <_vfiprintf_r+0x44>
 8013da4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013da6:	f7fd fb8d 	bl	80114c4 <__retarget_lock_release_recursive>
 8013daa:	e7f3      	b.n	8013d94 <_vfiprintf_r+0x44>
 8013dac:	2300      	movs	r3, #0
 8013dae:	f8cd 800c 	str.w	r8, [sp, #12]
 8013db2:	f04f 0901 	mov.w	r9, #1
 8013db6:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8013f6c <_vfiprintf_r+0x21c>
 8013dba:	9309      	str	r3, [sp, #36]	@ 0x24
 8013dbc:	2320      	movs	r3, #32
 8013dbe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013dc2:	2330      	movs	r3, #48	@ 0x30
 8013dc4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013dc8:	4623      	mov	r3, r4
 8013dca:	469a      	mov	sl, r3
 8013dcc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013dd0:	b10a      	cbz	r2, 8013dd6 <_vfiprintf_r+0x86>
 8013dd2:	2a25      	cmp	r2, #37	@ 0x25
 8013dd4:	d1f9      	bne.n	8013dca <_vfiprintf_r+0x7a>
 8013dd6:	ebba 0b04 	subs.w	fp, sl, r4
 8013dda:	d00b      	beq.n	8013df4 <_vfiprintf_r+0xa4>
 8013ddc:	465b      	mov	r3, fp
 8013dde:	4622      	mov	r2, r4
 8013de0:	4629      	mov	r1, r5
 8013de2:	4630      	mov	r0, r6
 8013de4:	f7ff ffa1 	bl	8013d2a <__sfputs_r>
 8013de8:	3001      	adds	r0, #1
 8013dea:	f000 80a7 	beq.w	8013f3c <_vfiprintf_r+0x1ec>
 8013dee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013df0:	445a      	add	r2, fp
 8013df2:	9209      	str	r2, [sp, #36]	@ 0x24
 8013df4:	f89a 3000 	ldrb.w	r3, [sl]
 8013df8:	2b00      	cmp	r3, #0
 8013dfa:	f000 809f 	beq.w	8013f3c <_vfiprintf_r+0x1ec>
 8013dfe:	2300      	movs	r3, #0
 8013e00:	f04f 32ff 	mov.w	r2, #4294967295
 8013e04:	f10a 0a01 	add.w	sl, sl, #1
 8013e08:	9304      	str	r3, [sp, #16]
 8013e0a:	9307      	str	r3, [sp, #28]
 8013e0c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013e10:	931a      	str	r3, [sp, #104]	@ 0x68
 8013e12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013e16:	4654      	mov	r4, sl
 8013e18:	2205      	movs	r2, #5
 8013e1a:	4854      	ldr	r0, [pc, #336]	@ (8013f6c <_vfiprintf_r+0x21c>)
 8013e1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013e20:	f7fd fb56 	bl	80114d0 <memchr>
 8013e24:	9a04      	ldr	r2, [sp, #16]
 8013e26:	b9d8      	cbnz	r0, 8013e60 <_vfiprintf_r+0x110>
 8013e28:	06d1      	lsls	r1, r2, #27
 8013e2a:	bf44      	itt	mi
 8013e2c:	2320      	movmi	r3, #32
 8013e2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013e32:	0713      	lsls	r3, r2, #28
 8013e34:	bf44      	itt	mi
 8013e36:	232b      	movmi	r3, #43	@ 0x2b
 8013e38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013e3c:	f89a 3000 	ldrb.w	r3, [sl]
 8013e40:	2b2a      	cmp	r3, #42	@ 0x2a
 8013e42:	d015      	beq.n	8013e70 <_vfiprintf_r+0x120>
 8013e44:	9a07      	ldr	r2, [sp, #28]
 8013e46:	4654      	mov	r4, sl
 8013e48:	2000      	movs	r0, #0
 8013e4a:	f04f 0c0a 	mov.w	ip, #10
 8013e4e:	4621      	mov	r1, r4
 8013e50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013e54:	3b30      	subs	r3, #48	@ 0x30
 8013e56:	2b09      	cmp	r3, #9
 8013e58:	d94b      	bls.n	8013ef2 <_vfiprintf_r+0x1a2>
 8013e5a:	b1b0      	cbz	r0, 8013e8a <_vfiprintf_r+0x13a>
 8013e5c:	9207      	str	r2, [sp, #28]
 8013e5e:	e014      	b.n	8013e8a <_vfiprintf_r+0x13a>
 8013e60:	eba0 0308 	sub.w	r3, r0, r8
 8013e64:	46a2      	mov	sl, r4
 8013e66:	fa09 f303 	lsl.w	r3, r9, r3
 8013e6a:	4313      	orrs	r3, r2
 8013e6c:	9304      	str	r3, [sp, #16]
 8013e6e:	e7d2      	b.n	8013e16 <_vfiprintf_r+0xc6>
 8013e70:	9b03      	ldr	r3, [sp, #12]
 8013e72:	1d19      	adds	r1, r3, #4
 8013e74:	681b      	ldr	r3, [r3, #0]
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	9103      	str	r1, [sp, #12]
 8013e7a:	bfbb      	ittet	lt
 8013e7c:	425b      	neglt	r3, r3
 8013e7e:	f042 0202 	orrlt.w	r2, r2, #2
 8013e82:	9307      	strge	r3, [sp, #28]
 8013e84:	9307      	strlt	r3, [sp, #28]
 8013e86:	bfb8      	it	lt
 8013e88:	9204      	strlt	r2, [sp, #16]
 8013e8a:	7823      	ldrb	r3, [r4, #0]
 8013e8c:	2b2e      	cmp	r3, #46	@ 0x2e
 8013e8e:	d10a      	bne.n	8013ea6 <_vfiprintf_r+0x156>
 8013e90:	7863      	ldrb	r3, [r4, #1]
 8013e92:	2b2a      	cmp	r3, #42	@ 0x2a
 8013e94:	d132      	bne.n	8013efc <_vfiprintf_r+0x1ac>
 8013e96:	9b03      	ldr	r3, [sp, #12]
 8013e98:	3402      	adds	r4, #2
 8013e9a:	1d1a      	adds	r2, r3, #4
 8013e9c:	681b      	ldr	r3, [r3, #0]
 8013e9e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013ea2:	9203      	str	r2, [sp, #12]
 8013ea4:	9305      	str	r3, [sp, #20]
 8013ea6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013f7c <_vfiprintf_r+0x22c>
 8013eaa:	2203      	movs	r2, #3
 8013eac:	7821      	ldrb	r1, [r4, #0]
 8013eae:	4650      	mov	r0, sl
 8013eb0:	f7fd fb0e 	bl	80114d0 <memchr>
 8013eb4:	b138      	cbz	r0, 8013ec6 <_vfiprintf_r+0x176>
 8013eb6:	eba0 000a 	sub.w	r0, r0, sl
 8013eba:	2240      	movs	r2, #64	@ 0x40
 8013ebc:	9b04      	ldr	r3, [sp, #16]
 8013ebe:	3401      	adds	r4, #1
 8013ec0:	4082      	lsls	r2, r0
 8013ec2:	4313      	orrs	r3, r2
 8013ec4:	9304      	str	r3, [sp, #16]
 8013ec6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013eca:	2206      	movs	r2, #6
 8013ecc:	4828      	ldr	r0, [pc, #160]	@ (8013f70 <_vfiprintf_r+0x220>)
 8013ece:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013ed2:	f7fd fafd 	bl	80114d0 <memchr>
 8013ed6:	2800      	cmp	r0, #0
 8013ed8:	d03f      	beq.n	8013f5a <_vfiprintf_r+0x20a>
 8013eda:	4b26      	ldr	r3, [pc, #152]	@ (8013f74 <_vfiprintf_r+0x224>)
 8013edc:	bb1b      	cbnz	r3, 8013f26 <_vfiprintf_r+0x1d6>
 8013ede:	9b03      	ldr	r3, [sp, #12]
 8013ee0:	3307      	adds	r3, #7
 8013ee2:	f023 0307 	bic.w	r3, r3, #7
 8013ee6:	3308      	adds	r3, #8
 8013ee8:	9303      	str	r3, [sp, #12]
 8013eea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013eec:	443b      	add	r3, r7
 8013eee:	9309      	str	r3, [sp, #36]	@ 0x24
 8013ef0:	e76a      	b.n	8013dc8 <_vfiprintf_r+0x78>
 8013ef2:	fb0c 3202 	mla	r2, ip, r2, r3
 8013ef6:	460c      	mov	r4, r1
 8013ef8:	2001      	movs	r0, #1
 8013efa:	e7a8      	b.n	8013e4e <_vfiprintf_r+0xfe>
 8013efc:	2300      	movs	r3, #0
 8013efe:	3401      	adds	r4, #1
 8013f00:	f04f 0c0a 	mov.w	ip, #10
 8013f04:	4619      	mov	r1, r3
 8013f06:	9305      	str	r3, [sp, #20]
 8013f08:	4620      	mov	r0, r4
 8013f0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013f0e:	3a30      	subs	r2, #48	@ 0x30
 8013f10:	2a09      	cmp	r2, #9
 8013f12:	d903      	bls.n	8013f1c <_vfiprintf_r+0x1cc>
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	d0c6      	beq.n	8013ea6 <_vfiprintf_r+0x156>
 8013f18:	9105      	str	r1, [sp, #20]
 8013f1a:	e7c4      	b.n	8013ea6 <_vfiprintf_r+0x156>
 8013f1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8013f20:	4604      	mov	r4, r0
 8013f22:	2301      	movs	r3, #1
 8013f24:	e7f0      	b.n	8013f08 <_vfiprintf_r+0x1b8>
 8013f26:	ab03      	add	r3, sp, #12
 8013f28:	462a      	mov	r2, r5
 8013f2a:	a904      	add	r1, sp, #16
 8013f2c:	4630      	mov	r0, r6
 8013f2e:	9300      	str	r3, [sp, #0]
 8013f30:	4b11      	ldr	r3, [pc, #68]	@ (8013f78 <_vfiprintf_r+0x228>)
 8013f32:	f7fc fa45 	bl	80103c0 <_printf_float>
 8013f36:	4607      	mov	r7, r0
 8013f38:	1c78      	adds	r0, r7, #1
 8013f3a:	d1d6      	bne.n	8013eea <_vfiprintf_r+0x19a>
 8013f3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013f3e:	07d9      	lsls	r1, r3, #31
 8013f40:	d405      	bmi.n	8013f4e <_vfiprintf_r+0x1fe>
 8013f42:	89ab      	ldrh	r3, [r5, #12]
 8013f44:	059a      	lsls	r2, r3, #22
 8013f46:	d402      	bmi.n	8013f4e <_vfiprintf_r+0x1fe>
 8013f48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013f4a:	f7fd fabb 	bl	80114c4 <__retarget_lock_release_recursive>
 8013f4e:	89ab      	ldrh	r3, [r5, #12]
 8013f50:	065b      	lsls	r3, r3, #25
 8013f52:	f53f af1f 	bmi.w	8013d94 <_vfiprintf_r+0x44>
 8013f56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013f58:	e71e      	b.n	8013d98 <_vfiprintf_r+0x48>
 8013f5a:	ab03      	add	r3, sp, #12
 8013f5c:	462a      	mov	r2, r5
 8013f5e:	a904      	add	r1, sp, #16
 8013f60:	4630      	mov	r0, r6
 8013f62:	9300      	str	r3, [sp, #0]
 8013f64:	4b04      	ldr	r3, [pc, #16]	@ (8013f78 <_vfiprintf_r+0x228>)
 8013f66:	f7fc fcc7 	bl	80108f8 <_printf_i>
 8013f6a:	e7e4      	b.n	8013f36 <_vfiprintf_r+0x1e6>
 8013f6c:	08016711 	.word	0x08016711
 8013f70:	0801671b 	.word	0x0801671b
 8013f74:	080103c1 	.word	0x080103c1
 8013f78:	08013d2b 	.word	0x08013d2b
 8013f7c:	08016717 	.word	0x08016717

08013f80 <__sflush_r>:
 8013f80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013f84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f88:	0716      	lsls	r6, r2, #28
 8013f8a:	4605      	mov	r5, r0
 8013f8c:	460c      	mov	r4, r1
 8013f8e:	d454      	bmi.n	801403a <__sflush_r+0xba>
 8013f90:	684b      	ldr	r3, [r1, #4]
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	dc02      	bgt.n	8013f9c <__sflush_r+0x1c>
 8013f96:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	dd48      	ble.n	801402e <__sflush_r+0xae>
 8013f9c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013f9e:	2e00      	cmp	r6, #0
 8013fa0:	d045      	beq.n	801402e <__sflush_r+0xae>
 8013fa2:	2300      	movs	r3, #0
 8013fa4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8013fa8:	682f      	ldr	r7, [r5, #0]
 8013faa:	6a21      	ldr	r1, [r4, #32]
 8013fac:	602b      	str	r3, [r5, #0]
 8013fae:	d030      	beq.n	8014012 <__sflush_r+0x92>
 8013fb0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8013fb2:	89a3      	ldrh	r3, [r4, #12]
 8013fb4:	0759      	lsls	r1, r3, #29
 8013fb6:	d505      	bpl.n	8013fc4 <__sflush_r+0x44>
 8013fb8:	6863      	ldr	r3, [r4, #4]
 8013fba:	1ad2      	subs	r2, r2, r3
 8013fbc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8013fbe:	b10b      	cbz	r3, 8013fc4 <__sflush_r+0x44>
 8013fc0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013fc2:	1ad2      	subs	r2, r2, r3
 8013fc4:	2300      	movs	r3, #0
 8013fc6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013fc8:	6a21      	ldr	r1, [r4, #32]
 8013fca:	4628      	mov	r0, r5
 8013fcc:	47b0      	blx	r6
 8013fce:	1c43      	adds	r3, r0, #1
 8013fd0:	89a3      	ldrh	r3, [r4, #12]
 8013fd2:	d106      	bne.n	8013fe2 <__sflush_r+0x62>
 8013fd4:	6829      	ldr	r1, [r5, #0]
 8013fd6:	291d      	cmp	r1, #29
 8013fd8:	d82b      	bhi.n	8014032 <__sflush_r+0xb2>
 8013fda:	4a2a      	ldr	r2, [pc, #168]	@ (8014084 <__sflush_r+0x104>)
 8013fdc:	40ca      	lsrs	r2, r1
 8013fde:	07d6      	lsls	r6, r2, #31
 8013fe0:	d527      	bpl.n	8014032 <__sflush_r+0xb2>
 8013fe2:	2200      	movs	r2, #0
 8013fe4:	04d9      	lsls	r1, r3, #19
 8013fe6:	6062      	str	r2, [r4, #4]
 8013fe8:	6922      	ldr	r2, [r4, #16]
 8013fea:	6022      	str	r2, [r4, #0]
 8013fec:	d504      	bpl.n	8013ff8 <__sflush_r+0x78>
 8013fee:	1c42      	adds	r2, r0, #1
 8013ff0:	d101      	bne.n	8013ff6 <__sflush_r+0x76>
 8013ff2:	682b      	ldr	r3, [r5, #0]
 8013ff4:	b903      	cbnz	r3, 8013ff8 <__sflush_r+0x78>
 8013ff6:	6560      	str	r0, [r4, #84]	@ 0x54
 8013ff8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013ffa:	602f      	str	r7, [r5, #0]
 8013ffc:	b1b9      	cbz	r1, 801402e <__sflush_r+0xae>
 8013ffe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014002:	4299      	cmp	r1, r3
 8014004:	d002      	beq.n	801400c <__sflush_r+0x8c>
 8014006:	4628      	mov	r0, r5
 8014008:	f7fe f8e4 	bl	80121d4 <_free_r>
 801400c:	2300      	movs	r3, #0
 801400e:	6363      	str	r3, [r4, #52]	@ 0x34
 8014010:	e00d      	b.n	801402e <__sflush_r+0xae>
 8014012:	2301      	movs	r3, #1
 8014014:	4628      	mov	r0, r5
 8014016:	47b0      	blx	r6
 8014018:	4602      	mov	r2, r0
 801401a:	1c50      	adds	r0, r2, #1
 801401c:	d1c9      	bne.n	8013fb2 <__sflush_r+0x32>
 801401e:	682b      	ldr	r3, [r5, #0]
 8014020:	2b00      	cmp	r3, #0
 8014022:	d0c6      	beq.n	8013fb2 <__sflush_r+0x32>
 8014024:	2b1d      	cmp	r3, #29
 8014026:	d001      	beq.n	801402c <__sflush_r+0xac>
 8014028:	2b16      	cmp	r3, #22
 801402a:	d11d      	bne.n	8014068 <__sflush_r+0xe8>
 801402c:	602f      	str	r7, [r5, #0]
 801402e:	2000      	movs	r0, #0
 8014030:	e021      	b.n	8014076 <__sflush_r+0xf6>
 8014032:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014036:	b21b      	sxth	r3, r3
 8014038:	e01a      	b.n	8014070 <__sflush_r+0xf0>
 801403a:	690f      	ldr	r7, [r1, #16]
 801403c:	2f00      	cmp	r7, #0
 801403e:	d0f6      	beq.n	801402e <__sflush_r+0xae>
 8014040:	0793      	lsls	r3, r2, #30
 8014042:	680e      	ldr	r6, [r1, #0]
 8014044:	600f      	str	r7, [r1, #0]
 8014046:	bf0c      	ite	eq
 8014048:	694b      	ldreq	r3, [r1, #20]
 801404a:	2300      	movne	r3, #0
 801404c:	eba6 0807 	sub.w	r8, r6, r7
 8014050:	608b      	str	r3, [r1, #8]
 8014052:	f1b8 0f00 	cmp.w	r8, #0
 8014056:	ddea      	ble.n	801402e <__sflush_r+0xae>
 8014058:	4643      	mov	r3, r8
 801405a:	463a      	mov	r2, r7
 801405c:	6a21      	ldr	r1, [r4, #32]
 801405e:	4628      	mov	r0, r5
 8014060:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8014062:	47b0      	blx	r6
 8014064:	2800      	cmp	r0, #0
 8014066:	dc08      	bgt.n	801407a <__sflush_r+0xfa>
 8014068:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801406c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014070:	f04f 30ff 	mov.w	r0, #4294967295
 8014074:	81a3      	strh	r3, [r4, #12]
 8014076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801407a:	4407      	add	r7, r0
 801407c:	eba8 0800 	sub.w	r8, r8, r0
 8014080:	e7e7      	b.n	8014052 <__sflush_r+0xd2>
 8014082:	bf00      	nop
 8014084:	20400001 	.word	0x20400001

08014088 <_fflush_r>:
 8014088:	b538      	push	{r3, r4, r5, lr}
 801408a:	690b      	ldr	r3, [r1, #16]
 801408c:	4605      	mov	r5, r0
 801408e:	460c      	mov	r4, r1
 8014090:	b913      	cbnz	r3, 8014098 <_fflush_r+0x10>
 8014092:	2500      	movs	r5, #0
 8014094:	4628      	mov	r0, r5
 8014096:	bd38      	pop	{r3, r4, r5, pc}
 8014098:	b118      	cbz	r0, 80140a2 <_fflush_r+0x1a>
 801409a:	6a03      	ldr	r3, [r0, #32]
 801409c:	b90b      	cbnz	r3, 80140a2 <_fflush_r+0x1a>
 801409e:	f7fc ffe3 	bl	8011068 <__sinit>
 80140a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	d0f3      	beq.n	8014092 <_fflush_r+0xa>
 80140aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80140ac:	07d0      	lsls	r0, r2, #31
 80140ae:	d404      	bmi.n	80140ba <_fflush_r+0x32>
 80140b0:	0599      	lsls	r1, r3, #22
 80140b2:	d402      	bmi.n	80140ba <_fflush_r+0x32>
 80140b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80140b6:	f7fd fa04 	bl	80114c2 <__retarget_lock_acquire_recursive>
 80140ba:	4628      	mov	r0, r5
 80140bc:	4621      	mov	r1, r4
 80140be:	f7ff ff5f 	bl	8013f80 <__sflush_r>
 80140c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80140c4:	4605      	mov	r5, r0
 80140c6:	07da      	lsls	r2, r3, #31
 80140c8:	d4e4      	bmi.n	8014094 <_fflush_r+0xc>
 80140ca:	89a3      	ldrh	r3, [r4, #12]
 80140cc:	059b      	lsls	r3, r3, #22
 80140ce:	d4e1      	bmi.n	8014094 <_fflush_r+0xc>
 80140d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80140d2:	f7fd f9f7 	bl	80114c4 <__retarget_lock_release_recursive>
 80140d6:	e7dd      	b.n	8014094 <_fflush_r+0xc>

080140d8 <__swhatbuf_r>:
 80140d8:	b570      	push	{r4, r5, r6, lr}
 80140da:	460c      	mov	r4, r1
 80140dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80140e0:	b096      	sub	sp, #88	@ 0x58
 80140e2:	4615      	mov	r5, r2
 80140e4:	2900      	cmp	r1, #0
 80140e6:	461e      	mov	r6, r3
 80140e8:	da0c      	bge.n	8014104 <__swhatbuf_r+0x2c>
 80140ea:	89a3      	ldrh	r3, [r4, #12]
 80140ec:	2100      	movs	r1, #0
 80140ee:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80140f2:	bf14      	ite	ne
 80140f4:	2340      	movne	r3, #64	@ 0x40
 80140f6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80140fa:	2000      	movs	r0, #0
 80140fc:	6031      	str	r1, [r6, #0]
 80140fe:	602b      	str	r3, [r5, #0]
 8014100:	b016      	add	sp, #88	@ 0x58
 8014102:	bd70      	pop	{r4, r5, r6, pc}
 8014104:	466a      	mov	r2, sp
 8014106:	f000 f875 	bl	80141f4 <_fstat_r>
 801410a:	2800      	cmp	r0, #0
 801410c:	dbed      	blt.n	80140ea <__swhatbuf_r+0x12>
 801410e:	9901      	ldr	r1, [sp, #4]
 8014110:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8014114:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014118:	4259      	negs	r1, r3
 801411a:	4159      	adcs	r1, r3
 801411c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014120:	e7eb      	b.n	80140fa <__swhatbuf_r+0x22>

08014122 <__smakebuf_r>:
 8014122:	898b      	ldrh	r3, [r1, #12]
 8014124:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014126:	079d      	lsls	r5, r3, #30
 8014128:	4606      	mov	r6, r0
 801412a:	460c      	mov	r4, r1
 801412c:	d507      	bpl.n	801413e <__smakebuf_r+0x1c>
 801412e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014132:	6023      	str	r3, [r4, #0]
 8014134:	6123      	str	r3, [r4, #16]
 8014136:	2301      	movs	r3, #1
 8014138:	6163      	str	r3, [r4, #20]
 801413a:	b003      	add	sp, #12
 801413c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801413e:	ab01      	add	r3, sp, #4
 8014140:	466a      	mov	r2, sp
 8014142:	f7ff ffc9 	bl	80140d8 <__swhatbuf_r>
 8014146:	9f00      	ldr	r7, [sp, #0]
 8014148:	4605      	mov	r5, r0
 801414a:	4630      	mov	r0, r6
 801414c:	4639      	mov	r1, r7
 801414e:	f7fe f8b5 	bl	80122bc <_malloc_r>
 8014152:	b948      	cbnz	r0, 8014168 <__smakebuf_r+0x46>
 8014154:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014158:	059a      	lsls	r2, r3, #22
 801415a:	d4ee      	bmi.n	801413a <__smakebuf_r+0x18>
 801415c:	f023 0303 	bic.w	r3, r3, #3
 8014160:	f043 0302 	orr.w	r3, r3, #2
 8014164:	81a3      	strh	r3, [r4, #12]
 8014166:	e7e2      	b.n	801412e <__smakebuf_r+0xc>
 8014168:	89a3      	ldrh	r3, [r4, #12]
 801416a:	6020      	str	r0, [r4, #0]
 801416c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014170:	81a3      	strh	r3, [r4, #12]
 8014172:	9b01      	ldr	r3, [sp, #4]
 8014174:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014178:	b15b      	cbz	r3, 8014192 <__smakebuf_r+0x70>
 801417a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801417e:	4630      	mov	r0, r6
 8014180:	f000 f84a 	bl	8014218 <_isatty_r>
 8014184:	b128      	cbz	r0, 8014192 <__smakebuf_r+0x70>
 8014186:	89a3      	ldrh	r3, [r4, #12]
 8014188:	f023 0303 	bic.w	r3, r3, #3
 801418c:	f043 0301 	orr.w	r3, r3, #1
 8014190:	81a3      	strh	r3, [r4, #12]
 8014192:	89a3      	ldrh	r3, [r4, #12]
 8014194:	431d      	orrs	r5, r3
 8014196:	81a5      	strh	r5, [r4, #12]
 8014198:	e7cf      	b.n	801413a <__smakebuf_r+0x18>

0801419a <memmove>:
 801419a:	4288      	cmp	r0, r1
 801419c:	b510      	push	{r4, lr}
 801419e:	eb01 0402 	add.w	r4, r1, r2
 80141a2:	d902      	bls.n	80141aa <memmove+0x10>
 80141a4:	4284      	cmp	r4, r0
 80141a6:	4623      	mov	r3, r4
 80141a8:	d807      	bhi.n	80141ba <memmove+0x20>
 80141aa:	1e43      	subs	r3, r0, #1
 80141ac:	42a1      	cmp	r1, r4
 80141ae:	d008      	beq.n	80141c2 <memmove+0x28>
 80141b0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80141b4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80141b8:	e7f8      	b.n	80141ac <memmove+0x12>
 80141ba:	4402      	add	r2, r0
 80141bc:	4601      	mov	r1, r0
 80141be:	428a      	cmp	r2, r1
 80141c0:	d100      	bne.n	80141c4 <memmove+0x2a>
 80141c2:	bd10      	pop	{r4, pc}
 80141c4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80141c8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80141cc:	e7f7      	b.n	80141be <memmove+0x24>

080141ce <strncmp>:
 80141ce:	b510      	push	{r4, lr}
 80141d0:	b16a      	cbz	r2, 80141ee <strncmp+0x20>
 80141d2:	3901      	subs	r1, #1
 80141d4:	1884      	adds	r4, r0, r2
 80141d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80141da:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80141de:	429a      	cmp	r2, r3
 80141e0:	d103      	bne.n	80141ea <strncmp+0x1c>
 80141e2:	42a0      	cmp	r0, r4
 80141e4:	d001      	beq.n	80141ea <strncmp+0x1c>
 80141e6:	2a00      	cmp	r2, #0
 80141e8:	d1f5      	bne.n	80141d6 <strncmp+0x8>
 80141ea:	1ad0      	subs	r0, r2, r3
 80141ec:	bd10      	pop	{r4, pc}
 80141ee:	4610      	mov	r0, r2
 80141f0:	e7fc      	b.n	80141ec <strncmp+0x1e>
	...

080141f4 <_fstat_r>:
 80141f4:	b538      	push	{r3, r4, r5, lr}
 80141f6:	2300      	movs	r3, #0
 80141f8:	4d06      	ldr	r5, [pc, #24]	@ (8014214 <_fstat_r+0x20>)
 80141fa:	4604      	mov	r4, r0
 80141fc:	4608      	mov	r0, r1
 80141fe:	4611      	mov	r1, r2
 8014200:	602b      	str	r3, [r5, #0]
 8014202:	f7f0 fa8c 	bl	800471e <_fstat>
 8014206:	1c43      	adds	r3, r0, #1
 8014208:	d102      	bne.n	8014210 <_fstat_r+0x1c>
 801420a:	682b      	ldr	r3, [r5, #0]
 801420c:	b103      	cbz	r3, 8014210 <_fstat_r+0x1c>
 801420e:	6023      	str	r3, [r4, #0]
 8014210:	bd38      	pop	{r3, r4, r5, pc}
 8014212:	bf00      	nop
 8014214:	2000093c 	.word	0x2000093c

08014218 <_isatty_r>:
 8014218:	b538      	push	{r3, r4, r5, lr}
 801421a:	2300      	movs	r3, #0
 801421c:	4d05      	ldr	r5, [pc, #20]	@ (8014234 <_isatty_r+0x1c>)
 801421e:	4604      	mov	r4, r0
 8014220:	4608      	mov	r0, r1
 8014222:	602b      	str	r3, [r5, #0]
 8014224:	f7f0 fa8b 	bl	800473e <_isatty>
 8014228:	1c43      	adds	r3, r0, #1
 801422a:	d102      	bne.n	8014232 <_isatty_r+0x1a>
 801422c:	682b      	ldr	r3, [r5, #0]
 801422e:	b103      	cbz	r3, 8014232 <_isatty_r+0x1a>
 8014230:	6023      	str	r3, [r4, #0]
 8014232:	bd38      	pop	{r3, r4, r5, pc}
 8014234:	2000093c 	.word	0x2000093c

08014238 <_sbrk_r>:
 8014238:	b538      	push	{r3, r4, r5, lr}
 801423a:	2300      	movs	r3, #0
 801423c:	4d05      	ldr	r5, [pc, #20]	@ (8014254 <_sbrk_r+0x1c>)
 801423e:	4604      	mov	r4, r0
 8014240:	4608      	mov	r0, r1
 8014242:	602b      	str	r3, [r5, #0]
 8014244:	f7f0 fa94 	bl	8004770 <_sbrk>
 8014248:	1c43      	adds	r3, r0, #1
 801424a:	d102      	bne.n	8014252 <_sbrk_r+0x1a>
 801424c:	682b      	ldr	r3, [r5, #0]
 801424e:	b103      	cbz	r3, 8014252 <_sbrk_r+0x1a>
 8014250:	6023      	str	r3, [r4, #0]
 8014252:	bd38      	pop	{r3, r4, r5, pc}
 8014254:	2000093c 	.word	0x2000093c

08014258 <nan>:
 8014258:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8014260 <nan+0x8>
 801425c:	4770      	bx	lr
 801425e:	bf00      	nop
 8014260:	00000000 	.word	0x00000000
 8014264:	7ff80000 	.word	0x7ff80000

08014268 <__assert_func>:
 8014268:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801426a:	4614      	mov	r4, r2
 801426c:	461a      	mov	r2, r3
 801426e:	4b09      	ldr	r3, [pc, #36]	@ (8014294 <__assert_func+0x2c>)
 8014270:	4605      	mov	r5, r0
 8014272:	681b      	ldr	r3, [r3, #0]
 8014274:	68d8      	ldr	r0, [r3, #12]
 8014276:	b14c      	cbz	r4, 801428c <__assert_func+0x24>
 8014278:	4b07      	ldr	r3, [pc, #28]	@ (8014298 <__assert_func+0x30>)
 801427a:	9100      	str	r1, [sp, #0]
 801427c:	4907      	ldr	r1, [pc, #28]	@ (801429c <__assert_func+0x34>)
 801427e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014282:	462b      	mov	r3, r5
 8014284:	f000 fba4 	bl	80149d0 <fiprintf>
 8014288:	f000 fbb4 	bl	80149f4 <abort>
 801428c:	4b04      	ldr	r3, [pc, #16]	@ (80142a0 <__assert_func+0x38>)
 801428e:	461c      	mov	r4, r3
 8014290:	e7f3      	b.n	801427a <__assert_func+0x12>
 8014292:	bf00      	nop
 8014294:	20000034 	.word	0x20000034
 8014298:	0801672a 	.word	0x0801672a
 801429c:	08016737 	.word	0x08016737
 80142a0:	08016765 	.word	0x08016765

080142a4 <_calloc_r>:
 80142a4:	b570      	push	{r4, r5, r6, lr}
 80142a6:	fba1 5402 	umull	r5, r4, r1, r2
 80142aa:	b934      	cbnz	r4, 80142ba <_calloc_r+0x16>
 80142ac:	4629      	mov	r1, r5
 80142ae:	f7fe f805 	bl	80122bc <_malloc_r>
 80142b2:	4606      	mov	r6, r0
 80142b4:	b928      	cbnz	r0, 80142c2 <_calloc_r+0x1e>
 80142b6:	4630      	mov	r0, r6
 80142b8:	bd70      	pop	{r4, r5, r6, pc}
 80142ba:	220c      	movs	r2, #12
 80142bc:	2600      	movs	r6, #0
 80142be:	6002      	str	r2, [r0, #0]
 80142c0:	e7f9      	b.n	80142b6 <_calloc_r+0x12>
 80142c2:	462a      	mov	r2, r5
 80142c4:	4621      	mov	r1, r4
 80142c6:	f7fd f87f 	bl	80113c8 <memset>
 80142ca:	e7f4      	b.n	80142b6 <_calloc_r+0x12>

080142cc <rshift>:
 80142cc:	6903      	ldr	r3, [r0, #16]
 80142ce:	114a      	asrs	r2, r1, #5
 80142d0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80142d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80142d8:	f100 0414 	add.w	r4, r0, #20
 80142dc:	dd45      	ble.n	801436a <rshift+0x9e>
 80142de:	f011 011f 	ands.w	r1, r1, #31
 80142e2:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80142e6:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80142ea:	d10c      	bne.n	8014306 <rshift+0x3a>
 80142ec:	f100 0710 	add.w	r7, r0, #16
 80142f0:	4629      	mov	r1, r5
 80142f2:	42b1      	cmp	r1, r6
 80142f4:	d334      	bcc.n	8014360 <rshift+0x94>
 80142f6:	1a9b      	subs	r3, r3, r2
 80142f8:	1eea      	subs	r2, r5, #3
 80142fa:	009b      	lsls	r3, r3, #2
 80142fc:	4296      	cmp	r6, r2
 80142fe:	bf38      	it	cc
 8014300:	2300      	movcc	r3, #0
 8014302:	4423      	add	r3, r4
 8014304:	e015      	b.n	8014332 <rshift+0x66>
 8014306:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801430a:	f1c1 0820 	rsb	r8, r1, #32
 801430e:	f105 0e04 	add.w	lr, r5, #4
 8014312:	46a1      	mov	r9, r4
 8014314:	40cf      	lsrs	r7, r1
 8014316:	4576      	cmp	r6, lr
 8014318:	46f4      	mov	ip, lr
 801431a:	d815      	bhi.n	8014348 <rshift+0x7c>
 801431c:	1a9a      	subs	r2, r3, r2
 801431e:	3501      	adds	r5, #1
 8014320:	0092      	lsls	r2, r2, #2
 8014322:	3a04      	subs	r2, #4
 8014324:	42ae      	cmp	r6, r5
 8014326:	bf38      	it	cc
 8014328:	2200      	movcc	r2, #0
 801432a:	18a3      	adds	r3, r4, r2
 801432c:	50a7      	str	r7, [r4, r2]
 801432e:	b107      	cbz	r7, 8014332 <rshift+0x66>
 8014330:	3304      	adds	r3, #4
 8014332:	1b1a      	subs	r2, r3, r4
 8014334:	42a3      	cmp	r3, r4
 8014336:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801433a:	bf08      	it	eq
 801433c:	2300      	moveq	r3, #0
 801433e:	6102      	str	r2, [r0, #16]
 8014340:	bf08      	it	eq
 8014342:	6143      	streq	r3, [r0, #20]
 8014344:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014348:	f8dc c000 	ldr.w	ip, [ip]
 801434c:	fa0c fc08 	lsl.w	ip, ip, r8
 8014350:	ea4c 0707 	orr.w	r7, ip, r7
 8014354:	f849 7b04 	str.w	r7, [r9], #4
 8014358:	f85e 7b04 	ldr.w	r7, [lr], #4
 801435c:	40cf      	lsrs	r7, r1
 801435e:	e7da      	b.n	8014316 <rshift+0x4a>
 8014360:	f851 cb04 	ldr.w	ip, [r1], #4
 8014364:	f847 cf04 	str.w	ip, [r7, #4]!
 8014368:	e7c3      	b.n	80142f2 <rshift+0x26>
 801436a:	4623      	mov	r3, r4
 801436c:	e7e1      	b.n	8014332 <rshift+0x66>

0801436e <__hexdig_fun>:
 801436e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8014372:	2b09      	cmp	r3, #9
 8014374:	d802      	bhi.n	801437c <__hexdig_fun+0xe>
 8014376:	3820      	subs	r0, #32
 8014378:	b2c0      	uxtb	r0, r0
 801437a:	4770      	bx	lr
 801437c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8014380:	2b05      	cmp	r3, #5
 8014382:	d801      	bhi.n	8014388 <__hexdig_fun+0x1a>
 8014384:	3847      	subs	r0, #71	@ 0x47
 8014386:	e7f7      	b.n	8014378 <__hexdig_fun+0xa>
 8014388:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801438c:	2b05      	cmp	r3, #5
 801438e:	d801      	bhi.n	8014394 <__hexdig_fun+0x26>
 8014390:	3827      	subs	r0, #39	@ 0x27
 8014392:	e7f1      	b.n	8014378 <__hexdig_fun+0xa>
 8014394:	2000      	movs	r0, #0
 8014396:	4770      	bx	lr

08014398 <__gethex>:
 8014398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801439c:	b085      	sub	sp, #20
 801439e:	468a      	mov	sl, r1
 80143a0:	4690      	mov	r8, r2
 80143a2:	9302      	str	r3, [sp, #8]
 80143a4:	680b      	ldr	r3, [r1, #0]
 80143a6:	9001      	str	r0, [sp, #4]
 80143a8:	1c9c      	adds	r4, r3, #2
 80143aa:	46a1      	mov	r9, r4
 80143ac:	f814 0b01 	ldrb.w	r0, [r4], #1
 80143b0:	2830      	cmp	r0, #48	@ 0x30
 80143b2:	d0fa      	beq.n	80143aa <__gethex+0x12>
 80143b4:	eba9 0303 	sub.w	r3, r9, r3
 80143b8:	f1a3 0b02 	sub.w	fp, r3, #2
 80143bc:	f7ff ffd7 	bl	801436e <__hexdig_fun>
 80143c0:	4605      	mov	r5, r0
 80143c2:	2800      	cmp	r0, #0
 80143c4:	d166      	bne.n	8014494 <__gethex+0xfc>
 80143c6:	2201      	movs	r2, #1
 80143c8:	499e      	ldr	r1, [pc, #632]	@ (8014644 <__gethex+0x2ac>)
 80143ca:	4648      	mov	r0, r9
 80143cc:	f7ff feff 	bl	80141ce <strncmp>
 80143d0:	4607      	mov	r7, r0
 80143d2:	2800      	cmp	r0, #0
 80143d4:	d165      	bne.n	80144a2 <__gethex+0x10a>
 80143d6:	f899 0001 	ldrb.w	r0, [r9, #1]
 80143da:	4626      	mov	r6, r4
 80143dc:	f7ff ffc7 	bl	801436e <__hexdig_fun>
 80143e0:	2800      	cmp	r0, #0
 80143e2:	d060      	beq.n	80144a6 <__gethex+0x10e>
 80143e4:	4623      	mov	r3, r4
 80143e6:	7818      	ldrb	r0, [r3, #0]
 80143e8:	4699      	mov	r9, r3
 80143ea:	3301      	adds	r3, #1
 80143ec:	2830      	cmp	r0, #48	@ 0x30
 80143ee:	d0fa      	beq.n	80143e6 <__gethex+0x4e>
 80143f0:	f7ff ffbd 	bl	801436e <__hexdig_fun>
 80143f4:	fab0 f580 	clz	r5, r0
 80143f8:	f04f 0b01 	mov.w	fp, #1
 80143fc:	096d      	lsrs	r5, r5, #5
 80143fe:	464a      	mov	r2, r9
 8014400:	4616      	mov	r6, r2
 8014402:	3201      	adds	r2, #1
 8014404:	7830      	ldrb	r0, [r6, #0]
 8014406:	f7ff ffb2 	bl	801436e <__hexdig_fun>
 801440a:	2800      	cmp	r0, #0
 801440c:	d1f8      	bne.n	8014400 <__gethex+0x68>
 801440e:	2201      	movs	r2, #1
 8014410:	498c      	ldr	r1, [pc, #560]	@ (8014644 <__gethex+0x2ac>)
 8014412:	4630      	mov	r0, r6
 8014414:	f7ff fedb 	bl	80141ce <strncmp>
 8014418:	2800      	cmp	r0, #0
 801441a:	d13e      	bne.n	801449a <__gethex+0x102>
 801441c:	b944      	cbnz	r4, 8014430 <__gethex+0x98>
 801441e:	1c74      	adds	r4, r6, #1
 8014420:	4622      	mov	r2, r4
 8014422:	4616      	mov	r6, r2
 8014424:	3201      	adds	r2, #1
 8014426:	7830      	ldrb	r0, [r6, #0]
 8014428:	f7ff ffa1 	bl	801436e <__hexdig_fun>
 801442c:	2800      	cmp	r0, #0
 801442e:	d1f8      	bne.n	8014422 <__gethex+0x8a>
 8014430:	1ba4      	subs	r4, r4, r6
 8014432:	00a7      	lsls	r7, r4, #2
 8014434:	7833      	ldrb	r3, [r6, #0]
 8014436:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 801443a:	2b50      	cmp	r3, #80	@ 0x50
 801443c:	d13d      	bne.n	80144ba <__gethex+0x122>
 801443e:	7873      	ldrb	r3, [r6, #1]
 8014440:	2b2b      	cmp	r3, #43	@ 0x2b
 8014442:	d032      	beq.n	80144aa <__gethex+0x112>
 8014444:	2b2d      	cmp	r3, #45	@ 0x2d
 8014446:	d033      	beq.n	80144b0 <__gethex+0x118>
 8014448:	1c71      	adds	r1, r6, #1
 801444a:	2400      	movs	r4, #0
 801444c:	7808      	ldrb	r0, [r1, #0]
 801444e:	f7ff ff8e 	bl	801436e <__hexdig_fun>
 8014452:	1e43      	subs	r3, r0, #1
 8014454:	b2db      	uxtb	r3, r3
 8014456:	2b18      	cmp	r3, #24
 8014458:	d82f      	bhi.n	80144ba <__gethex+0x122>
 801445a:	f1a0 0210 	sub.w	r2, r0, #16
 801445e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8014462:	f7ff ff84 	bl	801436e <__hexdig_fun>
 8014466:	f100 3cff 	add.w	ip, r0, #4294967295
 801446a:	230a      	movs	r3, #10
 801446c:	fa5f fc8c 	uxtb.w	ip, ip
 8014470:	f1bc 0f18 	cmp.w	ip, #24
 8014474:	d91e      	bls.n	80144b4 <__gethex+0x11c>
 8014476:	b104      	cbz	r4, 801447a <__gethex+0xe2>
 8014478:	4252      	negs	r2, r2
 801447a:	4417      	add	r7, r2
 801447c:	f8ca 1000 	str.w	r1, [sl]
 8014480:	b1ed      	cbz	r5, 80144be <__gethex+0x126>
 8014482:	f1bb 0f00 	cmp.w	fp, #0
 8014486:	bf0c      	ite	eq
 8014488:	2506      	moveq	r5, #6
 801448a:	2500      	movne	r5, #0
 801448c:	4628      	mov	r0, r5
 801448e:	b005      	add	sp, #20
 8014490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014494:	2500      	movs	r5, #0
 8014496:	462c      	mov	r4, r5
 8014498:	e7b1      	b.n	80143fe <__gethex+0x66>
 801449a:	2c00      	cmp	r4, #0
 801449c:	d1c8      	bne.n	8014430 <__gethex+0x98>
 801449e:	4627      	mov	r7, r4
 80144a0:	e7c8      	b.n	8014434 <__gethex+0x9c>
 80144a2:	464e      	mov	r6, r9
 80144a4:	462f      	mov	r7, r5
 80144a6:	2501      	movs	r5, #1
 80144a8:	e7c4      	b.n	8014434 <__gethex+0x9c>
 80144aa:	2400      	movs	r4, #0
 80144ac:	1cb1      	adds	r1, r6, #2
 80144ae:	e7cd      	b.n	801444c <__gethex+0xb4>
 80144b0:	2401      	movs	r4, #1
 80144b2:	e7fb      	b.n	80144ac <__gethex+0x114>
 80144b4:	fb03 0002 	mla	r0, r3, r2, r0
 80144b8:	e7cf      	b.n	801445a <__gethex+0xc2>
 80144ba:	4631      	mov	r1, r6
 80144bc:	e7de      	b.n	801447c <__gethex+0xe4>
 80144be:	eba6 0309 	sub.w	r3, r6, r9
 80144c2:	4629      	mov	r1, r5
 80144c4:	3b01      	subs	r3, #1
 80144c6:	2b07      	cmp	r3, #7
 80144c8:	dc0a      	bgt.n	80144e0 <__gethex+0x148>
 80144ca:	9801      	ldr	r0, [sp, #4]
 80144cc:	f7fd ff82 	bl	80123d4 <_Balloc>
 80144d0:	4604      	mov	r4, r0
 80144d2:	b940      	cbnz	r0, 80144e6 <__gethex+0x14e>
 80144d4:	4b5c      	ldr	r3, [pc, #368]	@ (8014648 <__gethex+0x2b0>)
 80144d6:	4602      	mov	r2, r0
 80144d8:	21e4      	movs	r1, #228	@ 0xe4
 80144da:	485c      	ldr	r0, [pc, #368]	@ (801464c <__gethex+0x2b4>)
 80144dc:	f7ff fec4 	bl	8014268 <__assert_func>
 80144e0:	3101      	adds	r1, #1
 80144e2:	105b      	asrs	r3, r3, #1
 80144e4:	e7ef      	b.n	80144c6 <__gethex+0x12e>
 80144e6:	f100 0a14 	add.w	sl, r0, #20
 80144ea:	2300      	movs	r3, #0
 80144ec:	4655      	mov	r5, sl
 80144ee:	469b      	mov	fp, r3
 80144f0:	45b1      	cmp	r9, r6
 80144f2:	d337      	bcc.n	8014564 <__gethex+0x1cc>
 80144f4:	f845 bb04 	str.w	fp, [r5], #4
 80144f8:	eba5 050a 	sub.w	r5, r5, sl
 80144fc:	4658      	mov	r0, fp
 80144fe:	10ad      	asrs	r5, r5, #2
 8014500:	6125      	str	r5, [r4, #16]
 8014502:	016d      	lsls	r5, r5, #5
 8014504:	f7fe f85a 	bl	80125bc <__hi0bits>
 8014508:	f8d8 6000 	ldr.w	r6, [r8]
 801450c:	1a2d      	subs	r5, r5, r0
 801450e:	42b5      	cmp	r5, r6
 8014510:	dd54      	ble.n	80145bc <__gethex+0x224>
 8014512:	1bad      	subs	r5, r5, r6
 8014514:	4620      	mov	r0, r4
 8014516:	4629      	mov	r1, r5
 8014518:	f7fe fbf1 	bl	8012cfe <__any_on>
 801451c:	4681      	mov	r9, r0
 801451e:	b178      	cbz	r0, 8014540 <__gethex+0x1a8>
 8014520:	1e6b      	subs	r3, r5, #1
 8014522:	f04f 0901 	mov.w	r9, #1
 8014526:	1159      	asrs	r1, r3, #5
 8014528:	f003 021f 	and.w	r2, r3, #31
 801452c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8014530:	fa09 f202 	lsl.w	r2, r9, r2
 8014534:	420a      	tst	r2, r1
 8014536:	d003      	beq.n	8014540 <__gethex+0x1a8>
 8014538:	454b      	cmp	r3, r9
 801453a:	dc36      	bgt.n	80145aa <__gethex+0x212>
 801453c:	f04f 0902 	mov.w	r9, #2
 8014540:	442f      	add	r7, r5
 8014542:	4629      	mov	r1, r5
 8014544:	4620      	mov	r0, r4
 8014546:	f7ff fec1 	bl	80142cc <rshift>
 801454a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801454e:	42bb      	cmp	r3, r7
 8014550:	da42      	bge.n	80145d8 <__gethex+0x240>
 8014552:	4621      	mov	r1, r4
 8014554:	9801      	ldr	r0, [sp, #4]
 8014556:	f7fd ff7d 	bl	8012454 <_Bfree>
 801455a:	2300      	movs	r3, #0
 801455c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801455e:	25a3      	movs	r5, #163	@ 0xa3
 8014560:	6013      	str	r3, [r2, #0]
 8014562:	e793      	b.n	801448c <__gethex+0xf4>
 8014564:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8014568:	2a2e      	cmp	r2, #46	@ 0x2e
 801456a:	d012      	beq.n	8014592 <__gethex+0x1fa>
 801456c:	2b20      	cmp	r3, #32
 801456e:	d104      	bne.n	801457a <__gethex+0x1e2>
 8014570:	f845 bb04 	str.w	fp, [r5], #4
 8014574:	f04f 0b00 	mov.w	fp, #0
 8014578:	465b      	mov	r3, fp
 801457a:	7830      	ldrb	r0, [r6, #0]
 801457c:	9303      	str	r3, [sp, #12]
 801457e:	f7ff fef6 	bl	801436e <__hexdig_fun>
 8014582:	9b03      	ldr	r3, [sp, #12]
 8014584:	f000 000f 	and.w	r0, r0, #15
 8014588:	4098      	lsls	r0, r3
 801458a:	3304      	adds	r3, #4
 801458c:	ea4b 0b00 	orr.w	fp, fp, r0
 8014590:	e7ae      	b.n	80144f0 <__gethex+0x158>
 8014592:	45b1      	cmp	r9, r6
 8014594:	d8ea      	bhi.n	801456c <__gethex+0x1d4>
 8014596:	2201      	movs	r2, #1
 8014598:	492a      	ldr	r1, [pc, #168]	@ (8014644 <__gethex+0x2ac>)
 801459a:	4630      	mov	r0, r6
 801459c:	9303      	str	r3, [sp, #12]
 801459e:	f7ff fe16 	bl	80141ce <strncmp>
 80145a2:	9b03      	ldr	r3, [sp, #12]
 80145a4:	2800      	cmp	r0, #0
 80145a6:	d1e1      	bne.n	801456c <__gethex+0x1d4>
 80145a8:	e7a2      	b.n	80144f0 <__gethex+0x158>
 80145aa:	1ea9      	subs	r1, r5, #2
 80145ac:	4620      	mov	r0, r4
 80145ae:	f7fe fba6 	bl	8012cfe <__any_on>
 80145b2:	2800      	cmp	r0, #0
 80145b4:	d0c2      	beq.n	801453c <__gethex+0x1a4>
 80145b6:	f04f 0903 	mov.w	r9, #3
 80145ba:	e7c1      	b.n	8014540 <__gethex+0x1a8>
 80145bc:	da09      	bge.n	80145d2 <__gethex+0x23a>
 80145be:	1b75      	subs	r5, r6, r5
 80145c0:	4621      	mov	r1, r4
 80145c2:	9801      	ldr	r0, [sp, #4]
 80145c4:	462a      	mov	r2, r5
 80145c6:	1b7f      	subs	r7, r7, r5
 80145c8:	f7fe f958 	bl	801287c <__lshift>
 80145cc:	4604      	mov	r4, r0
 80145ce:	f100 0a14 	add.w	sl, r0, #20
 80145d2:	f04f 0900 	mov.w	r9, #0
 80145d6:	e7b8      	b.n	801454a <__gethex+0x1b2>
 80145d8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80145dc:	42bd      	cmp	r5, r7
 80145de:	dd6f      	ble.n	80146c0 <__gethex+0x328>
 80145e0:	1bed      	subs	r5, r5, r7
 80145e2:	42ae      	cmp	r6, r5
 80145e4:	dc34      	bgt.n	8014650 <__gethex+0x2b8>
 80145e6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80145ea:	2b02      	cmp	r3, #2
 80145ec:	d022      	beq.n	8014634 <__gethex+0x29c>
 80145ee:	2b03      	cmp	r3, #3
 80145f0:	d024      	beq.n	801463c <__gethex+0x2a4>
 80145f2:	2b01      	cmp	r3, #1
 80145f4:	d115      	bne.n	8014622 <__gethex+0x28a>
 80145f6:	42ae      	cmp	r6, r5
 80145f8:	d113      	bne.n	8014622 <__gethex+0x28a>
 80145fa:	2e01      	cmp	r6, #1
 80145fc:	d10b      	bne.n	8014616 <__gethex+0x27e>
 80145fe:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014602:	2562      	movs	r5, #98	@ 0x62
 8014604:	9a02      	ldr	r2, [sp, #8]
 8014606:	6013      	str	r3, [r2, #0]
 8014608:	2301      	movs	r3, #1
 801460a:	6123      	str	r3, [r4, #16]
 801460c:	f8ca 3000 	str.w	r3, [sl]
 8014610:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014612:	601c      	str	r4, [r3, #0]
 8014614:	e73a      	b.n	801448c <__gethex+0xf4>
 8014616:	1e71      	subs	r1, r6, #1
 8014618:	4620      	mov	r0, r4
 801461a:	f7fe fb70 	bl	8012cfe <__any_on>
 801461e:	2800      	cmp	r0, #0
 8014620:	d1ed      	bne.n	80145fe <__gethex+0x266>
 8014622:	4621      	mov	r1, r4
 8014624:	9801      	ldr	r0, [sp, #4]
 8014626:	f7fd ff15 	bl	8012454 <_Bfree>
 801462a:	2300      	movs	r3, #0
 801462c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801462e:	2550      	movs	r5, #80	@ 0x50
 8014630:	6013      	str	r3, [r2, #0]
 8014632:	e72b      	b.n	801448c <__gethex+0xf4>
 8014634:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014636:	2b00      	cmp	r3, #0
 8014638:	d1f3      	bne.n	8014622 <__gethex+0x28a>
 801463a:	e7e0      	b.n	80145fe <__gethex+0x266>
 801463c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801463e:	2b00      	cmp	r3, #0
 8014640:	d1dd      	bne.n	80145fe <__gethex+0x266>
 8014642:	e7ee      	b.n	8014622 <__gethex+0x28a>
 8014644:	0801670f 	.word	0x0801670f
 8014648:	080166a5 	.word	0x080166a5
 801464c:	08016766 	.word	0x08016766
 8014650:	1e6f      	subs	r7, r5, #1
 8014652:	f1b9 0f00 	cmp.w	r9, #0
 8014656:	d130      	bne.n	80146ba <__gethex+0x322>
 8014658:	b127      	cbz	r7, 8014664 <__gethex+0x2cc>
 801465a:	4639      	mov	r1, r7
 801465c:	4620      	mov	r0, r4
 801465e:	f7fe fb4e 	bl	8012cfe <__any_on>
 8014662:	4681      	mov	r9, r0
 8014664:	117a      	asrs	r2, r7, #5
 8014666:	2301      	movs	r3, #1
 8014668:	f007 071f 	and.w	r7, r7, #31
 801466c:	4629      	mov	r1, r5
 801466e:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8014672:	4620      	mov	r0, r4
 8014674:	40bb      	lsls	r3, r7
 8014676:	1b76      	subs	r6, r6, r5
 8014678:	2502      	movs	r5, #2
 801467a:	4213      	tst	r3, r2
 801467c:	bf18      	it	ne
 801467e:	f049 0902 	orrne.w	r9, r9, #2
 8014682:	f7ff fe23 	bl	80142cc <rshift>
 8014686:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801468a:	f1b9 0f00 	cmp.w	r9, #0
 801468e:	d047      	beq.n	8014720 <__gethex+0x388>
 8014690:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014694:	2b02      	cmp	r3, #2
 8014696:	d015      	beq.n	80146c4 <__gethex+0x32c>
 8014698:	2b03      	cmp	r3, #3
 801469a:	d017      	beq.n	80146cc <__gethex+0x334>
 801469c:	2b01      	cmp	r3, #1
 801469e:	d109      	bne.n	80146b4 <__gethex+0x31c>
 80146a0:	f019 0f02 	tst.w	r9, #2
 80146a4:	d006      	beq.n	80146b4 <__gethex+0x31c>
 80146a6:	f8da 3000 	ldr.w	r3, [sl]
 80146aa:	ea49 0903 	orr.w	r9, r9, r3
 80146ae:	f019 0f01 	tst.w	r9, #1
 80146b2:	d10e      	bne.n	80146d2 <__gethex+0x33a>
 80146b4:	f045 0510 	orr.w	r5, r5, #16
 80146b8:	e032      	b.n	8014720 <__gethex+0x388>
 80146ba:	f04f 0901 	mov.w	r9, #1
 80146be:	e7d1      	b.n	8014664 <__gethex+0x2cc>
 80146c0:	2501      	movs	r5, #1
 80146c2:	e7e2      	b.n	801468a <__gethex+0x2f2>
 80146c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80146c6:	f1c3 0301 	rsb	r3, r3, #1
 80146ca:	930f      	str	r3, [sp, #60]	@ 0x3c
 80146cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80146ce:	2b00      	cmp	r3, #0
 80146d0:	d0f0      	beq.n	80146b4 <__gethex+0x31c>
 80146d2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80146d6:	f104 0314 	add.w	r3, r4, #20
 80146da:	f04f 0c00 	mov.w	ip, #0
 80146de:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80146e2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80146e6:	4618      	mov	r0, r3
 80146e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80146ec:	f1b2 3fff 	cmp.w	r2, #4294967295
 80146f0:	d01b      	beq.n	801472a <__gethex+0x392>
 80146f2:	3201      	adds	r2, #1
 80146f4:	6002      	str	r2, [r0, #0]
 80146f6:	2d02      	cmp	r5, #2
 80146f8:	f104 0314 	add.w	r3, r4, #20
 80146fc:	d13c      	bne.n	8014778 <__gethex+0x3e0>
 80146fe:	f8d8 2000 	ldr.w	r2, [r8]
 8014702:	3a01      	subs	r2, #1
 8014704:	42b2      	cmp	r2, r6
 8014706:	d109      	bne.n	801471c <__gethex+0x384>
 8014708:	1171      	asrs	r1, r6, #5
 801470a:	2201      	movs	r2, #1
 801470c:	f006 061f 	and.w	r6, r6, #31
 8014710:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014714:	fa02 f606 	lsl.w	r6, r2, r6
 8014718:	421e      	tst	r6, r3
 801471a:	d13a      	bne.n	8014792 <__gethex+0x3fa>
 801471c:	f045 0520 	orr.w	r5, r5, #32
 8014720:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014722:	601c      	str	r4, [r3, #0]
 8014724:	9b02      	ldr	r3, [sp, #8]
 8014726:	601f      	str	r7, [r3, #0]
 8014728:	e6b0      	b.n	801448c <__gethex+0xf4>
 801472a:	4299      	cmp	r1, r3
 801472c:	f843 cc04 	str.w	ip, [r3, #-4]
 8014730:	d8d9      	bhi.n	80146e6 <__gethex+0x34e>
 8014732:	68a3      	ldr	r3, [r4, #8]
 8014734:	459b      	cmp	fp, r3
 8014736:	db17      	blt.n	8014768 <__gethex+0x3d0>
 8014738:	6861      	ldr	r1, [r4, #4]
 801473a:	9801      	ldr	r0, [sp, #4]
 801473c:	3101      	adds	r1, #1
 801473e:	f7fd fe49 	bl	80123d4 <_Balloc>
 8014742:	4681      	mov	r9, r0
 8014744:	b918      	cbnz	r0, 801474e <__gethex+0x3b6>
 8014746:	4b1a      	ldr	r3, [pc, #104]	@ (80147b0 <__gethex+0x418>)
 8014748:	4602      	mov	r2, r0
 801474a:	2184      	movs	r1, #132	@ 0x84
 801474c:	e6c5      	b.n	80144da <__gethex+0x142>
 801474e:	6922      	ldr	r2, [r4, #16]
 8014750:	f104 010c 	add.w	r1, r4, #12
 8014754:	300c      	adds	r0, #12
 8014756:	3202      	adds	r2, #2
 8014758:	0092      	lsls	r2, r2, #2
 801475a:	f7fc fec7 	bl	80114ec <memcpy>
 801475e:	4621      	mov	r1, r4
 8014760:	464c      	mov	r4, r9
 8014762:	9801      	ldr	r0, [sp, #4]
 8014764:	f7fd fe76 	bl	8012454 <_Bfree>
 8014768:	6923      	ldr	r3, [r4, #16]
 801476a:	1c5a      	adds	r2, r3, #1
 801476c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8014770:	6122      	str	r2, [r4, #16]
 8014772:	2201      	movs	r2, #1
 8014774:	615a      	str	r2, [r3, #20]
 8014776:	e7be      	b.n	80146f6 <__gethex+0x35e>
 8014778:	6922      	ldr	r2, [r4, #16]
 801477a:	455a      	cmp	r2, fp
 801477c:	dd0b      	ble.n	8014796 <__gethex+0x3fe>
 801477e:	2101      	movs	r1, #1
 8014780:	4620      	mov	r0, r4
 8014782:	f7ff fda3 	bl	80142cc <rshift>
 8014786:	3701      	adds	r7, #1
 8014788:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801478c:	42bb      	cmp	r3, r7
 801478e:	f6ff aee0 	blt.w	8014552 <__gethex+0x1ba>
 8014792:	2501      	movs	r5, #1
 8014794:	e7c2      	b.n	801471c <__gethex+0x384>
 8014796:	f016 061f 	ands.w	r6, r6, #31
 801479a:	d0fa      	beq.n	8014792 <__gethex+0x3fa>
 801479c:	4453      	add	r3, sl
 801479e:	f1c6 0620 	rsb	r6, r6, #32
 80147a2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80147a6:	f7fd ff09 	bl	80125bc <__hi0bits>
 80147aa:	42b0      	cmp	r0, r6
 80147ac:	dbe7      	blt.n	801477e <__gethex+0x3e6>
 80147ae:	e7f0      	b.n	8014792 <__gethex+0x3fa>
 80147b0:	080166a5 	.word	0x080166a5

080147b4 <L_shift>:
 80147b4:	f1c2 0208 	rsb	r2, r2, #8
 80147b8:	0092      	lsls	r2, r2, #2
 80147ba:	b570      	push	{r4, r5, r6, lr}
 80147bc:	f1c2 0620 	rsb	r6, r2, #32
 80147c0:	6843      	ldr	r3, [r0, #4]
 80147c2:	6804      	ldr	r4, [r0, #0]
 80147c4:	fa03 f506 	lsl.w	r5, r3, r6
 80147c8:	40d3      	lsrs	r3, r2
 80147ca:	432c      	orrs	r4, r5
 80147cc:	6004      	str	r4, [r0, #0]
 80147ce:	f840 3f04 	str.w	r3, [r0, #4]!
 80147d2:	4288      	cmp	r0, r1
 80147d4:	d3f4      	bcc.n	80147c0 <L_shift+0xc>
 80147d6:	bd70      	pop	{r4, r5, r6, pc}

080147d8 <__match>:
 80147d8:	6803      	ldr	r3, [r0, #0]
 80147da:	3301      	adds	r3, #1
 80147dc:	b530      	push	{r4, r5, lr}
 80147de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80147e2:	b914      	cbnz	r4, 80147ea <__match+0x12>
 80147e4:	6003      	str	r3, [r0, #0]
 80147e6:	2001      	movs	r0, #1
 80147e8:	bd30      	pop	{r4, r5, pc}
 80147ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80147ee:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80147f2:	2d19      	cmp	r5, #25
 80147f4:	bf98      	it	ls
 80147f6:	3220      	addls	r2, #32
 80147f8:	42a2      	cmp	r2, r4
 80147fa:	d0f0      	beq.n	80147de <__match+0x6>
 80147fc:	2000      	movs	r0, #0
 80147fe:	e7f3      	b.n	80147e8 <__match+0x10>

08014800 <__hexnan>:
 8014800:	680b      	ldr	r3, [r1, #0]
 8014802:	6801      	ldr	r1, [r0, #0]
 8014804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014808:	115e      	asrs	r6, r3, #5
 801480a:	f013 031f 	ands.w	r3, r3, #31
 801480e:	f04f 0500 	mov.w	r5, #0
 8014812:	b087      	sub	sp, #28
 8014814:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8014818:	4682      	mov	sl, r0
 801481a:	4690      	mov	r8, r2
 801481c:	46ab      	mov	fp, r5
 801481e:	bf18      	it	ne
 8014820:	3604      	addne	r6, #4
 8014822:	9301      	str	r3, [sp, #4]
 8014824:	9502      	str	r5, [sp, #8]
 8014826:	1f37      	subs	r7, r6, #4
 8014828:	f846 5c04 	str.w	r5, [r6, #-4]
 801482c:	46b9      	mov	r9, r7
 801482e:	463c      	mov	r4, r7
 8014830:	1c4b      	adds	r3, r1, #1
 8014832:	784a      	ldrb	r2, [r1, #1]
 8014834:	9303      	str	r3, [sp, #12]
 8014836:	b342      	cbz	r2, 801488a <__hexnan+0x8a>
 8014838:	4610      	mov	r0, r2
 801483a:	9105      	str	r1, [sp, #20]
 801483c:	9204      	str	r2, [sp, #16]
 801483e:	f7ff fd96 	bl	801436e <__hexdig_fun>
 8014842:	2800      	cmp	r0, #0
 8014844:	d151      	bne.n	80148ea <__hexnan+0xea>
 8014846:	9a04      	ldr	r2, [sp, #16]
 8014848:	9905      	ldr	r1, [sp, #20]
 801484a:	2a20      	cmp	r2, #32
 801484c:	d818      	bhi.n	8014880 <__hexnan+0x80>
 801484e:	9b02      	ldr	r3, [sp, #8]
 8014850:	459b      	cmp	fp, r3
 8014852:	dd13      	ble.n	801487c <__hexnan+0x7c>
 8014854:	454c      	cmp	r4, r9
 8014856:	d206      	bcs.n	8014866 <__hexnan+0x66>
 8014858:	2d07      	cmp	r5, #7
 801485a:	dc04      	bgt.n	8014866 <__hexnan+0x66>
 801485c:	462a      	mov	r2, r5
 801485e:	4649      	mov	r1, r9
 8014860:	4620      	mov	r0, r4
 8014862:	f7ff ffa7 	bl	80147b4 <L_shift>
 8014866:	4544      	cmp	r4, r8
 8014868:	d951      	bls.n	801490e <__hexnan+0x10e>
 801486a:	2300      	movs	r3, #0
 801486c:	f1a4 0904 	sub.w	r9, r4, #4
 8014870:	f8cd b008 	str.w	fp, [sp, #8]
 8014874:	f844 3c04 	str.w	r3, [r4, #-4]
 8014878:	461d      	mov	r5, r3
 801487a:	464c      	mov	r4, r9
 801487c:	9903      	ldr	r1, [sp, #12]
 801487e:	e7d7      	b.n	8014830 <__hexnan+0x30>
 8014880:	2a29      	cmp	r2, #41	@ 0x29
 8014882:	d156      	bne.n	8014932 <__hexnan+0x132>
 8014884:	3102      	adds	r1, #2
 8014886:	f8ca 1000 	str.w	r1, [sl]
 801488a:	f1bb 0f00 	cmp.w	fp, #0
 801488e:	d050      	beq.n	8014932 <__hexnan+0x132>
 8014890:	454c      	cmp	r4, r9
 8014892:	d206      	bcs.n	80148a2 <__hexnan+0xa2>
 8014894:	2d07      	cmp	r5, #7
 8014896:	dc04      	bgt.n	80148a2 <__hexnan+0xa2>
 8014898:	462a      	mov	r2, r5
 801489a:	4649      	mov	r1, r9
 801489c:	4620      	mov	r0, r4
 801489e:	f7ff ff89 	bl	80147b4 <L_shift>
 80148a2:	4544      	cmp	r4, r8
 80148a4:	d935      	bls.n	8014912 <__hexnan+0x112>
 80148a6:	f1a8 0204 	sub.w	r2, r8, #4
 80148aa:	4623      	mov	r3, r4
 80148ac:	f853 1b04 	ldr.w	r1, [r3], #4
 80148b0:	429f      	cmp	r7, r3
 80148b2:	f842 1f04 	str.w	r1, [r2, #4]!
 80148b6:	d2f9      	bcs.n	80148ac <__hexnan+0xac>
 80148b8:	1b3b      	subs	r3, r7, r4
 80148ba:	3e03      	subs	r6, #3
 80148bc:	3401      	adds	r4, #1
 80148be:	2200      	movs	r2, #0
 80148c0:	f023 0303 	bic.w	r3, r3, #3
 80148c4:	3304      	adds	r3, #4
 80148c6:	42b4      	cmp	r4, r6
 80148c8:	bf88      	it	hi
 80148ca:	2304      	movhi	r3, #4
 80148cc:	4443      	add	r3, r8
 80148ce:	f843 2b04 	str.w	r2, [r3], #4
 80148d2:	429f      	cmp	r7, r3
 80148d4:	d2fb      	bcs.n	80148ce <__hexnan+0xce>
 80148d6:	683b      	ldr	r3, [r7, #0]
 80148d8:	b91b      	cbnz	r3, 80148e2 <__hexnan+0xe2>
 80148da:	4547      	cmp	r7, r8
 80148dc:	d127      	bne.n	801492e <__hexnan+0x12e>
 80148de:	2301      	movs	r3, #1
 80148e0:	603b      	str	r3, [r7, #0]
 80148e2:	2005      	movs	r0, #5
 80148e4:	b007      	add	sp, #28
 80148e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148ea:	3501      	adds	r5, #1
 80148ec:	f10b 0b01 	add.w	fp, fp, #1
 80148f0:	2d08      	cmp	r5, #8
 80148f2:	dd05      	ble.n	8014900 <__hexnan+0x100>
 80148f4:	4544      	cmp	r4, r8
 80148f6:	d9c1      	bls.n	801487c <__hexnan+0x7c>
 80148f8:	2300      	movs	r3, #0
 80148fa:	3c04      	subs	r4, #4
 80148fc:	2501      	movs	r5, #1
 80148fe:	6023      	str	r3, [r4, #0]
 8014900:	6822      	ldr	r2, [r4, #0]
 8014902:	f000 000f 	and.w	r0, r0, #15
 8014906:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801490a:	6020      	str	r0, [r4, #0]
 801490c:	e7b6      	b.n	801487c <__hexnan+0x7c>
 801490e:	2508      	movs	r5, #8
 8014910:	e7b4      	b.n	801487c <__hexnan+0x7c>
 8014912:	9b01      	ldr	r3, [sp, #4]
 8014914:	2b00      	cmp	r3, #0
 8014916:	d0de      	beq.n	80148d6 <__hexnan+0xd6>
 8014918:	f1c3 0320 	rsb	r3, r3, #32
 801491c:	f04f 32ff 	mov.w	r2, #4294967295
 8014920:	40da      	lsrs	r2, r3
 8014922:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8014926:	4013      	ands	r3, r2
 8014928:	f846 3c04 	str.w	r3, [r6, #-4]
 801492c:	e7d3      	b.n	80148d6 <__hexnan+0xd6>
 801492e:	3f04      	subs	r7, #4
 8014930:	e7d1      	b.n	80148d6 <__hexnan+0xd6>
 8014932:	2004      	movs	r0, #4
 8014934:	e7d6      	b.n	80148e4 <__hexnan+0xe4>

08014936 <__ascii_mbtowc>:
 8014936:	b082      	sub	sp, #8
 8014938:	b901      	cbnz	r1, 801493c <__ascii_mbtowc+0x6>
 801493a:	a901      	add	r1, sp, #4
 801493c:	b142      	cbz	r2, 8014950 <__ascii_mbtowc+0x1a>
 801493e:	b14b      	cbz	r3, 8014954 <__ascii_mbtowc+0x1e>
 8014940:	7813      	ldrb	r3, [r2, #0]
 8014942:	600b      	str	r3, [r1, #0]
 8014944:	7812      	ldrb	r2, [r2, #0]
 8014946:	1e10      	subs	r0, r2, #0
 8014948:	bf18      	it	ne
 801494a:	2001      	movne	r0, #1
 801494c:	b002      	add	sp, #8
 801494e:	4770      	bx	lr
 8014950:	4610      	mov	r0, r2
 8014952:	e7fb      	b.n	801494c <__ascii_mbtowc+0x16>
 8014954:	f06f 0001 	mvn.w	r0, #1
 8014958:	e7f8      	b.n	801494c <__ascii_mbtowc+0x16>

0801495a <_realloc_r>:
 801495a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801495e:	4607      	mov	r7, r0
 8014960:	4614      	mov	r4, r2
 8014962:	460d      	mov	r5, r1
 8014964:	b921      	cbnz	r1, 8014970 <_realloc_r+0x16>
 8014966:	4611      	mov	r1, r2
 8014968:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801496c:	f7fd bca6 	b.w	80122bc <_malloc_r>
 8014970:	b92a      	cbnz	r2, 801497e <_realloc_r+0x24>
 8014972:	4625      	mov	r5, r4
 8014974:	f7fd fc2e 	bl	80121d4 <_free_r>
 8014978:	4628      	mov	r0, r5
 801497a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801497e:	f000 f840 	bl	8014a02 <_malloc_usable_size_r>
 8014982:	4284      	cmp	r4, r0
 8014984:	4606      	mov	r6, r0
 8014986:	d802      	bhi.n	801498e <_realloc_r+0x34>
 8014988:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801498c:	d8f4      	bhi.n	8014978 <_realloc_r+0x1e>
 801498e:	4621      	mov	r1, r4
 8014990:	4638      	mov	r0, r7
 8014992:	f7fd fc93 	bl	80122bc <_malloc_r>
 8014996:	4680      	mov	r8, r0
 8014998:	b908      	cbnz	r0, 801499e <_realloc_r+0x44>
 801499a:	4645      	mov	r5, r8
 801499c:	e7ec      	b.n	8014978 <_realloc_r+0x1e>
 801499e:	42b4      	cmp	r4, r6
 80149a0:	4622      	mov	r2, r4
 80149a2:	4629      	mov	r1, r5
 80149a4:	bf28      	it	cs
 80149a6:	4632      	movcs	r2, r6
 80149a8:	f7fc fda0 	bl	80114ec <memcpy>
 80149ac:	4629      	mov	r1, r5
 80149ae:	4638      	mov	r0, r7
 80149b0:	f7fd fc10 	bl	80121d4 <_free_r>
 80149b4:	e7f1      	b.n	801499a <_realloc_r+0x40>

080149b6 <__ascii_wctomb>:
 80149b6:	4603      	mov	r3, r0
 80149b8:	4608      	mov	r0, r1
 80149ba:	b141      	cbz	r1, 80149ce <__ascii_wctomb+0x18>
 80149bc:	2aff      	cmp	r2, #255	@ 0xff
 80149be:	d904      	bls.n	80149ca <__ascii_wctomb+0x14>
 80149c0:	228a      	movs	r2, #138	@ 0x8a
 80149c2:	f04f 30ff 	mov.w	r0, #4294967295
 80149c6:	601a      	str	r2, [r3, #0]
 80149c8:	4770      	bx	lr
 80149ca:	2001      	movs	r0, #1
 80149cc:	700a      	strb	r2, [r1, #0]
 80149ce:	4770      	bx	lr

080149d0 <fiprintf>:
 80149d0:	b40e      	push	{r1, r2, r3}
 80149d2:	b503      	push	{r0, r1, lr}
 80149d4:	ab03      	add	r3, sp, #12
 80149d6:	4601      	mov	r1, r0
 80149d8:	4805      	ldr	r0, [pc, #20]	@ (80149f0 <fiprintf+0x20>)
 80149da:	f853 2b04 	ldr.w	r2, [r3], #4
 80149de:	6800      	ldr	r0, [r0, #0]
 80149e0:	9301      	str	r3, [sp, #4]
 80149e2:	f7ff f9b5 	bl	8013d50 <_vfiprintf_r>
 80149e6:	b002      	add	sp, #8
 80149e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80149ec:	b003      	add	sp, #12
 80149ee:	4770      	bx	lr
 80149f0:	20000034 	.word	0x20000034

080149f4 <abort>:
 80149f4:	2006      	movs	r0, #6
 80149f6:	b508      	push	{r3, lr}
 80149f8:	f000 f834 	bl	8014a64 <raise>
 80149fc:	2001      	movs	r0, #1
 80149fe:	f7ef fe3e 	bl	800467e <_exit>

08014a02 <_malloc_usable_size_r>:
 8014a02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014a06:	1f18      	subs	r0, r3, #4
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	bfbc      	itt	lt
 8014a0c:	580b      	ldrlt	r3, [r1, r0]
 8014a0e:	18c0      	addlt	r0, r0, r3
 8014a10:	4770      	bx	lr

08014a12 <_raise_r>:
 8014a12:	291f      	cmp	r1, #31
 8014a14:	b538      	push	{r3, r4, r5, lr}
 8014a16:	4605      	mov	r5, r0
 8014a18:	460c      	mov	r4, r1
 8014a1a:	d904      	bls.n	8014a26 <_raise_r+0x14>
 8014a1c:	2316      	movs	r3, #22
 8014a1e:	6003      	str	r3, [r0, #0]
 8014a20:	f04f 30ff 	mov.w	r0, #4294967295
 8014a24:	bd38      	pop	{r3, r4, r5, pc}
 8014a26:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8014a28:	b112      	cbz	r2, 8014a30 <_raise_r+0x1e>
 8014a2a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014a2e:	b94b      	cbnz	r3, 8014a44 <_raise_r+0x32>
 8014a30:	4628      	mov	r0, r5
 8014a32:	f000 f831 	bl	8014a98 <_getpid_r>
 8014a36:	4622      	mov	r2, r4
 8014a38:	4601      	mov	r1, r0
 8014a3a:	4628      	mov	r0, r5
 8014a3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014a40:	f000 b818 	b.w	8014a74 <_kill_r>
 8014a44:	2b01      	cmp	r3, #1
 8014a46:	d00a      	beq.n	8014a5e <_raise_r+0x4c>
 8014a48:	1c59      	adds	r1, r3, #1
 8014a4a:	d103      	bne.n	8014a54 <_raise_r+0x42>
 8014a4c:	2316      	movs	r3, #22
 8014a4e:	6003      	str	r3, [r0, #0]
 8014a50:	2001      	movs	r0, #1
 8014a52:	e7e7      	b.n	8014a24 <_raise_r+0x12>
 8014a54:	2100      	movs	r1, #0
 8014a56:	4620      	mov	r0, r4
 8014a58:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8014a5c:	4798      	blx	r3
 8014a5e:	2000      	movs	r0, #0
 8014a60:	e7e0      	b.n	8014a24 <_raise_r+0x12>
	...

08014a64 <raise>:
 8014a64:	4b02      	ldr	r3, [pc, #8]	@ (8014a70 <raise+0xc>)
 8014a66:	4601      	mov	r1, r0
 8014a68:	6818      	ldr	r0, [r3, #0]
 8014a6a:	f7ff bfd2 	b.w	8014a12 <_raise_r>
 8014a6e:	bf00      	nop
 8014a70:	20000034 	.word	0x20000034

08014a74 <_kill_r>:
 8014a74:	b538      	push	{r3, r4, r5, lr}
 8014a76:	2300      	movs	r3, #0
 8014a78:	4d06      	ldr	r5, [pc, #24]	@ (8014a94 <_kill_r+0x20>)
 8014a7a:	4604      	mov	r4, r0
 8014a7c:	4608      	mov	r0, r1
 8014a7e:	4611      	mov	r1, r2
 8014a80:	602b      	str	r3, [r5, #0]
 8014a82:	f7ef fdec 	bl	800465e <_kill>
 8014a86:	1c43      	adds	r3, r0, #1
 8014a88:	d102      	bne.n	8014a90 <_kill_r+0x1c>
 8014a8a:	682b      	ldr	r3, [r5, #0]
 8014a8c:	b103      	cbz	r3, 8014a90 <_kill_r+0x1c>
 8014a8e:	6023      	str	r3, [r4, #0]
 8014a90:	bd38      	pop	{r3, r4, r5, pc}
 8014a92:	bf00      	nop
 8014a94:	2000093c 	.word	0x2000093c

08014a98 <_getpid_r>:
 8014a98:	f7ef bdd9 	b.w	800464e <_getpid>
 8014a9c:	0000      	movs	r0, r0
	...

08014aa0 <ceil>:
 8014aa0:	ec51 0b10 	vmov	r0, r1, d0
 8014aa4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8014aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014aac:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8014ab0:	460c      	mov	r4, r1
 8014ab2:	4605      	mov	r5, r0
 8014ab4:	4680      	mov	r8, r0
 8014ab6:	2e13      	cmp	r6, #19
 8014ab8:	dc2f      	bgt.n	8014b1a <ceil+0x7a>
 8014aba:	2e00      	cmp	r6, #0
 8014abc:	da11      	bge.n	8014ae2 <ceil+0x42>
 8014abe:	a332      	add	r3, pc, #200	@ (adr r3, 8014b88 <ceil+0xe8>)
 8014ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ac4:	f7ed f974 	bl	8001db0 <__adddf3>
 8014ac8:	2200      	movs	r2, #0
 8014aca:	2300      	movs	r3, #0
 8014acc:	f7ed fdb6 	bl	800263c <__aeabi_dcmpgt>
 8014ad0:	b120      	cbz	r0, 8014adc <ceil+0x3c>
 8014ad2:	2c00      	cmp	r4, #0
 8014ad4:	db50      	blt.n	8014b78 <ceil+0xd8>
 8014ad6:	4325      	orrs	r5, r4
 8014ad8:	d152      	bne.n	8014b80 <ceil+0xe0>
 8014ada:	462c      	mov	r4, r5
 8014adc:	4621      	mov	r1, r4
 8014ade:	4628      	mov	r0, r5
 8014ae0:	e024      	b.n	8014b2c <ceil+0x8c>
 8014ae2:	4f2b      	ldr	r7, [pc, #172]	@ (8014b90 <ceil+0xf0>)
 8014ae4:	4137      	asrs	r7, r6
 8014ae6:	ea01 0307 	and.w	r3, r1, r7
 8014aea:	4303      	orrs	r3, r0
 8014aec:	d01e      	beq.n	8014b2c <ceil+0x8c>
 8014aee:	a326      	add	r3, pc, #152	@ (adr r3, 8014b88 <ceil+0xe8>)
 8014af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014af4:	f7ed f95c 	bl	8001db0 <__adddf3>
 8014af8:	2200      	movs	r2, #0
 8014afa:	2300      	movs	r3, #0
 8014afc:	f7ed fd9e 	bl	800263c <__aeabi_dcmpgt>
 8014b00:	2800      	cmp	r0, #0
 8014b02:	d0eb      	beq.n	8014adc <ceil+0x3c>
 8014b04:	2c00      	cmp	r4, #0
 8014b06:	f04f 0500 	mov.w	r5, #0
 8014b0a:	bfc2      	ittt	gt
 8014b0c:	f44f 1380 	movgt.w	r3, #1048576	@ 0x100000
 8014b10:	4133      	asrgt	r3, r6
 8014b12:	18e4      	addgt	r4, r4, r3
 8014b14:	ea24 0407 	bic.w	r4, r4, r7
 8014b18:	e7e0      	b.n	8014adc <ceil+0x3c>
 8014b1a:	2e33      	cmp	r6, #51	@ 0x33
 8014b1c:	dd0a      	ble.n	8014b34 <ceil+0x94>
 8014b1e:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8014b22:	d103      	bne.n	8014b2c <ceil+0x8c>
 8014b24:	4602      	mov	r2, r0
 8014b26:	460b      	mov	r3, r1
 8014b28:	f7ed f942 	bl	8001db0 <__adddf3>
 8014b2c:	ec41 0b10 	vmov	d0, r0, r1
 8014b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b34:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8014b38:	f04f 37ff 	mov.w	r7, #4294967295
 8014b3c:	40df      	lsrs	r7, r3
 8014b3e:	4238      	tst	r0, r7
 8014b40:	d0f4      	beq.n	8014b2c <ceil+0x8c>
 8014b42:	a311      	add	r3, pc, #68	@ (adr r3, 8014b88 <ceil+0xe8>)
 8014b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b48:	f7ed f932 	bl	8001db0 <__adddf3>
 8014b4c:	2200      	movs	r2, #0
 8014b4e:	2300      	movs	r3, #0
 8014b50:	f7ed fd74 	bl	800263c <__aeabi_dcmpgt>
 8014b54:	2800      	cmp	r0, #0
 8014b56:	d0c1      	beq.n	8014adc <ceil+0x3c>
 8014b58:	2c00      	cmp	r4, #0
 8014b5a:	dd0a      	ble.n	8014b72 <ceil+0xd2>
 8014b5c:	2e14      	cmp	r6, #20
 8014b5e:	d101      	bne.n	8014b64 <ceil+0xc4>
 8014b60:	3401      	adds	r4, #1
 8014b62:	e006      	b.n	8014b72 <ceil+0xd2>
 8014b64:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8014b68:	2301      	movs	r3, #1
 8014b6a:	40b3      	lsls	r3, r6
 8014b6c:	441d      	add	r5, r3
 8014b6e:	45a8      	cmp	r8, r5
 8014b70:	d8f6      	bhi.n	8014b60 <ceil+0xc0>
 8014b72:	ea25 0507 	bic.w	r5, r5, r7
 8014b76:	e7b1      	b.n	8014adc <ceil+0x3c>
 8014b78:	2500      	movs	r5, #0
 8014b7a:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 8014b7e:	e7ad      	b.n	8014adc <ceil+0x3c>
 8014b80:	2500      	movs	r5, #0
 8014b82:	4c04      	ldr	r4, [pc, #16]	@ (8014b94 <ceil+0xf4>)
 8014b84:	e7aa      	b.n	8014adc <ceil+0x3c>
 8014b86:	bf00      	nop
 8014b88:	8800759c 	.word	0x8800759c
 8014b8c:	7e37e43c 	.word	0x7e37e43c
 8014b90:	000fffff 	.word	0x000fffff
 8014b94:	3ff00000 	.word	0x3ff00000

08014b98 <floor>:
 8014b98:	ec51 0b10 	vmov	r0, r1, d0
 8014b9c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8014ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ba4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8014ba8:	460c      	mov	r4, r1
 8014baa:	4605      	mov	r5, r0
 8014bac:	4680      	mov	r8, r0
 8014bae:	2e13      	cmp	r6, #19
 8014bb0:	dc35      	bgt.n	8014c1e <floor+0x86>
 8014bb2:	2e00      	cmp	r6, #0
 8014bb4:	da17      	bge.n	8014be6 <floor+0x4e>
 8014bb6:	a334      	add	r3, pc, #208	@ (adr r3, 8014c88 <floor+0xf0>)
 8014bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bbc:	f7ed f8f8 	bl	8001db0 <__adddf3>
 8014bc0:	2200      	movs	r2, #0
 8014bc2:	2300      	movs	r3, #0
 8014bc4:	f7ed fd3a 	bl	800263c <__aeabi_dcmpgt>
 8014bc8:	b150      	cbz	r0, 8014be0 <floor+0x48>
 8014bca:	2c00      	cmp	r4, #0
 8014bcc:	da56      	bge.n	8014c7c <floor+0xe4>
 8014bce:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8014bd2:	432c      	orrs	r4, r5
 8014bd4:	2500      	movs	r5, #0
 8014bd6:	42ac      	cmp	r4, r5
 8014bd8:	4c2d      	ldr	r4, [pc, #180]	@ (8014c90 <floor+0xf8>)
 8014bda:	bf08      	it	eq
 8014bdc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8014be0:	4621      	mov	r1, r4
 8014be2:	4628      	mov	r0, r5
 8014be4:	e024      	b.n	8014c30 <floor+0x98>
 8014be6:	4f2b      	ldr	r7, [pc, #172]	@ (8014c94 <floor+0xfc>)
 8014be8:	4137      	asrs	r7, r6
 8014bea:	ea01 0307 	and.w	r3, r1, r7
 8014bee:	4303      	orrs	r3, r0
 8014bf0:	d01e      	beq.n	8014c30 <floor+0x98>
 8014bf2:	a325      	add	r3, pc, #148	@ (adr r3, 8014c88 <floor+0xf0>)
 8014bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bf8:	f7ed f8da 	bl	8001db0 <__adddf3>
 8014bfc:	2200      	movs	r2, #0
 8014bfe:	2300      	movs	r3, #0
 8014c00:	f7ed fd1c 	bl	800263c <__aeabi_dcmpgt>
 8014c04:	2800      	cmp	r0, #0
 8014c06:	d0eb      	beq.n	8014be0 <floor+0x48>
 8014c08:	2c00      	cmp	r4, #0
 8014c0a:	f04f 0500 	mov.w	r5, #0
 8014c0e:	bfbe      	ittt	lt
 8014c10:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8014c14:	4133      	asrlt	r3, r6
 8014c16:	18e4      	addlt	r4, r4, r3
 8014c18:	ea24 0407 	bic.w	r4, r4, r7
 8014c1c:	e7e0      	b.n	8014be0 <floor+0x48>
 8014c1e:	2e33      	cmp	r6, #51	@ 0x33
 8014c20:	dd0a      	ble.n	8014c38 <floor+0xa0>
 8014c22:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8014c26:	d103      	bne.n	8014c30 <floor+0x98>
 8014c28:	4602      	mov	r2, r0
 8014c2a:	460b      	mov	r3, r1
 8014c2c:	f7ed f8c0 	bl	8001db0 <__adddf3>
 8014c30:	ec41 0b10 	vmov	d0, r0, r1
 8014c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c38:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8014c3c:	f04f 37ff 	mov.w	r7, #4294967295
 8014c40:	40df      	lsrs	r7, r3
 8014c42:	4207      	tst	r7, r0
 8014c44:	d0f4      	beq.n	8014c30 <floor+0x98>
 8014c46:	a310      	add	r3, pc, #64	@ (adr r3, 8014c88 <floor+0xf0>)
 8014c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c4c:	f7ed f8b0 	bl	8001db0 <__adddf3>
 8014c50:	2200      	movs	r2, #0
 8014c52:	2300      	movs	r3, #0
 8014c54:	f7ed fcf2 	bl	800263c <__aeabi_dcmpgt>
 8014c58:	2800      	cmp	r0, #0
 8014c5a:	d0c1      	beq.n	8014be0 <floor+0x48>
 8014c5c:	2c00      	cmp	r4, #0
 8014c5e:	da0a      	bge.n	8014c76 <floor+0xde>
 8014c60:	2e14      	cmp	r6, #20
 8014c62:	d101      	bne.n	8014c68 <floor+0xd0>
 8014c64:	3401      	adds	r4, #1
 8014c66:	e006      	b.n	8014c76 <floor+0xde>
 8014c68:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8014c6c:	2301      	movs	r3, #1
 8014c6e:	40b3      	lsls	r3, r6
 8014c70:	441d      	add	r5, r3
 8014c72:	4545      	cmp	r5, r8
 8014c74:	d3f6      	bcc.n	8014c64 <floor+0xcc>
 8014c76:	ea25 0507 	bic.w	r5, r5, r7
 8014c7a:	e7b1      	b.n	8014be0 <floor+0x48>
 8014c7c:	2500      	movs	r5, #0
 8014c7e:	462c      	mov	r4, r5
 8014c80:	e7ae      	b.n	8014be0 <floor+0x48>
 8014c82:	bf00      	nop
 8014c84:	f3af 8000 	nop.w
 8014c88:	8800759c 	.word	0x8800759c
 8014c8c:	7e37e43c 	.word	0x7e37e43c
 8014c90:	bff00000 	.word	0xbff00000
 8014c94:	000fffff 	.word	0x000fffff

08014c98 <round>:
 8014c98:	ec51 0b10 	vmov	r0, r1, d0
 8014c9c:	b570      	push	{r4, r5, r6, lr}
 8014c9e:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8014ca2:	460b      	mov	r3, r1
 8014ca4:	4605      	mov	r5, r0
 8014ca6:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 8014caa:	2a13      	cmp	r2, #19
 8014cac:	dc1b      	bgt.n	8014ce6 <round+0x4e>
 8014cae:	2a00      	cmp	r2, #0
 8014cb0:	da0b      	bge.n	8014cca <round+0x32>
 8014cb2:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 8014cb6:	3201      	adds	r2, #1
 8014cb8:	bf04      	itt	eq
 8014cba:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 8014cbe:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 8014cc2:	2200      	movs	r2, #0
 8014cc4:	4619      	mov	r1, r3
 8014cc6:	4610      	mov	r0, r2
 8014cc8:	e015      	b.n	8014cf6 <round+0x5e>
 8014cca:	4c15      	ldr	r4, [pc, #84]	@ (8014d20 <round+0x88>)
 8014ccc:	4114      	asrs	r4, r2
 8014cce:	ea04 0601 	and.w	r6, r4, r1
 8014cd2:	4306      	orrs	r6, r0
 8014cd4:	d00f      	beq.n	8014cf6 <round+0x5e>
 8014cd6:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8014cda:	fa41 f202 	asr.w	r2, r1, r2
 8014cde:	4413      	add	r3, r2
 8014ce0:	ea23 0304 	bic.w	r3, r3, r4
 8014ce4:	e7ed      	b.n	8014cc2 <round+0x2a>
 8014ce6:	2a33      	cmp	r2, #51	@ 0x33
 8014ce8:	dd08      	ble.n	8014cfc <round+0x64>
 8014cea:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8014cee:	d102      	bne.n	8014cf6 <round+0x5e>
 8014cf0:	4602      	mov	r2, r0
 8014cf2:	f7ed f85d 	bl	8001db0 <__adddf3>
 8014cf6:	ec41 0b10 	vmov	d0, r0, r1
 8014cfa:	bd70      	pop	{r4, r5, r6, pc}
 8014cfc:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 8014d00:	f04f 34ff 	mov.w	r4, #4294967295
 8014d04:	40f4      	lsrs	r4, r6
 8014d06:	4204      	tst	r4, r0
 8014d08:	d0f5      	beq.n	8014cf6 <round+0x5e>
 8014d0a:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 8014d0e:	2201      	movs	r2, #1
 8014d10:	408a      	lsls	r2, r1
 8014d12:	1952      	adds	r2, r2, r5
 8014d14:	bf28      	it	cs
 8014d16:	3301      	addcs	r3, #1
 8014d18:	ea22 0204 	bic.w	r2, r2, r4
 8014d1c:	e7d2      	b.n	8014cc4 <round+0x2c>
 8014d1e:	bf00      	nop
 8014d20:	000fffff 	.word	0x000fffff

08014d24 <_init>:
 8014d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d26:	bf00      	nop
 8014d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014d2a:	bc08      	pop	{r3}
 8014d2c:	469e      	mov	lr, r3
 8014d2e:	4770      	bx	lr

08014d30 <_fini>:
 8014d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d32:	bf00      	nop
 8014d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014d36:	bc08      	pop	{r3}
 8014d38:	469e      	mov	lr, r3
 8014d3a:	4770      	bx	lr
